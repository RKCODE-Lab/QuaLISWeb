{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\PreRegDesignPopUp.jsx\";\nimport React from 'react';\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport device from 'current-device'; // import MoreOptions from '../../components/configureui/MoreOptions';\n\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\nimport { connect } from 'react-redux';\nimport { updateStore, crudMaster, getTableColumns, getForeignTableData, getDynamicFilter, getDynamicFilterExecuteData } from '../../actions/index';\nimport { condition, SampleType, transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, validateCreateView } from '../../components/CommonScript';\nimport AlertModal from './AlertModal';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { getChildComponentForeignKey, getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\nimport { InstrumentDefaultTemplate, productDefaultTemplate, MaterialDefaultTemplate, clinicalTypeDefaultTemplateWithoutProduct, clinicalTypeDefaultTemplateWithProduct, projectDefaultTemplate, clinicalTemplateWithExternalOrder } from './DefaultTemplates';\nimport { ReactComponents } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { toast } from 'react-toastify';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegDesignPopUp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateDynamicDesign = () => {\n      let valid = this.validateTemplate(this.state.design);\n\n      if (!valid) {\n        return null;\n      } else {\n        this.setState({\n          openAlertModal: true,\n          templatename: \"\"\n        });\n      }\n    };\n\n    this.showPropFilter = () => {\n      const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      if (selectedFieldRecord.inputtype === 'backendsearchfilter') {\n        if (selectedFieldRecord.label !== '' && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\n          const inputparam = {\n            component: selectedFieldRecord,\n            userinfo: this.props.Login.userInfo,\n            type: 'design',\n            selectedComponentpath: this.state.selectedComponentpath\n          };\n          this.props.getDynamicFilter(inputparam);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTMANDATORYFIELDS\"\n          }));\n        }\n      } else if (selectedFieldRecord.inputtype === 'frontendsearchfilter') {\n        if (selectedFieldRecord.label !== '' && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\n          const inputparam = {\n            component: selectedFieldRecord,\n            userinfo: this.props.Login.userInfo,\n            type: 'design',\n            selectedComponentpath: this.state.selectedComponentpath\n          };\n          this.props.getDynamicFilter(inputparam);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTMANDATORYFIELDS\"\n          }));\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            showFilter: !this.state.showFilter\n          }\n        };\n        this.props.updateStore(updateInfo); //  this.setState({ showFilter: !this.state.showFilter })\n      }\n    };\n\n    this.hidePropFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo); //  this.setState({ showFilter: !this.state.showFilter })\n    };\n\n    this.setLayout = (design, splitDropZonePath, remove, removeChild) => {\n      let selectedFieldRecord = {};\n\n      if (remove === undefined) {\n        selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"));\n      } else if (removeChild) {\n        let childRecord = {};\n        this.state.toBeDeleted.deleteComponent.child.map(myChild => {\n          childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n          childRecord['childValue'] = undefined;\n          childRecord['parentPath'] = undefined;\n          childRecord['valuecolumn'] = undefined;\n          design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n          return null;\n        });\n      }\n\n      design = this.updatePath(design); // if (selectedFieldRecord.child) {\n      //     let childRecord = {}\n      //     selectedFieldRecord.child.map(myChild => {\n      //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\n      //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\n      //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\n      //         return null;\n      //     })\n      // }\n      // if (selectedFieldRecord.childValue) {\n      //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n      //     let newChildData = []\n      //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\n      //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\n      //         newChildData.push(child))\n      //     parentData = { ...parentData, child: newChildData };\n      //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\n      // }\n\n      const components = this.getComponents(design).components;\n      let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n      this.setState({\n        showConfirmAlert: false,\n        toBeDeleted: {},\n        design,\n        selectedFieldRecord: selectedFieldRecord,\n        components,\n        validComponents,\n        selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath\n      });\n    };\n\n    this.updatePath = design => {\n      design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n        if (componnetrow.hasOwnProperty('children')) {\n          componnetrow.children.map((component, compIndex) => {\n            if (component.inputtype !== 'radio') {\n              if (component.child) {\n                let newChild = [];\n                component.child.map(childComp => {\n                  const obj = this.getIndexByLabel(design, childComp.label);\n                  newChild.push({ ...childComp,\n                    childPath: obj.path\n                  });\n                  const newObj = { ...obj.object,\n                    parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                  };\n                  design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n                });\n                component = { ...component,\n                  child: newChild\n                };\n                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n              }\n            } else {\n              if (component.child) {\n                let newChild = [];\n                component.child.map(childComp => {\n                  const obj = this.getIndexByLabel(design, childComp.label);\n                  newChild.push({ ...childComp,\n                    childPath: obj.path\n                  });\n                  const newObj = { ...obj.object,\n                    radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                  };\n                  design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n                });\n                component = { ...component,\n                  child: newChild\n                };\n                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n              }\n            }\n          });\n        } else {\n          if (componnetrow.inputtype !== 'radio') {\n            if (componnetrow.child) {\n              let newChild = [];\n              componnetrow.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              componnetrow = { ...componnetrow,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n            }\n          } else {\n            if (componnetrow.child) {\n              let newChild = [];\n              componnetrow.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              componnetrow = { ...componnetrow,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n            }\n          }\n        }\n      })));\n      return design;\n    };\n\n    this.validateDelete = (design, splitDropZonePath) => {\n      const path = splitDropZonePath.split(\"-\");\n      let showAlert = false;\n      let toBeDeleted = {}; // let component = {}\n      // let row = this.state.design[path[0]]\n      // let column = row.children[path[1]]\n      // let compRow = column.children[path[2]]\n      // if (compRow.type === 'componentrow')\n      //     component = compRow.children[path[3]]\n      // else\n      //     component = compRow\n\n      let component = getcomponentdata(this.state.design, path);\n\n      if (component.child && component.child.length > 0) {\n        let childRecord = {};\n\n        if (component.inputtype === 'radio') {\n          component.child.map(myChild => {\n            childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n            delete childRecord[\"radioparentLabel\"];\n            delete childRecord[\"selectedrecordbasedhide\"];\n            delete childRecord[\"recordbasedhide\"];\n            delete childRecord[\"radioparent\"];\n            delete childRecord[\"radioparentPath\"];\n            delete childRecord[\"recordbasedshowhide\"];\n            delete childRecord[\"recordbasedreadonly\"];\n            design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n            return null;\n          });\n        } else {\n          component.child.map(myChild => {\n            childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n            childRecord['childValue'] = undefined;\n            childRecord['parentPath'] = undefined;\n            childRecord['valuecolumn'] = undefined;\n\n            if (myChild.componentcode !== ReactComponents.COMBO) {\n              childRecord['column'] = undefined;\n            }\n\n            design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n            return null;\n          });\n        }\n\n        showAlert = true;\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        }; // this.showAlert(true, toBeDeleted);\n      }\n\n      if (component.childValue) {\n        let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (component.radioparent) {\n        let parentData = getcomponentdata(this.state.design, component.radioparentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.radioparentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (showAlert) {\n        this.showAlert(true, toBeDeleted);\n      } else {\n        this.setLayout(design, splitDropZonePath, true);\n      }\n    };\n\n    this.confirmAlert = () => {\n      this.confirmMessage.confirm(this.props.intl.formatMessage({\n        id: \"IDS_WARNING\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_WARNING\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true), undefined, () => this.showAlert(false));\n    };\n\n    this.showAlert = (bool, toBeDeleted) => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showConfirmAlert: bool, toBeDeleted }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        showConfirmAlert: bool,\n        toBeDeleted\n      });\n    };\n\n    this.onclickcomponent = (event, data, path) => {\n      const selectedFieldRecord = { ...data\n      };\n      const obj = this.getComponents(this.state.design); //console.log(\"obj:\", obj);\n\n      const components = obj.components;\n      let dateComponents = obj.dateComponents;\n\n      if (data.inputtype === \"date\") {\n        const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\n        dateComponents = filterDataComponents;\n      }\n\n      let componentData = {\n        components,\n        selectedComponentpath: path\n      };\n      let parentRadioValue = [];\n\n      if ((selectedFieldRecord.componentcode === ReactComponents.COMBO || selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) && selectedFieldRecord.source !== undefined && (this.props.Login.columnInfo === undefined || this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\n        this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n      } else {\n        const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n        let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\n        let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.radioparentPath) {\n            let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        } else {\n          if (selectedFieldRecord.radioparentPath) {\n            if (selectedFieldRecord.radioparentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n              if (oldParentData.hasOwnProperty('child')) {\n                oldParentData.child.map(item => {\n                  if (item.label === selectedFieldRecord.label) {\n                    parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                      return {\n                        value: item.id,\n                        label: item.text,\n                        item\n                      };\n                    });\n                  }\n                });\n              }\n            }\n          }\n        }\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          if (this.props.Login.columnInfo && selectedFieldRecord.childValue && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\n            tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\n            filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\n            this.setState({\n              selectedComponentpath: path,\n              selectedFieldRecord: selectedFieldRecord,\n              components,\n              tableColumn,\n              filterColumns,\n              validComponents,\n              parentRadioValue,\n              showFilter: false\n            });\n          } else {\n            if (selectedFieldRecord.childValue) {\n              this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n            } else {\n              this.setState({\n                selectedComponentpath: path,\n                selectedFieldRecord: selectedFieldRecord,\n                components,\n                tableColumn,\n                filterColumns,\n                dateComponents,\n                validComponents,\n                parentRadioValue,\n                showFilter: false\n              });\n            }\n          }\n        } else {\n          this.setState({\n            selectedComponentpath: path,\n            selectedFieldRecord: selectedFieldRecord,\n            components,\n            tableColumn,\n            filterColumns,\n            dateComponents,\n            validComponents,\n            parentRadioValue,\n            showFilter: false\n          });\n        }\n      }\n    };\n\n    this.getComponents = design => {\n      let components = [];\n      let dateComponents = [{\n        label: \"Current Date\",\n        value: \"utccurrentdate\"\n      }];\n      design.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label\n                });\n                componnetrow.label && components.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label,\n                  nformcode: componnetrow.nformcode,\n                  // item: componnetrow,\n                  inputtype: componnetrow.inputtype,\n                  source: componnetrow.source,\n                  nquerybuildertablecode: componnetrow.nquerybuildertablecode,\n                  child: componnetrow.child,\n                  valuemember: componnetrow.valuemember,\n                  path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\n                });\n              });\n            } else {\n              componnet.inputtype === 'date' && componnet.label && dateComponents.push({\n                label: componnet.label,\n                value: componnet.label\n              });\n              componnet.label && components.push({\n                label: componnet.label,\n                value: componnet.label,\n                nformcode: componnet.nformcode,\n                // item: componnet,\n                inputtype: componnet.inputtype,\n                source: componnet.source,\n                nquerybuildertablecode: componnet.nquerybuildertablecode,\n                child: componnet.child,\n                valuemember: componnet.valuemember,\n                path: `${rowIndex}-${columnIndex}-${compindex}-0`\n              });\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n      return {\n        components,\n        dateComponents\n      };\n    };\n\n    this.getValueMembers = selectedFieldRecord => {\n      if (selectedFieldRecord.childValue) {\n        let valueColumn = [];\n        this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\n          if (x.foriegntablename === selectedFieldRecord.childValue.source) valueColumn.push({\n            label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\n            value: x.tablecolumnname,\n            item: {\n              foriegntablePK: x.foriegntablePK\n            }\n          });\n          return null;\n        });\n\n        if (valueColumn.length) {\n          return valueColumn;\n        } else {\n          this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\n            if (x.foriegntablename === selectedFieldRecord.source) valueColumn.push({\n              label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\n              value: x.tablecolumnname,\n              item: {\n                foriegntablePK: x.foriegntablePK\n              }\n            });\n            return null;\n          });\n          return valueColumn;\n        }\n      } else {\n        return null;\n      }\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      const selectedRecord = this.state.selectedRecord || {};\n      let chillabelUpdate = false;\n      let newLabel = \"\";\n      let oldLabel = \"\";\n\n      if (event.target.type === 'checkbox') {\n        if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\n          let design = this.state.design;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n\n          if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\n            // let design = this.state.design\n            if (selectedFieldRecord.radioparentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), oldParentData);\n              }\n\n              delete selectedFieldRecord[\"radioparentLabel\"];\n              delete selectedFieldRecord[\"selectedrecordbasedhide\"];\n              delete selectedFieldRecord[\"recordbasedhide\"];\n              delete selectedFieldRecord[\"radioparent\"];\n            }\n\n            selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\n          if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\n            selectedFieldRecord['loadcurrentdate'] = false;\n          } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\n            selectedFieldRecord['loadselecteddate'] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === \"unique\") {\n          //     const design = this.state.design\n          //  let listUnique=[]\n          //  if(event.target.checked){\n          //     design && design.map(row => {\n          //         return  row.children.map(column => {\n          //              return column.children.map(component => {\n          //                   if (component.hasOwnProperty(\"children\")) {\n          //                      return component.children.map(componentrow => {\n          //                        if(componentrow.unique){\n          //                         listUnique.push(componentrow.unique)\n          //                        }\n          //                       }) \n          //                   }\n          //                   else {\n          //                     if(component.unique){\n          //                         listUnique.push(component.unique)\n          //                     }\n          //                   }\n          //               }\n          //               )\n          //           })\n          //       })   \n          //     }\n          //       if(listUnique.length===0){\n          //         selectedFieldRecord[event.target.name] = event.target.checked;\n          //         this.saveComponentProperties(selectedFieldRecord)\n          //       }else{\n          //           toast.info(\"Unique Must Be One Field\")\n          //           selectedFieldRecord[event.target.name] = false;\n          //         this.saveComponentProperties(selectedFieldRecord)\n          //         //  this.setState({design})\n          //       }\n          // selectedFieldRecord[event.target.name] = event.target.checked;\n          selectedFieldRecord[event.target.name] = selectedFieldRecord[\"mandatory\"] === false || selectedFieldRecord[\"mandatory\"] === undefined ? false : event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isAddMaster' || event.target.name === 'isView' || event.target.name === 'isEditMaster') {\n          // if (event.target.name === 'isAddMaster') {\n          //     if (event.target.checked) {\n          //         selectedFieldRecord['isView'] = false\n          //     }\n          // } else {\n          //     if (event.target.checked) {\n          //         selectedFieldRecord['isAddMaster'] = false\n          //     }\n          // }\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'autoFocus') {\n          if (event.target.checked === true) {\n            const val = this.checkAutoFocus();\n\n            if (val === '') {\n              selectedFieldRecord[event.target.name] = event.target.checked;\n              this.saveComponentProperties(selectedFieldRecord);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_ALREADYFOCUSAPPLIEDON\"\n              }) + ' ' + val);\n            }\n          } else {\n            selectedFieldRecord[event.target.name] = event.target.checked;\n            this.saveComponentProperties(selectedFieldRecord);\n          }\n        } else if (event.target.name === 'isalphabetcaptial') {\n          selectedFieldRecord['isalphabetcaptial'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isnumeric') {\n          selectedFieldRecord['isnumeric'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isalphanumeric') {\n          selectedFieldRecord['isalphanumeric'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          delete selectedFieldRecord['ncasesensitive'];\n          delete selectedFieldRecord['ncaptialletters'];\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['nmaxletters'];\n          delete selectedFieldRecord['nmaxnumeric'];\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isnumericspl') {\n          selectedFieldRecord['isnumericspl'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          delete selectedFieldRecord['nmaxnumeric'];\n          delete selectedFieldRecord['nsplchar'];\n          delete selectedFieldRecord['naviodsplchar'];\n          delete selectedFieldRecord['nsplchar'];\n          delete selectedFieldRecord['nsplcharnotallow'];\n          delete selectedFieldRecord['ncasesensitive'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isalphabetsmall') {\n          selectedFieldRecord['isalphabetsmall'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isalphabetspl'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'isalphabetspl') {\n          selectedFieldRecord['isalphabetspl'] = event.target.checked ? true : false;\n          selectedFieldRecord['isalphabetsmall'] = false;\n          selectedFieldRecord['isalphanumeric'] = false;\n          selectedFieldRecord['isalphabetcaptial'] = false;\n          selectedFieldRecord['isnumeric'] = false;\n          selectedFieldRecord['isnumericspl'] = false;\n          delete selectedFieldRecord['ncasesensitive'];\n          delete selectedFieldRecord['ncaptialletters'];\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['nmaxletters'];\n          delete selectedFieldRecord['nmaxnumeric'];\n          delete selectedFieldRecord['naviodsplchar'];\n          delete selectedFieldRecord['nsplchar'];\n          delete selectedFieldRecord['nsplcharnotallow'];\n          selectedFieldRecord['ncustomization'] = false;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'ncustomization' && event.target.checked === false) {\n          selectedFieldRecord['ncustomization'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nmaxletters'];\n          delete selectedFieldRecord['nmaxnumeric'];\n          delete selectedFieldRecord['nsplchar'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'naviodsplchar' && event.target.checked === false) {\n          selectedFieldRecord['naviodsplchar'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nsplcharnotallow'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'ncasesensitive') {\n          selectedFieldRecord['ncasesensitive'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['ncaptialletters'];\n          delete selectedFieldRecord['nmaxcapticalletters'];\n          delete selectedFieldRecord['nmaxsmallletters'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'ncaptialletters') {\n          selectedFieldRecord['ncaptialletters'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['nsmallletters'];\n          delete selectedFieldRecord['ncasesensitive'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else if (event.target.name === 'nsmallletters') {\n          selectedFieldRecord['nsmallletters'] = event.target.checked ? true : false;\n          delete selectedFieldRecord['ncasesensitive'];\n          delete selectedFieldRecord['ncaptialletters'];\n          this.saveComponentProperties(selectedFieldRecord);\n        } else {\n          if (event.target.name === 'timeonly') {\n            selectedFieldRecord['dateonly'] = false;\n          }\n\n          if (event.target.name === 'dateonly') {\n            selectedFieldRecord['timeonly'] = false;\n          }\n\n          if (event.target.name === 'mandatory') {\n            //  if (event.target.checked === false) {\n            if (selectedFieldRecord['unique']) {\n              selectedFieldRecord['unique'] = false;\n            } // }\n\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        }\n      } // else if (event.target.name === 'templatename') {\n      //     if (event.target.value !== \"\") {\n      //         event.target.value = validateCreateView(event.target.value);\n      //         selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n      //     } else {\n      //         selectedRecord[event.target.name] = event.target.value;\n      //     }\n      //     this.setState({ selectedRecord });\n      // }\n      else {\n        if (name === 'synonym') {\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            [event.target.name]: event.target.value\n          };\n        }\n\n        if (event.target.name === 'label') {\n          const langArray = this.props.Login.languageList;\n          const langDataObject = {};\n          langArray.map(item => langDataObject[item.value] = event.target.value);\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            ...langDataObject\n          };\n          chillabelUpdate = true;\n          newLabel = event.target.value;\n          oldLabel = selectedFieldRecord[event.target.name];\n          selectedFieldRecord[event.target.name] = event.target.value;\n        } else {\n          selectedFieldRecord[event.target.name] = event.target.value;\n        }\n\n        this.saveComponentProperties(selectedFieldRecord, chillabelUpdate, oldLabel, newLabel);\n      }\n    };\n\n    this.checkAutoFocus = () => {\n      let val = '';\n      this.state.design.map(item => item.children.map(column => column.children.map(componnet => {\n        if (componnet.hasOwnProperty('children')) {\n          componnet.children.map(componnetrow => {\n            if (componnetrow.inputtype === 'combo') {\n              if (componnetrow.autoFocus) {\n                val = componnetrow.label;\n              }\n            }\n          });\n        } else {\n          if (componnet.inputtype === 'combo') {\n            if (componnet.autoFocus) {\n              val = componnet.label;\n            }\n          }\n        }\n      })));\n      return val;\n    };\n\n    this.onNumericInputChange = (event, columnname) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      let value = event.target.value;\n\n      if (!isNaN(value)) {\n        // if (parseInt(value) < 10) {\n        selectedFieldRecord[event.target.name] = value;\n        this.saveComponentProperties(selectedFieldRecord); // }\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord[dateName] = dateValue;\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n\n      if (selectedFieldRecord.label) {\n        if (comboName === 'table') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['source'] = comboData.item.stablename;\n          selectedFieldRecord['nformcode'] = comboData.item.nformcode;\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode;\n          }\n\n          selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\n          selectedFieldRecord['isAddMaster'] = false;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          }; //if(comboData.item.stablename==='unit'){\n          // newdata['isAddNewRecord']=true;\n          //}\n\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n\n          if (selectedFieldRecord.inputtype === 'frontendsearchfilter' || selectedFieldRecord.inputtype === 'backendsearchfilter') {\n            this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n              validComponents: this.state.validComponents\n            });\n          } else {\n            this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo);\n          }\n        } else if (comboName === 'column') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['displaymember'] = comboData.value;\n\n          if (comboData.item.ismultilingual) {\n            selectedFieldRecord['isMultiLingual'] = true;\n          }\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['name'] = comboData.value;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'childValue') {\n          if (comboData) {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design;\n\n            if (selectedFieldRecord.parentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData);\n              }\n            }\n\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['childValue'] = comboData;\n            selectedFieldRecord['parentPath'] = comboData.path;\n\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              selectedFieldRecord['parentLabel'] = comboData.label;\n            }\n\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions.length === 1) {\n                const foriegntablePK = getChildComponentForeignKey(selectedFieldRecord, comboData, this.props.Login.columnInfo);\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  foriegntablePK: foriegntablePK,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath,\n                  isDynamicMapping: selectedFieldRecord.valuemember === \"ndynamicmastercode\" ? true : false\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              let parentRadioValue = this.state.parentRadioValue || [];\n              parentRadioValue = parentData.radioOptions.tags.map(item => {\n                return {\n                  value: item.id,\n                  label: item.text,\n                  item\n                };\n              });\n              this.setState({\n                design,\n                selectedFieldRecord,\n                parentRadioValue\n              });\n            } else {\n              this.props.getTableColumns(design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n                components: this.state.components,\n                selectedComponentpath: this.state.selectedComponentpath\n              }, true);\n            }\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n            selectedFieldRecord['childValue'] = comboData;\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) selectedFieldRecord['column'] = comboData;\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === 'valuecolumn') {\n          selectedFieldRecord['valuecolumn'] = comboData;\n          let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n          let newChildData = [];\n          parentData.child.map(child => {\n            if (child.label === selectedFieldRecord.label) {\n              newChildData.push({ ...child,\n                tablecolumnname: comboData.value,\n                foriegntablePK: comboData.item.foriegntablePK,\n                isDynamicMapping: selectedFieldRecord.valuemember === \"ndynamicmastercode\" ? true : false\n              });\n            } else {\n              newChildData.push(child);\n            }\n\n            return null;\n          });\n          parentData = { ...parentData,\n            child: newChildData\n          };\n          let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'filtercolumn') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord.filtervalue = \"\";\n          selectedFieldRecord.staticfiltervalue = \"\";\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n\n          if (comboData.type !== 'numeric') {\n            this.setState({\n              design,\n              selectedFieldRecord\n            });\n          } else {\n            this.props.getForeignTableData(design, selectedFieldRecord, '', this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n              components: this.state.components,\n              selectedComponentpath: this.state.selectedComponentpath\n            }, true);\n          }\n        } else if (comboName === 'customsearchfilter') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['filterfields'] = [];\n          this.state.selectedFieldRecord[comboName].map(data => {\n            return selectedFieldRecord['filterfields'].push(data.item['item'] ? {\n              type: data.type,\n              ...data.item['item']\n            } : data.item);\n          });\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'selectedrecordbasedhide') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['recordbasedhide'] = comboData.value;\n\n          if (comboData.item.ismultilingual) {\n            selectedFieldRecord['isMultiLingual'] = true;\n          }\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['name'] = comboData.value;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'radioparent') {\n          if (comboData) {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design;\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['radioparent'] = comboData;\n            selectedFieldRecord['radioparentPath'] = comboData.path;\n            selectedFieldRecord['radioparentLabel'] = comboData.label;\n            delete selectedFieldRecord['recordbasedhide'];\n            delete selectedFieldRecord[\"selectedrecordbasedhide\"];\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions !== null && valueMemberOptions.length === 1) {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData);\n            let parentRadioValue = this.state.parentRadioValue || [];\n            parentRadioValue = parentData.radioOptions && parentData.radioOptions.tags.map(item => {\n              return {\n                value: item.id,\n                label: item.text,\n                item\n              };\n            });\n            this.setState({\n              design,\n              selectedFieldRecord,\n              parentRadioValue\n            });\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), parentData);\n            selectedFieldRecord['radioparent'] = comboData;\n            selectedFieldRecord['selectedrecordbasedhide'] = comboData;\n            delete selectedFieldRecord['recordbasedhide'];\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === \"period\") {\n          if (comboData) {\n            selectedFieldRecord[comboName] = comboData;\n            selectedFieldRecord['nperiodcode'] = comboData.value;\n            selectedFieldRecord['nperioddata'] = comboData.item.ndata;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            this.setState({\n              design,\n              selectedFieldRecord\n            });\n          } else {\n            selectedFieldRecord[comboName] = comboData;\n            delete selectedFieldRecord['nperiodcode'];\n            delete selectedFieldRecord['nperioddata'];\n            delete selectedFieldRecord['windowperiod'];\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            this.setState({\n              design,\n              selectedFieldRecord\n            });\n          }\n        } else if (comboName === \"staticfiltertable\") {\n          if (comboData) {\n            selectedFieldRecord[comboName] = comboData;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            const list = JSON.parse(comboData.item.jsondata.value).jcolumnname;\n            const staticfiltercolumn = list.map(x => {\n              // x['displayname']= x['displayname'][this.props.Login.userInfo.slanguagetypecode]\n              return {\n                label: x['displayname'][this.props.Login.userInfo.slanguagetypecode],\n                value: x['displayname'][this.props.Login.userInfo.slanguagetypecode],\n                item: x\n              };\n            });\n            this.setState({\n              design,\n              selectedFieldRecord,\n              staticfiltercolumn\n            });\n          } else {\n            selectedFieldRecord[comboName] = comboData;\n            delete selectedFieldRecord['staticfiltercolumn'];\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            const newdata = { ...selectedFieldRecord\n            };\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n            this.setState({\n              design,\n              selectedFieldRecord,\n              staticfiltercolumn: []\n            });\n          }\n        } else if (comboName === \"radiodefaultvalue\") {\n          selectedFieldRecord[comboName] = comboData;\n          const newdata = { ...selectedFieldRecord\n          };\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === \"radiodefaultvaluemulti\") {\n          //     selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['radiodefaultvalue'] = [];\n          comboData.map(data => {\n            return selectedFieldRecord['radiodefaultvalue'].push({ ...data\n            });\n          });\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else {\n          selectedFieldRecord[comboName] = comboData;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERLABEL\"\n        }));\n      }\n    };\n\n    this.addTag = tags => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord['radioOptions'] = tags;\n\n      if (selectedFieldRecord['radiodefaultvalue']) {\n        if (Array.isArray(selectedFieldRecord['radiodefaultvalue'])) {\n          let list = [];\n          tags.tags.map(x => {\n            selectedFieldRecord['radiodefaultvalue'].map(y => {\n              if (x.text === y.label) {\n                list.push({ ...y\n                });\n              }\n            });\n          });\n          selectedFieldRecord['radiodefaultvalue'] = list.length > 0 ? list : undefined;\n        } else {\n          const list = tags.tags.filter(x => x.text === selectedFieldRecord['radiodefaultvalue'].label);\n          if (list.length === 0) selectedFieldRecord['radiodefaultvalue'] = undefined;\n        }\n      }\n\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.addCondition = () => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let filterColumnName;\n      let filterValue;\n      let conditionString;\n      let conditionArrayString;\n      let selectedStaticfiltertable = {};\n\n      if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltercolumn'] || selectedFieldRecord['staticfiltercolumn'])) {\n        selectedStaticfiltertable = JSON.parse(selectedFieldRecord[\"staticfiltertable\"].item.jsondata.value);\n\n        switch (selectedFieldRecord[\"filtercolumn\"].type) {\n          case 'static':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          case 'dynamic':\n            {\n              filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          case 'numeric':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltercolumn.label,\n                value: selectedFieldRecord.staticfiltercolumn.item.columnname\n              };\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        switch (selectedFieldRecord[\"condition\"].value) {\n          case condition.EQUALS:\n            conditionString = filterColumnName + \" = P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.NOTEQUALS:\n            conditionString = filterColumnName + \" P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.STARTSWITH:\n            conditionString = filterColumnName + \" like 'P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\" + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label;\n            break;\n\n          case condition.ENDSWITH:\n            conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label;\n            break;\n\n          case condition.INCLUDES:\n            conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label;\n            break;\n          // case condition.CONTAINS:\n          //     conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\n          //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\n          //     break;\n          // case condition.NOTCONTAINS:\n          //     conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\n          //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\n          //     break;\n\n          default:\n            break;\n        }\n\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\n        conditionArrayUI.push(conditionArrayString);\n        conditionArraySQL.push(conditionString);\n        selectedFieldRecord = { ...selectedFieldRecord,\n          filtercolumn: \"\",\n          condition: \"\",\n          staticfiltervalue: undefined,\n          filtervalue: \"\",\n          staticfiltertable: \"\",\n          nsystemconfiguration: false,\n          conditionArrayUI,\n          conditionArraySQL,\n          staticfiltercolumn: \"\"\n        };\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      } else if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\n        switch (selectedFieldRecord[\"filtercolumn\"].type) {\n          case 'static':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'dynamic':\n            {\n              filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'numeric':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\n              filterValue = selectedFieldRecord.filtervalue;\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        switch (selectedFieldRecord[\"condition\"].value) {\n          case condition.EQUALS:\n            conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.NOTEQUALS:\n            conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.STARTSWITH:\n            conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label;\n            break;\n\n          case condition.ENDSWITH:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label;\n            break;\n\n          case condition.INCLUDES:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label;\n            break;\n\n          case condition.CONTAINS:\n            conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          case condition.NOTCONTAINS:\n            conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          default:\n            break;\n        }\n\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\n        conditionArrayUI.push(conditionArrayString);\n        conditionArraySQL.push(conditionString);\n        selectedFieldRecord = { ...selectedFieldRecord,\n          filtercolumn: \"\",\n          condition: \"\",\n          staticfiltervalue: undefined,\n          filtervalue: \"\",\n          conditionArrayUI,\n          conditionArraySQL,\n          nsystemconfiguration: false,\n          staticfiltercolumn: \"\"\n        };\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALUES\"\n        }));\n      }\n\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord,\n        staticfiltercolumn: \"\"\n      });\n    };\n\n    this.deleteCondition = index => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\n      let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\n      conditionArrayUI.splice(index, 1);\n      conditionArraySQL.splice(index, 1);\n      selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\n      selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\n      selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.addDateConstraints = () => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let filterColumnName;\n\n      if (selectedFieldRecord['condition'] && selectedFieldRecord['filtervalue']) {\n        filterColumnName = selectedFieldRecord.filtervalue.value;\n        let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI || [];\n        let dateConstraintArraySQL = selectedFieldRecord.cdateConstraintArraySQL || [];\n        dateConstraintArrayUI.push(selectedFieldRecord.label + ' ' + selectedFieldRecord['condition'].label + ' ' + selectedFieldRecord['filtervalue'].label);\n        dateConstraintArraySQL.push({\n          parentdate: selectedFieldRecord.label,\n          constraint: selectedFieldRecord['condition'].value,\n          childdate: filterColumnName\n        });\n        selectedFieldRecord = { ...selectedFieldRecord,\n          condition: \"\",\n          filtervalue: \"\",\n          dateConstraintArrayUI,\n          dateConstraintArraySQL\n        };\n        const splititemarray = this.state.selectedComponentpath.split(\"-\");\n        const newdata = { ...selectedFieldRecord\n        };\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n        this.setState({\n          design,\n          selectedFieldRecord\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALUES\"\n        }));\n      }\n    };\n\n    this.deleteDateCondition = index => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI;\n      let dateConstraintArraySQL = selectedFieldRecord.dateConstraintArraySQL;\n      dateConstraintArrayUI.splice(index, 1);\n      dateConstraintArraySQL.splice(index, 1);\n      selectedFieldRecord['dateConstraintArrayUI'] = dateConstraintArrayUI;\n      selectedFieldRecord['dateConstraintArraySQL'] = dateConstraintArraySQL;\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.saveComponentProperties = (selectedFieldRecord, childLabelUpdate, oldLabelName, newLabelName) => {\n      const splititemarray = this.state.selectedComponentpath.split(\"-\"); // const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      const newdata = { ...selectedFieldRecord\n      };\n      let design1 = this.state.design;\n\n      if (childLabelUpdate) {\n        design1 = this.updateLabelName(this.state.design, oldLabelName, newLabelName);\n      }\n\n      const design = replaceChildFromChildren(design1, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.updateLabelName = (design, oldLabelName, newLabelName) => {\n      design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n        if (componnetrow.hasOwnProperty('children')) {\n          componnetrow.children.map((component, compIndex) => {\n            if (component.child) {\n              let newChild = [];\n              component.child.map(childComp => {\n                if (childComp.label === oldLabelName) {\n                  newChild.push({ ...childComp,\n                    label: newLabelName\n                  });\n                } else {\n                  newChild.push({ ...childComp\n                  });\n                }\n              });\n              component = { ...component,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n            }\n          });\n        } else {\n          if (componnetrow.child) {\n            let newChild = [];\n            componnetrow.child.map(childComp => {\n              if (childComp.label === oldLabelName) {\n                newChild.push({ ...childComp,\n                  label: newLabelName\n                });\n              } else {\n                newChild.push({ ...childComp\n                });\n              }\n            });\n            componnetrow = { ...componnetrow,\n              child: newChild\n            };\n            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n          }\n        }\n      })));\n      return design;\n    };\n\n    this.handleSaveClick = saveType => {\n      if (this.state.selectedRecord.templatename && this.state.selectedRecord.templatename !== \"\") {\n        let inputData = [];\n        let selectedId = null;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let dataState = undefined; // let valid = this.validateTemplate(this.state.design);\n        // if (!valid) {\n        //     return null;\n        // }\n\n        if (this.props.Login.operation === \"update\") {\n          // edit\n          selectedId = this.state.selectedRecord.nchecklistqbcode;\n          dataState = this.state.dataState;\n          inputData[\"registrationtemplate\"] = {\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templatename,\n            jsonString: JSON.stringify(this.state.design),\n            jsondata: this.state.design,\n            ntransactionstatus: transactionStatus.DRAFT,\n            ndefaulttemplatecode: this.props.defaultTemplate.value\n          };\n        } else {\n          //add               \n          inputData[\"registrationtemplate\"] = {\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templatename,\n            ndefaulttemplatecode: this.props.defaultTemplate.value,\n            //ndefaulttemplatecode: this.props.Login.masterData.selectedDefaultTemplate.ndefaulttemplatecode,\n            jsonString: JSON.stringify(this.state.design),\n            ntransactionstatus: transactionStatus.DRAFT,\n            nsubsampletypecode: this.props.defaultTemplate && this.props.defaultTemplate.item.nsubsampletypecode\n          };\n        }\n\n        const masterData = { ...this.props.Login.masterData,\n          selectedDefaultTemplate: this.props.defaultTemplate\n        };\n        const postParam = {\n          inputListName: \"RegistrationTemplate\",\n          selectedObject: \"selectedTemplate\",\n          primaryKeyField: \"nreactregtemplatecode\",\n          fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: this.props.nsampletypecode\n          },\n          masterData\n        };\n        const inputParam = {\n          methodUrl: 'RegistrationTemplate',\n          classUrl: 'dynamicpreregdesign',\n          displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n          inputData: inputData,\n          postParam,\n          searchRef: this.props.searchRef,\n          operation: this.props.Login.operation,\n          saveType,\n          dataState,\n          selectedId,\n          openPortal: true,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              // openPortal:false,\n              openModal: true\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openPortal\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERTEMPLATENAME\"\n        }));\n      }\n    };\n\n    this.validateTemplate = template => {\n      let invalidComponent = [];\n      let duplicateComponents = [];\n      let insufficientMultilingualData = []; //let invalidComboComponent = [];\n      // let invalidRadioComponent = [];\n      // let invalidCheckboxComponent = [];\n      //let invalidReadOnlyComponent = [];\n\n      let incompletePropertiesComponent = [];\n      let notcompleteProperties = [];\n      let labels = [];\n      let isTemplateEmpty = false; //let uniqueComponent = []\n\n      template.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          if (column.children.length === 0) {\n            isTemplateEmpty = true;\n          } else {\n            isTemplateEmpty = false;\n          }\n\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                // if (componnetrow.unique) {\n                //     uniqueComponent.push(componnetrow.label);\n                // }\n                if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\n                  invalidComponent.push(componnetrow);\n                }\n\n                if (labels.includes(componnetrow.label)) {\n                  duplicateComponents.push(componnetrow);\n                } else {\n                  if (componnetrow.label !== undefined) labels.push(componnetrow.label);\n                }\n\n                if (componnetrow.componentcode === ReactComponents.COMBO) {\n                  if (!componnetrow.hasOwnProperty('source') && !componnetrow.hasOwnProperty('displaymember')) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.CHECKBOX) {\n                  if (!componnetrow.hasOwnProperty('radioOptions') || componnetrow.radioOptions && componnetrow.radioOptions.tags.length === 0) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.RADIO) {\n                  if (!componnetrow.hasOwnProperty('radioOptions') || componnetrow.radioOptions && componnetrow.radioOptions.tags.length < 2) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.TEXTINPUT || componnetrow.componentcode === ReactComponents.TEXTAREA) {\n                  if (componnetrow.hasOwnProperty('readonly')) {\n                    if (componnet.name && componnet.name === 'Age') {\n                      if (!componnetrow.hasOwnProperty('displaymember')) {\n                        incompletePropertiesComponent.push(componnetrow);\n                      } else {\n                        if (componnetrow.displaymember.trim === '') {\n                          incompletePropertiesComponent.push(componnetrow);\n                        }\n                      }\n                    }\n                  } else {\n                    if (!componnetrow.hasOwnProperty('sfieldlength') || componnetrow.sfieldlength.trim() === '') {\n                      incompletePropertiesComponent.push(componnetrow);\n                    }\n                  }\n                }\n\n                if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length < this.props.Login.languageList.length) {\n                  insufficientMultilingualData.push(componnetrow);\n                }\n\n                if (componnetrow.recordbasedshowhide || componnetrow.recordbasedreadonly) {\n                  if (!(componnetrow.radioparent && componnetrow.selectedrecordbasedhide)) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.DATE) {\n                  if (componnetrow.period) {\n                    if (!componnetrow.windowperiod) {\n                      incompletePropertiesComponent.push(componnetrow);\n                    }\n                  }\n                }\n              });\n            } else {\n              // if (componnet.unique) {\n              //     uniqueComponent.push(componnet.label);\n              // }\n              if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\n                invalidComponent.push(componnet);\n              }\n\n              if (labels.includes(componnet.label)) {\n                duplicateComponents.push(componnet);\n              } else {\n                if (componnet.label !== undefined) labels.push(componnet.label);\n              }\n\n              if (componnet.componentcode === ReactComponents.COMBO) {\n                if (!componnet.hasOwnProperty('source') && !componnet.hasOwnProperty('displaymember')) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.CHECKBOX) {\n                if (!componnet.hasOwnProperty('radioOptions') || componnet.radioOptions && componnet.radioOptions.tags.length === 0) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.RADIO) {\n                if (!componnet.hasOwnProperty('radioOptions') || componnet.radioOptions && componnet.radioOptions.tags.length < 2) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.TEXTINPUT || componnet.componentcode === ReactComponents.TEXTAREA) {\n                if (componnet.hasOwnProperty('readonly')) {\n                  if (componnet.name && componnet.name === 'Age') {\n                    if (!componnet.hasOwnProperty('displaymember')) {\n                      incompletePropertiesComponent.push(componnet);\n                    } else {\n                      if (componnet.displaymember.trim === '') {\n                        incompletePropertiesComponent.push(componnet);\n                      }\n                    }\n                  }\n                } else if (componnet.ncustomization) {\n                  let maxletter = parseInt(componnet.nmaxletters);\n                  let maxnumber = parseInt(componnet.nmaxnumeric);\n                  let maxsplchar = parseInt(componnet.nsplchar);\n                  let maxvalue = String(componnet.sfieldlength);\n                  let maxCaptical = parseInt(componnet.nmaxcapticalletters);\n                  let maxSmall = parseInt(componnet.nmaxsmallletters);\n                  let value; // if(componnet.ncasesensitive){\n                  //      value= maxCaptical+maxSmall\n                  //     // let maxvalue=String(componnet.sfieldlength)\n                  //      if(String(value)!==maxvalue){\n                  //         notcompleteProperties.push(componnet);}\n                  //      }else \n\n                  if (componnet.isalphanumeric) {\n                    if (componnet.ncasesensitive) {\n                      value = maxCaptical + maxSmall + maxnumber;\n                    } else {\n                      value = maxletter + maxnumber;\n                    }\n\n                    if (String(value) !== maxvalue) {\n                      notcompleteProperties.push(componnet);\n                    }\n                  } else if (componnet.isalphabetspl) {\n                    if (componnet.ncasesensitive) {\n                      value = maxCaptical + maxSmall + maxsplchar;\n                    } else {\n                      value = maxletter + maxsplchar;\n                    }\n\n                    if (String(value) !== maxvalue) {\n                      notcompleteProperties.push(componnet);\n                    }\n                  } else if (componnet.isnumericspl) {\n                    value = maxsplchar + maxnumber;\n\n                    if (String(value) !== maxvalue) {\n                      notcompleteProperties.push(componnet);\n                    }\n                  } else if (componnet.isnumeric) {\n                    if (String(value) !== maxvalue) {}\n                  } else {\n                    if (componnet.ncasesensitive) {\n                      value = maxCaptical + maxSmall + maxnumber + maxsplchar;\n                    } else {\n                      value = maxletter + maxnumber + maxsplchar;\n                    } //value= maxletter+maxnumber+maxsplchar;\n                    // let maxvalue=String(componnet.sfieldlength)\n\n\n                    if (String(value) !== maxvalue) {\n                      notcompleteProperties.push(componnet);\n                    }\n                  }\n\n                  if (componnet.hasOwnProperty('naviodsplchar') && (componnet.nsplcharnotallow === undefined || componnet.nsplcharnotallow === \"\")) {\n                    notcompleteProperties.push(componnet);\n                  }\n                } else {\n                  if (componnet.hasOwnProperty('isnumeric') && componnet.isnumeric) {\n                    if ((componnet.max === \"\" || componnet.max === undefined) && (componnet.min === \"\" || componnet.min === undefined)) {\n                      incompletePropertiesComponent.push(componnet);\n                    }\n                  } else if (!componnet.hasOwnProperty('sfieldlength') || componnet.sfieldlength.trim() === '') {\n                    incompletePropertiesComponent.push(componnet);\n                  }\n                }\n              }\n\n              if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length < this.props.Login.languageList.length) {\n                insufficientMultilingualData.push(componnet);\n              }\n\n              if (componnet.recordbasedshowhide || componnet.recordbasedreadonly) {\n                if (!(componnet.radioparent && componnet.selectedrecordbasedhide)) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.DATE) {\n                if (componnet.period) {\n                  if (!componnet.windowperiod) {\n                    incompletePropertiesComponent.push(componnet);\n                  }\n                }\n              }\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n\n      if (isTemplateEmpty) {\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_CONFIGURETEMPLATES'\n        }));\n        return false;\n      }\n\n      if (duplicateComponents.length > 0) {\n        const dataArray = [];\n        duplicateComponents.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_DUPLICATECOMPONENTSFOUND'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (invalidComponent.length > 0) {\n        const dataArray = [];\n        invalidComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_MISSINGCOMPONENTLABEL'\n        }));\n        return false;\n      }\n\n      if (insufficientMultilingualData.length > 0) {\n        const dataArray = [];\n        insufficientMultilingualData.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INSUFFICIENTMULTILINGUALDATA'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (incompletePropertiesComponent.length > 0) {\n        const dataArray = [];\n        incompletePropertiesComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INVALIDCOMPONENT'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (notcompleteProperties.length > 0) {\n        const dataArray = [];\n        notcompleteProperties.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_MISSMATCHEDVALUES'\n        }) + dataArray.join(\",\"));\n        return false;\n      } // if (this.props.nsampletypecode === SampleType.Masters) {\n      //     if (uniqueComponent.length === 0) {\n      //         const dataArray = [];\n      //         incompletePropertiesComponent.map(item => dataArray.push(item.label));\n      //         toast.warn(this.props.intl.formatMessage({ id: 'IDS_ATLEASTONEFILEDMUSTBEUNIQUE' }) + dataArray.join(\",\"));\n      //         return false;\n      //     }\n      // }\n      // if (invalidRadioComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidRadioComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDRADIOCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n      // if (invalidCheckboxComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidCheckboxComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCHECKBOXCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n      // if (invalidReadOnlyComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidReadOnlyComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDREADONLYCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n\n\n      return true;\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      let selectedFieldRecord = this.state.selectedFieldRecord || {};\n      const query = QbUtils.sqlFormat(immutableTree, config);\n      selectedFieldRecord['filterquery'] = query;\n      selectedFieldRecord['awesomeTree'] = immutableTree;\n      selectedFieldRecord['awesomeConfig'] = config;\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // awesomeTree: immutableTree,\n          // awesomeConfig: config,\n          selectedFieldRecord,\n          design\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleFilterChange = event => {\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      let selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord['kendoFilter'] = event.filter;\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // kendoFilter: event.filter\n          selectedFieldRecord,\n          design\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExecuteClick = event => {\n      const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      if (selectedFieldRecord['filterquery'] !== \"\" && selectedFieldRecord['filterquery'] !== undefined) {\n        const inputparam = {\n          component: this.state.selectedFieldRecord,\n          userinfo: this.props.Login.userInfo,\n          filterquery: selectedFieldRecord['filterquery'].replace('Invalid date', '')\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTFILTER\"\n        }));\n      }\n    };\n\n    this.confirmMessage = new ConfirmMessage(); // console.log(\"PD:\", this.props.Login.design);\n\n    this.state = {\n      nflag: 1,\n      design: this.props.Login.design,\n      // design: this.props.Login.operation === 'update' || this.props.Login.operation === \"viewdesign\" ? this.props.Login.design :\n      //     this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate :\n      //         this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate :\n      //             this.props.nsampletypecode === SampleType.MATERIAL ? MaterialDefaultTemplate :\n      //                 this.props.nsampletypecode === SampleType.PROJECTSAMPLETYPE ? projectDefaultTemplate :\n      //                     this.props.nsampletypecode === SampleType.CLINICALTYPE ?\n      //                         // this.props.Login.settings && parseInt(this.props.Login.settings[20]) === transactionStatus.YES \n      //                         this.props.sampleType ?\n      //                         this.props.sampleType.item.ncategorybasedflowrequired === transactionStatus.YES\n      //                         && this.props.sampleType.item.nportalrequired === transactionStatus.YES\n      //                         ? clinicalTemplateWithExternalOrder \n      //                         :  this.props.sampleType.item.ncategorybasedflowrequired === transactionStatus.YES\n      //                             ? clinicalTypeDefaultTemplateWithoutProduct :\n      //                             clinicalTypeDefaultTemplateWithProduct : [{\n      //                                 \"id\": \"pv1OWbsMYq\",\n      //                                 \"type\": \"row\",\n      //                                 \"children\": [\n      //                                     { type: 'column', id: '2zMtRhjb2t', children: [] }\n      //                                 ]\n      //                             }]\n      //                             :[{\n      //                                 \"id\": \"pv1OWbsMYq\",\n      //                                 \"type\": \"row\",\n      //                                 \"children\": [\n      //                                     { type: 'column', id: '2zMtRhjb2t', children: [] }\n      //                                 ] }],\n      selectedRecord: this.props.Login.selectedRecord || {},\n      selectedFieldRecord: {},\n      selectedComponentpath: \"\",\n      components: [],\n      filterColumns: [],\n      validComponents: [],\n      showConfirmAlert: false,\n      showsynonym: false,\n      toBeDeleted: {},\n      numericConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NOTEQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_IN\",\n          defaultMessage: \"In\"\n        }),\n        value: condition.CONTAINS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NOTIN\",\n          defaultMessage: \"Not In\"\n        }),\n        value: condition.NOTCONTAINS\n      }],\n      stringConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NOTEQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_STARTSWITH\",\n          defaultMessage: \"Starts With\"\n        }),\n        value: condition.STARTSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_ENDSWITH\",\n          defaultMessage: \"Ends With\"\n        }),\n        value: condition.ENDSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CONTAINS\",\n          defaultMessage: \"Contains\"\n        }),\n        value: condition.INCLUDES\n      }],\n      dateConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_LESSTHAN\",\n          defaultMessage: \"Less Than (<)\"\n        }),\n        value: condition.LESSTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_LESSTHANOREQUALS\",\n          defaultMessage: \"Less Than Or Equals(<=)\"\n        }),\n        value: condition.LESSTHANOREQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_GREATERTHAN\",\n          defaultMessage: \"Greater Than(>)\"\n        }),\n        value: condition.GREATERTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_GREATERTHANOREQUALS\",\n          defaultMessage: \"Greater Than Or Equals(>=)\"\n        }),\n        value: condition.GREATERTHANEQUALS\n      }]\n    };\n  }\n\n  render() {\n    // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      dialogClassName: `${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, `${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }) : this.props.Login.operation === \"viewdesign\" ? this.props.intl.formatMessage({\n      id: \"IDS_VIEW\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_ADD\"\n    })} ${this.props.intl.formatMessage({\n      id: \"IDS_DESIGNTEMPLATE\"\n    })}`), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    })), this.props.Login.operation !== \"viewdesign\" ? /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\" //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\n      ,\n      onClick: this.validateDynamicDesign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 37\n      }\n    })) : \"\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DndProvider, {\n      backend: device.os !== 'android' ? HTML5Backend : TouchBackend,\n      options: {\n        enableMouseEvents: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Dynamicinput, {\n      layout: this.state.design,\n      reactInputFields: this.props.Login.ReactInputFields || {},\n      setLayout: this.setLayout,\n      reactComponents: this.props.Login.ReactComponents || {},\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onComboChange: this.onComboChange,\n      selectedFieldRecord: this.state.selectedFieldRecord,\n      onclickcomponent: (event, data, path) => this.onclickcomponent(event, data, path),\n      ReactTables: this.props.Login.ReactTables,\n      tableColumn: this.state.tableColumn,\n      filterColumns: this.state.filterColumns,\n      numericConditions: this.state.numericConditions,\n      stringConditions: this.state.stringConditions,\n      filterData: this.props.Login.filterData,\n      inputFields: this.state.validComponents || [],\n      addChildMapping: this.addChildMapping,\n      valueMembers: this.getValueMembers(this.state.selectedFieldRecord),\n      validateDelete: this.validateDelete,\n      addTag: this.addTag,\n      showFilter: this.state.showFilter,\n      showPropFilter: this.showPropFilter,\n      hidePropFilter: this.hidePropFilter,\n      addCondition: this.addCondition,\n      deleteCondition: this.deleteCondition,\n      dateConditions: this.state.dateConditions,\n      dateComponents: this.state.dateComponents,\n      addDateConstraints: this.addDateConstraints,\n      deleteDateCondition: this.deleteDateCondition,\n      showsynonym: this.state.showsynonym,\n      languages: this.props.Login.languageList || [],\n      addSynonym: () => this.setState({\n        showsynonym: !this.state.showsynonym\n      }),\n      parentRadioValue: this.state.parentRadioValue || [],\n      userinfo: this.props.Login.userInfo,\n      handleDateChange: this.handleDateChange,\n      period: this.props.Login.Period || [],\n      staticfiltertables: this.props.Login.staticfiltertables,\n      staticfiltercolumn: this.state.staticfiltercolumn || [],\n      fields: this.props.Login.fields || {},\n      onChangeAwesomeQueryBuilder: this.onChangeAwesomeQueryBuilder,\n      awesomeTree: this.state.selectedFieldRecord['awesomeTree'] // awesomeConfig={this.state.selectedFieldRecord['awesomeConfig']}\n      ,\n      kendoSkip: this.props.Login.kendoSkip,\n      kendoTake: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterDataRecord: this.props.Login.lstPatient //  handleKendoRowClick={this.handleKendoRowClick}\n      ,\n      handleExecuteClick: this.handleExecuteClick,\n      userInfo: this.props.Login.userInfo,\n      kendoFilter: this.state.selectedFieldRecord['kendoFilter'] || {\n        logic: \"and\",\n        filters: []\n      },\n      handleFilterChange: this.handleFilterChange //    onRowClick={this.handleKendoRowClick}\n      //  userInfo={this.props.Login.userInfo}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 41\n      }\n    }))))))), /*#__PURE__*/React.createElement(AlertModal, {\n      openAlertModal: this.state.openAlertModal,\n      modalTitle: \"IDS_TEMPLATE\",\n      closeModal: () => this.setState({\n        openAlertModal: false,\n        templateName: \"\"\n      }),\n      onSaveClick: this.handleSaveClick,\n      modalBody: /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"templatename\",\n        type: \"text\",\n        onChange: event => this.setState({\n          selectedRecord: { ...this.state.selectedRecord,\n            templatename: event.target.value\n          }\n        }) //onChange={(event) => this.onInputOnChange(event)}\n        ,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        value: this.state.selectedRecord.templatename ? this.state.selectedRecord.templatename : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      openAlertModal,\n      design,\n      selectedRecord,\n      selectedFieldRecord,\n      selectedComponentpath,\n      components,\n      validComponents,\n      tableColumn,\n      filterColumns,\n      showConfirmAlert,\n      parentRadioValue,\n      showFilter\n    } = this.state;\n\n    if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\n      updateState = true;\n      openAlertModal = false;\n    }\n\n    if (this.props.Login.design !== previousProps.Login.design) {\n      updateState = true;\n      design = this.props.Login.design;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\n      showFilter = this.props.Login.showFilter;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\n        selectedComponentpath = this.props.Login.selectedComponentpath;\n      }\n\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      components = this.props.Login.components;\n      validComponents = this.props.Login.validComponents;\n      tableColumn = this.props.Login.tableColumn;\n      filterColumns = this.props.Login.filterColumns;\n      updateState = true;\n    }\n\n    if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\n      parentRadioValue = this.props.Login.parentRadioValue;\n      updateState = true;\n    }\n\n    if (updateState) {\n      this.setState({\n        openAlertModal,\n        design,\n        selectedRecord,\n        selectedFieldRecord,\n        tableColumn,\n        selectedComponentpath,\n        components,\n        validComponents,\n        showConfirmAlert,\n        filterColumns,\n        parentRadioValue,\n        showFilter\n      });\n    }\n  }\n\n  getIndexByLabel(design, label) {\n    let obj = {};\n    design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n      if (componnetrow.hasOwnProperty('children')) {\n        componnetrow.children.map((component, compIndex) => {\n          if (component.label === label) {\n            obj = {\n              object: component,\n              path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n            }; // break;\n          }\n\n          return null;\n        });\n      } else {\n        if (componnetrow.label === label) {\n          obj = {\n            object: componnetrow,\n            path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n          }; // return obj;\n          // break;\n        }\n      }\n\n      return null;\n    })));\n    return obj;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getTableColumns,\n  getForeignTableData,\n  getDynamicFilter,\n  getDynamicFilterExecuteData\n})(injectIntl(PreRegDesignPopUp));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/PreRegDesignPopUp.jsx"],"names":["React","Button","Col","Modal","Row","FontAwesomeIcon","faSave","FormattedMessage","injectIntl","TouchBackend","HTML5Backend","DndProvider","device","Dynamicinput","connect","updateStore","crudMaster","getTableColumns","getForeignTableData","getDynamicFilter","getDynamicFilterExecuteData","condition","SampleType","transactionStatus","DEFAULT_RETURN","showEsign","validateCreateView","AlertModal","FormInput","getChildComponentForeignKey","getcomponentdata","getValidComponent","replaceChildFromChildren","InstrumentDefaultTemplate","productDefaultTemplate","MaterialDefaultTemplate","clinicalTypeDefaultTemplateWithoutProduct","clinicalTypeDefaultTemplateWithProduct","projectDefaultTemplate","clinicalTemplateWithExternalOrder","ReactComponents","ConfirmMessage","toast","Utils","QbUtils","mapStateToProps","state","Login","PreRegDesignPopUp","Component","constructor","props","validateDynamicDesign","valid","validateTemplate","design","setState","openAlertModal","templatename","showPropFilter","selectedFieldRecord","inputtype","label","table","filterfields","inputparam","component","userinfo","userInfo","type","selectedComponentpath","info","intl","formatMessage","id","updateInfo","typeName","data","showFilter","hidePropFilter","setLayout","splitDropZonePath","remove","removeChild","undefined","split","childRecord","toBeDeleted","deleteComponent","child","map","myChild","childPath","updatePath","components","getComponents","validComponents","columnInfo","showConfirmAlert","length","row","rowIndex","children","column","columnIndex","componnetrow","compRowIndex","hasOwnProperty","compIndex","newChild","childComp","obj","getIndexByLabel","push","path","newObj","object","parentPath","radioparentPath","validateDelete","showAlert","componentcode","COMBO","childValue","parentData","newChildData","filter","radioparent","confirmAlert","confirmMessage","confirm","bool","onclickcomponent","event","dateComponents","filterDataComponents","item","componentData","parentRadioValue","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","source","nquerybuildertablecode","tableColumn","filterColumns","oldParentData","radioOptions","tags","value","text","componnet","compindex","nformcode","valuemember","getValueMembers","valueColumn","numericColumns","x","foriegntablename","displayname","slanguagetypecode","tablecolumnname","foriegntablePK","onInputOnChange","name","selectedRecord","chillabelUpdate","newLabel","oldLabel","target","splititemarray","newChildData1","checked","newdata","saveComponentProperties","val","checkAutoFocus","warn","langArray","languageList","langDataObject","autoFocus","onNumericInputChange","columnname","isNaN","handleDateChange","dateValue","dateName","onComboChange","comboData","comboName","stablename","ismultilingual","validateChild","valueMemberOptions","isDynamicMapping","filtervalue","staticfiltervalue","ndata","list","JSON","parse","jsondata","jcolumnname","staticfiltercolumn","addTag","Array","isArray","y","addCondition","filterColumnName","filterValue","conditionString","conditionArrayString","selectedStaticfiltertable","filtercolumn","EQUALS","jtablename","tablename","NOTEQUALS","STARTSWITH","ENDSWITH","INCLUDES","conditionArrayUI","conditionArraySQL","staticfiltertable","nsystemconfiguration","join","CONTAINS","NOTCONTAINS","deleteCondition","index","splice","addDateConstraints","dateConstraintArrayUI","dateConstraintArraySQL","cdateConstraintArraySQL","parentdate","constraint","childdate","deleteDateCondition","childLabelUpdate","oldLabelName","newLabelName","design1","updateLabelName","handleSaveClick","saveType","inputData","selectedId","dataState","operation","nchecklistqbcode","nreactregtemplatecode","masterData","selectedTemplate","nsampletypecode","sregtemplatename","jsonString","stringify","ntransactionstatus","DRAFT","ndefaulttemplatecode","defaultTemplate","nsubsampletypecode","selectedDefaultTemplate","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","inputParam","methodUrl","classUrl","displayName","searchRef","openPortal","userRoleControlRights","ncontrolcode","loadEsign","screenData","openModal","template","invalidComponent","duplicateComponents","insufficientMultilingualData","incompletePropertiesComponent","notcompleteProperties","labels","isTemplateEmpty","trim","includes","CHECKBOX","RADIO","TEXTINPUT","TEXTAREA","displaymember","sfieldlength","Object","keys","recordbasedshowhide","recordbasedreadonly","selectedrecordbasedhide","DATE","period","windowperiod","ncustomization","maxletter","parseInt","nmaxletters","maxnumber","nmaxnumeric","maxsplchar","nsplchar","maxvalue","String","maxCaptical","nmaxcapticalletters","maxSmall","nmaxsmallletters","isalphanumeric","ncasesensitive","isalphabetspl","isnumericspl","isnumeric","nsplcharnotallow","max","min","dataArray","onChangeAwesomeQueryBuilder","immutableTree","config","query","sqlFormat","handlePageChange","kendoSkip","skip","kendoTake","take","handleFilterChange","handleExecuteClick","filterquery","replace","nflag","showsynonym","numericConditions","defaultMessage","stringConditions","dateConditions","LESSTHAN","LESSTHANOREQUALS","GREATERTHAN","GREATERTHANEQUALS","render","closeModal","os","enableMouseEvents","ReactInputFields","ReactTables","filterData","addChildMapping","Period","staticfiltertables","fields","gridColumns","lstPatient","logic","filters","templateName","componentDidUpdate","previousProps","updateState"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BC,GAA7B,QAAwC,iBAAxC;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,QAAuB,mCAAvB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,MAAP,MAAmB,gBAAnB,C,CACA;;AACA,OAAOC,YAAP,MAAyB,yCAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACIC,WADJ,EACiBC,UADjB,EAC6BC,eAD7B,EAEIC,mBAFJ,EAEyBC,gBAFzB,EAE2CC,2BAF3C,QAGO,qBAHP;AAIA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,iBAAhC,QAAyD,8BAAzD;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,SAAT,EAAoBC,kBAApB,QAA8C,+BAA9C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAASC,2BAAT,EAAsCC,gBAAtC,EAAwDC,iBAAxD,EAA2EC,wBAA3E,QAA2G,mCAA3G;AACA,SACIC,yBADJ,EAC+BC,sBAD/B,EACuDC,uBADvD,EAEIC,yCAFJ,EAE+CC,sCAF/C,EAGIC,sBAHJ,EAG4BC,iCAH5B,QAIO,oBAJP;AAKA,SAASC,eAAT,QAAgC,8BAAhC;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SACIC,KAAK,IAAIC,OADb,QAEO,iCAFP;;AAGA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAGA,MAAMC,iBAAN,SAAgChD,KAAK,CAACiD,SAAtC,CAAgD;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAkEnBC,qBAlEmB,GAkEK,MAAM;AAC1B,UAAIC,KAAK,GAAG,KAAKC,gBAAL,CAAsB,KAAKR,KAAL,CAAWS,MAAjC,CAAZ;;AACA,UAAI,CAACF,KAAL,EAAY;AACR,eAAO,IAAP;AACH,OAFD,MAGK;AACD,aAAKG,QAAL,CAAc;AAAEC,UAAAA,cAAc,EAAE,IAAlB;AAAwBC,UAAAA,YAAY,EAAE;AAAtC,SAAd;AACH;AACJ,KA1EkB;;AAAA,SA2QnBC,cA3QmB,GA2QF,MAAM;AACnB,YAAMC,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAvC;;AACA,UAAIA,mBAAmB,CAACC,SAApB,KAAkC,qBAAtC,EAA6D;AACzD,YAAID,mBAAmB,CAACE,KAApB,KAA8B,EAA9B,IACGF,mBAAmB,CAACG,KADvB,IACgCH,mBAAmB,CAACI,YADxD,EACsE;AAClE,gBAAMC,UAAU,GAAG;AACfC,YAAAA,SAAS,EAAEN,mBADI;AAEbO,YAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QAFd;AAGfC,YAAAA,IAAI,EAAE,QAHS;AAIfC,YAAAA,qBAAqB,EAAE,KAAKxB,KAAL,CAAWwB;AAJnB,WAAnB;AAMA,eAAKnB,KAAL,CAAWhC,gBAAX,CAA4B8C,UAA5B;AACH,SATD,MASO;AACHvB,UAAAA,KAAK,CAAC6B,IAAN,CAAW,KAAKpB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AAEJ,OAdD,MAcO,IAAId,mBAAmB,CAACC,SAApB,KAAkC,sBAAtC,EAA8D;AACjE,YAAID,mBAAmB,CAACE,KAApB,KAA8B,EAA9B,IACGF,mBAAmB,CAACG,KADvB,IACgCH,mBAAmB,CAACI,YADxD,EACsE;AAClE,gBAAMC,UAAU,GAAG;AACfC,YAAAA,SAAS,EAAEN,mBADI;AAEbO,YAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QAFd;AAGfC,YAAAA,IAAI,EAAE,QAHS;AAIfC,YAAAA,qBAAqB,EAAE,KAAKxB,KAAL,CAAWwB;AAJnB,WAAnB;AAMA,eAAKnB,KAAL,CAAWhC,gBAAX,CAA4B8C,UAA5B;AACH,SATD,MASO;AACHvB,UAAAA,KAAK,CAAC6B,IAAN,CAAW,KAAKpB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ,OAbM,MAaA;AACH,cAAMC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEpD,cADK;AAEfqD,UAAAA,IAAI,EAAE;AACFC,YAAAA,UAAU,EAAE,CAAC,KAAKhC,KAAL,CAAWgC;AADtB;AAFS,SAAnB;AAMA,aAAK3B,KAAL,CAAWpC,WAAX,CAAuB4D,UAAvB,EAPG,CAQH;AACH;AAEJ,KAnTkB;;AAAA,SAoTnBI,cApTmB,GAoTF,MAAM;AACnB,YAAMJ,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpD,cADK;AAEfqD,QAAAA,IAAI,EAAE;AACFC,UAAAA,UAAU,EAAE;AADV;AAFS,OAAnB;AAMA,WAAK3B,KAAL,CAAWpC,WAAX,CAAuB4D,UAAvB,EAPmB,CAQnB;AACH,KA7TkB;;AAAA,SA8TnBK,SA9TmB,GA8TP,CAACzB,MAAD,EAAS0B,iBAAT,EAA4BC,MAA5B,EAAoCC,WAApC,KAAoD;AAC5D,UAAIvB,mBAAmB,GAAG,EAA1B;;AACA,UAAIsB,MAAM,KAAKE,SAAf,EAA0B;AACtBxB,QAAAA,mBAAmB,GAAG9B,gBAAgB,CAACyB,MAAD,EAAS0B,iBAAiB,CAACI,KAAlB,CAAwB,GAAxB,CAAT,CAAtC;AACH,OAFD,MAGK,IAAIF,WAAJ,EAAiB;AAClB,YAAIG,WAAW,GAAG,EAAlB;AACA,aAAKxC,KAAL,CAAWyC,WAAX,CAAuBC,eAAvB,CAAuCC,KAAvC,CAA6CC,GAA7C,CAAiDC,OAAO,IAAI;AACxDL,UAAAA,WAAW,GAAGxD,gBAAgB,CAACyB,MAAD,EAASoC,OAAO,CAACC,SAAR,CAAkBP,KAAlB,CAAwB,GAAxB,CAAT,CAA9B;AACAC,UAAAA,WAAW,CAAC,YAAD,CAAX,GAA4BF,SAA5B;AACAE,UAAAA,WAAW,CAAC,YAAD,CAAX,GAA4BF,SAA5B;AACAE,UAAAA,WAAW,CAAC,aAAD,CAAX,GAA6BF,SAA7B;AAEA7B,UAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASoC,OAAO,CAACC,SAAR,CAAkBP,KAAlB,CAAwB,GAAxB,CAAT,EAAuCC,WAAvC,CAAjC;AACA,iBAAO,IAAP;AACH,SARD;AASH;;AACD/B,MAAAA,MAAM,GAAG,KAAKsC,UAAL,CAAgBtC,MAAhB,CAAT,CAjB4D,CAkB5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,YAAMuC,UAAU,GAAG,KAAKC,aAAL,CAAmBxC,MAAnB,EAA2BuC,UAA9C;AACA,UAAIE,eAAe,GAAGjE,iBAAiB,CAAC6B,mBAAD,EAAsBkC,UAAtB,EAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBkD,UAAnD,CAAvC;AACA,WAAKzC,QAAL,CAAc;AAAE0C,QAAAA,gBAAgB,EAAE,KAApB;AAA2BX,QAAAA,WAAW,EAAE,EAAxC;AAA4ChC,QAAAA,MAA5C;AAAoDK,QAAAA,mBAAmB,EAAEA,mBAAzE;AAA8FkC,QAAAA,UAA9F;AAA0GE,QAAAA,eAA1G;AAA2H1B,QAAAA,qBAAqB,EAAEW,iBAAiB,CAACI,KAAlB,CAAwB,GAAxB,EAA6Bc,MAA7B,GAAsC,CAAtC,GAA0ClB,iBAA1C,GAA8D,SAASA;AAAzN,OAAd;AACH,KAtWkB;;AAAA,SAuWnBY,UAvWmB,GAuWLtC,MAAD,IAAY;AACrBA,MAAAA,MAAM,CAACmC,GAAP,CAAW,CAACU,GAAD,EAAMC,QAAN,KACPD,GAAG,CAACE,QAAJ,CAAaZ,GAAb,CAAiB,CAACa,MAAD,EAASC,WAAT,KACbD,MAAM,CAACD,QAAP,CAAgBZ,GAAhB,CAAoB,CAACe,YAAD,EAAeC,YAAf,KAAgC;AAChD,YAAID,YAAY,CAACE,cAAb,CAA4B,UAA5B,CAAJ,EAA6C;AACzCF,UAAAA,YAAY,CAACH,QAAb,CAAsBZ,GAAtB,CAA0B,CAACxB,SAAD,EAAY0C,SAAZ,KAA0B;AAChD,gBAAI1C,SAAS,CAACL,SAAV,KAAwB,OAA5B,EAAqC;AACjC,kBAAIK,SAAS,CAACuB,KAAd,EAAqB;AACjB,oBAAIoB,QAAQ,GAAG,EAAf;AACA3C,gBAAAA,SAAS,CAACuB,KAAV,CAAgBC,GAAhB,CAAoBoB,SAAS,IAAI;AAC7B,wBAAMC,GAAG,GAAG,KAAKC,eAAL,CAAqBzD,MAArB,EAA6BuD,SAAS,CAAChD,KAAvC,CAAZ;AACA+C,kBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH,SAAL;AAAgBlB,oBAAAA,SAAS,EAAEmB,GAAG,CAACG;AAA/B,mBAAd;AACA,wBAAMC,MAAM,GAAG,EAAE,GAAGJ,GAAG,CAACK,MAAT;AAAiBC,oBAAAA,UAAU,EAAG,GAAEhB,QAAS,IAAGG,WAAY,IAAGE,YAAa,IAAGE,SAAU;AAArF,mBAAf;AACArD,kBAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASwD,GAAG,CAACG,IAAJ,CAAS7B,KAAT,CAAe,GAAf,CAAT,EAA8B8B,MAA9B,CAAjC;AACH,iBALD;AAMAjD,gBAAAA,SAAS,GAAG,EAAE,GAAGA,SAAL;AAAgBuB,kBAAAA,KAAK,EAAEoB;AAAvB,iBAAZ;AACAtD,gBAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAAS,CAAC8C,QAAD,EAAWG,WAAX,EAAwBE,YAAxB,EAAsCE,SAAtC,CAAT,EAA2D1C,SAA3D,CAAjC;AACH;AACJ,aAZD,MAYO;AACH,kBAAIA,SAAS,CAACuB,KAAd,EAAqB;AACjB,oBAAIoB,QAAQ,GAAG,EAAf;AACA3C,gBAAAA,SAAS,CAACuB,KAAV,CAAgBC,GAAhB,CAAoBoB,SAAS,IAAI;AAC7B,wBAAMC,GAAG,GAAG,KAAKC,eAAL,CAAqBzD,MAArB,EAA6BuD,SAAS,CAAChD,KAAvC,CAAZ;AACA+C,kBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH,SAAL;AAAgBlB,oBAAAA,SAAS,EAAEmB,GAAG,CAACG;AAA/B,mBAAd;AACA,wBAAMC,MAAM,GAAG,EAAE,GAAGJ,GAAG,CAACK,MAAT;AAAiBE,oBAAAA,eAAe,EAAG,GAAEjB,QAAS,IAAGG,WAAY,IAAGE,YAAa,IAAGE,SAAU;AAA1F,mBAAf;AACArD,kBAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASwD,GAAG,CAACG,IAAJ,CAAS7B,KAAT,CAAe,GAAf,CAAT,EAA8B8B,MAA9B,CAAjC;AACH,iBALD;AAMAjD,gBAAAA,SAAS,GAAG,EAAE,GAAGA,SAAL;AAAgBuB,kBAAAA,KAAK,EAAEoB;AAAvB,iBAAZ;AACAtD,gBAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAAS,CAAC8C,QAAD,EAAWG,WAAX,EAAwBE,YAAxB,EAAsCE,SAAtC,CAAT,EAA2D1C,SAA3D,CAAjC;AACH;AACJ;AAEJ,WA3BD;AA4BH,SA7BD,MA6BO;AACH,cAAIuC,YAAY,CAAC5C,SAAb,KAA2B,OAA/B,EAAwC;AACpC,gBAAI4C,YAAY,CAAChB,KAAjB,EAAwB;AACpB,kBAAIoB,QAAQ,GAAG,EAAf;AACAJ,cAAAA,YAAY,CAAChB,KAAb,CAAmBC,GAAnB,CAAuBoB,SAAS,IAAI;AAChC,sBAAMC,GAAG,GAAG,KAAKC,eAAL,CAAqBzD,MAArB,EAA6BuD,SAAS,CAAChD,KAAvC,CAAZ;AACA+C,gBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH,SAAL;AAAgBlB,kBAAAA,SAAS,EAAEmB,GAAG,CAACG;AAA/B,iBAAd;AACA,sBAAMC,MAAM,GAAG,EAAE,GAAGJ,GAAG,CAACK,MAAT;AAAiBC,kBAAAA,UAAU,EAAG,GAAEhB,QAAS,IAAGG,WAAY,IAAGE,YAAa;AAAxE,iBAAf;AACAnD,gBAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASwD,GAAG,CAACG,IAAJ,CAAS7B,KAAT,CAAe,GAAf,CAAT,EAA8B8B,MAA9B,CAAjC;AACH,eALD;AAMAV,cAAAA,YAAY,GAAG,EAAE,GAAGA,YAAL;AAAmBhB,gBAAAA,KAAK,EAAEoB;AAA1B,eAAf;AACAtD,cAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAAS,CAAC8C,QAAD,EAAWG,WAAX,EAAwBE,YAAxB,EAAsC,CAAtC,CAAT,EAAmDD,YAAnD,CAAjC;AACH;AACJ,WAZD,MAYO;AACH,gBAAIA,YAAY,CAAChB,KAAjB,EAAwB;AACpB,kBAAIoB,QAAQ,GAAG,EAAf;AACAJ,cAAAA,YAAY,CAAChB,KAAb,CAAmBC,GAAnB,CAAuBoB,SAAS,IAAI;AAChC,sBAAMC,GAAG,GAAG,KAAKC,eAAL,CAAqBzD,MAArB,EAA6BuD,SAAS,CAAChD,KAAvC,CAAZ;AACA+C,gBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH,SAAL;AAAgBlB,kBAAAA,SAAS,EAAEmB,GAAG,CAACG;AAA/B,iBAAd;AACA,sBAAMC,MAAM,GAAG,EAAE,GAAGJ,GAAG,CAACK,MAAT;AAAiBE,kBAAAA,eAAe,EAAG,GAAEjB,QAAS,IAAGG,WAAY,IAAGE,YAAa;AAA7E,iBAAf;AACAnD,gBAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASwD,GAAG,CAACG,IAAJ,CAAS7B,KAAT,CAAe,GAAf,CAAT,EAA8B8B,MAA9B,CAAjC;AACH,eALD;AAMAV,cAAAA,YAAY,GAAG,EAAE,GAAGA,YAAL;AAAmBhB,gBAAAA,KAAK,EAAEoB;AAA1B,eAAf;AACAtD,cAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAAS,CAAC8C,QAAD,EAAWG,WAAX,EAAwBE,YAAxB,EAAsC,CAAtC,CAAT,EAAmDD,YAAnD,CAAjC;AACH;AACJ;AACJ;AACJ,OAzDD,CADJ,CADJ;AA8DA,aAAOlD,MAAP;AACH,KAvakB;;AAAA,SAycnBgE,cAzcmB,GAycF,CAAChE,MAAD,EAAS0B,iBAAT,KAA+B;AAC5C,YAAMiC,IAAI,GAAGjC,iBAAiB,CAACI,KAAlB,CAAwB,GAAxB,CAAb;AACA,UAAImC,SAAS,GAAG,KAAhB;AACA,UAAIjC,WAAW,GAAG,EAAlB,CAH4C,CAI5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIrB,SAAS,GAAGpC,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoB2D,IAApB,CAAhC;;AACA,UAAIhD,SAAS,CAACuB,KAAV,IAAmBvB,SAAS,CAACuB,KAAV,CAAgBU,MAAhB,GAAyB,CAAhD,EAAmD;AAE/C,YAAIb,WAAW,GAAG,EAAlB;;AACA,YAAIpB,SAAS,CAACL,SAAV,KAAwB,OAA5B,EAAqC;AACjCK,UAAAA,SAAS,CAACuB,KAAV,CAAgBC,GAAhB,CAAoBC,OAAO,IAAI;AAC3BL,YAAAA,WAAW,GAAGxD,gBAAgB,CAACyB,MAAD,EAASoC,OAAO,CAACC,SAAR,CAAkBP,KAAlB,CAAwB,GAAxB,CAAT,CAA9B;AACA,mBAAOC,WAAW,CAAC,kBAAD,CAAlB;AACA,mBAAOA,WAAW,CAAC,yBAAD,CAAlB;AACA,mBAAOA,WAAW,CAAC,iBAAD,CAAlB;AACA,mBAAOA,WAAW,CAAC,aAAD,CAAlB;AACA,mBAAOA,WAAW,CAAC,iBAAD,CAAlB;AACA,mBAAOA,WAAW,CAAC,qBAAD,CAAlB;AACA,mBAAOA,WAAW,CAAC,qBAAD,CAAlB;AAGA/B,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASoC,OAAO,CAACC,SAAR,CAAkBP,KAAlB,CAAwB,GAAxB,CAAT,EAAuCC,WAAvC,CAAjC;AACA,mBAAO,IAAP;AACH,WAbD;AAcH,SAfD,MAeO;AACHpB,UAAAA,SAAS,CAACuB,KAAV,CAAgBC,GAAhB,CAAoBC,OAAO,IAAI;AAC3BL,YAAAA,WAAW,GAAGxD,gBAAgB,CAACyB,MAAD,EAASoC,OAAO,CAACC,SAAR,CAAkBP,KAAlB,CAAwB,GAAxB,CAAT,CAA9B;AACAC,YAAAA,WAAW,CAAC,YAAD,CAAX,GAA4BF,SAA5B;AACAE,YAAAA,WAAW,CAAC,YAAD,CAAX,GAA4BF,SAA5B;AACAE,YAAAA,WAAW,CAAC,aAAD,CAAX,GAA6BF,SAA7B;;AACA,gBAAIO,OAAO,CAAC8B,aAAR,KAA0BjF,eAAe,CAACkF,KAA9C,EAAqD;AACjDpC,cAAAA,WAAW,CAAC,QAAD,CAAX,GAAwBF,SAAxB;AACH;;AACD7B,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASoC,OAAO,CAACC,SAAR,CAAkBP,KAAlB,CAAwB,GAAxB,CAAT,EAAuCC,WAAvC,CAAjC;AACA,mBAAO,IAAP;AACH,WAVD;AAWH;;AAEDkC,QAAAA,SAAS,GAAG,IAAZ;AACAjC,QAAAA,WAAW,GAAG;AAAEhC,UAAAA,MAAF;AAAU0B,UAAAA,iBAAV;AAA6BO,UAAAA,eAAe,EAAEtB;AAA9C,SAAd,CAjC+C,CAkC/C;AACH;;AACD,UAAIA,SAAS,CAACyD,UAAd,EAA0B;AACtB,YAAIC,UAAU,GAAG9F,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBW,SAAS,CAACmD,UAAV,CAAqBhC,KAArB,CAA2B,GAA3B,CAApB,CAAjC;AACA,YAAIwC,YAAY,GAAGD,UAAU,CAACnC,KAAX,CAAiBqC,MAAjB,CAAwBrC,KAAK,IAAIA,KAAK,CAAC3B,KAAN,KAAgBI,SAAS,CAACJ,KAA3D,CAAnB;AACA8D,QAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBnC,UAAAA,KAAK,EAAEoC;AAAxB,SAAb;AACAtE,QAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASW,SAAS,CAACmD,UAAV,CAAqBhC,KAArB,CAA2B,GAA3B,CAAT,EAA0CuC,UAA1C,CAAjC;AACArC,QAAAA,WAAW,GAAG;AAAEhC,UAAAA,MAAF;AAAU0B,UAAAA,iBAAV;AAA6BO,UAAAA,eAAe,EAAEtB;AAA9C,SAAd;AAEH;;AAED,UAAIA,SAAS,CAAC6D,WAAd,EAA2B;AACvB,YAAIH,UAAU,GAAG9F,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBW,SAAS,CAACoD,eAAV,CAA0BjC,KAA1B,CAAgC,GAAhC,CAApB,CAAjC;AACA,YAAIwC,YAAY,GAAGD,UAAU,CAACnC,KAAX,CAAiBqC,MAAjB,CAAwBrC,KAAK,IAAIA,KAAK,CAAC3B,KAAN,KAAgBI,SAAS,CAACJ,KAA3D,CAAnB;AACA8D,QAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBnC,UAAAA,KAAK,EAAEoC;AAAxB,SAAb;AACAtE,QAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASW,SAAS,CAACoD,eAAV,CAA0BjC,KAA1B,CAAgC,GAAhC,CAAT,EAA+CuC,UAA/C,CAAjC;AACArC,QAAAA,WAAW,GAAG;AAAEhC,UAAAA,MAAF;AAAU0B,UAAAA,iBAAV;AAA6BO,UAAAA,eAAe,EAAEtB;AAA9C,SAAd;AAEH;;AACD,UAAIsD,SAAJ,EAAe;AACX,aAAKA,SAAL,CAAe,IAAf,EAAqBjC,WAArB;AACH,OAFD,MAGK;AACD,aAAKP,SAAL,CAAezB,MAAf,EAAuB0B,iBAAvB,EAA0C,IAA1C;AACH;AACJ,KAjhBkB;;AAAA,SAkhBnB+C,YAlhBmB,GAkhBJ,MAAM;AACjB,WAAKC,cAAL,CAAoBC,OAApB,CAA4B,KAAK/E,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAA5B,EACI,KAAKvB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADJ,EAEI,KAAKvB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAFJ,EAGI,KAAKvB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAHJ,EAII,KAAKvB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJJ,EAKI,MAAM,KAAKM,SAAL,CAAe,KAAKlC,KAAL,CAAWyC,WAAX,CAAuBhC,MAAtC,EAA8C,KAAKT,KAAL,CAAWyC,WAAX,CAAuBN,iBAArE,EAAwF,IAAxF,EAA8F,IAA9F,CALV,EAMIG,SANJ,EAOI,MAAM,KAAKoC,SAAL,CAAe,KAAf,CAPV;AAQH,KA3hBkB;;AAAA,SA4hBnBA,SA5hBmB,GA4hBP,CAACW,IAAD,EAAO5C,WAAP,KAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA,WAAK/B,QAAL,CAAc;AAAE0C,QAAAA,gBAAgB,EAAEiC,IAApB;AAA0B5C,QAAAA;AAA1B,OAAd;AACH,KAniBkB;;AAAA,SAoiBnB6C,gBApiBmB,GAoiBA,CAACC,KAAD,EAAQxD,IAAR,EAAcqC,IAAd,KAAuB;AACtC,YAAMtD,mBAAmB,GAAG,EAAE,GAAGiB;AAAL,OAA5B;AACA,YAAMkC,GAAG,GAAG,KAAKhB,aAAL,CAAmB,KAAKjD,KAAL,CAAWS,MAA9B,CAAZ,CAFsC,CAGtC;;AACA,YAAMuC,UAAU,GAAGiB,GAAG,CAACjB,UAAvB;AAEA,UAAIwC,cAAc,GAAGvB,GAAG,CAACuB,cAAzB;;AACA,UAAIzD,IAAI,CAAChB,SAAL,KAAmB,MAAvB,EAA+B;AAC3B,cAAM0E,oBAAoB,GAAGD,cAAc,CAACR,MAAf,CAAsBU,IAAI,IAAIA,IAAI,CAAC1E,KAAL,KAAee,IAAI,CAACf,KAAlD,CAA7B;AACAwE,QAAAA,cAAc,GAAGC,oBAAjB;AACH;;AAED,UAAIE,aAAa,GAAG;AAAE3C,QAAAA,UAAF;AAAcxB,QAAAA,qBAAqB,EAAE4C;AAArC,OAApB;AACA,UAAIwB,gBAAgB,GAAG,EAAvB;;AAEA,UAAI,CAAC9E,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACkF,KAAtD,IACD9D,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACmG,oBADrD,IAED/E,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACoG,mBAFtD,KAGAhF,mBAAmB,CAACiF,MAApB,KAA+BzD,SAH/B,KAIC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,KAAgCb,SAAhC,IACG,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAACkF,sBAAhD,MAA4E1D,SALhF,CAAJ,EAKgG;AAC5F,aAAKjC,KAAL,CAAWlC,eAAX,CAA2B,KAAK6B,KAAL,CAAWS,MAAtC,EAA8CK,mBAA9C,EACIA,mBAAmB,CAACkF,sBADxB,EACgD,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBqB,QADjE,EAEI,EAFJ,EAEQ,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBkD,UAFzB,EAEqCwC,aAFrC,EAEoDrD,SAFpD,EAE+D,KAF/D;AAGH,OATD,MASO;AACH,cAAMY,eAAe,GAAGjE,iBAAiB,CAAC6B,mBAAD,EAAsBkC,UAAtB,EAAkC,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBkD,UAAnD,CAAzC;AACA,YAAI8C,WAAW,GAAGnF,mBAAmB,CAACkF,sBAApB,GAA6C,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAACkF,sBAAhD,EAAwEC,WAArH,GAAmI,EAArJ;AACA,YAAIC,aAAa,GAAGpF,mBAAmB,CAACkF,sBAApB,GAA6C,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAACkF,sBAAhD,EAAwEE,aAArH,GAAqI,EAAzJ;;AACA,YAAIpF,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACmG,oBAAtD,IACA/E,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACoG,mBAD1D,EAC+E;AAC3E,cAAIhF,mBAAmB,CAAC0D,eAAxB,EAAyC;AACrC,gBAAI2B,aAAa,GAAGnH,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAAC0D,eAApB,CAAoCjC,KAApC,CAA0C,GAA1C,CAApB,CAApC;;AACA,gBAAI4D,aAAa,CAACtC,cAAd,CAA6B,OAA7B,CAAJ,EAA2C;AACvCsC,cAAAA,aAAa,CAACxD,KAAd,CAAoBC,GAApB,CAAwB8C,IAAI,IAAI;AAC5B,oBAAIA,IAAI,CAAC1E,KAAL,KAAeF,mBAAmB,CAACE,KAAvC,EAA8C;AAC1C4E,kBAAAA,gBAAgB,GAAGO,aAAa,CAACC,YAAd,CAA2BC,IAA3B,CAAgCzD,GAAhC,CAAoC8C,IAAI,IAAI;AAC3D,2BAAO;AAAEY,sBAAAA,KAAK,EAAEZ,IAAI,CAAC9D,EAAd;AAAkBZ,sBAAAA,KAAK,EAAE0E,IAAI,CAACa,IAA9B;AAAoCb,sBAAAA;AAApC,qBAAP;AACH,mBAFkB,CAAnB;AAGH;AACJ,eAND;AAOH;AACJ;AACJ,SAdD,MAcO;AACH,cAAI5E,mBAAmB,CAAC0D,eAAxB,EAAyC;AACrC,gBAAI1D,mBAAmB,CAAC0D,eAAxB,EAAyC;AACrC,kBAAI2B,aAAa,GAAGnH,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAAC0D,eAApB,CAAoCjC,KAApC,CAA0C,GAA1C,CAApB,CAApC;;AACA,kBAAI4D,aAAa,CAACtC,cAAd,CAA6B,OAA7B,CAAJ,EAA2C;AACvCsC,gBAAAA,aAAa,CAACxD,KAAd,CAAoBC,GAApB,CAAwB8C,IAAI,IAAI;AAC5B,sBAAIA,IAAI,CAAC1E,KAAL,KAAeF,mBAAmB,CAACE,KAAvC,EAA8C;AAC1C4E,oBAAAA,gBAAgB,GAAGO,aAAa,CAACC,YAAd,CAA2BC,IAA3B,CAAgCzD,GAAhC,CAAoC8C,IAAI,IAAI;AAC3D,6BAAO;AAAEY,wBAAAA,KAAK,EAAEZ,IAAI,CAAC9D,EAAd;AAAkBZ,wBAAAA,KAAK,EAAE0E,IAAI,CAACa,IAA9B;AAAoCb,wBAAAA;AAApC,uBAAP;AACH,qBAFkB,CAAnB;AAGH;AACJ,iBAND;AAOH;AACJ;AACJ;AACJ;;AACD,YAAI5E,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACkF,KAAtD,IACA9D,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACmG,oBADtD,IAEA/E,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACoG,mBAF1D,EAE+E;AAC3E,cAAI,KAAKzF,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,IAA+BrC,mBAAmB,CAAC+D,UAAnD,IACG,KAAKxE,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAAC+D,UAApB,CAA+BmB,sBAA3D,CADP,EAC2F;AACvFC,YAAAA,WAAW,GAAG,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAAC+D,UAApB,CAA+BmB,sBAA3D,EAAmFC,WAAjG;AACAC,YAAAA,aAAa,GAAG,KAAK7F,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAAC+D,UAApB,CAA+BmB,sBAA3D,EAAmFE,aAAnG;AACA,iBAAKxF,QAAL,CAAc;AACVc,cAAAA,qBAAqB,EAAE4C,IADb;AAEVtD,cAAAA,mBAAmB,EAAEA,mBAFX;AAGVkC,cAAAA,UAHU;AAIViD,cAAAA,WAJU;AAKVC,cAAAA,aALU;AAMVhD,cAAAA,eANU;AAOV0C,cAAAA,gBAPU;AAQV5D,cAAAA,UAAU,EAAE;AARF,aAAd;AAYH,WAhBD,MAgBO;AACH,gBAAIlB,mBAAmB,CAAC+D,UAAxB,EAAoC;AAChC,mBAAKxE,KAAL,CAAWlC,eAAX,CAA2B,KAAK6B,KAAL,CAAWS,MAAtC,EAA8CK,mBAA9C,EACIA,mBAAmB,CAAC+D,UAApB,CAA+BmB,sBADnC,EAC2D,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBqB,QAD5E,EAEI,EAFJ,EAEQ,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBkD,UAFzB,EAEqCwC,aAFrC,EAEoDrD,SAFpD,EAE+D,KAF/D;AAGH,aAJD,MAIO;AACH,mBAAK5B,QAAL,CAAc;AACVc,gBAAAA,qBAAqB,EAAE4C,IADb;AAEVtD,gBAAAA,mBAAmB,EAAEA,mBAFX;AAGVkC,gBAAAA,UAHU;AAIViD,gBAAAA,WAJU;AAKVC,gBAAAA,aALU;AAMVV,gBAAAA,cANU;AAOVtC,gBAAAA,eAPU;AAQV0C,gBAAAA,gBARU;AASV5D,gBAAAA,UAAU,EAAE;AATF,eAAd;AAWH;AACJ;AACJ,SAtCD,MAsCO;AACH,eAAKtB,QAAL,CAAc;AACVc,YAAAA,qBAAqB,EAAE4C,IADb;AAEVtD,YAAAA,mBAAmB,EAAEA,mBAFX;AAGVkC,YAAAA,UAHU;AAIViD,YAAAA,WAJU;AAKVC,YAAAA,aALU;AAMVV,YAAAA,cANU;AAOVtC,YAAAA,eAPU;AAQV0C,YAAAA,gBARU;AASV5D,YAAAA,UAAU,EAAE;AATF,WAAd;AAWH;AAEJ;AAEJ,KAppBkB;;AAAA,SAqpBnBiB,aArpBmB,GAqpBFxC,MAAD,IAAY;AACxB,UAAIuC,UAAU,GAAG,EAAjB;AACA,UAAIwC,cAAc,GAAG,CAAC;AAAExE,QAAAA,KAAK,EAAE,cAAT;AAAyBsF,QAAAA,KAAK,EAAE;AAAhC,OAAD,CAArB;AACA7F,MAAAA,MAAM,CAACmC,GAAP,CAAW,CAACU,GAAD,EAAMC,QAAN,KAAmB;AAC1BD,QAAAA,GAAG,CAACE,QAAJ,CAAaZ,GAAb,CAAiB,CAACa,MAAD,EAASC,WAAT,KAAyB;AACtCD,UAAAA,MAAM,CAACD,QAAP,CAAgBZ,GAAhB,CAAoB,CAAC4D,SAAD,EAAYC,SAAZ,KAA0B;AAC1C,gBAAID,SAAS,CAAC3C,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC2C,cAAAA,SAAS,CAAChD,QAAV,CAAmBZ,GAAnB,CAAuB,CAACe,YAAD,EAAeC,YAAf,KAAgC;AACnDD,gBAAAA,YAAY,CAAC5C,SAAb,KAA2B,MAA3B,IAAqC4C,YAAY,CAAC3C,KAAlD,IAA2DwE,cAAc,CAACrB,IAAf,CAAoB;AAAEnD,kBAAAA,KAAK,EAAE2C,YAAY,CAAC3C,KAAtB;AAA6BsF,kBAAAA,KAAK,EAAE3C,YAAY,CAAC3C;AAAjD,iBAApB,CAA3D;AACA2C,gBAAAA,YAAY,CAAC3C,KAAb,IAAsBgC,UAAU,CAACmB,IAAX,CAAgB;AAClCnD,kBAAAA,KAAK,EAAE2C,YAAY,CAAC3C,KADc;AAElCsF,kBAAAA,KAAK,EAAE3C,YAAY,CAAC3C,KAFc;AAGlC0F,kBAAAA,SAAS,EAAC/C,YAAY,CAAC+C,SAHW;AAIlC;AACA3F,kBAAAA,SAAS,EAAE4C,YAAY,CAAC5C,SALU;AAMlCgF,kBAAAA,MAAM,EAAEpC,YAAY,CAACoC,MANa;AAOlCC,kBAAAA,sBAAsB,EAAErC,YAAY,CAACqC,sBAPH;AAQlCrD,kBAAAA,KAAK,EAAEgB,YAAY,CAAChB,KARc;AASlCgE,kBAAAA,WAAW,EAAEhD,YAAY,CAACgD,WATQ;AAUlCvC,kBAAAA,IAAI,EAAG,GAAEb,QAAS,IAAGG,WAAY,IAAG+C,SAAU,IAAG7C,YAAa;AAV5B,iBAAhB,CAAtB;AAYH,eAdD;AAeH,aAhBD,MAgBO;AACH4C,cAAAA,SAAS,CAACzF,SAAV,KAAwB,MAAxB,IAAkCyF,SAAS,CAACxF,KAA5C,IAAqDwE,cAAc,CAACrB,IAAf,CAAoB;AAAEnD,gBAAAA,KAAK,EAAEwF,SAAS,CAACxF,KAAnB;AAA0BsF,gBAAAA,KAAK,EAAEE,SAAS,CAACxF;AAA3C,eAApB,CAArD;AACAwF,cAAAA,SAAS,CAACxF,KAAV,IAAmBgC,UAAU,CAACmB,IAAX,CAAgB;AAC/BnD,gBAAAA,KAAK,EAAEwF,SAAS,CAACxF,KADc;AAE/BsF,gBAAAA,KAAK,EAAEE,SAAS,CAACxF,KAFc;AAG/B0F,gBAAAA,SAAS,EAACF,SAAS,CAACE,SAHW;AAI/B;AACA3F,gBAAAA,SAAS,EAAEyF,SAAS,CAACzF,SALU;AAM/BgF,gBAAAA,MAAM,EAAES,SAAS,CAACT,MANa;AAO/BC,gBAAAA,sBAAsB,EAAEQ,SAAS,CAACR,sBAPH;AAQ/BrD,gBAAAA,KAAK,EAAE6D,SAAS,CAAC7D,KARc;AAS/BgE,gBAAAA,WAAW,EAAEH,SAAS,CAACG,WATQ;AAU/BvC,gBAAAA,IAAI,EAAG,GAAEb,QAAS,IAAGG,WAAY,IAAG+C,SAAU;AAVf,eAAhB,CAAnB;AAYH;AACJ,WAhCD;AAiCA,iBAAO,IAAP;AACH,SAnCD;AAoCA,eAAO,IAAP;AACH,OAtCD;AAuCA,aAAO;AAAEzD,QAAAA,UAAF;AAAcwC,QAAAA;AAAd,OAAP;AACH,KAhsBkB;;AAAA,SAisBnBoB,eAjsBmB,GAisBA9F,mBAAD,IAAyB;AACvC,UAAIA,mBAAmB,CAAC+D,UAAxB,EAAoC;AAChC,YAAIgC,WAAW,GAAG,EAAlB;AACA,aAAKxG,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,IACI,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAACkF,sBAAhD,CADJ,IAEI,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAACkF,sBAAhD,EAAwEc,cAAxE,CAAuFlE,GAAvF,CAA2FmE,CAAC,IAAI;AAC5F,cAAIA,CAAC,CAACC,gBAAF,KAAuBlG,mBAAmB,CAAC+D,UAApB,CAA+BkB,MAA1D,EACIc,WAAW,CAAC1C,IAAZ,CACI;AACInD,YAAAA,KAAK,EAAE+F,CAAC,CAACE,WAAF,CAAc,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0B4F,iBAAxC,CADX;AAEIZ,YAAAA,KAAK,EAAES,CAAC,CAACI,eAFb;AAGIzB,YAAAA,IAAI,EAAE;AAAE0B,cAAAA,cAAc,EAAEL,CAAC,CAACK;AAApB;AAHV,WADJ;AAOJ,iBAAO,IAAP;AACH,SAVD,CAFJ;;AAaA,YAAIP,WAAW,CAACxD,MAAhB,EAAwB;AAEpB,iBAAOwD,WAAP;AAEH,SAJD,MAIO;AACH,eAAKxG,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,IACI,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAAC+D,UAApB,CAA+BmB,sBAA3D,CADJ,IAEI,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBkD,UAAjB,CAA4BrC,mBAAmB,CAAC+D,UAApB,CAA+BmB,sBAA3D,EAAmFc,cAAnF,CAAkGlE,GAAlG,CAAsGmE,CAAC,IAAI;AACvG,gBAAIA,CAAC,CAACC,gBAAF,KAAuBlG,mBAAmB,CAACiF,MAA/C,EACIc,WAAW,CAAC1C,IAAZ,CACI;AACInD,cAAAA,KAAK,EAAE+F,CAAC,CAACE,WAAF,CAAc,KAAK5G,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0B4F,iBAAxC,CADX;AAEIZ,cAAAA,KAAK,EAAES,CAAC,CAACI,eAFb;AAGIzB,cAAAA,IAAI,EAAE;AAAE0B,gBAAAA,cAAc,EAAEL,CAAC,CAACK;AAApB;AAHV,aADJ;AAOJ,mBAAO,IAAP;AACH,WAVD,CAFJ;AAaA,iBAAOP,WAAP;AACH;AACJ,OAnCD,MAmCO;AACH,eAAO,IAAP;AACH;AACJ,KAxuBkB;;AAAA,SAyuBnBQ,eAzuBmB,GAyuBD,CAAC9B,KAAD,EAAQ+B,IAAR,KAAiB;AAC/B,YAAMxG,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAX,IAAkC,EAA9D;AACA,YAAMyG,cAAc,GAAG,KAAKvH,KAAL,CAAWuH,cAAX,IAA6B,EAApD;AACA,UAAIC,eAAe,GAAG,KAAtB;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,QAAQ,GAAG,EAAf;;AACA,UAAInC,KAAK,CAACoC,MAAN,CAAapG,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAI+F,IAAI,KAAK,qBAAT,IAAkCA,IAAI,KAAK,qBAA/C,EAAsE;AAClE,cAAI7G,MAAM,GAAG,KAAKT,KAAL,CAAWS,MAAxB;AACA,gBAAMmH,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;;AACA,cAAIzB,mBAAmB,CAAC,qBAAD,CAAnB,IAA8CA,mBAAmB,CAAC,qBAAD,CAArE,EAA8F;AAC1F;AACA,gBAAIA,mBAAmB,CAAC0D,eAAxB,EAAyC;AACrC,kBAAI2B,aAAa,GAAGnH,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAAC0D,eAApB,CAAoCjC,KAApC,CAA0C,GAA1C,CAApB,CAApC;;AACA,kBAAI4D,aAAa,CAACxD,KAAlB,EAAyB;AACrB,oBAAIkF,aAAa,GAAG1B,aAAa,CAACxD,KAAd,CAAoBqC,MAApB,CAA2BrC,KAAK,IAAIA,KAAK,CAAC3B,KAAN,KAAgBF,mBAAmB,CAACE,KAAxE,CAApB;AACAmF,gBAAAA,aAAa,GAAG,EAAE,GAAGA,aAAL;AAAoBxD,kBAAAA,KAAK,EAAEkF;AAA3B,iBAAhB;AACApH,gBAAAA,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAAC0D,eAApB,CAAoCjC,KAApC,CAA0C,GAA1C,CAApB,EAAoE4D,aAApE,CAAjC;AACH;;AACD,qBAAOrF,mBAAmB,CAAC,kBAAD,CAA1B;AACA,qBAAOA,mBAAmB,CAAC,yBAAD,CAA1B;AACA,qBAAOA,mBAAmB,CAAC,iBAAD,CAA1B;AACA,qBAAOA,mBAAmB,CAAC,aAAD,CAA1B;AACH;;AACDA,YAAAA,mBAAmB,CAACwG,IAAI,KAAK,qBAAT,GAAiC,qBAAjC,GAAyD,qBAA1D,CAAnB,GAAsG,KAAtG;AACH;;AACDxG,UAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAaG,OAAtD;AACA,gBAAMC,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACAL,UAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASmH,cAAT,EAAyBG,OAAzB,CAAjC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH,SAvBD,MAuBO,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,kBAAtB,IAA4C/B,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,iBAAtE,EAAyF;AAE5F,cAAI/B,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,kBAAtB,IAA4CxG,mBAAmB,CAAC,iBAAD,CAAnE,EAAwF;AACpFA,YAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyC,KAAzC;AACH,WAFD,MAEO,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,iBAAtB,IAA2CxG,mBAAmB,CAAC,kBAAD,CAAlE,EAAwF;AAC3FA,YAAAA,mBAAmB,CAAC,kBAAD,CAAnB,GAA0C,KAA1C;AACH;;AACDA,UAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAaG,OAAtD;AACA,eAAKE,uBAAL,CAA6BlH,mBAA7B;AACH,SATM,MASA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,QAA1B,EAAoC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAED;AACAxG,UAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAA0CxG,mBAAmB,CAAC,WAAD,CAAnB,KAAqC,KAArC,IAA4CA,mBAAmB,CAAC,WAAD,CAAnB,KAAqCwB,SAAlF,GAA6F,KAA7F,GAAmGiD,KAAK,CAACoC,MAAN,CAAaG,OAAzJ;AACC,eAAKE,uBAAL,CAA6BlH,mBAA7B;AACH,SAtCM,MAuCF,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,aAAtB,IAAuC/B,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,QAA7D,IAAyE/B,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,cAAnG,EAAmH;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxG,UAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAaG,OAAtD;AACA,eAAKE,uBAAL,CAA6BlH,mBAA7B;AACH,SAZI,MAaA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,WAA1B,EAAuC;AAExC,cAAI/B,KAAK,CAACoC,MAAN,CAAaG,OAAb,KAAyB,IAA7B,EAAmC;AAC/B,kBAAMG,GAAG,GAAG,KAAKC,cAAL,EAAZ;;AACA,gBAAID,GAAG,KAAK,EAAZ,EAAgB;AACZnH,cAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAaG,OAAtD;AACA,mBAAKE,uBAAL,CAA6BlH,mBAA7B;AACH,aAHD,MAGO;AACHlB,cAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,IAAqE,GAArE,GAA2EqG,GAAtF;AACH;AACJ,WARD,MAQO;AACHnH,YAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAaG,OAAtD;AACA,iBAAKE,uBAAL,CAA6BlH,mBAA7B;AACH;AACJ,SAdI,MAcE,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,mBAA1B,EAA+C;AAClDxG,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2CyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAAzE;AACAhH,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyC,KAAzC;AACAA,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuC,KAAvC;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACAA,UAAAA,mBAAmB,CAAC,WAAD,CAAnB,GAAmC,KAAnC;AACAA,UAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsC,KAAtC;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SATM,MASA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,WAA1B,EAAuC;AAC1CxG,UAAAA,mBAAmB,CAAC,WAAD,CAAnB,GAAmCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAAjE;AACAhH,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuC,KAAvC;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACAA,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2C,KAA3C;AACAA,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyC,KAAzC;AACAA,UAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsC,KAAtC;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SATM,MASA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,gBAA1B,EAA4C;AAC/CxG,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAAtE;AACAhH,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyC,KAAzC;AACAA,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuC,KAAvC;AACAA,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2C,KAA3C;AACAA,UAAAA,mBAAmB,CAAC,WAAD,CAAnB,GAAmC,KAAnC;AACAA,UAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsC,KAAtC;AACA,iBAAQA,mBAAmB,CAAC,gBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,iBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,eAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,aAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,aAAD,CAA3B;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SAdM,MAeF,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,cAA1B,EAA0C;AAC3CxG,UAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAApE;AACAhH,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyC,KAAzC;AACAA,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuC,KAAvC;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACAA,UAAAA,mBAAmB,CAAC,WAAD,CAAnB,GAAmC,KAAnC;AACAA,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2C,KAA3C;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACA,iBAAQA,mBAAmB,CAAC,aAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,UAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,eAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,UAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,kBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,gBAAD,CAA3B;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SAfI,MAgBA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,iBAA1B,EAA6C;AAC9CxG,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAAvE;AACAhH,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACAA,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuC,KAAvC;AACAA,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2C,KAA3C;AACAA,UAAAA,mBAAmB,CAAC,WAAD,CAAnB,GAAmC,KAAnC;AACAA,UAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsC,KAAtC;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SATI,MAUA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,eAA1B,EAA2C;AAC5CxG,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAArE;AACAhH,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyC,KAAzC;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACAA,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2C,KAA3C;AACAA,UAAAA,mBAAmB,CAAC,WAAD,CAAnB,GAAmC,KAAnC;AACAA,UAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsC,KAAtC;AACA,iBAAQA,mBAAmB,CAAC,gBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,iBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,eAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,aAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,aAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,eAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,UAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,kBAAD,CAA3B;AACAA,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,KAAxC;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SAjBI,MAiBE,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,gBAAtB,IAA0C/B,KAAK,CAACoC,MAAN,CAAaG,OAAb,KAAyB,KAAvE,EAA8E;AACjFhH,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAAtE;AACA,iBAAQhH,mBAAmB,CAAC,aAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,aAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,UAAD,CAA3B;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SANM,MAOF,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,eAAtB,IAAyC/B,KAAK,CAACoC,MAAN,CAAaG,OAAb,KAAyB,KAAtE,EAA6E;AAC9EhH,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAArE;AACA,iBAAQhH,mBAAmB,CAAC,kBAAD,CAA3B;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SAJI,MAIE,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,gBAA1B,EAA4C;AAC/CxG,UAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAAtE;AACA,iBAAQhH,mBAAmB,CAAC,eAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,iBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,qBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,kBAAD,CAA3B;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SAPM,MAOA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,iBAA1B,EAA6C;AAChDxG,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAAvE;AACA,iBAAQhH,mBAAmB,CAAC,eAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,gBAAD,CAA3B;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SALM,MAKA,IAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,eAA1B,EAA2C;AAC9CxG,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuCyE,KAAK,CAACoC,MAAN,CAAaG,OAAb,GAAuB,IAAvB,GAA8B,KAArE;AACA,iBAAQhH,mBAAmB,CAAC,gBAAD,CAA3B;AACA,iBAAQA,mBAAmB,CAAC,iBAAD,CAA3B;AACA,eAAKkH,uBAAL,CAA6BlH,mBAA7B;AACH,SALM,MAMF;AACD,cAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,UAA1B,EAAsC;AAClCxG,YAAAA,mBAAmB,CAAC,UAAD,CAAnB,GAAkC,KAAlC;AACH;;AACD,cAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,UAA1B,EAAsC;AAClCxG,YAAAA,mBAAmB,CAAC,UAAD,CAAnB,GAAkC,KAAlC;AACH;;AACD,cAAIyE,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,WAA1B,EAAuC;AACrC;AACM,gBAAIxG,mBAAmB,CAAC,QAAD,CAAvB,EAAmC;AAC/BA,cAAAA,mBAAmB,CAAC,QAAD,CAAnB,GAAgC,KAAhC;AACH,aAJ8B,CAKpC;;AACF;;AACDA,UAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAaG,OAAtD;AACA,eAAKE,uBAAL,CAA6BlH,mBAA7B;AACH;AACJ,OA7ND,CA8NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtOA,WAuOK;AACD,YAAIwG,IAAI,KAAK,SAAb,EAAwB;AAEpBxG,UAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqC,EACjC,GAAGA,mBAAmB,CAAC,aAAD,CADW;AAEjC,aAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,GAAqB/B,KAAK,CAACoC,MAAN,CAAarB;AAFD,WAArC;AAKH;;AACD,YAAIf,KAAK,CAACoC,MAAN,CAAaL,IAAb,KAAsB,OAA1B,EAAmC;AAC/B,gBAAMc,SAAS,GAAG,KAAK/H,KAAL,CAAWJ,KAAX,CAAiBoI,YAAnC;AACA,gBAAMC,cAAc,GAAG,EAAvB;AACAF,UAAAA,SAAS,CAACxF,GAAV,CAAc8C,IAAI,IACd4C,cAAc,CAAC5C,IAAI,CAACY,KAAN,CAAd,GAA6Bf,KAAK,CAACoC,MAAN,CAAarB,KAD9C;AAGAxF,UAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqC,EACjC,GAAGA,mBAAmB,CAAC,aAAD,CADW;AAEjC,eAAGwH;AAF8B,WAArC;AAKAd,UAAAA,eAAe,GAAG,IAAlB;AACAC,UAAAA,QAAQ,GAAGlC,KAAK,CAACoC,MAAN,CAAarB,KAAxB;AACAoB,UAAAA,QAAQ,GAAG5G,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAA9B;AACAxG,UAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAarB,KAAtD;AACH,SAfD,MAgBK;AACDxF,UAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyC/B,KAAK,CAACoC,MAAN,CAAarB,KAAtD;AACH;;AACD,aAAK0B,uBAAL,CAA6BlH,mBAA7B,EAAkD0G,eAAlD,EAAmEE,QAAnE,EAA6ED,QAA7E;AACH;AACJ,KAp/BkB;;AAAA,SAs/BnBS,cAt/BmB,GAs/BF,MAAM;AACnB,UAAID,GAAG,GAAG,EAAV;AACA,WAAKjI,KAAL,CAAWS,MAAX,CAAkBmC,GAAlB,CAAuB8C,IAAD,IAClBA,IAAI,CAAClC,QAAL,CAAcZ,GAAd,CAAmBa,MAAD,IACdA,MAAM,CAACD,QAAP,CAAgBZ,GAAhB,CAAqB4D,SAAD,IAAe;AAC/B,YAAIA,SAAS,CAAC3C,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC2C,UAAAA,SAAS,CAAChD,QAAV,CAAmBZ,GAAnB,CAAwBe,YAAD,IAAkB;AACrC,gBAAIA,YAAY,CAAC5C,SAAb,KAA2B,OAA/B,EAAwC;AACpC,kBAAI4C,YAAY,CAAC4E,SAAjB,EAA4B;AACxBN,gBAAAA,GAAG,GAAGtE,YAAY,CAAC3C,KAAnB;AACH;AACJ;AAEJ,WAPD;AASH,SAVD,MAUO;AACH,cAAIwF,SAAS,CAACzF,SAAV,KAAwB,OAA5B,EAAqC;AACjC,gBAAIyF,SAAS,CAAC+B,SAAd,EAAyB;AACrBN,cAAAA,GAAG,GAAGzB,SAAS,CAACxF,KAAhB;AACH;AACJ;AAEJ;AACJ,OAnBD,CADJ,CADJ;AAyBA,aAAOiH,GAAP;AACH,KAlhCkB;;AAAA,SAohCnBO,oBAphCmB,GAohCI,CAACjD,KAAD,EAAQkD,UAAR,KAAuB;AAC1C,YAAM3H,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAX,IAAkC,EAA9D;AACA,UAAIwF,KAAK,GAAGf,KAAK,CAACoC,MAAN,CAAarB,KAAzB;;AACA,UAAI,CAACoC,KAAK,CAACpC,KAAD,CAAV,EAAmB;AACf;AACAxF,QAAAA,mBAAmB,CAACyE,KAAK,CAACoC,MAAN,CAAaL,IAAd,CAAnB,GAAyChB,KAAzC;AACA,aAAK0B,uBAAL,CAA6BlH,mBAA7B,EAHe,CAIf;AACH;AACJ,KA7hCkB;;AAAA,SA8hCnB6H,gBA9hCmB,GA8hCA,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AACxC,YAAM/H,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAX,IAAkC,EAA9D;AACAA,MAAAA,mBAAmB,CAAC+H,QAAD,CAAnB,GAAgCD,SAAhC;AACA,WAAKZ,uBAAL,CAA6BlH,mBAA7B;AACH,KAliCkB;;AAAA,SAoiCnBgI,aApiCmB,GAoiCH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,UAAI;AAAElI,QAAAA;AAAF,UAA0B,KAAKd,KAAnC;;AACA,UAAIc,mBAAmB,CAACE,KAAxB,EAA+B;AAC3B,YAAIgI,SAAS,KAAK,OAAlB,EAA2B;AACvBlI,UAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACAjI,UAAAA,mBAAmB,CAAC,QAAD,CAAnB,GAAgCiI,SAAS,CAACrD,IAAV,CAAeuD,UAA/C;AACAnI,UAAAA,mBAAmB,CAAC,WAAD,CAAnB,GAAiCiI,SAAS,CAACrD,IAAV,CAAegB,SAAhD;;AAEA,cAAIqC,SAAS,CAACrD,IAAV,CAAeuD,UAAf,KAA8B,eAAlC,EAAmD;AAC/CnI,YAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyC,sBAAsBiI,SAAS,CAACrD,IAAV,CAAegB,SAA9E;AACH;;AACD5F,UAAAA,mBAAmB,CAAC,wBAAD,CAAnB,GAAgDiI,SAAS,CAACzC,KAA1D;AACAxF,UAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqC,KAArC;AACA,gBAAM8G,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB,CAXuB,CAYvB;AACA;AACA;;AACA,gBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;;AACA,cAAIjH,mBAAmB,CAACC,SAApB,KAAkC,sBAAlC,IAA4DD,mBAAmB,CAACC,SAApB,KAAkC,qBAAlG,EAAyH;AACrH,iBAAKV,KAAL,CAAWlC,eAAX,CAA2BsC,MAA3B,EAAmCK,mBAAnC,EAAwDiI,SAAS,CAACzC,KAAlE,EACI,KAAKjG,KAAL,CAAWJ,KAAX,CAAiBqB,QADrB,EAC+BsG,cAD/B,EAC+C,KAAKvH,KAAL,CAAWJ,KAAX,CAAiBkD,UADhE,EAC4E;AAAED,cAAAA,eAAe,EAAE,KAAKlD,KAAL,CAAWkD;AAA9B,aAD5E;AAEH,WAHD,MAGO;AACH,iBAAK7C,KAAL,CAAWlC,eAAX,CAA2BsC,MAA3B,EAAmCK,mBAAnC,EAAwDiI,SAAS,CAACzC,KAAlE,EACI,KAAKjG,KAAL,CAAWJ,KAAX,CAAiBqB,QADrB,EAC+BsG,cAD/B,EAC+C,KAAKvH,KAAL,CAAWJ,KAAX,CAAiBkD,UADhE;AAEH;AAEJ,SAxBD,MAwBO,IAAI6F,SAAS,KAAK,QAAlB,EAA4B;AAC/BlI,UAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACAjI,UAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuCiI,SAAS,CAACzC,KAAjD;;AACA,cAAIyC,SAAS,CAACrD,IAAV,CAAewD,cAAnB,EAAmC;AAC/BpI,YAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,IAAxC;AACH;;AACD,cAAIiI,SAAS,CAACrD,IAAV,CAAeuD,UAAf,KAA8B,eAAlC,EAAmD;AAC/CnI,YAAAA,mBAAmB,CAAC,MAAD,CAAnB,GAA8BiI,SAAS,CAACzC,KAAxC;AACH;;AACD,gBAAMsB,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACA,gBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH,SAbM,MAaA,IAAIkI,SAAS,KAAK,YAAlB,EAAgC;AACnC,cAAID,SAAJ,EAAe;AACX,kBAAMnB,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAI9B,MAAM,GAAG,KAAKT,KAAL,CAAWS,MAAxB;;AACA,gBAAIK,mBAAmB,CAACyD,UAAxB,EAAoC;AAChC,kBAAI4B,aAAa,GAAGnH,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAACyD,UAApB,CAA+BhC,KAA/B,CAAqC,GAArC,CAApB,CAApC;;AACA,kBAAI4D,aAAa,CAACxD,KAAlB,EAAyB;AACrB,oBAAIkF,aAAa,GAAG1B,aAAa,CAACxD,KAAd,CAAoBqC,MAApB,CAA2BrC,KAAK,IAAIA,KAAK,CAAC3B,KAAN,KAAgBF,mBAAmB,CAACE,KAAxE,CAApB;AACAmF,gBAAAA,aAAa,GAAG,EAAE,GAAGA,aAAL;AAAoBxD,kBAAAA,KAAK,EAAEkF;AAA3B,iBAAhB;AACApH,gBAAAA,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAACyD,UAApB,CAA+BhC,KAA/B,CAAqC,GAArC,CAApB,EAA+D4D,aAA/D,CAAjC;AACH;AAEJ;;AACD,gBAAIrB,UAAU,GAAG9F,gBAAgB,CAACyB,MAAD,EAASsI,SAAS,CAAC3E,IAAV,CAAe7B,KAAf,CAAqB,GAArB,CAAT,CAAjC;AACAzB,YAAAA,mBAAmB,CAAC,YAAD,CAAnB,GAAoCiI,SAApC;AACAjI,YAAAA,mBAAmB,CAAC,YAAD,CAAnB,GAAoCiI,SAAS,CAAC3E,IAA9C;;AACA,gBAAItD,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACmG,oBAAtD,IAA8E/E,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACoG,mBAAxI,EAA6J;AACzJhF,cAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCiI,SAAS,CAAC/H,KAA/C;AACH;;AAED,kBAAM+G,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACAL,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASmH,cAAT,EAAyBG,OAAzB,CAAjC;AACA,gBAAIhD,YAAY,GAAGD,UAAU,CAACnC,KAAX,IAAoB,EAAvC;AACA,gBAAIwG,aAAa,GAAGpE,YAAY,CAACC,MAAb,CAAoB+B,CAAC,IAAIA,CAAC,CAAC/F,KAAF,KAAYF,mBAAmB,CAACE,KAAzD,CAApB;;AACA,gBAAImI,aAAa,CAAC9F,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,kBAAI+F,kBAAkB,GAAG,KAAKxC,eAAL,CAAqB9F,mBAArB,CAAzB;;AACA,kBAAIsI,kBAAkB,CAAC/F,MAAnB,KAA8B,CAAlC,EAAqC;AAEjC,sBAAM+D,cAAc,GAAGrI,2BAA2B,CAAC+B,mBAAD,EAAsBiI,SAAtB,EAAiC,KAAK1I,KAAL,CAAWJ,KAAX,CAAiBkD,UAAlD,CAAlD;AACA4B,gBAAAA,YAAY,CAACZ,IAAb,CAAkB;AAAEnD,kBAAAA,KAAK,EAAEF,mBAAmB,CAACE,KAA7B;AAAoCoG,kBAAAA,cAAc,EAAEA,cAApD;AAAoED,kBAAAA,eAAe,EAAEiC,kBAAkB,CAAC,CAAD,CAAlB,CAAsB9C,KAA3G;AAAkHxD,kBAAAA,SAAS,EAAE,KAAK9C,KAAL,CAAWwB,qBAAxI;AAA8J6H,kBAAAA,gBAAgB,EAACvI,mBAAmB,CAAC6F,WAApB,KAAkC,oBAAlC,GAAuD,IAAvD,GAA4D;AAA3O,iBAAlB;AACH,eAJD,MAIO;AACH5B,gBAAAA,YAAY,CAACZ,IAAb,CAAkB;AAAEnD,kBAAAA,KAAK,EAAEF,mBAAmB,CAACE,KAA7B;AAAoC8B,kBAAAA,SAAS,EAAE,KAAK9C,KAAL,CAAWwB;AAA1D,iBAAlB;AACH;AAEJ;;AACDsD,YAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBnC,cAAAA,KAAK,EAAEoC;AAAxB,aAAb;AACAtE,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASsI,SAAS,CAAC3E,IAAV,CAAe7B,KAAf,CAAqB,GAArB,CAAT,EAAoCuC,UAApC,CAAjC;;AACA,gBAAIhE,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACkF,KAA1D,EAAiE;AAC7D,mBAAKlE,QAAL,CAAc;AAAED,gBAAAA,MAAF;AAAUK,gBAAAA;AAAV,eAAd;AACH,aAFD,MAEO,IAAIA,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACmG,oBAAtD,IAA8E/E,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACoG,mBAAxI,EAA6J;AAChK,kBAAIF,gBAAgB,GAAG,KAAK5F,KAAL,CAAW4F,gBAAX,IAA+B,EAAtD;AACAA,cAAAA,gBAAgB,GAAGd,UAAU,CAACsB,YAAX,CAAwBC,IAAxB,CAA6BzD,GAA7B,CAAiC8C,IAAI,IAAI;AACxD,uBAAO;AAAEY,kBAAAA,KAAK,EAAEZ,IAAI,CAAC9D,EAAd;AAAkBZ,kBAAAA,KAAK,EAAE0E,IAAI,CAACa,IAA9B;AAAoCb,kBAAAA;AAApC,iBAAP;AACH,eAFkB,CAAnB;AAGA,mBAAKhF,QAAL,CAAc;AAAED,gBAAAA,MAAF;AAAUK,gBAAAA,mBAAV;AAA+B8E,gBAAAA;AAA/B,eAAd;AACH,aANM,MAOF;AACD,mBAAKvF,KAAL,CAAWlC,eAAX,CAA2BsC,MAA3B,EAAmCK,mBAAnC,EACIA,mBAAmB,CAAC+D,UAApB,CAA+BmB,sBADnC,EAC2D,KAAK3F,KAAL,CAAWJ,KAAX,CAAiBqB,QAD5E,EAEIsG,cAFJ,EAEoB,KAAKvH,KAAL,CAAWJ,KAAX,CAAiBkD,UAFrC,EAGI;AAAEH,gBAAAA,UAAU,EAAE,KAAKhD,KAAL,CAAWgD,UAAzB;AAAqCxB,gBAAAA,qBAAqB,EAAE,KAAKxB,KAAL,CAAWwB;AAAvE,eAHJ,EAII,IAJJ;AAKH;AAEJ,WArDD,MAqDO;AAEH,kBAAMoG,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AAEA,gBAAIuC,UAAU,GAAG9F,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAACyD,UAApB,CAA+BhC,KAA/B,CAAqC,GAArC,CAApB,CAAjC;AACA,gBAAIwC,YAAY,GAAGD,UAAU,CAACnC,KAAX,CAAiBqC,MAAjB,CAAwBrC,KAAK,IAAIA,KAAK,CAAC3B,KAAN,KAAgBF,mBAAmB,CAACE,KAArE,CAAnB;AACA8D,YAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBnC,cAAAA,KAAK,EAAEoC;AAAxB,aAAb;AACA,gBAAItE,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAACyD,UAApB,CAA+BhC,KAA/B,CAAqC,GAArC,CAApB,EAA+DuC,UAA/D,CAArC;AACAhE,YAAAA,mBAAmB,CAAC,YAAD,CAAnB,GAAoCiI,SAApC;AACA,gBAAIjI,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACkF,KAA1D,EACI9D,mBAAmB,CAAC,QAAD,CAAnB,GAAgCiI,SAAhC;AACJ,kBAAMhB,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACAL,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASmH,cAAT,EAAyBG,OAAzB,CAAjC;;AACA,gBAAIjH,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACkF,KAA1D,EAAiE;AAC7D,mBAAKlE,QAAL,CAAc;AAAED,gBAAAA,MAAF;AAAUK,gBAAAA;AAAV,eAAd;AACH,aAFD,MAEO;AACH,mBAAKJ,QAAL,CAAc;AAAED,gBAAAA,MAAF;AAAUK,gBAAAA,mBAAV;AAA+BmF,gBAAAA,WAAW,EAAE;AAA5C,eAAd;AACH;AACJ;AAEJ,SA1EM,MA0EA,IAAI+C,SAAS,KAAK,aAAlB,EAAiC;AACpClI,UAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCiI,SAArC;AACA,cAAIjE,UAAU,GAAG9F,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAACyD,UAApB,CAA+BhC,KAA/B,CAAqC,GAArC,CAApB,CAAjC;AACA,cAAIwC,YAAY,GAAG,EAAnB;AACAD,UAAAA,UAAU,CAACnC,KAAX,CAAiBC,GAAjB,CAAqBD,KAAK,IAAI;AAC1B,gBAAIA,KAAK,CAAC3B,KAAN,KAAgBF,mBAAmB,CAACE,KAAxC,EAA+C;AAC3C+D,cAAAA,YAAY,CAACZ,IAAb,CAAkB,EACd,GAAGxB,KADW;AACJwE,gBAAAA,eAAe,EAAE4B,SAAS,CAACzC,KADvB;AAC8Bc,gBAAAA,cAAc,EAAE2B,SAAS,CAACrD,IAAV,CAAe0B,cAD7D;AAC4EiC,gBAAAA,gBAAgB,EAACvI,mBAAmB,CAAC6F,WAApB,KAAkC,oBAAlC,GAAuD,IAAvD,GAA4D;AADzJ,eAAlB;AAGH,aAJD,MAIO;AACH5B,cAAAA,YAAY,CAACZ,IAAb,CAAkBxB,KAAlB;AACH;;AACD,mBAAO,IAAP;AACH,WATD;AAUAmC,UAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBnC,YAAAA,KAAK,EAAEoC;AAAxB,WAAb;AACA,cAAItE,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAACyD,UAApB,CAA+BhC,KAA/B,CAAqC,GAArC,CAApB,EAA+DuC,UAA/D,CAArC;AACA,gBAAMiD,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACAL,UAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAAS,KAAKT,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAT,EAAsDwF,OAAtD,CAAjC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH,SAnBM,MAmBA,IAAIkI,SAAS,KAAK,cAAlB,EAAkC;AACrClI,UAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACAjI,UAAAA,mBAAmB,CAACwI,WAApB,GAAkC,EAAlC;AACAxI,UAAAA,mBAAmB,CAACyI,iBAApB,GAAwC,EAAxC;AACA,gBAAM3B,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACA,gBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;;AACA,cAAIgB,SAAS,CAACxH,IAAV,KAAmB,SAAvB,EAAkC;AAC9B,iBAAKb,QAAL,CAAc;AAAED,cAAAA,MAAF;AAAUK,cAAAA;AAAV,aAAd;AACH,WAFD,MAEO;AACH,iBAAKT,KAAL,CAAWjC,mBAAX,CAA+BqC,MAA/B,EAAuCK,mBAAvC,EAA4D,EAA5D,EAAgE,KAAKT,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjF,EACIsG,cADJ,EACoB,KAAKvH,KAAL,CAAWJ,KAAX,CAAiBkD,UADrC,EAEI;AAAEH,cAAAA,UAAU,EAAE,KAAKhD,KAAL,CAAWgD,UAAzB;AAAqCxB,cAAAA,qBAAqB,EAAE,KAAKxB,KAAL,CAAWwB;AAAvE,aAFJ,EAGI,IAHJ;AAIH;AAEJ,SAhBM,MAgBA,IAAIwH,SAAS,KAAK,oBAAlB,EAAwC;AAC3ClI,UAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACAjI,UAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsC,EAAtC;AACA,eAAKd,KAAL,CAAWc,mBAAX,CAA+BkI,SAA/B,EAA0CpG,GAA1C,CAA8Cb,IAAI,IAAI;AAClD,mBAAOjB,mBAAmB,CAAC,cAAD,CAAnB,CAAoCqD,IAApC,CAAyCpC,IAAI,CAAC2D,IAAL,CAAU,MAAV,IAAoB;AAAEnE,cAAAA,IAAI,EAAEQ,IAAI,CAACR,IAAb;AAAmB,iBAAGQ,IAAI,CAAC2D,IAAL,CAAU,MAAV;AAAtB,aAApB,GAAgE3D,IAAI,CAAC2D,IAA9G,CAAP;AACH,WAFD;AAGA,gBAAMkC,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACA,gBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH,SAVM,MAWF,IAAIkI,SAAS,KAAK,yBAAlB,EAA6C;AAC9ClI,UAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACAjI,UAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyCiI,SAAS,CAACzC,KAAnD;;AACA,cAAIyC,SAAS,CAACrD,IAAV,CAAewD,cAAnB,EAAmC;AAC/BpI,YAAAA,mBAAmB,CAAC,gBAAD,CAAnB,GAAwC,IAAxC;AACH;;AACD,cAAIiI,SAAS,CAACrD,IAAV,CAAeuD,UAAf,KAA8B,eAAlC,EAAmD;AAC/CnI,YAAAA,mBAAmB,CAAC,MAAD,CAAnB,GAA8BiI,SAAS,CAACzC,KAAxC;AACH;;AACD,gBAAMsB,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACA,gBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH,SAbI,MAcA,IAAIkI,SAAS,KAAK,aAAlB,EAAiC;AAClC,cAAID,SAAJ,EAAe;AACX,kBAAMnB,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAI9B,MAAM,GAAG,KAAKT,KAAL,CAAWS,MAAxB;AACA,gBAAIqE,UAAU,GAAG9F,gBAAgB,CAACyB,MAAD,EAASsI,SAAS,CAAC3E,IAAV,CAAe7B,KAAf,CAAqB,GAArB,CAAT,CAAjC;AACAzB,YAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCiI,SAArC;AACAjI,YAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyCiI,SAAS,CAAC3E,IAAnD;AACAtD,YAAAA,mBAAmB,CAAC,kBAAD,CAAnB,GAA0CiI,SAAS,CAAC/H,KAApD;AACA,mBAAOF,mBAAmB,CAAC,iBAAD,CAA1B;AACA,mBAAOA,mBAAmB,CAAC,yBAAD,CAA1B;AACA,kBAAMiH,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACAL,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASmH,cAAT,EAAyBG,OAAzB,CAAjC;AACA,gBAAIhD,YAAY,GAAGD,UAAU,CAACnC,KAAX,IAAoB,EAAvC;AACA,gBAAIwG,aAAa,GAAGpE,YAAY,CAACC,MAAb,CAAoB+B,CAAC,IAAIA,CAAC,CAAC/F,KAAF,KAAYF,mBAAmB,CAACE,KAAzD,CAApB;;AACA,gBAAImI,aAAa,CAAC9F,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,kBAAI+F,kBAAkB,GAAG,KAAKxC,eAAL,CAAqB9F,mBAArB,CAAzB;;AACA,kBAAIsI,kBAAkB,KAAK,IAAvB,IAA+BA,kBAAkB,CAAC/F,MAAnB,KAA8B,CAAjE,EAAoE;AAChE0B,gBAAAA,YAAY,CAACZ,IAAb,CAAkB;AAAEnD,kBAAAA,KAAK,EAAEF,mBAAmB,CAACE,KAA7B;AAAoCmG,kBAAAA,eAAe,EAAEiC,kBAAkB,CAAC,CAAD,CAAlB,CAAsB9C,KAA3E;AAAkFxD,kBAAAA,SAAS,EAAE,KAAK9C,KAAL,CAAWwB;AAAxG,iBAAlB;AACH,eAFD,MAEO;AACHuD,gBAAAA,YAAY,CAACZ,IAAb,CAAkB;AAAEnD,kBAAAA,KAAK,EAAEF,mBAAmB,CAACE,KAA7B;AAAoC8B,kBAAAA,SAAS,EAAE,KAAK9C,KAAL,CAAWwB;AAA1D,iBAAlB;AACH;AAEJ;;AACDsD,YAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBnC,cAAAA,KAAK,EAAEoC;AAAxB,aAAb;AACAtE,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASsI,SAAS,CAAC3E,IAAV,CAAe7B,KAAf,CAAqB,GAArB,CAAT,EAAoCuC,UAApC,CAAjC;AACA,gBAAIc,gBAAgB,GAAG,KAAK5F,KAAL,CAAW4F,gBAAX,IAA+B,EAAtD;AACAA,YAAAA,gBAAgB,GAAGd,UAAU,CAACsB,YAAX,IACftB,UAAU,CAACsB,YAAX,CAAwBC,IAAxB,CAA6BzD,GAA7B,CAAiC8C,IAAI,IAAI;AACrC,qBAAO;AAAEY,gBAAAA,KAAK,EAAEZ,IAAI,CAAC9D,EAAd;AAAkBZ,gBAAAA,KAAK,EAAE0E,IAAI,CAACa,IAA9B;AAAoCb,gBAAAA;AAApC,eAAP;AACH,aAFD,CADJ;AAIA,iBAAKhF,QAAL,CAAc;AAAED,cAAAA,MAAF;AAAUK,cAAAA,mBAAV;AAA+B8E,cAAAA;AAA/B,aAAd;AAEH,WA/BD,MA+BO;AAEH,kBAAMgC,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AAEA,gBAAIuC,UAAU,GAAG9F,gBAAgB,CAAC,KAAKgB,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAAC0D,eAApB,CAAoCjC,KAApC,CAA0C,GAA1C,CAApB,CAAjC;AACA,gBAAIwC,YAAY,GAAGD,UAAU,CAACnC,KAAX,CAAiBqC,MAAjB,CAAwBrC,KAAK,IAAIA,KAAK,CAAC3B,KAAN,KAAgBF,mBAAmB,CAACE,KAArE,CAAnB;AACA8D,YAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBnC,cAAAA,KAAK,EAAEoC;AAAxB,aAAb;AACA,gBAAItE,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBK,mBAAmB,CAAC0D,eAApB,CAAoCjC,KAApC,CAA0C,GAA1C,CAApB,EAAoEuC,UAApE,CAArC;AACAhE,YAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCiI,SAArC;AACAjI,YAAAA,mBAAmB,CAAC,yBAAD,CAAnB,GAAiDiI,SAAjD;AACA,mBAAOjI,mBAAmB,CAAC,iBAAD,CAA1B;AACA,kBAAMiH,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACAL,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAASmH,cAAT,EAAyBG,OAAzB,CAAjC;;AACA,gBAAIjH,mBAAmB,CAAC6D,aAApB,KAAsCjF,eAAe,CAACkF,KAA1D,EAAiE;AAC7D,mBAAKlE,QAAL,CAAc;AAAED,gBAAAA,MAAF;AAAUK,gBAAAA;AAAV,eAAd;AACH,aAFD,MAEO;AACH,mBAAKJ,QAAL,CAAc;AAAED,gBAAAA,MAAF;AAAUK,gBAAAA,mBAAV;AAA+BmF,gBAAAA,WAAW,EAAE;AAA5C,eAAd;AACH;AACJ;AAEJ,SApDI,MAoDE,IAAI+C,SAAS,KAAK,QAAlB,EAA4B;AAC/B,cAAID,SAAJ,EAAe;AACXjI,YAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACAjI,YAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCiI,SAAS,CAACzC,KAA/C;AACAxF,YAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCiI,SAAS,CAACrD,IAAV,CAAe8D,KAApD;AACA,kBAAM5B,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,kBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACA,kBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,iBAAKrH,QAAL,CAAc;AAAED,cAAAA,MAAF;AAAUK,cAAAA;AAAV,aAAd;AACH,WARD,MAQO;AACHA,YAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACA,mBAAOjI,mBAAmB,CAAC,aAAD,CAA1B;AACA,mBAAOA,mBAAmB,CAAC,aAAD,CAA1B;AACA,mBAAOA,mBAAmB,CAAC,cAAD,CAA1B;AACA,kBAAM8G,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,kBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACA,kBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,iBAAKrH,QAAL,CAAc;AAAED,cAAAA,MAAF;AAAUK,cAAAA;AAAV,aAAd;AACH;AAEJ,SApBM,MAqBF,IAAIkI,SAAS,KAAK,mBAAlB,EAAuC;AACxC,cAAID,SAAJ,EAAe;AACXjI,YAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACA,kBAAMnB,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,kBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACA,kBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,kBAAM0B,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWZ,SAAS,CAACrD,IAAV,CAAekE,QAAf,CAAwBtD,KAAnC,EAA0CuD,WAAvD;AACA,kBAAMC,kBAAkB,GAAGL,IAAI,CAAC7G,GAAL,CAASmE,CAAC,IAAI;AAErC;AACA,qBAAO;AAAE/F,gBAAAA,KAAK,EAAE+F,CAAC,CAAC,aAAD,CAAD,CAAiB,KAAK1G,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0B4F,iBAA3C,CAAT;AAAwEZ,gBAAAA,KAAK,EAAES,CAAC,CAAC,aAAD,CAAD,CAAiB,KAAK1G,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0B4F,iBAA3C,CAA/E;AAA8IxB,gBAAAA,IAAI,EAAEqB;AAApJ,eAAP;AACH,aAJ0B,CAA3B;AAMA,iBAAKrG,QAAL,CAAc;AAAED,cAAAA,MAAF;AAAUK,cAAAA,mBAAV;AAA+BgJ,cAAAA;AAA/B,aAAd;AACH,WAbD,MAaO;AACHhJ,YAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACA,mBAAOjI,mBAAmB,CAAC,oBAAD,CAA1B;AACA,kBAAM8G,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,kBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,aAAhB;AACA,kBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,iBAAKrH,QAAL,CAAc;AAAED,cAAAA,MAAF;AAAUK,cAAAA,mBAAV;AAA+BgJ,cAAAA,kBAAkB,EAAE;AAAnD,aAAd;AACH;AACJ,SAtBI,MAsBE,IAAId,SAAS,KAAK,mBAAlB,EAAuC;AAC1ClI,UAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACA,gBAAMhB,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACA,gBAAM8G,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAM9B,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH,SANM,MAOF,IAAIkI,SAAS,KAAK,wBAAlB,EAA4C;AAC7C;AAEAlI,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2C,EAA3C;AACAiI,UAAAA,SAAS,CAACnG,GAAV,CAAcb,IAAI,IAAI;AAClB,mBAAOjB,mBAAmB,CAAC,mBAAD,CAAnB,CAAyCqD,IAAzC,CAA8C,EAAE,GAAGpC;AAAL,aAA9C,CAAP;AACH,WAFD;AAGA,gBAAM6F,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACA,gBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH,SAXI,MAYA;AACDA,UAAAA,mBAAmB,CAACkI,SAAD,CAAnB,GAAiCD,SAAjC;AACA,gBAAMnB,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,gBAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,WAAhB;AACA,gBAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,eAAKrH,QAAL,CAAc;AAAED,YAAAA,MAAF;AAAUK,YAAAA;AAAV,WAAd;AACH;AACJ,OArSD,MAqSO;AACHlB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KA/0CkB;;AAAA,SAg1CnBmI,MAh1CmB,GAg1CT1D,IAAD,IAAU;AACf,YAAMvF,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAX,IAAkC,EAA9D;AAEAA,MAAAA,mBAAmB,CAAC,cAAD,CAAnB,GAAsCuF,IAAtC;;AAEA,UAAIvF,mBAAmB,CAAC,mBAAD,CAAvB,EAA8C;AAC1C,YAAIkJ,KAAK,CAACC,OAAN,CAAcnJ,mBAAmB,CAAC,mBAAD,CAAjC,CAAJ,EAA6D;AACzD,cAAI2I,IAAI,GAAG,EAAX;AACApD,UAAAA,IAAI,CAACA,IAAL,CAAUzD,GAAV,CAAcmE,CAAC,IAAI;AACfjG,YAAAA,mBAAmB,CAAC,mBAAD,CAAnB,CAAyC8B,GAAzC,CAA6CsH,CAAC,IAAI;AAC9C,kBAAInD,CAAC,CAACR,IAAF,KAAW2D,CAAC,CAAClJ,KAAjB,EAAwB;AACpByI,gBAAAA,IAAI,CAACtF,IAAL,CAAU,EAAE,GAAG+F;AAAL,iBAAV;AACH;AACJ,aAJD;AAMH,WAPD;AAQApJ,UAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2C2I,IAAI,CAACpG,MAAL,GAAc,CAAd,GAAkBoG,IAAlB,GAAyBnH,SAApE;AAGH,SAbD,MAaO;AAEH,gBAAMmH,IAAI,GAAGpD,IAAI,CAACA,IAAL,CAAUrB,MAAV,CAAiB+B,CAAC,IAAIA,CAAC,CAACR,IAAF,KAAWzF,mBAAmB,CAAC,mBAAD,CAAnB,CAAyCE,KAA1E,CAAb;AACA,cAAIyI,IAAI,CAACpG,MAAL,KAAgB,CAApB,EACIvC,mBAAmB,CAAC,mBAAD,CAAnB,GAA2CwB,SAA3C;AACP;AAEJ;;AAGD,WAAK0F,uBAAL,CAA6BlH,mBAA7B;AAEH,KA/2CkB;;AAAA,SAg3CnBqJ,YAh3CmB,GAg3CJ,MAAM;AACjB,UAAI;AAAErJ,QAAAA;AAAF,UAA0B,KAAKd,KAAnC;AACA,UAAIoK,gBAAJ;AACA,UAAIC,WAAJ;AACA,UAAIC,eAAJ;AACA,UAAIC,oBAAJ;AACA,UAAIC,yBAAyB,GAAG,EAAhC;;AACA,UAAI1J,mBAAmB,CAAC,cAAD,CAAnB,IAAuCA,mBAAmB,CAAC,WAAD,CAA1D,KACIA,mBAAmB,CAAC,oBAAD,CAAnB,IAA6CA,mBAAmB,CAAC,oBAAD,CADpE,CAAJ,EACiG;AAC7F0J,QAAAA,yBAAyB,GAAGd,IAAI,CAACC,KAAL,CAAW7I,mBAAmB,CAAC,mBAAD,CAAnB,CAAyC4E,IAAzC,CAA8CkE,QAA9C,CAAuDtD,KAAlE,CAA5B;;AACA,gBAAQxF,mBAAmB,CAAC,cAAD,CAAnB,CAAoCS,IAA5C;AACI,eAAK,QAAL;AAAe;AACX6I,cAAAA,gBAAgB,GAAG,UAAUtJ,mBAAmB,CAAC2J,YAApB,CAAiC/E,IAAjC,CAAsC+C,UAAnE;AACA4B,cAAAA,WAAW,GAAG;AAAErJ,gBAAAA,KAAK,EAAEF,mBAAmB,CAACgJ,kBAApB,CAAuC9I,KAAhD;AAAuDsF,gBAAAA,KAAK,EAAExF,mBAAmB,CAACgJ,kBAApB,CAAuCpE,IAAvC,CAA4C+C;AAA1G,eAAd;AAEA;AACH;;AACD,eAAK,SAAL;AAAgB;AACZ2B,cAAAA,gBAAgB,GAAG,sBAAsBtJ,mBAAmB,CAAC2J,YAApB,CAAiC/E,IAAjC,CAAsC+C,UAA5D,GAAyE,GAA5F;AACA4B,cAAAA,WAAW,GAAG;AAAErJ,gBAAAA,KAAK,EAAEF,mBAAmB,CAACgJ,kBAApB,CAAuC9I,KAAhD;AAAuDsF,gBAAAA,KAAK,EAAExF,mBAAmB,CAACA,mBAApB,CAAwCgJ,kBAAxC,CAA2DpE,IAA3D,CAAgE+C;AAA9H,eAAd;AACA;AACH;;AACD,eAAK,SAAL;AAAgB;AACZ2B,cAAAA,gBAAgB,GAAG,UAAUtJ,mBAAmB,CAAC2J,YAApB,CAAiC/E,IAAjC,CAAsCyB,eAAnE;AACAkD,cAAAA,WAAW,GAAG;AAAErJ,gBAAAA,KAAK,EAAEF,mBAAmB,CAACgJ,kBAApB,CAAuC9I,KAAhD;AAAuDsF,gBAAAA,KAAK,EAAExF,mBAAmB,CAACgJ,kBAApB,CAAuCpE,IAAvC,CAA4C+C;AAA1G,eAAd;AAEA;AACH;;AACD;AACI;AAnBR;;AAsBA,gBAAQ3H,mBAAmB,CAAC,WAAD,CAAnB,CAAiCwF,KAAzC;AACI,eAAK/H,SAAS,CAACmM,MAAf;AACIJ,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,OAAnB,GAA6BI,yBAAyB,CAACG,UAA1B,CAAqCC,SAAlE,GAA8E,GAA9E,GAAoFP,WAAW,CAAC/D,KAAhG,GAAwG,IAA1H;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,KAAzC,GAAiDqJ,WAAW,CAACrJ,KAApF;AACA;;AACJ,eAAKzC,SAAS,CAACsM,SAAf;AACIP,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,KAAnB,GAA2BI,yBAAyB,CAACG,UAA1B,CAAqCC,SAAhE,GAA4E,GAA5E,GAAkFP,WAAW,CAAC/D,KAA9F,GAAsG,IAAxH;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,KAAzC,GAAiDqJ,WAAW,CAACrJ,KAApF;AACA;;AACJ,eAAKzC,SAAS,CAACuM,UAAf;AACIR,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,WAAnB,GAAiCI,yBAAyB,CAACG,UAA1B,CAAqCC,SAAtE,GAAkF,GAAlF,GAAwFP,WAAW,CAAC/D,KAApG,GAA4G,IAA5G,GAAmH,IAArI;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,eAAzC,GAA2DqJ,WAAW,CAACrJ,KAA9F;AACA;;AACJ,eAAKzC,SAAS,CAACwM,QAAf;AACIT,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,YAAnB,GAAkCI,yBAAyB,CAACG,UAA1B,CAAqCC,SAAvE,GAAmF,GAAnF,GAAyFP,WAAW,CAAC/D,KAArG,GAA6G,KAA/H;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,YAAzC,GAAwDqJ,WAAW,CAACrJ,KAA3F;AACA;;AACJ,eAAKzC,SAAS,CAACyM,QAAf;AACIV,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,YAAnB,GAAkCI,yBAAyB,CAACG,UAA1B,CAAqCC,SAAvE,GAAmF,GAAnF,GAAyFP,WAAW,CAAC/D,KAArG,GAA6G,MAA/H;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,YAAzC,GAAwDqJ,WAAW,CAACrJ,KAA3F;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACI;AA9BR;;AAgCA,YAAIiK,gBAAgB,GAAGnK,mBAAmB,CAACmK,gBAApB,IAAwC,EAA/D;AACA,YAAIC,iBAAiB,GAAGpK,mBAAmB,CAACoK,iBAApB,IAAyC,EAAjE;AACAD,QAAAA,gBAAgB,CAAC9G,IAAjB,CAAsBoG,oBAAtB;AACAW,QAAAA,iBAAiB,CAAC/G,IAAlB,CAAuBmG,eAAvB;AACAxJ,QAAAA,mBAAmB,GAAG,EAClB,GAAGA,mBADe;AAElB2J,UAAAA,YAAY,EAAE,EAFI;AAGlBlM,UAAAA,SAAS,EAAE,EAHO;AAIlBgL,UAAAA,iBAAiB,EAAEjH,SAJD;AAKlBgH,UAAAA,WAAW,EAAE,EALK;AAMlB6B,UAAAA,iBAAiB,EAAE,EAND;AAOlBC,UAAAA,oBAAoB,EAAE,KAPJ;AAQlBH,UAAAA,gBARkB;AASlBC,UAAAA,iBATkB;AAUlBpB,UAAAA,kBAAkB,EAAE;AAVF,SAAtB;AAaAhJ,QAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyCoK,iBAAiB,CAACG,IAAlB,CAAuB,GAAvB,CAAzC;AAEH,OA5ED,MA6EK,IAAIvK,mBAAmB,CAAC,cAAD,CAAnB,IAAuCA,mBAAmB,CAAC,WAAD,CAA1D,KACDA,mBAAmB,CAAC,mBAAD,CAAnB,IAA4CA,mBAAmB,CAAC,aAAD,CAD9D,CAAJ,EACoF;AAErF,gBAAQA,mBAAmB,CAAC,cAAD,CAAnB,CAAoCS,IAA5C;AACI,eAAK,QAAL;AAAe;AACX6I,cAAAA,gBAAgB,GAAG,UAAUtJ,mBAAmB,CAAC2J,YAApB,CAAiC/E,IAAjC,CAAsC+C,UAAnE;AACA4B,cAAAA,WAAW,GAAG;AAAErJ,gBAAAA,KAAK,EAAEF,mBAAmB,CAACyI,iBAA7B;AAAgDjD,gBAAAA,KAAK,EAAExF,mBAAmB,CAACyI;AAA3E,eAAd;AACA;AACH;;AACD,eAAK,SAAL;AAAgB;AACZa,cAAAA,gBAAgB,GAAG,sBAAsBtJ,mBAAmB,CAAC2J,YAApB,CAAiC/E,IAAjC,CAAsC+C,UAA5D,GAAyE,GAA5F;AACA4B,cAAAA,WAAW,GAAG;AAAErJ,gBAAAA,KAAK,EAAEF,mBAAmB,CAACyI,iBAA7B;AAAgDjD,gBAAAA,KAAK,EAAExF,mBAAmB,CAACyI;AAA3E,eAAd;AACA;AACH;;AACD,eAAK,SAAL;AAAgB;AACZa,cAAAA,gBAAgB,GAAG,UAAUtJ,mBAAmB,CAAC2J,YAApB,CAAiC/E,IAAjC,CAAsCyB,eAAnE;AACAkD,cAAAA,WAAW,GAAGvJ,mBAAmB,CAACwI,WAAlC;AACA;AACH;;AACD;AACI;AAjBR;;AAmBA,gBAAQxI,mBAAmB,CAAC,WAAD,CAAnB,CAAiCwF,KAAzC;AACI,eAAK/H,SAAS,CAACmM,MAAf;AACIJ,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,MAAnB,GAA4BC,WAAW,CAAC/D,KAAxC,GAAgD,GAAlE;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,KAAzC,GAAiDqJ,WAAW,CAACrJ,KAApF;AACA;;AACJ,eAAKzC,SAAS,CAACsM,SAAf;AACIP,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,OAAnB,GAA6BC,WAAW,CAAC/D,KAAzC,GAAiD,GAAnE;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,KAAzC,GAAiDqJ,WAAW,CAACrJ,KAApF;AACA;;AACJ,eAAKzC,SAAS,CAACuM,UAAf;AACIR,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,SAAnB,GAA+BC,WAAW,CAAC/D,KAA3C,GAAmD,IAArE;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,eAAzC,GAA2DqJ,WAAW,CAACrJ,KAA9F;AACA;;AACJ,eAAKzC,SAAS,CAACwM,QAAf;AACIT,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,UAAnB,GAAgCC,WAAW,CAAC/D,KAA5C,GAAoD,GAAtE;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,YAAzC,GAAwDqJ,WAAW,CAACrJ,KAA3F;AACA;;AACJ,eAAKzC,SAAS,CAACyM,QAAf;AACIV,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,UAAnB,GAAgCC,WAAW,CAAC/D,KAA5C,GAAoD,IAAtE;AACAiE,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,YAAzC,GAAwDqJ,WAAW,CAACrJ,KAA3F;AACA;;AACJ,eAAKzC,SAAS,CAAC+M,QAAf;AACIhB,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,OAAnB,GAA6BC,WAAW,CAACzH,GAAZ,CAAgBmE,CAAC,IAAIA,CAAC,CAACT,KAAvB,EAA8B+E,IAA9B,CAAmC,GAAnC,CAA7B,GAAuE,IAAzF;AACAd,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,OAAzC,GAAmDqJ,WAAW,CAACzH,GAAZ,CAAgBmE,CAAC,IAAIA,CAAC,CAAC/F,KAAvB,EAA8BqK,IAA9B,CAAmC,GAAnC,CAAnD,GAA6F,IAApH;AACA;;AACJ,eAAK9M,SAAS,CAACgN,WAAf;AACIjB,YAAAA,eAAe,GAAGF,gBAAgB,GAAG,WAAnB,GAAiCC,WAAW,CAACzH,GAAZ,CAAgBmE,CAAC,IAAIA,CAAC,CAACT,KAAvB,EAA8B+E,IAA9B,CAAmC,GAAnC,CAAjC,GAA2E,IAA7F;AACAd,YAAAA,oBAAoB,GAAGzJ,mBAAmB,CAAC2J,YAApB,CAAiCzJ,KAAjC,GAAyC,WAAzC,GAAuDqJ,WAAW,CAACzH,GAAZ,CAAgBmE,CAAC,IAAIA,CAAC,CAAC/F,KAAvB,EAA8BqK,IAA9B,CAAmC,GAAnC,CAAvD,GAAiG,IAAxH;AACA;;AACJ;AACI;AA9BR;;AAgCA,YAAIJ,gBAAgB,GAAGnK,mBAAmB,CAACmK,gBAApB,IAAwC,EAA/D;AACA,YAAIC,iBAAiB,GAAGpK,mBAAmB,CAACoK,iBAApB,IAAyC,EAAjE;AACAD,QAAAA,gBAAgB,CAAC9G,IAAjB,CAAsBoG,oBAAtB;AACAW,QAAAA,iBAAiB,CAAC/G,IAAlB,CAAuBmG,eAAvB;AACAxJ,QAAAA,mBAAmB,GAAG,EAClB,GAAGA,mBADe;AAElB2J,UAAAA,YAAY,EAAE,EAFI;AAGlBlM,UAAAA,SAAS,EAAE,EAHO;AAIlBgL,UAAAA,iBAAiB,EAAEjH,SAJD;AAKlBgH,UAAAA,WAAW,EAAE,EALK;AAMlB2B,UAAAA,gBANkB;AAOlBC,UAAAA,iBAPkB;AAQlBE,UAAAA,oBAAoB,EAAE,KARJ;AASlBtB,UAAAA,kBAAkB,EAAE;AATF,SAAtB;AAYAhJ,QAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyCoK,iBAAiB,CAACG,IAAlB,CAAuB,GAAvB,CAAzC;AACH,OAvEI,MAwEA;AACD,eAAOzL,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX,CAAP;AACH;;AACD,YAAMgG,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,YAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,OAAhB;AACA,YAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,WAAKrH,QAAL,CAAc;AAAED,QAAAA,MAAF;AAAUK,QAAAA,mBAAV;AAA+BgJ,QAAAA,kBAAkB,EAAE;AAAnD,OAAd;AACH,KAnhDkB;;AAAA,SAohDnB0B,eAphDmB,GAohDAC,KAAD,IAAW;AACzB,UAAI;AAAE3K,QAAAA;AAAF,UAA0B,KAAKd,KAAnC;AACA,UAAIiL,gBAAgB,GAAGnK,mBAAmB,CAACmK,gBAA3C;AACA,UAAIC,iBAAiB,GAAGpK,mBAAmB,CAACoK,iBAA5C;AACAD,MAAAA,gBAAgB,CAACS,MAAjB,CAAwBD,KAAxB,EAA+B,CAA/B;AACAP,MAAAA,iBAAiB,CAACQ,MAAlB,CAAyBD,KAAzB,EAAgC,CAAhC;AACA3K,MAAAA,mBAAmB,CAAC,kBAAD,CAAnB,GAA0CmK,gBAA1C;AACAnK,MAAAA,mBAAmB,CAAC,mBAAD,CAAnB,GAA2CoK,iBAA3C;AACApK,MAAAA,mBAAmB,CAAC,iBAAD,CAAnB,GAAyCoK,iBAAiB,CAACG,IAAlB,CAAuB,GAAvB,CAAzC;AACA,YAAMzD,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,YAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,OAAhB;AACA,YAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,WAAKrH,QAAL,CAAc;AAAED,QAAAA,MAAF;AAAUK,QAAAA;AAAV,OAAd;AACH,KAjiDkB;;AAAA,SAkiDnB6K,kBAliDmB,GAkiDE,MAAM;AACvB,UAAI;AAAE7K,QAAAA;AAAF,UAA0B,KAAKd,KAAnC;AACA,UAAIoK,gBAAJ;;AACA,UAAItJ,mBAAmB,CAAC,WAAD,CAAnB,IAAoCA,mBAAmB,CAAC,aAAD,CAA3D,EAA4E;AACxEsJ,QAAAA,gBAAgB,GAAGtJ,mBAAmB,CAACwI,WAApB,CAAgChD,KAAnD;AACA,YAAIsF,qBAAqB,GAAG9K,mBAAmB,CAAC8K,qBAApB,IAA6C,EAAzE;AACA,YAAIC,sBAAsB,GAAG/K,mBAAmB,CAACgL,uBAApB,IAA+C,EAA5E;AACAF,QAAAA,qBAAqB,CAACzH,IAAtB,CAA2BrD,mBAAmB,CAACE,KAApB,GAA4B,GAA5B,GAAkCF,mBAAmB,CAAC,WAAD,CAAnB,CAAiCE,KAAnE,GAA2E,GAA3E,GAAiFF,mBAAmB,CAAC,aAAD,CAAnB,CAAmCE,KAA/I;AACA6K,QAAAA,sBAAsB,CAAC1H,IAAvB,CAA4B;AAAE4H,UAAAA,UAAU,EAAEjL,mBAAmB,CAACE,KAAlC;AAAyCgL,UAAAA,UAAU,EAAElL,mBAAmB,CAAC,WAAD,CAAnB,CAAiCwF,KAAtF;AAA6F2F,UAAAA,SAAS,EAAE7B;AAAxG,SAA5B;AACAtJ,QAAAA,mBAAmB,GAAG,EAClB,GAAGA,mBADe;AAElBvC,UAAAA,SAAS,EAAE,EAFO;AAGlB+K,UAAAA,WAAW,EAAE,EAHK;AAIlBsC,UAAAA,qBAJkB;AAKlBC,UAAAA;AALkB,SAAtB;AAOA,cAAMjE,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,cAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,SAAhB;AACA,cAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,aAAKrH,QAAL,CAAc;AAAED,UAAAA,MAAF;AAAUK,UAAAA;AAAV,SAAd;AACH,OAjBD,MAiBO;AACHlB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAzjDkB;;AAAA,SA0jDnBsK,mBA1jDmB,GA0jDIT,KAAD,IAAW;AAC7B,UAAI;AAAE3K,QAAAA;AAAF,UAA0B,KAAKd,KAAnC;AACA,UAAI4L,qBAAqB,GAAG9K,mBAAmB,CAAC8K,qBAAhD;AACA,UAAIC,sBAAsB,GAAG/K,mBAAmB,CAAC+K,sBAAjD;AACAD,MAAAA,qBAAqB,CAACF,MAAtB,CAA6BD,KAA7B,EAAoC,CAApC;AACAI,MAAAA,sBAAsB,CAACH,MAAvB,CAA8BD,KAA9B,EAAqC,CAArC;AACA3K,MAAAA,mBAAmB,CAAC,uBAAD,CAAnB,GAA+C8K,qBAA/C;AACA9K,MAAAA,mBAAmB,CAAC,wBAAD,CAAnB,GAAgD+K,sBAAhD;AACA,YAAMjE,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AACA,YAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,OAAhB;AACA,YAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AACA,WAAKrH,QAAL,CAAc;AAAED,QAAAA,MAAF;AAAUK,QAAAA;AAAV,OAAd;AACH,KAtkDkB;;AAAA,SAukDnBkH,uBAvkDmB,GAukDO,CAAClH,mBAAD,EAAsBqL,gBAAtB,EAAwCC,YAAxC,EAAsDC,YAAtD,KAAuE;AAC7F,YAAMzE,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB,CAD6F,CAE7F;;AACA,YAAMwF,OAAO,GAAG,EAAE,GAAGjH;AAAL,OAAhB;AACA,UAAIwL,OAAO,GAAG,KAAKtM,KAAL,CAAWS,MAAzB;;AACA,UAAI0L,gBAAJ,EAAsB;AAClBG,QAAAA,OAAO,GAAG,KAAKC,eAAL,CAAqB,KAAKvM,KAAL,CAAWS,MAAhC,EAAwC2L,YAAxC,EAAsDC,YAAtD,CAAV;AACH;;AACD,YAAM5L,MAAM,GAAGvB,wBAAwB,CAACoN,OAAD,EAAU1E,cAAV,EAA0BG,OAA1B,CAAvC;AACA,WAAKrH,QAAL,CAAc;AAAED,QAAAA,MAAF;AAAUK,QAAAA;AAAV,OAAd;AACH,KAjlDkB;;AAAA,SAmlDnByL,eAnlDmB,GAmlDD,CAAC9L,MAAD,EAAS2L,YAAT,EAAuBC,YAAvB,KAAwC;AACtD5L,MAAAA,MAAM,CAACmC,GAAP,CAAW,CAACU,GAAD,EAAMC,QAAN,KACPD,GAAG,CAACE,QAAJ,CAAaZ,GAAb,CAAiB,CAACa,MAAD,EAASC,WAAT,KACbD,MAAM,CAACD,QAAP,CAAgBZ,GAAhB,CAAoB,CAACe,YAAD,EAAeC,YAAf,KAAgC;AAChD,YAAID,YAAY,CAACE,cAAb,CAA4B,UAA5B,CAAJ,EAA6C;AACzCF,UAAAA,YAAY,CAACH,QAAb,CAAsBZ,GAAtB,CAA0B,CAACxB,SAAD,EAAY0C,SAAZ,KAA0B;AAChD,gBAAI1C,SAAS,CAACuB,KAAd,EAAqB;AACjB,kBAAIoB,QAAQ,GAAG,EAAf;AACA3C,cAAAA,SAAS,CAACuB,KAAV,CAAgBC,GAAhB,CAAoBoB,SAAS,IAAI;AAC7B,oBAAIA,SAAS,CAAChD,KAAV,KAAoBoL,YAAxB,EAAsC;AAClCrI,kBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH,SAAL;AAAgBhD,oBAAAA,KAAK,EAAEqL;AAAvB,mBAAd;AACH,iBAFD,MAEO;AACHtI,kBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH;AAAL,mBAAd;AACH;AAEJ,eAPD;AAQA5C,cAAAA,SAAS,GAAG,EAAE,GAAGA,SAAL;AAAgBuB,gBAAAA,KAAK,EAAEoB;AAAvB,eAAZ;AACAtD,cAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAAS,CAAC8C,QAAD,EAAWG,WAAX,EAAwBE,YAAxB,EAAsCE,SAAtC,CAAT,EAA2D1C,SAA3D,CAAjC;AACH;AAGJ,WAhBD;AAiBH,SAlBD,MAkBO;AACH,cAAIuC,YAAY,CAAChB,KAAjB,EAAwB;AACpB,gBAAIoB,QAAQ,GAAG,EAAf;AACAJ,YAAAA,YAAY,CAAChB,KAAb,CAAmBC,GAAnB,CAAuBoB,SAAS,IAAI;AAChC,kBAAIA,SAAS,CAAChD,KAAV,KAAoBoL,YAAxB,EAAsC;AAClCrI,gBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH,SAAL;AAAgBhD,kBAAAA,KAAK,EAAEqL;AAAvB,iBAAd;AACH,eAFD,MAEO;AACHtI,gBAAAA,QAAQ,CAACI,IAAT,CAAc,EAAE,GAAGH;AAAL,iBAAd;AACH;AACJ,aAND;AAOAL,YAAAA,YAAY,GAAG,EAAE,GAAGA,YAAL;AAAmBhB,cAAAA,KAAK,EAAEoB;AAA1B,aAAf;AACAtD,YAAAA,MAAM,GAAGvB,wBAAwB,CAACuB,MAAD,EAAS,CAAC8C,QAAD,EAAWG,WAAX,EAAwBE,YAAxB,EAAsC,CAAtC,CAAT,EAAmDD,YAAnD,CAAjC;AACH;AAEJ;AACJ,OAlCD,CADJ,CADJ;AAuCA,aAAOlD,MAAP;AAEH,KA7nDkB;;AAAA,SA8nDnB+L,eA9nDmB,GA8nDAC,QAAD,IAAc;AAC5B,UAAI,KAAKzM,KAAL,CAAWuH,cAAX,CAA0B3G,YAA1B,IAA0C,KAAKZ,KAAL,CAAWuH,cAAX,CAA0B3G,YAA1B,KAA2C,EAAzF,EAA6F;AACzF,YAAI8L,SAAS,GAAG,EAAhB;AACA,YAAIC,UAAU,GAAG,IAAjB;AACAD,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKrM,KAAL,CAAWJ,KAAX,CAAiBqB,QAAzC;AACA,YAAIsL,SAAS,GAAGtK,SAAhB,CAJyF,CAKzF;AACA;AACA;AACA;;AACA,YAAI,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB4M,SAAjB,KAA+B,QAAnC,EAA6C;AACzC;AACAF,UAAAA,UAAU,GAAG,KAAK3M,KAAL,CAAWuH,cAAX,CAA0BuF,gBAAvC;AACAF,UAAAA,SAAS,GAAG,KAAK5M,KAAL,CAAW4M,SAAvB;AACAF,UAAAA,SAAS,CAAC,sBAAD,CAAT,GAAoC;AAChCK,YAAAA,qBAAqB,EAAE,KAAK1M,KAAL,CAAWJ,KAAX,CAAiB+M,UAAjB,CAA4BC,gBAA5B,CAA6CF,qBADpC;AAEhCG,YAAAA,eAAe,EAAE,KAAK7M,KAAL,CAAW6M,eAFI;AAGhCC,YAAAA,gBAAgB,EAAE,KAAKnN,KAAL,CAAWuH,cAAX,CAA0B3G,YAHZ;AAIhCwM,YAAAA,UAAU,EAAE1D,IAAI,CAAC2D,SAAL,CAAe,KAAKrN,KAAL,CAAWS,MAA1B,CAJoB;AAKhCmJ,YAAAA,QAAQ,EAAE,KAAK5J,KAAL,CAAWS,MALW;AAMhC6M,YAAAA,kBAAkB,EAAE7O,iBAAiB,CAAC8O,KANN;AAOhCC,YAAAA,oBAAoB,EAAE,KAAKnN,KAAL,CAAWoN,eAAX,CAA2BnH;AAPjB,WAApC;AAUH,SAdD,MAeK;AACD;AACAoG,UAAAA,SAAS,CAAC,sBAAD,CAAT,GACA;AACIQ,YAAAA,eAAe,EAAE,KAAK7M,KAAL,CAAW6M,eADhC;AAEIC,YAAAA,gBAAgB,EAAE,KAAKnN,KAAL,CAAWuH,cAAX,CAA0B3G,YAFhD;AAGI4M,YAAAA,oBAAoB,EAAE,KAAKnN,KAAL,CAAWoN,eAAX,CAA2BnH,KAHrD;AAII;AACA8G,YAAAA,UAAU,EAAE1D,IAAI,CAAC2D,SAAL,CAAe,KAAKrN,KAAL,CAAWS,MAA1B,CALhB;AAMI6M,YAAAA,kBAAkB,EAAE7O,iBAAiB,CAAC8O,KAN1C;AAOIG,YAAAA,kBAAkB,EAAE,KAAKrN,KAAL,CAAWoN,eAAX,IAA8B,KAAKpN,KAAL,CAAWoN,eAAX,CAA2B/H,IAA3B,CAAgCgI;AAPtF,WADA;AAUH;;AACD,cAAMV,UAAU,GAAG,EAAE,GAAG,KAAK3M,KAAL,CAAWJ,KAAX,CAAiB+M,UAAtB;AAAkCW,UAAAA,uBAAuB,EAAE,KAAKtN,KAAL,CAAWoN;AAAtE,SAAnB;AAEA,cAAMG,SAAS,GAAG;AACdC,UAAAA,aAAa,EAAE,sBADD;AAEdC,UAAAA,cAAc,EAAE,kBAFF;AAGdC,UAAAA,eAAe,EAAE,uBAHH;AAIdC,UAAAA,QAAQ,EAAE,iDAJI;AAKdC,UAAAA,gBAAgB,EAAE;AACd5M,YAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QADb;AACuB4L,YAAAA,eAAe,EAAE,KAAK7M,KAAL,CAAW6M;AADnD,WALJ;AAQdF,UAAAA;AARc,SAAlB;AAUA,cAAMkB,UAAU,GAAG;AACfC,UAAAA,SAAS,EAAE,sBADI;AAEfC,UAAAA,QAAQ,EAAE,qBAFK;AAGfC,UAAAA,WAAW,EAAE,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBiO,UAAjB,CAA4BG,WAA5B,GAA0C,KAAKhO,KAAL,CAAWJ,KAAX,CAAiBiO,UAAjB,CAA4BG,WAAtE,GAAoF,EAHlF;AAIf3B,UAAAA,SAAS,EAAEA,SAJI;AAIOkB,UAAAA,SAJP;AAKfU,UAAAA,SAAS,EAAE,KAAKjO,KAAL,CAAWiO,SALP;AAMfzB,UAAAA,SAAS,EAAE,KAAKxM,KAAL,CAAWJ,KAAX,CAAiB4M,SANb;AAOfJ,UAAAA,QAPe;AAOLG,UAAAA,SAPK;AAOMD,UAAAA,UAPN;AAOkB4B,UAAAA,UAAU,EAAE,IAP9B;AAOoChH,UAAAA,cAAc,EAAC,EAAC,GAAG,KAAKvH,KAAL,CAAWuH;AAAf;AAPnD,SAAnB;;AAUA,YAAI5I,SAAS,CAAC,KAAK0B,KAAL,CAAWJ,KAAX,CAAiBuO,qBAAlB,EAAyC,KAAKnO,KAAL,CAAWJ,KAAX,CAAiBqB,QAAjB,CAA0BoF,SAAnE,EAA8E,KAAKrG,KAAL,CAAWJ,KAAX,CAAiBwO,YAA/F,CAAb,EAA2H;AACvH,gBAAM5M,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAEpD,cADK;AAEfqD,YAAAA,IAAI,EAAE;AACF2M,cAAAA,SAAS,EAAE,IADT;AAEFC,cAAAA,UAAU,EAAE;AAAET,gBAAAA,UAAF;AAAclB,gBAAAA;AAAd,eAFV;AAEsCP,cAAAA,QAFtC;AAGF;AACAmC,cAAAA,SAAS,EAAE;AAJT;AAFS,WAAnB;AASA,eAAKvO,KAAL,CAAWpC,WAAX,CAAuB4D,UAAvB;AACH,SAXD,MAYK;AACD,eAAKxB,KAAL,CAAWnC,UAAX,CAAsBgQ,UAAtB,EAAkClB,UAAlC,EAA8C,YAA9C;AACH;AACJ,OA1ED,MA0EO;AACHpN,QAAAA,KAAK,CAAC6B,IAAN,CAAW,KAAKpB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA5sDkB;;AAAA,SA6sDnBpB,gBA7sDmB,GA6sDCqO,QAAD,IAAc;AAE7B,UAAIC,gBAAgB,GAAG,EAAvB;AACA,UAAIC,mBAAmB,GAAG,EAA1B;AACA,UAAIC,4BAA4B,GAAG,EAAnC,CAJ6B,CAK7B;AACA;AACA;AACA;;AACA,UAAIC,6BAA6B,GAAG,EAApC;AACA,UAAIC,qBAAqB,GAAG,EAA5B;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,eAAe,GAAC,KAApB,CAZ6B,CAa7B;;AACAP,MAAAA,QAAQ,CAACjM,GAAT,CAAa,CAACU,GAAD,EAAMC,QAAN,KAAmB;AAC5BD,QAAAA,GAAG,CAACE,QAAJ,CAAaZ,GAAb,CAAiB,CAACa,MAAD,EAASC,WAAT,KAAyB;AACtC,cAAGD,MAAM,CAACD,QAAP,CAAgBH,MAAhB,KAAyB,CAA5B,EAA8B;AAC9B+L,YAAAA,eAAe,GAAC,IAAhB;AACC,WAFD,MAEK;AACLA,YAAAA,eAAe,GAAC,KAAhB;AACC;;AACD3L,UAAAA,MAAM,CAACD,QAAP,CAAgBZ,GAAhB,CAAoB,CAAC4D,SAAD,EAAYC,SAAZ,KAA0B;AAC1C,gBAAID,SAAS,CAAC3C,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC2C,cAAAA,SAAS,CAAChD,QAAV,CAAmBZ,GAAnB,CAAuB,CAACe,YAAD,EAAeC,YAAf,KAAgC;AACnD;AACA;AACA;AACA,oBAAI,CAACD,YAAY,CAACE,cAAb,CAA4B,OAA5B,CAAD,IAAyCF,YAAY,CAAC3C,KAAb,CAAmBqO,IAAnB,OAA8B,EAA3E,EAA+E;AAC3EP,kBAAAA,gBAAgB,CAAC3K,IAAjB,CAAsBR,YAAtB;AACH;;AACD,oBAAIwL,MAAM,CAACG,QAAP,CAAgB3L,YAAY,CAAC3C,KAA7B,CAAJ,EAAyC;AACrC+N,kBAAAA,mBAAmB,CAAC5K,IAApB,CAAyBR,YAAzB;AACH,iBAFD,MAEO;AACH,sBAAIA,YAAY,CAAC3C,KAAb,KAAuBsB,SAA3B,EACI6M,MAAM,CAAChL,IAAP,CAAYR,YAAY,CAAC3C,KAAzB;AACP;;AACD,oBAAI2C,YAAY,CAACgB,aAAb,KAA+BjF,eAAe,CAACkF,KAAnD,EAA0D;AACtD,sBAAK,CAACjB,YAAY,CAACE,cAAb,CAA4B,QAA5B,CAAF,IACC,CAACF,YAAY,CAACE,cAAb,CAA4B,eAA5B,CADN,EACqD;AACjDoL,oBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH;AACJ;;AACD,oBAAIA,YAAY,CAACgB,aAAb,KAA+BjF,eAAe,CAAC6P,QAAnD,EAA6D;AACzD,sBAAK,CAAC5L,YAAY,CAACE,cAAb,CAA4B,cAA5B,CAAD,IAAiDF,YAAY,CAACyC,YAAb,IAA6BzC,YAAY,CAACyC,YAAb,CAA0BC,IAA1B,CAA+BhD,MAA/B,KAA0C,CAA7H,EAAkI;AAC9H4L,oBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH;AACJ;;AACD,oBAAIA,YAAY,CAACgB,aAAb,KAA+BjF,eAAe,CAAC8P,KAAnD,EAA0D;AACtD,sBAAK,CAAC7L,YAAY,CAACE,cAAb,CAA4B,cAA5B,CAAD,IAAiDF,YAAY,CAACyC,YAAb,IAA6BzC,YAAY,CAACyC,YAAb,CAA0BC,IAA1B,CAA+BhD,MAA/B,GAAwC,CAA3H,EAAgI;AAC5H4L,oBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH;AACJ;;AACD,oBAAIA,YAAY,CAACgB,aAAb,KAA+BjF,eAAe,CAAC+P,SAA/C,IACG9L,YAAY,CAACgB,aAAb,KAA+BjF,eAAe,CAACgQ,QADtD,EACgE;AAC5D,sBAAI/L,YAAY,CAACE,cAAb,CAA4B,UAA5B,CAAJ,EAA6C;AACzC,wBAAI2C,SAAS,CAACc,IAAV,IAAkBd,SAAS,CAACc,IAAV,KAAmB,KAAzC,EAAgD;AAC5C,0BAAI,CAAC3D,YAAY,CAACE,cAAb,CAA4B,eAA5B,CAAL,EAAmD;AAC/CoL,wBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH,uBAFD,MAEO;AACH,4BAAIA,YAAY,CAACgM,aAAb,CAA2BN,IAA3B,KAAoC,EAAxC,EAA4C;AACxCJ,0BAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH;AACJ;AACJ;AACJ,mBAVD,MAWK;AACD,wBAAI,CAACA,YAAY,CAACE,cAAb,CAA4B,cAA5B,CAAD,IAAgDF,YAAY,CAACiM,YAAb,CAA0BP,IAA1B,OAAqC,EAAzF,EAA6F;AACzFJ,sBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH;AAEJ;AAEJ;;AACD,oBAAI,CAACA,YAAY,CAACE,cAAb,CAA4B,aAA5B,CAAD,IAA+CgM,MAAM,CAACC,IAAP,CAAYnM,YAAY,CAACsD,WAAzB,EAAsC5D,MAAtC,GAA+C,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBoI,YAAjB,CAA8BhF,MAAhI,EAAwI;AACpI2L,kBAAAA,4BAA4B,CAAC7K,IAA7B,CAAkCR,YAAlC;AACH;;AACD,oBAAIA,YAAY,CAACoM,mBAAb,IAAoCpM,YAAY,CAACqM,mBAArD,EAA0E;AACtE,sBAAI,EAAErM,YAAY,CAACsB,WAAb,IAA4BtB,YAAY,CAACsM,uBAA3C,CAAJ,EAAyE;AACrEhB,oBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH;AAEJ;;AACD,oBAAIA,YAAY,CAACgB,aAAb,KAA+BjF,eAAe,CAACwQ,IAAnD,EAAyD;AACrD,sBAAIvM,YAAY,CAACwM,MAAjB,EAAyB;AACrB,wBAAI,CAACxM,YAAY,CAACyM,YAAlB,EAAgC;AAC5BnB,sBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCR,YAAnC;AACH;AAEJ;AACJ;AACJ,eAnED;AAoEH,aArED,MAqEO;AACH;AACA;AACA;AACA,kBAAI,CAAC6C,SAAS,CAAC3C,cAAV,CAAyB,OAAzB,CAAD,IAAsC2C,SAAS,CAACxF,KAAV,CAAgBqO,IAAhB,OAA2B,EAArE,EAAyE;AACrEP,gBAAAA,gBAAgB,CAAC3K,IAAjB,CAAsBqC,SAAtB;AACH;;AACD,kBAAI2I,MAAM,CAACG,QAAP,CAAgB9I,SAAS,CAACxF,KAA1B,CAAJ,EAAsC;AAClC+N,gBAAAA,mBAAmB,CAAC5K,IAApB,CAAyBqC,SAAzB;AACH,eAFD,MAEO;AACH,oBAAIA,SAAS,CAACxF,KAAV,KAAoBsB,SAAxB,EACI6M,MAAM,CAAChL,IAAP,CAAYqC,SAAS,CAACxF,KAAtB;AACP;;AACD,kBAAIwF,SAAS,CAAC7B,aAAV,KAA4BjF,eAAe,CAACkF,KAAhD,EAAuD;AACnD,oBAAK,CAAC4B,SAAS,CAAC3C,cAAV,CAAyB,QAAzB,CAAF,IACC,CAAC2C,SAAS,CAAC3C,cAAV,CAAyB,eAAzB,CADN,EACkD;AAC9CoL,kBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AACJ;;AACD,kBAAIA,SAAS,CAAC7B,aAAV,KAA4BjF,eAAe,CAAC6P,QAAhD,EAA0D;AACtD,oBAAK,CAAC/I,SAAS,CAAC3C,cAAV,CAAyB,cAAzB,CAAD,IAA8C2C,SAAS,CAACJ,YAAV,IAA0BI,SAAS,CAACJ,YAAV,CAAuBC,IAAvB,CAA4BhD,MAA5B,KAAuC,CAApH,EAAyH;AACrH4L,kBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AACJ;;AACD,kBAAIA,SAAS,CAAC7B,aAAV,KAA4BjF,eAAe,CAAC8P,KAAhD,EAAuD;AACnD,oBAAK,CAAChJ,SAAS,CAAC3C,cAAV,CAAyB,cAAzB,CAAD,IAA8C2C,SAAS,CAACJ,YAAV,IAA0BI,SAAS,CAACJ,YAAV,CAAuBC,IAAvB,CAA4BhD,MAA5B,GAAqC,CAAlH,EAAuH;AACnH4L,kBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AACJ;;AACD,kBAAIA,SAAS,CAAC7B,aAAV,KAA4BjF,eAAe,CAAC+P,SAA5C,IAAyDjJ,SAAS,CAAC7B,aAAV,KAA4BjF,eAAe,CAACgQ,QAAzG,EAAmH;AAC/G,oBAAIlJ,SAAS,CAAC3C,cAAV,CAAyB,UAAzB,CAAJ,EAA0C;AACtC,sBAAI2C,SAAS,CAACc,IAAV,IAAkBd,SAAS,CAACc,IAAV,KAAmB,KAAzC,EAAgD;AAC5C,wBAAI,CAACd,SAAS,CAAC3C,cAAV,CAAyB,eAAzB,CAAL,EAAgD;AAC5CoL,sBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH,qBAFD,MAEO;AACH,0BAAIA,SAAS,CAACmJ,aAAV,CAAwBN,IAAxB,KAAiC,EAArC,EAAyC;AACrCJ,wBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AACJ;AACJ;AAEJ,iBAXD,MAWO,IAAIA,SAAS,CAAC6J,cAAd,EAA8B;AACjC,sBAAIC,SAAS,GAAGC,QAAQ,CAAC/J,SAAS,CAACgK,WAAX,CAAxB;AACA,sBAAIC,SAAS,GAAGF,QAAQ,CAAC/J,SAAS,CAACkK,WAAX,CAAxB;AACA,sBAAIC,UAAU,GAAGJ,QAAQ,CAAC/J,SAAS,CAACoK,QAAX,CAAzB;AACA,sBAAIC,QAAQ,GAAGC,MAAM,CAACtK,SAAS,CAACoJ,YAAX,CAArB;AACA,sBAAImB,WAAW,GAAGR,QAAQ,CAAC/J,SAAS,CAACwK,mBAAX,CAA1B;AACA,sBAAIC,QAAQ,GAAGV,QAAQ,CAAC/J,SAAS,CAAC0K,gBAAX,CAAvB;AACA,sBAAI5K,KAAJ,CAPiC,CAQjC;AAEA;AACA;AACA;AACA;AACA;;AACA,sBAAIE,SAAS,CAAC2K,cAAd,EAA8B;AAC1B,wBAAI3K,SAAS,CAAC4K,cAAd,EAA8B;AAC1B9K,sBAAAA,KAAK,GAAGyK,WAAW,GAAGE,QAAd,GAAyBR,SAAjC;AACH,qBAFD,MAEO;AACHnK,sBAAAA,KAAK,GAAGgK,SAAS,GAAGG,SAApB;AACH;;AACD,wBAAIK,MAAM,CAACxK,KAAD,CAAN,KAAkBuK,QAAtB,EAAgC;AAC5B3B,sBAAAA,qBAAqB,CAAC/K,IAAtB,CAA2BqC,SAA3B;AACH;AACJ,mBATD,MASO,IAAIA,SAAS,CAAC6K,aAAd,EAA6B;AAChC,wBAAI7K,SAAS,CAAC4K,cAAd,EAA8B;AAC1B9K,sBAAAA,KAAK,GAAGyK,WAAW,GAAGE,QAAd,GAAyBN,UAAjC;AACH,qBAFD,MAEO;AACHrK,sBAAAA,KAAK,GAAGgK,SAAS,GAAGK,UAApB;AACH;;AACD,wBAAIG,MAAM,CAACxK,KAAD,CAAN,KAAkBuK,QAAtB,EAAgC;AAC5B3B,sBAAAA,qBAAqB,CAAC/K,IAAtB,CAA2BqC,SAA3B;AACH;AACJ,mBATM,MASA,IAAIA,SAAS,CAAC8K,YAAd,EAA4B;AAC/BhL,oBAAAA,KAAK,GAAGqK,UAAU,GAAGF,SAArB;;AACA,wBAAIK,MAAM,CAACxK,KAAD,CAAN,KAAkBuK,QAAtB,EAAgC;AAC5B3B,sBAAAA,qBAAqB,CAAC/K,IAAtB,CAA2BqC,SAA3B;AACH;AACJ,mBALM,MAKA,IAAIA,SAAS,CAAC+K,SAAd,EAAyB;AAC5B,wBAAIT,MAAM,CAACxK,KAAD,CAAN,KAAkBuK,QAAtB,EAAgC,CAC/B;AACJ,mBAHM,MAIF;AACD,wBAAIrK,SAAS,CAAC4K,cAAd,EAA8B;AAC1B9K,sBAAAA,KAAK,GAAGyK,WAAW,GAAGE,QAAd,GAAyBR,SAAzB,GAAqCE,UAA7C;AACH,qBAFD,MAEO;AACHrK,sBAAAA,KAAK,GAAGgK,SAAS,GAAGG,SAAZ,GAAwBE,UAAhC;AACH,qBALA,CAMD;AACA;;;AACA,wBAAIG,MAAM,CAACxK,KAAD,CAAN,KAAkBuK,QAAtB,EAAgC;AAC5B3B,sBAAAA,qBAAqB,CAAC/K,IAAtB,CAA2BqC,SAA3B;AACH;AACJ;;AACD,sBAAIA,SAAS,CAAC3C,cAAV,CAAyB,eAAzB,MAA8C2C,SAAS,CAACgL,gBAAV,KAA+BlP,SAA/B,IAA4CkE,SAAS,CAACgL,gBAAV,KAA+B,EAAzH,CAAJ,EAAkI;AAC9HtC,oBAAAA,qBAAqB,CAAC/K,IAAtB,CAA2BqC,SAA3B;AACH;AACJ,iBAzDM,MA0DF;AACD,sBAAGA,SAAS,CAAC3C,cAAV,CAAyB,WAAzB,KAAyC2C,SAAS,CAAC+K,SAAtD,EAAiE;AAC7D,wBAAG,CAAC/K,SAAS,CAACiL,GAAV,KAAgB,EAAhB,IAAoBjL,SAAS,CAACiL,GAAV,KAAgBnP,SAArC,MAAoDkE,SAAS,CAACkL,GAAV,KAAgB,EAAhB,IAAoBlL,SAAS,CAACkL,GAAV,KAAgBpP,SAAxF,CAAH,EAAsG;AAClG2M,sBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AACJ,mBAJD,MAKI,IAAI,CAACA,SAAS,CAAC3C,cAAV,CAAyB,cAAzB,CAAD,IAA6C2C,SAAS,CAACoJ,YAAV,CAAuBP,IAAvB,OAAkC,EAAnF,EAAuF;AACvFJ,oBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AACJ;AAGJ;;AACD,kBAAI,CAACA,SAAS,CAAC3C,cAAV,CAAyB,aAAzB,CAAD,IAA4CgM,MAAM,CAACC,IAAP,CAAYtJ,SAAS,CAACS,WAAtB,EAAmC5D,MAAnC,GAA4C,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBoI,YAAjB,CAA8BhF,MAA1H,EAAkI;AAC9H2L,gBAAAA,4BAA4B,CAAC7K,IAA7B,CAAkCqC,SAAlC;AACH;;AACD,kBAAIA,SAAS,CAACuJ,mBAAV,IAAiCvJ,SAAS,CAACwJ,mBAA/C,EAAoE;AAChE,oBAAI,EAAExJ,SAAS,CAACvB,WAAV,IAAyBuB,SAAS,CAACyJ,uBAArC,CAAJ,EAAmE;AAC/DhB,kBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AAEJ;;AAED,kBAAIA,SAAS,CAAC7B,aAAV,KAA4BjF,eAAe,CAACwQ,IAAhD,EAAsD;AAClD,oBAAI1J,SAAS,CAAC2J,MAAd,EAAsB;AAClB,sBAAI,CAAC3J,SAAS,CAAC4J,YAAf,EAA6B;AACzBnB,oBAAAA,6BAA6B,CAAC9K,IAA9B,CAAmCqC,SAAnC;AACH;AAEJ;AACJ;AACJ;AACJ,WAzMD;AA0MA,iBAAO,IAAP;AACH,SAjND;AAkNA,eAAO,IAAP;AACH,OApND;;AAqNA,UAAI4I,eAAJ,EAAqB;AACjBxP,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACA,eAAO,KAAP;AACH;;AACD,UAAImN,mBAAmB,CAAC1L,MAApB,GAA6B,CAAjC,EAAoC;AAChC,cAAMsO,SAAS,GAAG,EAAlB;AACA5C,QAAAA,mBAAmB,CAACnM,GAApB,CAAwB8C,IAAI,IAAIiM,SAAS,CAACxN,IAAV,CAAeuB,IAAI,CAAC1E,KAApB,CAAhC;AACApB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,IAAwE+P,SAAS,CAACtG,IAAV,CAAe,GAAf,CAAnF;AACA,eAAO,KAAP;AACH;;AACD,UAAIyD,gBAAgB,CAACzL,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,cAAMsO,SAAS,GAAG,EAAlB;AACA7C,QAAAA,gBAAgB,CAAClM,GAAjB,CAAqB8C,IAAI,IAAIiM,SAAS,CAACxN,IAAV,CAAeuB,IAAI,CAAC1E,KAApB,CAA7B;AACApB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACA,eAAO,KAAP;AACH;;AACD,UAAIoN,4BAA4B,CAAC3L,MAA7B,GAAsC,CAA1C,EAA6C;AACzC,cAAMsO,SAAS,GAAG,EAAlB;AACA3C,QAAAA,4BAA4B,CAACpM,GAA7B,CAAiC8C,IAAI,IAAIiM,SAAS,CAACxN,IAAV,CAAeuB,IAAI,CAAC1E,KAApB,CAAzC;AACApB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,IAA4E+P,SAAS,CAACtG,IAAV,CAAe,GAAf,CAAvF;AACA,eAAO,KAAP;AACH;;AACD,UAAI4D,6BAA6B,CAAC5L,MAA9B,GAAuC,CAA3C,EAA8C;AAC1C,cAAMsO,SAAS,GAAG,EAAlB;AACA1C,QAAAA,6BAA6B,CAACrM,GAA9B,CAAkC8C,IAAI,IAAIiM,SAAS,CAACxN,IAAV,CAAeuB,IAAI,CAAC1E,KAApB,CAA1C;AACApB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,IAAgE+P,SAAS,CAACtG,IAAV,CAAe,GAAf,CAA3E;AACA,eAAO,KAAP;AACH;;AACD,UAAI6D,qBAAqB,CAAC7L,MAAtB,GAA+B,CAAnC,EAAsC;AAClC,cAAMsO,SAAS,GAAG,EAAlB;AACAzC,QAAAA,qBAAqB,CAACtM,GAAtB,CAA0B8C,IAAI,IAAIiM,SAAS,CAACxN,IAAV,CAAeuB,IAAI,CAAC1E,KAApB,CAAlC;AACApB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,IAAiE+P,SAAS,CAACtG,IAAV,CAAe,GAAf,CAA5E;AACA,eAAO,KAAP;AACH,OApQ4B,CAqQ7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,aAAO,IAAP;AACH,KAh/DkB;;AAAA,SAk/DnBuG,2BAl/DmB,GAk/DW,CAACC,aAAD,EAAgBC,MAAhB,KAA2B;AAErD,YAAMlK,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AAEA,UAAIzB,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAX,IAAkC,EAA5D;AACA,YAAMiR,KAAK,GAAGjS,OAAO,CAACkS,SAAR,CAAkBH,aAAlB,EAAiCC,MAAjC,CAAd;AACAhR,MAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCiR,KAArC;AACAjR,MAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqC+Q,aAArC;AACA/Q,MAAAA,mBAAmB,CAAC,eAAD,CAAnB,GAAuCgR,MAAvC;AAEA,YAAM/J,OAAO,GAAG,EAAE,GAAGjH;AAAL,OAAhB;AACA,YAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AAEA,YAAMlG,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpD,cADK;AAEfqD,QAAAA,IAAI,EAAE;AACF;AACA;AACAjB,UAAAA,mBAHE;AAIFL,UAAAA;AAJE;AAFS,OAAnB;AASA,WAAKJ,KAAL,CAAWpC,WAAX,CAAuB4D,UAAvB;AAEH,KA1gEkB;;AAAA,SA4gEnBoQ,gBA5gEmB,GA4gEC1M,KAAD,IAAW;AAC1B,YAAM1D,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpD,cADK;AAEfqD,QAAAA,IAAI,EAAE;AACFmQ,UAAAA,SAAS,EAAE3M,KAAK,CAAC4M,IADf;AACqBC,UAAAA,SAAS,EAAE7M,KAAK,CAAC8M;AADtC;AAFS,OAAnB;AAMA,WAAKhS,KAAL,CAAWpC,WAAX,CAAuB4D,UAAvB;AACH,KAphEkB;;AAAA,SAqhEnByQ,kBArhEmB,GAqhEG/M,KAAD,IAAW;AAE5B,YAAMqC,cAAc,GAAG,KAAK5H,KAAL,CAAWwB,qBAAX,CAAiCe,KAAjC,CAAuC,GAAvC,CAAvB;AAEA,UAAIzB,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAX,IAAkC,EAA5D;AACAA,MAAAA,mBAAmB,CAAC,aAAD,CAAnB,GAAqCyE,KAAK,CAACP,MAA3C;AAEA,YAAM+C,OAAO,GAAG,EAAE,GAAGjH;AAAL,OAAhB;AACA,YAAML,MAAM,GAAGvB,wBAAwB,CAAC,KAAKc,KAAL,CAAWS,MAAZ,EAAoBmH,cAApB,EAAoCG,OAApC,CAAvC;AAEA,YAAMlG,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEpD,cADK;AAEfqD,QAAAA,IAAI,EAAE;AACF;AACAjB,UAAAA,mBAFE;AAGFL,UAAAA;AAHE;AAFS,OAAnB;AASA,WAAKJ,KAAL,CAAWpC,WAAX,CAAuB4D,UAAvB;AACH,KAziEkB;;AAAA,SA2iEnB0Q,kBA3iEmB,GA2iEGhN,KAAD,IAAW;AAC5B,YAAMzE,mBAAmB,GAAG,KAAKd,KAAL,CAAWc,mBAAvC;;AACA,UAAIA,mBAAmB,CAAC,aAAD,CAAnB,KAAuC,EAAvC,IAA6CA,mBAAmB,CAAC,aAAD,CAAnB,KAAuCwB,SAAxF,EAAmG;AAC/F,cAAMnB,UAAU,GAAG;AACfC,UAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWc,mBADP;AAEfO,UAAAA,QAAQ,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBqB,QAFZ;AAGfkR,UAAAA,WAAW,EAAE1R,mBAAmB,CAAC,aAAD,CAAnB,CAAmC2R,OAAnC,CAA2C,cAA3C,EAA2D,EAA3D;AAHE,SAAnB;AAMA,aAAKpS,KAAL,CAAW/B,2BAAX,CAAuC6C,UAAvC;AACH,OARD,MAQO;AACHvB,QAAAA,KAAK,CAACuI,IAAN,CAAW,KAAK9H,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAxjEkB;;AAEf,SAAKuD,cAAL,GAAsB,IAAIxF,cAAJ,EAAtB,CAFe,CAGf;;AAEA,SAAKK,KAAL,GAAa;AACT0S,MAAAA,KAAK,EAAE,CADE;AAETjS,MAAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBQ,MAFhB;AAGT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA8G,MAAAA,cAAc,EAAE,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBsH,cAAjB,IAAmC,EA7B1C;AA8BTzG,MAAAA,mBAAmB,EAAE,EA9BZ;AA+BTU,MAAAA,qBAAqB,EAAE,EA/Bd;AAgCTwB,MAAAA,UAAU,EAAE,EAhCH;AAiCTkD,MAAAA,aAAa,EAAE,EAjCN;AAkCThD,MAAAA,eAAe,EAAE,EAlCR;AAmCTE,MAAAA,gBAAgB,EAAE,KAnCT;AAoCTuP,MAAAA,WAAW,EAAE,KApCJ;AAqCTlQ,MAAAA,WAAW,EAAE,EArCJ;AAsCTmQ,MAAAA,iBAAiB,EAAE,CACf;AAAE5R,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,YAAN;AAAoBiR,UAAAA,cAAc,EAAE;AAApC,SAA9B,CAAT;AAA6FvM,QAAAA,KAAK,EAAE/H,SAAS,CAACmM;AAA9G,OADe,EAEf;AAAE1J,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,eAAN;AAAuBiR,UAAAA,cAAc,EAAE;AAAvC,SAA9B,CAAT;AAAqGvM,QAAAA,KAAK,EAAE/H,SAAS,CAACsM;AAAtH,OAFe,EAGf;AAAE7J,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,QAAN;AAAgBiR,UAAAA,cAAc,EAAE;AAAhC,SAA9B,CAAT;AAAgFvM,QAAAA,KAAK,EAAE/H,SAAS,CAAC+M;AAAjG,OAHe,EAIf;AAAEtK,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,WAAN;AAAmBiR,UAAAA,cAAc,EAAE;AAAnC,SAA9B,CAAT;AAAuFvM,QAAAA,KAAK,EAAE/H,SAAS,CAACgN;AAAxG,OAJe,CAtCV;AA4CTuH,MAAAA,gBAAgB,EAAE,CACd;AAAE9R,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,YAAN;AAAoBiR,UAAAA,cAAc,EAAE;AAApC,SAA9B,CAAT;AAA6FvM,QAAAA,KAAK,EAAE/H,SAAS,CAACmM;AAA9G,OADc,EAEd;AAAE1J,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,eAAN;AAAuBiR,UAAAA,cAAc,EAAE;AAAvC,SAA9B,CAAT;AAAqGvM,QAAAA,KAAK,EAAE/H,SAAS,CAACsM;AAAtH,OAFc,EAGd;AAAE7J,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,gBAAN;AAAwBiR,UAAAA,cAAc,EAAE;AAAxC,SAA9B,CAAT;AAAiGvM,QAAAA,KAAK,EAAE/H,SAAS,CAACuM;AAAlH,OAHc,EAId;AAAE9J,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,cAAN;AAAsBiR,UAAAA,cAAc,EAAE;AAAtC,SAA9B,CAAT;AAA6FvM,QAAAA,KAAK,EAAE/H,SAAS,CAACwM;AAA9G,OAJc,EAKd;AAAE/J,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,cAAN;AAAsBiR,UAAAA,cAAc,EAAE;AAAtC,SAA9B,CAAT;AAA4FvM,QAAAA,KAAK,EAAE/H,SAAS,CAACyM;AAA7G,OALc,CA5CT;AAmDT+H,MAAAA,cAAc,EAAE,CACZ;AAAE/R,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,cAAN;AAAsBiR,UAAAA,cAAc,EAAE;AAAtC,SAA9B,CAAT;AAAiGvM,QAAAA,KAAK,EAAE/H,SAAS,CAACyU;AAAlH,OADY,EAEZ;AAAEhS,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,sBAAN;AAA8BiR,UAAAA,cAAc,EAAE;AAA9C,SAA9B,CAAT;AAAmHvM,QAAAA,KAAK,EAAE/H,SAAS,CAAC0U;AAApI,OAFY,EAGZ;AAAEjS,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,iBAAN;AAAyBiR,UAAAA,cAAc,EAAE;AAAzC,SAA9B,CAAT;AAAsGvM,QAAAA,KAAK,EAAE/H,SAAS,CAAC2U;AAAvH,OAHY,EAIZ;AAAElS,QAAAA,KAAK,EAAE,KAAKX,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE,yBAAN;AAAiCiR,UAAAA,cAAc,EAAE;AAAjD,SAA9B,CAAT;AAAyHvM,QAAAA,KAAK,EAAE/H,SAAS,CAAC4U;AAA1I,OAJY;AAnDP,KAAb;AA4DH;;AAUDC,EAAAA,MAAM,GAAG;AACL;AACA,wBACI,uDACI,oBAAC,KAAD;AACI,MAAA,QAAQ,MADZ;AAEI,MAAA,UAAU,MAFd;AAGI,MAAA,QAAQ,EAAC,oBAHb;AAII,MAAA,IAAI,EAAE,KAAK/S,KAAL,CAAWJ,KAAX,CAAiBsO,UAJ3B;AAKI,MAAA,MAAM,EAAE,KAAKlO,KAAL,CAAWgT,UALvB;AAMI,MAAA,eAAe,EAAG,GAAE,KAAKrT,KAAL,CAAW0S,KAAX,IAAoB,KAAK1S,KAAL,CAAW0S,KAAX,KAAqB,CAAzC,GAA6C,aAA7C,GAA6D,EAAG,mBANxF;AAOI,MAAA,QAAQ,EAAC,QAPb;AAQI,MAAA,QAAQ,EAAE,KARd;AASI,MAAA,YAAY,EAAE,KATlB;AAUI,yBAAgB,oCAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,SAAS,EAAC,2BAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,EAAE,EAAC,KAAhB;AAAsB,MAAA,SAAS,EAAC,4BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM,GAAE,KAAKrS,KAAL,CAAWJ,KAAX,CAAiB4M,SAAjB,KAA+B,QAA/B,GACE,KAAKxM,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADF,GAEE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiB4M,SAAjB,KAA+B,YAA/B,GACI,KAAKxM,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADJ,GAEI,KAAKvB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAiD,IAAG,KAAKvB,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAA4D,EAL9H,CADJ,eASI,uDACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,qBAAlB;AAAwC,MAAA,OAAO,EAAC,EAAhD;AAAmD,MAAA,OAAO,EAAE,KAAKvB,KAAL,CAAWgT,UAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAC,YAArB;AAAkC,MAAA,cAAc,EAAC,QAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAIK,KAAKhT,KAAL,CAAWJ,KAAX,CAAiB4M,SAAjB,KAA+B,YAA/B,gBACG,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,4BAAlB,CACI;AADJ;AAEI,MAAA,OAAO,EAAE,KAAKvM,qBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE9C,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,oBAKI,oBAAC,gBAAD;AAAkB,MAAA,EAAE,EAAE,UAAtB;AAAkC,MAAA,cAAc,EAAE,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADH,GAOe,EAXpB,CATJ,CAZJ,eAmCI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,OAAO,EAAEM,MAAM,CAACwV,EAAP,KAAc,SAAd,GAA0B1V,YAA1B,GAAyCD,YAA/D;AAA6E,MAAA,OAAO,EAAE;AAAE4V,QAAAA,iBAAiB,EAAE;AAArB,OAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AACI,MAAA,MAAM,EAAE,KAAKvT,KAAL,CAAWS,MADvB;AAEI,MAAA,gBAAgB,EAAE,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBuT,gBAAjB,IAAqC,EAF3D;AAGI,MAAA,SAAS,EAAE,KAAKtR,SAHpB;AAII,MAAA,eAAe,EAAE,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBP,eAAjB,IAAoC,EAJzD;AAKI,MAAA,eAAe,EAAE,KAAK2H,eAL1B;AAMI,MAAA,oBAAoB,EAAE,KAAKmB,oBAN/B;AAOI,MAAA,aAAa,EAAE,KAAKM,aAPxB;AAQI,MAAA,mBAAmB,EAAE,KAAK9I,KAAL,CAAWc,mBARpC;AASI,MAAA,gBAAgB,EAAE,CAACyE,KAAD,EAAQxD,IAAR,EAAcqC,IAAd,KAAuB,KAAKkB,gBAAL,CAAsBC,KAAtB,EAA6BxD,IAA7B,EAAmCqC,IAAnC,CAT7C;AAUI,MAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiBwT,WAVlC;AAWI,MAAA,WAAW,EAAE,KAAKzT,KAAL,CAAWiG,WAX5B;AAYI,MAAA,aAAa,EAAE,KAAKjG,KAAL,CAAWkG,aAZ9B;AAaI,MAAA,iBAAiB,EAAE,KAAKlG,KAAL,CAAW4S,iBAblC;AAcI,MAAA,gBAAgB,EAAE,KAAK5S,KAAL,CAAW8S,gBAdjC;AAeI,MAAA,UAAU,EAAE,KAAKzS,KAAL,CAAWJ,KAAX,CAAiByT,UAfjC;AAgBI,MAAA,WAAW,EAAE,KAAK1T,KAAL,CAAWkD,eAAX,IAA8B,EAhB/C;AAiBI,MAAA,eAAe,EAAE,KAAKyQ,eAjB1B;AAkBI,MAAA,YAAY,EAAE,KAAK/M,eAAL,CAAqB,KAAK5G,KAAL,CAAWc,mBAAhC,CAlBlB;AAmBI,MAAA,cAAc,EAAE,KAAK2D,cAnBzB;AAoBI,MAAA,MAAM,EAAE,KAAKsF,MApBjB;AAqBI,MAAA,UAAU,EAAE,KAAK/J,KAAL,CAAWgC,UArB3B;AAsBI,MAAA,cAAc,EAAE,KAAKnB,cAtBzB;AAuBI,MAAA,cAAc,EAAE,KAAKoB,cAvBzB;AAwBI,MAAA,YAAY,EAAE,KAAKkI,YAxBvB;AAyBI,MAAA,eAAe,EAAE,KAAKqB,eAzB1B;AA0BI,MAAA,cAAc,EAAE,KAAKxL,KAAL,CAAW+S,cA1B/B;AA2BI,MAAA,cAAc,EAAE,KAAK/S,KAAL,CAAWwF,cA3B/B;AA4BI,MAAA,kBAAkB,EAAE,KAAKmG,kBA5B7B;AA6BI,MAAA,mBAAmB,EAAE,KAAKO,mBA7B9B;AA8BI,MAAA,WAAW,EAAE,KAAKlM,KAAL,CAAW2S,WA9B5B;AA+BI,MAAA,SAAS,EAAE,KAAKtS,KAAL,CAAWJ,KAAX,CAAiBoI,YAAjB,IAAiC,EA/BhD;AAgCI,MAAA,UAAU,EAAE,MAAM,KAAK3H,QAAL,CAAc;AAAEiS,QAAAA,WAAW,EAAE,CAAE,KAAK3S,KAAL,CAAW2S;AAA5B,OAAd,CAhCtB;AAiCI,MAAA,gBAAgB,EAAE,KAAK3S,KAAL,CAAW4F,gBAAX,IAA+B,EAjCrD;AAkCI,MAAA,QAAQ,EAAE,KAAKvF,KAAL,CAAWJ,KAAX,CAAiBqB,QAlC/B;AAmCI,MAAA,gBAAgB,EAAE,KAAKqH,gBAnC3B;AAoCI,MAAA,MAAM,EAAE,KAAKtI,KAAL,CAAWJ,KAAX,CAAiB2T,MAAjB,IAA2B,EApCvC;AAqCI,MAAA,kBAAkB,EAAE,KAAKvT,KAAL,CAAWJ,KAAX,CAAiB4T,kBArCzC;AAsCI,MAAA,kBAAkB,EAAE,KAAK7T,KAAL,CAAW8J,kBAAX,IAAiC,EAtCzD;AAwCI,MAAA,MAAM,EAAE,KAAKzJ,KAAL,CAAWJ,KAAX,CAAiB6T,MAAjB,IAA2B,EAxCvC;AAyCI,MAAA,2BAA2B,EAAE,KAAKlC,2BAzCtC;AA0CI,MAAA,WAAW,EAAE,KAAK5R,KAAL,CAAWc,mBAAX,CAA+B,aAA/B,CA1CjB,CA2CI;AA3CJ;AA4CI,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWJ,KAAX,CAAiBiS,SA5ChC;AA6CI,MAAA,SAAS,EAAE,KAAK7R,KAAL,CAAWJ,KAAX,CAAiBmS,SA7ChC;AA8CI,MAAA,gBAAgB,EAAE,KAAKH,gBA9C3B;AA+CI,MAAA,WAAW,EAAE,KAAK5R,KAAL,CAAWJ,KAAX,CAAiB8T,WAAjB,IAAgC,EA/CjD;AAgDI,MAAA,gBAAgB,EAAE,KAAK1T,KAAL,CAAWJ,KAAX,CAAiB+T,UAhDvC,CAiDI;AAjDJ;AAkDI,MAAA,kBAAkB,EAAE,KAAKzB,kBAlD7B;AAmDI,MAAA,QAAQ,EAAE,KAAKlS,KAAL,CAAWJ,KAAX,CAAiBqB,QAnD/B;AAqDI,MAAA,WAAW,EAAE,KAAKtB,KAAL,CAAWc,mBAAX,CAA+B,aAA/B,KAAiD;AAC1DmT,QAAAA,KAAK,EAAE,KADmD;AAE1DC,QAAAA,OAAO,EAAE;AAFiD,OArDlE;AAyDI,MAAA,kBAAkB,EAAE,KAAK5B,kBAzD7B,CA0DA;AACA;AA3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,CADJ,CADJ,CAnCJ,CADJ,eA6GI,oBAAC,UAAD;AACI,MAAA,cAAc,EAAE,KAAKtS,KAAL,CAAWW,cAD/B;AAEI,MAAA,UAAU,EAAE,cAFhB;AAGI,MAAA,UAAU,EAAE,MAAM,KAAKD,QAAL,CAAc;AAAEC,QAAAA,cAAc,EAAE,KAAlB;AAAyBwT,QAAAA,YAAY,EAAE;AAAvC,OAAd,CAHtB;AAII,MAAA,WAAW,EAAE,KAAK3H,eAJtB;AAKI,MAAA,SAAS,eACL,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAE,KAAKnM,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADX;AAEI,QAAA,IAAI,EAAE,cAFV;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,QAAQ,EAAG2D,KAAD,IAAW,KAAK7E,QAAL,CAAc;AAAE6G,UAAAA,cAAc,EAAE,EAAE,GAAG,KAAKvH,KAAL,CAAWuH,cAAhB;AAAgC3G,YAAAA,YAAY,EAAC2E,KAAK,CAACoC,MAAN,CAAarB;AAA1D;AAAlB,SAAd,CAJzB,CAKI;AALJ;AAMI,QAAA,WAAW,EAAE,KAAKjG,KAAL,CAAWqB,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CANjB;AAOI,QAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWuH,cAAX,CAA0B3G,YAA1B,GAAyC,KAAKZ,KAAL,CAAWuH,cAAX,CAA0B3G,YAAnE,GAAkF,EAP7F;AAQI,QAAA,WAAW,EAAE,IARjB;AASI,QAAA,QAAQ,EAAE,IATd;AAUI,QAAA,SAAS,EAAE,IAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7GJ,EAqIK,KAAKZ,KAAL,CAAWoD,gBAAX,GAA8B,KAAK8B,YAAL,EAA9B,GAAoD,EArIzD,CADJ;AAyIH;;AACDkP,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAIC,WAAW,GAAG,KAAlB;AACA,QAAI;AAAE3T,MAAAA,cAAF;AAAkBF,MAAAA,MAAlB;AAA0B8G,MAAAA,cAA1B;AAA0CzG,MAAAA,mBAA1C;AACAU,MAAAA,qBADA;AACuBwB,MAAAA,UADvB;AACmCE,MAAAA,eADnC;AACoD+C,MAAAA,WADpD;AACiEC,MAAAA,aADjE;AAEA9C,MAAAA,gBAFA;AAEkBwC,MAAAA,gBAFlB;AAEoC5D,MAAAA;AAFpC,QAEmD,KAAKhC,KAF5D;;AAGA,QAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBsO,UAAjB,KAAgC,KAAhC,IAAyC8F,aAAa,CAACpU,KAAd,CAAoBsO,UAAjE,EAA6E;AACzE+F,MAAAA,WAAW,GAAG,IAAd;AACA3T,MAAAA,cAAc,GAAG,KAAjB;AACH;;AACD,QAAI,KAAKN,KAAL,CAAWJ,KAAX,CAAiBQ,MAAjB,KAA4B4T,aAAa,CAACpU,KAAd,CAAoBQ,MAApD,EAA4D;AACxD6T,MAAAA,WAAW,GAAG,IAAd;AACA7T,MAAAA,MAAM,GAAG,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBQ,MAA1B;AACH;;AACD,QAAI,KAAKJ,KAAL,CAAWJ,KAAX,CAAiBsH,cAAjB,KAAoC8M,aAAa,CAACpU,KAAd,CAAoBsH,cAA5D,EAA4E;AACxEA,MAAAA,cAAc,GAAG,KAAKlH,KAAL,CAAWJ,KAAX,CAAiBsH,cAAlC;AACA+M,MAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAI,KAAKjU,KAAL,CAAWJ,KAAX,CAAiBa,mBAAjB,KAAyCuT,aAAa,CAACpU,KAAd,CAAoBa,mBAAjE,EAAsF;AAClFA,MAAAA,mBAAmB,GAAG,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,mBAAvC;AACAwT,MAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAI,KAAKjU,KAAL,CAAWJ,KAAX,CAAiB+B,UAAjB,KAAgCqS,aAAa,CAACpU,KAAd,CAAoB+B,UAAxD,EAAoE;AAChEA,MAAAA,UAAU,GAAG,KAAK3B,KAAL,CAAWJ,KAAX,CAAiB+B,UAA9B;AACAsS,MAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAI,KAAKjU,KAAL,CAAWJ,KAAX,CAAiBa,mBAAjB,KAAyCuT,aAAa,CAACpU,KAAd,CAAoBa,mBAAjE,EAAsF;AAClF,UAAI,KAAKT,KAAL,CAAWJ,KAAX,CAAiBuB,qBAAjB,IAA0C,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBuB,qBAAjB,KAA2C6S,aAAa,CAACpU,KAAd,CAAoBa,mBAA7G,EAAkI;AAC9HU,QAAAA,qBAAqB,GAAG,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBuB,qBAAzC;AACH;;AAEDV,MAAAA,mBAAmB,GAAG,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,mBAAvC;AACAkC,MAAAA,UAAU,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB+C,UAA9B;AACAE,MAAAA,eAAe,GAAG,KAAK7C,KAAL,CAAWJ,KAAX,CAAiBiD,eAAnC;AACA+C,MAAAA,WAAW,GAAG,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBgG,WAA/B;AACAC,MAAAA,aAAa,GAAG,KAAK7F,KAAL,CAAWJ,KAAX,CAAiBiG,aAAjC;AACAoO,MAAAA,WAAW,GAAG,IAAd;AAEH;;AACD,QAAI,KAAKjU,KAAL,CAAWJ,KAAX,CAAiB2F,gBAAjB,KAAsCyO,aAAa,CAACpU,KAAd,CAAoB2F,gBAA9D,EAAgF;AAC5EA,MAAAA,gBAAgB,GAAG,KAAKvF,KAAL,CAAWJ,KAAX,CAAiB2F,gBAApC;AACA0O,MAAAA,WAAW,GAAG,IAAd;AACH;;AACD,QAAIA,WAAJ,EAAiB;AACb,WAAK5T,QAAL,CAAc;AACVC,QAAAA,cADU;AACMF,QAAAA,MADN;AACc8G,QAAAA,cADd;AAC8BzG,QAAAA,mBAD9B;AAEVmF,QAAAA,WAFU;AAEGzE,QAAAA,qBAFH;AAE0BwB,QAAAA,UAF1B;AAEsCE,QAAAA,eAFtC;AAGVE,QAAAA,gBAHU;AAGQ8C,QAAAA,aAHR;AAGuBN,QAAAA,gBAHvB;AAGyC5D,QAAAA;AAHzC,OAAd;AAKH;AACJ;;AAgKDkC,EAAAA,eAAe,CAACzD,MAAD,EAASO,KAAT,EAAgB;AAC3B,QAAIiD,GAAG,GAAG,EAAV;AACAxD,IAAAA,MAAM,CAACmC,GAAP,CAAW,CAACU,GAAD,EAAMC,QAAN,KACPD,GAAG,CAACE,QAAJ,CAAaZ,GAAb,CAAiB,CAACa,MAAD,EAASC,WAAT,KACbD,MAAM,CAACD,QAAP,CAAgBZ,GAAhB,CAAoB,CAACe,YAAD,EAAeC,YAAf,KAAgC;AAChD,UAAID,YAAY,CAACE,cAAb,CAA4B,UAA5B,CAAJ,EAA6C;AACzCF,QAAAA,YAAY,CAACH,QAAb,CAAsBZ,GAAtB,CAA0B,CAACxB,SAAD,EAAY0C,SAAZ,KAA0B;AAChD,cAAI1C,SAAS,CAACJ,KAAV,KAAoBA,KAAxB,EAA+B;AAC3BiD,YAAAA,GAAG,GAAG;AACFK,cAAAA,MAAM,EAAElD,SADN;AAEFgD,cAAAA,IAAI,EAAG,GAAEb,QAAS,IAAGG,WAAY,IAAGE,YAAa,IAAGE,SAAU;AAF5D,aAAN,CAD2B,CAK3B;AACH;;AAED,iBAAO,IAAP;AACH,SAVD;AAWH,OAZD,MAYO;AACH,YAAIH,YAAY,CAAC3C,KAAb,KAAuBA,KAA3B,EAAkC;AAC9BiD,UAAAA,GAAG,GAAG;AACFK,YAAAA,MAAM,EAAEX,YADN;AAEFS,YAAAA,IAAI,EAAG,GAAEb,QAAS,IAAGG,WAAY,IAAGE,YAAa;AAF/C,WAAN,CAD8B,CAK9B;AACA;AACH;AACJ;;AACD,aAAO,IAAP;AACH,KAxBD,CADJ,CADJ;AA6BA,WAAOK,GAAP;AACH;;AAzc2C;;AA4jEhD,eAAejG,OAAO,CAAC+B,eAAD,EAAkB;AACpC9B,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AAEpCC,EAAAA,eAFoC;AAEnBC,EAAAA,mBAFmB;AAEEC,EAAAA,gBAFF;AAEoBC,EAAAA;AAFpB,CAAlB,CAAP,CAGZZ,UAAU,CAACwC,iBAAD,CAHE,CAAf","sourcesContent":["\r\nimport React from 'react';\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { TouchBackend } from 'react-dnd-touch-backend'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport device from 'current-device';\r\n// import MoreOptions from '../../components/configureui/MoreOptions';\r\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    updateStore, crudMaster, getTableColumns,\r\n    getForeignTableData, getDynamicFilter, getDynamicFilterExecuteData,\r\n} from '../../actions/index'\r\nimport { condition, SampleType, transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, validateCreateView } from '../../components/CommonScript';\r\nimport AlertModal from './AlertModal'\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { getChildComponentForeignKey, getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\r\nimport {\r\n    InstrumentDefaultTemplate, productDefaultTemplate, MaterialDefaultTemplate,\r\n    clinicalTypeDefaultTemplateWithoutProduct, clinicalTypeDefaultTemplateWithProduct,\r\n    projectDefaultTemplate, clinicalTemplateWithExternalOrder\r\n} from './DefaultTemplates';\r\nimport { ReactComponents } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass PreRegDesignPopUp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // console.log(\"PD:\", this.props.Login.design);\r\n\r\n        this.state = {\r\n            nflag: 1,\r\n            design: this.props.Login.design,\r\n            // design: this.props.Login.operation === 'update' || this.props.Login.operation === \"viewdesign\" ? this.props.Login.design :\r\n            //     this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate :\r\n            //         this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate :\r\n            //             this.props.nsampletypecode === SampleType.MATERIAL ? MaterialDefaultTemplate :\r\n            //                 this.props.nsampletypecode === SampleType.PROJECTSAMPLETYPE ? projectDefaultTemplate :\r\n            //                     this.props.nsampletypecode === SampleType.CLINICALTYPE ?\r\n            //                         // this.props.Login.settings && parseInt(this.props.Login.settings[20]) === transactionStatus.YES \r\n            //                         this.props.sampleType ?\r\n            //                         this.props.sampleType.item.ncategorybasedflowrequired === transactionStatus.YES\r\n            //                         && this.props.sampleType.item.nportalrequired === transactionStatus.YES\r\n            //                         ? clinicalTemplateWithExternalOrder \r\n            //                         :  this.props.sampleType.item.ncategorybasedflowrequired === transactionStatus.YES\r\n            //                             ? clinicalTypeDefaultTemplateWithoutProduct :\r\n            //                             clinicalTypeDefaultTemplateWithProduct : [{\r\n            //                                 \"id\": \"pv1OWbsMYq\",\r\n            //                                 \"type\": \"row\",\r\n            //                                 \"children\": [\r\n            //                                     { type: 'column', id: '2zMtRhjb2t', children: [] }\r\n            //                                 ]\r\n            //                             }]\r\n            //                             :[{\r\n            //                                 \"id\": \"pv1OWbsMYq\",\r\n            //                                 \"type\": \"row\",\r\n            //                                 \"children\": [\r\n            //                                     { type: 'column', id: '2zMtRhjb2t', children: [] }\r\n            //                                 ] }],\r\n            selectedRecord: this.props.Login.selectedRecord || {},\r\n            selectedFieldRecord: {},\r\n            selectedComponentpath: \"\",\r\n            components: [],\r\n            filterColumns: [],\r\n            validComponents: [],\r\n            showConfirmAlert: false,\r\n            showsynonym: false,\r\n            toBeDeleted: {},\r\n            numericConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_NOTEQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_IN\", defaultMessage: \"In\" }), value: condition.CONTAINS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_NOTIN\", defaultMessage: \"Not In\" }), value: condition.NOTCONTAINS }\r\n            ],\r\n            stringConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_NOTEQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_STARTSWITH\", defaultMessage: \"Starts With\" }), value: condition.STARTSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_ENDSWITH\", defaultMessage: \"Ends With\" }), value: condition.ENDSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_CONTAINS\", defaultMessage: \"Contains\" }), value: condition.INCLUDES }\r\n            ],\r\n            dateConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_LESSTHAN\", defaultMessage: \"Less Than (<)\" }), value: condition.LESSTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_LESSTHANOREQUALS\", defaultMessage: \"Less Than Or Equals(<=)\" }), value: condition.LESSTHANOREQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_GREATERTHAN\", defaultMessage: \"Greater Than(>)\" }), value: condition.GREATERTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_GREATERTHANOREQUALS\", defaultMessage: \"Greater Than Or Equals(>=)\" }), value: condition.GREATERTHANEQUALS }\r\n            ]\r\n\r\n\r\n        }\r\n    }\r\n    validateDynamicDesign = () => {\r\n        let valid = this.validateTemplate(this.state.design);\r\n        if (!valid) {\r\n            return null;\r\n        }\r\n        else {\r\n            this.setState({ openAlertModal: true, templatename: \"\" });\r\n        }\r\n    }\r\n    render() {\r\n        // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\r\n        return (\r\n            <>\r\n                <Modal\r\n                    centered\r\n                    scrollable\r\n                    bsPrefix=\"model model_zindex\"\r\n                    show={this.props.Login.openPortal}\r\n                    onHide={this.props.closeModal}\r\n                    dialogClassName={`${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    enforceFocus={false}\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                >\r\n                    <Modal.Header className=\"d-flex align-items-center\">\r\n                        <Modal.Title id=\"add\" className=\"header-primary flex-grow-1\">\r\n                            {`${this.props.Login.operation === \"update\"\r\n                                ? this.props.intl.formatMessage({ id: \"IDS_EDIT\" })\r\n                                : this.props.Login.operation === \"viewdesign\"\r\n                                    ? this.props.intl.formatMessage({ id: \"IDS_VIEW\" })\r\n                                    : this.props.intl.formatMessage({ id: \"IDS_ADD\" })} ${this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATE\" })}`\r\n                            }\r\n                        </Modal.Title>\r\n                        <>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            {this.props.Login.operation !== \"viewdesign\" ?\r\n                                <Button className=\" btn-user btn-primary-blue\"\r\n                                    //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\r\n                                    onClick={this.validateDynamicDesign}\r\n                                >\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id={\"IDS_SAVE\"} defaultMessage={\"Save\"} />\r\n                                </Button> : \"\"}\r\n                        </>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"modal-inner-content\">\r\n                            <Row>\r\n                                <Col md={12} className='p-0'>\r\n                                    <DndProvider backend={device.os !== 'android' ? HTML5Backend : TouchBackend} options={{ enableMouseEvents: true }} >\r\n                                        <Dynamicinput\r\n                                            layout={this.state.design}\r\n                                            reactInputFields={this.props.Login.ReactInputFields || {}}\r\n                                            setLayout={this.setLayout}\r\n                                            reactComponents={this.props.Login.ReactComponents || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            selectedFieldRecord={this.state.selectedFieldRecord}\r\n                                            onclickcomponent={(event, data, path) => this.onclickcomponent(event, data, path)}\r\n                                            ReactTables={this.props.Login.ReactTables}\r\n                                            tableColumn={this.state.tableColumn}\r\n                                            filterColumns={this.state.filterColumns}\r\n                                            numericConditions={this.state.numericConditions}\r\n                                            stringConditions={this.state.stringConditions}\r\n                                            filterData={this.props.Login.filterData}\r\n                                            inputFields={this.state.validComponents || []}\r\n                                            addChildMapping={this.addChildMapping}\r\n                                            valueMembers={this.getValueMembers(this.state.selectedFieldRecord)}\r\n                                            validateDelete={this.validateDelete}\r\n                                            addTag={this.addTag}\r\n                                            showFilter={this.state.showFilter}\r\n                                            showPropFilter={this.showPropFilter}\r\n                                            hidePropFilter={this.hidePropFilter}\r\n                                            addCondition={this.addCondition}\r\n                                            deleteCondition={this.deleteCondition}\r\n                                            dateConditions={this.state.dateConditions}\r\n                                            dateComponents={this.state.dateComponents}\r\n                                            addDateConstraints={this.addDateConstraints}\r\n                                            deleteDateCondition={this.deleteDateCondition}\r\n                                            showsynonym={this.state.showsynonym}\r\n                                            languages={this.props.Login.languageList || []}\r\n                                            addSynonym={() => this.setState({ showsynonym: !(this.state.showsynonym) })}\r\n                                            parentRadioValue={this.state.parentRadioValue || []}\r\n                                            userinfo={this.props.Login.userInfo}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            period={this.props.Login.Period || []}\r\n                                            staticfiltertables={this.props.Login.staticfiltertables}\r\n                                            staticfiltercolumn={this.state.staticfiltercolumn || []}\r\n\r\n                                            fields={this.props.Login.fields || {}}\r\n                                            onChangeAwesomeQueryBuilder={this.onChangeAwesomeQueryBuilder}\r\n                                            awesomeTree={this.state.selectedFieldRecord['awesomeTree']}\r\n                                            // awesomeConfig={this.state.selectedFieldRecord['awesomeConfig']}\r\n                                            kendoSkip={this.props.Login.kendoSkip}\r\n                                            kendoTake={this.props.Login.kendoTake}\r\n                                            handlePageChange={this.handlePageChange}\r\n                                            gridColumns={this.props.Login.gridColumns || []}\r\n                                            filterDataRecord={this.props.Login.lstPatient}\r\n                                            //  handleKendoRowClick={this.handleKendoRowClick}\r\n                                            handleExecuteClick={this.handleExecuteClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n\r\n                                            kendoFilter={this.state.selectedFieldRecord['kendoFilter'] || {\r\n                                                logic: \"and\",\r\n                                                filters: []\r\n                                            }}\r\n                                            handleFilterChange={this.handleFilterChange}\r\n                                        //    onRowClick={this.handleKendoRowClick}\r\n                                        //  userInfo={this.props.Login.userInfo}\r\n\r\n                                        />\r\n                                    </DndProvider>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <AlertModal\r\n                    openAlertModal={this.state.openAlertModal}\r\n                    modalTitle={\"IDS_TEMPLATE\"}\r\n                    closeModal={() => this.setState({ openAlertModal: false, templateName: \"\" })}\r\n                    onSaveClick={this.handleSaveClick}\r\n                    modalBody={\r\n                        <Row>\r\n                            <Col>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    name={\"templatename\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.setState({ selectedRecord: { ...this.state.selectedRecord, templatename:event.target.value} })}\r\n                                    //onChange={(event) => this.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    value={this.state.selectedRecord.templatename ? this.state.selectedRecord.templatename : \"\"}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={\"30\"}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                />\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n            selectedComponentpath, components, validComponents, tableColumn, filterColumns,\r\n            showConfirmAlert, parentRadioValue, showFilter } = this.state\r\n        if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\r\n            updateState = true;\r\n            openAlertModal = false;\r\n        }\r\n        if (this.props.Login.design !== previousProps.Login.design) {\r\n            updateState = true;\r\n            design = this.props.Login.design;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\r\n            showFilter = this.props.Login.showFilter\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\r\n                selectedComponentpath = this.props.Login.selectedComponentpath\r\n            }\r\n\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord\r\n            components = this.props.Login.components\r\n            validComponents = this.props.Login.validComponents\r\n            tableColumn = this.props.Login.tableColumn\r\n            filterColumns = this.props.Login.filterColumns\r\n            updateState = true;\r\n\r\n        }\r\n        if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\r\n            parentRadioValue = this.props.Login.parentRadioValue\r\n            updateState = true;\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n                tableColumn, selectedComponentpath, components, validComponents,\r\n                showConfirmAlert, filterColumns, parentRadioValue, showFilter\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    showPropFilter = () => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord\r\n        if (selectedFieldRecord.inputtype === 'backendsearchfilter') {\r\n            if (selectedFieldRecord.label !== ''\r\n                && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\r\n                const inputparam = {\r\n                    component: selectedFieldRecord\r\n                    , userinfo: this.props.Login.userInfo,\r\n                    type: 'design',\r\n                    selectedComponentpath: this.state.selectedComponentpath\r\n                }\r\n                this.props.getDynamicFilter(inputparam)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTMANDATORYFIELDS\" }))\r\n            }\r\n\r\n        } else if (selectedFieldRecord.inputtype === 'frontendsearchfilter') {\r\n            if (selectedFieldRecord.label !== ''\r\n                && selectedFieldRecord.table && selectedFieldRecord.filterfields) {\r\n                const inputparam = {\r\n                    component: selectedFieldRecord\r\n                    , userinfo: this.props.Login.userInfo,\r\n                    type: 'design',\r\n                    selectedComponentpath: this.state.selectedComponentpath\r\n                }\r\n                this.props.getDynamicFilter(inputparam)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTMANDATORYFIELDS\" }))\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    showFilter: !this.state.showFilter\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            //  this.setState({ showFilter: !this.state.showFilter })\r\n        }\r\n\r\n    }\r\n    hidePropFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                showFilter: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //  this.setState({ showFilter: !this.state.showFilter })\r\n    }\r\n    setLayout = (design, splitDropZonePath, remove, removeChild) => {\r\n        let selectedFieldRecord = {}\r\n        if (remove === undefined) {\r\n            selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"))\r\n        }\r\n        else if (removeChild) {\r\n            let childRecord = {}\r\n            this.state.toBeDeleted.deleteComponent.child.map(myChild => {\r\n                childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                childRecord['childValue'] = undefined;\r\n                childRecord['parentPath'] = undefined;\r\n                childRecord['valuecolumn'] = undefined;\r\n\r\n                design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                return null;\r\n            })\r\n        }\r\n        design = this.updatePath(design)\r\n        // if (selectedFieldRecord.child) {\r\n        //     let childRecord = {}\r\n        //     selectedFieldRecord.child.map(myChild => {\r\n        //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n        //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\r\n        //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\r\n        //         return null;\r\n        //     })\r\n        // }\r\n        // if (selectedFieldRecord.childValue) {\r\n        //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n        //     let newChildData = []\r\n        //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\r\n        //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\r\n        //         newChildData.push(child))\r\n        //     parentData = { ...parentData, child: newChildData };\r\n        //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n\r\n        // }\r\n        const components = this.getComponents(design).components;\r\n        let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n        this.setState({ showConfirmAlert: false, toBeDeleted: {}, design, selectedFieldRecord: selectedFieldRecord, components, validComponents, selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath })\r\n    }\r\n    updatePath = (design) => {\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.inputtype !== 'radio') {\r\n                                if (component.child) {\r\n                                    let newChild = [];\r\n                                    component.child.map(childComp => {\r\n                                        const obj = this.getIndexByLabel(design, childComp.label);\r\n                                        newChild.push({ ...childComp, childPath: obj.path });\r\n                                        const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                        design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                    })\r\n                                    component = { ...component, child: newChild }\r\n                                    design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                                }\r\n                            } else {\r\n                                if (component.child) {\r\n                                    let newChild = [];\r\n                                    component.child.map(childComp => {\r\n                                        const obj = this.getIndexByLabel(design, childComp.label);\r\n                                        newChild.push({ ...childComp, childPath: obj.path });\r\n                                        const newObj = { ...obj.object, radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                        design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                    })\r\n                                    component = { ...component, child: newChild }\r\n                                    design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                                }\r\n                            }\r\n\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.inputtype !== 'radio') {\r\n                            if (componnetrow.child) {\r\n                                let newChild = [];\r\n                                componnetrow.child.map(childComp => {\r\n                                    const obj = this.getIndexByLabel(design, childComp.label);\r\n                                    newChild.push({ ...childComp, childPath: obj.path });\r\n                                    const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                    design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                })\r\n                                componnetrow = { ...componnetrow, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                            }\r\n                        } else {\r\n                            if (componnetrow.child) {\r\n                                let newChild = [];\r\n                                componnetrow.child.map(childComp => {\r\n                                    const obj = this.getIndexByLabel(design, childComp.label);\r\n                                    newChild.push({ ...childComp, childPath: obj.path });\r\n                                    const newObj = { ...obj.object, radioparentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                    design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                })\r\n                                componnetrow = { ...componnetrow, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            )\r\n        )\r\n        return design;\r\n    }\r\n    getIndexByLabel(design, label) {\r\n        let obj = {};\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.label === label) {\r\n                                obj = {\r\n                                    object: component,\r\n                                    path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\r\n                                }\r\n                                // break;\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.label === label) {\r\n                            obj = {\r\n                                object: componnetrow,\r\n                                path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\r\n                            }\r\n                            // return obj;\r\n                            // break;\r\n                        }\r\n                    }\r\n                    return null;\r\n                })\r\n            )\r\n        )\r\n        return obj;\r\n    }\r\n    validateDelete = (design, splitDropZonePath) => {\r\n        const path = splitDropZonePath.split(\"-\")\r\n        let showAlert = false;\r\n        let toBeDeleted = {};\r\n        // let component = {}\r\n        // let row = this.state.design[path[0]]\r\n        // let column = row.children[path[1]]\r\n        // let compRow = column.children[path[2]]\r\n        // if (compRow.type === 'componentrow')\r\n        //     component = compRow.children[path[3]]\r\n        // else\r\n        //     component = compRow\r\n        let component = getcomponentdata(this.state.design, path)\r\n        if (component.child && component.child.length > 0) {\r\n\r\n            let childRecord = {}\r\n            if (component.inputtype === 'radio') {\r\n                component.child.map(myChild => {\r\n                    childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                    delete childRecord[\"radioparentLabel\"]\r\n                    delete childRecord[\"selectedrecordbasedhide\"]\r\n                    delete childRecord[\"recordbasedhide\"]\r\n                    delete childRecord[\"radioparent\"]\r\n                    delete childRecord[\"radioparentPath\"]\r\n                    delete childRecord[\"recordbasedshowhide\"]\r\n                    delete childRecord[\"recordbasedreadonly\"]\r\n\r\n\r\n                    design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                    return null;\r\n                })\r\n            } else {\r\n                component.child.map(myChild => {\r\n                    childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                    childRecord['childValue'] = undefined;\r\n                    childRecord['parentPath'] = undefined;\r\n                    childRecord['valuecolumn'] = undefined;\r\n                    if (myChild.componentcode !== ReactComponents.COMBO) {\r\n                        childRecord['column'] = undefined;\r\n                    }\r\n                    design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                    return null;\r\n                })\r\n            }\r\n\r\n            showAlert = true;\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n            // this.showAlert(true, toBeDeleted);\r\n        }\r\n        if (component.childValue) {\r\n            let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n\r\n        if (component.radioparent) {\r\n            let parentData = getcomponentdata(this.state.design, component.radioparentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.radioparentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n        if (showAlert) {\r\n            this.showAlert(true, toBeDeleted);\r\n        }\r\n        else {\r\n            this.setLayout(design, splitDropZonePath, true)\r\n        }\r\n    }\r\n    confirmAlert = () => {\r\n        this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true),\r\n            undefined,\r\n            () => this.showAlert(false));\r\n    }\r\n    showAlert = (bool, toBeDeleted) => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showConfirmAlert: bool, toBeDeleted }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showConfirmAlert: bool, toBeDeleted })\r\n    }\r\n    onclickcomponent = (event, data, path) => {\r\n        const selectedFieldRecord = { ...data }\r\n        const obj = this.getComponents(this.state.design);\r\n        //console.log(\"obj:\", obj);\r\n        const components = obj.components;\r\n\r\n        let dateComponents = obj.dateComponents;\r\n        if (data.inputtype === \"date\") {\r\n            const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\r\n            dateComponents = filterDataComponents;\r\n        }\r\n\r\n        let componentData = { components, selectedComponentpath: path }\r\n        let parentRadioValue = []\r\n\r\n        if ((selectedFieldRecord.componentcode === ReactComponents.COMBO ||\r\n            selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n            selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) &&\r\n            selectedFieldRecord.source !== undefined &&\r\n            (this.props.Login.columnInfo === undefined ||\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\r\n            this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo,\r\n                \"\", this.props.Login.columnInfo, componentData, undefined, false)\r\n        } else {\r\n            const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n            let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\r\n            let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\r\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n                selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (selectedFieldRecord.radioparentPath) {\r\n                    let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"))\r\n                    if (oldParentData.hasOwnProperty('child')) {\r\n                        oldParentData.child.map(item => {\r\n                            if (item.label === selectedFieldRecord.label) {\r\n                                parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                    return { value: item.id, label: item.text, item }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                if (selectedFieldRecord.radioparentPath) {\r\n                    if (selectedFieldRecord.radioparentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"))\r\n                        if (oldParentData.hasOwnProperty('child')) {\r\n                            oldParentData.child.map(item => {\r\n                                if (item.label === selectedFieldRecord.label) {\r\n                                    parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                        return { value: item.id, label: item.text, item }\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (this.props.Login.columnInfo && selectedFieldRecord.childValue\r\n                    && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\r\n                    tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\r\n                    filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\r\n                    this.setState({\r\n                        selectedComponentpath: path,\r\n                        selectedFieldRecord: selectedFieldRecord,\r\n                        components,\r\n                        tableColumn,\r\n                        filterColumns,\r\n                        validComponents,\r\n                        parentRadioValue,\r\n                        showFilter: false\r\n\r\n\r\n                    })\r\n                } else {\r\n                    if (selectedFieldRecord.childValue) {\r\n                        this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            \"\", this.props.Login.columnInfo, componentData, undefined, false);\r\n                    } else {\r\n                        this.setState({\r\n                            selectedComponentpath: path,\r\n                            selectedFieldRecord: selectedFieldRecord,\r\n                            components,\r\n                            tableColumn,\r\n                            filterColumns,\r\n                            dateComponents,\r\n                            validComponents,\r\n                            parentRadioValue,\r\n                            showFilter: false\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    selectedComponentpath: path,\r\n                    selectedFieldRecord: selectedFieldRecord,\r\n                    components,\r\n                    tableColumn,\r\n                    filterColumns,\r\n                    dateComponents,\r\n                    validComponents,\r\n                    parentRadioValue,\r\n                    showFilter: false\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    getComponents = (design) => {\r\n        let components = [];\r\n        let dateComponents = [{ label: \"Current Date\", value: \"utccurrentdate\" }];\r\n        design.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) => {\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({ label: componnetrow.label, value: componnetrow.label })\r\n                            componnetrow.label && components.push({\r\n                                label: componnetrow.label,\r\n                                value: componnetrow.label,\r\n                                nformcode:componnetrow.nformcode,\r\n                                // item: componnetrow,\r\n                                inputtype: componnetrow.inputtype,\r\n                                source: componnetrow.source,\r\n                                nquerybuildertablecode: componnetrow.nquerybuildertablecode,\r\n                                child: componnetrow.child,\r\n                                valuemember: componnetrow.valuemember,\r\n                                path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\r\n                            })\r\n                        })\r\n                    } else {\r\n                        componnet.inputtype === 'date' && componnet.label && dateComponents.push({ label: componnet.label, value: componnet.label })\r\n                        componnet.label && components.push({\r\n                            label: componnet.label,\r\n                            value: componnet.label,\r\n                            nformcode:componnet.nformcode,\r\n                            // item: componnet,\r\n                            inputtype: componnet.inputtype,\r\n                            source: componnet.source,\r\n                            nquerybuildertablecode: componnet.nquerybuildertablecode,\r\n                            child: componnet.child,\r\n                            valuemember: componnet.valuemember,\r\n                            path: `${rowIndex}-${columnIndex}-${compindex}-0`\r\n                        })\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        return { components, dateComponents };\r\n    }\r\n    getValueMembers = (selectedFieldRecord) => {\r\n        if (selectedFieldRecord.childValue) {\r\n            let valueColumn = [];\r\n            this.props.Login.columnInfo &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\r\n                    if (x.foriegntablename === selectedFieldRecord.childValue.source)\r\n                        valueColumn.push(\r\n                            {\r\n                                label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                value: x.tablecolumnname,\r\n                                item: { foriegntablePK: x.foriegntablePK }\r\n                            }\r\n                        )\r\n                    return null;\r\n                })\r\n            if (valueColumn.length) {\r\n\r\n                return valueColumn;\r\n\r\n            } else {\r\n                this.props.Login.columnInfo &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\r\n                        if (x.foriegntablename === selectedFieldRecord.source)\r\n                            valueColumn.push(\r\n                                {\r\n                                    label: x.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                    value: x.tablecolumnname,\r\n                                    item: { foriegntablePK: x.foriegntablePK }\r\n                                }\r\n                            )\r\n                        return null;\r\n                    })\r\n                return valueColumn;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    onInputOnChange = (event, name) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let chillabelUpdate = false;\r\n        let newLabel = \"\"\r\n        let oldLabel = \"\"\r\n        if (event.target.type === 'checkbox') {\r\n            if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\r\n                let design = this.state.design\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\r\n                    // let design = this.state.design\r\n                    if (selectedFieldRecord.radioparentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), oldParentData)\r\n                        }\r\n                        delete selectedFieldRecord[\"radioparentLabel\"]\r\n                        delete selectedFieldRecord[\"selectedrecordbasedhide\"]\r\n                        delete selectedFieldRecord[\"recordbasedhide\"]\r\n                        delete selectedFieldRecord[\"radioparent\"]\r\n                    }\r\n                    selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\r\n\r\n                if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\r\n                    selectedFieldRecord['loadcurrentdate'] = false\r\n                } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\r\n                    selectedFieldRecord['loadselecteddate'] = false\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === \"unique\") {\r\n                //     const design = this.state.design\r\n                //  let listUnique=[]\r\n                //  if(event.target.checked){\r\n                //     design && design.map(row => {\r\n                //         return  row.children.map(column => {\r\n                //              return column.children.map(component => {\r\n                //                   if (component.hasOwnProperty(\"children\")) {\r\n                //                      return component.children.map(componentrow => {\r\n                //                        if(componentrow.unique){\r\n                //                         listUnique.push(componentrow.unique)\r\n                //                        }\r\n                //                       }) \r\n                //                   }\r\n                //                   else {\r\n                //                     if(component.unique){\r\n                //                         listUnique.push(component.unique)\r\n                //                     }\r\n                //                   }\r\n                //               }\r\n                //               )\r\n                //           })\r\n                //       })   \r\n                //     }\r\n                //       if(listUnique.length===0){\r\n                //         selectedFieldRecord[event.target.name] = event.target.checked;\r\n                //         this.saveComponentProperties(selectedFieldRecord)\r\n\r\n                //       }else{\r\n                //           toast.info(\"Unique Must Be One Field\")\r\n                //           selectedFieldRecord[event.target.name] = false;\r\n                //         this.saveComponentProperties(selectedFieldRecord)\r\n                //         //  this.setState({design})\r\n                //       }\r\n\r\n               // selectedFieldRecord[event.target.name] = event.target.checked;\r\n               selectedFieldRecord[event.target.name] = (selectedFieldRecord[\"mandatory\"] === false||selectedFieldRecord[\"mandatory\"] === undefined)?false:event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isAddMaster' || event.target.name === 'isView' || event.target.name === 'isEditMaster') {\r\n                // if (event.target.name === 'isAddMaster') {\r\n                //     if (event.target.checked) {\r\n                //         selectedFieldRecord['isView'] = false\r\n                //     }\r\n                // } else {\r\n                //     if (event.target.checked) {\r\n                //         selectedFieldRecord['isAddMaster'] = false\r\n                //     }\r\n                // }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'autoFocus') {\r\n\r\n                if (event.target.checked === true) {\r\n                    const val = this.checkAutoFocus();\r\n                    if (val === '') {\r\n                        selectedFieldRecord[event.target.name] = event.target.checked;\r\n                        this.saveComponentProperties(selectedFieldRecord)\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYFOCUSAPPLIEDON\" }) + ' ' + val)\r\n                    }\r\n                } else {\r\n                    selectedFieldRecord[event.target.name] = event.target.checked;\r\n                    this.saveComponentProperties(selectedFieldRecord)\r\n                }\r\n            } else if (event.target.name === 'isalphabetcaptial') {\r\n                selectedFieldRecord['isalphabetcaptial'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'isnumeric') {\r\n                selectedFieldRecord['isnumeric'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'isalphanumeric') {\r\n                selectedFieldRecord['isalphanumeric'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['nmaxletters']);\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isnumericspl') {\r\n                selectedFieldRecord['isnumericspl'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                delete (selectedFieldRecord['naviodsplchar']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                delete (selectedFieldRecord['nsplcharnotallow']);\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isalphabetsmall') {\r\n                selectedFieldRecord['isalphabetsmall'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isalphabetspl'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'isalphabetspl') {\r\n                selectedFieldRecord['isalphabetspl'] = event.target.checked ? true : false\r\n                selectedFieldRecord['isalphabetsmall'] = false\r\n                selectedFieldRecord['isalphanumeric'] = false\r\n                selectedFieldRecord['isalphabetcaptial'] = false\r\n                selectedFieldRecord['isnumeric'] = false\r\n                selectedFieldRecord['isnumericspl'] = false\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['nmaxletters']);\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                delete (selectedFieldRecord['naviodsplchar']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                delete (selectedFieldRecord['nsplcharnotallow']);\r\n                selectedFieldRecord['ncustomization'] = false;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'ncustomization' && event.target.checked === false) {\r\n                selectedFieldRecord['ncustomization'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nmaxletters']);\r\n                delete (selectedFieldRecord['nmaxnumeric']);\r\n                delete (selectedFieldRecord['nsplchar']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else if (event.target.name === 'naviodsplchar' && event.target.checked === false) {\r\n                selectedFieldRecord['naviodsplchar'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nsplcharnotallow']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'ncasesensitive') {\r\n                selectedFieldRecord['ncasesensitive'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                delete (selectedFieldRecord['nmaxcapticalletters']);\r\n                delete (selectedFieldRecord['nmaxsmallletters']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'ncaptialletters') {\r\n                selectedFieldRecord['ncaptialletters'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['nsmallletters']);\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            } else if (event.target.name === 'nsmallletters') {\r\n                selectedFieldRecord['nsmallletters'] = event.target.checked ? true : false\r\n                delete (selectedFieldRecord['ncasesensitive']);\r\n                delete (selectedFieldRecord['ncaptialletters']);\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n            else {\r\n                if (event.target.name === 'timeonly') {\r\n                    selectedFieldRecord['dateonly'] = false;\r\n                }\r\n                if (event.target.name === 'dateonly') {\r\n                    selectedFieldRecord['timeonly'] = false;\r\n                }\r\n                if (event.target.name === 'mandatory') {\r\n                  //  if (event.target.checked === false) {\r\n                        if (selectedFieldRecord['unique']) {\r\n                            selectedFieldRecord['unique'] = false;\r\n                        }\r\n                   // }\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n        }\r\n        // else if (event.target.name === 'templatename') {\r\n        //     if (event.target.value !== \"\") {\r\n        //         event.target.value = validateCreateView(event.target.value);\r\n        //         selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n        //     } else {\r\n        //         selectedRecord[event.target.name] = event.target.value;\r\n        //     }\r\n        //     this.setState({ selectedRecord });\r\n        // }\r\n        else {\r\n            if (name === 'synonym') {\r\n\r\n                selectedFieldRecord['displayname'] = {\r\n                    ...selectedFieldRecord['displayname'],\r\n                    [event.target.name]: event.target.value\r\n\r\n                }\r\n            }\r\n            if (event.target.name === 'label') {\r\n                const langArray = this.props.Login.languageList;\r\n                const langDataObject = {};\r\n                langArray.map(item =>\r\n                    langDataObject[item.value] = event.target.value);\r\n\r\n                selectedFieldRecord['displayname'] = {\r\n                    ...selectedFieldRecord['displayname'],\r\n                    ...langDataObject\r\n\r\n                }\r\n                chillabelUpdate = true;\r\n                newLabel = event.target.value\r\n                oldLabel = selectedFieldRecord[event.target.name]\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            }\r\n            else {\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.saveComponentProperties(selectedFieldRecord, chillabelUpdate, oldLabel, newLabel)\r\n        }\r\n    }\r\n\r\n    checkAutoFocus = () => {\r\n        let val = ''\r\n        this.state.design.map((item) =>\r\n            item.children.map((column) =>\r\n                column.children.map((componnet) => {\r\n                    if (componnet.hasOwnProperty('children')) {\r\n                        componnet.children.map((componnetrow) => {\r\n                            if (componnetrow.inputtype === 'combo') {\r\n                                if (componnetrow.autoFocus) {\r\n                                    val = componnetrow.label;\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    } else {\r\n                        if (componnet.inputtype === 'combo') {\r\n                            if (componnet.autoFocus) {\r\n                                val = componnet.label;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n                )\r\n            ))\r\n\r\n        return val;\r\n    }\r\n\r\n    onNumericInputChange = (event, columnname) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        let value = event.target.value;\r\n        if (!isNaN(value)) {\r\n            // if (parseInt(value) < 10) {\r\n            selectedFieldRecord[event.target.name] = value;\r\n            this.saveComponentProperties(selectedFieldRecord);\r\n            // }\r\n        }\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        selectedFieldRecord[dateName] = dateValue\r\n        this.saveComponentProperties(selectedFieldRecord);\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        if (selectedFieldRecord.label) {\r\n            if (comboName === 'table') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['source'] = comboData.item.stablename;\r\n                selectedFieldRecord['nformcode']=comboData.item.nformcode\r\n\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode\r\n                }\r\n                selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\r\n                selectedFieldRecord['isAddMaster'] = false;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                //if(comboData.item.stablename==='unit'){\r\n                // newdata['isAddNewRecord']=true;\r\n                //}\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                if (selectedFieldRecord.inputtype === 'frontendsearchfilter' || selectedFieldRecord.inputtype === 'backendsearchfilter') {\r\n                    this.props.getTableColumns(design, selectedFieldRecord, comboData.value,\r\n                        this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, { validComponents: this.state.validComponents })\r\n                } else {\r\n                    this.props.getTableColumns(design, selectedFieldRecord, comboData.value,\r\n                        this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo)\r\n                }\r\n\r\n            } else if (comboName === 'column') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['displaymember'] = comboData.value;\r\n                if (comboData.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['name'] = comboData.value\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (comboName === 'childValue') {\r\n                if (comboData) {\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    if (selectedFieldRecord.parentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\r\n                        }\r\n\r\n                    }\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    selectedFieldRecord['parentPath'] = comboData.path\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        selectedFieldRecord['parentLabel'] = comboData.label\r\n                    }\r\n\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions.length === 1) {\r\n\r\n                            const foriegntablePK = getChildComponentForeignKey(selectedFieldRecord, comboData, this.props.Login.columnInfo);\r\n                            newChildData.push({ label: selectedFieldRecord.label, foriegntablePK: foriegntablePK, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath,isDynamicMapping:selectedFieldRecord.valuemember===\"ndynamicmastercode\"?true:false })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let parentRadioValue = this.state.parentRadioValue || []\r\n                        parentRadioValue = parentData.radioOptions.tags.map(item => {\r\n                            return { value: item.id, label: item.text, item }\r\n                        })\r\n                        this.setState({ design, selectedFieldRecord, parentRadioValue });\r\n                    }\r\n                    else {\r\n                        this.props.getTableColumns(design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            splititemarray, this.props.Login.columnInfo,\r\n                            { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                            true)\r\n                    }\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO)\r\n                        selectedFieldRecord['column'] = comboData\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === 'valuecolumn') {\r\n                selectedFieldRecord['valuecolumn'] = comboData;\r\n                let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                let newChildData = []\r\n                parentData.child.map(child => {\r\n                    if (child.label === selectedFieldRecord.label) {\r\n                        newChildData.push({\r\n                            ...child, tablecolumnname: comboData.value, foriegntablePK: comboData.item.foriegntablePK,isDynamicMapping:selectedFieldRecord.valuemember===\"ndynamicmastercode\"?true:false\r\n                        })\r\n                    } else {\r\n                        newChildData.push(child)\r\n                    }\r\n                    return null;\r\n                })\r\n                parentData = { ...parentData, child: newChildData };\r\n                let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            } else if (comboName === 'filtercolumn') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord.filtervalue = \"\";\r\n                selectedFieldRecord.staticfiltervalue = \"\";\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                if (comboData.type !== 'numeric') {\r\n                    this.setState({ design, selectedFieldRecord });\r\n                } else {\r\n                    this.props.getForeignTableData(design, selectedFieldRecord, '', this.props.Login.userInfo,\r\n                        splititemarray, this.props.Login.columnInfo,\r\n                        { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                        true)\r\n                }\r\n\r\n            } else if (comboName === 'customsearchfilter') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['filterfields'] = [];\r\n                this.state.selectedFieldRecord[comboName].map(data => {\r\n                    return selectedFieldRecord['filterfields'].push(data.item['item'] ? { type: data.type, ...data.item['item'] } : data.item);\r\n                });\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            }\r\n            else if (comboName === 'selectedrecordbasedhide') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['recordbasedhide'] = comboData.value;\r\n                if (comboData.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['name'] = comboData.value\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            }\r\n            else if (comboName === 'radioparent') {\r\n                if (comboData) {\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['radioparent'] = comboData\r\n                    selectedFieldRecord['radioparentPath'] = comboData.path\r\n                    selectedFieldRecord['radioparentLabel'] = comboData.label\r\n                    delete selectedFieldRecord['recordbasedhide']\r\n                    delete selectedFieldRecord[\"selectedrecordbasedhide\"]\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions !== null && valueMemberOptions.length === 1) {\r\n                            newChildData.push({ label: selectedFieldRecord.label, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                    let parentRadioValue = this.state.parentRadioValue || []\r\n                    parentRadioValue = parentData.radioOptions &&\r\n                        parentData.radioOptions.tags.map(item => {\r\n                            return { value: item.id, label: item.text, item }\r\n                        })\r\n                    this.setState({ design, selectedFieldRecord, parentRadioValue });\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.radioparentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['radioparent'] = comboData\r\n                    selectedFieldRecord['selectedrecordbasedhide'] = comboData\r\n                    delete selectedFieldRecord['recordbasedhide']\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === \"period\") {\r\n                if (comboData) {\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    selectedFieldRecord['nperiodcode'] = comboData.value\r\n                    selectedFieldRecord['nperioddata'] = comboData.item.ndata\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    this.setState({ design, selectedFieldRecord });\r\n                } else {\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    delete selectedFieldRecord['nperiodcode']\r\n                    delete selectedFieldRecord['nperioddata']\r\n                    delete selectedFieldRecord['windowperiod']\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    this.setState({ design, selectedFieldRecord });\r\n                }\r\n\r\n            }\r\n            else if (comboName === \"staticfiltertable\") {\r\n                if (comboData) {\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    const list = JSON.parse(comboData.item.jsondata.value).jcolumnname\r\n                    const staticfiltercolumn = list.map(x => {\r\n\r\n                        // x['displayname']= x['displayname'][this.props.Login.userInfo.slanguagetypecode]\r\n                        return { label: x['displayname'][this.props.Login.userInfo.slanguagetypecode], value: x['displayname'][this.props.Login.userInfo.slanguagetypecode], item: x };\r\n                    })\r\n\r\n                    this.setState({ design, selectedFieldRecord, staticfiltercolumn });\r\n                } else {\r\n                    selectedFieldRecord[comboName] = comboData;\r\n                    delete selectedFieldRecord['staticfiltercolumn']\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                    this.setState({ design, selectedFieldRecord, staticfiltercolumn: [] });\r\n                }\r\n            } else if (comboName === \"radiodefaultvalue\") {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                const newdata = { ...selectedFieldRecord }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n            else if (comboName === \"radiodefaultvaluemulti\") {\r\n                //     selectedFieldRecord[comboName] = comboData;\r\n\r\n                selectedFieldRecord['radiodefaultvalue'] = [];\r\n                comboData.map(data => {\r\n                    return selectedFieldRecord['radiodefaultvalue'].push({ ...data });\r\n                });\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n            else {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERLABEL\" }))\r\n        }\r\n\r\n    }\r\n    addTag = (tags) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n\r\n        selectedFieldRecord['radioOptions'] = tags;\r\n\r\n        if (selectedFieldRecord['radiodefaultvalue']) {\r\n            if (Array.isArray(selectedFieldRecord['radiodefaultvalue'])) {\r\n                let list = []\r\n                tags.tags.map(x => {\r\n                    selectedFieldRecord['radiodefaultvalue'].map(y => {\r\n                        if (x.text === y.label) {\r\n                            list.push({ ...y })\r\n                        }\r\n                    })\r\n\r\n                })\r\n                selectedFieldRecord['radiodefaultvalue'] = list.length > 0 ? list : undefined\r\n\r\n\r\n            } else {\r\n\r\n                const list = tags.tags.filter(x => x.text === selectedFieldRecord['radiodefaultvalue'].label)\r\n                if (list.length === 0)\r\n                    selectedFieldRecord['radiodefaultvalue'] = undefined\r\n            }\r\n\r\n        }\r\n\r\n\r\n        this.saveComponentProperties(selectedFieldRecord);\r\n\r\n    }\r\n    addCondition = () => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let filterColumnName;\r\n        let filterValue;\r\n        let conditionString;\r\n        let conditionArrayString;\r\n        let selectedStaticfiltertable = {}\r\n        if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition']\r\n            && (selectedFieldRecord['staticfiltercolumn'] || selectedFieldRecord['staticfiltercolumn'])) {\r\n            selectedStaticfiltertable = JSON.parse(selectedFieldRecord[\"staticfiltertable\"].item.jsondata.value)\r\n            switch (selectedFieldRecord[\"filtercolumn\"].type) {\r\n                case 'static': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n\r\n                    break;\r\n                }\r\n                case 'dynamic': {\r\n                    filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n                    break;\r\n                }\r\n                case 'numeric': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltercolumn.label, value: selectedFieldRecord.staticfiltercolumn.item.columnname }\r\n\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            switch (selectedFieldRecord[\"condition\"].value) {\r\n                case condition.EQUALS:\r\n                    conditionString = filterColumnName + \" = P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.NOTEQUALS:\r\n                    conditionString = filterColumnName + \" P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.STARTSWITH:\r\n                    conditionString = filterColumnName + \" like 'P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P\" + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label\r\n                    break;\r\n                case condition.ENDSWITH:\r\n                    conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label\r\n                    break;\r\n                case condition.INCLUDES:\r\n                    conditionString = filterColumnName + \" like '%P$\" + selectedStaticfiltertable.jtablename.tablename + \".\" + filterValue.value + \"$P%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label\r\n                    break;\r\n                // case condition.CONTAINS:\r\n                //     conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                //     break;\r\n                // case condition.NOTCONTAINS:\r\n                //     conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                //     conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                //     break;\r\n                default:\r\n                    break;\r\n            }\r\n            let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\r\n            let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\r\n            conditionArrayUI.push(conditionArrayString);\r\n            conditionArraySQL.push(conditionString);\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                filtercolumn: \"\",\r\n                condition: \"\",\r\n                staticfiltervalue: undefined,\r\n                filtervalue: \"\",\r\n                staticfiltertable: \"\",\r\n                nsystemconfiguration: false,\r\n                conditionArrayUI,\r\n                conditionArraySQL,\r\n                staticfiltercolumn: \"\"\r\n            }\r\n\r\n            selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n\r\n        }\r\n        else if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition']\r\n            && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\r\n\r\n            switch (selectedFieldRecord[\"filtercolumn\"].type) {\r\n                case 'static': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'dynamic': {\r\n                    filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'numeric': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.tablecolumnname;\r\n                    filterValue = selectedFieldRecord.filtervalue\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n            switch (selectedFieldRecord[\"condition\"].value) {\r\n                case condition.EQUALS:\r\n                    conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.NOTEQUALS:\r\n                    conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.STARTSWITH:\r\n                    conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label\r\n                    break;\r\n                case condition.ENDSWITH:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label\r\n                    break;\r\n                case condition.INCLUDES:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label\r\n                    break;\r\n                case condition.CONTAINS:\r\n                    conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                case condition.NOTCONTAINS:\r\n                    conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\r\n            let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\r\n            conditionArrayUI.push(conditionArrayString);\r\n            conditionArraySQL.push(conditionString);\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                filtercolumn: \"\",\r\n                condition: \"\",\r\n                staticfiltervalue: undefined,\r\n                filtervalue: \"\",\r\n                conditionArrayUI,\r\n                conditionArraySQL,\r\n                nsystemconfiguration: false,\r\n                staticfiltercolumn: \"\"\r\n            }\r\n\r\n            selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        }\r\n        else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALUES\" }))\r\n        }\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord, staticfiltercolumn: \"\" });\r\n    }\r\n    deleteCondition = (index) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\r\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\r\n        conditionArrayUI.splice(index, 1);\r\n        conditionArraySQL.splice(index, 1);\r\n        selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\r\n        selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\r\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n    addDateConstraints = () => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let filterColumnName;\r\n        if (selectedFieldRecord['condition'] && selectedFieldRecord['filtervalue']) {\r\n            filterColumnName = selectedFieldRecord.filtervalue.value;\r\n            let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI || [];\r\n            let dateConstraintArraySQL = selectedFieldRecord.cdateConstraintArraySQL || [];\r\n            dateConstraintArrayUI.push(selectedFieldRecord.label + ' ' + selectedFieldRecord['condition'].label + ' ' + selectedFieldRecord['filtervalue'].label);\r\n            dateConstraintArraySQL.push({ parentdate: selectedFieldRecord.label, constraint: selectedFieldRecord['condition'].value, childdate: filterColumnName });\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                condition: \"\",\r\n                filtervalue: \"\",\r\n                dateConstraintArrayUI,\r\n                dateConstraintArraySQL\r\n            }\r\n            const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n            const newdata = { ...selectedFieldRecord }\r\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n            this.setState({ design, selectedFieldRecord });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALUES\" }))\r\n        }\r\n    }\r\n    deleteDateCondition = (index) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI;\r\n        let dateConstraintArraySQL = selectedFieldRecord.dateConstraintArraySQL;\r\n        dateConstraintArrayUI.splice(index, 1);\r\n        dateConstraintArraySQL.splice(index, 1);\r\n        selectedFieldRecord['dateConstraintArrayUI'] = dateConstraintArrayUI;\r\n        selectedFieldRecord['dateConstraintArraySQL'] = dateConstraintArraySQL;\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n    saveComponentProperties = (selectedFieldRecord, childLabelUpdate, oldLabelName, newLabelName) => {\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        // const selectedFieldRecord = this.state.selectedFieldRecord;\r\n        const newdata = { ...selectedFieldRecord }\r\n        let design1 = this.state.design\r\n        if (childLabelUpdate) {\r\n            design1 = this.updateLabelName(this.state.design, oldLabelName, newLabelName)\r\n        }\r\n        const design = replaceChildFromChildren(design1, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord })\r\n    }\r\n\r\n    updateLabelName = (design, oldLabelName, newLabelName) => {\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.child) {\r\n                                let newChild = [];\r\n                                component.child.map(childComp => {\r\n                                    if (childComp.label === oldLabelName) {\r\n                                        newChild.push({ ...childComp, label: newLabelName });\r\n                                    } else {\r\n                                        newChild.push({ ...childComp });\r\n                                    }\r\n\r\n                                })\r\n                                component = { ...component, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                            }\r\n\r\n\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.child) {\r\n                            let newChild = [];\r\n                            componnetrow.child.map(childComp => {\r\n                                if (childComp.label === oldLabelName) {\r\n                                    newChild.push({ ...childComp, label: newLabelName });\r\n                                } else {\r\n                                    newChild.push({ ...childComp });\r\n                                }\r\n                            })\r\n                            componnetrow = { ...componnetrow, child: newChild }\r\n                            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                        }\r\n\r\n                    }\r\n                })\r\n            )\r\n        )\r\n        return design;\r\n\r\n    }\r\n    handleSaveClick = (saveType) => {\r\n        if (this.state.selectedRecord.templatename && this.state.selectedRecord.templatename !== \"\") {\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            // let valid = this.validateTemplate(this.state.design);\r\n            // if (!valid) {\r\n            //     return null;\r\n            // }\r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                selectedId = this.state.selectedRecord.nchecklistqbcode\r\n                dataState = this.state.dataState\r\n                inputData[\"registrationtemplate\"] = {\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templatename,\r\n                    jsonString: JSON.stringify(this.state.design),\r\n                    jsondata: this.state.design,\r\n                    ntransactionstatus: transactionStatus.DRAFT,\r\n                    ndefaulttemplatecode: this.props.defaultTemplate.value,\r\n\r\n                }\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"registrationtemplate\"] =\r\n                {\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templatename,\r\n                    ndefaulttemplatecode: this.props.defaultTemplate.value,\r\n                    //ndefaulttemplatecode: this.props.Login.masterData.selectedDefaultTemplate.ndefaulttemplatecode,\r\n                    jsonString: JSON.stringify(this.state.design),\r\n                    ntransactionstatus: transactionStatus.DRAFT,\r\n                    nsubsampletypecode: this.props.defaultTemplate && this.props.defaultTemplate.item.nsubsampletypecode\r\n                };\r\n            }\r\n            const masterData = { ...this.props.Login.masterData, selectedDefaultTemplate: this.props.defaultTemplate };\r\n\r\n            const postParam = {\r\n                inputListName: \"RegistrationTemplate\",\r\n                selectedObject: \"selectedTemplate\",\r\n                primaryKeyField: \"nreactregtemplatecode\",\r\n                fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\r\n                fecthInputObject: {\r\n                    userinfo: this.props.Login.userInfo, nsampletypecode: this.props.nsampletypecode\r\n                },\r\n                masterData\r\n            };\r\n            const inputParam = {\r\n                methodUrl: 'RegistrationTemplate',\r\n                classUrl: 'dynamicpreregdesign',\r\n                displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n                inputData: inputData, postParam,\r\n                searchRef: this.props.searchRef,\r\n                operation: this.props.Login.operation,\r\n                saveType, dataState, selectedId, openPortal: true, selectedRecord:{...this.state.selectedRecord}\r\n            };\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData }, saveType,\r\n                        // openPortal:false,\r\n                        openModal: true\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openPortal\");\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTEMPLATENAME\" }))\r\n        }\r\n    }\r\n    validateTemplate = (template) => {\r\n\r\n        let invalidComponent = [];\r\n        let duplicateComponents = [];\r\n        let insufficientMultilingualData = [];\r\n        //let invalidComboComponent = [];\r\n        // let invalidRadioComponent = [];\r\n        // let invalidCheckboxComponent = [];\r\n        //let invalidReadOnlyComponent = [];\r\n        let incompletePropertiesComponent = [];\r\n        let notcompleteProperties = [];\r\n        let labels = [];\r\n        let isTemplateEmpty=false;\r\n        //let uniqueComponent = []\r\n        template.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                if(column.children.length===0){\r\n                isTemplateEmpty=true;\r\n                }else{\r\n                isTemplateEmpty=false;\r\n                }\r\n                column.children.map((componnet, compindex) => {\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            // if (componnetrow.unique) {\r\n                            //     uniqueComponent.push(componnetrow.label);\r\n                            // }\r\n                            if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\r\n                                invalidComponent.push(componnetrow)\r\n                            }\r\n                            if (labels.includes(componnetrow.label)) {\r\n                                duplicateComponents.push(componnetrow)\r\n                            } else {\r\n                                if (componnetrow.label !== undefined)\r\n                                    labels.push(componnetrow.label);\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.COMBO) {\r\n                                if ((!componnetrow.hasOwnProperty('source')) &&\r\n                                    (!componnetrow.hasOwnProperty('displaymember'))) {\r\n                                    incompletePropertiesComponent.push(componnetrow)\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.CHECKBOX) {\r\n                                if ((!componnetrow.hasOwnProperty('radioOptions') || (componnetrow.radioOptions && componnetrow.radioOptions.tags.length === 0))) {\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.RADIO) {\r\n                                if ((!componnetrow.hasOwnProperty('radioOptions') || (componnetrow.radioOptions && componnetrow.radioOptions.tags.length < 2))) {\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.TEXTINPUT\r\n                                || componnetrow.componentcode === ReactComponents.TEXTAREA) {\r\n                                if (componnetrow.hasOwnProperty('readonly')) {\r\n                                    if (componnet.name && componnet.name === 'Age') {\r\n                                        if (!componnetrow.hasOwnProperty('displaymember')) {\r\n                                            incompletePropertiesComponent.push(componnetrow);\r\n                                        } else {\r\n                                            if (componnetrow.displaymember.trim === '') {\r\n                                                incompletePropertiesComponent.push(componnetrow);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (!componnetrow.hasOwnProperty('sfieldlength') || componnetrow.sfieldlength.trim() === '') {\r\n                                        incompletePropertiesComponent.push(componnetrow);\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }\r\n                            if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length < this.props.Login.languageList.length) {\r\n                                insufficientMultilingualData.push(componnetrow);\r\n                            }\r\n                            if (componnetrow.recordbasedshowhide || componnetrow.recordbasedreadonly) {\r\n                                if (!(componnetrow.radioparent && componnetrow.selectedrecordbasedhide)) {\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.DATE) {\r\n                                if (componnetrow.period) {\r\n                                    if (!componnetrow.windowperiod) {\r\n                                        incompletePropertiesComponent.push(componnetrow)\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        })\r\n                    } else {\r\n                        // if (componnet.unique) {\r\n                        //     uniqueComponent.push(componnet.label);\r\n                        // }\r\n                        if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\r\n                            invalidComponent.push(componnet)\r\n                        }\r\n                        if (labels.includes(componnet.label)) {\r\n                            duplicateComponents.push(componnet)\r\n                        } else {\r\n                            if (componnet.label !== undefined)\r\n                                labels.push(componnet.label);\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.COMBO) {\r\n                            if ((!componnet.hasOwnProperty('source')) &&\r\n                                (!componnet.hasOwnProperty('displaymember'))) {\r\n                                incompletePropertiesComponent.push(componnet)\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.CHECKBOX) {\r\n                            if ((!componnet.hasOwnProperty('radioOptions') || (componnet.radioOptions && componnet.radioOptions.tags.length === 0))) {\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.RADIO) {\r\n                            if ((!componnet.hasOwnProperty('radioOptions') || (componnet.radioOptions && componnet.radioOptions.tags.length < 2))) {\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.TEXTINPUT || componnet.componentcode === ReactComponents.TEXTAREA) {\r\n                            if (componnet.hasOwnProperty('readonly')) {\r\n                                if (componnet.name && componnet.name === 'Age') {\r\n                                    if (!componnet.hasOwnProperty('displaymember')) {\r\n                                        incompletePropertiesComponent.push(componnet);\r\n                                    } else {\r\n                                        if (componnet.displaymember.trim === '') {\r\n                                            incompletePropertiesComponent.push(componnet);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            } else if (componnet.ncustomization) {\r\n                                let maxletter = parseInt(componnet.nmaxletters);\r\n                                let maxnumber = parseInt(componnet.nmaxnumeric);\r\n                                let maxsplchar = parseInt(componnet.nsplchar);\r\n                                let maxvalue = String(componnet.sfieldlength)\r\n                                let maxCaptical = parseInt(componnet.nmaxcapticalletters);\r\n                                let maxSmall = parseInt(componnet.nmaxsmallletters);\r\n                                let value;\r\n                                // if(componnet.ncasesensitive){\r\n\r\n                                //      value= maxCaptical+maxSmall\r\n                                //     // let maxvalue=String(componnet.sfieldlength)\r\n                                //      if(String(value)!==maxvalue){\r\n                                //         notcompleteProperties.push(componnet);}\r\n                                //      }else \r\n                                if (componnet.isalphanumeric) {\r\n                                    if (componnet.ncasesensitive) {\r\n                                        value = maxCaptical + maxSmall + maxnumber\r\n                                    } else {\r\n                                        value = maxletter + maxnumber;\r\n                                    }\r\n                                    if (String(value) !== maxvalue) {\r\n                                        notcompleteProperties.push(componnet);\r\n                                    }\r\n                                } else if (componnet.isalphabetspl) {\r\n                                    if (componnet.ncasesensitive) {\r\n                                        value = maxCaptical + maxSmall + maxsplchar;\r\n                                    } else {\r\n                                        value = maxletter + maxsplchar;\r\n                                    }\r\n                                    if (String(value) !== maxvalue) {\r\n                                        notcompleteProperties.push(componnet);\r\n                                    }\r\n                                } else if (componnet.isnumericspl) {\r\n                                    value = maxsplchar + maxnumber;\r\n                                    if (String(value) !== maxvalue) {\r\n                                        notcompleteProperties.push(componnet);\r\n                                    }\r\n                                } else if (componnet.isnumeric) {\r\n                                    if (String(value) !== maxvalue) {\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    if (componnet.ncasesensitive) {\r\n                                        value = maxCaptical + maxSmall + maxnumber + maxsplchar;\r\n                                    } else {\r\n                                        value = maxletter + maxnumber + maxsplchar;\r\n                                    }\r\n                                    //value= maxletter+maxnumber+maxsplchar;\r\n                                    // let maxvalue=String(componnet.sfieldlength)\r\n                                    if (String(value) !== maxvalue) {\r\n                                        notcompleteProperties.push(componnet);\r\n                                    }\r\n                                }\r\n                                if (componnet.hasOwnProperty('naviodsplchar') && (componnet.nsplcharnotallow === undefined || componnet.nsplcharnotallow === \"\")) {\r\n                                    notcompleteProperties.push(componnet);\r\n                                }\r\n                            }\r\n                            else {\r\n                                if(componnet.hasOwnProperty('isnumeric') && componnet.isnumeric ){\r\n                                    if((componnet.max===\"\"||componnet.max===undefined) && (componnet.min===\"\"||componnet.min===undefined)){\r\n                                        incompletePropertiesComponent.push(componnet);\r\n                                    }\r\n                                }\r\n                               else if (!componnet.hasOwnProperty('sfieldlength') || componnet.sfieldlength.trim() === '') {\r\n                                    incompletePropertiesComponent.push(componnet);\r\n                                }\r\n                            }\r\n\r\n\r\n                        }\r\n                        if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length < this.props.Login.languageList.length) {\r\n                            insufficientMultilingualData.push(componnet);\r\n                        }\r\n                        if (componnet.recordbasedshowhide || componnet.recordbasedreadonly) {\r\n                            if (!(componnet.radioparent && componnet.selectedrecordbasedhide)) {\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n\r\n                        }\r\n\r\n                        if (componnet.componentcode === ReactComponents.DATE) {\r\n                            if (componnet.period) {\r\n                                if (!componnet.windowperiod) {\r\n                                    incompletePropertiesComponent.push(componnet)\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        if (isTemplateEmpty) {\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_CONFIGURETEMPLATES' }));\r\n            return false;\r\n        }\r\n        if (duplicateComponents.length > 0) {\r\n            const dataArray = [];\r\n            duplicateComponents.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_DUPLICATECOMPONENTSFOUND' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (invalidComponent.length > 0) {\r\n            const dataArray = [];\r\n            invalidComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_MISSINGCOMPONENTLABEL' }));\r\n            return false;\r\n        }\r\n        if (insufficientMultilingualData.length > 0) {\r\n            const dataArray = [];\r\n            insufficientMultilingualData.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INSUFFICIENTMULTILINGUALDATA' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (incompletePropertiesComponent.length > 0) {\r\n            const dataArray = [];\r\n            incompletePropertiesComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCOMPONENT' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (notcompleteProperties.length > 0) {\r\n            const dataArray = [];\r\n            notcompleteProperties.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_MISSMATCHEDVALUES' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        // if (this.props.nsampletypecode === SampleType.Masters) {\r\n        //     if (uniqueComponent.length === 0) {\r\n        //         const dataArray = [];\r\n        //         incompletePropertiesComponent.map(item => dataArray.push(item.label));\r\n        //         toast.warn(this.props.intl.formatMessage({ id: 'IDS_ATLEASTONEFILEDMUSTBEUNIQUE' }) + dataArray.join(\",\"));\r\n        //         return false;\r\n        //     }\r\n        // }\r\n        // if (invalidRadioComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidRadioComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDRADIOCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        // if (invalidCheckboxComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidCheckboxComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCHECKBOXCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        // if (invalidReadOnlyComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidReadOnlyComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDREADONLYCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        return true;\r\n    }\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n        let selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        const query = QbUtils.sqlFormat(immutableTree, config);\r\n        selectedFieldRecord['filterquery'] = query;\r\n        selectedFieldRecord['awesomeTree'] = immutableTree\r\n        selectedFieldRecord['awesomeConfig'] = config\r\n\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                // awesomeTree: immutableTree,\r\n                // awesomeConfig: config,\r\n                selectedFieldRecord,\r\n                design\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n    };\r\n    handleFilterChange = (event) => {\r\n\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n        let selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        selectedFieldRecord['kendoFilter'] = event.filter\r\n\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                // kendoFilter: event.filter\r\n                selectedFieldRecord,\r\n                design\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n    };\r\n\r\n    handleExecuteClick = (event) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord\r\n        if (selectedFieldRecord['filterquery'] !== \"\" && selectedFieldRecord['filterquery'] !== undefined) {\r\n            const inputparam = {\r\n                component: this.state.selectedFieldRecord,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: selectedFieldRecord['filterquery'].replace('Invalid date', '')\r\n\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTFILTER\" }));\r\n        }\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, crudMaster,\r\n    getTableColumns, getForeignTableData, getDynamicFilter, getDynamicFilterExecuteData\r\n})(injectIntl(PreRegDesignPopUp))"]},"metadata":{},"sourceType":"module"}