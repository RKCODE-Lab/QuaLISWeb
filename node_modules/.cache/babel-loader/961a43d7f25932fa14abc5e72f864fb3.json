{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageMaster.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faFileInvoice, faEye, faLink, faChevronRight, faComments, faLaptopHouse, faBoxOpen, faBoxTissue, faBox, faLocationArrow, faFolderMinus, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, getSampleMaster, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, getContainerStorageCondition, getStorageConditionFromMaster, getSampleMasterDetails, getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster, openSampleStorageApprovedLocation, loadApprovedLocationOnCombo, filterColumnData, loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion, validateEsignCredentialSampleStorageMaster, addSample } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport AddSample from '../basemaster/AddSample';\nimport AddContainerStorageCondition from './AddContainerStorageCondition';\nimport { ProductList } from '../product/product.styled';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport MoveSampleOrContainers from './MoveSampleOrContainers';\nimport { faFolder } from '@fortawesome/free-regular-svg-icons';\nimport Esign from '../audittrail/Esign';\n\nclass SampleStorageMaster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = addId => {\n      if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerlastnode === true) {\n        this.props.addSample(addId, this.props.Login.masterData, this.props.Login.userInfo);\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"discard\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeChildModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n      } else {\n        openChildModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openChildModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onKeyUp = event => {\n      if (event.keyCode === 13) {\n        this.onSaveClickSample(2);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.activeTabIndex === 1) {\n        this.onSaveClickSample(saveType, formRef);\n      } else {\n        this.onSaveClickContainer(saveType, formRef);\n      }\n    };\n\n    this.onSaveClickSample = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.operation === \"update\") {\n        inputData[\"sampleStorageMaster\"] = {\n          \"nsamplecode\": this.state.selectedRecord.nsamplecode ? this.state.selectedRecord.nsamplecode : -1,\n          \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\n          \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\n          \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n          \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\n          \"nsampleqty\": this.state.selectedRecord.nsampleqty && this.state.selectedRecord.nsampleqty ? this.state.selectedRecord.nsampleqty : 0,\n          \"nunitcode\": this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.value : -1\n        };\n      } else {\n        //add               \n        inputData[\"sampleStorageMaster\"] = {\n          \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\n          \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\n          \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n          \"slocationhierarchy\": this.props.Login.sampleLocation ? this.props.Login.sampleLocation : \"\",\n          \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\n          \"nsampleqty\": this.state.selectedRecord.nsampleqty && this.state.selectedRecord.nsampleqty ? this.state.selectedRecord.nsampleqty : 0,\n          \"nunitcode\": this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.value : -1\n        };\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData,\n              selectedRecord\n            },\n            saveType,\n            openModal: true\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.crudMaster(inputParam, masterData, \"openModal\");\n        this.props.saveSampleStorageMaster(this.props.Login.userInfo, this.props.Login.masterData, this.state.selectedRecord, inputParam);\n      }\n    };\n\n    this.onSaveClickContainer = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"containerStorageCondition\"] = {\n        \"nstatus\": 1\n      };\n\n      if (this.props.Login.operation === \"update\") {\n        inputData[\"containerStorageCondition\"][\"ncontainerstoragecode\"] = this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.ncontainerstoragecode : -1;\n        inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\";\n        inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1;\n      }\n\n      inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\";\n      inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1;\n      inputData[\"containerStorageCondition\"][\"slocationhierarchy\"] = this.props.Login.containerLocation ? this.props.Login.containerLocation : \"\";\n      inputData[\"containerStorageCondition\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode;\n      const inputParam = {\n        methodUrl: \"ContainerStorageCondition\",\n        classUrl: \"samplestoragemaster\",\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            openModal: true\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.itemRenderView = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                            ${item.selected ? \"active-node\" : \"\"}\n                            ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                            `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 29\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 60\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 61\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 66\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 61\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 103\n          }\n        }), item.text)) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      if (this.state.selectedItem) {\n        this.state.selectedItem.selected = false;\n      }\n\n      event.item.selected = true;\n      this.setState({\n        selectedItem: event.item\n      }); // let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\n      //     if (item.editable === true) {\n      //         item.editable = false;\n      //     } else if (item.id === event.item.id) {\n      //         item.editable = true;\n      //     }\n      //     return item;\n      // });\n      // this.setState({ treeDataView: newData });\n\n      if (event.item && event.item.containerlastnode && event.item.containerlastnode === true) {\n        let result = this.state.treeDataView;\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n        let itemText = \"\";\n\n        for (let i = 0; i < indices.length; i++) {\n          if (i === 0) {\n            result = result[indices[i]];\n          } else {\n            result = result.items[indices[i]];\n          }\n\n          itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n        }\n\n        this.props.getSampleMaster(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText, event.itemHierarchicalIndex);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(1, undefined, false);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(1, undefined, false);\n        } else if (this.state.activeTabIndex !== 1) {\n          this.changePropertyView(1, undefined, false);\n        }\n      } else if (event.item && event.item.containerfirstnode && event.item.containerfirstnode === true) {\n        let result = this.state.treeDataView;\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n        let itemText = \"\";\n\n        for (let i = 0; i < indices.length; i++) {\n          if (i === 0) {\n            result = result[indices[i]];\n          } else {\n            result = result.items[indices[i]];\n          }\n\n          itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n        }\n\n        this.props.getContainerStorageCondition(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(2, undefined, false);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(2, undefined, false);\n        } else if (this.state.activeTabIndex !== 2) {\n          this.changePropertyView(2, undefined, false);\n        }\n      } else if (event.item && event.item.locationlastnode && event.item.locationlastnode === true) {\n        let containers = [];\n\n        if (event.item.items && event.item.items.length > 0) {\n          event.item.items.forEach(element => {\n            if (element.containerfirstnode === true) {\n              containers.push(element);\n            }\n          });\n        }\n\n        let result = this.state.treeDataView;\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n        let itemText = \"\";\n\n        for (let i = 0; i < indices.length; i++) {\n          if (i === 0) {\n            result = result[indices[i]];\n          } else {\n            result = result.items[indices[i]];\n          }\n\n          itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n        }\n\n        this.props.getContainers(event.item, this.props.Login.masterData, containers, itemText);\n\n        if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\n          this.changePropertyView(3, undefined, false);\n        } else if (this.state.activeTabIndex === undefined) {\n          this.changePropertyView(3, undefined, false);\n        } else if (this.state.activeTabIndex !== 3) {\n          this.changePropertyView(3, undefined, false);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedItem: event.item,\n            activeTabIndex: undefined\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n        this.searchRef.current.value = \"\";\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else if (caseNo === 4) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else if (caseNo === 5) {\n        selectedRecord[fieldName] = comboData;\n        this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onExpandChangeView = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.moveItem = (userInfo, masterData, moveId) => {\n      // let sampleTrayID = [];\n      // mapTree([this.props.Login.selectedItem], \"items\", (item) => {\n      //     if (item.containerlastnode === true) {\n      //         sampleTrayID.push(item.id);\n      //     }\n      //     return null;\n      // });\n      if (this.state.activeTabIndex && this.state.activeTabIndex === 1) {\n        if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n          this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYSAMPLE\"\n          }));\n        }\n      } else if (this.state.activeTabIndex && this.state.activeTabIndex === 3) {\n        if (this.props.Login.masterData.containers && this.props.Login.masterData.selectedContainer && this.props.Login.masterData.selectedContainer[0] !== undefined) {\n          this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYCONTAINER\"\n          }));\n        }\n      }\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteSampleStorageMaster(ncontrolCode));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYSAMPLE\"\n        }));\n      }\n    };\n\n    this.deleteSampleStorageMaster = ncontrolCode => {\n      let inputData = [];\n      let data = [];\n      this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\n        data.push({\n          \"nsamplecode\": item.nsamplecode,\n          \"ssampletraycode\": item.ssampletraycode\n        });\n      });\n      inputData[\"sampleStorageMaster\"] = data;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"SampleStorageMaster\",\n        classUrl: \"samplestoragemaster\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"delete\",\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.loadStorageCondition = editContainerID => {\n      let openStorage = false;\n\n      if (this.props.Login.masterData.storageContainer === null || this.props.Login.masterData.storageContainer === undefined) {\n        mapTree(this.state.treeDataView, \"items\", item => {\n          if (item.id === this.props.Login.selectedItem.id) {\n            openStorage = true;\n          }\n\n          return item;\n        });\n      } else if (this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== undefined) {\n        openStorage = true;\n      }\n\n      if (openStorage === true) {\n        if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerfirstnode === true) {\n          this.props.getStorageConditionFromMaster(this.props.Login.userInfo, this.props.Login.masterData, editContainerID);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYCONTAINER\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYCONTAINER\"\n        }));\n      }\n    };\n\n    this.discardSampleStorageMaster = ncontrolCode => {\n      let inputData = [];\n      let data = [];\n\n      if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\n        this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\n          data.push({\n            \"nsamplecode\": item.nsamplecode,\n            \"ssampletraycode\": item.ssampletraycode,\n            \"ssamplearno\": item.ssamplearno,\n            \"slocationhierarchy\": item.slocationhierarchy\n          });\n        });\n        inputData[\"sampleStorageMaster\"] = data;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        const inputParam = {\n          methodUrl: \"SampleStorageMaster\",\n          classUrl: \"samplestoragemaster\",\n          inputData: inputData,\n          operation: \"discard\",\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: \"discard\",\n              openModal: true,\n              screenName: this.props.Login.inputParam.displayName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYSAMPLE\"\n        }));\n      }\n    };\n\n    this.sideNavDetail = screenName => {\n      const addId = this.state.controlMap.has(\"Add SampleStorageMaster\") && this.state.controlMap.get(\"Add SampleStorageMaster\").ncontrolcode;\n      const editId = this.state.controlMap.has(\"Edit SampleStorageMaster\") && this.state.controlMap.get(\"Edit SampleStorageMaster\").ncontrolcode;\n      const deleteId = this.state.controlMap.has(\"Delete SampleStorageMaster\") && this.state.controlMap.get(\"Delete SampleStorageMaster\").ncontrolcode;\n      const editContainerID = this.state.controlMap.has(\"Edit StorageContainer\") && this.state.controlMap.get(\"Edit StorageContainer\").ncontrolcode;\n      const moveId = this.state.controlMap.has(\"Move SampleStorageMaster\") && this.state.controlMap.get(\"Move SampleStorageMaster\").ncontrolcode;\n      const discardId = this.state.controlMap.has(\"Discard SampleStorageMaster\") && this.state.controlMap.get(\"Discard SampleStorageMaster\").ncontrolcode;\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        return screenName == \"IDS_SAMPLEDETAILS\" ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.sampleTrayCode && this.props.Login.sampleTrayCode !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 680,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"addsample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n          onClick: () => this.openModal(addId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_SAMPLE\",\n          defaultMessage: \"Sample\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"deletesample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n          onClick: () => this.confirmDelete(deleteId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faTrashAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 694,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_DELETE\",\n          defaultMessage: \"Delete\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"movesample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(moveId) === -1,\n          onClick: () => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_MOVE\",\n          defaultMessage: \"Move\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"discardsample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(discardId) === -1,\n          onClick: () => this.discardSampleStorageMaster(discardId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faArrowRight,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 45\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_DISCARD\",\n          defaultMessage: \"Discard\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 45\n          }\n        })))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"toolbar-top-inner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n          listMasterShowIcon: 1,\n          clickIconGroup: false,\n          splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n          masterList: this.props.Login.masterData.sampleStorageMaster || [],\n          selectedMaster: this.props.Login.masterData.selectedSampleStorageMaster || [],\n          primaryKeyField: \"nsamplecode\",\n          filterColumnData: this.props.filterTransactionList,\n          getMasterDetail: this.props.getSampleMasterDetails,\n          inputParam: { ...this.props.Login.masterData\n          } // moreField={this.props.Login.masterData.sampleStorageMaster || []}\n          // selectionList={this.props.Login.masterData.RealFilterStatusValue\n          //     && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\n          ,\n          selectionColorField: \"scolorhexcode\",\n          mainField: \"ssamplearno\",\n          showStatusLink: true,\n          showStatusName: true // statusFieldName=\"stransdisplaystatus\"\n          // statusField=\"ntransactionstatus\"\n          ,\n          selectedListName: \"selectedSampleStorageMaster\" // searchListName=\"searchedSample\"\n          // searchRef={this.searchSampleRef}\n          // objectName=\"sample\"\n          ,\n          listName: \"IDS_SAMPLE\" // selectionField=\"ntransactionstatus\"\n          // selectionFieldName=\"stransdisplaystatus\"\n          // showFilter={this.props.Login.showFilter}\n          // openFilter={this.openFilter}\n          // closeFilter={this.closeFilter}\n          // onFilterSubmit={this.onFilterSubmit}\n          // subFields={this.state.DynamicSampleColumns}                                                 \n          ,\n          needMultiSelect: false,\n          needSingleSelect: true // subListName=\"columnlist\"\n          // jsonfield=\"jsondata\"\n          // showDynamicFields={true}\n          // showStatusBlink={true}\n          // filterParam={{\n          //     ...this.state.filterSampleParam,\n          //     childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\n          //     { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\n          // }}\n          // subFieldsLabel={false}\n          ,\n          handlePageChange: this.handlePageChange,\n          skip: this.state.skip,\n          take: this.state.take,\n          needFilter: false,\n          hidePaging: false,\n          hideSearch: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 37\n          }\n        }))) : /*#__PURE__*/React.createElement(React.Fragment, null)) : screenName == \"IDS_CONTAINERS\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 777,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"addsample\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(moveId) === -1,\n          onClick: () => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 41\n          }\n        }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_MOVE\",\n          defaultMessage: \"Move\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 783,\n            columnNumber: 41\n          }\n        })))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"toolbar-top-inner container-tab\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n          listMasterShowIcon: 1,\n          clickIconGroup: false,\n          splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n          masterList: this.props.Login.masterData.containers || [],\n          selectedMaster: this.props.Login.masterData.selectedContainer || [],\n          primaryKeyField: \"id\",\n          filterColumnData: this.props.filterTransactionList,\n          getMasterDetail: this.props.getselectedContainer,\n          inputParam: { ...this.props.Login.masterData\n          },\n          selectionColorField: \"scolorhexcode\",\n          mainField: \"text\",\n          showStatusLink: true,\n          showStatusName: true,\n          selectedListName: \"selectedContainer\",\n          listName: \"IDS_SAMPLE\",\n          needMultiSelect: false,\n          needSingleSelect: true,\n          subListName: \"columnlist\",\n          jsonfield: \"jsondata\",\n          showDynamicFields: true,\n          showStatusBlink: true,\n          handlePageChange: this.handlePageChange,\n          skip: this.state.skip,\n          take: this.state.take,\n          needFilter: false,\n          hidePaging: false,\n          hideSearch: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 33\n          }\n        }))) : screenName == \"IDS_STORAGECONDITION\" ? /*#__PURE__*/React.createElement(ProductList, {\n          className: \"panel-main-content storage-tab\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 823,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Card, {\n          className: \"border-0\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 825,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(Card.Header, {\n          className: \"no-padding\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Card.Subtitle, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"actions-stripe\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"d-flex justify-content-end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"editContainer\",\n          className: \"add-txt-btn\",\n          hidden: this.state.userRoleControlRights.indexOf(editContainerID) === -1,\n          onClick: () => this.loadStorageCondition(editContainerID),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_STORAGECONDITION\",\n          defaultMessage: \"Storage Condition\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 844,\n            columnNumber: 57\n          }\n        })))))), /*#__PURE__*/React.createElement(Card.Body, {\n          className: \"form-static-wrap no-padding\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 852,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 854,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_STORAGECONDITIONNAME\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 855,\n            columnNumber: 57\n          }\n        })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 857,\n            columnNumber: 53\n          }\n        }, this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : this.props.Login.masterData.storageContainer.sstorageconditionname : \"-\" || \"-\"))), /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 864,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 865,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 866,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"IDS_STORAGELOCATIONNAME\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 57\n          }\n        })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 869,\n            columnNumber: 53\n          }\n        }, this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ? this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : this.props.Login.containerLocation && this.props.Login.containerLocation : \"-\"))))))) : \"\";\n      } else {\n        const masterData = { ...this.props.Login.masterData,\n          storageContainer: undefined,\n          containers: undefined,\n          sampleStorageMaster: undefined\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            activeTabIndex: undefined,\n            containerLocation: undefined,\n            sampleTrayCode: undefined,\n            containerCode: undefined,\n            locationCode: undefined,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.changePropertyView = (index, event, tabClick) => {\n      let check = false;\n\n      if (tabClick === true) {\n        if (index === 1 && this.state.selectedItem && this.state.selectedItem.containerlastnode === true || index === 2 && this.state.selectedItem && this.state.selectedItem.containerfirstnode === true || index === 3 && this.state.selectedItem && this.state.selectedItem.locationlastnode === true) {\n          check = false;\n        } else {\n          check = true;\n        }\n      }\n\n      if (check === false) {\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              activeTabIndex: this.state.activeTabIndex !== index ? index : 0 ? index : false\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPROPERITEM\"\n        }));\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterStorageCategory.value) {\n        let inputParam = {\n          inputData: {\n            nstoragecategorycode: this.state.nfilterStorageCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterStorageCategory: this.state.nfilterStorageCategory\n          }\n        };\n        this.props.changeStorageCategoryFilterOnSampleMaster(inputParam, this.props.Login.masterData.filterStorageCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STORAGECATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.itemRender = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                         ${clickedItem.item.editable ? \"active-node\" : \"\"}\n                         ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                         `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1013,\n            columnNumber: 25\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1017,\n            columnNumber: 56\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1018,\n            columnNumber: 57\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1019,\n            columnNumber: 62\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1020,\n            columnNumber: 57\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1020,\n            columnNumber: 99\n          }\n        }), item.text) // <ul className=\"list-inline mb-0\">\n        // <li className=\"list-inline-item mr-3 \">{clickedItem.item.text}</li>\n        // {clickedItem.item.editable ? (\n        // <>\n        // <li className=\"list-inline-item \">\n        // <span\n        // className=\"action-icon\"\n        // onClick={(e) => this.setProperties(e, clickedItem)}\n        // ></span>\n        // </li>\n        // </>\n        // ) : null}\n        // </ul>\n        : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      // if (this.state.selectedItemMove) {\n      //     this.state.selectedItemMove.selected = false;\n      // }\n      // event.item.selected = true;\n      // this.setState({\n      //     selectedItem: event.item\n      // })\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      }); // newData.map((data) => {\n      //     this.clearSelected(data, event.item)\n      // })\n\n      let result = newData;\n      const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\n      let itemText = \"\";\n\n      for (let i = 0; i < indices.length; i++) {\n        if (i === 0) {\n          result = result[indices[i]];\n        } else {\n          result = result.items[indices[i]];\n        }\n\n        itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\n      }\n\n      this.setState({\n        treeData: newData,\n        clickedItem: event.item,\n        targetLocationHierarchy: itemText\n      });\n    };\n\n    this.onExpandChange = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.onMoveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.state.activeTabIndex === 1) {\n        if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\n          if (this.state.clickedItem.id !== this.props.Login.sampleTrayCode) {\n            let getSelectedSamples = \"\";\n            this.props.Login.masterData.selectedSampleStorageMaster.forEach(data => {\n              getSelectedSamples += \"'\" + data.ssamplearno + \"'\" + \",\"; //ssampletraycode\n            });\n\n            if (getSelectedSamples !== \"\") {\n              getSelectedSamples = getSelectedSamples.slice(0, getSelectedSamples.length - 1);\n            }\n\n            inputParam = {\n              selectedSamples: getSelectedSamples,\n              //this.props.Login.masterData.selectedSampleStorageMaster,\n              moveTargetTrayCode: this.state.clickedItem.id,\n              nsamplestoragelocationcode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n              moveContainers: false,\n              storageCategory: this.state.selectedRecord[\"nstoragecategorycode\"] && this.state.selectedRecord[\"nstoragecategorycode\"].value,\n              methodUrl: \"SampleStorageMaster\",\n              inputData: inputData,\n              operation: \"move\",\n              userinfo: this.props.Login.userInfo,\n              sourceLocationHierarchy: this.props.Login.sampleLocation,\n              targetLocationHierarchy: this.state.targetLocationHierarchy\n            };\n            const masterData = this.props.Login.masterData;\n            const selectedRecord = this.state.selectedRecord || {};\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData,\n                    selectedRecord\n                  },\n                  operation: \"move\",\n                  openChildModal: true,\n                  screenName: this.props.Login.inputParam.displayName\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.moveItems(inputParam, this.props.Login.masterData);\n            }\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPROPERITEM\"\n          }));\n        }\n      } else if (this.state.activeTabIndex === 3) {\n        if (this.state.clickedItem && this.state.clickedItem.locationlastnode === true) {\n          if (this.state.clickedItem.id !== this.props.Login.locationCode) {\n            let getSampleTray = \"\";\n            let getContainerCode = \"\";\n            let targetData = this.state.treeData || [];\n            let sourceData = this.state.treeDataView || [];\n            let newData = [];\n            let sameLocation = true;\n            let targetJsonData = {};\n            let SourceJsonData = {};\n            let selectedContainers = [];\n\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode === this.state.selectedRecord[\"nsamplestoragelocationcode\"].value) {\n              this.props.Login.masterData.selectedContainer.forEach(data => {\n                targetData = removeItems(targetData, \"items\", item => {\n                  return item.id === data.id;\n                });\n              });\n              newData = mapTree(targetData, \"items\", item => {\n                if (item.id === this.state.clickedItem.id) {\n                  item.items = item.items || [];\n                  item.items.push(...this.props.Login.masterData.selectedContainer);\n                }\n\n                if (item.expanded === false) {\n                  item.expanded = true;\n                }\n\n                if (item.selected && item.selected === true) {\n                  item.selected = false;\n                }\n\n                return item;\n              });\n              targetJsonData[\"data\"] = newData;\n            } else {\n              this.props.Login.masterData.selectedContainer.forEach(data => {\n                sourceData = removeItems(sourceData, \"items\", item => {\n                  return item.id === data.id;\n                });\n\n                if (sourceData.length > 0) {\n                  sourceData = mapTree(sourceData, \"items\", item => {\n                    if (item.selected && item.selected === true) {\n                      item.selected = false;\n                    }\n\n                    return item;\n                  });\n                }\n              });\n              newData = mapTree(targetData, \"items\", item => {\n                if (item.id === this.state.clickedItem.id) {\n                  item.items = item.items || [];\n                  item.items.push(...this.props.Login.masterData.selectedContainer);\n                }\n\n                if (item.expanded === false) {\n                  item.expanded = true;\n                }\n\n                if (item.selected && item.selected === true) {\n                  item.selected = false;\n                }\n\n                return item;\n              });\n              SourceJsonData[\"data\"] = sourceData;\n              targetJsonData[\"data\"] = newData;\n              sameLocation = false;\n            }\n\n            this.props.Login.masterData.selectedContainer.forEach(data => {\n              mapTree([data], \"items\", item => {\n                if (item.containerlastnode === true) {\n                  getSampleTray += \"'\" + item.id + \"'\" + \",\";\n                }\n              });\n              getContainerCode += \"'\" + data.id + \"'\" + \",\";\n              selectedContainers.push({\n                scontainercode: data.id,\n                text: data.text\n              });\n            });\n\n            if (getSampleTray !== \"\") {\n              getSampleTray = getSampleTray.slice(0, getSampleTray.length - 1);\n            }\n\n            if (getContainerCode !== \"\") {\n              getContainerCode = getContainerCode.slice(0, getContainerCode.length - 1);\n            }\n\n            inputParam = {\n              selectedSamples: getSampleTray,\n              sourceLocationCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\n              sourceVersionCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode,\n              nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestoragelocationcode,\n              nsamplestorageversioncode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestorageversioncode,\n              SourceJsonData: SourceJsonData,\n              targetJsonData: targetJsonData,\n              moveContainers: true,\n              storageCategory: this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\n              sameLocation,\n              methodUrl: \"SampleStorageMaster\",\n              inputData: inputData,\n              operation: \"move\",\n              userinfo: this.props.Login.userInfo,\n              sourceLocationHierarchy: this.props.Login.locationText,\n              targetLocationHierarchy: this.state.targetLocationHierarchy,\n              selectedContainer: selectedContainers,\n              getContainerCode: getContainerCode\n            }; // this.props.moveItems(inputParam, this.props.Login.masterData);\n\n            const masterData = this.props.Login.masterData;\n            const selectedRecord = this.state.selectedRecord || {};\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData,\n                    selectedRecord\n                  },\n                  operation: \"move\",\n                  openChildModal: true,\n                  screenName: this.props.Login.inputParam.displayName\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.moveItems(inputParam, this.props.Login.masterData);\n            }\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPROPERITEM\"\n          }));\n        }\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\"; // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\n\n      let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          \"nstoragecategorycode\": nfilterStorageCategory\n        },\n        classUrl: \"samplestoragemaster\",\n        methodUrl: \"SampleStorageMaster\",\n        displayName: \"IDS_SAMPLESTORAGEMASTER\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.state.activeTabIndex === 1 && this.props.Login.operation === \"create\") {\n        this.props.validateEsignCredentialSampleStorageMaster(inputParam);\n      } else if (this.props.Login.operation === \"move\") {\n        this.props.validateEsignCredentialSampleStorageMaster(inputParam);\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.state = {\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      enablePropertyPopup: false,\n      enableAutoClick: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      toggleAction: false,\n      propertyPopupWidth: \"60\",\n      splitChangeWidthPercentage: 28.6,\n      containers: [],\n      treeData: [],\n      selectedItem: undefined,\n      selectedItemMove: undefined\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let {\n      filterData\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          controlMap,\n          userRoleControlRights\n        });\n      }\n    }\n\n    if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\n      if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\n        this.setState({\n          treeData: this.props.Login.masterData.approvedTreeData\n        });\n      } //JSON.parse(this.props.Login.masterData.approvedTreeData[\"jsondata\"].value).data\n\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        this.setState({\n          treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\n        });\n      } else {\n        this.setState({\n          treeDataView: undefined\n        });\n      }\n    }\n\n    let nfilterStorageCategory = this.state.nStorageCategory || {};\n    let filterStorageCategory = this.state.filterStorageCategory || {};\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      if (this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined) {\n        const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\n        filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\n\n        if (filterStorageCategory && filterStorageCategory.length > 0) {\n          const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory); //filterStorageCategory[0];\n\n          nfilterStorageCategory = filterCategory[0];\n        }\n\n        isComponentUpdated = true;\n      }\n    } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\n      if (this.props.Login.masterData.nfilterStorageCategory && this.props.Login.masterData.nfilterStorageCategory !== undefined) {\n        nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\n        isComponentUpdated = true;\n      }\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterStorageCategory,\n        filterStorageCategory\n      });\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n      this.setState({\n        activeTabIndex: this.props.Login.activeTabIndex\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\" // \"value\": this.props.Login.masterData.approvedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\n        //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  clearSelected(innerObj, selectedItem) {\n    // console.log(innerObj, selectedItem, \"aasd\")\n    if (innerObj.id == selectedItem.id) {\n      innerObj.selected = true;\n    } else {\n      innerObj.selected = false;\n    }\n\n    if (innerObj.items && innerObj.items.length > 0) {\n      innerObj.items.map(childObj => {\n        this.clearSelected(childObj, selectedItem);\n      });\n    }\n\n    return innerObj;\n  }\n\n  render() {\n    let mandatoryFields = [];\n\n    if (this.state.activeTabIndex === 1) {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_SAMPLE\",\n        \"dataField\": \"ssamplearno\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      });\n    } else if (this.state.activeTabIndex === 2) {\n      mandatoryFields.push({\n        \"idsName\": \"IDS_STORAGECONDITIONNAME\",\n        \"dataField\": \"nstorageconditioncode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    const filterParam = {\n      inputListName: \"approvedSampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageVersion\",\n      primaryKeyField: \"nsamplestorageversioncode\",\n      fetchUrl: \"samplestoragelocation/getActiveSampleStorageVersion\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1351,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1353,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      className: `toolbar-top ${this.state.activeTabIndex ? 'active-property-bar' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top grid-master ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1357,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1358,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGEMASTER\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.approvedSampleStorageLocation,\n      getMasterDetail: selectedItem => this.props.getSelectedApprovedStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedSampleStorageVersion,\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      mainField: \"ssamplestoragelocationname\" // firstField=\"sversionno\"\n      // secondField=\"stransdisplaystatus\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      hideAddButton: true // addId={addId}\n      ,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false // openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\n      ,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_STORAGEFILTER\": /*#__PURE__*/React.createElement(StorageCategoryFilter, {\n          filterStorageCategory: this.state.filterStorageCategory || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1392,\n            columnNumber: 53\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1359,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tree-view-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined ? /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.treeDataView,\n      expandIcons: true,\n      item: this.itemRenderView,\n      selectField: 'active-node',\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1404,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null)), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} xs-grid-container vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1419,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1420,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1429,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_STORAGECONDITION\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_STORAGECONDITION\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4 no-margin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1435,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_CONTAINERS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_CONTAINERS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1443,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1444,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1, undefined, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1445,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1447,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2, undefined, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1453,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_STORAGECONDITION\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3, undefined, true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1457,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1459,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_CONTAINERS\"\n    })))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_STORAGECONDITIONNAME\"\n      }),\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: this.props.Login.loadEsign ? false : this.state.activeTabIndex && this.state.activeTabIndex === 1 ? true : false,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1510,\n          columnNumber: 29\n        }\n      }) : this.state.activeTabIndex && this.state.activeTabIndex === 1 ? /*#__PURE__*/React.createElement(AddSample, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        onKeyUp: e => this.onKeyUp(e),\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        unitMaster: this.props.Login.masterData.unitMaster || [],\n        isneedSubSampleQty: this.props.Login.isneedSubSampleQty && this.props.Login.isneedSubSampleQty || false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1518,\n          columnNumber: 33\n        }\n      }) : this.state.activeTabIndex && this.state.activeTabIndex === 2 ? /*#__PURE__*/React.createElement(AddContainerStorageCondition, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        storageCondition: this.props.Login.masterData.storageCondition || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1528,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 21\n      }\n    }), this.props.Login.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openChildModal,\n      closeModal: this.closeChildModal // operation={this.props.intl.formatMessage({ id: \"IDS_MOVE\" })}\n      ,\n      operation: this.props.Login.screenName === \"IDS_MOVE\" ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_CONTAINERS\"\n      }),\n      onSaveClick: this.onMoveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1554,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(MoveSampleOrContainers, {\n        treeData: this.state.treeData,\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChange,\n        storageCategory: this.props.Login.masterData.storageCategory || [],\n        approvedLocation: this.props.Login.masterData.approvedLocation || [],\n        isSendToStore: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1561,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1541,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getSampleMaster,\n  filterColumnData,\n  getSelectedSampleStorageLocation,\n  editSampleStorageLocation,\n  approveSampleStorageLocation,\n  getSelectedSampleStorageVersion,\n  getContainerStorageCondition,\n  getStorageConditionFromMaster,\n  getSampleMasterDetails,\n  getContainers,\n  getselectedContainer,\n  changeStorageCategoryFilterOnSampleMaster,\n  openSampleStorageApprovedLocation,\n  loadApprovedLocationOnCombo,\n  loadApprovedLocationOnTreeData,\n  moveItems,\n  saveSampleStorageMaster,\n  getSelectedApprovedStorageVersion,\n  validateEsignCredentialSampleStorageMaster,\n  addSample\n})(injectIntl(SampleStorageMaster));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/basemaster/SampleStorageMaster.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FontAwesomeIcon","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faFileInvoice","faEye","faLink","faChevronRight","faComments","faLaptopHouse","faBoxOpen","faBoxTissue","faBox","faLocationArrow","faFolderMinus","faFolderOpen","faArrowRight","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","getSampleMaster","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","getContainerStorageCondition","getStorageConditionFromMaster","getSampleMasterDetails","getContainers","getselectedContainer","changeStorageCategoryFilterOnSampleMaster","openSampleStorageApprovedLocation","loadApprovedLocationOnCombo","filterColumnData","loadApprovedLocationOnTreeData","moveItems","saveSampleStorageMaster","getSelectedApprovedStorageVersion","validateEsignCredentialSampleStorageMaster","addSample","DEFAULT_RETURN","ListWrapper","TreeViewEditable","mapTree","removeItems","ConfirmMessage","CustomSwitch","AddSample","AddContainerStorageCondition","ProductList","TransactionListMasterJson","BreadcrumbComponent","StorageCategoryFilter","MoveSampleOrContainers","faFolder","Esign","SampleStorageMaster","constructor","props","openModal","addId","Login","selectedItem","containerlastnode","masterData","userInfo","closeModal","loadEsign","selectedId","selectedRecord","state","operation","updateInfo","typeName","data","closeChildModal","openChildModal","onInputChange","event","target","name","value","setState","onKeyUp","keyCode","onSaveClickSample","onSaveClick","saveType","formRef","activeTabIndex","onSaveClickContainer","inputData","nsamplecode","sampleTrayCode","ssamplearno","selectedSampleStorageVersion","nsamplestoragelocationcode","nstoragecategorycode","nsampleqty","nunitcode","sampleLocation","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","screenData","storageContainer","ncontainerstoragecode","containerCode","undefined","nstorageconditioncode","containerLocation","itemRenderView","clickedItem","item","toggleActionView","selected","expanded","containerfirstnode","locationlastnode","text","onItemClickView","result","treeDataView","indices","itemHierarchicalIndex","split","map","index","Number","itemText","i","length","items","changePropertyView","containers","forEach","element","push","onComboChange","comboData","fieldName","caseNo","nfilterStorageCategory","searchRef","current","onExpandChangeView","forceUpdate","handlePageChange","e","skip","take","setTimeout","_scrollBarRef","updateScroll","moveItem","moveId","sampleStorageMaster","selectedSampleStorageMaster","warn","intl","formatMessage","id","selectedContainer","confirmDelete","ncontrolCode","confirmMessage","confirm","deleteSampleStorageMaster","ssampletraycode","screenName","loadStorageCondition","editContainerID","openStorage","discardSampleStorageMaster","slocationhierarchy","sideNavDetail","controlMap","has","get","editId","deleteId","discardId","indexOf","splitChangeWidthPercentage","filterTransactionList","sstorageconditionname","locationCode","tabClick","check","window","innerWidth","enableAutoClick","changePropertyViewClose","onInputSwitchOnChange","enablePropertyPopup","openFilter","showFilter","closeFilter","onFilterSubmit","userinfo","filterStorageCategory","itemRender","toggleAction","editable","onItemClick","newData","treeData","targetLocationHierarchy","onExpandChange","onMoveClick","getSelectedSamples","slice","selectedSamples","moveTargetTrayCode","moveContainers","storageCategory","sourceLocationHierarchy","getSampleTray","getContainerCode","targetData","sourceData","sameLocation","targetJsonData","SourceJsonData","selectedContainers","scontainercode","sourceLocationCode","sourceVersionCode","nsamplestorageversioncode","locationText","reloadData","onInputOnChange","type","checked","onNumericInputChange","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","Map","detailSkip","detailTake","settings","propertyPopupWidth","selectedItemMove","createRef","getDerivedStateFromProps","masterStatus","error","componentDidUpdate","previousProps","isComponentUpdated","filterData","Object","values","approvedTreeData","JSON","parse","nStorageCategory","filterStorageCategoryMap","filterCategory","filter","generateBreadCrumData","breadCrumbData","selectedStorageCategoryName","clearSelected","innerObj","childObj","render","mandatoryFields","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","searchFieldList","searchedData","approvedSampleStorageLocation","width","unitMaster","isneedSubSampleQty","storageCondition","approvedLocation","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faFileInvoice, faEye, faLink, faChevronRight, faComments, faLaptopHouse, faBoxOpen, faBoxTissue, faBox, faLocationArrow, faFolderMinus, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, getSampleMaster,\r\n    editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, getContainerStorageCondition,\r\n    getStorageConditionFromMaster, getSampleMasterDetails, getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster,\r\n    openSampleStorageApprovedLocation, loadApprovedLocationOnCombo, filterColumnData,\r\n    loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion, validateEsignCredentialSampleStorageMaster,\r\n    addSample\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport AddSample from '../basemaster/AddSample';\r\nimport AddContainerStorageCondition from './AddContainerStorageCondition';\r\nimport { ProductList } from '../product/product.styled';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport MoveSampleOrContainers from './MoveSampleOrContainers';\r\nimport { faFolder } from '@fortawesome/free-regular-svg-icons';\r\nimport Esign from '../audittrail/Esign';\r\n\r\nclass SampleStorageMaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            enablePropertyPopup: false,\r\n            enableAutoClick: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            toggleAction: false,\r\n            propertyPopupWidth: \"60\",\r\n            splitChangeWidthPercentage: 28.6,\r\n            containers: [],\r\n            treeData: [],\r\n            selectedItem: undefined,\r\n            selectedItemMove: undefined\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    openModal = (addId) => {\r\n        if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerlastnode === true) {           \r\n            this.props.addSample(addId, this.props.Login.masterData,this.props.Login.userInfo);\r\n        }\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"discard\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeChildModal = () => {\r\n\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openChildModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        this.setState({ selectedRecord });\r\n    };\r\n    onKeyUp = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.onSaveClickSample(2);\r\n        }\r\n    };\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.activeTabIndex === 1) {\r\n            this.onSaveClickSample(saveType, formRef);\r\n        } else {\r\n            this.onSaveClickContainer(saveType, formRef);\r\n        }\r\n    }\r\n    onSaveClickSample = (saveType, formRef) => {\r\n        let inputData = [];\r\n\r\n\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            inputData[\"sampleStorageMaster\"] = {\r\n                \"nsamplecode\": this.state.selectedRecord.nsamplecode ? this.state.selectedRecord.nsamplecode : -1,\r\n                \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\r\n                \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\r\n                \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\r\n                \"nsampleqty\": this.state.selectedRecord.nsampleqty && this.state.selectedRecord.nsampleqty ? this.state.selectedRecord.nsampleqty : 0,\r\n                \"nunitcode\": this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.value : -1\r\n            }\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[\"sampleStorageMaster\"] = {\r\n                \"ssampletraycode\": this.props.Login.sampleTrayCode ? this.props.Login.sampleTrayCode : \"\",\r\n                \"ssamplearno\": this.state.selectedRecord.ssamplearno ? this.state.selectedRecord.ssamplearno : \"\",\r\n                \"nsamplestoragelocationcode\": this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                \"slocationhierarchy\": this.props.Login.sampleLocation ? this.props.Login.sampleLocation : \"\",\r\n                \"nstoragecategorycode\": this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\r\n                \"nsampleqty\": this.state.selectedRecord.nsampleqty && this.state.selectedRecord.nsampleqty ? this.state.selectedRecord.nsampleqty : 0,\r\n                \"nunitcode\": this.state.selectedRecord.nunitcode && this.state.selectedRecord.nunitcode ? this.state.selectedRecord.nunitcode.value : -1\r\n            }\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData, selectedRecord }, saveType, openModal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            this.props.saveSampleStorageMaster(this.props.Login.userInfo, this.props.Login.masterData, this.state.selectedRecord, inputParam);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClickContainer = (saveType, formRef) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        inputData[\"containerStorageCondition\"] = { \"nstatus\": 1 };\r\n        if (this.props.Login.operation === \"update\") {\r\n            inputData[\"containerStorageCondition\"][\"ncontainerstoragecode\"] = this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ?\r\n                this.props.Login.masterData.storageContainer.ncontainerstoragecode : -1\r\n            inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\"\r\n            inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1\r\n\r\n\r\n        }\r\n        inputData[\"containerStorageCondition\"][\"scontainercode\"] = this.props.Login.containerCode && this.props.Login.containerCode !== undefined ? this.props.Login.containerCode : \"\"\r\n        inputData[\"containerStorageCondition\"][\"nstorageconditioncode\"] = this.state.selectedRecord.nstorageconditioncode && this.state.selectedRecord.nstorageconditioncode !== undefined ? this.state.selectedRecord.nstorageconditioncode.value : -1\r\n        inputData[\"containerStorageCondition\"][\"slocationhierarchy\"] = this.props.Login.containerLocation ? this.props.Login.containerLocation : \"\";\r\n        inputData[\"containerStorageCondition\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode;\r\n\r\n        const inputParam = {\r\n            methodUrl: \"ContainerStorageCondition\",\r\n            classUrl: \"samplestoragemaster\",\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n\r\n    itemRenderView = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {item ? (\r\n                        <>\r\n                            <span className={`normal-node\r\n                            ${item.selected ? \"active-node\" : \"\"}\r\n                            ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                            `}>\r\n                                {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                    item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                        item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                            item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                {item.text}\r\n                            </span>\r\n                            {/* <ul className=\"list-inline mb-0\"> */}\r\n                            {/* {console.log(clickedItem,'===>')} */}\r\n                            {/* {clickedItem.item.editable ? (\r\n                                <>\r\n                                    <li className=\"list-inline-item\"> */}\r\n                            {/* <span\r\n                                            className=\"action-icon tree-toggle\"\r\n                                            onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                        ></span> */}\r\n                            {/* </li> */}\r\n                            {/* </> */}\r\n                            {/* ) : null} */}\r\n                            {/* </ul> */}\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClickView = (event) => {\r\n        if (this.state.selectedItem) {\r\n            this.state.selectedItem.selected = false;\r\n        }\r\n\r\n        event.item.selected = true;\r\n        this.setState({\r\n            selectedItem: event.item\r\n        })\r\n        // let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n        //     if (item.editable === true) {\r\n        //         item.editable = false;\r\n        //     } else if (item.id === event.item.id) {\r\n        //         item.editable = true;\r\n        //     }\r\n        //     return item;\r\n        // });\r\n\r\n        // this.setState({ treeDataView: newData });\r\n\r\n        if (event.item && event.item.containerlastnode && event.item.containerlastnode === true) {\r\n\r\n            let result = this.state.treeDataView;\r\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n            let itemText = \"\";\r\n\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[indices[i]];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n\r\n            this.props.getSampleMaster(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText, event.itemHierarchicalIndex);\r\n\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(1, undefined, false);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(1, undefined, false);\r\n            } else if (this.state.activeTabIndex !== 1) {\r\n                this.changePropertyView(1, undefined, false);\r\n            }\r\n\r\n\r\n        } else if (event.item && event.item.containerfirstnode && event.item.containerfirstnode === true) {\r\n\r\n            let result = this.state.treeDataView;\r\n\r\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n            let itemText = \"\";\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[indices[i]];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n\r\n            this.props.getContainerStorageCondition(event.item, this.props.Login.userInfo, this.props.Login.masterData, itemText);\r\n\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(2, undefined, false);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(2, undefined, false);\r\n            } else if (this.state.activeTabIndex !== 2) {\r\n                this.changePropertyView(2, undefined, false);\r\n            }\r\n\r\n        } else if (event.item && event.item.locationlastnode && event.item.locationlastnode === true) {\r\n\r\n            let containers = [];\r\n            if (event.item.items && event.item.items.length > 0) {\r\n                event.item.items.forEach(element => {\r\n                    if (element.containerfirstnode === true) {\r\n                        containers.push(element);\r\n                    }\r\n                });\r\n            }\r\n\r\n            let result = this.state.treeDataView;\r\n            const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n            let itemText = \"\";\r\n            for (let i = 0; i < indices.length; i++) {\r\n                if (i === 0) {\r\n                    result = result[indices[i]];\r\n                } else {\r\n                    result = result.items[indices[i]];\r\n                }\r\n                itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n            }\r\n\r\n            this.props.getContainers(event.item, this.props.Login.masterData, containers, itemText);\r\n            if (this.state.activeTabIndex && this.state.activeTabIndex === false) {\r\n                this.changePropertyView(3, undefined, false);\r\n            } else if (this.state.activeTabIndex === undefined) {\r\n                this.changePropertyView(3, undefined, false);\r\n            } else if (this.state.activeTabIndex !== 3) {\r\n                this.changePropertyView(3, undefined, false);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedItem: event.item,\r\n                    activeTabIndex: undefined\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    };\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            this.searchRef.current.value = \"\";\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else if (caseNo === 4) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnCombo(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n\r\n        } else if (caseNo === 5) {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.loadApprovedLocationOnTreeData(this.props.Login.userInfo, this.props.Login.masterData, selectedRecord);\r\n        } else {\r\n\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    onExpandChangeView = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let isComponentUpdated = false;\r\n        let { filterData } = this.state;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({ controlMap, userRoleControlRights });\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.approvedTreeData !== previousProps.Login.masterData.approvedTreeData) {\r\n            if (this.props.Login.masterData.approvedTreeData && this.props.Login.masterData.approvedTreeData !== undefined) {\r\n                this.setState({\r\n                    treeData:\r\n                        this.props.Login.masterData.approvedTreeData\r\n                });\r\n            } //JSON.parse(this.props.Login.masterData.approvedTreeData[\"jsondata\"].value).data\r\n        }\r\n\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n                this.setState({\r\n                    treeDataView:\r\n                        JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    treeDataView: undefined\r\n                });\r\n            }\r\n        }\r\n\r\n        let nfilterStorageCategory = this.state.nStorageCategory || {};\r\n        let filterStorageCategory = this.state.filterStorageCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            if (this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined) {\r\n                const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                    \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\r\n                filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\r\n                if (filterStorageCategory && filterStorageCategory.length > 0) {\r\n                    const filterCategory = filterStorageCategory.filter(item => item.value === this.props.Login.masterData.nfilterStorageCategory);//filterStorageCategory[0];\r\n                    nfilterStorageCategory = filterCategory[0];\r\n                }\r\n                isComponentUpdated = true;\r\n            }\r\n        } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\r\n            if (this.props.Login.masterData.nfilterStorageCategory && this.props.Login.masterData.nfilterStorageCategory !== undefined) {\r\n                nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\r\n                isComponentUpdated = true;\r\n            }\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterStorageCategory, filterStorageCategory });\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n            this.setState({ activeTabIndex: this.props.Login.activeTabIndex });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    moveItem = (userInfo, masterData, moveId) => {\r\n\r\n        // let sampleTrayID = [];\r\n        // mapTree([this.props.Login.selectedItem], \"items\", (item) => {\r\n        //     if (item.containerlastnode === true) {\r\n        //         sampleTrayID.push(item.id);\r\n        //     }\r\n        //     return null;\r\n        // });\r\n\r\n        if (this.state.activeTabIndex && this.state.activeTabIndex === 1) {\r\n            if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n                this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n            }\r\n        } else if (this.state.activeTabIndex && this.state.activeTabIndex === 3) {\r\n            if (this.props.Login.masterData.containers && this.props.Login.masterData.selectedContainer && this.props.Login.masterData.selectedContainer[0] !== undefined) {\r\n                this.props.openSampleStorageApprovedLocation(userInfo, masterData, moveId);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCONTAINER\" }));\r\n            }\r\n        }\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n            this.confirmMessage.confirm(\"deleteMessage\",\r\n                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                () => this.deleteSampleStorageMaster(ncontrolCode));\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n        }\r\n    };\r\n    deleteSampleStorageMaster = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let data = [];\r\n\r\n        this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\r\n            data.push({ \"nsamplecode\": item.nsamplecode, \"ssampletraycode\": item.ssampletraycode });\r\n        })\r\n\r\n        inputData[\"sampleStorageMaster\"] = data;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageMaster\",\r\n            classUrl: \"samplestoragemaster\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    loadStorageCondition = (editContainerID) => {\r\n        let openStorage = false;\r\n        if (this.props.Login.masterData.storageContainer === null || this.props.Login.masterData.storageContainer === undefined) {\r\n            mapTree(this.state.treeDataView, \"items\", (item) => {\r\n                if (item.id === this.props.Login.selectedItem.id) {\r\n                    openStorage = true;\r\n                }\r\n                return item;\r\n            });\r\n        } else if (this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== undefined) {\r\n            openStorage = true;\r\n        }\r\n        if (openStorage === true) {\r\n            if (this.props.Login.selectedItem && this.props.Login.selectedItem.containerfirstnode === true) {\r\n                this.props.getStorageConditionFromMaster(this.props.Login.userInfo, this.props.Login.masterData, editContainerID)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCONTAINER\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCONTAINER\" }));\r\n        }\r\n\r\n    }\r\n    discardSampleStorageMaster = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let data = [];\r\n        if (this.props.Login.masterData.sampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster && this.props.Login.masterData.selectedSampleStorageMaster[0] !== undefined) {\r\n            this.props.Login.masterData.selectedSampleStorageMaster.forEach(item => {\r\n                data.push({\r\n                    \"nsamplecode\": item.nsamplecode, \"ssampletraycode\": item.ssampletraycode, \"ssamplearno\": item.ssamplearno,\"slocationhierarchy\":item.slocationhierarchy\r\n                });\r\n            })\r\n\r\n            inputData[\"sampleStorageMaster\"] = data;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            const inputParam = {\r\n                methodUrl: \"SampleStorageMaster\",\r\n                classUrl: \"samplestoragemaster\",\r\n                inputData: inputData,\r\n                operation: \"discard\", searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, operation: \"discard\", openModal: true,\r\n                        screenName: this.props.Login.inputParam.displayName\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYSAMPLE\" }));\r\n        }\r\n    }\r\n    sideNavDetail = (screenName) => {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageMaster\") && this.state.controlMap.get(\"Add SampleStorageMaster\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageMaster\") && this.state.controlMap.get(\"Edit SampleStorageMaster\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageMaster\") && this.state.controlMap.get(\"Delete SampleStorageMaster\").ncontrolcode;\r\n        const editContainerID = this.state.controlMap.has(\"Edit StorageContainer\") && this.state.controlMap.get(\"Edit StorageContainer\").ncontrolcode;\r\n        const moveId = this.state.controlMap.has(\"Move SampleStorageMaster\") && this.state.controlMap.get(\"Move SampleStorageMaster\").ncontrolcode;\r\n        const discardId = this.state.controlMap.has(\"Discard SampleStorageMaster\") && this.state.controlMap.get(\"Discard SampleStorageMaster\").ncontrolcode;\r\n\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n            return (\r\n                screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                    <>\r\n                        {this.props.Login.sampleTrayCode && this.props.Login.sampleTrayCode !== undefined ?\r\n                            <>\r\n                                <div className=\"actions-stripe\">\r\n                                    <div className=\"d-flex justify-content-end\">\r\n                                        <Nav.Link name=\"addsample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                            onClick={() => this.openModal(addId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                                            <FormattedMessage id=\"IDS_SAMPLE\" defaultMessage=\"Sample\" />\r\n                                        </Nav.Link>\r\n\r\n                                        <Nav.Link name=\"deletesample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                            onClick={() => this.confirmDelete(deleteId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faTrashAlt} /> { }\r\n                                            <FormattedMessage id=\"IDS_DELETE\" defaultMessage=\"Delete\" />\r\n                                        </Nav.Link>\r\n\r\n                                        <Nav.Link name=\"movesample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(moveId) === -1}\r\n                                            onClick={() => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                                            <FormattedMessage id=\"IDS_MOVE\" defaultMessage=\"Move\" />\r\n                                        </Nav.Link>\r\n\r\n                                        <Nav.Link name=\"discardsample\" className=\"add-txt-btn\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(discardId) === -1}\r\n                                            onClick={() => this.discardSampleStorageMaster(discardId)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faArrowRight} /> { }\r\n                                            <FormattedMessage id=\"IDS_DISCARD\" defaultMessage=\"Discard\" />\r\n                                        </Nav.Link>\r\n\r\n                                    </div>\r\n                                </div>\r\n                                <div className='toolbar-top-inner'>\r\n                                    <TransactionListMasterJson\r\n                                        listMasterShowIcon={1}\r\n                                        clickIconGroup={false}\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        masterList={this.props.Login.masterData.sampleStorageMaster || []}\r\n                                        selectedMaster={this.props.Login.masterData.selectedSampleStorageMaster || []}\r\n                                        primaryKeyField=\"nsamplecode\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        getMasterDetail={this.props.getSampleMasterDetails}\r\n                                        inputParam={{\r\n                                            ...this.props.Login.masterData\r\n                                        }}\r\n                                        // moreField={this.props.Login.masterData.sampleStorageMaster || []}\r\n                                        // selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                        //     && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                        selectionColorField=\"scolorhexcode\"\r\n                                        mainField={\"ssamplearno\"}\r\n                                        showStatusLink={true}\r\n                                        showStatusName={true}\r\n                                        // statusFieldName=\"stransdisplaystatus\"\r\n                                        // statusField=\"ntransactionstatus\"\r\n                                        selectedListName=\"selectedSampleStorageMaster\"\r\n                                        // searchListName=\"searchedSample\"\r\n                                        // searchRef={this.searchSampleRef}\r\n                                        // objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        // selectionField=\"ntransactionstatus\"\r\n                                        // selectionFieldName=\"stransdisplaystatus\"\r\n                                        // showFilter={this.props.Login.showFilter}\r\n                                        // openFilter={this.openFilter}\r\n                                        // closeFilter={this.closeFilter}\r\n                                        // onFilterSubmit={this.onFilterSubmit}\r\n                                        // subFields={this.state.DynamicSampleColumns}                                                 \r\n                                        needMultiSelect={false}\r\n                                        needSingleSelect={true}\r\n                                        // subListName=\"columnlist\"\r\n                                        // jsonfield=\"jsondata\"\r\n                                        // showDynamicFields={true}\r\n                                        // showStatusBlink={true}\r\n                                        // filterParam={{\r\n                                        //     ...this.state.filterSampleParam,\r\n                                        //     childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                                        //     { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                                        // }}\r\n                                        // subFieldsLabel={false}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        needFilter={false}\r\n                                        hidePaging={false}\r\n                                        hideSearch={true}\r\n                                    />\r\n                                </div>\r\n                            </>\r\n                            : <></>\r\n                        }\r\n                    </>\r\n                    : screenName == \"IDS_CONTAINERS\" ?\r\n                        <>\r\n                            <div className=\"actions-stripe\">\r\n                                <div className=\"d-flex justify-content-end\">\r\n                                    <Nav.Link name=\"addsample\" className=\"add-txt-btn\"\r\n                                        hidden={this.state.userRoleControlRights.indexOf(moveId) === -1}\r\n                                        onClick={() => this.moveItem(this.props.Login.userInfo, this.props.Login.masterData, moveId)}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus} /> { }\r\n                                        <FormattedMessage id=\"IDS_MOVE\" defaultMessage=\"Move\" />\r\n                                    </Nav.Link>\r\n                                </div>\r\n                            </div>\r\n                            <div className='toolbar-top-inner container-tab'>\r\n                                <TransactionListMasterJson\r\n                                    listMasterShowIcon={1}\r\n                                    clickIconGroup={false}\r\n                                    splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                    masterList={this.props.Login.masterData.containers || []}\r\n                                    selectedMaster={this.props.Login.masterData.selectedContainer || []}\r\n                                    primaryKeyField=\"id\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    getMasterDetail={this.props.getselectedContainer}\r\n                                    inputParam={{\r\n                                        ...this.props.Login.masterData\r\n                                    }}\r\n                                    selectionColorField=\"scolorhexcode\"\r\n                                    mainField={\"text\"}\r\n                                    showStatusLink={true}\r\n                                    showStatusName={true}\r\n                                    selectedListName=\"selectedContainer\"\r\n                                    listName=\"IDS_SAMPLE\"\r\n                                    needMultiSelect={false}\r\n                                    needSingleSelect={true}\r\n                                    subListName=\"columnlist\"\r\n                                    jsonfield=\"jsondata\"\r\n                                    showDynamicFields={true}\r\n                                    showStatusBlink={true}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    needFilter={false}\r\n                                    hidePaging={false}\r\n                                    hideSearch={true}\r\n\r\n                                />\r\n                            </div>\r\n                        </>\r\n                        : screenName == \"IDS_STORAGECONDITION\" ?\r\n                            <ProductList className=\"panel-main-content storage-tab\">\r\n                                {/* {this.props.Login.masterData.storageContainerCondition && this.props.Login.masterData.storageContainerCondition !== undefined ? */}\r\n                                <Card className=\"border-0\">\r\n                                    <Card.Header className=\"no-padding\">\r\n                                        <Card.Subtitle>\r\n                                            {/* <div className=\"d-inline\">\r\n                                                <Nav.Link name=\"editUser\" hidden={this.state.userRoleControlRights.indexOf(editContainerID) === -1}\r\n                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                    onClick={() => this.loadStorageCondition()}\r\n                                                >\r\n                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                </Nav.Link>\r\n                                            </div> */}\r\n                                            <div className=\"actions-stripe\">\r\n                                                <div className=\"d-flex justify-content-end\">\r\n                                                    <Nav.Link name=\"editContainer\" className=\"add-txt-btn\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(editContainerID) === -1}\r\n                                                        onClick={() => this.loadStorageCondition(editContainerID)}\r\n                                                    >\r\n                                                        {/* <FontAwesomeIcon icon={faPlus} /> { } */}\r\n                                                        <FormattedMessage id=\"IDS_STORAGECONDITION\" defaultMessage=\"Storage Condition\" />\r\n                                                    </Nav.Link>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Card.Subtitle>\r\n                                    </Card.Header>\r\n                                    <Card.Body className=\"form-static-wrap no-padding\">\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <FormGroup>\r\n                                                    <FormLabel>\r\n                                                        <FormattedMessage id=\"IDS_STORAGECONDITIONNAME\" />\r\n                                                    </FormLabel>\r\n                                                    <ReadOnlyText>\r\n                                                        {this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ?\r\n                                                            this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : this.props.Login.masterData.storageContainer.sstorageconditionname\r\n                                                            : \"-\" || \"-\"}\r\n                                                    </ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                            <Col md={12}>\r\n                                                <FormGroup>\r\n                                                    <FormLabel>\r\n                                                        <FormattedMessage id=\"IDS_STORAGELOCATIONNAME\" />\r\n                                                    </FormLabel>\r\n                                                    <ReadOnlyText>\r\n                                                        {this.props.Login.masterData.storageContainer && this.props.Login.masterData.storageContainer !== null ?\r\n                                                            this.props.Login.masterData.storageContainer.sstorageconditionname === \"NA\" ? \"-\" : (this.props.Login.containerLocation && this.props.Login.containerLocation) : \"-\"}\r\n                                                    </ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                                {/* : \"\"} */}\r\n\r\n                            </ProductList>\r\n                            : \"\"\r\n            )\r\n        } else {\r\n            const masterData = {\r\n                ...this.props.Login.masterData, storageContainer: undefined,\r\n                containers: undefined, sampleStorageMaster: undefined\r\n            };\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    activeTabIndex: undefined,\r\n                    containerLocation: undefined,\r\n                    sampleTrayCode: undefined,\r\n                    containerCode: undefined,\r\n                    locationCode: undefined,\r\n                    masterData\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    changePropertyView = (index, event, tabClick) => {\r\n\r\n\r\n        let check = false;\r\n        if (tabClick === true) {\r\n            if ((index === 1 && this.state.selectedItem && this.state.selectedItem.containerlastnode === true) ||\r\n                (index === 2 && this.state.selectedItem && this.state.selectedItem.containerfirstnode === true) ||\r\n                (index === 3 && this.state.selectedItem && this.state.selectedItem.locationlastnode === true)) {\r\n                check = false;\r\n            } else {\r\n                check = true;\r\n            }\r\n        }\r\n\r\n        if (check === false) {\r\n            if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        activeTabIndex: this.state.activeTabIndex !== index ? index : 0 ? index : false\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROPERITEM\" }));\r\n        }\r\n    }\r\n\r\n    changePropertyViewClose = (id) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\"\r\n                    // \"value\": this.props.Login.masterData.approvedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\r\n                    //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterStorageCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nstoragecategorycode: this.state.nfilterStorageCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterStorageCategory: this.state.nfilterStorageCategory\r\n\r\n                }\r\n            }\r\n            this.props.changeStorageCategoryFilterOnSampleMaster(inputParam, this.props.Login.masterData.filterStorageCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STORAGECATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n    itemRender = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <span className={`normal-node\r\n                         ${clickedItem.item.editable ? \"active-node\" : \"\"}\r\n                         ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                         `}>\r\n                            {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                    item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                        item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                            {item.text}\r\n                        </span>\r\n                        // <ul className=\"list-inline mb-0\">\r\n                        // <li className=\"list-inline-item mr-3 \">{clickedItem.item.text}</li>\r\n                        // {clickedItem.item.editable ? (\r\n                        // <>\r\n                        // <li className=\"list-inline-item \">\r\n                        // <span\r\n                        // className=\"action-icon\"\r\n                        // onClick={(e) => this.setProperties(e, clickedItem)}\r\n                        // ></span>\r\n                        // </li>\r\n                        // </>\r\n                        // ) : null}\r\n                        // </ul>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        // if (this.state.selectedItemMove) {\r\n        //     this.state.selectedItemMove.selected = false;\r\n        // }\r\n\r\n        // event.item.selected = true;\r\n        // this.setState({\r\n        //     selectedItem: event.item\r\n        // })\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        // newData.map((data) => {\r\n        //     this.clearSelected(data, event.item)\r\n        // })\r\n\r\n        let result = newData;\r\n        const indices = event.itemHierarchicalIndex.split('_').map(index => Number(index));\r\n        let itemText = \"\";\r\n        for (let i = 0; i < indices.length; i++) {\r\n            if (i === 0) {\r\n                result = result[indices[i]];\r\n            } else {\r\n                result = result.items[indices[i]];\r\n            }\r\n            itemText = i > 0 ? itemText + \" > \" + result.text : result.text;\r\n        }\r\n\r\n        this.setState({ treeData: newData, clickedItem: event.item, targetLocationHierarchy: itemText });\r\n    };\r\n    clearSelected(innerObj, selectedItem) {\r\n        // console.log(innerObj, selectedItem, \"aasd\")\r\n        if (innerObj.id == selectedItem.id) {\r\n            innerObj.selected = true;\r\n        } else {\r\n            innerObj.selected = false;\r\n        }\r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            innerObj.items.map((childObj) => {\r\n                this.clearSelected(childObj, selectedItem)\r\n            })\r\n        }\r\n        return innerObj\r\n    }\r\n    onExpandChange = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n\r\n    onMoveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let inputData = [];\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        if (this.state.activeTabIndex === 1) {\r\n\r\n            if (this.state.clickedItem && this.state.clickedItem.containerlastnode === true) {\r\n                if (this.state.clickedItem.id !== this.props.Login.sampleTrayCode) {\r\n\r\n                    let getSelectedSamples = \"\";\r\n\r\n                    this.props.Login.masterData.selectedSampleStorageMaster.forEach(data => {\r\n                        getSelectedSamples += \"'\" + data.ssamplearno + \"'\" + \",\"; //ssampletraycode\r\n                    });\r\n                    if (getSelectedSamples !== \"\") {\r\n                        getSelectedSamples = getSelectedSamples.slice(0, getSelectedSamples.length - 1);\r\n                    }\r\n                    inputParam = {\r\n                        selectedSamples: getSelectedSamples,//this.props.Login.masterData.selectedSampleStorageMaster,\r\n                        moveTargetTrayCode: this.state.clickedItem.id,\r\n                        nsamplestoragelocationcode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                        moveContainers: false,\r\n                        storageCategory: this.state.selectedRecord[\"nstoragecategorycode\"] && this.state.selectedRecord[\"nstoragecategorycode\"].value,\r\n                        methodUrl: \"SampleStorageMaster\",\r\n                        inputData: inputData,\r\n                        operation: \"move\",\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sourceLocationHierarchy: this.props.Login.sampleLocation,\r\n                        targetLocationHierarchy: this.state.targetLocationHierarchy,\r\n                    }\r\n                    const masterData = this.props.Login.masterData;\r\n                    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData, selectedRecord }, operation: \"move\", openChildModal: true,\r\n                                screenName: this.props.Login.inputParam.displayName\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.moveItems(inputParam, this.props.Login.masterData);\r\n                    }\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROPERITEM\" }));\r\n            }\r\n\r\n\r\n        } else if (this.state.activeTabIndex === 3) {\r\n\r\n            if (this.state.clickedItem && this.state.clickedItem.locationlastnode === true) {\r\n                if (this.state.clickedItem.id !== this.props.Login.locationCode) {\r\n\r\n                    let getSampleTray = \"\";\r\n                    let getContainerCode = \"\";\r\n                    let targetData = this.state.treeData || [];\r\n                    let sourceData = this.state.treeDataView || [];\r\n                    let newData = [];\r\n                    let sameLocation = true;\r\n                    let targetJsonData = {};\r\n                    let SourceJsonData = {};\r\n                    let selectedContainers = [];\r\n\r\n\r\n\r\n                    if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode === this.state.selectedRecord[\"nsamplestoragelocationcode\"].value) {\r\n                        this.props.Login.masterData.selectedContainer.forEach(data => {\r\n                            targetData = removeItems(targetData, \"items\", (item) => {\r\n                                return item.id === data.id;\r\n                            });\r\n                        })\r\n\r\n\r\n                        newData = mapTree(targetData, \"items\", (item) => {\r\n                            if (item.id === this.state.clickedItem.id) {\r\n                                item.items = item.items || [];\r\n                                item.items.push(...this.props.Login.masterData.selectedContainer);\r\n                            }\r\n                            if (item.expanded === false) {\r\n                                item.expanded = true;\r\n                            }\r\n                            if (item.selected && item.selected === true) {\r\n                                item.selected = false;\r\n                            }\r\n                            return item;\r\n                        });\r\n                        targetJsonData[\"data\"] = newData;\r\n                    } else {\r\n\r\n\r\n                        this.props.Login.masterData.selectedContainer.forEach(data => {\r\n                            sourceData = removeItems(sourceData, \"items\", (item) => {\r\n                                return item.id === data.id;\r\n                            });\r\n\r\n                            if (sourceData.length > 0) {\r\n                                sourceData = mapTree(sourceData, \"items\", (item) => {\r\n                                    if (item.selected && item.selected === true) {\r\n                                        item.selected = false;\r\n                                    }\r\n                                    return item;\r\n                                });\r\n                            }\r\n                        })\r\n\r\n\r\n                        newData = mapTree(targetData, \"items\", (item) => {\r\n                            if (item.id === this.state.clickedItem.id) {\r\n                                item.items = item.items || [];\r\n                                item.items.push(...this.props.Login.masterData.selectedContainer);\r\n                            }\r\n                            if (item.expanded === false) {\r\n                                item.expanded = true;\r\n                            }\r\n                            if (item.selected && item.selected === true) {\r\n                                item.selected = false;\r\n                            }\r\n                            return item;\r\n                        });\r\n                        SourceJsonData[\"data\"] = sourceData;\r\n                        targetJsonData[\"data\"] = newData;\r\n\r\n                        sameLocation = false;\r\n                    }\r\n\r\n                    this.props.Login.masterData.selectedContainer.forEach(data => {\r\n\r\n                        mapTree([data], \"items\", (item) => {\r\n                            if (item.containerlastnode === true) {\r\n                                getSampleTray += \"'\" + item.id + \"'\" + \",\";\r\n                            }\r\n                        });\r\n\r\n                        getContainerCode += \"'\" + data.id + \"'\" + \",\";\r\n                        selectedContainers.push({ scontainercode: data.id, text: data.text })\r\n                    })\r\n                    if (getSampleTray !== \"\") {\r\n                        getSampleTray = getSampleTray.slice(0, getSampleTray.length - 1);\r\n                    }\r\n                    if (getContainerCode !== \"\") {\r\n                        getContainerCode = getContainerCode.slice(0, getContainerCode.length - 1);\r\n                    }\r\n\r\n                    inputParam = {\r\n                        selectedSamples: getSampleTray,\r\n                        sourceLocationCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestoragelocationcode,\r\n                        sourceVersionCode: this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode,\r\n                        nsamplestoragelocationcode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestoragelocationcode,\r\n                        nsamplestorageversioncode: this.state.selectedRecord[\"nsamplestoragelocationcode\"].item.nsamplestorageversioncode,\r\n                        SourceJsonData: SourceJsonData,\r\n                        targetJsonData: targetJsonData,\r\n                        moveContainers: true,\r\n                        storageCategory: this.props.Login.masterData.selectedSampleStorageVersion.nstoragecategorycode,\r\n                        sameLocation,\r\n                        methodUrl: \"SampleStorageMaster\",\r\n                        inputData: inputData,\r\n                        operation: \"move\",\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sourceLocationHierarchy: this.props.Login.locationText,\r\n                        targetLocationHierarchy: this.state.targetLocationHierarchy,\r\n                        selectedContainer: selectedContainers,\r\n                        getContainerCode: getContainerCode\r\n                    }\r\n                    // this.props.moveItems(inputParam, this.props.Login.masterData);\r\n\r\n                    const masterData = this.props.Login.masterData;\r\n                    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData, selectedRecord }, operation: \"move\", openChildModal: true,\r\n                                screenName: this.props.Login.inputParam.displayName\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.moveItems(inputParam, this.props.Login.masterData);\r\n                    }\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROPERITEM\" }));\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        // let nfilterStorageCategory = this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0 ? this.state.nfilterStorageCategory.value : 0;\r\n        let nfilterStorageCategory = this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.nfilterStorageCategory;\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo, \"nstoragecategorycode\": nfilterStorageCategory },\r\n            classUrl: \"samplestoragemaster\",\r\n            methodUrl: \"SampleStorageMaster\",\r\n            displayName: \"IDS_SAMPLESTORAGEMASTER\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    render() {\r\n\r\n        let mandatoryFields = [];\r\n\r\n        if (this.state.activeTabIndex === 1) {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_SAMPLE\", \"dataField\": \"ssamplearno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" });\r\n        } else if (this.state.activeTabIndex === 2) {\r\n            mandatoryFields.push({ \"idsName\": \"IDS_STORAGECONDITIONNAME\", \"dataField\": \"nstorageconditioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" });\r\n        }\r\n\r\n        const filterParam = {\r\n            inputListName: \"approvedSampleStorageLocation\", selectedObject: \"selectedSampleStorageVersion\", primaryKeyField: \"nsamplestorageversioncode\",\r\n            fetchUrl: \"samplestoragelocation/getActiveSampleStorageVersion\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true} className={`toolbar-top ${this.state.activeTabIndex ? 'active-property-bar' : \"\"}`}>\r\n                        <Col md={12}>\r\n                            <ListWrapper className={`vertical-tab-top grid-master ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"}`}>\r\n                                    <ListMaster\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGEMASTER\" })}\r\n                                        masterData={this.props.Login.masterData}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.approvedSampleStorageLocation}\r\n                                        getMasterDetail={(selectedItem) =>\r\n                                            this.props.getSelectedApprovedStorageVersion(\r\n                                                selectedItem, this.props.Login.userInfo,\r\n                                                this.props.Login.masterData\r\n                                            )}\r\n                                        selectedMaster={this.props.Login.masterData.selectedSampleStorageVersion}\r\n                                        primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                        mainField=\"ssamplestoragelocationname\"\r\n                                        // firstField=\"sversionno\"\r\n                                        // secondField=\"stransdisplaystatus\"\r\n                                        filterColumnData={this.props.filterColumnData}\r\n                                        filterParam={filterParam}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        hideAddButton={true}\r\n                                        // addId={addId}\r\n                                        searchRef={this.searchRef}\r\n                                        reloadData={this.reloadData}\r\n                                        hidePaging={false}\r\n                                        // openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                        showFilterIcon={true}\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"IDS_STORAGEFILTER\":\r\n                                                    <StorageCategoryFilter\r\n                                                        filterStorageCategory={this.state.filterStorageCategory || []}\r\n                                                        nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                    />\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n\r\n                                </div>\r\n                                <div className='tree-view-container'>\r\n                                    {this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined ?\r\n                                        <TreeViewEditable\r\n                                            id=\"samplestoragelocation\"\r\n                                            name=\"samplestoragelocation\"\r\n                                            // label=\"Sample Storage Location\"\r\n                                            data={this.state.treeDataView}\r\n                                            expandIcons={true}\r\n                                            item={this.itemRenderView}\r\n                                            selectField={'active-node'}\r\n                                            onExpandChange={this.onExpandChangeView}\r\n                                            onItemClick={this.onItemClickView}\r\n                                        />\r\n                                        :\r\n                                        <></>\r\n                                    }\r\n                                </div>\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} xs-grid-container vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 1 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_STORAGECONDITION\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 2 ? this.sideNavDetail(\"IDS_STORAGECONDITION\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-common  ${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`}>\r\n                                            <h4 className='inner_h4 no-margin'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_CONTAINERS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex === 3 ? this.sideNavDetail(\"IDS_CONTAINERS\") : \"\"}\r\n                                        </div>\r\n\r\n\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1, undefined, true)}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2, undefined, true)}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_STORAGECONDITION\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex === 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3, undefined, true)}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_CONTAINERS\" })}\r\n                                                </span>\r\n                                            </li>\r\n\r\n                                        </ul>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Auto Show\"}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span> */}\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                label={\"Popup Nav\"}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_STORAGECONDITIONNAME\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={this.props.Login.loadEsign ? false : this.state.activeTabIndex && this.state.activeTabIndex === 1 ? true : false}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.state.activeTabIndex && this.state.activeTabIndex === 1 ? (\r\n                                <AddSample\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onKeyUp={(e) => this.onKeyUp(e)}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    unitMaster= {this.props.Login.masterData.unitMaster || []}\r\n                                    isneedSubSampleQty={this.props.Login.isneedSubSampleQty && this.props.Login.isneedSubSampleQty || false}\r\n                                />\r\n                            ) : this.state.activeTabIndex && this.state.activeTabIndex === 2 ? (\r\n                                <AddContainerStorageCondition\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onComboChange={this.onComboChange}\r\n                                    storageCondition={this.props.Login.masterData.storageCondition || []}\r\n                                />\r\n                            ) : (\r\n                                <></>\r\n                            )\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {this.props.Login.openChildModal &&\r\n                    <SlideOutModal show={this.props.Login.openChildModal}\r\n                        closeModal={this.closeChildModal}\r\n                        // operation={this.props.intl.formatMessage({ id: \"IDS_MOVE\" })}\r\n                        operation={(this.props.Login.screenName === \"IDS_MOVE\") ? \"\" :  this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: this.state.activeTabIndex && this.state.activeTabIndex === 1 ? \"IDS_SAMPLE\" : \"IDS_CONTAINERS\" })}\r\n                        onSaveClick={this.onMoveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <MoveSampleOrContainers\r\n                                treeData={this.state.treeData}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                itemRender={this.itemRender}\r\n                                onExpandChange={this.onExpandChange}\r\n                                onItemClick={this.onItemClick}\r\n                                onComboChange={this.onComboChange}\r\n                                storageCategory={this.props.Login.masterData.storageCategory || []}\r\n                                approvedLocation={this.props.Login.masterData.approvedLocation || []}\r\n                                isSendToStore={false}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n\r\n        }\r\n        if (this.state.activeTabIndex === 1 && this.props.Login.operation === \"create\") {\r\n\r\n            this.props.validateEsignCredentialSampleStorageMaster(inputParam);\r\n        } else if (this.props.Login.operation === \"move\") {\r\n            this.props.validateEsignCredentialSampleStorageMaster(inputParam);\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential, getSampleMaster, filterColumnData,\r\n    getSelectedSampleStorageLocation, editSampleStorageLocation, approveSampleStorageLocation,\r\n    getSelectedSampleStorageVersion, getContainerStorageCondition, getStorageConditionFromMaster, getSampleMasterDetails,\r\n    getContainers, getselectedContainer, changeStorageCategoryFilterOnSampleMaster, openSampleStorageApprovedLocation,\r\n    loadApprovedLocationOnCombo, loadApprovedLocationOnTreeData, moveItems, saveSampleStorageMaster, getSelectedApprovedStorageVersion,\r\n    validateEsignCredentialSampleStorageMaster,addSample\r\n})(injectIntl(SampleStorageMaster));"]},"metadata":{},"sourceType":"module"}