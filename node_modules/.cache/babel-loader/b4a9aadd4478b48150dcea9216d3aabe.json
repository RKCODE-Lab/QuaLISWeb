{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryForm.jsx\";\nimport React from 'react';\nimport { Row, Col, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport '../../components/list-master/list-master.styles';\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\nimport './result.css';\nimport '../../assets/styles/tree.css';\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\n\nclass ResultEntryForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderSwitch = (parameter, index, result, screenName) => {\n      const selectedResultGrade = this.props.selectedResultGrade;\n      const gradeValues = this.props.gradeValues;\n      const gradeCode = selectedResultGrade ? selectedResultGrade.length > 0 ? selectedResultGrade[index] ? selectedResultGrade[index]['ngradecode'] : undefined : \"\" : \"\";\n\n      switch (parameter.nparametertypecode) {\n        case 1:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n              md: 8,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(FormInput, {\n              name: parameter.ntransactionresultcode,\n              type: \"text\",\n              required: false,\n              isMandatory: false,\n              value: this.props.parameterResults.length > 0 ? this.props.parameterResults[index] ? this.props.parameterResults[index]['sresult'] !== null ? this.props.parameterResults[index]['sresult'] : \"\" : \"\" : \"\" // placeholder={parameter.sparametersynonym}\n              //label={parameter.sparametersynonym}\n              ,\n              onChange: event => this.props.onResultInputChange(event, index, parameter),\n              onBlur: () => this.props.onGradeEvent(this.props.parameterResults, index, parameter),\n              maxLength: 9,\n              onKeyUp: event => this.props.onKeyPress(event, index, this.props.paremterResultcode),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 29\n              }\n            })), parameter.ntestgrouptestformulacode > 0 ? /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              className: \"d-flex product-category justify-content-end icon-group-wrap\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              title: \"Calculate Formula\",\n              className: \"btn btn-circle outline-grey ml-2\",\n              role: \"button\",\n              id: screenName + -+index,\n              onClick: event => this.props.getFormula(parameter, this.props.Login.userInfo, this.props.Login.masterData, index, event),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              title: \"Calculate Formula\",\n              icon: faCalculator,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }\n            }))) : \"\", /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(ListWrapper, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(MediaLabel, {\n              className: \"labelfont\",\n              style: {\n                color: gradeValues[gradeCode][0]['scolorhexcode']\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 42\n              }\n            }, gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']))));\n          }\n\n        case 2:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n              md: 10,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: parameter.ntransactionresultcode,\n              as: \"select\" //formLabel={parameter.sparametersynonym}\n              ,\n              defaultValue: {\n                \"value\": parameter.sresult,\n                \"label\": parameter.sresult\n              } //  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\n              //  this.props.predefinedValues ? constructOptionList(this.props.predefinedValues[parameter.ntransactionresultcode]||[],'ngradecode',\n              // 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\n              ,\n              options: this.props.predefinedValues ? this.props.predefinedValues[parameter.ntransactionresultcode] : \"\",\n              optionId: \"ntestgrouptestpredefcode\",\n              optionValue: \"spredefinedname\",\n              isMulti: false,\n              isDisabled: false,\n              isSearchable: true,\n              isClearable: parameter.nresultmandatory === transactionStatus.YES ? false : true,\n              isMandatory: false,\n              onKeyUp: event => this.props.onKeyPress(event, index, this.props.paremterResultcode),\n              onChange: event => this.props.onResultInputChange(event, index, parameter),\n              onBlur: () => this.props.onGradeEvent(this.props.parameterResults, index, parameter),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 29\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(ListWrapper, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(MediaLabel, {\n              className: \"labelfont\",\n              style: {\n                color: gradeValues[gradeCode][0]['scolorhexcode']\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 42\n              }\n            }, gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']))));\n          }\n\n        case 3:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n              md: 10,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(FormTextarea, {\n              name: parameter.ntransactionresultcode //label={parameter.sparametersynonym}\n              //placeholder={parameter.sparametersynonym}\n              ,\n              type: \"text\",\n              defaultValue: parameter.sresult,\n              isMandatory: false,\n              required: false,\n              maxLength: 255,\n              onChange: event => this.props.onResultInputChange(event, index, parameter),\n              onBlur: () => this.props.onGradeEvent(this.props.parameterResults, index, parameter),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 29\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(ListWrapper, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(MediaLabel, {\n              className: \"labelfont\",\n              style: {\n                color: gradeValues[gradeCode][0]['scolorhexcode']\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 42\n              }\n            }, gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']))));\n          }\n\n        case 4:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(DropZone, {\n              maxFiles: 1,\n              isMandatory: false //label={parameter.sparametersynonym}\n              ,\n              accept: \".pdf\",\n              minSize: 0,\n              maxSize: 20,\n              multiple: false,\n              editFiles: parameter.sfinal != null ? parameter : \"\",\n              attachmentTypeCode: attachmentType.FTP,\n              fileSizeName: \"nfilesize\",\n              fileName: \"sfinal\",\n              onDrop: event => this.props.onResultInputChange(event, index, parameter) //disabled={disabled}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 25\n              }\n            }));\n          }\n\n        default:\n          return \"\";\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, this.props.parameterResults.map((parameterResult, index) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 29\n        }\n      }, this.props.needSubSample && parameterResult.ssamplearno ? /*#__PURE__*/React.createElement(MediaHeader, {\n        className: `labelfont`,\n        style: {\n          color: \"#007bff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 37\n        }\n      }, parameterResult.ssamplearno) : parameterResult.sarno ? /*#__PURE__*/React.createElement(MediaHeader, {\n        className: `labelfont`,\n        style: {\n          color: \"#007bff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 41\n        }\n      }, parameterResult.sarno) : \"\", parameterResult.stestsynonym ? /*#__PURE__*/React.createElement(MediaHeader, {\n        className: `labelfont`,\n        style: {\n          color: \"#505f79\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 37\n        }\n      }, \" \", parameterResult.stestsynonym) : \"\", /*#__PURE__*/React.createElement(MediaSubHeader, {\n        className: `labelfont`,\n        style: {\n          color: \"#97a0af\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 33\n        }\n      }, \" \", parameterResult.sparametersynonym, parameterResult.nresultmandatory === transactionStatus.NO ? \"(optional)\" : \"\")), this.renderSwitch(parameterResult, index, parameterResult.ntransactionresultcode, this.props.Login.screenName));\n    }));\n  }\n\n}\n\nexport default injectIntl(ResultEntryForm);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryForm.jsx"],"names":["React","Row","Col","Nav","injectIntl","ListWrapper","FormSelectSearch","FormTextarea","DropZone","attachmentType","transactionStatus","MediaHeader","MediaLabel","MediaSubHeader","FormInput","FontAwesomeIcon","faCalculator","ResultEntryForm","Component","renderSwitch","parameter","index","result","screenName","selectedResultGrade","props","gradeValues","gradeCode","length","undefined","nparametertypecode","ntransactionresultcode","parameterResults","event","onResultInputChange","onGradeEvent","onKeyPress","paremterResultcode","ntestgrouptestformulacode","getFormula","Login","userInfo","masterData","color","sresult","predefinedValues","nresultmandatory","YES","sfinal","FTP","render","map","parameterResult","needSubSample","ssamplearno","sarno","stestsynonym","sparametersynonym","NO"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport '../../components/list-master/list-master.styles';\r\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\r\nimport './result.css';\r\nimport '../../assets/styles/tree.css';\r\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nclass ResultEntryForm extends React.Component {\r\n    renderSwitch = (parameter, index, result, screenName) => {\r\n        const selectedResultGrade = this.props.selectedResultGrade;\r\n        const gradeValues = this.props.gradeValues;\r\n        const gradeCode = selectedResultGrade ? selectedResultGrade.length > 0 ?\r\n            selectedResultGrade[index] ? selectedResultGrade[index]['ngradecode'] : undefined : \"\" : \"\";\r\n\r\n\r\n        switch (parameter.nparametertypecode) {\r\n            case 1: {\r\n                return (\r\n                    <>\r\n                        <Col md={8}>\r\n                            <FormInput\r\n                                name={parameter.ntransactionresultcode}\r\n                                type=\"text\"\r\n                                required={false}\r\n                                isMandatory={false}\r\n                                value={this.props.parameterResults.length > 0 ?\r\n                                    this.props.parameterResults[index] ? (this.props.parameterResults[index]['sresult'] !== null ? this.props.parameterResults[index]['sresult'] : \"\") : \"\" : \"\"}\r\n                                // placeholder={parameter.sparametersynonym}\r\n                                //label={parameter.sparametersynonym}\r\n                                onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                                maxLength={9}\r\n                                onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                            />\r\n                        </Col>\r\n                        {parameter.ntestgrouptestformulacode > 0 ?\r\n                            <Col md={2} className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                <Nav.Link title=\"Calculate Formula\" className=\"btn btn-circle outline-grey ml-2\" role=\"button\" id={screenName + -+index}\r\n                                    onClick={(event) => this.props.getFormula(parameter, this.props.Login.userInfo, this.props.Login.masterData, index, event)}>\r\n                                    <FontAwesomeIcon title=\"Calculate Formula\" icon={faCalculator} />\r\n                                </Nav.Link>\r\n                            </Col>\r\n                            : \"\"}\r\n                        <Col md={2}>\r\n                            {/* {this.props.selectedResultGrade.length > 0 ? */}\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>\r\n                            {/* : \"\"} */}\r\n                        </Col>\r\n                    </>\r\n                );\r\n            }\r\n            case 2: {\r\n                return (\r\n                    <>\r\n                        <Col md={10} >\r\n                            <FormSelectSearch\r\n                                name={parameter.ntransactionresultcode}\r\n                                as={\"select\"}\r\n                                //formLabel={parameter.sparametersynonym}\r\n                                defaultValue={{ \"value\": parameter.sresult, \"label\": parameter.sresult }}\r\n                                //  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\r\n                                //  this.props.predefinedValues ? constructOptionList(this.props.predefinedValues[parameter.ntransactionresultcode]||[],'ngradecode',\r\n                                // 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\r\n\r\n                                options={this.props.predefinedValues ? this.props.predefinedValues[parameter.ntransactionresultcode] : \"\"}\r\n                                optionId={\"ntestgrouptestpredefcode\"}\r\n                                optionValue={\"spredefinedname\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={true}\r\n                                isClearable={parameter.nresultmandatory === transactionStatus.YES ? false : true}\r\n                                isMandatory={false}\r\n                                onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                                onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={2}>\r\n                            {/* {this.props.selectedResultGrade.length > 0 ? */}\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>\r\n                            {/* : \"\"} */}\r\n                        </Col>\r\n                    </>\r\n                );\r\n            }\r\n            case 3: {\r\n                return (\r\n                    <>\r\n                        <Col md={10}>\r\n                            <FormTextarea\r\n                                name={parameter.ntransactionresultcode}\r\n                                //label={parameter.sparametersynonym}\r\n                                //placeholder={parameter.sparametersynonym}\r\n                                type=\"text\"\r\n                                defaultValue={parameter.sresult}\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={255}\r\n                                onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={2}>\r\n                            {/* {this.props.selectedResultGrade.length > 0 ? */}\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>\r\n                            {/* : \"\"} */}\r\n                        </Col>\r\n                    </>\r\n                );\r\n            }\r\n            case 4: {\r\n                return (\r\n                    <Col md={12}>\r\n                        <DropZone\r\n                            maxFiles={1}\r\n                            isMandatory={false}\r\n                            //label={parameter.sparametersynonym}\r\n                            accept=\".pdf\"\r\n                            minSize={0}\r\n                            maxSize={20}\r\n                            multiple={false}\r\n                            editFiles={parameter.sfinal != null ? parameter : \"\"}\r\n                            attachmentTypeCode={attachmentType.FTP}\r\n                            fileSizeName=\"nfilesize\"\r\n                            fileName=\"sfinal\"\r\n                            onDrop={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                        //disabled={disabled}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {this.props.parameterResults.map((parameterResult, index) => {\r\n                    return (\r\n                        <>\r\n                            <Col md={12}>\r\n                                {this.props.needSubSample && parameterResult.ssamplearno ?\r\n                                    <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                        {parameterResult.ssamplearno}\r\n                                    </MediaHeader>\r\n                                    : parameterResult.sarno ?\r\n                                        <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                            {parameterResult.sarno}\r\n                                        </MediaHeader>\r\n                                        : \"\"\r\n                                }\r\n                                {parameterResult.stestsynonym ?\r\n                                    <MediaHeader className={`labelfont`} style={{ color: \"#505f79\" }}>\r\n                                        {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                        {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                        { }{ } {parameterResult.stestsynonym}\r\n                                        {/* {parameterResult.sretestrepeatcount} */}\r\n                                    </MediaHeader>\r\n                                    : \"\"}\r\n\r\n                                <MediaSubHeader className={`labelfont`} style={{ color: \"#97a0af\" }}>\r\n                                    {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                    {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" />\r\n                                    <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                    { }{ } {parameterResult.sparametersynonym}{ }{ }{parameterResult.nresultmandatory === transactionStatus.NO ? \"(optional)\" : \"\"}\r\n                                </MediaSubHeader>\r\n                            </Col>\r\n                            {this.renderSwitch(parameterResult, index, parameterResult.ntransactionresultcode, this.props.Login.screenName)}\r\n                        </>\r\n                    )\r\n                })\r\n                }\r\n            </Row >\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(ResultEntryForm);"]},"metadata":{},"sourceType":"module"}