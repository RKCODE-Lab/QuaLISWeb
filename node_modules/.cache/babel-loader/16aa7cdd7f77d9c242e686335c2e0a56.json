{"ast":null,"code":"/**\n * @hidden\n */\nexport function getNestedValue(fieldName, dataItem) {\n  var path = (fieldName || '').split('.');\n  var data = dataItem;\n  path.forEach(function (p) {\n    data = data ? data[p] : undefined;\n  });\n  return data;\n}\n\nfunction inPX(value) {\n  return value !== undefined && (typeof value === 'number' || /px$/i.test(String(value)));\n}\n/**\n * @hidden\n */\n\n\nexport function setHeaderRowsTop(table, toolbarHeight, rowHeight) {\n  var rows = Array.from(table.tHead && table.tHead.rows || []);\n  var heights = [toolbarHeight];\n  var height;\n\n  var calculateRowHeight = rowHeight || function (row) {\n    return window.getComputedStyle(row).height || undefined;\n  };\n\n  rows.forEach(function (row) {\n    var computedHeight = calculateRowHeight(row);\n    heights.push(inPX(computedHeight) ? parseFloat(String(computedHeight)) : row.offsetHeight);\n  });\n\n  for (var i = 0; i < rows.length; i++) {\n    height = heights.slice(0, i + 1).reduce(function (acc, curr) {\n      return acc + curr;\n    });\n    Array.from(rows[i].cells).forEach(function (c) {\n      return c.style.top = height + 'px';\n    });\n  }\n}\nvar MAX_LEVEL = 1000000;\n/**\n * @hidden\n */\n\nexport function tableRowsVirtualization(args) {\n  var rows = args.rows,\n      tableViewPortHeight = args.tableViewPortHeight,\n      scrollTop = args.scrollTop;\n\n  if (rows.length === 0) {\n    return [];\n  }\n\n  var itemHeight = rows[0].height;\n  var scrollItemIndex = Math.min(Math.round(scrollTop / itemHeight), rows.length);\n  var itemsOnOneScreen = Math.round(tableViewPortHeight / itemHeight);\n  var start = Math.max(0, scrollItemIndex - itemsOnOneScreen);\n  var end = Math.min(rows.length, scrollItemIndex + 2 * itemsOnOneScreen);\n  var items = rows.slice(start, end);\n  var lastItem = items[items.length - 1];\n\n  if (start > 0) {\n    items.unshift({\n      dataItem: {},\n      level: [MAX_LEVEL],\n      offsetTop: 0,\n      height: items[0].offsetTop,\n      levelCount: 0\n    });\n  }\n\n  if (end < rows.length - 1) {\n    items.push({\n      dataItem: {},\n      level: [MAX_LEVEL, MAX_LEVEL],\n      offsetTop: lastItem.offsetTop + lastItem.height,\n      height: (rows.length - end) * itemHeight,\n      levelCount: 0\n    });\n  }\n\n  return items;\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@progress/kendo-react-treelist/dist/es/utils/index.js"],"names":["getNestedValue","fieldName","dataItem","path","split","data","forEach","p","undefined","inPX","value","test","String","setHeaderRowsTop","table","toolbarHeight","rowHeight","rows","Array","from","tHead","heights","height","calculateRowHeight","row","window","getComputedStyle","computedHeight","push","parseFloat","offsetHeight","i","length","slice","reduce","acc","curr","cells","c","style","top","MAX_LEVEL","tableRowsVirtualization","args","tableViewPortHeight","scrollTop","itemHeight","scrollItemIndex","Math","min","round","itemsOnOneScreen","start","max","end","items","lastItem","unshift","level","offsetTop","levelCount"],"mappings":"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","sourcesContent":["/**\n * @hidden\n */\nexport function getNestedValue(fieldName, dataItem) {\n    var path = (fieldName || '').split('.');\n    var data = dataItem;\n    path.forEach(function (p) {\n        data = data ? data[p] : undefined;\n    });\n    return data;\n}\nfunction inPX(value) {\n    return value !== undefined && (typeof value === 'number' || /px$/i.test(String(value)));\n}\n/**\n * @hidden\n */\nexport function setHeaderRowsTop(table, toolbarHeight, rowHeight) {\n    var rows = Array.from(table.tHead && table.tHead.rows || []);\n    var heights = [toolbarHeight];\n    var height;\n    var calculateRowHeight = rowHeight ||\n        (function (row) { return window.getComputedStyle(row).height || undefined; });\n    rows.forEach(function (row) {\n        var computedHeight = calculateRowHeight(row);\n        heights.push(inPX(computedHeight) ? parseFloat(String(computedHeight)) : row.offsetHeight);\n    });\n    for (var i = 0; i < rows.length; i++) {\n        height = heights.slice(0, i + 1).reduce(function (acc, curr) { return acc + curr; });\n        Array.from(rows[i].cells).forEach(function (c) { return c.style.top = height + 'px'; });\n    }\n}\nvar MAX_LEVEL = 1000000;\n/**\n * @hidden\n */\nexport function tableRowsVirtualization(args) {\n    var rows = args.rows, tableViewPortHeight = args.tableViewPortHeight, scrollTop = args.scrollTop;\n    if (rows.length === 0) {\n        return [];\n    }\n    var itemHeight = rows[0].height;\n    var scrollItemIndex = Math.min(Math.round(scrollTop / itemHeight), rows.length);\n    var itemsOnOneScreen = Math.round(tableViewPortHeight / itemHeight);\n    var start = Math.max(0, scrollItemIndex - itemsOnOneScreen);\n    var end = Math.min(rows.length, scrollItemIndex + (2 * itemsOnOneScreen));\n    var items = rows.slice(start, end);\n    var lastItem = items[items.length - 1];\n    if (start > 0) {\n        items.unshift({\n            dataItem: {},\n            level: [MAX_LEVEL],\n            offsetTop: 0,\n            height: items[0].offsetTop,\n            levelCount: 0\n        });\n    }\n    if (end < rows.length - 1) {\n        items.push({\n            dataItem: {},\n            level: [MAX_LEVEL, MAX_LEVEL],\n            offsetTop: lastItem.offsetTop + lastItem.height,\n            height: (rows.length - end) * itemHeight,\n            levelCount: 0\n        });\n    }\n    return items;\n}\n"]},"metadata":{},"sourceType":"module"}