{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\AddTest.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { Col, Row } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport AddTestMethod from './AddTestMethod';\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\nimport AddTestSection from './AddTestSection';\nimport AddTestPackageTest from './AddTestPackageTest';\nimport { transactionStatus, formCode } from '../../components/Enumeration';\n\nconst AddTest = props => {\n  const {\n    period,\n    interfacetype\n  } = props.parameterData;\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TESTCATEGORY\"\n    }),\n    isSearchable: true,\n    name: \"ntestcategorycode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    showOption: true,\n    options: props.testData.testCategory || [],\n    optionId: \"ntestcategorycode\",\n    optionValue: \"stestcategoryname\",\n    value: props.selectedRecord[\"ntestcategorycode\"],\n    onChange: value => props.onComboChange(value, \"ntestcategorycode\", 1),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"stestname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TESTNAME\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 2),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TESTNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"stestname\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"stestsynonym\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TESTSYNONYM\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TESTSYNONYM\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"stestsynonym\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sshortname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SHORTNAME\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SHORTNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sshortname\"] : \"\" // isMandatory=\"*\"\n    ,\n    required: false,\n    maxLength: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 18\n    }\n  }), props.needOtherTest && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AddTestSection, {\n    onComboChange: props.onComboChange,\n    selectedRecord: props.selectedRecord,\n    section: props.otherTestData.section,\n    isMulti: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(AddTestMethod, {\n    onComboChange: props.onComboChange,\n    selectedRecord: props.selectedRecord,\n    method: props.otherTestData.method,\n    isMulti: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(AddTestInstrumentCategory, {\n    onComboChange: props.onComboChange,\n    selectedRecord: props.selectedRecord,\n    instrumentcategory: props.otherTestData.instrumentcategory,\n    isMulti: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"ncost\",\n    label: props.intl.formatMessage({\n      id: \"IDS_PRICE\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"ncost\"],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PRICE\"\n    }),\n    strict: true,\n    min: 0 //max={9999999.99}\n    ,\n    maxLength: 11,\n    onChange: value => props.onNumericInputChange(value, \"ncost\"),\n    noStyle: true,\n    precision: 2,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"sdescription\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TESTPROCEDURE\"\n    }),\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TESTPROCEDURE\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sdescription\"] : \"\",\n    rows: \"2\",\n    required: false,\n    maxLength: 2000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"naccredited\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ACCREDITED\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [transactionStatus.ACCREDITED, transactionStatus.NOTACCREDITED]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ACCREDITED\"\n    }),\n    defaultValue: props.selectedRecord[\"naccredited\"] === transactionStatus.ACCREDITED ? true : false,\n    checked: props.selectedRecord[\"naccredited\"] === transactionStatus.ACCREDITED ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ntransactionstatus\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [1, 2]) //onChange={(event)=>props.onActiveStatusChange(event, [1, 2])}\n    ,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    defaultValue: props.selectedRecord[\"ntransactionstatus\"] === 1 ? true : false,\n    checked: props.selectedRecord[\"ntransactionstatus\"] === 1 ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ntrainingneed\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TRAININGNEEDED\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TRAININGNEEDED\"\n    }),\n    defaultValue: props.selectedRecord[\"ntrainingneed\"] === transactionStatus.YES ? true : false,\n    checked: props.selectedRecord[\"ntrainingneed\"] === transactionStatus.YES ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }))), props.needOtherTest && props.hideQualisForms && props.hideQualisForms.findIndex(item => item.nformcode === formCode.TESTPACKAGE) === -1 && /*#__PURE__*/React.createElement(AddTestPackageTest, {\n    onComboChange: props.onComboChange,\n    selectedRecord: props.selectedRecord,\n    package: props.otherTestData.package,\n    isMulti: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormNumericInput, {\n    name: \"ntat\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TAT\"\n    }),\n    type: \"number\",\n    value: props.selectedRecord[\"ntat\"],\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TAT\"\n    }),\n    strict: true,\n    min: 0 //max={9999999.99}\n    ,\n    maxLength: 3,\n    onChange: value => props.onNumericInputChange(value, \"ntat\"),\n    noStyle: true,\n    className: \"form-control\",\n    errors: \"Please provide a valid number.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TATPERIOD\"\n    }),\n    isSearchable: true,\n    isClearable: true,\n    name: \"ntatperiodcode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TATPERIOD\"\n    }),\n    options: period || [],\n    value: props.selectedRecord ? props.selectedRecord[\"ntatperiodcode\"] : \"\",\n    onChange: value => props.onComboChange(value, \"ntatperiodcode\", 1),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"stestplatform\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TESTPLATFORM\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_TESTPLATFORM\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"stestplatform\"] : \"\",\n    required: false,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_INTERFACETYPE\"\n    }),\n    isSearchable: true,\n    name: \"ninterfacetypecode\",\n    isClearable: true,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_INTERFACETYPE\"\n    }),\n    options: interfacetype || [],\n    optionId: \"ninterfacetypecode\",\n    optionValue: \"sinterfacetypename\",\n    value: props.selectedRecord ? props.selectedRecord[\"ninterfacetypecode\"] : \"\",\n    onChange: value => props.onComboChange(value, \"ninterfacetypecode\", 1),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 12\n    }\n  })));\n};\n\nexport default injectIntl(AddTest);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/AddTest.jsx"],"names":["React","injectIntl","FormSelectSearch","Col","Row","FormInput","CustomSwitch","FormTextarea","FormNumericInput","AddTestMethod","AddTestInstrumentCategory","AddTestSection","AddTestPackageTest","transactionStatus","formCode","AddTest","props","period","interfacetype","parameterData","intl","formatMessage","id","testData","testCategory","selectedRecord","value","onComboChange","event","onInputOnChange","needOtherTest","otherTestData","section","method","instrumentcategory","onNumericInputChange","ACCREDITED","NOTACCREDITED","YES","NO","hideQualisForms","findIndex","item","nformcode","TESTPACKAGE","package"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport AddTestMethod from './AddTestMethod';\r\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\r\nimport AddTestSection from './AddTestSection';\r\nimport AddTestPackageTest from './AddTestPackageTest';\r\nimport { transactionStatus, formCode } from '../../components/Enumeration';\r\n\r\n\r\nconst AddTest = (props) => {\r\n    const {period,interfacetype} = props.parameterData;\r\n    return (\r\n        <Row>\r\n              <Col md={12}>\r\n            \r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_TESTCATEGORY\" })}\r\n                    isSearchable={true}\r\n                    name={\"ntestcategorycode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    showOption={true}\r\n                    options={props.testData.testCategory || []}\r\n                    optionId='ntestcategorycode'\r\n                    optionValue='stestcategoryname'\r\n                    value={props.selectedRecord[\"ntestcategorycode\"]}\r\n                    onChange={value => props.onComboChange(value, \"ntestcategorycode\", 1)}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormInput\r\n                    name={\"stestname\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 2)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestname\"]:\"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                <FormInput\r\n                    name={\"stestsynonym\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestsynonym\"]:\"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                 <FormInput\r\n                    name={\"sshortname\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_SHORTNAME\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SHORTNAME\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"sshortname\"]:\"\"}\r\n                   // isMandatory=\"*\"\r\n                    required={false}\r\n                    maxLength={20}\r\n                />\r\n             { props.needOtherTest && \r\n                <>\r\n                <AddTestSection\r\n                    onComboChange={props.onComboChange}\r\n                    selectedRecord={props.selectedRecord}\r\n                    section={props.otherTestData.section}\r\n                    isMulti={false}\r\n                />\r\n             \r\n                <AddTestMethod\r\n                    onComboChange={props.onComboChange}\r\n                    selectedRecord={props.selectedRecord}\r\n                    method={props.otherTestData.method}\r\n                    isMulti={false}\r\n                />\r\n                 <AddTestInstrumentCategory\r\n                    onComboChange={props.onComboChange}\r\n                    selectedRecord={props.selectedRecord}\r\n                    instrumentcategory={props.otherTestData.instrumentcategory}\r\n                    isMulti={false}\r\n                />\r\n                </>\r\n                }\r\n                <FormNumericInput\r\n                    name={\"ncost\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"ncost\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    strict={true}\r\n                    min={0}\r\n                    //max={9999999.99}\r\n                    maxLength={11}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"ncost\")}\r\n                    noStyle={true}\r\n                    precision={2}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n\r\n                <FormTextarea\r\n                    name={\"sdescription\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"sdescription\"]:\"\"}\r\n                    rows=\"2\"\r\n                    required={false}\r\n                    maxLength={2000}\r\n                >\r\n                </FormTextarea>\r\n\r\n            <Row>\r\n                <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"naccredited\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.ACCREDITED, transactionStatus.NOTACCREDITED])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                        defaultValue={props.selectedRecord[\"naccredited\"] === transactionStatus.ACCREDITED ? true : false }\r\n                        checked={props.selectedRecord[\"naccredited\"] === transactionStatus.ACCREDITED ? true : false }\r\n                    />\r\n                </Col>\r\n                <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"ntransactionstatus\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_ACTIVE\"})}\r\n                        type=\"switch\"\r\n                        onChange={(event)=>props.onInputOnChange(event, 1, [1, 2])}\r\n                        //onChange={(event)=>props.onActiveStatusChange(event, [1, 2])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_ACTIVE\"})}\r\n                        defaultValue ={props.selectedRecord[\"ntransactionstatus\"] === 1 ? true :false}\r\n                        checked={props.selectedRecord[\"ntransactionstatus\"] === 1 ? true :false}\r\n                    />\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"ntrainingneed\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_TRAININGNEEDED\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_TRAININGNEEDED\" })}\r\n                        defaultValue={props.selectedRecord[\"ntrainingneed\"] === transactionStatus.YES ? true : false }\r\n                        checked={props.selectedRecord[\"ntrainingneed\"] === transactionStatus.YES ? true : false }\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            { props.needOtherTest && \r\n                  //(props.userRoleControlRights && Object.keys(props.userRoleControlRights).indexOf(formCode.TESTPACKAGE) !==-1) &&\r\n                    (props.hideQualisForms && props.hideQualisForms.findIndex(item=>item.nformcode === formCode.TESTPACKAGE) === -1) &&\r\n                    <AddTestPackageTest\r\n                        onComboChange={props.onComboChange}\r\n                        selectedRecord={props.selectedRecord}\r\n                        package={props.otherTestData.package}\r\n                        isMulti={false}\r\n                    />\r\n                }\r\n \r\n            <Row>\r\n                <Col md={6}>\r\n                    <FormNumericInput\r\n                        name={\"ntat\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_TAT\" })}\r\n                        type=\"number\"\r\n                        value={props.selectedRecord[\"ntat\"]}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_TAT\" })}\r\n                        strict={true}\r\n                        min={0}\r\n                        //max={9999999.99}\r\n                        maxLength={3}\r\n                        onChange={(value) => props.onNumericInputChange(value, \"ntat\")}\r\n                        noStyle={true}\r\n                        className=\"form-control\"\r\n                        errors=\"Please provide a valid number.\"\r\n                    />\r\n                 </Col>\r\n                 <Col md={6}>\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_TATPERIOD\" })}\r\n                        isSearchable={true}\r\n                        isClearable={true}\r\n                        name={\"ntatperiodcode\"}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_TATPERIOD\" })}                   \r\n                        options={period || []}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"ntatperiodcode\"] : \"\"}\r\n                        onChange={value => props.onComboChange(value, \"ntatperiodcode\", 1)}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n                </Col>\r\n            </Row>\r\n            <FormInput\r\n                    name={\"stestplatform\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTPLATFORM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTPLATFORM\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestplatform\"]:\"\"}\r\n                    required={false}\r\n                    maxLength={100}\r\n                />\r\n\r\n           <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}\r\n                    isSearchable={true}\r\n                    name={\"ninterfacetypecode\"}\r\n                    isClearable={true}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}                   \r\n                    options={interfacetype || []}\r\n                    optionId='ninterfacetypecode'\r\n                    optionValue='sinterfacetypename'\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ninterfacetypecode\"] : \"\"}\r\n                    onChange={value => props.onComboChange(value, \"ninterfacetypecode\", 1)}\r\n                    alphabeticalSort={true}\r\n                >\r\n            </FormSelectSearch>     \r\n        </Col>   \r\n                   \r\n        </Row>\r\n     );\r\n}\r\n\r\nexport default injectIntl(AddTest);"]},"metadata":{},"sourceType":"module"}