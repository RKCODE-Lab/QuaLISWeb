{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\TestMaster.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport rsapi from '../../rsapi';\nimport { callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData, addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula, changeTestCategoryFilter, addTestFile, viewAttachment, getActiveTestContainerTypeById, addContainerType } from '../../actions';\nimport TestView from './TestView';\nimport { injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport AddParameter from './AddParameter';\nimport AddTest from '../../pages/testmanagement/AddTest';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\nimport TestCategoryFilter from './TestCategoryFilter';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\nimport 'react-perfect-scrollbar/dist/css/styles.css'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite'; // import ReactTooltip from 'react-tooltip';\n\nclass TestMaster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePageChange = event => {\n      this.setState({\n        skip: event.skip,\n        take: event.take\n      });\n    };\n\n    this.ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"sparametername\") {\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sparametersynonym\"] = comboData ? comboData.value : \"\";\n          } else {\n            selectedRecord[fieldName] = comboData;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          let item = comboData['item'];\n          let needUnit = true;\n          let needRoundingDigit = true;\n          let needCodedResult = true;\n          let needActualResult = true;\n          let npredefinedcode = transactionStatus.NO;\n          const parameterData = this.props.Login.parameterData;\n\n          if (item[\"nunitrequired\"] === transactionStatus.YES) {\n            needUnit = false;\n            selectedRecord[\"nunitcode\"] = this.props.Login.parameterData.defaultUnit;\n          } else {\n            selectedRecord[\"nunitcode\"] = \"\";\n          }\n\n          if (item[\"nroundingrequired\"] === transactionStatus.YES) {\n            needRoundingDigit = false;\n          } else {\n            selectedRecord[\"nroundingdigit\"] = \"\";\n            selectedRecord[\"nroundingdigits\"] = \"\";\n            selectedRecord[\"ndeltacheck\"] = 4;\n            selectedRecord[\"ndeltacheckframe\"] = \"\";\n            selectedRecord[\"ndeltaunitcode\"] = \"\";\n            selectedRecord[\"ndeltachecklimitcode\"] = \"\";\n          }\n\n          if (item[\"npredefinedrequired\"] === transactionStatus.YES) {\n            needCodedResult = false;\n            npredefinedcode = item[\"npredefinedrequired\"];\n          } else {\n            selectedRecord[\"spredefinedname\"] = \"\";\n          }\n\n          if (item[\"ngraderequired\"] === transactionStatus.YES) {\n            needActualResult = false;\n            selectedRecord[\"ngradecode\"] = this.props.Login.parameterData.defaultGrade;\n          } else {\n            selectedRecord[\"ngradecode\"] = \"\";\n          }\n\n          selectedRecord[fieldName] = comboData;\n          const parameterInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              parameterData: { ...parameterData,\n                needUnit,\n                needRoundingDigit,\n                needCodedResult,\n                needActualResult,\n                npredefinedcode\n              },\n              selectedRecord\n            }\n          };\n          this.props.updateStore(parameterInfo);\n          break;\n\n        case 3:\n          let nfilterTestCategory = this.state.nfilterTestCategory || {};\n          nfilterTestCategory = comboData;\n          this.searchRef.current.value = \"\";\n          this.setState({\n            nfilterTestCategory\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterTestCategory.value) {\n        let inputParam = {\n          inputData: {\n            ntestcategorycode: this.state.nfilterTestCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterTestCategory: this.state.nfilterTestCategory\n          },\n          classUrl: \"testmaster\",\n          methodUrl: \"TestMasterByCategory\"\n        };\n        this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n\n            if (selectedRecord['ndeltacheck'] === transactionStatus.YES) {\n              selectedRecord['ndeltaunitcode'] = this.props.Login.parameterData && this.props.Login.parameterData.deltaperiod.filter(x => x.item.ndefaultstatus === transactionStatus.YES)[0];\n            } else {\n              delete selectedRecord['ndeltaunitcode'];\n            }\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = selectedRecord[\"stestsynonym\"] = selectedRecord[\"sparametersynonym\"] = event.target.value;\n          selectedRecord[\"sparametername\"] = {\n            label: event.target.value,\n            value: event.target.value\n          };\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 3:\n          selectedRecord[event.target.name] = selectedRecord[\"sparametersynonym\"] = event.target.value;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 6:\n          //selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\n          selectedRecord[event.target.name] = selectedRecord[\"spredefinedsynonym\"] = event.target.value;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      // console.log(\"value:\", value, name);\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name === \"nroundingdigits\") {\n        if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\n          //  console.log(\"val:\", value.target.value);\n          selectedRecord[name] = value.target.value;\n        }\n      } else {\n        selectedRecord[name] = value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = transactionStatus.NO;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFormulaModal = () => {\n      this.setState({\n        addformula: false\n      });\n    };\n\n    this.addSubCodedResult = () => {};\n\n    this.deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\n      const selected = item[\"dataItem\"] ? item[\"dataItem\"] : item;\n      const inputParam = {\n        inputData: {\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"testmaster\",\n        operation: operation,\n        methodUrl: methodUrl,\n        screenName: \"IDS_TEST\",\n        postParam: {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\",\n          primaryKeyValue: selected.ntestcode,\n          fetchUrl: \"testmaster/getTestById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData\n        }\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            screenName: \"IDS_TEST\",\n            operation: operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, modalName, {});\n      }\n    };\n\n    this.validateTestExistenceInTestGroup = () => {\n      const operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\n          ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\n          \"userinfo\": this.props.Login.userInfo\n        }).then(response => {\n          if (response.data === true) {\n            this.confirmMessage.confirm(this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_TESTEXISTSINTESTGROUP\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_OK\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CANCEL\"\n            }), () => this.onSaveTest(null, null), false, undefined);\n          }\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response\n            }));\n          }\n        });\n      }\n    };\n\n    this.onSaveTest = () => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n\n      if (operation === \"update\") {\n        if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.DEACTIVE) {\n          return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\n            ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\n            \"userinfo\": this.props.Login.userInfo\n          }).then(response => {\n            if (response.data === true) {\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_TESTEXISTSINTESTGROUP\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.onSaveValidatedTest(null, null), false, undefined);\n            } else {\n              this.onSaveValidatedTest(null, null);\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(this.props.intl.formatMessage({\n                id: error.message\n              }));\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: error.response\n              }));\n            }\n          });\n        } else {\n          this.onSaveValidatedTest(null, null);\n        }\n      } else {\n        this.onSaveValidatedTest(null, null);\n      }\n    };\n\n    this.onSaveValidatedTest = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      let inputData = {};\n      let customobject = null;\n      const userInfo = this.props.Login.userInfo;\n      const selectedRecord = this.state.selectedRecord;\n      let testColumns = [{\n        \"testmaster\": [{\n          \"ntestcode\": \"int\"\n        }, {\n          \"ntestcategorycode\": \"input\"\n        }, {\n          \"nchecklistversioncode\": \"input\"\n        }, {\n          \"naccredited\": \"int\"\n        }, {\n          \"ntrainingneed\": \"int\"\n        }, {\n          \"ntransactionstatus\": \"int\"\n        }, {\n          \"stestname\": \"string\"\n        }, {\n          \"stestsynonym\": \"string\"\n        }, {\n          \"sshortname\": \"string\"\n        }, {\n          \"sdescription\": \"string\"\n        }, {\n          \"ncost\": \"float\"\n        }, {\n          \"stestplatform\": \"string\"\n        }, {\n          \"ntat\": \"int\"\n        }, {\n          \"ntatperiodcode\": \"input\"\n        }, {\n          \"ninterfacetypecode\": \"input\"\n        }]\n      }];\n\n      if (operation === \"create\") {\n        testColumns.push({\n          \"testparameter\": [{\n            \"ntestcode\": \"int\"\n          }, {\n            \"nparametertypecode\": \"input\"\n          }, {\n            \"nunitcode\": \"input\"\n          }, {\n            \"sparametername\": \"input\"\n          }, {\n            \"sparametersynonym\": \"string\"\n          }, {\n            \"nroundingdigits\": \"int\"\n          }, {\n            \"objPredefinedParameter\": \"customobject\"\n          }, {\n            \"ndeltachecklimitcode\": \"float\"\n          }, {\n            \"ndeltacheck\": \"int\"\n          }, {\n            \"ndeltaunitcode\": \"input\"\n          }, {\n            \"ndeltacheckframe\": \"int\"\n          }]\n        });\n        inputData = {\n          \"testmaster\": {},\n          \"testparameter\": {\n            nisadhocparameter: transactionStatus.NO,\n            nisvisible: transactionStatus.YES,\n            nstatus: transactionStatus.ACTIVE\n          },\n          \"testsection\": {},\n          \"testmethod\": {},\n          \"testinstrumentcategory\": {},\n          \"testpackagetest\": {}\n        };\n\n        if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\n          customobject = {};\n          customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\n          customobject[\"nstatus\"] = transactionStatus.ACTIVE;\n          customobject[\"ndefaultstatus\"] = transactionStatus.YES;\n          customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1; //     if (selectedRecord[\"sresultparacomment\"]) {\n          //     customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"].trim();}\n          // }\n\n          if (selectedRecord[\"spredefinedsynonym\"]) {\n            customobject[\"spredefinedsynonym\"] = selectedRecord[\"spredefinedsynonym\"].trim();\n          }\n        }\n      } else {\n        inputData = {\n          \"testmaster\": {}\n        };\n      }\n\n      inputData[\"userinfo\"] = userInfo;\n      inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\n      inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode;\n      testColumns.forEach(function (items) {\n        const mapkey = Object.keys(items)[0];\n        const columns = Object.values(items)[0];\n        columns.map(item => {\n          const key = Object.keys(item)[0];\n          const value = Object.values(item)[0];\n\n          if (value === \"input\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\n          } else if (value === \"int\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n          } else if (value === \"string\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\n          } else if (value === \"float\") {\n            return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\n          } else if (value === \"customobject\") {\n            return inputData[mapkey][key] = customobject;\n          } else {\n            return null;\n          }\n        });\n      });\n      let postParam = undefined;\n\n      if (operation === \"create\") {\n        if (selectedRecord[\"nsectioncode\"]) {\n          inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\n          inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n\n        if (selectedRecord[\"nmethodcode\"]) {\n          inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\n          inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n\n        if (selectedRecord[\"ninstrumentcatcode\"]) {\n          inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\n          inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n\n        if (selectedRecord[\"ntestpackagecode\"]) {\n          inputData[\"testpackagetest\"][\"ntestpackagecode\"] = selectedRecord[\"ntestpackagecode\"].value;\n          inputData[\"testpackagetest\"][\"ndefaultstatus\"] = transactionStatus.YES;\n          inputData[\"testpackagetest\"][\"nstatus\"] = transactionStatus.ACTIVE;\n        }\n      } else if (operation === \"copy\") {\n        inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"];\n      } else if (operation === \"update\") {\n        postParam = {\n          inputListName: \"TestMaster\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestcode\"\n        };\n      }\n\n      this.setState({\n        nfilterTestCategory: {\n          \"label\": selectedRecord.ntestcategorycode.label,\n          \"value\": selectedRecord.ntestcategorycode.value\n        }\n      });\n\n      if (operation !== \"update\") {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            defaultkeyname: \"parametereventkey\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } //  let valid = true;\n      // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){       \n      // if (valid){\n\n\n      const inputParam = {\n        inputData: { ...inputData,\n          validatetest: false\n        },\n        classUrl: \"testmaster\",\n        operation: operation,\n        methodUrl: \"TestMaster\",\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            formRef\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      } // }\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      // this.searchRef.current.value = \"\";\n      // const inputParam = {\n      //     inputData: { \"userinfo\": this.props.Login.userInfo },\n      //     classUrl: \"testmaster\",\n      //     methodUrl: \"TestMaster\",\n      //     userInfo: this.props.Login.userInfo,\n      //     displayName: \"IDS_TESTMASTER\"\n      // };\n      // this.props.callService(inputParam);\n      this.searchRef.current.value = \"\";\n\n      if (this.state.nfilterTestCategory.value) {\n        let inputParam = {\n          inputData: {\n            //    ntestcategorycode: this.state.nfilterTestCategory.value,\n            ntestcategorycode: this.props.Login.masterData.SelectedTestCat && this.props.Login.masterData.SelectedTestCat.ntestcategorycode,\n            userinfo: this.props.Login.userInfo,\n            nfilterTestCategory: this.state.nfilterTestCategory\n          },\n          classUrl: \"testmaster\",\n          methodUrl: \"TestMasterByCategory\"\n        };\n        this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 10\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"stestname\", \"stestsynonym\", \"sdescription\", \"saccredited\", \"stestcategoryname\", \"ncost\", \"stransactionstatus\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //console.log(\"render in test:\", this.props.Login);\n    this.confirmMessage = new ConfirmMessage();\n    const {\n      TestMaster,\n      SelectedTest,\n      searchedData\n    } = this.props.Login.masterData;\n    const {\n      masterData,\n      userInfo,\n      testData,\n      parameterData,\n      otherTestData,\n      linkMaster,\n      editFiles\n    } = this.props.Login;\n    const addId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"CopyTest\") && this.state.controlMap.get(\"CopyTest\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"TestMaster\",\n      selectedObject: \"SelectedTest\",\n      primaryKeyField: \"ntestcode\",\n      fetchUrl: \"testmaster/getTestById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n\n    if (this.props.Login.openModal) {\n      this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation);\n    }\n\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TEST\"\n      }),\n      masterList: searchedData || TestMaster,\n      getMasterDetail: test => this.props.getTestMaster(test, userInfo, masterData),\n      selectedMaster: SelectedTest,\n      primaryKeyField: \"ntestcode\",\n      mainField: \"stestname\",\n      firstField: \"stestcategoryname\",\n      secondField: \"stransactionstatus\",\n      openModal: () => this.props.addTest(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory),\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      needAccordianFilter: false //skip={this.state.skip}\n      //take={this.state.take}\n      //handlePageChange={this.handlePageChange}\n      ,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(TestCategoryFilter, {\n          filterTestCategory: this.state.filterTestCategory || [],\n          nfilterTestCategory: this.state.nfilterTestCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, TestMaster && TestMaster.length > 0 && SelectedTest && Object.values(SelectedTest).length > 0 ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 45\n      }\n    }, SelectedTest.stestname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${SelectedTest.ntransactionstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 57\n      }\n    }, SelectedTest.ntransactionstatus === 1 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 103\n      }\n    }), SelectedTest.stransactionstatus), /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn-normal ${SelectedTest.naccredited === transactionStatus.ACCREDITED ? \"outline-success\" : \"normal-danger\"} btn-sm mr-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 57\n      }\n    }, SelectedTest.saccredited)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.addTest(\"update\", SelectedTest, userInfo, editId, this.state.nfilterTestCategory),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletetestname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      name: \"copytestname\",\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }) // data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.addTest(\"copy\", SelectedTest, userInfo, copyId, this.state.nfilterTestCategory),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTSYNONYM\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 57\n      }\n    }, SelectedTest.stestsynonym))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SHORTNAME\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 57\n      }\n    }, SelectedTest.sshortname))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_PRICE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 61\n      }\n    }, SelectedTest.ncost))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TAT\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 61\n      }\n    }, SelectedTest.ntat, SelectedTest.ntat !== 0 && SelectedTest.ntatperiodcode !== -1 ? \" \".concat(SelectedTest.statperiodname) : \"\"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAININGNEEDED\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 61\n      }\n    }, SelectedTest.strainingneed, \" \"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INTERFACETYPE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 61\n      }\n    }, SelectedTest.sinterfacetypename, \" \"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 61\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTPLATFORM\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 61\n      }\n    }, SelectedTest.stestplatform))), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTPROCEDURE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 57\n      }\n    }, SelectedTest.sdescription)))), /*#__PURE__*/React.createElement(TestView, {\n      isFormulaOpen: this.props.Login.isFormulaOpen,\n      linkMaster: linkMaster,\n      editFiles: editFiles,\n      userInfo: this.props.Login.userInfo,\n      parameterData: parameterData || [],\n      otherTestData: otherTestData || [],\n      formulaData: this.props.Login.formulaData || {},\n      dataState: this.props.Login.dataState,\n      masterData: masterData,\n      inputParam: this.props.Login.inputParam,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      openChildModal: this.props.Login.openChildModal,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      selectedRecord: this.props.Login.selectedRecord,\n      loadEsign: this.props.Login.loadEsign,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      crudMaster: this.props.crudMaster,\n      addParameterSpecification: this.props.addParameterSpecification,\n      getAvailableData: this.props.getAvailableData,\n      addCodedResult: this.props.addCodedResult,\n      addSubCodedResult: this.addSubCodedResult,\n      addFormula: this.props.addFormula,\n      formulaChangeFunction: this.props.formulaChangeFunction,\n      addParameter: this.props.addParameter,\n      addContainerType: this.props.addContainerType,\n      deleteAction: this.deleteAction,\n      getTestDetails: this.props.getTestDetails,\n      updateStore: this.props.updateStore,\n      validateEsignCredential: this.props.validateEsignCredential,\n      addTestFile: this.props.addTestFile,\n      viewAttachment: this.props.viewAttachment,\n      settings: this.props.Login.settings,\n      getActiveTestContainerTypeById: this.props.getActiveTestContainerTypeById,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      onFocus: this.handleFocus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 45\n      }\n    })))) : \"\"))), this.props.Login.openModal && this.props.Login.operation && this.props.Login.inputParam && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal //size={this.props.Login.operation===\"create\" ? \"xl\" : \"lg\" }\n      ,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveTest,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: this.props.Login.needOtherTest ? \"6\" : \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(AddTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange // onActiveStatusChange={this.onActiveStatusChange}\n        ,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        testData: testData,\n        otherTestData: otherTestData,\n        needOtherTest: this.props.Login.needOtherTest,\n        parameterData: parameterData,\n        hideQualisForms: this.props.Login.hideQualisForms,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 37\n        }\n      })), this.props.Login.needOtherTest && /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(AddParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboChange: this.onComboChange,\n        parameterData: parameterData,\n        userInfo: this.props.Login.userInfo,\n        onFocus: this.handleFocus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 41\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord, operation) {\n    if (screenName === \"IDS_TEST\") {\n      let mandatoryFields = [{\n        \"idsName\": \"IDS_TESTCATEGORY\",\n        \"dataField\": \"ntestcategorycode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_TESTNAME\",\n        \"dataField\": \"stestname\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_TESTSYNONYM\",\n        \"dataField\": \"stestsynonym\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n\n      if (operation === \"create\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_SECTION\",\n          \"dataField\": \"nsectioncode\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_PARAMETERNAME\",\n          \"dataField\": \"sparametername\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_PARAMETERSYNONYM\",\n          \"dataField\": \"sparametersynonym\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_PARAMETERTYPE\",\n          \"dataField\": \"nparametertypecode\",\n          \"width\": \"200px\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n\n        if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\n          if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\n            mandatoryFields.push({\n              \"idsName\": \"IDS_ROUNDINGDIGITS\",\n              \"dataField\": \"nroundingdigits\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"idsName\": \"IDS_UNIT\",\n              \"dataField\": \"nunitcode\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            });\n          } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\n            mandatoryFields.push({\n              \"idsName\": \"IDS_CODEDRESULT\",\n              \"dataField\": \"spredefinedname\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"idsName\": \"IDS_ACTUALRESULT\",\n              \"dataField\": \"ngradecode\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"idsName\": \"IDS_CODEDRESULTSYNONYM\",\n              \"dataField\": \"spredefinedsynonym\",\n              \"width\": \"200px\",\n              \"mandatory\": true,\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            });\n          }\n        }\n      }\n\n      mandatoryFields.forEach(item => item.mandatory === true && mandatoryFields.push(item));\n      return mandatoryFields;\n    } else {\n      return [];\n    }\n  }\n\n  handleFocus(e) {\n    e.target.select();\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isComponentUpdated = true;\n    }\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || new Map();\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      isComponentUpdated = true;\n    }\n\n    let nfilterTestCategory = this.state.nfilterTestCategory || {};\n    let filterTestCategory = this.state.filterTestCategory || {};\n\n    if (this.props.Login.masterData.filterTestCategory !== previousProps.Login.masterData.filterTestCategory) {\n      const testCategoryMap = constructOptionList(this.props.Login.masterData.filterTestCategory || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\n      filterTestCategory = testCategoryMap.get(\"OptionList\");\n\n      if (testCategoryMap.get(\"DefaultValue\")) {\n        nfilterTestCategory = testCategoryMap.get(\"DefaultValue\");\n      } else if (filterTestCategory && filterTestCategory.length > 0) {\n        nfilterTestCategory = filterTestCategory[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterTestCategory !== previousProps.Login.masterData.nfilterTestCategory) {\n      nfilterTestCategory = this.props.Login.masterData.nfilterTestCategory;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterTestCategory,\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterTestCategory\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_TESTCATEGORY\",\n        \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined,\n        testData: {},\n        parameterData: {},\n        otherTestData: {},\n        formulaData: {}\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getTestMaster,\n  addTest,\n  updateStore,\n  formulaChangeFunction,\n  filterColumnData,\n  getTestDetails,\n  addParameter,\n  validateEsignCredential,\n  addCodedResult,\n  addParameterSpecification,\n  getAvailableData,\n  addFormula,\n  changeTestCategoryFilter,\n  addTestFile,\n  viewAttachment,\n  getActiveTestContainerTypeById,\n  addContainerType\n})(injectIntl(TestMaster));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/TestMaster.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","rsapi","callService","crudMaster","getTestMaster","addTest","updateStore","getTestDetails","formulaChangeFunction","filterColumnData","addParameter","validateEsignCredential","addCodedResult","addParameterSpecification","getAvailableData","addFormula","changeTestCategoryFilter","addTestFile","viewAttachment","getActiveTestContainerTypeById","addContainerType","TestView","injectIntl","toast","AddParameter","AddTest","SlideOutModal","getControlMap","showEsign","constructOptionList","TestCategoryFilter","ListMaster","faTrashAlt","faPencilAlt","faCopy","faCheck","FontAwesomeIcon","ReadOnlyText","ContentPanel","MediaLabel","DEFAULT_RETURN","Esign","parameterType","transactionStatus","ConfirmMessage","BreadcrumbComponent","Affix","TestMaster","constructor","props","handlePageChange","event","setState","skip","take","ConfirmDelete","item","operation","ncontrolCode","methodUrl","modalName","confirmMessage","confirm","intl","formatMessage","id","deleteAction","onComboChange","comboData","fieldName","caseNo","selectedRecord","state","value","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","NO","parameterData","Login","YES","defaultUnit","defaultGrade","parameterInfo","typeName","data","nfilterTestCategory","searchRef","current","openFilter","showFilter","updateInfo","closeFilter","onFilterSubmit","inputParam","inputData","ntestcategorycode","userinfo","userInfo","classUrl","masterData","filterTestCategory","warn","onEsignInputOnChange","target","type","name","checked","onInputOnChange","optional","deltaperiod","filter","x","ndefaultstatus","label","onNumericInputChange","test","closeModal","loadEsign","openModal","closeFormulaModal","addformula","addSubCodedResult","selected","toLowerCase","screenName","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","ntestcode","fetchUrl","fecthInputObject","userRoleControlRights","nformcode","screenData","validateTestExistenceInTestGroup","post","SelectedTest","then","response","onSaveTest","undefined","catch","error","status","message","DEACTIVE","onSaveValidatedTest","saveType","formRef","customobject","testColumns","push","nisadhocparameter","nisvisible","nstatus","ACTIVE","trim","nmastersitecode","forEach","items","mapkey","Object","keys","columns","values","map","key","defaultkeyname","validatetest","validateEsign","sreason","nreasoncode","spredefinedreason","password","reloadData","SelectedTestCat","controlMap","Map","settings","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","searchedData","testData","otherTestData","linkMaster","editFiles","addId","has","get","ncontrolcode","editId","deleteId","copyId","filterParam","mandatoryFields","findMandatoryFields","breadCrumbData","filterData","length","stestname","ntransactionstatus","stransactionstatus","naccredited","ACCREDITED","saccredited","indexOf","stestsynonym","sshortname","ncost","ntat","ntatperiodcode","concat","statperiodname","strainingneed","sinterfacetypename","stestplatform","sdescription","isFormulaOpen","formulaData","dataState","openChildModal","showSaveContinue","hideQualisForms","handleFocus","needOtherTest","NUMERIC","PREDEFINED","mandatory","e","select","componentDidUpdate","previousProps","isComponentUpdated","nformCode","testCategoryMap","generateBreadCrumData","stestcategoryname","componentWillUnmount","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport rsapi from '../../rsapi';\r\n\r\nimport {\r\n    callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\r\n    addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,\r\n    changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById,addContainerType\r\n} from '../../actions'\r\nimport TestView from './TestView';\r\nimport { injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport AddParameter from './AddParameter'\r\nimport AddTest from '../../pages/testmanagement/AddTest'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\r\nimport TestCategoryFilter from './TestCategoryFilter';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\n\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nclass TestMaster extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 10\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList = [\"stestname\", \"stestsynonym\", \"sdescription\", \"saccredited\", \"stestcategoryname\", \"ncost\", \"stransactionstatus\"]\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        //console.log(\"render in test:\", this.props.Login);\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        const { TestMaster, SelectedTest, searchedData } = this.props.Login.masterData;\r\n        const { masterData, userInfo, testData, parameterData, otherTestData, linkMaster, editFiles } = this.props.Login;\r\n        const addId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"CopyTest\") && this.state.controlMap.get(\"CopyTest\").ncontrolcode;\r\n        const filterParam = {\r\n            inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\",\r\n            fetchUrl: \"testmaster/getTestById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n        if (this.props.Login.openModal) {\r\n            this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n        }\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                {/* Start of get display */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                masterList={searchedData || TestMaster}\r\n                                getMasterDetail={(test) => this.props.getTestMaster(test, userInfo, masterData)}\r\n                                selectedMaster={SelectedTest}\r\n                                primaryKeyField=\"ntestcode\"\r\n                                mainField=\"stestname\"\r\n                                firstField=\"stestcategoryname\"\r\n                                secondField=\"stransactionstatus\"\r\n                                openModal={() => this.props.addTest(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                needAccordianFilter={false}\r\n                                //skip={this.state.skip}\r\n                                //take={this.state.take}\r\n                                //handlePageChange={this.handlePageChange}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TESTFILTER\":\r\n                                            <TestCategoryFilter\r\n                                                filterTestCategory={this.state.filterTestCategory || []}\r\n                                                nfilterTestCategory={this.state.nfilterTestCategory || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            {TestMaster && TestMaster.length > 0 && SelectedTest && Object.values(SelectedTest).length > 0 ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {SelectedTest.stestname}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                {/* <Row>\r\n                                                <Col md={8}> */}\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn btn-outlined ${SelectedTest.ntransactionstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                            {SelectedTest.ntransactionstatus === 1 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                                            {SelectedTest.stransactionstatus}\r\n                                                        </MediaLabel>\r\n                                                        <MediaLabel className={`btn-normal ${SelectedTest.naccredited === transactionStatus.ACCREDITED ? \"outline-success\" : \"normal-danger\"} btn-sm mr-3`}>\r\n                                                            {SelectedTest.saccredited}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    {/* </Col>\r\n                                                <Col md=\"4\"> */}\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <div className=\"d-inline\">\r\n                                                        {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                        {/* Start Here */}\r\n                                                        {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\" >  \r\n                                                            <FontAwesomeIcon icon={faEye} className=\"ActionIconColor\" onClick={(e)=>this.viewAdditionalInfo(e)} />\r\n                                                        </Nav.Link> */}\r\n                                                        {/* End Here */}\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"edittestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            //data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.addTest(\"update\", SelectedTest, userInfo, editId, this.state.nfilterTestCategory)}>\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletetestname\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                         //   data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    handleClickDelete={() => this.deleteAction(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                                /> */}\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" name=\"copytestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                           // data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.addTest(\"copy\", SelectedTest, userInfo, copyId, this.state.nfilterTestCategory)}>\r\n                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                    {/* </Tooltip> */}\r\n                                                </div>\r\n                                                {/* </Col>\r\n                                            </Row> */}\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.stestsynonym}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_SHORTNAME\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.sshortname}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ncost}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TAT\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ntat} \r\n                                                                    {SelectedTest.ntat !== 0  && SelectedTest.ntatperiodcode !== -1 ? \" \".concat(SelectedTest.statperiodname) : \"\" }</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGNEEDED\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.strainingneed} </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.sinterfacetypename} </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"12\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTPLATFORM\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.stestplatform}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"12\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTest.sdescription}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                {/* {this.props.Login.masterData.TestParameter && this.props.Login.masterData.TestParameter.length > 0 && this.props.Login.masterData.TestParameter[0].nparametertypecode === 1 && */}\r\n                                                    {/* <Col md=\"6\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ncost}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col> */}\r\n                                                {/* } */}\r\n                                                {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                {/* Start Here */}\r\n                                                {/* <Col md=\"6\">\r\n                                                <FormGroup>\r\n                                                    <FormLabel>{ this.props.intl.formatMessage({id: \"IDS_ADDITIONALINFO\"}) }</FormLabel>\r\n                                                    <ReadOnlyText>{ selectedTest.schecklistname }</ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col> */}\r\n                                                {/* End Here */}\r\n                                            </Row>\r\n                                            <TestView\r\n                                                isFormulaOpen={this.props.Login.isFormulaOpen}\r\n                                                linkMaster={linkMaster}\r\n                                                editFiles={editFiles}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                parameterData={parameterData || []}\r\n                                                otherTestData={otherTestData || []}\r\n                                                formulaData={this.props.Login.formulaData || {}}\r\n                                                dataState={this.props.Login.dataState}\r\n                                                masterData={masterData}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                showSaveContinue={this.props.Login.showSaveContinue}\r\n                                                operation={this.props.Login.operation}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                addParameterSpecification={this.props.addParameterSpecification}\r\n                                                getAvailableData={this.props.getAvailableData}\r\n                                                addCodedResult={this.props.addCodedResult}\r\n                                                addSubCodedResult={this.addSubCodedResult}\r\n                                                addFormula={this.props.addFormula}\r\n                                                formulaChangeFunction={this.props.formulaChangeFunction}\r\n                                                addParameter={this.props.addParameter}\r\n                                                addContainerType={this.props.addContainerType}\r\n                                                deleteAction={this.deleteAction}\r\n                                                getTestDetails={this.props.getTestDetails}\r\n                                                updateStore={this.props.updateStore}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                addTestFile={this.props.addTestFile}\r\n                                                viewAttachment={this.props.viewAttachment}\r\n                                                settings = {this.props.Login.settings}\r\n                                                getActiveTestContainerTypeById={this.props.getActiveTestContainerTypeById}\r\n                                                hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                onFocus={this.handleFocus}\r\n                                            ></TestView>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* End of get display */}\r\n\r\n                {/* Start of Modal Sideout for Test Creation */}\r\n                {this.props.Login.openModal && this.props.Login.operation && this.props.Login.inputParam &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        //size={this.props.Login.operation===\"create\" ? \"xl\" : \"lg\" }\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveTest}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryFields || []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <Row>\r\n                                {/* <Col md={this.props.Login.needOtherTest ? \"8\" : \"12\"}> */}\r\n                                <Col md={this.props.Login.needOtherTest ? \"6\" : \"12\"}>\r\n                                    <AddTest\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        // onActiveStatusChange={this.onActiveStatusChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        testData={testData}\r\n                                        otherTestData={otherTestData}\r\n                                        needOtherTest={this.props.Login.needOtherTest}\r\n                                        parameterData={parameterData}\r\n                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                    ></AddTest>\r\n                                </Col>\r\n                                {this.props.Login.needOtherTest &&\r\n                                    <Col md={6}>\r\n                                        <AddParameter\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            parameterData={parameterData}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            onFocus={this.handleFocus}\r\n                                        ></AddParameter>\r\n                                    </Col>\r\n                                }\r\n                            </Row>\r\n                        }\r\n                    />\r\n                }\r\n                {/* End of Modal Sideout for Test Creation */}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    ConfirmDelete = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteAction(item, operation, ncontrolCode, methodUrl, modalName));\r\n    }\r\n\r\n    findMandatoryFields(screenName, selectedRecord, operation) {\r\n        if (screenName === \"IDS_TEST\") {\r\n            let mandatoryFields = [\r\n                { \"idsName\": \"IDS_TESTCATEGORY\", \"dataField\": \"ntestcategorycode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                \r\n            ]\r\n            if (operation === \"create\") {\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_SECTION\", \"dataField\": \"nsectioncode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERNAME\", \"dataField\": \"sparametername\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERSYNONYM\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"idsName\": \"IDS_PARAMETERTYPE\", \"dataField\": \"nparametertypecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n                );\r\n                if (selectedRecord && Object.values(selectedRecord).length > 0 && selectedRecord[\"nparametertypecode\"]) {\r\n                    if (selectedRecord[\"nparametertypecode\"].value === parameterType.NUMERIC) {\r\n                        mandatoryFields.push(\r\n                            { \"idsName\": \"IDS_ROUNDINGDIGITS\", \"dataField\": \"nroundingdigits\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                            { \"idsName\": \"IDS_UNIT\", \"dataField\": \"nunitcode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                        );\r\n                    } else if (selectedRecord[\"nparametertypecode\"].value === parameterType.PREDEFINED) {\r\n                        mandatoryFields.push(\r\n                            { \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"spredefinedname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                            { \"idsName\": \"IDS_ACTUALRESULT\", \"dataField\": \"ngradecode\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                            { \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n\r\n                        );\r\n                    }\r\n                }\r\n\r\n            }\r\n            mandatoryFields.forEach(item => item.mandatory === true && mandatoryFields.push(item));\r\n            return mandatoryFields;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"sparametername\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    selectedRecord[\"sparametersynonym\"] = comboData ? comboData.value : \"\";\r\n                } else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                let item = comboData['item'];\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = transactionStatus.NO;\r\n                const parameterData = this.props.Login.parameterData;\r\n                if (item[\"nunitrequired\"] === transactionStatus.YES) {\r\n                    needUnit = false;\r\n                    selectedRecord[\"nunitcode\"] = this.props.Login.parameterData.defaultUnit;\r\n                } else {\r\n                    selectedRecord[\"nunitcode\"] = \"\";\r\n                }\r\n                if (item[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                    needRoundingDigit = false;\r\n                } else {\r\n                   selectedRecord[\"nroundingdigit\"] = \"\";\r\n                    selectedRecord[\"nroundingdigits\"] = \"\";\r\n                    selectedRecord[\"ndeltacheck\"] = 4;\r\n                    selectedRecord[\"ndeltacheckframe\"] = \"\";\r\n                    selectedRecord[\"ndeltaunitcode\"] = \"\";\r\n                    selectedRecord[\"ndeltachecklimitcode\"] = \"\";\r\n                }\r\n                if (item[\"npredefinedrequired\"] === transactionStatus.YES) {\r\n                    needCodedResult = false;\r\n                    npredefinedcode = item[\"npredefinedrequired\"];\r\n                } else {\r\n                    selectedRecord[\"spredefinedname\"] = \"\";\r\n                }\r\n                if (item[\"ngraderequired\"] === transactionStatus.YES) {\r\n                    needActualResult = false;\r\n                    selectedRecord[\"ngradecode\"] = this.props.Login.parameterData.defaultGrade;\r\n                } else {\r\n                    selectedRecord[\"ngradecode\"] = \"\";\r\n                }\r\n\r\n\r\n                selectedRecord[fieldName] = comboData;\r\n                const parameterInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        parameterData: {\r\n                            ...parameterData, needUnit, needRoundingDigit, needCodedResult, needActualResult, npredefinedcode\r\n                        }, selectedRecord\r\n                    }\r\n                }\r\n                this.props.updateStore(parameterInfo);\r\n\r\n                break;\r\n\r\n            case 3:\r\n                let nfilterTestCategory = this.state.nfilterTestCategory || {}\r\n                nfilterTestCategory = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.setState({ nfilterTestCategory })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterTestCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    ntestcategorycode: this.state.nfilterTestCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTestCategory: this.state.nfilterTestCategory\r\n                },\r\n                classUrl: \"testmaster\",\r\n                methodUrl: \"TestMasterByCategory\"\r\n            }\r\n            this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    // onActiveStatusChange =(event, optional)=>{\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n    //     this.setState({ selectedRecord });\r\n    //     if (event.target.checked === false){\r\n    //        this.validateTestExistenceInTestGroup();\r\n    //     }\r\n    // }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                    if (selectedRecord['ndeltacheck']===transactionStatus.YES) {\r\n                        selectedRecord['ndeltaunitcode'] = this.props.Login.parameterData && this.props.Login.parameterData.deltaperiod.filter(x =>\r\n                            x.item.ndefaultstatus === transactionStatus.YES)[0];\r\n                    }\r\n                    else {\r\n                        delete selectedRecord['ndeltaunitcode'];\r\n                    }\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = selectedRecord[\"stestsynonym\"] =\r\n                    selectedRecord[\"sparametersynonym\"] = event.target.value;\r\n                selectedRecord[\"sparametername\"] = { label: event.target.value, value: event.target.value };\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[event.target.name] = selectedRecord[\"sparametersynonym\"] = event.target.value;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n        case 6:\r\n          //selectedRecord[event.target.name] = selectedRecord[\"sresultparacomment\"] = event.target.value;\r\n          selectedRecord[event.target.name] = selectedRecord[\"spredefinedsynonym\"] = event.target.value;\r\n\r\n           this.setState({ selectedRecord });\r\n                    break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // onNumericInputChange = (value, name) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     selectedRecord[name] = value;\r\n    //     this.setState({ selectedRecord });\r\n    // }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n       // console.log(\"value:\", value, name);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (name === \"nroundingdigits\") {\r\n            \r\n            if (/^-?\\d*?$/.test(value.target.value) || value.target.value === \"\") {\r\n              //  console.log(\"val:\", value.target.value);\r\n                selectedRecord[name] = value.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[name] = value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = transactionStatus.NO;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFormulaModal = () => {\r\n        this.setState({ addformula: false });\r\n    }\r\n\r\n    addSubCodedResult = () => {\r\n    }\r\n\r\n    deleteAction = (item, operation, ncontrolCode, methodUrl, modalName) => {\r\n        const selected = item[\"dataItem\"] ? item[\"dataItem\"] : item;\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"testmaster\",\r\n            operation: operation,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_TEST\",\r\n            postParam: {\r\n                inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\",\r\n                primaryKeyValue: selected.ntestcode,\r\n                fetchUrl: \"testmaster/getTestById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    [modalName]: true, screenName: \"IDS_TEST\", operation: operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, modalName, {});\r\n        }\r\n    }\r\n\r\n    validateTestExistenceInTestGroup = () => {\r\n\r\n        const operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\r\n                ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\r\n                \"userinfo\": this.props.Login.userInfo\r\n            })\r\n                .then(response => {\r\n                    if (response.data === true) {\r\n                        this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_TESTEXISTSINTESTGROUP\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.onSaveTest(null, null),\r\n                            false,\r\n                            undefined);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    onSaveTest = () => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n\r\n        if (operation === \"update\") {\r\n            if (selectedRecord[\"ntransactionstatus\"] === transactionStatus.DEACTIVE) {\r\n                return rsapi.post(\"testmaster/validateTestExistenceInTestGroup\", {\r\n                    ntestcode: this.props.Login.masterData.SelectedTest[\"ntestcode\"],\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                })\r\n                    .then(response => {\r\n                        if (response.data === true) {\r\n                            this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_TESTEXISTSINTESTGROUP\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                () => this.onSaveValidatedTest(null, null),\r\n                                false,\r\n                                undefined);\r\n                        }\r\n                        else {\r\n                            this.onSaveValidatedTest(null, null);\r\n                        }\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                this.onSaveValidatedTest(null, null);\r\n            }\r\n        }\r\n        else {\r\n            this.onSaveValidatedTest(null, null);\r\n        }\r\n    }\r\n\r\n    // onSaveTest1 = (saveType, formRef) => {\r\n    //     const operation = this.props.Login.operation;\r\n    //     let inputData = {};\r\n    //     let customobject = null;\r\n    //     const userInfo = this.props.Login.userInfo;\r\n    //     const selectedRecord = this.state.selectedRecord;\r\n    //     let testColumns = [{\r\n    //         \"testmaster\": [{ \"ntestcode\": \"int\" }, { \"ntestcategorycode\": \"input\" }, { \"nchecklistversioncode\": \"input\" }, { \"naccredited\": \"int\" },\r\n    //         { \"ntransactionstatus\": \"int\" }, { \"stestname\": \"string\" }, { \"stestsynonym\": \"string\" }, { \"sdescription\": \"string\" }, { \"ncost\": \"float\" }]\r\n    //     }]\r\n    //     if (operation === \"create\") {\r\n    //         testColumns.push({\r\n    //             \"testparameter\": [{ \"ntestcode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"sparametername\": \"input\" },\r\n    //             { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" }]\r\n    //         });\r\n    //         inputData = {\r\n    //             \"testmaster\": {},\r\n    //             \"testparameter\": {\r\n    //                 nisadhocparameter: transactionStatus.NO,\r\n    //                 nisvisible: transactionStatus.YES,\r\n    //                 nstatus: transactionStatus.ACTIVE\r\n    //             },\r\n    //             \"testsection\": {},\r\n    //             \"testmethod\": {},\r\n    //             \"testinstrumentcategory\": {}\r\n    //         };\r\n    //         if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\r\n    //             customobject = {};\r\n    //             customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n    //             customobject[\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //             customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n    //         }\r\n    //     } else {\r\n    //         inputData = {\r\n    //             \"testmaster\": {}\r\n    //         };\r\n    //     }\r\n    //     inputData[\"userinfo\"] = userInfo;\r\n    //     inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //     inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode;\r\n    //     testColumns.forEach(function (items) {\r\n    //         const mapkey = Object.keys(items)[0];\r\n    //         const columns = Object.values(items)[0];\r\n    //         columns.map(item => {\r\n    //             const key = Object.keys(item)[0];\r\n    //             const value = Object.values(item)[0];\r\n    //             if (value === \"input\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n    //             } else if (value === \"int\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n    //             } else if (value === \"string\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n    //             } else if (value === \"float\") {\r\n    //                 return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n    //             } else if (value === \"customobject\") {\r\n    //                 return inputData[mapkey][key] = customobject;\r\n    //             } else {\r\n    //                 return null;\r\n    //             }\r\n    //         });\r\n    //     });\r\n    //     let postParam = undefined;\r\n    //     if (operation === \"create\") {\r\n    //         if (selectedRecord[\"nsectioncode\"]) {\r\n    //             inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\r\n    //             inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n    //         if (selectedRecord[\"nmethodcode\"]) {\r\n    //             inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\r\n    //             inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n\r\n    //         if (selectedRecord[\"ninstrumentcatcode\"]) {\r\n    //             inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\r\n    //             inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n    //             inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n    //         }\r\n    //     } else if (operation === \"copy\") {\r\n    //         inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"]\r\n    //     } else if (operation === \"update\") {\r\n    //         postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n    //     }       \r\n\r\n    //    // this.setState({ nfilterTestCategory: { \"label\": selectedRecord.ntestcategorycode.label, \"value\": selectedRecord.ntestcategorycode.value } });\r\n    //     if (operation !== \"update\") {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: { defaultkeyname: \"parametereventkey\" }\r\n    //         };\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     let valid = true;\r\n    //     // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){\r\n\r\n\r\n    //     if (valid){\r\n    //         const inputParam = {\r\n    //             inputData :{...inputData, validatetest:false},\r\n    //             classUrl: \"testmaster\",\r\n    //             operation: operation,\r\n    //             methodUrl: \"TestMaster\",\r\n    //             saveType, \r\n    //             formRef, postParam, searchRef: this.searchRef\r\n    //         }\r\n    //         const masterData = this.props.Login.masterData;\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData }, saveType, formRef\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         } else {\r\n    //             this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    onSaveValidatedTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        let inputData = {};\r\n        let customobject = null;\r\n        const userInfo = this.props.Login.userInfo;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let testColumns = [{\r\n            \"testmaster\": [{ \"ntestcode\": \"int\" }, { \"ntestcategorycode\": \"input\" }, { \"nchecklistversioncode\": \"input\" }, { \"naccredited\": \"int\" },{ \"ntrainingneed\": \"int\" },\r\n            { \"ntransactionstatus\": \"int\" }, { \"stestname\": \"string\" }, { \"stestsynonym\": \"string\" }, { \"sshortname\": \"string\" },{ \"sdescription\": \"string\" }, { \"ncost\": \"float\" },\r\n            { \"stestplatform\": \"string\" },{ \"ntat\": \"int\" },{ \"ntatperiodcode\": \"input\" },{ \"ninterfacetypecode\": \"input\" }]\r\n        }]\r\n        if (operation === \"create\") {\r\n            testColumns.push({\r\n                \"testparameter\": [{ \"ntestcode\": \"int\" }, { \"nparametertypecode\": \"input\" }, { \"nunitcode\": \"input\" }, { \"sparametername\": \"input\" },\r\n                { \"sparametersynonym\": \"string\" }, { \"nroundingdigits\": \"int\" }, { \"objPredefinedParameter\": \"customobject\" },{ \"ndeltachecklimitcode\": \"float\" },{ \"ndeltacheck\": \"int\" },{ \"ndeltaunitcode\": \"input\" },{ \"ndeltacheckframe\": \"int\" }]\r\n            });\r\n            inputData = {\r\n                \"testmaster\": {},\r\n                \"testparameter\": {\r\n                    nisadhocparameter: transactionStatus.NO,\r\n                    nisvisible: transactionStatus.YES,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                },\r\n                \"testsection\": {},\r\n                \"testmethod\": {},\r\n                \"testinstrumentcategory\": {},\r\n                \"testpackagetest\":{}\r\n            };\r\n            if (this.props.Login.parameterData.npredefinedcode === transactionStatus.YES) {\r\n                customobject = {};\r\n                customobject[\"spredefinedname\"] = selectedRecord[\"spredefinedname\"].trim();\r\n                customobject[\"nstatus\"] = transactionStatus.ACTIVE;\r\n                customobject[\"ndefaultstatus\"] = transactionStatus.YES;\r\n                customobject[\"ngradecode\"] = selectedRecord[\"ngradecode\"] ? selectedRecord[\"ngradecode\"].value ? selectedRecord[\"ngradecode\"].value : -1 : -1;\r\n            //     if (selectedRecord[\"sresultparacomment\"]) {\r\n            //     customobject[\"sresultparacomment\"] = selectedRecord[\"sresultparacomment\"].trim();}\r\n            // }\r\n            if (selectedRecord[\"spredefinedsynonym\"]) {\r\n                customobject[\"spredefinedsynonym\"] = selectedRecord[\"spredefinedsynonym\"].trim();}\r\n            }\r\n        } else {\r\n            inputData = {\r\n                \"testmaster\": {}\r\n            };\r\n        }\r\n        inputData[\"userinfo\"] = userInfo;\r\n        inputData[\"testmaster\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n        inputData[\"testmaster\"][\"nsitecode\"] = userInfo.nmastersitecode;\r\n        testColumns.forEach(function (items) {\r\n            const mapkey = Object.keys(items)[0];\r\n            const columns = Object.values(items)[0];\r\n            columns.map(item => {\r\n                const key = Object.keys(item)[0];\r\n                const value = Object.values(item)[0];\r\n                if (value === \"input\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].value ? selectedRecord[key].value : -1 : -1;\r\n                } else if (value === \"int\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"string\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key].trim() : \"\";\r\n                } else if (value === \"float\") {\r\n                    return inputData[mapkey][key] = selectedRecord[key] ? selectedRecord[key] : 0;\r\n                } else if (value === \"customobject\") {\r\n                    return inputData[mapkey][key] = customobject;\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n        });\r\n        let postParam = undefined;\r\n        if (operation === \"create\") {\r\n            if (selectedRecord[\"nsectioncode\"]) {\r\n                inputData[\"testsection\"][\"nsectioncode\"] = selectedRecord[\"nsectioncode\"].value;\r\n                inputData[\"testsection\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testsection\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n            if (selectedRecord[\"nmethodcode\"]) {\r\n                inputData[\"testmethod\"][\"nmethodcode\"] = selectedRecord[\"nmethodcode\"].value;\r\n                inputData[\"testmethod\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testmethod\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n\r\n            if (selectedRecord[\"ninstrumentcatcode\"]) {\r\n                inputData[\"testinstrumentcategory\"][\"ninstrumentcatcode\"] = selectedRecord[\"ninstrumentcatcode\"].value;\r\n                inputData[\"testinstrumentcategory\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testinstrumentcategory\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n\r\n\r\n            if (selectedRecord[\"ntestpackagecode\"]) {\r\n                inputData[\"testpackagetest\"][\"ntestpackagecode\"] = selectedRecord[\"ntestpackagecode\"].value;\r\n                inputData[\"testpackagetest\"][\"ndefaultstatus\"] = transactionStatus.YES;\r\n                inputData[\"testpackagetest\"][\"nstatus\"] = transactionStatus.ACTIVE;\r\n            }\r\n        } else if (operation === \"copy\") {\r\n            inputData[\"testmaster\"][\"ntestcode\"] = this.props.Login.masterData.SelectedTest[\"ntestcode\"]\r\n        } else if (operation === \"update\") {\r\n            postParam = { inputListName: \"TestMaster\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestcode\" };\r\n        }\r\n\r\n        this.setState({ nfilterTestCategory: { \"label\": selectedRecord.ntestcategorycode.label, \"value\": selectedRecord.ntestcategorycode.value } });\r\n        if (operation !== \"update\") {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { defaultkeyname: \"parametereventkey\" }\r\n            };\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        //  let valid = true;\r\n        // if (operation === \"update\" && (validateTest === undefined || validateTest === true)){       \r\n        // if (valid){\r\n        const inputParam = {\r\n            inputData: { ...inputData, validatetest: false },\r\n            classUrl: \"testmaster\",\r\n            operation: operation,\r\n            methodUrl: \"TestMaster\",\r\n            saveType,\r\n            formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType, formRef\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n        }\r\n        // }\r\n    }\r\n\r\n   handleFocus(e){\r\n        e.target.select();\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n        // this.searchRef.current.value = \"\";\r\n        // const inputParam = {\r\n        //     inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        //     classUrl: \"testmaster\",\r\n        //     methodUrl: \"TestMaster\",\r\n        //     userInfo: this.props.Login.userInfo,\r\n        //     displayName: \"IDS_TESTMASTER\"\r\n        // };\r\n        // this.props.callService(inputParam);\r\n        this.searchRef.current.value = \"\";\r\n        if (this.state.nfilterTestCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                //    ntestcategorycode: this.state.nfilterTestCategory.value,\r\n                   ntestcategorycode:this.props.Login.masterData.SelectedTestCat&&this.props.Login.masterData.SelectedTestCat.ntestcategorycode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTestCategory: this.state.nfilterTestCategory\r\n                },\r\n                classUrl: \"testmaster\",\r\n                methodUrl: \"TestMasterByCategory\"\r\n            }\r\n            this.props.changeTestCategoryFilter(inputParam, this.props.Login.masterData.filterTestCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTCATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isComponentUpdated = true;\r\n        }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || new Map();\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            isComponentUpdated = true;\r\n        }\r\n        let nfilterTestCategory = this.state.nfilterTestCategory || {};\r\n        let filterTestCategory = this.state.filterTestCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterTestCategory !== previousProps.Login.masterData.filterTestCategory) {\r\n            const testCategoryMap = constructOptionList(this.props.Login.masterData.filterTestCategory || [], \"ntestcategorycode\",\r\n                \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\r\n            filterTestCategory = testCategoryMap.get(\"OptionList\");\r\n            if (testCategoryMap.get(\"DefaultValue\")) {\r\n                nfilterTestCategory = testCategoryMap.get(\"DefaultValue\");\r\n            } else if (filterTestCategory && filterTestCategory.length > 0) {\r\n                nfilterTestCategory = filterTestCategory[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterTestCategory !== previousProps.Login.masterData.nfilterTestCategory) {\r\n            nfilterTestCategory = this.props.Login.masterData.nfilterTestCategory;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterTestCategory, userRoleControlRights, controlMap, selectedRecord, filterTestCategory });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_TESTCATEGORY\",\r\n                    \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined,\r\n                testData: {}, parameterData: {}, otherTestData: {}, formulaData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getTestMaster, addTest, updateStore, formulaChangeFunction,\r\n    filterColumnData, getTestDetails, addParameter, validateEsignCredential, addCodedResult, addParameterSpecification,\r\n    getAvailableData, addFormula, changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById,addContainerType\r\n})(injectIntl(TestMaster));"]},"metadata":{},"sourceType":"module"}