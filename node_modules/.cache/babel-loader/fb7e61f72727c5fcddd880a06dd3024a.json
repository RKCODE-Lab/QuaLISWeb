{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\FTPConfig.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { callService, crudMaster, openFTPConfigModal, fetchFTPConfigByID, updateStore, validateEsignCredential } from '../../actions';\nimport { toast } from 'react-toastify';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass FTPConfig extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        classUrl: this.props.Login.inputParam.classUrl,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          optionsChecklistComponent: [],\n          optionsQBCategory: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nftpno;\n        dataState = this.state.dataState;\n        inputData[\"ftpconfig\"] = {\n          \"nftpno\": this.state.selectedRecord.nftpno,\n          \"susername\": this.state.selectedRecord.susername,\n          \"spassword\": this.state.selectedRecord.spassword,\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\n          //this.state.selectedRecord.nsitecode,\n          \"shost\": this.state.selectedRecord.shost,\n          \"nportno\": this.state.selectedRecord.nportno,\n          \"nsslrequired\": this.state.selectedRecord.nsslrequired,\n          \"nchecksumrequired\": this.state.selectedRecord.nchecksumrequired,\n          \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\n          \"sphysicalpath\": this.state.selectedRecord.sphysicalpath\n        };\n      } else {\n        //add               \n        inputData[\"ftpconfig\"] = {\n          \"susername\": this.state.selectedRecord.susername,\n          \"spassword\": this.state.selectedRecord.spassword,\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\n          //this.state.selectedRecord.nsitecode,\n          \"shost\": this.state.selectedRecord.shost,\n          \"nportno\": this.state.selectedRecord.nportno,\n          \"nsslrequired\": this.state.selectedRecord.nsslrequired,\n          \"nchecksumrequired\": this.state.selectedRecord.nchecksumrequired,\n          \"ndefaultstatus\": this.state.selectedRecord.ndefaultstatus,\n          \"sphysicalpath\": this.state.selectedRecord.sphysicalpath\n        };\n      } //   inputData[\"ftpconfig\"][\"sphysicalpath\"] =this.state.selectedRecord.sphysicalpath+\"\\\\\";\n\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : \"\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        formRef,\n        saveType,\n        dataState,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : \"\",\n        inputData: {\n          \"ftpconfig\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            optionsQBCategory: this.props.Login.optionsQBCategory,\n            optionsChecklistComponent: this.props.Login.optionsChecklistComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        selectedRecord['siteValue'] = comboData;\n        selectedRecord[fieldName] = comboData.value;\n      } else {\n        selectedRecord['siteValue'] = [];\n        selectedRecord[fieldName] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, //{\"idsName\":\"IDS_SITE\",\"dataField\":\"ssitename\",\"width\":\"15%\"},\n    {\n      \"idsName\": \"IDS_HOST\",\n      \"dataField\": \"shost\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PORTNO\",\n      \"dataField\": \"nportno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DEFAULTSTATUS\",\n      \"dataField\": \"sdefaultstatus\",\n      \"width\": \"200px\"\n    }];\n    primaryKeyField = \"nftpno\";\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddFTPConfig\") && this.state.controlMap.get('AddFTPConfig').ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditFTPConfig\") && this.state.controlMap.get('EditFTPConfig').ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      operation: \"update\",\n      primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID,\n      inputparam: this.props.Login.inputparam\n    };\n    const deleteParam = {\n      screenName: this.props.Login.inputParam ? this.props.Login.inputParam.displayName : '',\n      methodUrl: \"UserMultiRole\",\n      operation: \"delete\"\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PASSWORD\",\n      \"dataField\": \"spassword\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_HOST\",\n      \"dataField\": \"shost\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PORTNO\",\n      \"dataField\": \"nportno\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchFTPConfigByID,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: true\n      },\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.openFTPConfigModal(this.props.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 29\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: \"IDS_FTPCONFIG\",\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 21\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_USERNAME\"\n        }),\n        name: \"susername\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_USERNAME\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"susername\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PASSWORD\"\n        }),\n        name: \"spassword\",\n        type: \"password\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_PASSWORD\"\n        }),\n        isMandatory: true,\n        required: true,\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"spassword\"] : \"\",\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_HOST\"\n        }),\n        name: \"shost\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_HOST\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"shost\"] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormNumericInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PORTNO\"\n        }),\n        name: \"nportno\",\n        type: \"number\",\n        onChange: event => this.onNumericInputOnChange(event, \"nportno\"),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_PORTNO\"\n        }),\n        isMandatory: true,\n        required: true,\n        noStyle: true,\n        strict: true,\n        className: \"form-control\" // max={10000000}\n        ,\n        errors: \"Please provide a valid number.\" // min={0}\n        ,\n        maxLength: 10 //maxLength={100}\n        ,\n        value: this.state.selectedRecord[\"nportno\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_PHYSICALPATH\"\n        }),\n        name: \"sphysicalpath\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_PHYSICALPATH\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sphysicalpath\"] : \"\",\n        isMandatory: true,\n        required: false,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        name: \"ndefaultstatus\",\n        type: \"switch\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTSTATUS\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTSTATUS\"\n        }),\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true : false : false,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        name: \"nsslrequired\",\n        type: \"switch\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SSL\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SSL\"\n        }),\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.state.selectedRecord ? this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true : false : false,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 6,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        name: \"nchecksumrequired\",\n        type: \"switch\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_CHECKSUM\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_CHECKSUM\"\n        }),\n        defaultValue: this.state.selectedRecord ? this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true : false : false,\n        isMandatory: false,\n        required: false,\n        checked: this.state.selectedRecord ? this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true : false : false,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 29\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  openFTPConfigModal,\n  fetchFTPConfigByID,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(FTPConfig));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/configurationmaster/FTPConfig.jsx"],"names":["React","connect","injectIntl","DataGrid","SlideOutModal","CustomSwitch","FormInput","callService","crudMaster","openFTPConfigModal","fetchFTPConfigByID","updateStore","validateEsignCredential","toast","Row","Col","process","ListWrapper","showEsign","getControlMap","DEFAULT_RETURN","Esign","transactionStatus","FormNumericInput","mapStateToProps","state","Login","FTPConfig","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","reloadData","inputParam","inputData","userinfo","userInfo","methodUrl","displayName","classUrl","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","optionsChecklistComponent","optionsQBCategory","onSaveClick","saveType","formRef","undefined","selectedId","nftpno","susername","spassword","nmastersitecode","shost","nportno","nsslrequired","nchecksumrequired","ndefaultstatus","sphysicalpath","masterData","userRoleControlRights","nformcode","ncontrolcode","screenData","deleteRecord","deleteParam","ncontrolCode","screenName","validateEsign","sreason","password","onNumericInputOnChange","value","name","onInputOnChange","target","type","checked","YES","NO","onComboChange","comboData","fieldName","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editID","editParam","inputparam","mandatoryFields","buttonCount","pageSizes","intl","formatMessage","id","componentDidUpdate","previousProps","Object","values","map","item","push","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { callService, crudMaster,openFTPConfigModal,fetchFTPConfigByID ,updateStore,validateEsignCredential} from '../../actions';\r\nimport { toast } from 'react-toastify';\r\nimport { Row, Col} from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport {showEsign, getControlMap} from '../../components/CommonScript';\r\nimport {DEFAULT_RETURN} from '../../actions/LoginTypes'\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass FTPConfig extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights:[],\r\n            controlMap:new Map()\r\n        }\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    reloadData = () =>{\r\n        const inputParam = {\r\n            inputData : {userinfo: this.props.Login.userInfo},\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:'',\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            userInfo: this.props.Login.userInfo\r\n            };\r\n                            \r\n        this.props.callService(inputParam);\r\n    }\r\n    \r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign){          \r\n            if (this.props.Login.operation === \"delete\"){\r\n                loadEsign = false;\r\n                openModal =  false;\r\n                selectedRecord = {};\r\n            }\r\n            else{\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else{\r\n            openModal =  false;\r\n            selectedRecord ={};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openModal, loadEsign, selectedRecord,optionsChecklistComponent:[],optionsQBCategory:[]}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState=undefined;\r\n        let selectedId=null;\r\n        if ( this.props.Login.operation === \"update\"){\r\n            // edit\r\n            selectedId=this.state.selectedRecord.nftpno\r\n            dataState=this.state.dataState\r\n            inputData[\"ftpconfig\"] = {\r\n                \"nftpno\":this.state.selectedRecord.nftpno,\r\n                \"susername\":this.state.selectedRecord.susername,\r\n                \"spassword\":this.state.selectedRecord.spassword,\r\n                \"nsitecode\":this.props.Login.userInfo.nmastersitecode,//this.state.selectedRecord.nsitecode,\r\n                \"shost\":this.state.selectedRecord.shost,\r\n                \"nportno\":this.state.selectedRecord.nportno,\r\n                \"nsslrequired\":this.state.selectedRecord.nsslrequired,\r\n                \"nchecksumrequired\":this.state.selectedRecord.nchecksumrequired,\r\n                \"ndefaultstatus\":this.state.selectedRecord.ndefaultstatus,\r\n                \"sphysicalpath\":this.state.selectedRecord.sphysicalpath,\r\n            }   \r\n        }\r\n        else{\r\n            //add               \r\n            inputData[\"ftpconfig\"] =\r\n                {\r\n                    \"susername\":this.state.selectedRecord.susername,\r\n                    \"spassword\":this.state.selectedRecord.spassword,\r\n                    \"nsitecode\":this.props.Login.userInfo.nmastersitecode,//this.state.selectedRecord.nsitecode,\r\n                    \"shost\":this.state.selectedRecord.shost,\r\n                    \"nportno\":this.state.selectedRecord.nportno,\r\n                    \"nsslrequired\":this.state.selectedRecord.nsslrequired,\r\n                    \"nchecksumrequired\":this.state.selectedRecord.nchecksumrequired,\r\n                    \"ndefaultstatus\":this.state.selectedRecord.ndefaultstatus,\r\n                    \"sphysicalpath\":this.state.selectedRecord.sphysicalpath,\r\n            };         \r\n        }  \r\n\r\n     //   inputData[\"ftpconfig\"][\"sphysicalpath\"] =this.state.selectedRecord.sphysicalpath+\"\\\\\";\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl:this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:\"\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation ,\r\n            formRef,saveType,dataState,selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;  \r\n      \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData}, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n       }\r\n    }\r\n    \r\n    deleteRecord = (deleteParam) =>{\r\n        \r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName:this.props.Login.inputParam.displayName?this.props.Login.inputParam.displayName:\"\",\r\n            inputData: {\"ftpconfig\" :deleteParam.selectedRecord,\"userinfo\": this.props.Login.userInfo},\r\n            operation:deleteParam.operation,\r\n            dataState:this.state.dataState    \r\n            }       \r\n            const masterData = this.props.Login.masterData;\r\n            if (\r\n                showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,deleteParam.ncontrolCode)){\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign:true, \r\n                            screenData:{inputParam, masterData},\r\n                            operation:deleteParam.operation,\r\n                            openModal:true,\r\n                            screenName:this.props.Login.inputParam.displayName,\r\n                            optionsQBCategory:this.props.Login.optionsQBCategory,\r\n                            optionsChecklistComponent:this.props.Login.optionsChecklistComponent\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else{\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n    }\r\n    static getDerivedStateFromProps(props, state){\r\n        \r\n        if (props.Login.masterStatus !== \"\"  && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";           \r\n        } \r\n         \r\n        if (props.Login.error !== state.error){\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }   \r\n        return null;\r\n     }\r\n     validateEsign = () =>{\r\n        const inputParam = {\r\n                                inputData: {\"userinfo\": {...this.props.Login.userInfo, \r\n                                                        sreason: this.state.selectedRecord[\"esigncomments\"] },\r\n                                             password : this.state.selectedRecord[\"esignpassword\"]\r\n                                            },\r\n                                screenData : this.props.Login.screenData\r\n                            }        \r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    render(){\r\n        let primaryKeyField = \"\";\r\n        this.extractedColumnList=[\r\n            {\"idsName\":\"IDS_USERNAME\",\"dataField\":\"susername\",\"width\":\"200px\"},\r\n            //{\"idsName\":\"IDS_SITE\",\"dataField\":\"ssitename\",\"width\":\"15%\"},\r\n            {\"idsName\":\"IDS_HOST\",\"dataField\":\"shost\",\"width\":\"200px\"},\r\n            {\"idsName\":\"IDS_PORTNO\",\"dataField\":\"nportno\",\"width\":\"200px\"},\r\n            {\"idsName\":\"IDS_DEFAULTSTATUS\",\"dataField\":\"sdefaultstatus\",\"width\":\"200px\"}\r\n        ];\r\n        primaryKeyField = \"nftpno\";\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddFTPConfig\")\r\n                        && this.state.controlMap.get('AddFTPConfig').ncontrolcode;\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"EditFTPConfig\")\r\n                        && this.state.controlMap.get('EditFTPConfig').ncontrolcode;\r\n        const editParam={\r\n                        screenName:this.props.Login.inputParam?this.props.Login.inputParam.displayName:'', \r\n                        operation:\"update\", \r\n                        primaryKeyField,\r\n                        masterData:this.props.Login.masterData,\r\n                        userInfo:this.props.Login.userInfo,\r\n                        ncontrolCode:editID,\r\n                        inputparam:this.props.Login.inputparam,\r\n                    };\r\n        const deleteParam ={\r\n                            screenName:this.props.Login.inputParam?this.props.Login.inputParam.displayName:'',\r\n                            methodUrl:\"UserMultiRole\", \r\n                            operation:\"delete\"\r\n                        };\r\n        const mandatoryFields=[\r\n                                {\"idsName\":\"IDS_USERNAME\",\"dataField\":\"susername\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                {\"idsName\":\"IDS_PASSWORD\",\"dataField\":\"spassword\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                {\"idsName\":\"IDS_HOST\",\"dataField\":\"shost\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                {\"idsName\":\"IDS_PORTNO\",\"dataField\":\"nportno\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n                            ]\r\n        \r\n        return (\r\n            <>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n                        {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                            <HeaderName className=\"header-primary-md\">\r\n                                {this.props.Login.inputParam&&this.props.Login.inputParam.displayName ?\r\n                                    <FormattedMessage id={this.props.Login.inputParam.displayName} /> : \"\"}\r\n                            </HeaderName>\r\n                            <Button className=\"btn btn-user btn-primary-blue\" \r\n                             hidden={this.state.userRoleControlRights.indexOf(addID) === -1}\r\n                            onClick={()=>this.props.openFTPConfigModal(this.props.userInfo,addID)} \r\n                            role=\"button\">\r\n                                <FontAwesomeIcon icon={faPlus} /> { }                          \r\n                                <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add'/> \r\n                            </Button>\r\n                        </PrimaryHeader> */}\r\n                    \r\n                        {this.state.data ? \r\n                            <DataGrid\r\n                                primaryKeyField = {primaryKeyField}\r\n                                data = {this.state.data}\r\n                                dataResult = {this.state.dataResult}\r\n                                dataState = {this.state.dataState}\r\n                                dataStateChange = {this.dataStateChange}\r\n                                extractedColumnList = {this.extractedColumnList}\r\n                                fetchRecord = {this.props.fetchFTPConfigByID}\r\n                                deleteRecord = {this.deleteRecord}\r\n                                reloadData = {this.reloadData}\r\n                                pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                controlMap = {this.state.controlMap}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                isActionRequired={true}\r\n                                isToolBarRequired={true}\r\n                                editParam={editParam}\r\n                                deleteParam={deleteParam}\r\n                                scrollable={\"scrollable\"}\r\n                                gridHeight={\"600px\"}\r\n                                selectedId={this.props.Login.selectedId}\r\n                                addRecord={()=>this.props.openFTPConfigModal(this.props.userInfo,addID)}\r\n\r\n                            />\r\n                        :\"\"} \r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n            {this.props.Login.openModal?\r\n            <SlideOutModal\r\n                onSaveClick={this.onSaveClick}\r\n                operation={this.props.Login.operation}\r\n                screenName=\"IDS_FTPCONFIG\"\r\n                closeModal={this.closeModal}\r\n                show={this.props.Login.openModal}\r\n                inputParam={this.props.Login.inputParam}\r\n                esign={this.props.Login.loadEsign}\r\n                validateEsign={this.validateEsign}\r\n                selectedRecord={this.state.selectedRecord || {}}\r\n                mandatoryFields={mandatoryFields}\r\n                addComponent={this.props.Login.loadEsign ? \r\n                    <Esign  operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}                                               \r\n                            selectedRecord={this.state.selectedRecord ||{}}\r\n                            />\r\n                  :\r\n                    <Row>                                \r\n                        <Col md={12}>\r\n                            <FormInput\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_USERNAME\"})}\r\n                                name={\"susername\"}\r\n                                type=\"text\"\r\n                                onChange={(event)=>this.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_USERNAME\"})}\r\n                                value ={this.state.selectedRecord ? this.state.selectedRecord[\"susername\"] : \"\"}\r\n                                isMandatory={true}\r\n                                required={ true}\r\n                                maxLength={100}\r\n                            />\r\n                            <FormInput\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_PASSWORD\"})}\r\n                                name={\"spassword\"}\r\n                                type=\"password\"\r\n                                onChange={(event)=>this.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_PASSWORD\"})}\r\n                                isMandatory={true}\r\n                                required={ true}\r\n                                value ={this.state.selectedRecord ? this.state.selectedRecord[\"spassword\"] : \"\"}\r\n                                maxLength={100}\r\n                            />\r\n                        {/* <Col md={12}>/site commented/\r\n                            <FormSelectSearch\r\n                                name={\"nsitecode\"}\r\n                                formLabel={this.props.intl.formatMessage({ id:\"IDS_SITE\"})}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_SITE\"})}\r\n                                value={this.state.selectedRecord?this.state.selectedRecord.siteValue:[]}\r\n                                options={this.props.Login.siteOptions?this.props.Login.siteOptions:[]}\r\n                                optionId=\"nsitecode\"\r\n                                optionValue=\"ssitename\"\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={false}\r\n                                isClearable={false}\r\n                                as={\"select\"}\r\n                                onChange={(event)=>this.onComboChange(event,\"nsitecode\")}\r\n                            />\r\n                        </Col> */}\r\n                            <FormInput\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_HOST\"})}\r\n                                name={\"shost\"}\r\n                                type=\"text\"\r\n                                onChange={(event)=>this.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_HOST\"})}\r\n                                value ={this.state.selectedRecord ? this.state.selectedRecord[\"shost\"] : \"\"}\r\n                                isMandatory={true}\r\n                                required={ true}\r\n                                maxLength={100}\r\n                            />\r\n                            <FormNumericInput\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_PORTNO\"})}\r\n                                name={\"nportno\"}\r\n                                type=\"number\"\r\n                                onChange={(event)=>this.onNumericInputOnChange(event,\"nportno\")}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_PORTNO\"})}\r\n                                isMandatory={true}\r\n                                required={ true}\r\n                                noStyle={true}\r\n                                strict={true}\r\n                                className=\"form-control\"\r\n                               // max={10000000}\r\n                                errors=\"Please provide a valid number.\"\r\n                               // min={0}\r\n                                maxLength={10}\r\n                                //maxLength={100}\r\n                                value ={ this.state.selectedRecord[\"nportno\"] }\r\n                            />\r\n                            <FormInput\r\n                                label={this.props.intl.formatMessage({ id:\"IDS_PHYSICALPATH\"})}\r\n                                name={\"sphysicalpath\"}\r\n                                type=\"text\"\r\n                                onChange={(event)=>this.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id:\"IDS_PHYSICALPATH\"})}\r\n                                value ={this.state.selectedRecord ? this.state.selectedRecord[\"sphysicalpath\"] : \"\"}\r\n                                isMandatory={true}\r\n                                required={ false}\r\n                                maxLength={100}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <CustomSwitch\r\n                                name={\"ndefaultstatus\"}\r\n                                type=\"switch\"\r\n                                label={ this.props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}\r\n                                placeholder={  this.props.intl.formatMessage({ id:\"IDS_DEFAULTSTATUS\"})}                            \r\n                                defaultValue ={this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true :false:false }  \r\n                                isMandatory={false}                       \r\n                                required={false}\r\n                                checked={ this.state.selectedRecord ? this.state.selectedRecord[\"ndefaultstatus\"] === transactionStatus.YES ? true :false:false}\r\n                                onChange={(event)=> this.onInputOnChange(event)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <CustomSwitch\r\n                                name={\"nsslrequired\"}\r\n                                type=\"switch\"\r\n                                label={  this.props.intl.formatMessage({ id:\"IDS_SSL\"})}\r\n                                placeholder={  this.props.intl.formatMessage({ id:\"IDS_SSL\"})}                            \r\n                                defaultValue ={ this.state.selectedRecord ? this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true :false:false }  \r\n                                isMandatory={false}                       \r\n                                required={false}\r\n                                checked={  this.state.selectedRecord ?this.state.selectedRecord[\"nsslrequired\"] === transactionStatus.YES ? true :false:false}\r\n                                onChange={(event)=> this.onInputOnChange(event)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={6}>\r\n                            <CustomSwitch\r\n                                name={\"nchecksumrequired\"}\r\n                                type=\"switch\"\r\n                                label={  this.props.intl.formatMessage({ id:\"IDS_CHECKSUM\"})}\r\n                                placeholder={  this.props.intl.formatMessage({ id:\"IDS_CHECKSUM\"})}                            \r\n                                defaultValue ={  this.state.selectedRecord ?this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true :false:false }  \r\n                                isMandatory={false}                       \r\n                                required={false}\r\n                                checked={  this.state.selectedRecord ? this.state.selectedRecord[\"nchecksumrequired\"] === transactionStatus.YES ? true :false:false}\r\n                                onChange={(event)=> this.onInputOnChange(event)}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                }/>:\"\"}\r\n                \r\n            </>\r\n        );\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    componentDidUpdate(previousProps){\r\n                  \r\n        if (this.props.Login.masterData !== previousProps.Login.masterData){            \r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode){\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights){\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item=>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),});\r\n            }\r\n            else{\r\n                let {dataState}=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }  \r\n                this.setState({data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n         }\r\n         if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord ){    \r\n            this.setState({selectedRecord:this.props.Login.selectedRecord});\r\n         }       \r\n    }\r\n    componentWillUnmount(){\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                 masterData :[], inputParam:undefined, operation:null,modalName:undefined\r\n                }\r\n            }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputOnChange=(event)=>  {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({selectedRecord});\r\n        \r\n    }\r\n    onComboChange=(comboData,fieldName)=>  {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if(comboData){        \r\n            selectedRecord['siteValue']=comboData\r\n            selectedRecord[fieldName] = comboData.value;\r\n        }else{\r\n            selectedRecord['siteValue']=[]\r\n            selectedRecord[fieldName] = \"\";\r\n        }\r\n        this.setState({selectedRecord});    \r\n    }\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster,openFTPConfigModal,fetchFTPConfigByID ,updateStore,validateEsignCredential })(injectIntl(FTPConfig));"]},"metadata":{},"sourceType":"module"}