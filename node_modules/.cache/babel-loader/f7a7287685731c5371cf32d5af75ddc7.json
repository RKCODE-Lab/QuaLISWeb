{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App'; //export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \n\nexport function getBarcodeComboService(methodParam) {\n  return function (dispatch) {\n    const methodTypeService = rsapi.post(\"barcode/getSqlQuery\", {\n      userInfo: methodParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null; // let barcodeData={};\n    //let editField={};\n    //let selectedRecord =  {};\n    // let selectedRecord =  {};\n\n    if (methodParam.operation === \"create\") {\n      urlArray = [methodTypeService]; // selectedRecord = { \n      //     nattachmenttypecode: attachmentType.FTP,\n      //     nlinkcode: defaultLink.length>0?{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n      //     disabled\n      // };\n    } else {\n      const url = methodParam.inputParam.classUrl + \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\"; //\"method/getActiveMethodById\"      \n\n      const methodById = rsapi.post(url, {\n        [methodParam.primaryKeyField]: methodParam.primaryKeyValue,\n        \"userinfo\": methodParam.userInfo\n      });\n      urlArray = [methodTypeService, methodById];\n      selectedId = methodParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const controlMap = constructOptionList(response[0].data.ControlType || [], \"ncontrolcode\", \"scontrolids\", undefined, undefined, false);\n      const queryMap = constructOptionList(response[0].data.SQLQuey || [], \"nsqlquerycode\", \"ssqlqueryname\", undefined, undefined, false);\n      const controlMapList = controlMap.get(\"OptionList\");\n      const queryMapList = queryMap.get(\"OptionList\");\n\n      if (methodParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"nsqlquerycode\"] = getComboLabelValue(selectedRecord, response[0].data.SQLQuey, \"nsqlquerycode\", \"ssqlqueryname\");\n        selectedRecord[\"ncontrolcode\"] = getComboLabelValue(selectedRecord, response[0].data.ControlType, \"ncontrolcode\", \"scontrolids\");\n      }\n\n      ; //selectedRecord[\"nattachmenttypecode\"]= attachmentType.PRN\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          barcodeData: response[0].data || [],\n          queryMapList,\n          controlMapList,\n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: methodParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/BarcodeAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","intl","getBarcodeComboService","methodParam","dispatch","methodTypeService","post","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","controlMap","data","ControlType","undefined","queryMap","SQLQuey","controlMapList","get","queryMapList","type","payload","barcodeData","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue,constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \r\n    export function getBarcodeComboService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodTypeService = rsapi.post(\"barcode/getSqlQuery\", \r\n                                    {userInfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n   // let barcodeData={};\r\n    //let editField={};\r\n    //let selectedRecord =  {};\r\n    // let selectedRecord =  {};\r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodTypeService];\r\n        // selectedRecord = { \r\n        //     nattachmenttypecode: attachmentType.FTP,\r\n        //     nlinkcode: defaultLink.length>0?{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n        //     disabled\r\n        // };\r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodTypeService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n           \r\n            let selectedRecord =  {};\r\n            const controlMap = constructOptionList(response[0].data.ControlType || [], \"ncontrolcode\",\r\n                                  \"scontrolids\", undefined, undefined, false);\r\n            const queryMap = constructOptionList(response[0].data.SQLQuey|| [], \"nsqlquerycode\",\r\n                                  \"ssqlqueryname\", undefined, undefined, false);\r\n            const  controlMapList = controlMap.get(\"OptionList\");\r\n            const  queryMapList = queryMap.get(\"OptionList\");\r\n\r\n\r\n            if (methodParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nsqlquerycode\"] = getComboLabelValue(selectedRecord, response[0].data.SQLQuey, \r\n                    \"nsqlquerycode\", \"ssqlqueryname\"); \r\n                selectedRecord[\"ncontrolcode\"] = getComboLabelValue(selectedRecord, response[0].data.ControlType, \r\n                        \"ncontrolcode\", \"scontrolids\");    \r\n                              \r\n            };               \r\n           //selectedRecord[\"nattachmenttypecode\"]= attachmentType.PRN\r\n            dispatch({type: DEFAULT_RETURN, payload:{barcodeData:response[0].data || [],   \r\n                queryMapList,   \r\n                controlMapList,                    \r\n                operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                openModal : true,\r\n                ncontrolCode:methodParam.ncontrolCode,\r\n                loading:false,selectedId\r\n            }});\r\n      \r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(intl.formatMessage({id: error.message}));\r\n            } \r\n            else{               \r\n                toast.warn(intl.formatMessage({id: error.response.data}));\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}