{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getHoildaysYear(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n\n    if (operation === \"update\") {\n      const HolidayYear = rsapi.post(\"/holidayplanner/getYearByID\", {\n        [primaryKeyName]: masterData.selectedYear[primaryKeyName],\n        \"userinfo\": userInfo\n      });\n      urlArray = [HolidayYear];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n\n      if (operation === \"update\") {\n        selectedRecord = response[0].data;\n        selectedRecord[\"syear\"] = new Date(response[0].data.syear);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          operation: operation,\n          screenName: screenName,\n          openModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function selectCheckBoxYear(HolidayYear, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/holidayplanner/getSelectionAllHolidayPlanner\", {\n      'userinfo': userInfo,\n      \"nyearcode\": HolidayYear.nyearcode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getCommonHolidays(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n\n    if (operation === \"update\") {\n      const CommonHolidays = rsapi.post(\"/holidayplanner/getCommonHolidaysByID\", {\n        \"ncommonholidaycode\": masterData.CommonHolidays[0].ncommonholidaycode,\n        \"nyearcode\": masterData.CommonHolidays[0].nyearcode,\n        \"nholidayYearVersion\": masterData.CommonHolidays[0].nholidayyearversion,\n        \"userinfo\": userInfo\n      });\n      urlArray = [CommonHolidays];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: operation === \"update\" ? response[0].data : undefined,\n          operation: operation,\n          screenName: screenName,\n          openChildModal: true,\n          ncontrolCode: ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n} //export function getPublicHolidays(screenName, operation, primaryKeyName,rowitem, masterData, userInfo, ncontrolCode) {\n\nexport function getPublicHolidays(fetchRecord) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n    let selectedRecord = {\n      // \"ddate\": new Date(),\n      \"ntzddate\": {\n        \"value\": fetchRecord.userInfo.ntimezonecode,\n        \"label\": fetchRecord.userInfo.stimezoneid\n      },\n      \"stzddate\": fetchRecord.userInfo.stimezoneid\n    };\n\n    if (fetchRecord.operation !== \"update\") {\n      // const yearVersion = rsapi.post(\"/holidayplanner/getYearVersionByID\", { \"nholidayyearversion\": fetchRecord.masterData.selectedYearVersion.nholidayyearversion, \"nyearcode\": fetchRecord.masterData.selectedYearVersion.nyearcode, \"userinfo\": fetchRecord.userInfo });\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray = [timeZoneService];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord,\n            operation: fetchRecord.operation,\n            screenName: \"IDS_PUBLICHOLIDAYS\",\n            timeZoneList: timeZoneList || [],\n            openChildModal: true,\n            ncontrolCode: fetchRecord.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      // if (fetchRecord.operation === \"update\") {\n      const PublicHolidays = rsapi.post(\"/holidayplanner/getPublicHolidaysByID\", {\n        \"npublicholidaycode\": fetchRecord.editRow.npublicholidaycode,\n        \"nholidayYearVersion\": fetchRecord.editRow.nholidayyearversion,\n        \"nyearcode\": fetchRecord.editRow.nyearcode,\n        \"userinfo\": fetchRecord.userInfo\n      });\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray = [timeZoneService, PublicHolidays];\n      selectedId = fetchRecord.editRow.npublicholidaycode;\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap1 = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList1 = timeZoneMap1.get(\"OptionList\");\n        let timeZone = [];\n\n        if (fetchRecord.operation === \"update\") {\n          selectedRecord = response[1].data;\n          timeZone.push({\n            \"value\": response[1].data[\"ntzddate\"],\n            \"label\": response[1].data[\"stzddate\"]\n          });\n          selectedRecord[\"ntzddate\"] = timeZone[0];\n          selectedRecord[\"stzddate\"] = timeZone[0].label;\n          selectedRecord[\"ddate\"] = rearrangeDateFormat(fetchRecord.userInfo, response[1].data[\"sdate\"]);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord,\n            operation: fetchRecord.operation,\n            screenName: \"IDS_PUBLICHOLIDAYS\",\n            timeZoneList: timeZoneList1 || [],\n            openChildModal: true,\n            ncontrolCode: fetchRecord.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function sendApproveYearVersion(nYearCode, nHolidayVersion, userInfo) {\n  return function (dispatch) {\n    let urlArray = [];\n    const yearVersion = rsapi.post(\"/holidayplanner/ApproveYearVersion\", {\n      \"nholidayYearVersion\": nHolidayVersion,\n      \"nyearcode\": nYearCode,\n      \"userinfo\": userInfo\n    });\n    urlArray = [yearVersion];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getCommonAndPublicHolidays(nHolidayYearVersion, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/holidayplanner/getSelectedCommonAndPublicHolidays\", {\n      'nholidayYearVersion': nHolidayYearVersion.version.nholidayyearversion,\n      \"nyearcode\": nHolidayYearVersion.version.nyearcode,\n      \"userinfo\": nHolidayYearVersion.userInfo\n    }).then(response => {\n      masterData = { ...nHolidayYearVersion.masterData,\n        CommonHolidays: response.data.CommonHolidays,\n        PublicHolidays: response.data.PublicHolidays,\n        selectedYearVersion: nHolidayYearVersion.version,\n        CurrentYearVersion: nHolidayYearVersion.version.nholidayyearversion\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // CommonHolidays: response[0].data, PublicHolidays: response[0].data, \n          // CurrentYearVersion: response[\"CurrentYearVersion\"], loading:false\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/HolidayPlannerAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","toast","Axios","initRequest","intl","getHoildaysYear","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","urlArray","HolidayYear","post","selectedYear","all","then","response","selectedRecord","data","Date","syear","type","payload","openModal","loading","catch","error","status","message","warn","formatMessage","id","selectCheckBoxYear","nyearcode","getCommonHolidays","CommonHolidays","ncommonholidaycode","nholidayyearversion","undefined","openChildModal","getPublicHolidays","fetchRecord","selectedId","ntimezonecode","stimezoneid","timeZoneService","timeZoneMap","timeZoneList","get","PublicHolidays","editRow","npublicholidaycode","timeZoneMap1","timeZoneList1","timeZone","push","label","sendApproveYearVersion","nYearCode","nHolidayVersion","yearVersion","getCommonAndPublicHolidays","nHolidayYearVersion","version","selectedYearVersion","CurrentYearVersion","dataState"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getHoildaysYear(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        if (operation === \"update\") {\r\n            const HolidayYear = rsapi.post(\"/holidayplanner/getYearByID\", { [primaryKeyName]: masterData.selectedYear[primaryKeyName], \"userinfo\": userInfo });\r\n            urlArray = [HolidayYear];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                if (operation === \"update\") {\r\n                    selectedRecord = response[0].data;\r\n                    selectedRecord[\"syear\"] = new Date(response[0].data.syear);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true, ncontrolCode: ncontrolCode, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function selectCheckBoxYear(HolidayYear, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/holidayplanner/getSelectionAllHolidayPlanner\", { 'userinfo': userInfo, \"nyearcode\": HolidayYear.nyearcode })\r\n\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCommonHolidays(screenName, operation, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        if (operation === \"update\") {\r\n            const CommonHolidays = rsapi.post(\"/holidayplanner/getCommonHolidaysByID\", { \"ncommonholidaycode\": masterData.CommonHolidays[0].ncommonholidaycode, \"nyearcode\": masterData.CommonHolidays[0].nyearcode, \"nholidayYearVersion\": masterData.CommonHolidays[0].nholidayyearversion, \"userinfo\": userInfo });\r\n            urlArray = [CommonHolidays];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: operation === \"update\" ? response[0].data : undefined,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openChildModal: true, ncontrolCode: ncontrolCode, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n//export function getPublicHolidays(screenName, operation, primaryKeyName,rowitem, masterData, userInfo, ncontrolCode) {\r\nexport function getPublicHolidays(fetchRecord) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n\r\n        let selectedRecord = {\r\n            // \"ddate\": new Date(),\r\n            \"ntzddate\": {\r\n                \"value\": fetchRecord.userInfo.ntimezonecode,\r\n                \"label\": fetchRecord.userInfo.stimezoneid\r\n            },\r\n            \"stzddate\": fetchRecord.userInfo.stimezoneid\r\n        };\r\n\r\n        if (fetchRecord.operation !== \"update\") {\r\n\r\n            // const yearVersion = rsapi.post(\"/holidayplanner/getYearVersionByID\", { \"nholidayyearversion\": fetchRecord.masterData.selectedYearVersion.nholidayyearversion, \"nyearcode\": fetchRecord.masterData.selectedYearVersion.nyearcode, \"userinfo\": fetchRecord.userInfo });\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray = [timeZoneService];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord,\r\n                            operation: fetchRecord.operation,\r\n                            screenName: \"IDS_PUBLICHOLIDAYS\",\r\n                            timeZoneList: timeZoneList || [],\r\n                            openChildModal: true, ncontrolCode: fetchRecord.ncontrolCode, loading: false,\r\n                            selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            // if (fetchRecord.operation === \"update\") {\r\n\r\n            const PublicHolidays = rsapi.post(\"/holidayplanner/getPublicHolidaysByID\", { \"npublicholidaycode\": fetchRecord.editRow.npublicholidaycode, \"nholidayYearVersion\": fetchRecord.editRow.nholidayyearversion, \"nyearcode\": fetchRecord.editRow.nyearcode, \"userinfo\": fetchRecord.userInfo });\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray = [timeZoneService, PublicHolidays];\r\n            selectedId = fetchRecord.editRow.npublicholidaycode;\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    const timeZoneMap1 = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList1 = timeZoneMap1.get(\"OptionList\");\r\n\r\n                    let timeZone = [];\r\n\r\n                    if (fetchRecord.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n\r\n                        timeZone.push({ \"value\": response[1].data[\"ntzddate\"], \"label\": response[1].data[\"stzddate\"] });\r\n\r\n                        selectedRecord[\"ntzddate\"] = timeZone[0];\r\n                        selectedRecord[\"stzddate\"] = timeZone[0].label;\r\n                        selectedRecord[\"ddate\"] = rearrangeDateFormat(fetchRecord.userInfo,response[1].data[\"sdate\"]);\r\n\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord,\r\n                            operation: fetchRecord.operation,\r\n                            screenName: \"IDS_PUBLICHOLIDAYS\",\r\n                            timeZoneList: timeZoneList1 || [],\r\n                            openChildModal: true, ncontrolCode: fetchRecord.ncontrolCode, loading: false,\r\n                            selectedId\r\n                        }\r\n                    });\r\n                })\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\nexport function sendApproveYearVersion(nYearCode, nHolidayVersion, userInfo) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n\r\n        const yearVersion = rsapi.post(\"/holidayplanner/ApproveYearVersion\", { \"nholidayYearVersion\": nHolidayVersion, \"nyearcode\": nYearCode, \"userinfo\": userInfo });\r\n        urlArray = [yearVersion];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCommonAndPublicHolidays(nHolidayYearVersion, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/holidayplanner/getSelectedCommonAndPublicHolidays\", { 'nholidayYearVersion': nHolidayYearVersion.version.nholidayyearversion, \"nyearcode\": nHolidayYearVersion.version.nyearcode, \"userinfo\": nHolidayYearVersion.userInfo })\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...nHolidayYearVersion.masterData,\r\n                    CommonHolidays: response.data.CommonHolidays, PublicHolidays: response.data.PublicHolidays,\r\n                    selectedYearVersion: nHolidayYearVersion.version,\r\n                    CurrentYearVersion: nHolidayYearVersion.version.nholidayyearversion\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // CommonHolidays: response[0].data, PublicHolidays: response[0].data, \r\n                        // CurrentYearVersion: response[\"CurrentYearVersion\"], loading:false\r\n                        masterData, loading: false, dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}