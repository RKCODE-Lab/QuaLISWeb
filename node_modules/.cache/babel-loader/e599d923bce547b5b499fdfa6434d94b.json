{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { ColumnType, queryTypeFilter } from '../components/Enumeration';\nimport { format } from 'date-fns';\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getSQLQuery\", {\n      nsqlquerycode: sqlQuery.nsqlquerycode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          queryResult: [],\n          queryList: [],\n          param: [],\n          Dparam: [],\n          TBLName: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      let selectedRecord = {};\n      const chartService = rsapi.post(\"sqlquery/getChartType\", {\n        userinfo: userInfo\n      });\n      const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\n        \"tabletypecode\": -1,\n        \"moduleformcode\": 0,\n        userinfo: userInfo\n      });\n      const tableType = rsapi.post(\"sqlquery/getQueryTableType\", {\n        userinfo: userInfo\n      });\n      let urlArray = [];\n\n      if (operation === \"create\") {\n        urlArray = [chartService, tableService, tableType];\n      } else {\n        const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        });\n        urlArray = [chartService, tableService, tableType, queryById];\n      }\n\n      if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSDASHBOARDQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSALERTQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSBARCODEQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSGENERALQUERY\"\n        });\n      } else {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSFILTERQUERY\"\n        });\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let chart = [];\n\n        if (operation === \"update\") {\n          selectedRecord = response[3].data;\n          chart.push({\n            \"value\": response[3].data[\"ncharttypecode\"],\n            \"label\": response[3].data[\"schartname\"]\n          });\n          selectedRecord[\"ncharttypecode\"] = chart[0];\n        }\n\n        let tableName = undefined;\n        let tableNameOnly = [];\n        Object.values(response[1].data[0]).forEach(p => {\n          if (p.stable !== tableName) {\n            tableName = p.stable;\n            tableNameOnly.push({\n              tableName,\n              stabledisplayname: p.stabledisplayname\n            });\n          }\n        }); // console.log(\"tableNameOnly\",tableNameOnly);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            chartList: response[0].data || [],\n            tableList: response[1].data[0] || [],\n            tableType: response[2].data || [],\n            //tableName: tableNameOnly,\n            tableName: sortData(tableNameOnly || [], \"ascending\", \"stabledisplayname\"),\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            openPortalModal: false,\n            ncontrolCode,\n            loading: false,\n            showExecute: true,\n            showParam: false,\n            showValidate: true,\n            showQueryTool: true,\n            showSave: false,\n            slideResult: [],\n            slideList: [],\n            resultStatus: '',\n            param: [],\n            Dparam: [],\n            TBLName: [],\n            parentPopUpSize: \"xl\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } // else {\n    // }\n\n  };\n}\nexport function getTablesName(TableTypeCode, FormCode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getTablesFromSchema\", {\n      //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"moduleformcode\": parseInt(FormCode),\n      userinfo: userInfo\n    }).then(response => {\n      let tableName = undefined;\n      let tableNameOnly = [];\n      Object.values(response.data[0]).forEach(p => {\n        if (p.stable !== tableName) {\n          tableName = p.stable;\n          tableNameOnly.push({\n            tableName,\n            stabledisplayname: p.stabledisplayname\n          });\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          tableList: response.data[0] || [],\n          //tableName: tableNameOnly || [],\n          tableName: sortData(tableNameOnly || [], \"ascending\", \"stabledisplayname\"),\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getModuleFormName(TableTypeCode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getModuleFormName\", {\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          moduleFormName: response.data[0] || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function executeUserQuery(inputParam) {\n  return function (dispatch) {\n    const Query = inputParam.query;\n    const screenFlag = inputParam.screenFlag;\n    const slideOperation = inputParam.slideOperation;\n    const userInfo = inputParam.userInfo;\n    const screenName = inputParam.screenName;\n    const data = inputParam.data;\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\n      \"query\": Query,\n      userinfo: userInfo,\n      \"returnoption\": \"LIST\"\n    }).then(response => {\n      const querycol = response.data[1];\n      let keyarray = [];\n      let temparray = [];\n      let validColumns = true;\n\n      if (querycol.length > 0) {\n        keyarray = Object.keys(querycol[0]);\n        let width = \"200px\";\n\n        if (keyarray.length === 2) {\n          width = \"300px\";\n        }\n\n        for (let i = 0; i < keyarray.length; i++) {\n          if (keyarray[i] !== null && keyarray[i] !== '') {\n            temparray.push({\n              \"idsName\": keyarray[i],\n              \"dataField\": keyarray[i],\n              \"width\": width\n            });\n          } else {\n            validColumns = false;\n          }\n        }\n      }\n\n      let respObject = {\n        loading: false,\n        slideResult: response.data[1] || [],\n        slideList: temparray || [],\n        resultStatus: response.data[0] || '',\n        openModal: true,\n        showParam: true,\n        screenFlag\n      };\n\n      if (screenFlag === \"showQuery\") {\n        if (screenName === \"Results\") {\n          respObject = { ...respObject,\n            showExecute: false,\n            operation: \"view\",\n            screenName: screenName,\n            ...data\n          };\n        } else {\n          respObject = { ...respObject,\n            showExecute: true,\n            operation: slideOperation\n          };\n        }\n      } else {\n        if (screenFlag === \"NoParam\") {\n          respObject = { ...respObject,\n            screenName: \"Results\",\n            operation: \"view\",\n            queryResult: response.data[1] || [],\n            queryList: temparray || [],\n            showExecute: inputParam.showExecute,\n            showValidate: inputParam.showValidate,\n            showQueryTool: inputParam.showValidate,\n            showSave: inputParam.showSave,\n            noSave: inputParam.noSave\n          };\n        } else {\n          respObject = { ...respObject,\n            queryResult: response.data[1] || [],\n            showExecute: true,\n            showValidate: false,\n            showQueryTool: false,\n            operation: \"create\",\n            screenName: \"Parameter for Results\",\n            queryList: temparray || []\n          };\n        }\n      }\n\n      if (validColumns) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...respObject\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); //toast.error(intl.formatMessage({ id: error.message }));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function executeAlertUserQuery(Query, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\n      \"query\": Query,\n      userinfo: userInfo\n    }).then(response => {\n      const resultCount = response.data[1];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          resultCount: resultCount\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", {\n      nquerytypecode: querytypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          queryList: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getColumnNamesByTableName(tableName, columnList) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getColumnsFromTable\", {\n      \"tablename\": tableName\n    }).then(response => {\n      columnList = columnList || new Map();\n      columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          columnList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function comboColumnValues(tableName, fieldName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getColumnValues\", {\n      \"tablename\": tableName,\n      \"fieldname\": fieldName\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          fieldResult: response.data[1] || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getDatabaseTables(userInfo, sqlQuery, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = \"\";\n\n    if (sqlQuery) {\n      url = \"/sqlquery/getdatabasetables\";\n    } else {\n      url = \"/sqlquery/getdatabaseviews\";\n    }\n\n    rsapi.post(url, {\n      userinfo: userInfo\n    }).then(response => {\n      if (sqlQuery) {\n        const tableListMap = constructOptionList(response.data[\"databaseTableList\"] || [], \"stablename\", \"sdisplayname\", false, false, false);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            databaseTableList: tableListMap.get(\"OptionList\"),\n            openPortalModal: true,\n            screenName: \"IDS_QUERYBUILDER\",\n            sqlQuery,\n            ...inputParam\n          }\n        });\n      } else {\n        const viewListMap = constructOptionList(response.data[\"databaseviewList\"] || [], \"sviewname\", \"sdisplayname\", false, false, false);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            databaseviewList: viewListMap.get(\"OptionList\"),\n            openPortalModal: true,\n            screenName: \"IDS_QUERYBUILDER\",\n            sqlQuery,\n            queryData: [],\n            gridColumnList: [],\n            ...inputParam\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function executeQuery(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/executequery\", { ...inputParam\n    }).then(response => {\n      const queryData = response.data;\n      let gridColumnList = [];\n\n      if (queryData.length > 0) {\n        // inputParam.columnList.forEach(item => {\n        inputParam.selectFields.forEach(item => {\n          gridColumnList.push({\n            idsName: item.items ? item.items.displayname[inputParam.userInfo.slanguagetypecode] : item.item.items.displayname[inputParam.userInfo.slanguagetypecode],\n            dataField: item.items ? item.items.columnname : item.item.items.columnname,\n            width: '200px'\n          });\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          queryData,\n          gridColumnList,\n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            sstatus: \"SUCCESS\"\n          } // ,\n          // resultStatus: \"Success\",\n          // screenName: \"Results\",\n          // openModal: true\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function executeQueryForQueryBuilder(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/executequery\", { ...inputParam\n    }).then(response => {\n      const queryData = response.data;\n      let gridColumnList = [];\n\n      if (queryData.length > 0) {\n        // inputParam.columnList.forEach(item => {\n        inputParam.selectFields.forEach(item => {\n          gridColumnList.push({\n            idsName: item.items ? item.items.displayname[inputParam.userInfo.slanguagetypecode] : item.item.items.displayname[inputParam.userInfo.slanguagetypecode],\n            dataField: item.items ? item.items.columnname : item.item.items.columnname,\n            width: '200px'\n          });\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NODATAFOUND\"\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          queryData,\n          gridColumnList,\n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            sstatus: \"SUCCESS\"\n          } // ,\n          // resultStatus: \"Success\",\n          // screenName: \"Results\",\n          // openModal: true\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getForeignTable(inputParam, type) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getforeigntable\", { ...inputParam\n    }).then(response => {\n      const userInfo = inputParam.userinfo;\n      const foreignTableList = response.data[\"foreignTableList\"];\n      const jstaticcolumns = foreignTableList[0] ? foreignTableList[0].jstaticcolumns || [] : [];\n      const jdynamiccolumns = foreignTableList[0] ? foreignTableList[0].jdynamiccolumns || [] : [];\n      const jmultilingualcolumn = foreignTableList[0] ? foreignTableList[0].jmultilingualcolumn || [] : [];\n      const jnumericcolumns = foreignTableList[0] ? foreignTableList[0].jnumericcolumns || [] : [];\n      const sprimarykeyname = foreignTableList[0] ? foreignTableList[0].sprimarykeyname : \"\";\n      const stablename = foreignTableList[0] ? foreignTableList[0].stablename : \"\";\n      let defaultColumn = {};\n      let comboData = [];\n      jstaticcolumns.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.columnname,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.STATICCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.columnname,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.STATICCOLUMN\n            }\n          };\n        }\n      });\n      jdynamiccolumns.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.columnname,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.DYNAMICCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.columnname,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.DYNAMICCOLUMN\n            }\n          };\n        }\n      });\n      jmultilingualcolumn.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.columnname,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.MULTILINGUALCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.columnname,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.MULTILINGUALCOLUMN\n            }\n          };\n        }\n      });\n      jnumericcolumns.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.foriegntablePK,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.NUMERICCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.foriegntablePK,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.NUMERICCOLUMN\n            }\n          };\n        }\n      });\n      let tableColumnList = [];\n      let tempdata = {};\n\n      if (type === \"column\") {\n        tableColumnList = inputParam.foreignTableColumnList || [];\n        tableColumnList[inputParam.index] = comboData;\n        tempdata = {\n          foreignTableColumnList: tableColumnList\n        };\n      } else {\n        tableColumnList = inputParam.tableColumnList || [];\n        tableColumnList[inputParam.index] = comboData;\n        tempdata = {\n          tableColumnList\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          ...tempdata,\n          selectedRecord: inputParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getViewColumns(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getdatabaseviewscolumns\", {\n      sviewname: inputParam.sviewname,\n      userinfo: inputParam.userinfo\n    }).then(response => {\n      const userInfo = inputParam.userinfo;\n      let languageCode = userInfo.slanguagetypecode ? userInfo.slanguagetypecode : \"en-US\";\n      const responseData = response.data[\"viewColumnList\"] || [];\n      const jsonData = responseData[0] ? responseData[0].jsondata : [];\n      let defaultColumn = {};\n      let comboData = [];\n      let selectFields = [];\n      jsonData[\"conditionfields\"].map(items => {\n        comboData.push({\n          label: items.displayname[languageCode],\n          value: items.columnname,\n          items\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[languageCode],\n            value: items.columnname,\n            items\n          };\n        }\n      });\n      jsonData[\"selectfields\"].map(items => {\n        selectFields.push({\n          label: items.displayname[languageCode],\n          value: items.columnname,\n          items\n        });\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          viewColumnList: comboData,\n          viewColumnListByRule: comboData,\n          selectFields,\n          selectedRecord: { ...inputParam.selectedRecord,\n            filtercolumns: selectFields,\n            groupList: []\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMasterData(inputParam, viewMasterListByRule) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getmasterdata\", { ...inputParam\n    }).then(response => {\n      // const optionId = inputParam.data.sforeigncolumnname;\n      const tableListMap = constructOptionList(response.data[\"masterdata\"] || [], inputParam.optionId, \"sdisplayname\", false, false, false);\n      let tempData = {}; // if(inputParam.data.nflag === 1) {\n      //     let masterdata = [];\n      //     masterdata[inputParam.index] = tableListMap.get(\"OptionList\");\n      //     tempData = { masterdata };\n      // } else {\n      // let viewMasterListByRule = [];\n      // viewMasterListByRule[inputParam.index] = tableListMap.get(\"OptionList\");\n\n      if (viewMasterListByRule === undefined) {\n        viewMasterListByRule = [];\n        viewMasterListByRule[inputParam.groupIndex] = [];\n      } else {\n        viewMasterListByRule = { ...viewMasterListByRule\n        };\n      }\n\n      if (viewMasterListByRule[inputParam.groupIndex]) {} else {\n        viewMasterListByRule[inputParam.groupIndex] = [];\n      }\n\n      viewMasterListByRule[inputParam.groupIndex][inputParam.index] = [];\n      viewMasterListByRule[inputParam.groupIndex][inputParam.index] = tableListMap.get(\"OptionList\");\n      tempData = {\n        viewMasterListByRule\n      }; // }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          selectedRecord: inputParam.selectedRecord,\n          ...tempData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function createQueryBuilder(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/querybuilder/updateQueryBuilder\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterFromQuery(inputParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    let dataIndex = [];\n    const comboData = JSON.parse(inputParam.masterData.selectedQueryBuilder.sdefaultvalue.value);\n\n    if (comboData[\"sdefaultvalue\"].length > 0) {\n      comboData.sdefaultvalue.forEach((dataItem, index) => {\n        const tableData = dataItem.items;\n        const mastertablename = tableData.mastertablename;\n\n        if (dataItem.items.needmasterdata && mastertablename) {\n          const inputParamService = {\n            userinfo: inputParam.userInfo,\n            data: {\n              nflag: 2,\n              mastertablename,\n              valuemember: tableData.valuemember,\n              displaymember: tableData.displaymember\n            }\n          };\n          urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", { ...inputParamService\n          }));\n          dataIndex.push(index);\n        } else if (dataItem.items && dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n          const inputParamService = {\n            data: { ...dataItem.items,\n              nflag: 1\n            },\n            userinfo: inputParam.userInfo\n          };\n          urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", { ...inputParamService\n          }));\n          dataIndex.push(index);\n        }\n\n        if (dataItem.items.columntype === ColumnType.DATATIME || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\n          dataItem.value = new Date(dataItem.value);\n        }\n      });\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(Axios.spread((...response) => {\n        let viewMasterData = [];\n\n        if (response !== null && response.length > 0) {\n          response.forEach((item, ind) => {\n            let valueMember = \"\";\n\n            if (comboData.sdefaultvalue[dataIndex[ind]].items && comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== undefined && comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== \"\") {\n              valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname;\n            } else {\n              valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.valuemember;\n            }\n\n            const tableListMap = constructOptionList(item.data[\"masterdata\"] || [], valueMember, \"sdisplayname\", false, false, false);\n            viewMasterData[dataIndex[ind]] = tableListMap.get(\"OptionList\");\n          });\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            viewMasterData,\n            loading: false,\n            openModal: true,\n            comboData\n          }\n        });\n      })).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"No Parameter Available\"\n      }));\n    }\n  };\n}\nexport function getSelectedQueryBuilder(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/querybuilder/getSelectedQueryBuilder\", {\n      'userinfo': userInfo,\n      \"nquerybuildercode\": inputParam.nquerybuildercode\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedQueryBuilder: response.data[\"selectedQueryBuilder\"],\n        queryDataMain: response.data[\"queryDataMain\"],\n        columnList: response.data[\"columnList\"],\n        queryTypeCode: inputParam.nquerytype,\n        selectFields: response.data[\"selectFields\"]\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateQueryBuilder(inputParam, inputData, masterData) {\n  return function (dispatch) {\n    let urlArray = [];\n    let dataIndex = [];\n    dispatch(initRequest(true)); // urlArray.push(rsapi.post(\"/querybuilder/updateQueryBuilder\", {\n    //     ...inputData\n    // }))\n\n    urlArray.push(rsapi.post(\"/sqlquery/executequery\", { ...inputParam\n    }));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      masterData = { ...masterData,\n        queryDataMain: response[0].data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false,\n          masterData\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getQueryBuilder(nqueryTypeCode, userInfo, masterData) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         rsapi.post(\"/querybuilder/getQueryBuilder\",\n//             { 'userinfo': userInfo, \"nqueryTypeCode\": nqueryTypeCode })\n//             .then(response => {\n//                 masterData = {\n//                     ...response.data\n//                 };\n//                 sortData(masterData);\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         masterData,\n//                         loading: false\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             });\n//     }\n// }","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/SQLBuilderAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","format","getSQLQueryDetail","sqlQuery","userInfo","masterData","dispatch","post","nsqlquerycode","then","response","data","type","payload","loading","queryResult","queryList","param","Dparam","TBLName","catch","error","status","formatMessage","id","message","warn","getSQLQueryComboService","screenName","operation","primaryKeyName","primaryKeyValue","queryTypeCode","ncontrolCode","selectedRecord","chartService","userinfo","tableService","tableType","urlArray","queryById","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","all","chart","push","tableName","undefined","tableNameOnly","Object","values","forEach","p","stable","stabledisplayname","chartList","tableList","openModal","openPortalModal","showExecute","showParam","showValidate","showQueryTool","showSave","slideResult","slideList","resultStatus","parentPopUpSize","getTablesName","TableTypeCode","FormCode","parseInt","getModuleFormName","moduleFormName","executeUserQuery","inputParam","Query","query","screenFlag","slideOperation","querycol","keyarray","temparray","validColumns","length","keys","width","i","respObject","noSave","executeAlertUserQuery","resultCount","comboChangeQueryType","querytypecode","nquerytypecode","searchedData","getColumnNamesByTableName","columnList","Map","set","comboColumnValues","fieldName","fieldResult","getDatabaseTables","url","tableListMap","databaseTableList","get","viewListMap","databaseviewList","queryData","gridColumnList","executeQuery","selectFields","item","idsName","items","displayname","slanguagetypecode","dataField","columnname","sstatus","executeQueryForQueryBuilder","getForeignTable","foreignTableList","jstaticcolumns","jdynamiccolumns","jmultilingualcolumn","jnumericcolumns","sprimarykeyname","stablename","defaultColumn","comboData","map","label","value","columntype","STATICCOLUMN","default","DYNAMICCOLUMN","MULTILINGUALCOLUMN","foriegntablePK","NUMERICCOLUMN","tableColumnList","tempdata","foreignTableColumnList","index","getViewColumns","sviewname","languageCode","responseData","jsonData","jsondata","viewColumnList","viewColumnListByRule","filtercolumns","groupList","getMasterData","viewMasterListByRule","optionId","tempData","groupIndex","createQueryBuilder","getParameterFromQuery","dataIndex","JSON","parse","selectedQueryBuilder","sdefaultvalue","dataItem","tableData","mastertablename","needmasterdata","inputParamService","nflag","valuemember","displaymember","sforeigncolumnname","DATATIME","DATE","symbolObject","isInputVisible","symbolType","Date","spread","viewMasterData","ind","valueMember","getSelectedQueryBuilder","nquerybuildercode","queryDataMain","nquerytype","updateQueryBuilder","inputData"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter\r\n} from '../components/Enumeration';\r\nimport { format } from 'date-fns';\r\n\r\n\r\n\r\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getSQLQuery\", {\r\n            nsqlquerycode: sqlQuery.nsqlquerycode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        queryResult: [],\r\n                        queryList: [],\r\n                        param: [],\r\n                        Dparam: [],\r\n                        TBLName: []\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if (operation === \"create\" || operation === \"update\") {\r\n\r\n            let selectedRecord = {};\r\n            const chartService = rsapi.post(\"sqlquery/getChartType\", {\r\n                userinfo: userInfo\r\n            });\r\n            const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n                \"tabletypecode\": -1,\r\n                \"moduleformcode\": 0,\r\n                userinfo: userInfo\r\n            });\r\n            const tableType = rsapi.post(\"sqlquery/getQueryTableType\", {\r\n                userinfo: userInfo\r\n            });\r\n            let urlArray = [];\r\n            if (operation === \"create\") {\r\n\r\n                urlArray = [chartService, tableService, tableType];\r\n            } else {\r\n                const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", {\r\n                    [primaryKeyName]: primaryKeyValue,\r\n                    \"userinfo\": userInfo\r\n                });\r\n\r\n                urlArray = [chartService, tableService, tableType, queryById];\r\n            }\r\n\r\n            if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSDASHBOARDQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSALERTQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSBARCODEQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSGENERALQUERY\"\r\n                });\r\n            } else {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSFILTERQUERY\"\r\n                });\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    let chart = [];\r\n                    if (operation === \"update\") {\r\n                        selectedRecord = response[3].data;\r\n                        chart.push({\r\n                            \"value\": response[3].data[\"ncharttypecode\"],\r\n                            \"label\": response[3].data[\"schartname\"]\r\n                        });\r\n                        selectedRecord[\"ncharttypecode\"] = chart[0];\r\n                    }\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({\r\n                                tableName, stabledisplayname: p.stabledisplayname\r\n                            });\r\n                        }\r\n                    })\r\n                   // console.log(\"tableNameOnly\",tableNameOnly);\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            chartList: response[0].data || [],\r\n                            tableList: response[1].data[0] || [],\r\n                            tableType: response[2].data || [],\r\n                            //tableName: tableNameOnly,\r\n                            tableName: sortData(tableNameOnly || [], \"ascending\" , \"stabledisplayname\") ,\r\n                            operation,\r\n                            screenName,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            openPortalModal: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showExecute: true,\r\n                            showParam: false,\r\n                            showValidate: true,\r\n                            showQueryTool: true,\r\n                            showSave: false,\r\n                            slideResult: [],\r\n                            slideList: [],\r\n                            resultStatus: '',\r\n                            param: [],\r\n                            Dparam: [],\r\n                            TBLName: [],\r\n                            parentPopUpSize: \"xl\"\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n\r\n\r\n\r\n        }\r\n        // else {\r\n        // }\r\n    }\r\n}\r\n\r\nexport function getTablesName(TableTypeCode, FormCode, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n            //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\r\n            \"tabletypecode\": parseInt(TableTypeCode),\r\n            \"moduleformcode\": parseInt(FormCode), userinfo: userInfo\r\n\r\n        })\r\n            .then(response => {\r\n\r\n                let tableName = undefined;\r\n                let tableNameOnly = [];\r\n                Object.values(response.data[0]).forEach(p => {\r\n                    if (p.stable !== tableName) {\r\n                        tableName = p.stable;\r\n                        tableNameOnly.push({\r\n                            tableName, stabledisplayname: p.stabledisplayname\r\n                        });\r\n                    }\r\n                })\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        tableList: response.data[0] || [],\r\n                        //tableName: tableNameOnly || [],\r\n                        tableName: sortData(tableNameOnly || [], \"ascending\" , \"stabledisplayname\") ,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getModuleFormName(TableTypeCode, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getModuleFormName\", {\r\n            \"tabletypecode\": parseInt(TableTypeCode),\r\n            \"userinfo\": userInfo\r\n\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        moduleFormName: response.data[0] || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function executeUserQuery(inputParam) {\r\n    return function (dispatch) {\r\n        const Query = inputParam.query;\r\n        const screenFlag = inputParam.screenFlag;\r\n        const slideOperation = inputParam.slideOperation;\r\n        const userInfo = inputParam.userInfo;\r\n        const screenName = inputParam.screenName\r\n        const data = inputParam.data;\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\r\n            \"query\": Query,\r\n            userinfo: userInfo,\r\n            \"returnoption\": \"LIST\"\r\n        })\r\n            .then(response => {\r\n                const querycol = response.data[1];\r\n                let keyarray = [];\r\n                let temparray = [];\r\n                let validColumns = true;\r\n                if (querycol.length > 0) {\r\n                    keyarray = Object.keys(querycol[0]);\r\n                    let width = \"200px\"\r\n                    if (keyarray.length === 2) {\r\n                        width = \"300px\"\r\n                    }\r\n                    for (let i = 0; i < keyarray.length; i++) {\r\n                        if (keyarray[i] !== null && keyarray[i] !== '') {\r\n                            temparray.push({\r\n                                \"idsName\": keyarray[i],\r\n                                \"dataField\": keyarray[i],\r\n                                \"width\": width\r\n                            });\r\n                        } else {\r\n                            validColumns = false;\r\n                        }\r\n                    }\r\n                }\r\n                let respObject = {\r\n                    loading: false,\r\n                    slideResult: response.data[1] || [],\r\n                    slideList: temparray || [],\r\n                    resultStatus: response.data[0] || '',\r\n                    openModal: true,\r\n                    showParam: true,\r\n                    screenFlag\r\n                }\r\n\r\n                if (screenFlag === \"showQuery\") {\r\n                    if (screenName === \"Results\") {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            showExecute: false,\r\n                            operation: \"view\",\r\n                            screenName: screenName,\r\n                            ...data\r\n                        }\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            showExecute: true,\r\n                            operation: slideOperation,\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (screenFlag === \"NoParam\") {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            screenName: \"Results\",\r\n                            operation: \"view\",\r\n                            queryResult: response.data[1] || [],\r\n                            queryList: temparray || [],\r\n                            showExecute: inputParam.showExecute,\r\n                            showValidate: inputParam.showValidate,\r\n                            showQueryTool: inputParam.showValidate,\r\n                            showSave: inputParam.showSave,\r\n                            noSave: inputParam.noSave,\r\n                        }\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            queryResult: response.data[1] || [],\r\n                            showExecute: true,\r\n                            showValidate: false,\r\n                            showQueryTool: false,\r\n                            operation: \"create\",\r\n                            screenName: \"Parameter for Results\",\r\n                            queryList: temparray || [],\r\n                        }\r\n                    }\r\n                }\r\n                if (validColumns) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ...respObject\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"\r\n                    }))\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n                //toast.error(intl.formatMessage({ id: error.message }));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeAlertUserQuery(Query, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\r\n            \"query\": Query,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n\r\n\r\n                const resultCount = response.data[1];\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        resultCount: resultCount\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", {\r\n            nquerytypecode: querytypecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const masterData = {\r\n                    ...data,\r\n                    ...response.data,\r\n                    searchedData: undefined\r\n                }\r\n\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        queryList: []\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getColumnNamesByTableName(tableName, columnList) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnsFromTable\", {\r\n            \"tablename\": tableName\r\n        })\r\n            .then(response => {\r\n\r\n                columnList = columnList || new Map();\r\n                columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        columnList,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function comboColumnValues(tableName, fieldName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnValues\", {\r\n            \"tablename\": tableName,\r\n            \"fieldname\": fieldName\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        fieldResult: response.data[1] || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getDatabaseTables(userInfo, sqlQuery, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = \"\";\r\n        if (sqlQuery) {\r\n            url = \"/sqlquery/getdatabasetables\";\r\n        } else {\r\n            url = \"/sqlquery/getdatabaseviews\";\r\n        }\r\n        rsapi.post(url, {\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                if (sqlQuery) {\r\n                    const tableListMap = constructOptionList(response.data[\"databaseTableList\"] || [], \"stablename\", \"sdisplayname\", false, false, false);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            databaseTableList: tableListMap.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_QUERYBUILDER\",\r\n                            sqlQuery,                            \r\n                            ...inputParam\r\n                        }\r\n                    });\r\n                } else {\r\n                    const viewListMap = constructOptionList(response.data[\"databaseviewList\"] || [], \"sviewname\", \"sdisplayname\", false, false, false);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_QUERYBUILDER\",\r\n                            sqlQuery,\r\n                            queryData: [],\r\n                            gridColumnList: [],\r\n                            ...inputParam\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeQuery(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/executequery\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                const queryData = response.data;\r\n                let gridColumnList = [];\r\n                if (queryData.length > 0) {\r\n                    // inputParam.columnList.forEach(item => {\r\n                    inputParam.selectFields.forEach(item => {\r\n                        gridColumnList.push({ idsName:item.items ? item.items.displayname[inputParam.userInfo.slanguagetypecode] :item.item.items.displayname[inputParam.userInfo.slanguagetypecode], dataField:item.items? item.items.columnname :item.item.items.columnname, width: '200px' })\r\n                    })\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        queryData,\r\n                        gridColumnList,\r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            sstatus: \"SUCCESS\"\r\n                        }\r\n                        // ,\r\n                        // resultStatus: \"Success\",\r\n                        // screenName: \"Results\",\r\n                        // openModal: true\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeQueryForQueryBuilder(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/executequery\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                const queryData = response.data;\r\n                let gridColumnList = [];\r\n                if (queryData.length > 0) {\r\n                    // inputParam.columnList.forEach(item => {\r\n                    inputParam.selectFields.forEach(item => {\r\n                        gridColumnList.push({ idsName:item.items? item.items.displayname[inputParam.userInfo.slanguagetypecode] :item.item.items.displayname[inputParam.userInfo.slanguagetypecode] , dataField: item.items? item.items.columnname :item.item.items.columnname, width: '200px' })\r\n                    })\r\n                }else{\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_NODATAFOUND\"\r\n                    }));\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        queryData,\r\n                        gridColumnList,\r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            sstatus: \"SUCCESS\"\r\n                        }\r\n                        // ,\r\n                        // resultStatus: \"Success\",\r\n                        // screenName: \"Results\",\r\n                        // openModal: true\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getForeignTable(inputParam, type) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getforeigntable\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const userInfo = inputParam.userinfo;\r\n                const foreignTableList = response.data[\"foreignTableList\"];\r\n\r\n                const jstaticcolumns = foreignTableList[0] ? (foreignTableList[0].jstaticcolumns || []) : [];\r\n                const jdynamiccolumns = foreignTableList[0] ? (foreignTableList[0].jdynamiccolumns || []) : [];\r\n                const jmultilingualcolumn = foreignTableList[0] ? (foreignTableList[0].jmultilingualcolumn || []) : [];\r\n                const jnumericcolumns = foreignTableList[0] ? (foreignTableList[0].jnumericcolumns || []) : [];\r\n                const sprimarykeyname = foreignTableList[0] ? foreignTableList[0].sprimarykeyname : \"\";\r\n                const stablename = foreignTableList[0] ? foreignTableList[0].stablename : \"\";\r\n\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                jstaticcolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.STATICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.STATICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jdynamiccolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.DYNAMICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.DYNAMICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jmultilingualcolumn.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.MULTILINGUALCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.MULTILINGUALCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jnumericcolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.foriegntablePK,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.NUMERICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.foriegntablePK,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.NUMERICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                let tableColumnList = [];\r\n                let tempdata = {};\r\n                if (type === \"column\") {\r\n                    tableColumnList = inputParam.foreignTableColumnList || [];\r\n                    tableColumnList[inputParam.index] = comboData\r\n                    tempdata = { foreignTableColumnList: tableColumnList };\r\n                } else {\r\n                    tableColumnList = inputParam.tableColumnList || [];\r\n                    tableColumnList[inputParam.index] = comboData;\r\n                    tempdata = { tableColumnList };\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        ...tempdata,\r\n                        selectedRecord: inputParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getViewColumns(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getdatabaseviewscolumns\", {\r\n            sviewname: inputParam.sviewname,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                const userInfo = inputParam.userinfo;\r\n                let languageCode = userInfo.slanguagetypecode ? userInfo.slanguagetypecode : \"en-US\";\r\n                const responseData = response.data[\"viewColumnList\"] || [];\r\n                const jsonData = responseData[0] ? responseData[0].jsondata : [];\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                let selectFields = [];\r\n                \r\n                jsonData[\"conditionfields\"].map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[languageCode],\r\n                        value: items.columnname,\r\n                        items\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[languageCode],\r\n                            value: items.columnname,\r\n                            items\r\n                        }\r\n                    }\r\n                });\r\n                jsonData[\"selectfields\"].map(items => {\r\n                    selectFields.push({\r\n                        label: items.displayname[languageCode],\r\n                        value: items.columnname,\r\n                        items\r\n                    })\r\n                });\r\n              \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        viewColumnList: comboData,\r\n                        viewColumnListByRule :comboData,\r\n                        selectFields,\r\n                        selectedRecord: {...inputParam.selectedRecord,\r\n                            filtercolumns:selectFields,\r\n                            groupList:[]\r\n                    }\r\n                }\r\n            });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getMasterData(inputParam, viewMasterListByRule) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getmasterdata\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                // const optionId = inputParam.data.sforeigncolumnname;\r\n                const tableListMap = constructOptionList(response.data[\"masterdata\"] || [], inputParam.optionId, \"sdisplayname\", false, false, false);\r\n\r\n                let tempData = {};\r\n                // if(inputParam.data.nflag === 1) {\r\n                //     let masterdata = [];\r\n                //     masterdata[inputParam.index] = tableListMap.get(\"OptionList\");\r\n                //     tempData = { masterdata };\r\n                // } else {\r\n                // let viewMasterListByRule = [];\r\n                // viewMasterListByRule[inputParam.index] = tableListMap.get(\"OptionList\");\r\n                if (viewMasterListByRule === undefined) {\r\n                    viewMasterListByRule = [];\r\n                    viewMasterListByRule[inputParam.groupIndex] = [];\r\n                } else {\r\n                    viewMasterListByRule = { ...viewMasterListByRule };\r\n                }\r\n                if (viewMasterListByRule[inputParam.groupIndex]) {\r\n\r\n                } else {\r\n                    viewMasterListByRule[inputParam.groupIndex] = [];\r\n                }\r\n                viewMasterListByRule[inputParam.groupIndex][inputParam.index] = [];\r\n                viewMasterListByRule[inputParam.groupIndex][inputParam.index] = tableListMap.get(\"OptionList\");\r\n                tempData = { viewMasterListByRule };\r\n                // }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        selectedRecord: inputParam.selectedRecord,\r\n                        ...tempData\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function createQueryBuilder(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/querybuilder/updateQueryBuilder\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        loading: false,\r\n                        openModal: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getParameterFromQuery(inputParam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let dataIndex = [];\r\n\r\n        const comboData = JSON.parse(inputParam.masterData.selectedQueryBuilder.sdefaultvalue.value);\r\n        if(comboData[\"sdefaultvalue\"].length>0){\r\n        comboData.sdefaultvalue.forEach((dataItem, index) => {\r\n            const tableData = dataItem.items;\r\n            const mastertablename = tableData.mastertablename;\r\n            if (dataItem.items.needmasterdata && mastertablename) {\r\n                const inputParamService = {\r\n                    userinfo: inputParam.userInfo,\r\n                    data: {\r\n                        nflag: 2,\r\n                        mastertablename,\r\n                        valuemember: tableData.valuemember,\r\n                        displaymember: tableData.displaymember,\r\n                    }\r\n                };\r\n                urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", {\r\n                    ...inputParamService\r\n                }))\r\n                dataIndex.push(index);\r\n\r\n            } else if (dataItem.items && dataItem.items.sforeigncolumnname !== undefined &&\r\n                dataItem.items.sforeigncolumnname !== \"\") {\r\n                const inputParamService = {\r\n                    data: { ...dataItem.items, nflag: 1 },\r\n                    userinfo: inputParam.userInfo\r\n                };\r\n                urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", {\r\n                    ...inputParamService\r\n                }))\r\n                dataIndex.push(index);\r\n\r\n            }\r\n\r\n            if (dataItem.items.columntype === ColumnType.DATATIME\r\n                || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true\r\n                && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\r\n\r\n                dataItem.value = new Date(dataItem.value);\r\n            }\r\n\r\n        })\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n                let viewMasterData = [];\r\n                if (response !== null && response.length > 0) {\r\n                    response.forEach((item, ind) => {\r\n\r\n                        let valueMember = \"\";\r\n                        if (comboData.sdefaultvalue[dataIndex[ind]].items && comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== undefined &&\r\n                            comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== \"\") {\r\n\r\n                            valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname;\r\n                        } else {\r\n                            valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.valuemember;\r\n                        }\r\n                        const tableListMap = constructOptionList(item.data[\"masterdata\"] || [], valueMember, \"sdisplayname\", false, false, false);\r\n                        viewMasterData[dataIndex[ind]] = tableListMap.get(\"OptionList\");\r\n                    })\r\n\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        viewMasterData,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        comboData\r\n\r\n                    }\r\n                });\r\n            }))\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n\r\n    else{\r\n        toast.warn(intl.formatMessage({\r\n            id: \"No Parameter Available\"\r\n        }));\r\n\r\n    }\r\n}\r\n    \r\n}\r\n\r\nexport function getSelectedQueryBuilder(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/querybuilder/getSelectedQueryBuilder\",\r\n            { 'userinfo': userInfo, \"nquerybuildercode\": inputParam.nquerybuildercode })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedQueryBuilder: response.data[\"selectedQueryBuilder\"],\r\n                    queryDataMain: response.data[\"queryDataMain\"], columnList: response.data[\"columnList\"], queryTypeCode: inputParam.nquerytype,\r\n                    selectFields: response.data[\"selectFields\"]\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function updateQueryBuilder(inputParam, inputData, masterData) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let dataIndex = [];\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        // urlArray.push(rsapi.post(\"/querybuilder/updateQueryBuilder\", {\r\n        //     ...inputData\r\n        // }))\r\n        urlArray.push(rsapi.post(\"/sqlquery/executequery\", {\r\n            ...inputParam\r\n        }))\r\n\r\n\r\n\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                masterData = { ...masterData, queryDataMain: response[0].data };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        openModal: false,\r\n                        masterData\r\n                    }\r\n                });\r\n            }))\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n// export function getQueryBuilder(nqueryTypeCode, userInfo, masterData) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"/querybuilder/getQueryBuilder\",\r\n//             { 'userinfo': userInfo, \"nqueryTypeCode\": nqueryTypeCode })\r\n//             .then(response => {\r\n\r\n//                 masterData = {\r\n//                     ...response.data\r\n//                 };\r\n//                 sortData(masterData);\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         masterData,\r\n//                         loading: false\r\n\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             });\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}