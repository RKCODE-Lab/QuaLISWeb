{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\AddDashBoardTypes.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { injectIntl } from 'react-intl';\n\nconst AddDashBoardTypes = props => {\n  //console.log(\"AddDashBoardTypes props:\",props);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_DASHBOARDTYPENAME\"\n    }),\n    name: \"sdashboardtypename\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DASHBOARDTYPENAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sdashboardtypename\"] : \"\",\n    isMandatory: true,\n    required: true,\n    maxLength: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_CHARTTYPE\"\n    }),\n    isSearchable: true,\n    name: \"ncharttypecode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLAESESELCT\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.chartType,\n    optionId: \"ncharttypecode\",\n    optionValue: \"schartname\" //defaultValue={props.ncharttypecode || []}\n    ,\n    value: props.selectedRecord.ncharttypecode ? props.selectedRecord.ncharttypecode : \"\",\n    onChange: value => props.handleChange(value, \"ncharttypecode\", \"ChartType\"),\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_QUERY\"\n    }),\n    isSearchable: true,\n    name: \"nsqlquerycode\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLAESESELCT\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: props.sqlQuery,\n    optionId: \"nsqlquerycode\",\n    optionValue: \"ssqlqueryname\" //defaultValue={props.nsqlquerycode ? props.nsqlquerycode : \"\"}\n    ,\n    value: props.selectedRecord.nsqlquerycode ? props.selectedRecord.nsqlquerycode : \"\",\n    onChange: value => props.handleChange(value, \"nsqlquerycode\", \"\"),\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    className: \"mtop-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, props.ChartProperty && props.ChartProperty.map((Property, index) => /*#__PURE__*/React.createElement(React.Fragment, null, Property.schartpropertyname === \"field\" || Property.schartpropertyname === \"nameField\" || Property.schartpropertyname === \"xFieldBubble\" ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage(Property.schartpropertyname === \"xField\" || Property.schartpropertyname === \"xFieldBubble\" ? {\n      id: \"IDS_XSERIES\"\n    } : Property.schartpropertyname === \"field\" ? {\n      id: \"IDS_CATAEGORYFIELD\"\n    } : {\n      id: \"IDS_VALUEFIELD\"\n    }),\n    isSearchable: true,\n    name: Property.schartpropertyname,\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLAESESELCT\"\n    }),\n    isMandatory: true,\n    isClearable: false,\n    options: Property.schartpropertyname === \"field\" || Property.schartpropertyname === \"xFieldBubble\" ? props.SqlColumns ? props.SqlColumns.xSeriesColumns || [] : [] : props.SqlColumns ? props.SqlColumns.ySeriesColumns || [] : [],\n    value: props.selectedRecord[Property.schartpropertyname] || [],\n    onChange: value => props.handleChange(value, Property.schartpropertyname, Property.schartpropertyname),\n    closeMenuOnSelect: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 33\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, Property.schartpropertyname === \"yField\" ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_YSERIES\"\n    }),\n    isSearchable: true,\n    name: \"yColumnName\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLAESESELCT\"\n    }),\n    isMandatory: true,\n    isClearable: true,\n    isMulti: true // options={props.ySeriesColumnList?props.ySeriesColumnList||[]:[]}\n    ,\n    options: props.SqlColumns ? props.SqlColumns.ySeriesColumns || [] : [] // optionId='ColumnName'\n    // optionValue='ColumnName'\n    // value={props.operation === \"update\" ? props.yValue : props.Value || []}\n    ,\n    value: props.selectedRecord[\"yColumnName\"] || [],\n    onChange: value => props.handleChange(value, \"yColumnName\", Property.schartpropertyname),\n    closeMenuOnSelect: false // alphabeticalSort={true}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 41\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, Property.schartpropertyname === \"xField\" ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_XSERIES\"\n    }),\n    isSearchable: true,\n    name: \"xColumnName\",\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLAESESELCT\"\n    }),\n    isMandatory: true,\n    isClearable: false // options={props.xSeriesColumnList?props.xSeriesColumnList||[]:[]}\n    ,\n    options: props.SqlColumns ? props.SqlColumns.xSeriesColumns || [] : [] // optionId='ColumnName'\n    // optionValue='ColumnName' // props.Value \n    //   value={props.operation === \"update\" ? props.xValue : props.selectedRecord[\"xColumnName\"] || []}\n    ,\n    value: props.selectedRecord[\"xColumnName\"] || [],\n    onChange: value => props.handleChange(value, \"xColumnName\", Property.schartpropertyname),\n    closeMenuOnSelect: true // alphabeticalSort={true}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 49\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, Property.schartpropertyname === \"yFieldBubble\" || Property.schartpropertyname === \"sizeField\" || Property.schartpropertyname === \"categoryField\" ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage(Property.schartpropertyname === \"yFieldBubble\" ? {\n      id: \"IDS_YSERIES\"\n    } : Property.schartpropertyname === \"sizeField\" ? {\n      id: \"IDS_SIZEFIELD\"\n    } : {\n      id: \"IDS_CATAEGORYFIELD\"\n    }),\n    isSearchable: true,\n    name: Property.schartpropertyname,\n    isDisabled: false,\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PLAESESELCT\"\n    }),\n    isMandatory: true,\n    isClearable: true,\n    isMulti: true,\n    options: props.SqlColumns ? Property.schartpropertyname === \"categoryField\" ? props.SqlColumns.xSeriesColumns : props.SqlColumns.ySeriesColumns || [] : [],\n    value: props.selectedRecord[Property.schartpropertyname] || [],\n    onChange: value => props.handleChange(value, Property.schartpropertyname, Property.schartpropertyname),\n    closeMenuOnSelect: false // alphabeticalSort={true}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 57\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)))))))));\n};\n\nexport default injectIntl(AddDashBoardTypes);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/dashboardtypes/AddDashBoardTypes.jsx"],"names":["React","Row","Col","FormInput","FormSelectSearch","injectIntl","AddDashBoardTypes","props","intl","formatMessage","id","event","onInputOnChange","selectedRecord","chartType","ncharttypecode","value","handleChange","sqlQuery","nsqlquerycode","ChartProperty","map","Property","index","schartpropertyname","SqlColumns","xSeriesColumns","ySeriesColumns"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\n\r\n\r\nconst AddDashBoardTypes = (props) => {\r\n   //console.log(\"AddDashBoardTypes props:\",props);\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={12}>\r\n                    <FormInput\r\n                        label={props.intl.formatMessage({ id: \"IDS_DASHBOARDTYPENAME\" })}\r\n                        name={\"sdashboardtypename\"}\r\n                        type=\"text\"\r\n                        onChange={(event) => props.onInputOnChange(event)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_DASHBOARDTYPENAME\" })}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"sdashboardtypename\"] : \"\"}\r\n                        isMandatory={true}\r\n                        required={true}\r\n                        maxLength={\"50\"}\r\n                    />\r\n                \r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_CHARTTYPE\" })}\r\n                        isSearchable={true}\r\n                        name={\"ncharttypecode\"}\r\n                        isDisabled={false}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_PLAESESELCT\" })}\r\n                        isMandatory={true}\r\n                        isClearable={false}\r\n                        options={props.chartType}\r\n                        optionId='ncharttypecode'\r\n                        optionValue='schartname'\r\n                        //defaultValue={props.ncharttypecode || []}\r\n                        value={props.selectedRecord.ncharttypecode ? props.selectedRecord.ncharttypecode : \"\"}\r\n                        onChange={value => props.handleChange(value, \"ncharttypecode\", \"ChartType\")}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n               \r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_QUERY\" })}\r\n                        isSearchable={true}\r\n                        name={\"nsqlquerycode\"}\r\n                        isDisabled={false}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_PLAESESELCT\" })}\r\n                        isMandatory={true}\r\n                        isClearable={false}\r\n                        options={props.sqlQuery}\r\n                        optionId='nsqlquerycode'\r\n                        optionValue='ssqlqueryname'\r\n                        //defaultValue={props.nsqlquerycode ? props.nsqlquerycode : \"\"}\r\n                        value={props.selectedRecord.nsqlquerycode ? props.selectedRecord.nsqlquerycode : \"\"}\r\n                        onChange={value => props.handleChange(value, \"nsqlquerycode\", \"\")}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n                </Col>\r\n               \r\n            </Row>\r\n\r\n            <Row className=\"mtop-4\">\r\n                <Col md={12}>\r\n                {props.ChartProperty && props.ChartProperty.map((Property, index) => (\r\n                    <>\r\n                        {Property.schartpropertyname === \"field\"\r\n                            || Property.schartpropertyname === \"nameField\" || Property.schartpropertyname === \"xFieldBubble\" ?\r\n                          \r\n                                <FormSelectSearch\r\n                                    formLabel={props.intl.formatMessage((Property.schartpropertyname === \"xField\" || Property.schartpropertyname === \"xFieldBubble\") ?\r\n                                        { id: \"IDS_XSERIES\" } : (Property.schartpropertyname === \"field\" ? { id: \"IDS_CATAEGORYFIELD\" } : { id: \"IDS_VALUEFIELD\" }))}\r\n                                    isSearchable={true}\r\n                                    name={Property.schartpropertyname}\r\n                                    isDisabled={false}\r\n                                    placeholder={props.intl.formatMessage({ id: \"IDS_PLAESESELCT\" })}\r\n                                    isMandatory={true}\r\n                                    isClearable={false}\r\n                                    options={(Property.schartpropertyname === \"field\" || Property.schartpropertyname === \"xFieldBubble\") ? props.SqlColumns ? props.SqlColumns.xSeriesColumns || [] : [] : props.SqlColumns ? props.SqlColumns.ySeriesColumns || [] : []}\r\n                                    value={props.selectedRecord[Property.schartpropertyname] || []}\r\n                                    onChange={value => props.handleChange(value, Property.schartpropertyname, Property.schartpropertyname)}\r\n                                    closeMenuOnSelect={true}\r\n                                >\r\n                                </FormSelectSearch>                         \r\n                            :\r\n                            <>\r\n                                {Property.schartpropertyname === \"yField\" ?\r\n                                  \r\n                                        <FormSelectSearch\r\n                                            formLabel={props.intl.formatMessage({ id: \"IDS_YSERIES\" })}\r\n                                            isSearchable={true}\r\n                                            name={\"yColumnName\"}\r\n                                            isDisabled={false}\r\n                                            placeholder={props.intl.formatMessage({ id: \"IDS_PLAESESELCT\" })}\r\n                                            isMandatory={true}\r\n                                            isClearable={true}\r\n                                            isMulti={true}\r\n                                            // options={props.ySeriesColumnList?props.ySeriesColumnList||[]:[]}\r\n                                            options={props.SqlColumns ? props.SqlColumns.ySeriesColumns || [] : []}\r\n                                            // optionId='ColumnName'\r\n                                            // optionValue='ColumnName'\r\n                                            // value={props.operation === \"update\" ? props.yValue : props.Value || []}\r\n                                            value={props.selectedRecord[\"yColumnName\"] || []}\r\n                                            onChange={value => props.handleChange(value, \"yColumnName\", Property.schartpropertyname)}\r\n                                            closeMenuOnSelect={false}\r\n                                        // alphabeticalSort={true}\r\n                                        >\r\n                                        </FormSelectSearch>\r\n                                   \r\n                                    :\r\n                                    <>\r\n                                        {Property.schartpropertyname === \"xField\" ?\r\n                                            \r\n                                                <FormSelectSearch\r\n                                                    formLabel={props.intl.formatMessage({ id: \"IDS_XSERIES\" })}\r\n                                                    isSearchable={true}\r\n                                                    name={\"xColumnName\"}\r\n                                                    isDisabled={false}\r\n                                                    placeholder={props.intl.formatMessage({ id: \"IDS_PLAESESELCT\" })}\r\n                                                    isMandatory={true}\r\n                                                    isClearable={false}\r\n                                                    // options={props.xSeriesColumnList?props.xSeriesColumnList||[]:[]}\r\n                                                    options={props.SqlColumns ? props.SqlColumns.xSeriesColumns || [] : []}\r\n                                                    // optionId='ColumnName'\r\n                                                    // optionValue='ColumnName' // props.Value \r\n                                                    //   value={props.operation === \"update\" ? props.xValue : props.selectedRecord[\"xColumnName\"] || []}\r\n                                                    value={props.selectedRecord[\"xColumnName\"] || []}\r\n                                                    onChange={value => props.handleChange(value, \"xColumnName\", Property.schartpropertyname)}\r\n                                                    closeMenuOnSelect={true}\r\n                                                // alphabeticalSort={true}\r\n                                                >\r\n                                                </FormSelectSearch>\r\n                                           \r\n                                            :\r\n                                            <>\r\n\r\n                                                {Property.schartpropertyname === \"yFieldBubble\" ||\r\n                                                 Property.schartpropertyname === \"sizeField\" || Property.schartpropertyname === \"categoryField\" ?\r\n                                                  \r\n                                                        <FormSelectSearch\r\n                                                            formLabel={props.intl.formatMessage( Property.schartpropertyname === \"yFieldBubble\" ? { id: \"IDS_YSERIES\" } : \r\n                                                            Property.schartpropertyname === \"sizeField\" ? { id: \"IDS_SIZEFIELD\" } : { id: \"IDS_CATAEGORYFIELD\" })}\r\n                                                            isSearchable={true}\r\n                                                            name={Property.schartpropertyname}\r\n                                                            isDisabled={false}\r\n                                                            placeholder={props.intl.formatMessage({ id: \"IDS_PLAESESELCT\" })}\r\n                                                            isMandatory={true}\r\n                                                            isClearable={true}\r\n                                                            isMulti={true}\r\n                                                            options={props.SqlColumns ? Property.schartpropertyname === \"categoryField\" ? props.SqlColumns.xSeriesColumns : props.SqlColumns.ySeriesColumns || [] : []}\r\n                                                            value={props.selectedRecord[Property.schartpropertyname] || []}\r\n                                                            onChange={value => props.handleChange(value, Property.schartpropertyname, Property.schartpropertyname)}\r\n                                                            closeMenuOnSelect={false}\r\n                                                        // alphabeticalSort={true}\r\n                                                        >\r\n                                                        </FormSelectSearch>\r\n                                                  \r\n                                                    :\r\n                                                    <></>\r\n                                                }\r\n                                            </>\r\n                                        }\r\n                                    </>\r\n                                }\r\n                            </>\r\n                        }\r\n                    </>\r\n                ))\r\n                }\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\nexport default injectIntl(AddDashBoardTypes);"]},"metadata":{},"sourceType":"module"}