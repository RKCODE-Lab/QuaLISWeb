{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\QueryBuilder.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport AddQuery from './AddQuery';\nimport AddParameter from './AddParameter';\nimport QueryTypeFilter from './QueryTypeFilter';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail, getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName, getDatabaseTables, executeQuery, getForeignTable, getViewColumns, getMasterData, createQueryBuilder, getParameterFromQuery, getSelectedQueryBuilder, updateQueryBuilder, getQueryBuilder } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, queryTypeFilter, tableType, ColumnType } from '../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport rsapi from '../../rsapi';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { Affix } from 'rsuite';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles'; // import ReactTooltip from 'react-tooltip';\n\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\nimport BuildQuery from './BuildQuery';\nimport { render } from '@testing-library/react';\nimport { format } from 'date-fns';\nimport { ProductList } from '../product/product.styled';\nimport QueryBuilderParamter from './QueryBuilderParamter';\nimport { ReactComponent as ParameterConfigurationIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/parameter-configuration.svg\";\nimport { ReactComponent as ParameterMappingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/parameter-mapping.svg\";\nimport DataGridComponent from '../../components/data-grid/data-grid.component';\nimport { stringOperatorData } from './QueryBuilderData'; // import {validationData} from './QueryBuilderData';\n\nconst jsonSql = require('json-sql')({\n  separatedValues: false\n});\n\nconst jsonSqlParam = require('json-sql')({\n  separatedValues: true\n});\n\nclass QueryBuilder extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.queryData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.dataStateChangeMain = event => {\n      this.setState({\n        dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\n        dataStateMain: event.dataStateMain\n      });\n    };\n\n    this.copySQLQuery = type => {\n      let count = 0;\n\n      if (type === 2) {\n        let query = this.state.selectedRecord[\"squerywithparam\"] || \"\";\n\n        if (this.state.selectedRecord[\"sdefaultvalue\"] && this.state.selectedRecord[\"sdefaultvalue\"]) {\n          this.state.selectedRecord[\"sdefaultvalue\"].forEach(dataItem => {\n            if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n              if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n                dataItem.value.forEach((item, index) => {\n                  count++;\n\n                  if (index === 0) {\n                    if (dataItem.value.length === 1) {\n                      query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\n                    } else {\n                      query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.viewvaluemember + \"$P\");\n                    }\n                  } else {\n                    if (query.includes(\"$p\" + count + \",\")) {\n                      query = query.replace(\"$p\" + count + \",\", \"\");\n                    } else {\n                      query = query.replace(\"$p\" + count, \"\");\n                    }\n                  }\n                });\n              } else {\n                count++;\n                query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\n              }\n            } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n              if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n                dataItem.value.forEach((item, index) => {\n                  count++;\n\n                  if (index === 0) {\n                    if (dataItem.value.length === 1) {\n                      query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n                    } else {\n                      query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n                    }\n                  } else {\n                    if (query.includes(\"$p\" + count + \",\")) {\n                      query = query.replace(\"$p\" + count + \",\", \"\");\n                    } else {\n                      query = query.replace(\"$p\" + count, \"\");\n                    }\n                  }\n                });\n              } else {\n                count++;\n                query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n              }\n            } else {\n              count++;\n              query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.columnname + \"$P\");\n            }\n          });\n        }\n\n        if (query.includes(\"$L\")) {\n          query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\n        }\n\n        navigator.clipboard.writeText(query);\n      } else {\n        let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"] || \"\";\n\n        if (this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"] && this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value) {\n          const sdefaultValue = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value);\n          sdefaultValue.sdefaultvalue.forEach((dataItem, index) => {\n            if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n              if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n                dataItem.value.forEach((item, index) => {\n                  count++;\n\n                  if (index === 0) {\n                    if (dataItem.value.length === 1) {\n                      query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\n                    } else {\n                      query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.viewvaluemember + \"$P\");\n                    }\n                  } else {\n                    if (query.includes(\"$p\" + count + \",\")) {\n                      query = query.replace(\"$p\" + count + \",\", \"\");\n                    } else {\n                      query = query.replace(\"$p\" + count, \"\");\n                    }\n                  }\n                });\n              } else {\n                count++;\n                query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\n              }\n            } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n              if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n                dataItem.value.forEach((item, index) => {\n                  count++;\n\n                  if (index === 0) {\n                    if (dataItem.value.length === 1) {\n                      query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n                    } else {\n                      query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n                    }\n                  } else {\n                    if (query.includes(\"$p\" + count + \",\")) {\n                      query = query.replace(\"$p\" + count + \",\", \"\");\n                    } else {\n                      query = query.replace(\"$p\" + count, \"\");\n                    }\n                  }\n                });\n              } else {\n                count++;\n                query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\n              }\n            } else {\n              count++;\n              query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.columnname + \"$P\");\n            }\n          });\n        }\n\n        if (query.includes(\"$L\")) {\n          query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\n        }\n\n        navigator.clipboard.writeText(query);\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"querybuilder\",\n        methodUrl: \"QueryBuilder\",\n        // displayName: \"IDS_DASHBOARDTYPES\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.saveParam = (saveType, formRef) => {\n      let count = 0;\n      let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"];\n      this.props.Login.comboData.sdefaultvalue.forEach(dataItem => {\n        if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n          let sqryData = \"\";\n\n          if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n            dataItem.value.forEach(item => {\n              count++;\n\n              if (isNaN(item.value)) {\n                query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\n              } else {\n                query = query.replace(\"$p\" + count, item.value);\n              }\n            });\n          } else {\n            count++;\n\n            if (isNaN(dataItem.value.value)) {\n              query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\n            } else {\n              query = query.replace(\"$p\" + count, dataItem.value.value);\n            }\n          }\n        } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n          if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n            dataItem.value.forEach(item => {\n              count++;\n\n              if (isNaN(item.value)) {\n                query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\n              } else {\n                query = query.replace(\"$p\" + count, item.value);\n              }\n            });\n          } else {\n            count++;\n\n            if (isNaN(dataItem.value.value)) {\n              query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\n            } else {\n              query = query.replace(\"$p\" + count, dataItem.value.value);\n            }\n          }\n        } else if (dataItem.items.columntype === ColumnType.DATATIME || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\n          count++;\n          query = query.replace(\"$p\" + count, \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\n        } else {\n          count++;\n          query = query.replace(\"$p\" + count, \"'\" + dataItem.value + \"'\");\n        }\n      });\n\n      if (query.includes(\"$L\")) {\n        query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\n      }\n\n      const jsonData = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"jsondata\"].value);\n      const inputParam = {\n        sgeneratedquery: query,\n        columnList: jsonData[\"columnList\"],\n        userInfo: this.props.Login.userInfo\n      };\n      let inputData = [];\n      this.props.updateQueryBuilder(inputParam, inputData, this.props.Login.masterData);\n    };\n\n    this.save = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"querybuildername\"] && selectedRecord[\"querybuildername\"].length > 0) {\n        if (selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0) {\n          let inputData = [];\n          let jsondata = {};\n          let postParam = undefined;\n\n          if (selectedRecord[\"sdefaultvalue\"].length > 0) {\n            selectedRecord[\"sdefaultvalue\"].forEach((item, i) => {\n              if (item.symbolObject.items.symbolType === 4) {\n                delete item.symbolObject.items[\"replacewith\"];\n              }\n            });\n          }\n\n          postParam = {\n            inputListName: \"QueryBuilder\",\n            selectedObject: \"selectedQueryBuilder\",\n            primaryKeyField: \"nquerybuildercode\"\n          };\n          inputData[\"userinfo\"] = this.props.Login.userInfo;\n          inputData[\"queryBuilder\"] = {\n            \"nstatus\": 1\n          };\n          jsondata[\"groupList\"] = selectedRecord[\"groupList\"];\n          jsondata[\"aggregate\"] = selectedRecord[\"aggregate\"];\n          jsondata[\"orderby\"] = selectedRecord[\"orderby\"];\n          jsondata[\"columnList\"] = this.props.Login.viewColumnListByRule; //selectedRecord[\"filtercolumns\"];\n\n          inputData[\"sgeneratedquery\"] = selectedRecord[\"sgeneratedquery\"];\n          inputData[\"queryBuilder\"][\"squerybuildername\"] = selectedRecord[\"querybuildername\"];\n          inputData[\"queryBuilder\"][\"nquerytype\"] = 1;\n          inputData[\"queryBuilder\"][\"sviewname\"] = selectedRecord[\"sviewname\"].label;\n          inputData[\"queryBuilder\"][\"squerywithparam\"] = selectedRecord[\"squerywithparam\"];\n          inputData[\"queryBuilder\"][\"squerywithvalue\"] = selectedRecord[\"sgeneratedquery\"];\n          inputData[\"queryBuilder\"][\"sdefaultvalue\"] = {\n            sdefaultvalue: selectedRecord[\"sdefaultvalue\"]\n          };\n          inputData[\"queryBuilder\"][\"jsondata\"] = jsondata;\n          const inputParam = {\n            classUrl: \"querybuilder\",\n            methodUrl: \"QueryBuilder\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"create\",\n            saveType,\n            formRef,\n            postParam\n          };\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\"); // this.props.createQueryBuilder(inputData, this.props.Login);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYCOLUMNS\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_INVALIDQUERYBUILDERNAME\"\n        }));\n      }\n    };\n\n    this.deleteQB = ncontrolCode => {\n      let inputData = []; // let postParam = {\n      //     inputListName: \"QueryBuilder\",\n      //     selectedObject: \"selectedDashBoardTypes\",\n      //     primaryKeyField: \"ndashboardtypecode\",\n      //     primaryKeyValue: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\n      //     fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\",\n      //     fecthInputObject: { userinfo: this.props.Login.userInfo }\n      // };\n\n      inputData[\"queryBuilder\"] = this.props.Login.masterData.selectedQueryBuilder;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"QueryBuilder\",\n        classUrl: \"querybuilder\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteQB(\"delete\", ncontrolCode));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n\n      if (this.state.selectedcombo[\"nquerytypecode\"]) {\n        console.log(this.state.selectedcombo[\"nquerytypecode\"].value);\n      }\n\n      const nquerytypecode = this.state.selectedcombo[\"nquerytypecode\"] ? this.state.selectedcombo[\"nquerytypecode\"].value : this.props.Login.masterData.queryTypeCode;\n      this.props.getQueryBuilder(nquerytypecode, this.props.Login.userInfo, this.props.Login.masterData);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onParamComboChange = (data, index) => {\n      let comboData = this.props.Login.comboData;\n      comboData[\"sdefaultvalue\"][index].value = data;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          comboData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onParamInputChange = (event, type, index, dataItem) => {\n      let comboData = this.props.Login.comboData;\n\n      if (type === 2) {\n        const inputValue = event.target.value;\n\n        if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n          comboData[\"sdefaultvalue\"][index].value = event.target.value;\n        }\n      } else if (type === 1) {\n        comboData[\"sdefaultvalue\"][index].value = event.target.checked;\n      } else if (type === 3) {\n        if (dataItem.symbolObject.items.symbolType === 4) {\n          // const symbolObject = stringOperatorData.filter(data => data.value === dataItem.symbolObject.value);\n          let symbolObject = \"\";\n\n          if (dataItem.symbolObject.value === 7 || dataItem.symbolObject.value === 8) {\n            symbolObject = \"'%_%'\";\n          } else if (dataItem.symbolObject.value === 9) {\n            symbolObject = \"'_%'\";\n          } else {\n            symbolObject = \"'%_'\";\n          }\n\n          const index1 = symbolObject.indexOf('_');\n          let inputname = undefined;\n          inputname = symbolObject.substr(0, index1) + event.target.value + symbolObject.substr(index1 + 1);\n          inputname = inputname.slice(1, inputname.length - 1);\n          comboData[\"sdefaultvalue\"][index].value = inputname;\n          comboData[\"sdefaultvalue\"][index].showInputValue = event.target.value;\n        } else {\n          comboData[\"sdefaultvalue\"][index].value = event.target.value;\n        }\n      } else {\n        comboData[\"sdefaultvalue\"][index].value = event.target.value;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          comboData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[\"groupList\"][groupIndex][index][dateName] = dateValue;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedcombo = this.state.selectedcombo || {};\n      selectedcombo[fieldName] = comboData;\n      this.setState({\n        selectedcombo\n      });\n    };\n\n    this.onViewComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      const inputParam = {\n        sviewname: comboData.value,\n        selectedRecord,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getViewColumns(inputParam);\n    };\n\n    this.onAggregateChange = (comboData, fieldName, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"aggregate\"] = selectedRecord[\"aggregate\"] || [];\n\n      if (fieldName === \"columnname\") {\n        selectedRecord[\"aggregate\"][index] = {\n          \"columnname\": comboData,\n          \"aggfunctionname\": \"\"\n        };\n      } else {\n        if (selectedRecord[\"aggregate\"][index][\"columnname\"] && selectedRecord[\"aggregate\"][index][\"columnname\"] !== undefined) {\n          selectedRecord[\"aggregate\"][index][\"aggfunctionname\"] = comboData;\n        } else {}\n      } // this.setState({ selectedRecord });\n\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onRuleChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      this.clearSelectedRule(selectedRecord, index);\n      const sqlQuery = this.props.Login.sqlQuery;\n      const oldselectedRecord = selectedRecord;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      const tableData = comboData.items;\n      const mastertablename = tableData.mastertablename;\n\n      if (comboData.items.needmasterdata && mastertablename) {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          data: {\n            nflag: 2,\n            mastertablename,\n            valuemember: tableData.valuemember,\n            displaymember: tableData.displaymember\n          },\n          selectedRecord,\n          groupIndex,\n          index,\n          optionId: tableData.valuemember\n        };\n        this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\n      } else if (comboData.items && comboData.items.columntype === ColumnType.COMBO) {\n        if (sqlQuery) {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            stablename: comboData.items.foriegntablename,\n            scolumnname: comboData.value,\n            selectedRecord,\n            groupIndex,\n            index\n          };\n          this.props.getForeignTable(inputParam, 'column');\n        } else {\n          selectedRecord[\"groupList\"][groupIndex][index][`${comboData.items.sforeigncolumnname}`] = \"\";\n          const inputParam = {\n            data: { ...comboData.items,\n              nflag: 1\n            },\n            userinfo: this.props.Login.userInfo,\n            selectedRecord,\n            groupIndex,\n            index,\n            optionId: comboData.items.sforeigncolumnname\n          };\n          this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\n        }\n      } else if (comboData.items && comboData.items.columntype === ColumnType.TEXTINPUT && oldselectedRecord[\"groupList\"][groupIndex][index][fieldName].items.columntype !== ColumnType.TEXTINPUT) {\n        selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onOrderbyChange = (comboData, fieldName, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"orderby\"] = selectedRecord[\"orderby\"] || [];\n\n      if (fieldName === \"columnname\") {\n        selectedRecord[\"orderby\"][index] = {\n          \"columnname\": comboData,\n          \"ordertype\": \"\"\n        };\n      } else {\n        if (selectedRecord[\"orderby\"][index][\"columnname\"] && selectedRecord[\"orderby\"][index][\"columnname\"] !== undefined) {\n          selectedRecord[\"orderby\"][index][\"ordertype\"] = comboData;\n        } else {}\n      } // this.setState({ selectedRecord });\n\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.deleteOrderby = index => {\n      let addOrderbyList = this.props.Login.addOrderbyList;\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[\"orderby\"].splice(index, 1);\n      addOrderbyList.splice(index, 1);\n      addOrderbyList.forEach((data, index) => {\n        addOrderbyList[index] = index;\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addOrderbyList\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.addOrderby = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sviewname\"]) {\n        const addOrderbyList = this.props.Login.addOrderbyList || [];\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n        const arrayLength = addOrderbyList.length;\n        viewColumnListByRule = this.props.Login.viewColumnList;\n        addOrderbyList[arrayLength] = arrayLength;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            addOrderbyList,\n            viewColumnListByRule\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTVIEW\"\n        }));\n      }\n    };\n\n    this.deleteAggregate = index => {\n      let addAggregateList = this.props.Login.addAggregateList;\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[\"aggregate\"].splice(index, 1);\n      addAggregateList.splice(index, 1);\n      addAggregateList.forEach((data, index) => {\n        addAggregateList[index] = index;\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addAggregateList\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ selectedRecord });\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.addAggregate = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sviewname\"]) {\n        // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\n        const addAggregateList = this.props.Login.addAggregateList || [];\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n        const arrayLength = addAggregateList.length;\n        viewColumnListByRule = this.props.Login.viewColumnList;\n        addAggregateList[arrayLength] = arrayLength;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            addAggregateList,\n            viewColumnListByRule\n          }\n        };\n        this.props.updateStore(updateInfo); // } else {\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTGROUPBY\" }));\n        // }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTVIEW\"\n        }));\n      }\n    };\n\n    this.addRule = (type, groupIndex) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (type === \"sql\") {// let addRuleList = this.props.Login.addRuleList || [];\n        // if (addRuleList.length > 0) {\n        //     const arrayLength = addRuleList.length;\n        //     addRuleList[arrayLength] = arrayLength;\n        //     selectedRecord[\"button_and_\" + arrayLength] = true;\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //             addRuleList,\n        //             selectedRecord\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        // } else {\n        //     addRuleList[0] = 0;\n        //     this.props.getDatabaseTables(this.props.Login.userInfo, this.props.Login.sqlQuery, { addRuleList, selectedRecord: {} });\n        // }\n      } else {\n        if (selectedRecord[\"sviewname\"]) {\n          let viewColumnListByRule = this.props.Login.viewColumnListByRule || []; // const addRuleList = this.props.Login.addRuleList || [];\n          // const arrayLength = addRuleList.length;\n          // addRuleList[arrayLength] = arrayLength;\n\n          const addGroupList = this.props.Login.addGroupList || [];\n          const arrayLength = addGroupList[groupIndex];\n          addGroupList[groupIndex] = arrayLength + 1; // const addGroupList = {...this.props.Login.addGroupList, [groupIndex]: addRuleList};\n\n          selectedRecord[\"groupList\"][groupIndex][arrayLength] = {}; // viewColumnListByRule[groupIndex][arrayLength] = this.props.Login.viewColumnList;\n\n          viewColumnListByRule = this.props.Login.viewColumnList;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              addGroupList,\n              viewColumnListByRule\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTVIEW\"\n          }));\n        }\n      }\n    };\n\n    this.addGroup = () => {\n      const {\n        selectedRecord\n      } = this.state;\n      var sql1 = jsonSql.build({\n        table: 'testmaster',\n        alias: 'tm',\n        join: [{\n          type: 'inner',\n          table: 'testcategory',\n          alias: 'tc',\n          on: {\n            'tm.ntestcategorycode': 'tc.ntestcategorycode'\n          }\n        }, {\n          type: 'inner',\n          table: 'transactionstatus',\n          alias: 'ts',\n          on: {\n            'tm.naccredited': 'ts.ntranscode'\n          }\n        }]\n      });\n      console.log(sql1.query);\n      var sql21 = jsonSql.build({\n        table: 'testmaster',\n        alias: 'tm',\n        join: [{\n          type: 'inner',\n          table: 'testcategory',\n          alias: 'tc',\n          on: {\n            'tm.ntestcategorycode': 'tc.ntestcategorycode'\n          }\n        }, {\n          type: 'right outer',\n          table: 'transactionstatus',\n          alias: 'ts',\n          on: {\n            'tm.naccredited': 'ts.ntranscode'\n          }\n        }, {\n          type: 'left outer',\n          table: 'transactionstatus',\n          alias: 'ts',\n          on: [{\n            'tm.naccredited': 'ts.ntranscode'\n          }, {\n            'tc.naccredited': 'ts.ntranscode'\n          }]\n        }],\n        condition: [{\n          a: {\n            $gt: 1\n          }\n        }, {\n          b: {\n            $lt: 10\n          }\n        }],\n        group: ['a', 'b']\n      });\n      console.log(sql21.query);\n\n      if (selectedRecord[\"sviewname\"]) {\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n        const addGroupList = this.props.Login.addGroupList || [];\n        const arrayLength = addGroupList.length;\n        addGroupList[arrayLength] = 1; // viewColumnListByRule[arrayLength] = [];\n        // viewColumnListByRule[arrayLength].push(this.props.Login.viewColumnList);\n\n        viewColumnListByRule = this.props.Login.viewColumnList;\n\n        if (arrayLength === 0) {\n          selectedRecord[\"groupList\"] = [];\n          selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\n        }\n\n        selectedRecord[\"groupList\"][arrayLength] = [];\n        selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\n        selectedRecord[\"groupList\"][arrayLength][0] = {};\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            addGroupList,\n            viewColumnListByRule,\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTVIEW\"\n        }));\n      }\n    };\n\n    this.getDatabaseTables = () => {\n      const sqlQuery = false;\n      this.setState({\n        selectedRecord: {}\n      });\n      this.props.getDatabaseTables(this.props.Login.userInfo, sqlQuery, {\n        addRuleList: [],\n        addGroupList: [],\n        addAggregateList: [],\n        addOrderbyList: []\n      });\n    };\n\n    this.closePortalModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: false,\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onExecuteRule = () => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"sgeneratedquery\"]) {\n        let query = selectedRecord[\"squerywithparam\"];\n        let count = 0;\n        selectedRecord[\"sdefaultvalue\"].forEach(dataItem => {\n          if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\n            let sqryData = \"\";\n\n            if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n              dataItem.value.forEach(item => {\n                count++;\n\n                if (isNaN(item.value)) {\n                  query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\n                } else {\n                  query = query.replace(\"$p\" + count, item.value);\n                }\n              });\n            } else {\n              count++;\n\n              if (isNaN(dataItem.value.value)) {\n                query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\n              } else {\n                query = query.replace(\"$p\" + count, dataItem.value.value);\n              }\n            }\n          } else if (dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n            if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\n              dataItem.value.forEach(item => {\n                count++;\n\n                if (isNaN(item.value)) {\n                  query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\n                } else {\n                  query = query.replace(\"$p\" + count, item.value);\n                }\n              });\n            } else {\n              count++;\n\n              if (isNaN(dataItem.value.value)) {\n                query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\n              } else {\n                query = query.replace(\"$p\" + count, dataItem.value.value);\n              }\n            }\n          } else if (dataItem.items.columntype === ColumnType.DATATIME || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\n            count++;\n            query = query.replace(\"$p\" + count, \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\n          } else {\n            count++;\n            query = query.replace(\"$p\" + count, \"'\" + dataItem.value + \"'\");\n          }\n        });\n\n        if (query.includes(\"$L\")) {\n          query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\n        }\n\n        const inputParam = {\n          sgeneratedquery: query,\n          //selectedRecord[\"sgeneratedquery\"],\n          selectedRecord,\n          columnList: this.props.Login.viewColumnListByRule,\n          //selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"] || this.props.Login.viewColumnListByRule,\n          userInfo: this.props.Login.userInfo\n        };\n        this.props.executeQuery(inputParam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_QUERYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.deleteRule = (groupIndex, index) => {\n      let addGroupList = this.props.Login.addGroupList;\n      const selectedRecord = this.state.selectedRecord;\n      addGroupList[groupIndex] = addGroupList[groupIndex] - 1; // selectedRecord[`button_and_${index}`] && delete selectedRecord[`button_and_${index}`];\n      // selectedRecord[`button_or_${index}`] && delete selectedRecord[`button_or_${index}`];\n      // selectedRecord[`notoperator_${index}`] && delete selectedRecord[`notoperator_${index}`];\n\n      if (addGroupList[groupIndex] === 0) {\n        addGroupList.splice(groupIndex, 1);\n        selectedRecord[\"groupList\"].splice(index, 1);\n      } else {\n        selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\n      } // this.clearSelectedRule(selectedRecord, index);\n\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.clearRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          selectedRecord: {\n            sviewname\n          },\n          sqlQuery: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.resetRule = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          addGroupList: [],\n          addAggregateList: [],\n          addOrderbyList: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        selectedRecord: {}\n      });\n    };\n\n    this.onSymbolChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      const items = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items;\n      selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"][\"items\"][\"needmasterdata\"] = items.needmasterdata !== undefined ? comboData.items.needmasterdata : false;\n\n      if (comboData.items.symbolType === 2 || comboData.items.symbolType === 3) {\n        selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]];\n        selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]];\n        selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\n      } else if (comboData.items.symbolType === 5 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType !== 5) {\n        selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\n        selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\n      } else if (comboData.items.symbolType === 6 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 1 || comboData.items.symbolType === 1 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 6) {\n        selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`];\n        selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`];\n      } else {}\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onInputChange = (event, type, groupIndex, index) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (type === 2) {\n        const inputValue = event.target.value;\n\n        if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\n          selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\n        }\n      } else if (type === 1) {\n        selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.checked;\n      } else if (type === 3) {\n        selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.generateFilterQuery = selectedRecord => {\n      const addGroupList = this.props.Login.addGroupList;\n      jsonSql.setDialect('mssql');\n      let databaseCondition = [];\n      let displayCondition = [];\n      let databaseConditionParam = [];\n      let fieldWithValue = [];\n      let notOperator = false;\n\n      if (addGroupList && addGroupList.length > 0) {\n        let groupConditionDatabase = [];\n        let groupConditionDatabaseParam = [];\n        let groupConditionDisplay = [];\n        addGroupList.forEach((items, groupIndex) => {\n          let symbolObject = {};\n          databaseCondition = [];\n          databaseConditionParam = [];\n          displayCondition = [];\n          [...Array(items)].map((data, index) => {\n            if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"]) {\n              symbolObject = selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items || {};\n              const current_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\n              const current_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`];\n              const next_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\n              const next_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`] ? selectedRecord[\"groupList\"][groupIndex][`button_or`] : false;\n              let inputname = selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\n              const symbolname = symbolObject.symbol;\n              let numericinput = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\n              const columnLabel = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].label;\n              const columnValue = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].value;\n              const snumericinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\n              let columnName = undefined;\n              const needmasterdata = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata ? selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata : false;\n\n              if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata) {\n                columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember;\n              } else if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname) {\n                columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname;\n              }\n\n              const dateinput = selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"]), \"yyyy-MM-dd HH:mm:ss.SS\"); //selectedRecord[\"dateinput_\" + index];\n\n              const dateinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"]), \"yyyy-MM-dd HH:mm:ss.SS\"); //selectedRecord[\"dateinputtwo_\" + index];\n\n              if (symbolObject && inputname) {\n                if (symbolObject.symbolType === 4) {\n                  const showInputValue = inputname;\n                  const index1 = symbolObject.replacewith.indexOf('_');\n                  inputname = symbolObject.replacewith.substr(0, index1) + inputname + symbolObject.replacewith.substr(index1 + 1);\n                  inputname = inputname.slice(1, inputname.length - 1);\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: inputname,\n                    showInputValue: showInputValue,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                } else {\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [columnValue]: {\n                      [symbolname]: inputname\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: inputname,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                }\n              } else if (symbolObject && numericinput && symbolObject.symbolType !== 5) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                databaseConditionParam.push({\n                  [columnValue]: {\n                    [symbolname]: numericinput\n                  }\n                });\n                fieldWithValue.push({\n                  columnName: columnValue,\n                  value: numericinput,\n                  symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                  items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                });\n              } else if (symbolObject && symbolObject.symbolType === 2 || symbolObject && symbolObject.symbolType === 3) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: ''\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: ''\n                  }\n                });\n                databaseConditionParam.push({\n                  [columnValue]: {\n                    [symbolname]: ''\n                  }\n                });\n                fieldWithValue.push({\n                  columnName: columnValue,\n                  value: '',\n                  symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                  items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                });\n              } else if (symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: +numericinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: snumericinputtwo\n                    }\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: +numericinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: snumericinputtwo\n                      }\n                    }]\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                }\n              } else if (symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\n                const data = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                  return \"'\" + item.value + \"'\";\n                }) || [];\n                const data1 = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                  return item.label;\n                }) || [];\n\n                if (data.length > 0) {\n                  if (needmasterdata) {\n                    databaseCondition.push({\n                      [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: {\n                        [symbolname]: data\n                      }\n                    });\n                    databaseConditionParam.push({\n                      [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: {\n                        [symbolname]: data\n                      }\n                    });\n                    fieldWithValue.push({\n                      columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember,\n                      value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                        return item;\n                      }),\n                      symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                      items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                    });\n                  } else {\n                    databaseCondition.push({\n                      [columnValue]: {\n                        [symbolname]: data\n                      }\n                    });\n                    databaseConditionParam.push({\n                      [columnValue]: {\n                        [symbolname]: data\n                      }\n                    });\n                    fieldWithValue.push({\n                      columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember,\n                      value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => {\n                        return item;\n                      }),\n                      symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                      items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                    });\n                  }\n                }\n\n                if (data1.length > 0) {\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: data1\n                    }\n                  });\n                } // }\n\n              } else if (symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\n                if (needmasterdata) {\n                  databaseCondition.push({\n                    [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember,\n                    value: selectedRecord[\"groupList\"][groupIndex][index][columnName],\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                } else {\n                  databaseCondition.push({\n                    [columnValue]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value\n                    }\n                  });\n                  displayCondition.push({\n                    [columnLabel]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  databaseConditionParam.push({\n                    [columnValue]: {\n                      [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label\n                    }\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: selectedRecord[\"groupList\"][groupIndex][index][columnName],\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                }\n              } else if (symbolObject && dateinput && symbolObject.symbolType !== 5) {\n                databaseCondition.push({\n                  [columnValue]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                displayCondition.push({\n                  [columnLabel]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                databaseConditionParam.push({\n                  [columnValue]: {\n                    [symbolname]: dateinput\n                  }\n                });\n                fieldWithValue.push({\n                  columnName: columnValue,\n                  value: dateinput,\n                  symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                  items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                });\n              } else if (symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\n                if (symbolObject.symbol === \"\") {\n                  const tempValue = [{\n                    [columnValue]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnValue]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  const tempValue1 = [{\n                    [columnLabel]: {\n                      [symbolObject.replacewith[0]]: dateinput\n                    }\n                  }, {\n                    [columnLabel]: {\n                      [symbolObject.replacewith[1]]: dateinputtwo\n                    }\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinput,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinputtwo,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                } else {\n                  const tempValue = [{\n                    [symbolObject.symbol]: [{\n                      [columnValue]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnValue]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  const tempValue1 = [{\n                    [symbolObject.symbol]: [{\n                      [columnLabel]: {\n                        [symbolObject.replacewith[0]]: dateinput\n                      }\n                    }, {\n                      [columnLabel]: {\n                        [symbolObject.replacewith[1]]: dateinputtwo\n                      }\n                    }]\n                  }];\n                  databaseCondition.push(tempValue);\n                  displayCondition.push(tempValue1);\n                  databaseConditionParam.push(tempValue);\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinput,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                  fieldWithValue.push({\n                    columnName: columnValue,\n                    value: dateinputtwo,\n                    symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"],\n                    items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items\n                  });\n                }\n              }\n            } else {\n              this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\n            }\n          });\n\n          if (selectedRecord[\"groupList\"][groupIndex][`button_and`] === true) {\n            if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\n              groupConditionDisplay.push([{\n                $not: [{\n                  $and: [...displayCondition]\n                }]\n              }]);\n              groupConditionDatabase.push([{\n                $not: [{\n                  $and: [...databaseCondition]\n                }]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $not: [{\n                  $and: [...databaseConditionParam]\n                }]\n              }]);\n            } else {\n              groupConditionDisplay.push([{\n                $and: [...displayCondition]\n              }]);\n              groupConditionDatabase.push([{\n                $and: [...databaseCondition]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $and: [...databaseConditionParam]\n              }]);\n            }\n          } else if (selectedRecord[\"groupList\"][groupIndex][`button_or`] === true) {\n            if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\n              groupConditionDisplay.push([{\n                $not: [{\n                  $or: [...displayCondition]\n                }]\n              }]);\n              groupConditionDatabase.push([{\n                $not: [{\n                  $or: [...databaseCondition]\n                }]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $not: [{\n                  $or: [...databaseConditionParam]\n                }]\n              }]);\n            } else {\n              groupConditionDisplay.push([{\n                $or: [...displayCondition]\n              }]);\n              groupConditionDatabase.push([{\n                $or: [...databaseCondition]\n              }]);\n              groupConditionDatabaseParam.push([{\n                $or: [...databaseConditionParam]\n              }]);\n            }\n          } else {\n            groupConditionDisplay.push([{ ...displayCondition\n            }]);\n            groupConditionDatabase.push([{ ...databaseCondition\n            }]);\n            groupConditionDatabaseParam.push([{ ...databaseConditionParam\n            }]);\n          }\n\n          let finalConditionDisplay = undefined;\n          let finalConditionDatabase = undefined;\n          let finalConditionDatabaseParam = undefined;\n\n          if (addGroupList.length - 1 === 0) {\n            finalConditionDisplay = [...groupConditionDisplay];\n            finalConditionDatabase = [...groupConditionDatabase];\n            finalConditionDatabaseParam = [...groupConditionDatabaseParam];\n          } else if (addGroupList.length - 1 === groupIndex) {\n            if (selectedRecord[\"groupList\"][0][`button_and`] === true) {\n              finalConditionDisplay = [{\n                $and: [...groupConditionDisplay]\n              }];\n              finalConditionDatabase = [{\n                $and: [...groupConditionDatabase]\n              }];\n              finalConditionDatabaseParam = [{\n                $and: [...groupConditionDatabaseParam]\n              }];\n            } else if (selectedRecord[\"groupList\"][0][`button_or`] === true) {\n              finalConditionDisplay = [{\n                $or: [...groupConditionDisplay]\n              }];\n              finalConditionDatabase = [{\n                $or: [...groupConditionDatabase]\n              }];\n              finalConditionDatabaseParam = [{\n                $or: [...groupConditionDatabaseParam]\n              }];\n            } else {\n              finalConditionDisplay = [{ ...groupConditionDisplay\n              }];\n              finalConditionDatabase = [{ ...groupConditionDatabase\n              }];\n              finalConditionDatabaseParam = [{ ...groupConditionDatabaseParam\n              }];\n            }\n          }\n\n          if (this.props.Login.sqlQuery) {\n            const databaseSQLQuery = jsonSql.build({\n              type: 'select',\n              table: selectedRecord[\"stablename_0\"].value,\n              condition: databaseCondition\n            });\n            const displaySQLQuery = jsonSql.build({\n              type: 'select',\n              table: selectedRecord[\"stablename_0\"].label,\n              condition: displayCondition\n            });\n            selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\n            selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\n          } else {\n            // const fields = this.props.Login.viewColumnList;\n            const dbFields = selectedRecord[\"filtercolumns\"];\n            let fieldList = [];\n            let dbfieldList = [];\n            let groupByAggregateFields = [];\n            let groupByFields = [];\n            let groupByAggregateFieldsDisplay = [];\n            let groupByFieldsDisplay = [];\n            let orderByDefault = [];\n            let orderByCustom = {};\n            let orderByDefaultDisplay = [];\n            let orderByCustomDisplay = {};\n            selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\n              if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\n                orderByCustom[data[\"columnname\"].items.columnname] = -1;\n                orderByCustomDisplay[data[\"columnname\"].label] = -1;\n              } else {\n                orderByCustom[data[\"columnname\"].items.columnname] = 1;\n                orderByCustomDisplay[data[\"columnname\"].label] = 1;\n              }\n            });\n\n            if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\n              selectedRecord[\"aggregate\"].forEach(data => {\n                if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\n                  groupByAggregateFields.push({\n                    func: {\n                      name: data[\"aggfunctionname\"].label,\n                      args: [{\n                        field: data[\"columnname\"].items.columnname\n                      }]\n                    },\n                    alias: data[\"columnname\"].items.columnname\n                  });\n                  groupByAggregateFieldsDisplay.push({\n                    func: {\n                      name: data[\"aggfunctionname\"].label,\n                      args: [{\n                        field: data[\"columnname\"].label\n                      }]\n                    }\n                  });\n                } else {\n                  groupByAggregateFields.push(data[\"columnname\"].items.columnname);\n                  groupByFields.push(data[\"columnname\"].items.columnname);\n                  groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\n                  groupByFieldsDisplay.push(data[\"columnname\"].label);\n                }\n              });\n            } // fields.forEach(item => {\n            //     fieldList.push(item.label);\n            // })\n\n\n            dbFields.forEach(item => {\n              if (item.items.languagecode === true) {\n                // let languageCode = this.props.Login.userInfo.slanguagetypecode ? this.props.Login.userInfo.slanguagetypecode : \"en-US\";\n                let fieldValue = item.value.replace(item.value, item.value + \"->> $L as \" + item.value); // dbfieldList.push( \"\"+fieldValue+\"\");\n\n                dbfieldList.push(fieldValue);\n              } else {\n                // dbfieldList.push(\"\"+item.value+\"\");\n                dbfieldList.push(item.value);\n              }\n\n              fieldList.push(item.label);\n            });\n            const databaseSQLQueryParam = jsonSqlParam.build({\n              type: 'select',\n              table: selectedRecord[\"sviewname\"].value,\n              fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\n              group: groupByFields,\n              sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\n              condition: finalConditionDatabaseParam\n            });\n            const databaseSQLQuery = jsonSql.build({\n              type: 'select',\n              table: selectedRecord[\"sviewname\"].value,\n              fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\n              group: groupByFields,\n              sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\n              condition: finalConditionDatabase\n            });\n            const displaySQLQuery = jsonSql.build({\n              type: 'select',\n              fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFieldsDisplay : fieldList,\n              group: groupByFieldsDisplay,\n              table: selectedRecord[\"sviewname\"].label,\n              sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\n              condition: finalConditionDisplay //&& finalCondition.length === 1 ? finalCondition[0] : finalCondition\n\n            }); // databaseSQLQueryParam.query.split('\"').join('')\n            // databaseSQLQuery.query.split('\"').join('')\n            // let dbQueryParam = databaseSQLQueryParam.query.split('\"').join('');\n            // let dbQuery = databaseSQLQuery.query.split('\"').join('');\n\n            let dbQueryParam = databaseSQLQueryParam.query;\n            let dbQuery = databaseSQLQuery.query;\n            selectedRecord[\"squerywithparam\"] = dbQueryParam.replace(\"like\", \"Ilike\");\n            selectedRecord[\"sgeneratedquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ? dbQuery.replace(\"like\", \"Ilike\") : \"\";\n            selectedRecord[\"sdisplayquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ? displaySQLQuery.query.replace(\"like\", \"Ilike\") : \"\";\n            selectedRecord[\"sdefaultvalue\"] = fieldWithValue;\n            const paramIndex = [];\n\n            if (fieldWithValue.length > 0) {\n              fieldWithValue.forEach((item, i) => {\n                if (item.symbolObject.items.symbolType === 4) {\n                  paramIndex.push(\"$p\" + (i + 1));\n                }\n              });\n            }\n\n            if (paramIndex.length > 0) {\n              paramIndex.forEach(data => {\n                selectedRecord[\"squerywithparam\"] = selectedRecord[\"squerywithparam\"].replace(data, data + \" COLLATE pg_catalog.default \");\n              });\n            } // if (selectedRecord[\"squerywithparam\"].indexOf('Ilike') > 0) {\n            //     let newQuery = selectedRecord[\"squerywithparam\"];\n            //     while (newQuery.indexOf(\"Ilike\") !== -1) {\n            //         const paramLabelStartIndex = newQuery.indexOf(\"Ilike\");\n            //         const paramLabel = newQuery.substring(paramLabelStartIndex, newQuery.length);\n            //     }\n            // }\n\n          }\n\n          this.setState({\n            selectedRecord\n          });\n        });\n      } else {\n        this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\n      }\n\n      this.setState({\n        selectedRecord\n      }); // for temporary\n    };\n\n    this.onConditionClick = (fieldName, index) => {\n      let {\n        selectedRecord\n      } = this.state;\n\n      if (fieldName === `button_and`) {\n        selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        selectedRecord[\"groupList\"][index][`button_or`] = false;\n      } else if (fieldName === `button_or`) {\n        selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        selectedRecord[\"groupList\"][index][`button_and`] = false; // if (selectedRecord[\"groupList\"][index][`notoperator`] && selectedRecord[\"groupList\"][index][`notoperator`] === true) {\n        //     selectedRecord[\"groupList\"][index][`notoperator`] = false;\n        // }\n      } else if (fieldName === `button_not`) {\n        selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n      } else {}\n\n      this.generateFilterQuery(selectedRecord);\n    };\n\n    this.onQueryTypeOnclick = value => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"selectedQueryType\"] = value;\n      let sqlQuery = false;\n\n      if (value.value === \"sql\") {\n        sqlQuery = true;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          sqlQuery: sqlQuery\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    const dataState = {\n      skip: 0,\n      take: props.settings ? parseInt(props.settings[14]) : 5\n    };\n    const dataStateMain = {\n      skip: 0,\n      take: props.settings ? parseInt(props.settings[14]) : 5\n    };\n    const dataStateUserQuery = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      // modalIsOpen: false,\n      parameters: [],\n      // objparam: [],\n      // objDparam: [],\n      queryName: '',\n      // queryResult: [],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataStateUserQuery: dataStateUserQuery,\n      queryTypeName: '',\n      selectedcombo: [],\n      selectedTableType: [],\n      moduleFormName: [],\n      ntableTypeCode: -1,\n      nFormCode: -1,\n      queryType: [],\n      tableType: [],\n      chartList: [],\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      //tableName : undefined,tableList:[]\n      outputColumns: [],\n      selectedTableList: [],\n      tableColumnList: [],\n      foreignTableColumnList: [],\n      joinTableList: [],\n      symbolsList: [],\n      foreignTableList: [],\n      count: 0,\n      foreignTableCount: [],\n      selectedforeignTableList: [],\n      filterColumnList: [],\n      sqlQuery: false,\n      // viewColumnList: [],\n      switchRecord: {},\n      dataState: dataState,\n      dataStateMain: dataStateMain,\n      data: [],\n      dataMainList: [],\n      dataResult: [],\n      dataResultMain: [],\n      queryType: [{\n        squerytypename: this.props.intl.formatMessage({\n          id: \"IDS_VIEWS\"\n        }),\n        nquerytypecode: 1\n      }, {\n        squerytypename: this.props.intl.formatMessage({\n          id: \"IDS_SQL\"\n        }),\n        nquerytypecode: 2\n      }],\n      queryTypeOptions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VIEWS\"\n        }),\n        views: 1\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SQL\"\n        }),\n        value: 2\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage(); // this.dropItemRef = React.createRef(); \n\n    this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery', 'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode']; // this.queryList = [];\n\n    this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\", \"squerytypename\", \"schartname\"];\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      filterData\n    } = this.state;\n\n    if (this.props.Login.queryData !== previousProps.Login.queryData) {\n      this.setState({\n        data: this.props.Login.queryData,\n        dataResult: process(this.props.Login.queryData, this.state.dataState)\n      });\n    }\n\n    if (this.props.Login.masterData.queryDataMain !== previousProps.Login.masterData.queryDataMain) {\n      if (this.props.Login.masterData.queryDataMain !== undefined) {\n        this.setState({\n          dataMainList: this.props.Login.masterData.queryDataMain,\n          dataResultMain: process(this.props.Login.masterData.queryDataMain === null ? [] : this.props.Login.masterData.queryDataMain, this.state.dataStateMain)\n        });\n      }\n    }\n\n    if (this.props.Login.masterData.queryTypeCode !== previousProps.Login.masterData.queryTypeCode) {\n      filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\n      const item = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\n      breadCrumbData.push({\n        \"label\": \"IDS_QUERYTYPE\",\n        \"value\": this.props.Login.masterData.queryTypeCode ? item[0].squerytypename : \"\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add QueryBuilder\") && this.state.controlMap.get(\"Add QueryBuilder\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit QueryBuilder\") && this.state.controlMap.get(\"Edit QueryBuilder\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete QueryBuilder\") && this.state.controlMap.get(\"Delete QueryBuilder\").ncontrolcode;\n    const breadCrumbData = this.state.filterData || [];\n    let gridColumnListMain = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.columnList && this.props.Login.masterData.columnList.length > 0) {\n      this.props.Login.masterData.columnList.forEach(item => {\n        gridColumnListMain.push({\n          idsName: item.items.displayname[this.props.Login.userInfo.slanguagetypecode],\n          dataField: item.items.columnname,\n          width: '200px'\n        });\n      });\n    }\n\n    let selectedQueryType = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\n      selectedQueryType = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: this.props.Login.masterData || [],\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_QUERYBUILDER\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.queryBuilderList,\n      getMasterDetail: qryBuilder => this.props.getSelectedQueryBuilder(qryBuilder, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedQueryBuilder,\n      primaryKeyField: \"nquerybuildercode\",\n      mainField: \"squerybuildername\" //firstField=\"squerybuildername\"\n      // secondField={this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\"}\n      // filterColumnData={this.props.filterColumnData}\n      // filterParam={filterParam}\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: this.getDatabaseTables // openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\n      //     this.props.Login.masterData, this.props.Login.userInfo,\n      //     this.props.Login.masterData.SelectedQueryType.nquerytypecode,                                   \n      //     addId)} \n      //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)} Already commented\n      ,\n      needAccordianFilter: false // skip={this.state.skip}\n      // take={this.state.take}\n      ,\n      handlePageChange: this.handlePageChange,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showBuildQuery: false,\n      builderData: this.getDatabaseTables,\n      filterComponent: [{\n        \"IDS_QUERYTYPEFILTER\": /*#__PURE__*/React.createElement(QueryTypeFilter, {\n          queryType: this.state.queryTypeOptions || [],\n          selectedRecord: this.state.selectedcombo || {},\n          onComboChange: this.onComboChange,\n          filterQueryType: selectedQueryType[0],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.queryBuilderList && this.props.Login.masterData.queryBuilderList.length > 0 && this.props.Login.masterData.selectedQueryBuilder ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedQueryBuilder.squerybuildername), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-inline dropdown badget_menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\" // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\n      //  data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERMAPPING\"\n      }),\n      onClick: e => this.props.getParameterFromQuery(this.props.Login),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ParameterConfigurationIcon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"configreporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\" // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\" // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\n      //  data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPYSQL\"\n      }),\n      onClick: () => this.copySQLQuery(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 65\n      }\n    }))))))), this.props.Login.masterData.queryDataMain && gridColumnListMain && gridColumnListMain.length > 0 ? /*#__PURE__*/React.createElement(DataGridComponent, {\n      data: this.state.dataMainList,\n      dataResult: this.state.dataResultMain || [],\n      dataState: this.state.dataStateMain,\n      dataStateChange: this.dataStateChangeMain,\n      extractedColumnList: gridColumnListMain,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: \"scrollable\",\n      isActionRequired: false,\n      isToolBarRequired: true,\n      isRefreshRequired: false,\n      selectedId: -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 45\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null)) : \"\")))), this.props.Login.openPortalModal && /*#__PURE__*/React.createElement(PortalModalSlideout, {\n      show: this.props.Login.openPortalModal,\n      closeModal: this.closePortalModal,\n      screenName: this.props.Login.screenName,\n      handleSaveClick: this.save,\n      addComponent: /*#__PURE__*/React.createElement(BuildQuery, {\n        selectedRecord: this.state.selectedRecord || {},\n        databaseTableList: this.props.Login.databaseTableList,\n        tableColumnList: this.state.tableColumnList,\n        foreignTableList: this.state.foreignTableList || [],\n        foreignTableColumnList: this.props.Login.foreignTableColumnList || [] // validationData={validationData}\n        ,\n        count: this.state.count,\n        foreignTableCount: this.state.foreignTableCount,\n        sqlQuery: this.state.sqlQuery,\n        viewMasterListByRule: this.props.Login.viewMasterListByRule || [],\n        userInfo: this.props.Login.userInfo,\n        onExecuteRule: this.onExecuteRule,\n        onInputChange: this.onInputChange,\n        deleteRule: this.deleteRule,\n        clearRule: this.clearRule,\n        resetRule: this.resetRule,\n        onSymbolChange: this.onSymbolChange // onForeignTableChange={this.onForeignTableChange}\n        // addJoinTable={this.addJoinTable}\n        ,\n        onQueryTypeOnclick: this.onQueryTypeOnclick,\n        onRuleChange: this.onRuleChange,\n        onViewComboChange: this.onViewComboChange,\n        addRule: this.addRule,\n        onConditionClick: this.onConditionClick,\n        onMasterDataChange: this.onMasterDataChange,\n        handleFilterDateChange: this.handleFilterDateChange,\n        databaseviewList: this.props.Login.databaseviewList,\n        addRuleList: this.props.Login.addRuleList || [],\n        viewColumnListByRule: this.props.Login.viewColumnListByRule || [],\n        masterdata: this.props.Login.masterdata,\n        switchRecord: this.state.switchRecord,\n        data: this.state.data,\n        dataResult: this.state.dataResult || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        gridColumnList: this.props.Login.gridColumnList || [],\n        queryType: this.state.queryType,\n        addAggregate: this.addAggregate,\n        addAggregateList: this.props.Login.addAggregateList || [],\n        onAggregateChange: this.onAggregateChange,\n        deleteAggregate: this.deleteAggregate,\n        addOrderby: this.addOrderby,\n        addOrderbyList: this.props.Login.addOrderbyList || [],\n        onOrderbyChange: this.onOrderbyChange,\n        deleteOrderby: this.deleteOrderby,\n        addGroup: this.addGroup,\n        addGroupList: this.props.Login.addGroupList || [],\n        copySQLQuery: this.copySQLQuery,\n        onFilterComboChange: this.onFilterComboChange,\n        selectFields: this.props.Login.selectFields || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 21\n      }\n    }), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERMAPPING\"\n      }),\n      onExecuteClick: this.saveParam,\n      showExecute: true,\n      showParam: true,\n      hideSave: true,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: /*#__PURE__*/React.createElement(QueryBuilderParamter, {\n        onParamInputChange: this.onParamInputChange,\n        selectedQueryBuilder: this.props.Login.masterData.selectedQueryBuilder || [],\n        viewMasterData: this.props.Login.viewMasterData || [],\n        comboData: this.props.Login.comboData || [],\n        onParamComboChange: this.onParamComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  clearSelectedRule(selectedRecord, index) {\n    selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n    selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\n    selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n    selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\n    selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n    selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\n    selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\n  }\n\n  groupByFunction(selectedRecord, databaseCondition, displayCondition) {\n    let groupByAggregateFields = [];\n    let groupByFields = [];\n    let groupByAggregateFieldsDisplay = [];\n    let groupByFieldsDisplay = [];\n    let orderByDefault = [];\n    let orderByCustom = {};\n    let orderByDefaultDisplay = [];\n    let orderByCustomDisplay = {}; // if (selectedRecord[\"customorderby\"] && selectedRecord[\"customorderby\"] === true) {\n\n    selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\n      if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\n        orderByCustom[data[\"columnname\"].items.columnname] = -1;\n        orderByCustomDisplay[data[\"columnname\"].label] = -1;\n      } else {\n        orderByCustom[data[\"columnname\"].items.columnname] = 1;\n        orderByCustomDisplay[data[\"columnname\"].label] = 1;\n      }\n    }); // } else {\n    //     selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\n    //         orderByDefault.push(data[\"columnname\"].items.columnname);\n    //         orderByDefaultDisplay.push(data[\"columnname\"].label);\n    //     })\n    // }\n    // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\n\n    if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\n      selectedRecord[\"aggregate\"].forEach(data => {\n        if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\n          groupByAggregateFields.push({\n            func: {\n              name: data[\"aggfunctionname\"].label,\n              args: [{\n                field: data[\"columnname\"].items.columnname\n              }]\n            },\n            alias: data[\"columnname\"].items.columnname\n          });\n          groupByAggregateFieldsDisplay.push({\n            func: {\n              name: data[\"aggfunctionname\"].label,\n              args: [{\n                field: data[\"columnname\"].label\n              }]\n            }\n          });\n        } else {\n          groupByAggregateFields.push(data[\"columnname\"].items.columnname);\n          groupByFields.push(data[\"columnname\"].items.columnname);\n          groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\n          groupByFieldsDisplay.push(data[\"columnname\"].label);\n        }\n      });\n      const databaseSQLQuery = jsonSql.build({\n        type: 'select',\n        table: selectedRecord[\"sviewname\"].value,\n        fields: groupByAggregateFields,\n        group: groupByFields,\n        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\n        condition: databaseCondition\n      });\n      const displaySQLQuery = jsonSql.build({\n        type: 'select',\n        fields: groupByAggregateFieldsDisplay,\n        group: groupByFieldsDisplay,\n        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\n        table: selectedRecord[\"sviewname\"].label,\n        condition: displayCondition\n      });\n      selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\n      selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\n      this.setState({\n        selectedRecord\n      });\n    } // }\n\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getSQLQueryDetail,\n  getSQLQueryComboService,\n  comboChangeQueryType,\n  executeUserQuery,\n  comboColumnValues,\n  getColumnNamesByTableName,\n  getTablesName,\n  getModuleFormName,\n  getDatabaseTables,\n  executeQuery,\n  getForeignTable,\n  getViewColumns,\n  getMasterData,\n  createQueryBuilder,\n  getParameterFromQuery,\n  getSelectedQueryBuilder,\n  updateQueryBuilder,\n  getQueryBuilder\n})(injectIntl(QueryBuilder));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboard/QueryBuilder.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faCopy","process","toast","ListMaster","SlideOutModal","Esign","AddQuery","AddParameter","QueryTypeFilter","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","getColumnNamesByTableName","getTablesName","getModuleFormName","getDatabaseTables","executeQuery","getForeignTable","getViewColumns","getMasterData","createQueryBuilder","getParameterFromQuery","getSelectedQueryBuilder","updateQueryBuilder","getQueryBuilder","DEFAULT_RETURN","transactionStatus","queryTypeFilter","tableType","ColumnType","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","rsapi","ConfirmMessage","Affix","BreadcrumbComponent","ListWrapper","PortalModalSlideout","BuildQuery","render","format","ProductList","QueryBuilderParamter","DataGridComponent","stringOperatorData","jsonSql","require","separatedValues","jsonSqlParam","QueryBuilder","constructor","props","dataStateChange","event","setState","dataResult","Login","queryData","dataState","dataStateChangeMain","dataResultMain","queryDataMain","dataStateMain","copySQLQuery","type","count","query","state","selectedRecord","forEach","dataItem","items","needmasterdata","mastertablename","symbolObject","value","item","index","length","replace","viewvaluemember","includes","sforeigncolumnname","undefined","columnname","userInfo","slanguagetypecode","navigator","clipboard","writeText","masterData","selectedQueryBuilder","sdefaultValue","JSON","parse","sdefaultvalue","reloadData","searchRef","current","inputParam","inputData","classUrl","methodUrl","saveParam","saveType","formRef","comboData","sqryData","isNaN","columntype","DATATIME","DATE","isInputVisible","symbolType","Date","jsonData","sgeneratedquery","columnList","save","jsondata","postParam","i","inputListName","selectedObject","primaryKeyField","viewColumnListByRule","label","displayName","operation","info","intl","formatMessage","id","deleteQB","ncontrolCode","confirmDelete","confirmMessage","confirm","openFilter","showFilter","updateInfo","typeName","data","closeFilter","onFilterSubmit","selectedcombo","console","log","nquerytypecode","queryTypeCode","onFilterComboChange","fieldName","generateFilterQuery","onParamComboChange","onParamInputChange","inputValue","target","test","checked","index1","indexOf","inputname","substr","slice","showInputValue","handleFilterDateChange","dateName","dateValue","groupIndex","onComboChange","onViewComboChange","sviewname","userinfo","onAggregateChange","onRuleChange","clearSelectedRule","sqlQuery","oldselectedRecord","tableData","nflag","valuemember","displaymember","optionId","viewMasterListByRule","COMBO","stablename","foriegntablename","scolumnname","TEXTINPUT","onMasterDataChange","onOrderbyChange","deleteOrderby","addOrderbyList","splice","addOrderby","arrayLength","viewColumnList","deleteAggregate","addAggregateList","addAggregate","addRule","addGroupList","addGroup","sql1","build","table","alias","join","on","sql21","condition","a","$gt","b","$lt","group","selectFields","addRuleList","closePortalModal","openPortalModal","closeModal","openModal","onExecuteRule","deleteRule","clearRule","resetRule","onSymbolChange","oldSelectedRecord","onInputChange","name","setDialect","databaseCondition","displayCondition","databaseConditionParam","fieldWithValue","notOperator","groupConditionDatabase","groupConditionDatabaseParam","groupConditionDisplay","Array","map","current_button_and","current_button_or","next_button_and","next_button_or","symbolname","symbol","numericinput","columnLabel","columnValue","snumericinputtwo","columnName","dateinput","dateinputtwo","replacewith","push","tempValue","tempValue1","data1","groupByFunction","$not","$and","$or","finalConditionDisplay","finalConditionDatabase","finalConditionDatabaseParam","databaseSQLQuery","displaySQLQuery","dbFields","fieldList","dbfieldList","groupByAggregateFields","groupByFields","groupByAggregateFieldsDisplay","groupByFieldsDisplay","orderByDefault","orderByCustom","orderByDefaultDisplay","orderByCustomDisplay","func","args","field","languagecode","fieldValue","databaseSQLQueryParam","fields","sort","dbQueryParam","dbQuery","paramIndex","onConditionClick","onQueryTypeOnclick","skip","take","settings","parseInt","dataStateUserQuery","error","parameters","queryName","userRoleControlRights","controlMap","Map","queryTypeName","selectedTableType","moduleFormName","ntableTypeCode","nFormCode","queryType","chartList","outputColumns","selectedTableList","tableColumnList","foreignTableColumnList","joinTableList","symbolsList","foreignTableList","foreignTableCount","selectedforeignTableList","filterColumnList","switchRecord","dataMainList","squerytypename","queryTypeOptions","views","createRef","queryFieldList","searchFieldList","componentDidUpdate","previousProps","filterData","generateBreadCrumData","nformcode","Object","values","ncontrolcode","breadCrumbData","filter","addId","has","get","editId","deleteId","gridColumnListMain","idsName","displayname","dataField","width","selectedQueryType","searchedData","queryBuilderList","qryBuilder","handlePageChange","squerybuildername","float","e","screenName","databaseTableList","databaseviewList","masterdata","gridColumnList","viewMasterData","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faCopy } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddQuery from './AddQuery';\r\nimport AddParameter from './AddParameter';\r\nimport QueryTypeFilter from './QueryTypeFilter';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery,\r\n    comboColumnValues, getColumnNamesByTableName, getTablesName, getModuleFormName,\r\n    getDatabaseTables, executeQuery, getForeignTable, getViewColumns, getMasterData, createQueryBuilder,\r\n    getParameterFromQuery, getSelectedQueryBuilder, updateQueryBuilder, getQueryBuilder\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, queryTypeFilter, tableType, ColumnType } from '../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport rsapi from '../../rsapi';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { Affix } from 'rsuite';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\r\nimport BuildQuery from './BuildQuery';\r\nimport { render } from '@testing-library/react';\r\nimport { format } from 'date-fns';\r\nimport { ProductList } from '../product/product.styled';\r\nimport QueryBuilderParamter from './QueryBuilderParamter';\r\nimport { ReactComponent as ParameterConfigurationIcon } from '../../assets/image/parameter-configuration.svg';\r\nimport { ReactComponent as ParameterMappingIcon } from '../../assets/image/parameter-mapping.svg';\r\nimport DataGridComponent from '../../components/data-grid/data-grid.component';\r\nimport { stringOperatorData } from './QueryBuilderData';\r\n// import {validationData} from './QueryBuilderData';\r\n\r\nconst jsonSql = require('json-sql')({ separatedValues: false });\r\nconst jsonSqlParam = require('json-sql')({ separatedValues: true });\r\n\r\nclass QueryBuilder extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: props.settings ? parseInt(props.settings[14]) : 5,\r\n        };\r\n        const dataStateMain = {\r\n            skip: 0,\r\n            take: props.settings ? parseInt(props.settings[14]) : 5,\r\n        };\r\n        const dataStateUserQuery = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            // modalIsOpen: false,\r\n            parameters: [],\r\n            // objparam: [],\r\n            // objDparam: [],\r\n            queryName: '',\r\n            // queryResult: [],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            dataStateUserQuery: dataStateUserQuery,\r\n            queryTypeName: '',\r\n            selectedcombo: [],\r\n            selectedTableType: [],\r\n            moduleFormName: [],\r\n            ntableTypeCode: -1,\r\n            nFormCode: -1,\r\n            queryType: [],\r\n            tableType: [],\r\n            chartList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25, //tableName : undefined,tableList:[]\r\n            outputColumns: [],\r\n            selectedTableList: [],\r\n            tableColumnList: [],\r\n            foreignTableColumnList: [],\r\n            joinTableList: [],\r\n            symbolsList: [],\r\n            foreignTableList: [],\r\n            count: 0,\r\n            foreignTableCount: [],\r\n            selectedforeignTableList: [],\r\n            filterColumnList: [],\r\n            sqlQuery: false,\r\n            // viewColumnList: [],\r\n            switchRecord: {},\r\n            dataState: dataState,\r\n            dataStateMain: dataStateMain,\r\n            data: [],\r\n            dataMainList: [],\r\n            dataResult: [],\r\n            dataResultMain: [],\r\n            queryType: [{ squerytypename: this.props.intl.formatMessage({ id: \"IDS_VIEWS\" }), nquerytypecode: 1 }, { squerytypename: this.props.intl.formatMessage({ id: \"IDS_SQL\" }), nquerytypecode: 2 }],\r\n            queryTypeOptions: [{ label: this.props.intl.formatMessage({ id: \"IDS_VIEWS\" }), views: 1 }, { label: this.props.intl.formatMessage({ id: \"IDS_SQL\" }), value: 2 }]\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // this.dropItemRef = React.createRef(); \r\n\r\n        this.queryFieldList = ['nquerytypecode', 'ssqlqueryname', 'ssqlquery',\r\n            'sscreenrecordquery', 'sscreenheader', 'svaluemember', 'sdisplaymember', 'ncharttypecode'];\r\n        // this.queryList = [];\r\n\r\n        this.searchFieldList = [\"ssqlqueryname\", \"ssqlquery\", \"sscreenheader\", \"svaluemember\", \"sdisplaymember\",\r\n            \"squerytypename\", \"schartname\"];\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChangeMain = (event) => {\r\n        this.setState({\r\n            dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\r\n            dataStateMain: event.dataStateMain\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let { filterData } = this.state;\r\n        if (this.props.Login.queryData !== previousProps.Login.queryData) {\r\n            this.setState({\r\n                data: this.props.Login.queryData,\r\n                dataResult: process(this.props.Login.queryData, this.state.dataState)\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.queryDataMain !== previousProps.Login.masterData.queryDataMain) {\r\n            if (this.props.Login.masterData.queryDataMain !== undefined) {\r\n                this.setState({\r\n                    dataMainList: this.props.Login.masterData.queryDataMain,\r\n                    dataResultMain: process(this.props.Login.masterData.queryDataMain === null ? [] : this.props.Login.masterData.queryDataMain, this.state.dataStateMain)\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.queryTypeCode !== previousProps.Login.masterData.queryTypeCode) {\r\n            filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\r\n\r\n            const item = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_QUERYTYPE\",\r\n                    \"value\": this.props.Login.masterData.queryTypeCode ?\r\n                        item[0].squerytypename : \"\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n    render() {\r\n        const addId = this.state.controlMap.has(\"Add QueryBuilder\") && this.state.controlMap.get(\"Add QueryBuilder\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit QueryBuilder\") && this.state.controlMap.get(\"Edit QueryBuilder\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete QueryBuilder\") && this.state.controlMap.get(\"Delete QueryBuilder\").ncontrolcode;\r\n        const breadCrumbData = this.state.filterData || [];\r\n        let gridColumnListMain = [];\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.columnList && this.props.Login.masterData.columnList.length > 0) {\r\n            this.props.Login.masterData.columnList.forEach(item => {\r\n                gridColumnListMain.push({ idsName: item.items.displayname[this.props.Login.userInfo.slanguagetypecode], dataField: item.items.columnname, width: '200px' })\r\n            })\r\n        }\r\n        let selectedQueryType = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.queryTypeCode) {\r\n\r\n            selectedQueryType = this.state.queryType.filter(item => item.nquerytypecode === this.props.Login.masterData.queryTypeCode);\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* Start of get display*/}\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData || []}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_QUERYBUILDER\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.queryBuilderList}\r\n                                getMasterDetail={(qryBuilder) => this.props.getSelectedQueryBuilder(qryBuilder, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedQueryBuilder}\r\n                                primaryKeyField=\"nquerybuildercode\"\r\n                                mainField=\"squerybuildername\"\r\n                                //firstField=\"squerybuildername\"\r\n                                // secondField={this.state.selectedcombo[\"nquerytypecode\"] && this.state.selectedcombo[\"nquerytypecode\"].value === queryTypeFilter.LIMSDASHBOARDQUERY ? \"schartname\" : \"\"}\r\n                                // filterColumnData={this.props.filterColumnData}\r\n                                // filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={this.getDatabaseTables}\r\n                                // openModal={() => this.props.getSQLQueryComboService(\"\", \"create\", \"nsqlquerycode\", null,\r\n                                //     this.props.Login.masterData, this.props.Login.userInfo,\r\n                                //     this.props.Login.masterData.SelectedQueryType.nquerytypecode,                                   \r\n                                //     addId)} \r\n                                //{() => this.props.addTest(\"create\", selectedTest, userInfo, addId, this.state.nfilterTestCategory)} Already commented\r\n                                needAccordianFilter={false}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showBuildQuery={false}\r\n                                builderData={this.getDatabaseTables}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_QUERYTYPEFILTER\":\r\n                                            <QueryTypeFilter\r\n                                                queryType={this.state.queryTypeOptions || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                filterQueryType={selectedQueryType[0]}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md=\"8\">\r\n                            <ProductList className=\"panel-main-content\">\r\n                                {this.props.Login.masterData.queryBuilderList && this.props.Login.masterData.queryBuilderList.length > 0 && this.props.Login.masterData.selectedQueryBuilder ?\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedQueryBuilder.squerybuildername}</Card.Title>\r\n                                            <ContentPanel className=\"d-flex product-category\">\r\n                                                <Col md='6' >\r\n                                                    {/* {this.props.Login.masterData.selectedQueryBuilder.squerybuildername} */}\r\n\r\n                                                </Col>\r\n                                                <Col md='6'>\r\n                                                    <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                                        <ProductList className=\"d-inline dropdown badget_menu\">\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                //  data-for=\"tooltip_list_wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_PARAMETERMAPPING\" })}\r\n                                                                onClick={(e) => this.props.getParameterFromQuery(this.props.Login)}\r\n                                                            >\r\n                                                                {/* <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\"/> */}\r\n                                                                <ParameterConfigurationIcon className=\"custom_icons\" width=\"20\" height=\"20\" name=\"configreporticon\" />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                onClick={() => this.confirmDelete(deleteId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                //  data-for=\"tooltip_list_wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_COPYSQL\" })}\r\n                                                                onClick={() => this.copySQLQuery(1)}\r\n                                                            >\r\n\r\n                                                                <FontAwesomeIcon icon={faCopy} />\r\n                                                            </Nav.Link>\r\n                                                        </ProductList>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </ContentPanel>\r\n                                        </Card.Header>\r\n                                        {this.props.Login.masterData.queryDataMain && gridColumnListMain && gridColumnListMain.length > 0 ?\r\n                                            <DataGridComponent\r\n                                                data={this.state.dataMainList}\r\n                                                dataResult={this.state.dataResultMain || []}\r\n                                                dataState={this.state.dataStateMain}\r\n                                                dataStateChange={this.dataStateChangeMain}\r\n                                                extractedColumnList={gridColumnListMain}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                pageable={true}\r\n                                                scrollable={\"scrollable\"}\r\n                                                isActionRequired={false}\r\n                                                isToolBarRequired={true}\r\n                                                isRefreshRequired={false}\r\n                                                selectedId={-1}\r\n                                            />\r\n                                            : <></>\r\n                                        }\r\n                                    </Card>\r\n                                    : \"\"}\r\n\r\n                            </ProductList>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n                {\r\n                    this.props.Login.openPortalModal &&\r\n                    <PortalModalSlideout\r\n                        show={this.props.Login.openPortalModal}\r\n                        closeModal={this.closePortalModal}\r\n                        screenName={this.props.Login.screenName}\r\n                        handleSaveClick={this.save}\r\n                        addComponent={\r\n                            <BuildQuery\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                databaseTableList={this.props.Login.databaseTableList}\r\n                                tableColumnList={this.state.tableColumnList}\r\n                                foreignTableList={this.state.foreignTableList || []}\r\n                                foreignTableColumnList={this.props.Login.foreignTableColumnList || []}\r\n                                // validationData={validationData}\r\n                                count={this.state.count}\r\n                                foreignTableCount={this.state.foreignTableCount}\r\n                                sqlQuery={this.state.sqlQuery}\r\n                                viewMasterListByRule={this.props.Login.viewMasterListByRule || []}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                onExecuteRule={this.onExecuteRule}\r\n                                onInputChange={this.onInputChange}\r\n                                deleteRule={this.deleteRule}\r\n                                clearRule={this.clearRule}\r\n                                resetRule={this.resetRule}\r\n                                onSymbolChange={this.onSymbolChange}\r\n                                // onForeignTableChange={this.onForeignTableChange}\r\n                                // addJoinTable={this.addJoinTable}\r\n                                onQueryTypeOnclick={this.onQueryTypeOnclick}\r\n\r\n                                onRuleChange={this.onRuleChange}\r\n                                onViewComboChange={this.onViewComboChange}\r\n                                addRule={this.addRule}\r\n                                onConditionClick={this.onConditionClick}\r\n                                onMasterDataChange={this.onMasterDataChange}\r\n                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                databaseviewList={this.props.Login.databaseviewList}\r\n                                addRuleList={this.props.Login.addRuleList || []}\r\n                                viewColumnListByRule={this.props.Login.viewColumnListByRule || []}\r\n                                masterdata={this.props.Login.masterdata}\r\n                                switchRecord={this.state.switchRecord}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult || []}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                gridColumnList={this.props.Login.gridColumnList || []}\r\n                                queryType={this.state.queryType}\r\n                                addAggregate={this.addAggregate}\r\n                                addAggregateList={this.props.Login.addAggregateList || []}\r\n                                onAggregateChange={this.onAggregateChange}\r\n                                deleteAggregate={this.deleteAggregate}\r\n                                addOrderby={this.addOrderby}\r\n                                addOrderbyList={this.props.Login.addOrderbyList || []}\r\n                                onOrderbyChange={this.onOrderbyChange}\r\n                                deleteOrderby={this.deleteOrderby}\r\n                                addGroup={this.addGroup}\r\n                                addGroupList={this.props.Login.addGroupList || []}\r\n                                copySQLQuery={this.copySQLQuery}\r\n                                onFilterComboChange={this.onFilterComboChange}\r\n                                selectFields={this.props.Login.selectFields || []}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={\"create\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_PARAMETERMAPPING\" })}\r\n                        onExecuteClick={this.saveParam}\r\n                        showExecute={true}\r\n                        showParam={true}\r\n                        hideSave={true}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            <QueryBuilderParamter\r\n                                onParamInputChange={this.onParamInputChange}\r\n                                selectedQueryBuilder={this.props.Login.masterData.selectedQueryBuilder || []}\r\n                                viewMasterData={this.props.Login.viewMasterData || []}\r\n                                comboData={this.props.Login.comboData || []}\r\n                                onParamComboChange={this.onParamComboChange}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n    copySQLQuery = (type) => {\r\n        let count = 0;\r\n        if (type === 2) {\r\n\r\n            let query = this.state.selectedRecord[\"squerywithparam\"] || \"\";\r\n\r\n            if (this.state.selectedRecord[\"sdefaultvalue\"] && this.state.selectedRecord[\"sdefaultvalue\"]) {\r\n                this.state.selectedRecord[\"sdefaultvalue\"].forEach((dataItem) => {\r\n\r\n                    if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n\r\n                        if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                            dataItem.value.forEach((item, index) => {\r\n\r\n                                count++;\r\n                                if (index === 0) {\r\n                                    if (dataItem.value.length === 1) {\r\n                                        query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.viewvaluemember + \"$P\");\r\n                                    }\r\n                                } else {\r\n                                    if (query.includes(\"$p\" + count + \",\")) {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count, \"\");\r\n                                    }\r\n                                }\r\n                            })\r\n                        } else {\r\n                            count++;\r\n                            query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\r\n                        }\r\n                    }\r\n                    else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                        dataItem.items.sforeigncolumnname !== \"\") {\r\n                        if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                            dataItem.value.forEach((item, index) => {\r\n\r\n                                count++;\r\n                                if (index === 0) {\r\n                                    if (dataItem.value.length === 1) {\r\n                                        query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                                    }\r\n\r\n                                } else {\r\n                                    if (query.includes(\"$p\" + count + \",\")) {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count, \"\");\r\n                                    }\r\n\r\n                                }\r\n                            })\r\n                        } else {\r\n                            count++;\r\n                            query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                        }\r\n                    } else {\r\n                        count++;\r\n                        query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.columnname + \"$P\");\r\n                    }\r\n                })\r\n            }\r\n            if (query.includes(\"$L\")) {\r\n                query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\r\n            }\r\n            navigator.clipboard.writeText(query);\r\n\r\n        } else {\r\n            let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"] || \"\";\r\n\r\n            if (this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"] && this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value) {\r\n                const sdefaultValue = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"sdefaultvalue\"].value);\r\n\r\n                sdefaultValue.sdefaultvalue.forEach((dataItem, index) => {\r\n                    if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n                        if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                            dataItem.value.forEach((item, index) => {\r\n\r\n                                count++;\r\n                                if (index === 0) {\r\n                                    if (dataItem.value.length === 1) {\r\n                                        query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.viewvaluemember + \"$P\");\r\n                                    }\r\n                                } else {\r\n                                    if (query.includes(\"$p\" + count + \",\")) {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count, \"\");\r\n                                    }\r\n                                }\r\n                            })\r\n                        } else {\r\n                            count++;\r\n                            query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.viewvaluemember + \"$P\");\r\n                        }\r\n                    }\r\n                    else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                        dataItem.items.sforeigncolumnname !== \"\") {\r\n                        if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                            dataItem.value.forEach((item, index) => {\r\n\r\n                                count++;\r\n                                if (index === 0) {\r\n                                    if (dataItem.value.length === 1) {\r\n                                        query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                                    }\r\n\r\n                                } else {\r\n                                    if (query.includes(\"$p\" + count + \",\")) {\r\n                                        query = query.replace(\"$p\" + count + \",\", \"\");\r\n                                    } else {\r\n                                        query = query.replace(\"$p\" + count, \"\");\r\n                                    }\r\n\r\n                                }\r\n                            })\r\n                        } else {\r\n                            count++;\r\n                            query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.sforeigncolumnname + \"$P\");\r\n                        }\r\n                    } else {\r\n                        count++;\r\n                        query = query.replace(\"$p\" + count, \"P$\" + dataItem.items.columnname + \"$P\");\r\n                    }\r\n                })\r\n            }\r\n            if (query.includes(\"$L\")) {\r\n                query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\r\n            }\r\n            navigator.clipboard.writeText(query);\r\n        }\r\n\r\n\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"querybuilder\",\r\n            methodUrl: \"QueryBuilder\",\r\n            // displayName: \"IDS_DASHBOARDTYPES\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    saveParam = (saveType, formRef) => {\r\n\r\n        let count = 0;\r\n\r\n        let query = this.props.Login.masterData.selectedQueryBuilder[\"squerywithparam\"];\r\n\r\n        this.props.Login.comboData.sdefaultvalue.forEach((dataItem) => {\r\n\r\n            if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n\r\n                let sqryData = \"\";\r\n                if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                    dataItem.value.forEach((item) => {\r\n\r\n                        count++;\r\n\r\n                        if (isNaN(item.value)) {\r\n                            query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\r\n                        } else {\r\n                            query = query.replace(\"$p\" + count, item.value);\r\n                        }\r\n                    })\r\n\r\n                } else {\r\n                    count++;\r\n                    if (isNaN(dataItem.value.value)) {\r\n                        query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\r\n                    } else {\r\n                        query = query.replace(\"$p\" + count, dataItem.value.value);\r\n                    }\r\n                }\r\n\r\n\r\n            } else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                dataItem.items.sforeigncolumnname !== \"\") {\r\n\r\n                if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                    dataItem.value.forEach((item) => {\r\n\r\n                        count++;\r\n\r\n                        if (isNaN(item.value)) {\r\n                            query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\r\n                        } else {\r\n                            query = query.replace(\"$p\" + count, item.value);\r\n                        }\r\n                    })\r\n\r\n\r\n                } else {\r\n                    count++;\r\n                    if (isNaN(dataItem.value.value)) {\r\n                        query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\r\n                    } else {\r\n                        query = query.replace(\"$p\" + count, dataItem.value.value);\r\n                    }\r\n                }\r\n\r\n            } else if (dataItem.items.columntype === ColumnType.DATATIME\r\n                || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true\r\n                && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\r\n                count++;\r\n                query = query.replace(\"$p\" + count, \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\r\n\r\n\r\n            } else {\r\n                count++;\r\n                query = query.replace(\"$p\" + count, \"'\" + dataItem.value + \"'\");\r\n            }\r\n        })\r\n        if (query.includes(\"$L\")) {\r\n            query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\r\n        }\r\n        const jsonData = JSON.parse(this.props.Login.masterData.selectedQueryBuilder[\"jsondata\"].value);\r\n        const inputParam = {\r\n            sgeneratedquery: query,\r\n            columnList: jsonData[\"columnList\"],\r\n            userInfo: this.props.Login.userInfo,\r\n\r\n        }\r\n        let inputData = [];\r\n        this.props.updateQueryBuilder(inputParam, inputData, this.props.Login.masterData);\r\n\r\n    }\r\n    save = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        if (selectedRecord[\"querybuildername\"] && selectedRecord[\"querybuildername\"].length > 0) {\r\n            if (selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0) {\r\n\r\n                let inputData = [];\r\n                let jsondata = {}\r\n                let postParam = undefined;\r\n\r\n                if (selectedRecord[\"sdefaultvalue\"].length > 0) {\r\n                    selectedRecord[\"sdefaultvalue\"].forEach((item, i) => {\r\n                        if (item.symbolObject.items.symbolType === 4) {\r\n                            delete item.symbolObject.items[\"replacewith\"];\r\n                        }\r\n                    })\r\n                }\r\n\r\n                postParam = { inputListName: \"QueryBuilder\", selectedObject: \"selectedQueryBuilder\", primaryKeyField: \"nquerybuildercode\" };\r\n\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                inputData[\"queryBuilder\"] = { \"nstatus\": 1 };\r\n\r\n                jsondata[\"groupList\"] = selectedRecord[\"groupList\"];\r\n                jsondata[\"aggregate\"] = selectedRecord[\"aggregate\"];\r\n                jsondata[\"orderby\"] = selectedRecord[\"orderby\"];\r\n                jsondata[\"columnList\"] = this.props.Login.viewColumnListByRule; //selectedRecord[\"filtercolumns\"];\r\n                inputData[\"sgeneratedquery\"] = selectedRecord[\"sgeneratedquery\"];\r\n\r\n\r\n                inputData[\"queryBuilder\"][\"squerybuildername\"] = selectedRecord[\"querybuildername\"];\r\n                inputData[\"queryBuilder\"][\"nquerytype\"] = 1;\r\n                inputData[\"queryBuilder\"][\"sviewname\"] = selectedRecord[\"sviewname\"].label;\r\n                inputData[\"queryBuilder\"][\"squerywithparam\"] = selectedRecord[\"squerywithparam\"];\r\n                inputData[\"queryBuilder\"][\"squerywithvalue\"] = selectedRecord[\"sgeneratedquery\"];\r\n                inputData[\"queryBuilder\"][\"sdefaultvalue\"] = { sdefaultvalue: selectedRecord[\"sdefaultvalue\"] };\r\n                inputData[\"queryBuilder\"][\"jsondata\"] = jsondata;\r\n\r\n                const inputParam = {\r\n                    classUrl: \"querybuilder\",\r\n                    methodUrl: \"QueryBuilder\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"create\", saveType, formRef, postParam\r\n                }\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\r\n                // this.props.createQueryBuilder(inputData, this.props.Login);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTANYCOLUMNS\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_INVALIDQUERYBUILDERNAME\" }));\r\n        }\r\n    }\r\n    deleteQB = (ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        // let postParam = {\r\n        //     inputListName: \"QueryBuilder\",\r\n        //     selectedObject: \"selectedDashBoardTypes\",\r\n        //     primaryKeyField: \"ndashboardtypecode\",\r\n        //     primaryKeyValue: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n        //     fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\",\r\n        //     fecthInputObject: { userinfo: this.props.Login.userInfo }\r\n        // };\r\n        inputData[\"queryBuilder\"] = this.props.Login.masterData.selectedQueryBuilder;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n\r\n        const inputParam = {\r\n            methodUrl: \"QueryBuilder\",\r\n            classUrl: \"querybuilder\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n\r\n    }\r\n\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteQB(\"delete\", ncontrolCode));\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n\r\n        if (this.state.selectedcombo[\"nquerytypecode\"]) {\r\n            console.log(this.state.selectedcombo[\"nquerytypecode\"].value);\r\n        }\r\n        const nquerytypecode = this.state.selectedcombo[\"nquerytypecode\"] ?\r\n            this.state.selectedcombo[\"nquerytypecode\"].value : this.props.Login.masterData.queryTypeCode;\r\n\r\n        this.props.getQueryBuilder(nquerytypecode, this.props.Login.userInfo, this.props.Login.masterData);\r\n\r\n\r\n    }\r\n\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    onParamComboChange = (data, index) => {\r\n\r\n        let comboData = this.props.Login.comboData;\r\n        comboData[\"sdefaultvalue\"][index].value = data;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                comboData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onParamInputChange = (event, type, index, dataItem) => {\r\n        let comboData = this.props.Login.comboData;\r\n        if (type === 2) {\r\n            const inputValue = event.target.value;\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                comboData[\"sdefaultvalue\"][index].value = event.target.value;\r\n            }\r\n        }\r\n        else if (type === 1) {\r\n            comboData[\"sdefaultvalue\"][index].value = event.target.checked;\r\n        }\r\n        else if (type === 3) {\r\n\r\n            if (dataItem.symbolObject.items.symbolType === 4) {\r\n                // const symbolObject = stringOperatorData.filter(data => data.value === dataItem.symbolObject.value);\r\n                let symbolObject = \"\"\r\n                if (dataItem.symbolObject.value === 7 || dataItem.symbolObject.value === 8) {\r\n                    symbolObject = \"'%_%'\";\r\n                } else if (dataItem.symbolObject.value === 9) {\r\n                    symbolObject = \"'_%'\";\r\n                } else {\r\n                    symbolObject = \"'%_'\";\r\n                }\r\n                const index1 = symbolObject.indexOf('_');\r\n                let inputname = undefined\r\n\r\n                inputname = symbolObject.substr(0, index1) + event.target.value + symbolObject.substr(index1 + 1);\r\n                inputname = inputname.slice(1, inputname.length - 1);\r\n\r\n                comboData[\"sdefaultvalue\"][index].value = inputname;\r\n                comboData[\"sdefaultvalue\"][index].showInputValue = event.target.value;\r\n            } else {\r\n                comboData[\"sdefaultvalue\"][index].value = event.target.value;\r\n            }\r\n        }\r\n        else {\r\n\r\n\r\n            comboData[\"sdefaultvalue\"][index].value = event.target.value;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                comboData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleFilterDateChange = (dateName, dateValue, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[\"groupList\"][groupIndex][index][dateName] = dateValue;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedcombo = this.state.selectedcombo || {};\r\n        selectedcombo[fieldName] = comboData;\r\n\r\n        this.setState({ selectedcombo });\r\n    }\r\n\r\n    onViewComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        const inputParam = {\r\n            sviewname: comboData.value,\r\n            selectedRecord,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        this.props.getViewColumns(inputParam);\r\n    }\r\n\r\n    onAggregateChange = (comboData, fieldName, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"aggregate\"] = selectedRecord[\"aggregate\"] || [];\r\n        if (fieldName === \"columnname\") {\r\n            selectedRecord[\"aggregate\"][index] = { \"columnname\": comboData, \"aggfunctionname\": \"\" };\r\n        } else {\r\n            if (selectedRecord[\"aggregate\"][index][\"columnname\"] && selectedRecord[\"aggregate\"][index][\"columnname\"] !== undefined) {\r\n                selectedRecord[\"aggregate\"][index][\"aggfunctionname\"] = comboData;\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        // this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    onRuleChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        this.clearSelectedRule(selectedRecord, index);\r\n        const sqlQuery = this.props.Login.sqlQuery;\r\n        const oldselectedRecord = selectedRecord;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        const tableData = comboData.items;\r\n        const mastertablename = tableData.mastertablename;\r\n\r\n        if (comboData.items.needmasterdata && mastertablename) {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                data: {\r\n                    nflag: 2,\r\n                    mastertablename,\r\n                    valuemember: tableData.valuemember,\r\n                    displaymember: tableData.displaymember,\r\n                },\r\n                selectedRecord,\r\n                groupIndex,\r\n                index,\r\n                optionId: tableData.valuemember\r\n            };\r\n            this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\r\n        } else if (comboData.items && comboData.items.columntype === ColumnType.COMBO) {\r\n            if (sqlQuery) {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    stablename: comboData.items.foriegntablename,\r\n                    scolumnname: comboData.value,\r\n                    selectedRecord,\r\n                    groupIndex,\r\n                    index\r\n                };\r\n                this.props.getForeignTable(inputParam, 'column');\r\n            } else {\r\n                selectedRecord[\"groupList\"][groupIndex][index][`${comboData.items.sforeigncolumnname}`] = \"\";\r\n                const inputParam = {\r\n                    data: { ...comboData.items, nflag: 1 },\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedRecord,\r\n                    groupIndex,\r\n                    index,\r\n                    optionId: comboData.items.sforeigncolumnname\r\n                };\r\n                this.props.getMasterData(inputParam, this.props.Login.viewMasterListByRule);\r\n            }\r\n        } else if (comboData.items && comboData.items.columntype === ColumnType.TEXTINPUT\r\n            && oldselectedRecord[\"groupList\"][groupIndex][index][fieldName].items.columntype !== ColumnType.TEXTINPUT) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] = \"\";\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    onOrderbyChange = (comboData, fieldName, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"orderby\"] = selectedRecord[\"orderby\"] || [];\r\n        if (fieldName === \"columnname\") {\r\n            selectedRecord[\"orderby\"][index] = { \"columnname\": comboData, \"ordertype\": \"\" };\r\n        } else {\r\n            if (selectedRecord[\"orderby\"][index][\"columnname\"] && selectedRecord[\"orderby\"][index][\"columnname\"] !== undefined) {\r\n                selectedRecord[\"orderby\"][index][\"ordertype\"] = comboData;\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        // this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    deleteOrderby = (index) => {\r\n        let addOrderbyList = this.props.Login.addOrderbyList;\r\n        let selectedRecord = this.state.selectedRecord;\r\n\r\n        selectedRecord[\"orderby\"].splice(index, 1);\r\n        addOrderbyList.splice(index, 1);\r\n        addOrderbyList.forEach((data, index) => {\r\n            addOrderbyList[index] = index;\r\n        })\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addOrderbyList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    addOrderby = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"sviewname\"]) {\r\n            const addOrderbyList = this.props.Login.addOrderbyList || [];\r\n            let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n            const arrayLength = addOrderbyList.length;\r\n            viewColumnListByRule = this.props.Login.viewColumnList;\r\n            addOrderbyList[arrayLength] = arrayLength;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    addOrderbyList,\r\n                    viewColumnListByRule\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n        }\r\n    }\r\n    deleteAggregate = (index) => {\r\n        let addAggregateList = this.props.Login.addAggregateList;\r\n        let selectedRecord = this.state.selectedRecord;\r\n\r\n        selectedRecord[\"aggregate\"].splice(index, 1);\r\n        addAggregateList.splice(index, 1);\r\n        addAggregateList.forEach((data, index) => {\r\n            addAggregateList[index] = index;\r\n        })\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addAggregateList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n    addAggregate = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"sviewname\"]) {\r\n            // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\r\n            const addAggregateList = this.props.Login.addAggregateList || [];\r\n            let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n            const arrayLength = addAggregateList.length;\r\n            viewColumnListByRule = this.props.Login.viewColumnList;\r\n            addAggregateList[arrayLength] = arrayLength;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    addAggregateList,\r\n                    viewColumnListByRule\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTGROUPBY\" }));\r\n            // }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n        }\r\n    }\r\n    addRule = (type, groupIndex) => {\r\n        const { selectedRecord } = this.state;\r\n        if (type === \"sql\") {\r\n            // let addRuleList = this.props.Login.addRuleList || [];\r\n            // if (addRuleList.length > 0) {\r\n            //     const arrayLength = addRuleList.length;\r\n            //     addRuleList[arrayLength] = arrayLength;\r\n            //     selectedRecord[\"button_and_\" + arrayLength] = true;\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             addRuleList,\r\n            //             selectedRecord\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     addRuleList[0] = 0;\r\n            //     this.props.getDatabaseTables(this.props.Login.userInfo, this.props.Login.sqlQuery, { addRuleList, selectedRecord: {} });\r\n            // }\r\n\r\n        } else {\r\n            if (selectedRecord[\"sviewname\"]) {\r\n                let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n\r\n\r\n                // const addRuleList = this.props.Login.addRuleList || [];\r\n                // const arrayLength = addRuleList.length;\r\n                // addRuleList[arrayLength] = arrayLength;\r\n\r\n\r\n                const addGroupList = this.props.Login.addGroupList || [];\r\n                const arrayLength = addGroupList[groupIndex];\r\n                addGroupList[groupIndex] = arrayLength + 1;\r\n\r\n                // const addGroupList = {...this.props.Login.addGroupList, [groupIndex]: addRuleList};\r\n\r\n                selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\r\n\r\n                // viewColumnListByRule[groupIndex][arrayLength] = this.props.Login.viewColumnList;\r\n                viewColumnListByRule = this.props.Login.viewColumnList;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        addGroupList,\r\n                        viewColumnListByRule\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    addGroup = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        var sql1 = jsonSql.build({\r\n            table: 'testmaster',\r\n            alias: 'tm',\r\n            join: [{\r\n                type: 'inner',\r\n                table: 'testcategory',\r\n                alias: 'tc',\r\n                on: { 'tm.ntestcategorycode': 'tc.ntestcategorycode' }\r\n            },\r\n            {\r\n                type: 'inner',\r\n                table: 'transactionstatus',\r\n                alias: 'ts',\r\n                on: { 'tm.naccredited': 'ts.ntranscode' }\r\n            }]\r\n        });\r\n        console.log(sql1.query);\r\n\r\n        var sql21 = jsonSql.build({\r\n            table: 'testmaster',\r\n            alias: 'tm',\r\n            join: [{\r\n                type: 'inner',\r\n                table: 'testcategory',\r\n                alias: 'tc',\r\n                on: { 'tm.ntestcategorycode': 'tc.ntestcategorycode' }\r\n            },\r\n            {\r\n                type: 'right outer',\r\n                table: 'transactionstatus',\r\n                alias: 'ts',\r\n                on: { 'tm.naccredited': 'ts.ntranscode' }\r\n            },\r\n            {\r\n                type: 'left outer',\r\n                table: 'transactionstatus',\r\n                alias: 'ts',\r\n                on: [{ 'tm.naccredited': 'ts.ntranscode' }, { 'tc.naccredited': 'ts.ntranscode' }]\r\n            }],\r\n            condition: [\r\n                { a: { $gt: 1 } },\r\n                { b: { $lt: 10 } }\r\n            ],\r\n            group: ['a', 'b']\r\n        });\r\n        console.log(sql21.query);\r\n\r\n        if (selectedRecord[\"sviewname\"]) {\r\n            let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n            const addGroupList = this.props.Login.addGroupList || [];\r\n            const arrayLength = addGroupList.length;\r\n            addGroupList[arrayLength] = 1;\r\n            // viewColumnListByRule[arrayLength] = [];\r\n            // viewColumnListByRule[arrayLength].push(this.props.Login.viewColumnList);\r\n            viewColumnListByRule = this.props.Login.viewColumnList;\r\n            if (arrayLength === 0) {\r\n                selectedRecord[\"groupList\"] = [];\r\n                selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\r\n            }\r\n            selectedRecord[\"groupList\"][arrayLength] = [];\r\n            selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\r\n            selectedRecord[\"groupList\"][arrayLength][0] = {};\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    addGroupList,\r\n                    viewColumnListByRule,\r\n                    selectedRecord\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTVIEW\" }));\r\n        }\r\n    }\r\n    getDatabaseTables = () => {\r\n        const sqlQuery = false;\r\n        this.setState({ selectedRecord: {} });\r\n        this.props.getDatabaseTables(this.props.Login.userInfo, sqlQuery, {\r\n            addRuleList: [], addGroupList: [],\r\n            addAggregateList: [], addOrderbyList: []\r\n        });\r\n\r\n    }\r\n\r\n    closePortalModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: false, selectedRecord: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onExecuteRule = () => {\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"sgeneratedquery\"]) {\r\n\r\n\r\n            let query = selectedRecord[\"squerywithparam\"];\r\n\r\n            let count = 0\r\n            selectedRecord[\"sdefaultvalue\"].forEach((dataItem) => {\r\n\r\n                if (dataItem.items.needmasterdata && dataItem.items.mastertablename) {\r\n\r\n                    let sqryData = \"\";\r\n                    if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                        dataItem.value.forEach((item) => {\r\n\r\n                            count++;\r\n\r\n                            if (isNaN(item.value)) {\r\n                                query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\r\n                            } else {\r\n                                query = query.replace(\"$p\" + count, item.value);\r\n                            }\r\n                        })\r\n\r\n\r\n                    } else {\r\n                        count++;\r\n                        if (isNaN(dataItem.value.value)) {\r\n                            query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\r\n                        } else {\r\n                            query = query.replace(\"$p\" + count, dataItem.value.value);\r\n                        }\r\n                    }\r\n\r\n\r\n                } else if (dataItem.items.sforeigncolumnname !== undefined &&\r\n                    dataItem.items.sforeigncolumnname !== \"\") {\r\n\r\n                    if (dataItem.symbolObject.items[\"ismulti\"] && dataItem.symbolObject.items[\"ismulti\"] === true) {\r\n\r\n                        dataItem.value.forEach((item) => {\r\n\r\n                            count++;\r\n\r\n                            if (isNaN(item.value)) {\r\n                                query = query.replace(\"$p\" + count, \"'\" + item.value + \"'\");\r\n                            } else {\r\n                                query = query.replace(\"$p\" + count, item.value);\r\n                            }\r\n                        })\r\n\r\n\r\n                    } else {\r\n                        count++;\r\n                        if (isNaN(dataItem.value.value)) {\r\n                            query = query.replace(\"$p\" + count, \"'\" + dataItem.value.value + \"'\");\r\n                        } else {\r\n                            query = query.replace(\"$p\" + count, dataItem.value.value);\r\n                        }\r\n                    }\r\n\r\n                } else if (dataItem.items.columntype === ColumnType.DATATIME\r\n                    || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true\r\n                    && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\r\n\r\n                    count++;\r\n                    query = query.replace(\"$p\" + count, \"'\" + format(new Date(dataItem.value), \"yyyy-MM-dd HH:mm:ss.SS\") + \"'\");\r\n\r\n\r\n                } else {\r\n                    count++;\r\n                    query = query.replace(\"$p\" + count, \"'\" + dataItem.value + \"'\");\r\n                }\r\n\r\n            });\r\n            if (query.includes(\"$L\")) {\r\n                query = query.replace(\"$L\", \"'\" + this.props.Login.userInfo.slanguagetypecode + \"'\");\r\n            }\r\n            const inputParam = {\r\n                sgeneratedquery: query,//selectedRecord[\"sgeneratedquery\"],\r\n                selectedRecord,\r\n                columnList: this.props.Login.viewColumnListByRule, //selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"] || this.props.Login.viewColumnListByRule,\r\n                userInfo: this.props.Login.userInfo,\r\n\r\n            }\r\n            this.props.executeQuery(inputParam);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_QUERYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    deleteRule = (groupIndex, index) => {\r\n        let addGroupList = this.props.Login.addGroupList;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\r\n        // selectedRecord[`button_and_${index}`] && delete selectedRecord[`button_and_${index}`];\r\n        // selectedRecord[`button_or_${index}`] && delete selectedRecord[`button_or_${index}`];\r\n        // selectedRecord[`notoperator_${index}`] && delete selectedRecord[`notoperator_${index}`];\r\n\r\n        if (addGroupList[groupIndex] === 0) {\r\n            addGroupList.splice(groupIndex, 1);\r\n            selectedRecord[\"groupList\"].splice(index, 1);\r\n        } else {\r\n            selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\r\n        }\r\n\r\n        // this.clearSelectedRule(selectedRecord, index);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addGroupList, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    clearSelectedRule(selectedRecord, index) {\r\n        selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\r\n        selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\r\n        selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\r\n        selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\r\n        selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\r\n        selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\r\n        selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\r\n    }\r\n\r\n    clearRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList: [], selectedRecord: { sviewname }, sqlQuery: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    resetRule = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addRuleList: [], addGroupList: [],\r\n                addAggregateList: [], addOrderbyList: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.setState({\r\n            selectedRecord: {}\r\n        });\r\n\r\n    }\r\n\r\n    onSymbolChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        const items = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items;\r\n        selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"][\"items\"][\"needmasterdata\"] = items.needmasterdata !== undefined ? comboData.items.needmasterdata : false;\r\n        if (comboData.items.symbolType === 2 || comboData.items.symbolType === 3) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"valuemember\"]];\r\n            selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]] && delete selectedRecord[\"groupList\"][groupIndex][index][items[\"foreigncolumnname\"]];\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\r\n        } else if (comboData.items.symbolType === 5 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType !== 5) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\r\n            selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"] && delete selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\r\n        } else if ((comboData.items.symbolType === 6 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 1)\r\n            || (comboData.items.symbolType === 1 && oldSelectedRecord.items && oldSelectedRecord.items.symbolType === 6)) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.sforeigncolumnname}`];\r\n            selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`] && delete selectedRecord[\"groupList\"][groupIndex][index][`${items.valuemember}`];\r\n        } else {\r\n\r\n        }\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onInputChange = (event, type, groupIndex, index) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (type === 2) {\r\n            const inputValue = event.target.value;\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(inputValue) || inputValue === \"\") {\r\n                selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\r\n            }\r\n\r\n        }\r\n        else if (type === 1) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.checked;\r\n        }\r\n        else if (type === 3) {\r\n            selectedRecord[\"groupList\"][groupIndex][index][event.target.name] = event.target.value;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    generateFilterQuery = (selectedRecord) => {\r\n\r\n        const addGroupList = this.props.Login.addGroupList;\r\n        jsonSql.setDialect('mssql');\r\n        let databaseCondition = [];\r\n        let displayCondition = [];\r\n        let databaseConditionParam = [];\r\n        let fieldWithValue = [];\r\n        let notOperator = false;\r\n        if (addGroupList && addGroupList.length > 0) {\r\n\r\n            let groupConditionDatabase = [];\r\n            let groupConditionDatabaseParam = [];\r\n            let groupConditionDisplay = [];\r\n\r\n\r\n            addGroupList.forEach((items, groupIndex) => {\r\n                let symbolObject = {};\r\n\r\n\r\n                databaseCondition = [];\r\n                databaseConditionParam = [];\r\n                displayCondition = [];\r\n\r\n                [...Array(items)].map((data, index) => {\r\n\r\n                    if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"]) {\r\n                        symbolObject = selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"] && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items && selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"].items || {};\r\n\r\n                        const current_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\r\n                        const current_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`];\r\n                        const next_button_and = selectedRecord[\"groupList\"][groupIndex][`button_and`];\r\n                        const next_button_or = selectedRecord[\"groupList\"][groupIndex][`button_or`] ? selectedRecord[\"groupList\"][groupIndex][`button_or`] : false;\r\n\r\n                        let inputname = selectedRecord[\"groupList\"][groupIndex][index][\"sinputname\"];\r\n                        const symbolname = symbolObject.symbol;\r\n                        let numericinput = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinput\"];\r\n                        const columnLabel = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].label;\r\n                        const columnValue = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].value;\r\n                        const snumericinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"snumericinputtwo\"];\r\n                        let columnName = undefined;\r\n                        const needmasterdata = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata ?\r\n                            selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata : false;\r\n\r\n                        if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.needmasterdata) {\r\n                            columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.valuemember;\r\n                        } else if (selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname) {\r\n                            columnName = selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.sforeigncolumnname;\r\n                        }\r\n                        const dateinput = selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinput\"]), \"yyyy-MM-dd HH:mm:ss.SS\")//selectedRecord[\"dateinput_\" + index];\r\n                        const dateinputtwo = selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"] && format(new Date(selectedRecord[\"groupList\"][groupIndex][index][\"dateinputtwo\"]), \"yyyy-MM-dd HH:mm:ss.SS\")//selectedRecord[\"dateinputtwo_\" + index];\r\n\r\n                        if (symbolObject && inputname) {\r\n                            if (symbolObject.symbolType === 4) {\r\n                                const showInputValue = inputname;\r\n                                const index1 = symbolObject.replacewith.indexOf('_');\r\n                                inputname = symbolObject.replacewith.substr(0, index1) + inputname + symbolObject.replacewith.substr(index1 + 1);\r\n                                inputname = inputname.slice(1, inputname.length - 1);\r\n\r\n                                databaseCondition.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: inputname } });\r\n                                databaseConditionParam.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                fieldWithValue.push({ columnName: columnValue, value: inputname, showInputValue: showInputValue, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            } else {\r\n                                databaseCondition.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: inputname } });\r\n                                databaseConditionParam.push({ [columnValue]: { [symbolname]: inputname } });\r\n                                fieldWithValue.push({ columnName: columnValue, value: inputname, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            }\r\n                        } else if (symbolObject && numericinput && symbolObject.symbolType !== 5) {\r\n                            databaseCondition.push({ [columnValue]: { [symbolname]: numericinput } });\r\n                            displayCondition.push({ [columnLabel]: { [symbolname]: numericinput } });\r\n                            databaseConditionParam.push({ [columnValue]: { [symbolname]: numericinput } });\r\n                            fieldWithValue.push({ columnName: columnValue, value: numericinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                        } else if (symbolObject && symbolObject.symbolType === 2\r\n                            || symbolObject && symbolObject.symbolType === 3) {\r\n                            databaseCondition.push({ [columnValue]: { [symbolname]: '' } });\r\n                            displayCondition.push({ [columnLabel]: { [symbolname]: '' } });\r\n                            databaseConditionParam.push({ [columnValue]: { [symbolname]: '' } });\r\n                            fieldWithValue.push({ columnName: columnValue, value: '', symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                        } else if (symbolObject && numericinput && snumericinputtwo && symbolObject.symbolType === 5) {\r\n                            if (symbolObject.symbol === \"\") {\r\n                                const tempValue = [{ [columnValue]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                { [columnValue]: { [symbolObject.replacewith[1]]: snumericinputtwo } }];\r\n                                const tempValue1 = [{ [columnLabel]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                { [columnLabel]: { [symbolObject.replacewith[1]]: snumericinputtwo } }];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n\r\n                            } else {\r\n                                const tempValue = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnValue]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                        { [columnValue]: { [symbolObject.replacewith[1]]: snumericinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                const tempValue1 = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnLabel]: { [symbolObject.replacewith[0]]: +numericinput } },\r\n                                        { [columnLabel]: { [symbolObject.replacewith[1]]: snumericinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n                            }\r\n                        } else if (symbolObject && symbolObject.symbolType === 6 && columnName && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\r\n\r\n                            const data = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return \"'\" + item.value + \"'\" }) || [];\r\n                            const data1 = selectedRecord[\"groupList\"][groupIndex][index][columnName] && selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return item.label }) || [];\r\n                            if (data.length > 0) {\r\n                                if (needmasterdata) {\r\n                                    databaseCondition.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: { [symbolname]: data } });\r\n                                    databaseConditionParam.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: { [symbolname]: data } });\r\n                                    fieldWithValue.push({ columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember, value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return item }), symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                } else {\r\n                                    databaseCondition.push({ [columnValue]: { [symbolname]: data } });\r\n                                    databaseConditionParam.push({ [columnValue]: { [symbolname]: data } });\r\n                                    fieldWithValue.push({ columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember, value: selectedRecord[\"groupList\"][groupIndex][index][columnName].map(item => { return item }), symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                }\r\n                            }\r\n                            if (data1.length > 0) {\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: data1 } });\r\n                            }\r\n                            // }\r\n                        } else if (symbolObject && columnName && symbolObject.isInputVisible && selectedRecord[\"groupList\"][groupIndex][index][columnName]) {\r\n                            if (needmasterdata) {\r\n                                databaseCondition.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                databaseConditionParam.push({ [selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                fieldWithValue.push({ columnName: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items.viewvaluemember, value: selectedRecord[\"groupList\"][groupIndex][index][columnName], symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            } else {\r\n                                databaseCondition.push({ [columnValue]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].value } });\r\n                                displayCondition.push({ [columnLabel]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                databaseConditionParam.push({ [columnValue]: { [symbolname]: selectedRecord[\"groupList\"][groupIndex][index][columnName].label } });\r\n                                fieldWithValue.push({ columnName: columnValue, value: selectedRecord[\"groupList\"][groupIndex][index][columnName], symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            }\r\n                        } else if (symbolObject && dateinput && symbolObject.symbolType !== 5) {\r\n                            databaseCondition.push({ [columnValue]: { [symbolname]: dateinput } });\r\n                            displayCondition.push({ [columnLabel]: { [symbolname]: dateinput } });\r\n                            databaseConditionParam.push({ [columnValue]: { [symbolname]: dateinput } });\r\n                            fieldWithValue.push({ columnName: columnValue, value: dateinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                        } else if (symbolObject && dateinput && dateinputtwo && symbolObject.symbolType === 5) {\r\n                            if (symbolObject.symbol === \"\") {\r\n                                const tempValue = [{ [columnValue]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                { [columnValue]: { [symbolObject.replacewith[1]]: dateinputtwo } }];\r\n                                const tempValue1 = [{ [columnLabel]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                { [columnLabel]: { [symbolObject.replacewith[1]]: dateinputtwo } }];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinputtwo, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            } else {\r\n                                const tempValue = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnValue]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                        { [columnValue]: { [symbolObject.replacewith[1]]: dateinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                const tempValue1 = [\r\n                                    {\r\n                                        [symbolObject.symbol]: [{ [columnLabel]: { [symbolObject.replacewith[0]]: dateinput } },\r\n                                        { [columnLabel]: { [symbolObject.replacewith[1]]: dateinputtwo } }]\r\n                                    }\r\n                                ];\r\n                                databaseCondition.push(tempValue);\r\n                                displayCondition.push(tempValue1);\r\n                                databaseConditionParam.push(tempValue);\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinput, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                                fieldWithValue.push({ columnName: columnValue, value: dateinputtwo, symbolObject: selectedRecord[\"groupList\"][groupIndex][index][\"ssymbolname\"], items: selectedRecord[\"groupList\"][groupIndex][index][\"columnname\"].items });\r\n                            }\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\r\n                    }\r\n                });\r\n\r\n                if (selectedRecord[\"groupList\"][groupIndex][`button_and`] === true) {\r\n\r\n                    if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\r\n                        groupConditionDisplay.push([{ $not: [{ $and: [...displayCondition] }] }]);\r\n                        groupConditionDatabase.push([{ $not: [{ $and: [...databaseCondition] }] }]);\r\n                        groupConditionDatabaseParam.push([{ $not: [{ $and: [...databaseConditionParam] }] }]);\r\n                    } else {\r\n                        groupConditionDisplay.push([{ $and: [...displayCondition] }]);\r\n                        groupConditionDatabase.push([{ $and: [...databaseCondition] }]);\r\n                        groupConditionDatabaseParam.push([{ $and: [...databaseConditionParam] }]);\r\n                    }\r\n\r\n                } else if (selectedRecord[\"groupList\"][groupIndex][`button_or`] === true) {\r\n\r\n                    if (selectedRecord[\"groupList\"][groupIndex][`button_not`] === true) {\r\n                        groupConditionDisplay.push([{ $not: [{ $or: [...displayCondition] }] }]);\r\n                        groupConditionDatabase.push([{ $not: [{ $or: [...databaseCondition] }] }]);\r\n                        groupConditionDatabaseParam.push([{ $not: [{ $or: [...databaseConditionParam] }] }]);\r\n                    }\r\n                    else {\r\n                        groupConditionDisplay.push([{ $or: [...displayCondition] }]);\r\n                        groupConditionDatabase.push([{ $or: [...databaseCondition] }]);\r\n                        groupConditionDatabaseParam.push([{ $or: [...databaseConditionParam] }]);\r\n                    }\r\n\r\n                } else {\r\n                    groupConditionDisplay.push([{ ...displayCondition }]);\r\n                    groupConditionDatabase.push([{ ...databaseCondition }]);\r\n                    groupConditionDatabaseParam.push([{ ...databaseConditionParam }]);\r\n                }\r\n\r\n\r\n                let finalConditionDisplay = undefined;\r\n                let finalConditionDatabase = undefined;\r\n                let finalConditionDatabaseParam = undefined;\r\n                if (addGroupList.length - 1 === 0) {\r\n\r\n\r\n                    finalConditionDisplay = [...groupConditionDisplay];\r\n                    finalConditionDatabase = [...groupConditionDatabase];\r\n                    finalConditionDatabaseParam = [...groupConditionDatabaseParam];\r\n\r\n\r\n                } else if (addGroupList.length - 1 === groupIndex) {\r\n                    if (selectedRecord[\"groupList\"][0][`button_and`] === true) {\r\n\r\n\r\n                        finalConditionDisplay = [{ $and: [...groupConditionDisplay] }];\r\n                        finalConditionDatabase = [{ $and: [...groupConditionDatabase] }];\r\n                        finalConditionDatabaseParam = [{ $and: [...groupConditionDatabaseParam] }];\r\n\r\n\r\n                    } else if (selectedRecord[\"groupList\"][0][`button_or`] === true) {\r\n\r\n\r\n                        finalConditionDisplay = [{ $or: [...groupConditionDisplay] }];\r\n                        finalConditionDatabase = [{ $or: [...groupConditionDatabase] }];\r\n                        finalConditionDatabaseParam = [{ $or: [...groupConditionDatabaseParam] }];\r\n\r\n\r\n                    } else {\r\n\r\n\r\n                        finalConditionDisplay = [{ ...groupConditionDisplay }];\r\n                        finalConditionDatabase = [{ ...groupConditionDatabase }];\r\n                        finalConditionDatabaseParam = [{ ...groupConditionDatabaseParam }];\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                if (this.props.Login.sqlQuery) {\r\n                    const databaseSQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"stablename_0\"].value,\r\n                        condition: databaseCondition\r\n                    });\r\n                    const displaySQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"stablename_0\"].label,\r\n                        condition: displayCondition\r\n                    });\r\n                    selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\r\n                    selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\r\n                } else {\r\n\r\n\r\n                    // const fields = this.props.Login.viewColumnList;\r\n                    const dbFields = selectedRecord[\"filtercolumns\"];\r\n\r\n                    let fieldList = [];\r\n                    let dbfieldList = [];\r\n                    let groupByAggregateFields = [];\r\n                    let groupByFields = [];\r\n\r\n                    let groupByAggregateFieldsDisplay = [];\r\n                    let groupByFieldsDisplay = [];\r\n\r\n                    let orderByDefault = [];\r\n                    let orderByCustom = {};\r\n\r\n                    let orderByDefaultDisplay = [];\r\n                    let orderByCustomDisplay = {};\r\n\r\n                    selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\r\n                        if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\r\n                            orderByCustom[data[\"columnname\"].items.columnname] = -1\r\n                            orderByCustomDisplay[data[\"columnname\"].label] = -1\r\n                        } else {\r\n                            orderByCustom[data[\"columnname\"].items.columnname] = 1\r\n                            orderByCustomDisplay[data[\"columnname\"].label] = 1\r\n                        }\r\n                    })\r\n                    if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\r\n                        selectedRecord[\"aggregate\"].forEach(data => {\r\n                            if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\r\n                                groupByAggregateFields.push({\r\n                                    func: {\r\n                                        name: data[\"aggfunctionname\"].label,\r\n                                        args: [{ field: data[\"columnname\"].items.columnname }]\r\n\r\n                                    }, alias: data[\"columnname\"].items.columnname\r\n                                })\r\n                                groupByAggregateFieldsDisplay.push({\r\n                                    func: {\r\n                                        name: data[\"aggfunctionname\"].label,\r\n                                        args: [{ field: data[\"columnname\"].label }]\r\n\r\n                                    }\r\n                                })\r\n\r\n                            } else {\r\n                                groupByAggregateFields.push(data[\"columnname\"].items.columnname);\r\n                                groupByFields.push(data[\"columnname\"].items.columnname);\r\n                                groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\r\n                                groupByFieldsDisplay.push(data[\"columnname\"].label);\r\n                            }\r\n                        })\r\n                    }\r\n                    // fields.forEach(item => {\r\n                    //     fieldList.push(item.label);\r\n                    // })\r\n                    dbFields.forEach(item => {\r\n                        if (item.items.languagecode === true) {\r\n                            // let languageCode = this.props.Login.userInfo.slanguagetypecode ? this.props.Login.userInfo.slanguagetypecode : \"en-US\";\r\n                            let fieldValue = item.value.replace(item.value, item.value + \"->> $L as \" + item.value);\r\n                            // dbfieldList.push( \"\"+fieldValue+\"\");\r\n                            dbfieldList.push(fieldValue);\r\n\r\n                        } else {\r\n                            // dbfieldList.push(\"\"+item.value+\"\");\r\n                            dbfieldList.push(item.value);\r\n                        }\r\n                        fieldList.push(item.label);\r\n                    })\r\n                    const databaseSQLQueryParam = jsonSqlParam.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"sviewname\"].value,\r\n                        fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\r\n                        group: groupByFields,\r\n                        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\r\n                        condition: finalConditionDatabaseParam\r\n                    });\r\n                    const databaseSQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        table: selectedRecord[\"sviewname\"].value,\r\n                        fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFields : dbfieldList,\r\n                        group: groupByFields,\r\n                        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\r\n                        condition: finalConditionDatabase\r\n                    });\r\n                    const displaySQLQuery = jsonSql.build({\r\n                        type: 'select',\r\n                        fields: selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0 ? groupByAggregateFieldsDisplay : fieldList,\r\n                        group: groupByFieldsDisplay,\r\n                        table: selectedRecord[\"sviewname\"].label,\r\n                        sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\r\n                        condition: finalConditionDisplay //&& finalCondition.length === 1 ? finalCondition[0] : finalCondition\r\n                    });\r\n                    // databaseSQLQueryParam.query.split('\"').join('')\r\n                    // databaseSQLQuery.query.split('\"').join('')\r\n\r\n                    // let dbQueryParam = databaseSQLQueryParam.query.split('\"').join('');\r\n                    // let dbQuery = databaseSQLQuery.query.split('\"').join('');\r\n                    let dbQueryParam = databaseSQLQueryParam.query;\r\n                    let dbQuery = databaseSQLQuery.query;\r\n                    selectedRecord[\"squerywithparam\"] = dbQueryParam.replace(\"like\", \"Ilike\");\r\n\r\n                    selectedRecord[\"sgeneratedquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ?\r\n                        dbQuery.replace(\"like\", \"Ilike\") : \"\";\r\n                    selectedRecord[\"sdisplayquery\"] = selectedRecord[\"filtercolumns\"] && selectedRecord[\"filtercolumns\"].length > 0 ?\r\n                        displaySQLQuery.query.replace(\"like\", \"Ilike\") : \"\";\r\n\r\n                    selectedRecord[\"sdefaultvalue\"] = fieldWithValue;\r\n\r\n\r\n                    const paramIndex = [];\r\n                    if (fieldWithValue.length > 0) {\r\n                        fieldWithValue.forEach((item, i) => {\r\n                            if (item.symbolObject.items.symbolType === 4) {\r\n                                paramIndex.push(\"$p\" + (i + 1));\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                    if (paramIndex.length > 0) {\r\n                        paramIndex.forEach(data => {\r\n                            selectedRecord[\"squerywithparam\"] = selectedRecord[\"squerywithparam\"].replace(data, data + \" COLLATE pg_catalog.default \");\r\n                        })\r\n                    }\r\n                    // if (selectedRecord[\"squerywithparam\"].indexOf('Ilike') > 0) {\r\n\r\n                    //     let newQuery = selectedRecord[\"squerywithparam\"];\r\n\r\n                    //     while (newQuery.indexOf(\"Ilike\") !== -1) {\r\n\r\n                    //         const paramLabelStartIndex = newQuery.indexOf(\"Ilike\");\r\n\r\n                    //         const paramLabel = newQuery.substring(paramLabelStartIndex, newQuery.length);\r\n\r\n\r\n\r\n                    //     }\r\n                    // }\r\n                }\r\n                this.setState({ selectedRecord });\r\n            });\r\n        } else {\r\n            this.groupByFunction(selectedRecord, databaseCondition, displayCondition);\r\n        }\r\n        this.setState({ selectedRecord });// for temporary\r\n    }\r\n\r\n    groupByFunction(selectedRecord, databaseCondition, displayCondition) {\r\n        let groupByAggregateFields = [];\r\n        let groupByFields = [];\r\n\r\n        let groupByAggregateFieldsDisplay = [];\r\n        let groupByFieldsDisplay = [];\r\n\r\n        let orderByDefault = [];\r\n        let orderByCustom = {};\r\n\r\n        let orderByDefaultDisplay = [];\r\n        let orderByCustomDisplay = {};\r\n\r\n        // if (selectedRecord[\"customorderby\"] && selectedRecord[\"customorderby\"] === true) {\r\n        selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\r\n            if (data[\"ordertype\"] && data[\"ordertype\"].value === 2) {\r\n                orderByCustom[data[\"columnname\"].items.columnname] = -1\r\n                orderByCustomDisplay[data[\"columnname\"].label] = -1\r\n            } else {\r\n                orderByCustom[data[\"columnname\"].items.columnname] = 1\r\n                orderByCustomDisplay[data[\"columnname\"].label] = 1\r\n            }\r\n        })\r\n        // } else {\r\n        //     selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].forEach(data => {\r\n        //         orderByDefault.push(data[\"columnname\"].items.columnname);\r\n        //         orderByDefaultDisplay.push(data[\"columnname\"].label);\r\n        //     })\r\n        // }\r\n\r\n\r\n        // if (selectedRecord[\"groupby\"] && selectedRecord[\"groupby\"] === true) {\r\n        if (selectedRecord[\"aggregate\"] && selectedRecord[\"aggregate\"].length > 0) {\r\n            selectedRecord[\"aggregate\"].forEach(data => {\r\n                if (data[\"aggfunctionname\"] && data[\"aggfunctionname\"].label !== '') {\r\n                    groupByAggregateFields.push({\r\n                        func: {\r\n                            name: data[\"aggfunctionname\"].label,\r\n                            args: [{ field: data[\"columnname\"].items.columnname }]\r\n\r\n                        }, alias: data[\"columnname\"].items.columnname\r\n                    })\r\n                    groupByAggregateFieldsDisplay.push({\r\n                        func: {\r\n                            name: data[\"aggfunctionname\"].label,\r\n                            args: [{ field: data[\"columnname\"].label }]\r\n\r\n                        }\r\n                    })\r\n\r\n                } else {\r\n                    groupByAggregateFields.push(data[\"columnname\"].items.columnname);\r\n                    groupByFields.push(data[\"columnname\"].items.columnname);\r\n                    groupByAggregateFieldsDisplay.push(data[\"columnname\"].label);\r\n                    groupByFieldsDisplay.push(data[\"columnname\"].label);\r\n                }\r\n            })\r\n\r\n            const databaseSQLQuery = jsonSql.build({\r\n                type: 'select',\r\n                table: selectedRecord[\"sviewname\"].value,\r\n                fields: groupByAggregateFields,\r\n                group: groupByFields,\r\n                sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustom : \"\",\r\n                condition: databaseCondition\r\n            });\r\n            const displaySQLQuery = jsonSql.build({\r\n                type: 'select',\r\n                fields: groupByAggregateFieldsDisplay,\r\n                group: groupByFieldsDisplay,\r\n                sort: selectedRecord[\"orderby\"] && selectedRecord[\"orderby\"].length > 0 ? orderByCustomDisplay : \"\",\r\n                table: selectedRecord[\"sviewname\"].label,\r\n                condition: displayCondition\r\n            });\r\n            selectedRecord[\"sgeneratedquery\"] = databaseSQLQuery.query;\r\n            selectedRecord[\"sdisplayquery\"] = displaySQLQuery.query;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        // }\r\n    }\r\n    onConditionClick = (fieldName, index) => {\r\n        let { selectedRecord } = this.state;\r\n        if (fieldName === `button_and`) {\r\n            selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            selectedRecord[\"groupList\"][index][`button_or`] = false;\r\n        } else if (fieldName === `button_or`) {\r\n            selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            selectedRecord[\"groupList\"][index][`button_and`] = false;\r\n            // if (selectedRecord[\"groupList\"][index][`notoperator`] && selectedRecord[\"groupList\"][index][`notoperator`] === true) {\r\n            //     selectedRecord[\"groupList\"][index][`notoperator`] = false;\r\n            // }\r\n        } else if (fieldName === `button_not`) {\r\n            selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n        }\r\n        else {\r\n\r\n        }\r\n        this.generateFilterQuery(selectedRecord);\r\n    }\r\n\r\n    onQueryTypeOnclick = (value) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"selectedQueryType\"] = value;\r\n        let sqlQuery = false;\r\n        if (value.value === \"sql\") {\r\n            sqlQuery = true;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { sqlQuery: sqlQuery }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        this.setState({ selectedRecord });\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData,\r\n    validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType,\r\n    executeUserQuery, comboColumnValues, getColumnNamesByTableName,\r\n    getTablesName, getModuleFormName, getDatabaseTables, executeQuery, getForeignTable,\r\n    getViewColumns, getMasterData, createQueryBuilder,\r\n    getParameterFromQuery, getSelectedQueryBuilder, updateQueryBuilder, getQueryBuilder\r\n})(injectIntl(QueryBuilder));"]},"metadata":{},"sourceType":"module"}