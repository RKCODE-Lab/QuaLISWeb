{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageLocation.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\n\nclass SampleStorageLocation extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onChange = event => {\n      this.setState({\n        panes: event.newState\n      });\n    };\n\n    this.addChildNode = (e, clickedItem) => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.items = item.items || [];\n          item.items.push({\n            id: uuid(),\n            text: this.props.intl.formatMessage({\n              id: \"IDS_LABEL\"\n            }),\n            expanded: true,\n            editable: false,\n            locationlastnode: false,\n            containerfirstnode: false,\n            containerlastnode: false\n          });\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.equalNode = (e, clickedItem) => {\n      let parentItem = {};\n      let parentFound = false;\n      let newData = [...this.state.treeData];\n      mapTree(this.state.treeData, \"items\", item => {\n        if (item.items) {\n          if (parentFound) {\n            parentItem = item;\n            parentFound = false;\n          }\n        }\n\n        if (item.id === clickedItem.id) {\n          parentFound = true;\n        }\n\n        return item;\n      });\n\n      if (parentItem.text === undefined) {\n        newData.push({\n          id: uuid(),\n          text: this.props.intl.formatMessage({\n            id: \"IDS_LABEL\"\n          }),\n          expanded: true,\n          editable: false,\n          locationlastnode: false,\n          containerfirstnode: false,\n          containerlastnode: false\n        });\n        this.setState({\n          treeData: newData\n        });\n      } else {\n        newData = mapTree(this.state.treeData, \"items\", item => {\n          if (item.id === parentItem.id) {\n            item.items.push({\n              id: uuid(),\n              text: this.props.intl.formatMessage({\n                id: \"IDS_LABEL\"\n              }),\n              expanded: true,\n              editable: false,\n              locationlastnode: false,\n              containerfirstnode: false,\n              containerlastnode: false\n            });\n          }\n\n          return item;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.deleteNode = clickedItem => {\n      if (clickedItem.root && clickedItem.root === true) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PARENTNODENOTALLOWTODELETE\"\n        }));\n      } else {\n        const newData = removeItems(this.state.treeData, \"items\", item => {\n          return item.id === clickedItem.id;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.editRecord = (e, clickedItem) => {\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.itemRender = props => {\n      if (this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item.editable ? /*#__PURE__*/React.createElement(Form.Group, {\n          className: \"k-editable-text-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          id: \"nodename\",\n          name: \"nodename\",\n          type: \"text\",\n          onKeyDown: e => e.stopPropagation(),\n          value: props.item.text,\n          autoFocus: true,\n          autoComplete: \"off\",\n          onChange: e => this.handleChange(e, props.item),\n          onBlur: e => this.handleBlur(e, props.item),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 25\n          }\n        }, props.item.text));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                            ${props.item.editable ? \"active-node\" : \"\"}\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\n                            `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 29\n          }\n        }, props.item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 66\n          }\n        }) : props.item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 67\n          }\n        }) : props.item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 72\n          }\n        }) : props.item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 67\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 109\n          }\n        }), props.item.text), props.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level1\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_EQUALNODE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.equalNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level2\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CHILDNODE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.addChildNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 37\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-edit k-i-pencil\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_EDIT\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.editRecord(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 37\n          }\n        }), !props.item.isRoot ? /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-delete\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_DELETE\"\n          }),\n          onClick: e => {\n            e.stopPropagation();\n            this.deleteNode(props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 41\n          }\n        }) : null) : null) : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.onExpandChange = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.itemRenderView = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                        ${item.selected ? \"active-node\" : \"\"}\n                        ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                        `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 29\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 60\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 61\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 66\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 61\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 103\n          }\n        }), item.text), clickedItem.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-toggle m-l-half\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_PROPERTIES\"\n          }),\n          onClick: e => this.setProperties(e, clickedItem),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 37\n          }\n        })) : null) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      // if (this.state.selectedItem) {\n      //     let selectedobj = this.state.selectedItem;\n      //         selectedobj.selected = false\n      //     this.setState({\n      //         selectedItem : selectedobj\n      //     })\n      // }\n      // this.setState({\n      //     selectedItem : event.item\n      // })            \n      let newData = mapTree(this.state.treeDataView, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      newData.map(data => {\n        this.clearSelected(data, event.item);\n      });\n      this.setState({\n        treeDataView: newData\n      });\n    };\n\n    this.onExpandChangeView = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.setProperties = (event, clickedItem) => {\n      const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n      this.props.openPropertyModal(clickedItem, editId);\n    };\n\n    this.handleChange = (e, clickedItem) => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.text = e.target.value;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.handleBlur = (e, item) => {\n      item.editable = false;\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else {\n        this.onSaveSampleStorageLocation(saveType, formRef);\n      }\n    };\n\n    this.onSaveProperties = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\n        let inputData = [];\n        let jsondata = {};\n        let postParam = undefined;\n        let count = 0;\n\n        if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (count > 1) {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTONLYONE\"\n          }));\n        } else {\n          let newData = mapTree(this.state.treeDataView, \"items\", item => {\n            if (item.id === this.props.Login.clickedItem.item.id) {\n              item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\n              item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\n              item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\n            }\n\n            if (item.selected && item.selected === true) {\n              item.selected = false;\n            }\n\n            return item;\n          });\n          postParam = {\n            inputListName: \"sampleStorageLocation\",\n            selectedObject: \"selectedSampleStorageLocation\",\n            primaryKeyField: \"nsamplestoragelocationcode\"\n          };\n          jsondata[\"data\"] = newData;\n          inputData[\"userinfo\"] = this.props.Login.userInfo;\n          inputData[\"sampleStorageVersion\"] = {\n            \"nstatus\": 1\n          };\n          inputData[\"sampleStorageLocation\"] = {\n            \"nstatus\": 1\n          };\n          inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"];\n          inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\n          inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nstoragecategorycode\"];\n          inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n          inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n          inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"update\",\n            saveType,\n            formRef,\n            postParam\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        }\n      }\n    };\n\n    this.onSaveSampleStorageLocation = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state; // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\n      //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\n\n      let inputData = [];\n      let jsondata = {};\n      let postParam = undefined;\n      let countLevels = 0;\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        }\n\n        if (item.expanded === false) {\n          item.expanded = true;\n        }\n\n        countLevels++;\n        return item;\n      }); // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\n\n      if (countLevels > 3) {\n        jsondata[\"data\"] = newData;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sampleStorageLocation\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageVersion\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\n        inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n\n        if (this.props.Login.operation === \"create\") {\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"create\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // }\n            // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"];\n          inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n          inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"update\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n          }\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_CREATEATLEASTFOURLEVELS\"\n        }));\n      }\n    };\n\n    this.deleteSampleStorageLocation = ncontrolCode => {\n      let inputData = [];\n      inputData[\"sampleStorageVersion\"] = {};\n      inputData[\"sampleStorageLocation\"] = {};\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\n      const inputParam = {\n        methodUrl: \"SampleStorageLocation\",\n        classUrl: \"samplestoragelocation\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData; // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"delete\",\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteSampleStorageLocation(ncontrolCode));\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n        this.searchRef.current.value = \"\";\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterStorageCategory.value) {\n        let inputParam = {\n          inputData: {\n            nstoragecategorycode: this.state.nfilterStorageCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterStorageCategory: this.state.nfilterStorageCategory\n          }\n        };\n        this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STORAGECATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onApproveSampleStorageLocation = ncontrolCode => {\n      let inputData = [];\n      let locationEnd = false;\n      let storageStart = false;\n      let storageEnd = false;\n      mapTree(this.state.treeDataView, \"items\", item => {\n        if (item.locationlastnode === true) {\n          locationEnd = true;\n        }\n\n        if (item.containerfirstnode === true) {\n          storageStart = true;\n        }\n\n        if (item.containerlastnode === true) {\n          storageEnd = true;\n        }\n\n        return null;\n      });\n\n      if (locationEnd === false) {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTLOCATIONEND\"\n        }));\n        return;\n      }\n\n      if (storageStart === false) {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTSTORAGESTART\"\n        }));\n        return;\n      }\n\n      if (storageEnd === false) {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTSTORAGEEND\"\n        }));\n        return;\n      }\n\n      const masterData = this.props.Login.masterData;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      const inputParam = {\n        inputData: inputData,\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo,\n        operation: \"Approve\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"Approve\",\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.copySampleStorageversion = ncontrolCode => {\n      let inputData = [];\n      const masterData = this.props.Login.masterData;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"sampleStorageLocation\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"] = {\n        \"nstatus\": 1\n      };\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      const inputParam = {\n        inputData: inputData,\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageVersion\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo,\n        operation: \"copy\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            operation: \"copy\",\n            screenName: this.props.Login.inputParam.displayName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageLocation = addId => {\n      if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\n        this.props.fetchStorageCategory({\n          userInfo: this.props.Login.userInfo,\n          id: uuid(),\n          nfilterStorageCategory: this.state.nfilterStorageCategory,\n          addId\n        });\n      } else {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSTORAGECATEGORY\"\n        }));\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        text: \"root\",\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let {\n      filterData\n    } = this.state;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n\n    if (this.props.Login.treeData !== previousProps.Login.treeData) {\n      this.setState({\n        treeData: this.props.Login.treeData\n      });\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        this.setState({\n          treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\n        });\n      }\n    }\n\n    let nfilterStorageCategory = this.state.nStorageCategory || {};\n    let filterStorageCategory = this.state.filterStorageCategory || {};\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\n      filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\n\n      if (filterStorageCategory && filterStorageCategory.length > 0) {\n        nfilterStorageCategory = filterStorageCategory[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\n      nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterStorageCategory,\n        selectedRecord,\n        filterStorageCategory\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  clearSelected(innerObj, selectedItem) {\n    if (innerObj.id == selectedItem.id) {\n      innerObj.selected = true;\n    } else {\n      innerObj.selected = false;\n    }\n\n    if (innerObj.items && innerObj.items.length > 0) {\n      innerObj.items.map(childObj => {\n        this.clearSelected(childObj, selectedItem);\n      });\n    }\n\n    return innerObj;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\" // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\n        //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_STORAGECATEGORY\",\n      \"dataField\": \"nstoragecategorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 982,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || [],\n      selectedMaster: [this.props.Login.masterData.selectedSampleStorageLocation],\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageLocation(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"ssamplestoragelocationname\",\n      selectedListName: \"selectedSampleStorageLocation\",\n      objectName: \"LocationMaster\",\n      listName: \"IDS_SAMPLESTORAGELOCATION\",\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      needFilter: true,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1023,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) // data-for=\"tooltip-common-wrap\"\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.openStorageLocation(addId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.reloadData() // data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1031,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 49\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(StorageCategoryFilter, {\n          filterStorageCategory: this.state.filterStorageCategory || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1042,\n            columnNumber: 49\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1 //secondaryInitialSize={400}\n      ,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      style: {\n        paddingRight: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: this.props.Login.masterData.sampleStorageVersion || [],\n      needMultiSelect: false,\n      selectedMaster: [this.props.Login.masterData.selectedSampleStorageVersion],\n      primaryKeyField: \"nsamplestorageversioncode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"nversionno\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      selectedListName: \"selectedSampleStorageVersion\",\n      objectName: \"Version\",\n      listName: \"IDS_SAMPLESTORAGEVersion\",\n      hideSearch: true,\n      needValidation: false,\n      needFilter: false,\n      moreField: [],\n      skip: this.state.detailSkip,\n      take: this.state.detailTake,\n      hidePaging: true,\n      handlePageChange: this.handleDetailPageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '' // actionIcons={\n      //     [\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\n      //             controlname: \"faPencilAlt\",\n      //             objectName: \"detailtoedit\",\n      //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\n      //         },\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n      //             controlname: \"faTrashAlt\",\n      //             objectName: \"mastertodelete\",\n      //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      //             onClick: () => this.confirmDelete(deleteId)\n      //         }\n      //     ]\n      // }\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content grid-master tree-view-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1117,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1118,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"action-icons-wrap mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined  outline-secondary btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DRAFT\",\n      defaultMessage: \"Draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 89\n      }\n    })) : this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-danger btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RETIRED\",\n      defaultMessage: \"Retired\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 93\n      }\n    })) : /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-success btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_APPROVED\",\n      defaultMessage: \"Approved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1134,\n        columnNumber: 93\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 73\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle 1 outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: e => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 85\n      }\n    })) : /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      onClick: e => this.copySampleStorageversion(copyId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1151,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1157,\n        columnNumber: 85\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 81\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1 // data-for=\"tooltip_list_wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      onClick: () => this.onApproveSampleStorageLocation(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1169,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 81\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.treeDataView,\n      expandIcons: true,\n      selectField: 'active-node',\n      item: this.itemRenderView,\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 65\n      }\n    }))) : \"\"))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGELOCATION\"\n      }),\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.loadTreeProperties === true ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1226,\n          columnNumber: 29\n        }\n      }) : this.props.Login.loadTreeProperties ? /*#__PURE__*/React.createElement(AddTreeProperties, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1234,\n          columnNumber: 33\n        }\n      }) : this.state.treeData ? /*#__PURE__*/React.createElement(AddTreeview, {\n        treeData: this.state.treeData,\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChange,\n        storageCategoryList: this.props.Login.storageCategoryList || [],\n        isOnlyDraft: this.props.Login.isOnlyDraft,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1239,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData,\n  changeStorageCategoryFilter,\n  getSelectedSampleStorageLocation,\n  openPropertyModal,\n  editSampleStorageLocation,\n  approveSampleStorageLocation,\n  getSelectedSampleStorageVersion,\n  fetchStorageCategory,\n  copySampleStorageVersion,\n  crudSampleStorageLocation\n})(injectIntl(SampleStorageLocation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageLocation.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","DEFAULT_RETURN","ListWrapper","ProductList","uuid","TreeEditable","TreeViewEditable","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","StorageCategoryFilter","transactionStatus","Esign","SampleStorageLocation","constructor","props","onChange","event","setState","panes","newState","addChildNode","e","clickedItem","newData","state","treeData","item","id","items","push","text","intl","formatMessage","expanded","editable","locationlastnode","containerfirstnode","containerlastnode","equalNode","parentItem","parentFound","undefined","deleteNode","root","warn","editRecord","toggleAction","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","operation","closeModal","loadEsign","Login","selectedId","onInputChange","target","type","name","checked","value","itemRender","stopPropagation","handleChange","handleBlur","isRoot","onItemClick","onExpandChange","forceUpdate","itemRenderView","toggleActionView","selected","setProperties","onItemClickView","treeDataView","map","clearSelected","onExpandChangeView","editId","controlMap","has","get","ncontrolcode","onSaveClick","saveType","formRef","onSaveProperties","onSaveSampleStorageLocation","inputData","jsondata","postParam","count","info","inputListName","selectedObject","primaryKeyField","userInfo","masterData","selectedSampleStorageLocation","selectedSampleStorageVersion","inputParam","classUrl","methodUrl","displayName","userRoleControlRights","nformcode","screenData","countLevels","deleteSampleStorageLocation","ncontrolCode","searchRef","screenName","confirmDelete","confirmMessage","confirm","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","skip","take","handleDetailPageChange","onComboChange","comboData","fieldName","caseNo","nfilterStorageCategory","current","openFilter","showFilter","closeFilter","onFilterSubmit","nstoragecategorycode","userinfo","filterStorageCategory","onApproveSampleStorageLocation","locationEnd","storageStart","storageEnd","warning","copySampleStorageversion","reloadData","onEditSampleStorageLocation","isOnlyDraft","sampleStorageVersion","length","openStorageLocation","addId","Object","keys","onInputOnChange","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","size","scrollable","Map","detailSkip","detailTake","settings","selectedItem","createRef","getDerivedStateFromProps","masterStatus","error","componentDidUpdate","previousProps","isComponentUpdated","filterData","values","JSON","parse","nStorageCategory","filterStorageCategoryMap","generateBreadCrumData","innerObj","childObj","componentDidMount","parentHeight","height","clientHeight","firstPane","breadCrumbData","selectedStorageCategoryName","render","deleteId","copyId","approveId","filterParam","fetchUrl","fecthInputObject","searchFieldList","mandatoryFields","searchedData","sampleStorageLocation","indexOf","paddingRight","ssamplestoragelocationname","napprovalstatus","DRAFT","RETIRED","storageCategoryList","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\n\r\nclass SampleStorageLocation extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    text: \"root\",\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    onChange = (event) => {\r\n\r\n        this.setState({ panes: event.newState })\r\n\r\n    };\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let isComponentUpdated = false;\r\n        let { filterData } = this.state;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n\r\n        if (this.props.Login.treeData !== previousProps.Login.treeData) {\r\n            this.setState({\r\n                treeData: this.props.Login.treeData\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n                this.setState({\r\n                    treeDataView:\r\n                        JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\r\n                });\r\n            }\r\n        }\r\n        let nfilterStorageCategory = this.state.nStorageCategory || {};\r\n        let filterStorageCategory = this.state.filterStorageCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\r\n            filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\r\n            if (filterStorageCategory && filterStorageCategory.length > 0) {\r\n                nfilterStorageCategory = filterStorageCategory[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\r\n            nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterStorageCategory, selectedRecord, filterStorageCategory });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n    addChildNode = (e, clickedItem) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.items = item.items || [];\r\n                item.items.push({\r\n                    id: uuid(),\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                    expanded: true,\r\n                    editable: false,\r\n                    locationlastnode: false,\r\n                    containerfirstnode: false,\r\n                    containerlastnode: false\r\n                });\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    equalNode = (e, clickedItem) => {\r\n        let parentItem = {};\r\n        let parentFound = false;\r\n        let newData = [...this.state.treeData];\r\n        mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.items) {\r\n                if (parentFound) {\r\n                    parentItem = item;\r\n                    parentFound = false;\r\n                }\r\n            }\r\n\r\n            if (item.id === clickedItem.id) {\r\n                parentFound = true;\r\n            }\r\n\r\n            return item;\r\n        });\r\n        if (parentItem.text === undefined) {\r\n            newData.push({\r\n                id: uuid(),\r\n                text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                expanded: true,\r\n                editable: false,\r\n                locationlastnode: false,\r\n                containerfirstnode: false,\r\n                containerlastnode: false\r\n            });\r\n            this.setState({ treeData: newData });\r\n        } else {\r\n            newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                if (item.id === parentItem.id) {\r\n                    item.items.push({\r\n                        id: uuid(),\r\n                        text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                        expanded: true,\r\n                        editable: false,\r\n                        locationlastnode: false,\r\n                        containerfirstnode: false,\r\n                        containerlastnode: false\r\n                    });\r\n                }\r\n                return item;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    deleteNode = (clickedItem) => {\r\n        if (clickedItem.root && clickedItem.root === true) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PARENTNODENOTALLOWTODELETE\" }));\r\n        } else {\r\n            const newData = removeItems(this.state.treeData, \"items\", (item) => {\r\n                return item.id === clickedItem.id;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    editRecord = (e, clickedItem) => {\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    itemRender = (props) => {\r\n        if (this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {props.item.editable ? (\r\n                        <Form.Group className=\"k-editable-text-wrap\">\r\n                            <Form.Control\r\n                                id={\"nodename\"}\r\n                                name={\"nodename\"}\r\n                                type=\"text\"\r\n                                onKeyDown={(e) => e.stopPropagation()}\r\n                                value={props.item.text}\r\n                                autoFocus\r\n                                autoComplete=\"off\"\r\n                                onChange={(e) => this.handleChange(e, props.item)}\r\n                                onBlur={(e) => this.handleBlur(e, props.item)}\r\n                            />\r\n                        </Form.Group>\r\n                    ) : (\r\n                        <span>{props.item.text}</span>\r\n                    )}\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    {props.item ? (\r\n                        <>\r\n                            <span className={`normal-node\r\n                            ${props.item.editable ? \"active-node\" : \"\"}\r\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                            `}>\r\n                                {props.item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                    props.item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                        props.item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                            props.item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                {props.item.text}\r\n                            </span>\r\n                            {props.item.editable ? (\r\n                                <>\r\n                                    <span\r\n                                        className=\"action-icon tree-level1\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EQUALNODE\" })}\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            this.equalNode(e, props.item);\r\n                                        }}\r\n                                    ></span>\r\n                                    <span\r\n                                        className=\"action-icon tree-level2\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CHILDNODE\" })}\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            this.addChildNode(e, props.item);\r\n                                        }}\r\n                                    ></span>\r\n                                    <span\r\n                                        className=\"k-icon k-i-edit k-i-pencil\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                        onClick={(e) => {\r\n                                            e.stopPropagation();\r\n                                            this.editRecord(e, props.item);\r\n                                        }}\r\n                                    ></span>\r\n                                    {!props.item.isRoot ? (\r\n                                        <span\r\n                                            className=\"k-icon k-i-delete\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.deleteNode(props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    onExpandChange = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    itemRenderView = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <>\r\n                            <span className={`normal-node\r\n                        ${item.selected ? \"active-node\" : \"\"}\r\n                        ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                        `} >\r\n                                {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                    item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                        item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                            item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                {item.text}\r\n                            </span>\r\n                            {/* <ul className=\"list-inline mb-0\">\r\n                                <li className=\"list-inline-item mr-3\">{clickedItem.item.text}</li> */}\r\n                            {clickedItem.item.editable ? (\r\n                                <>\r\n                                    {/* <li className=\"list-inline-item\"> */}\r\n                                    <span\r\n                                        className=\"action-icon tree-toggle m-l-half\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_PROPERTIES\" })}\r\n                                        onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                    ></span>\r\n                                    {/* </li> */}\r\n                                </>\r\n                            ) : null}\r\n                            {/* </ul> */}\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n    onItemClickView = (event) => {\r\n        // if (this.state.selectedItem) {\r\n        //     let selectedobj = this.state.selectedItem;\r\n        //         selectedobj.selected = false\r\n        //     this.setState({\r\n        //         selectedItem : selectedobj\r\n        //     })\r\n        // }\r\n        // this.setState({\r\n        //     selectedItem : event.item\r\n        // })            \r\n\r\n        let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        newData.map((data) => {\r\n            this.clearSelected(data, event.item)\r\n        })\r\n        this.setState({ treeDataView: newData });\r\n    };\r\n    clearSelected(innerObj, selectedItem) {\r\n        if (innerObj.id == selectedItem.id) {\r\n            innerObj.selected = true;\r\n        } else {\r\n            innerObj.selected = false;\r\n        }\r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            innerObj.items.map((childObj) => {\r\n                this.clearSelected(childObj, selectedItem)\r\n            })\r\n        }\r\n        return innerObj\r\n    }\r\n    onExpandChangeView = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    setProperties = (event, clickedItem) => {\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        this.props.openPropertyModal(clickedItem, editId);\r\n    };\r\n\r\n    handleChange = (e, clickedItem) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.text = e.target.value;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    handleBlur = (e, item) => {\r\n        item.editable = false;\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else {\r\n            this.onSaveSampleStorageLocation(saveType, formRef);\r\n        }\r\n    };\r\n    onSaveProperties = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\r\n            let inputData = [];\r\n            let jsondata = {}\r\n            let postParam = undefined;\r\n            let count = 0;\r\n            if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (count > 1) {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONE\" }));\r\n            } else {\r\n                let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n                    if (item.id === this.props.Login.clickedItem.item.id) {\r\n                        item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\r\n                        item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\r\n                        item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\r\n                    }\r\n                    if (item.selected && item.selected === true) {\r\n                        item.selected = false;\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                postParam = { inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n                jsondata[\"data\"] = newData;\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n                inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n                inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n                inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\r\n                inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nstoragecategorycode\"]\r\n                inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n                inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n                inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"update\", saveType, formRef, postParam\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onSaveSampleStorageLocation = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\r\n        //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\r\n\r\n        let inputData = [];\r\n        let jsondata = {}\r\n        let postParam = undefined;\r\n        let countLevels = 0;\r\n\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            }\r\n            if (item.expanded === false) {\r\n                item.expanded = true;\r\n            }\r\n            countLevels++;\r\n            return item;\r\n        });\r\n\r\n        // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n        if (countLevels > 3) {\r\n\r\n\r\n            jsondata[\"data\"] = newData;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n            inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n\r\n            inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\r\n            inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\r\n            inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n            if (this.props.Login.operation === \"create\") {\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"create\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                    // }\r\n                    // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n                }\r\n            } else {\r\n                inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n                inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n                inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"update\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                    // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n                }\r\n\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_CREATEATLEASTFOURLEVELS\" }));\r\n        }\r\n\r\n    }\r\n\r\n    deleteSampleStorageLocation = (ncontrolCode) => {\r\n        let inputData = [];\r\n        inputData[\"sampleStorageVersion\"] = {};\r\n        inputData[\"sampleStorageLocation\"] = {};\r\n\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"]\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"]\r\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"]\r\n\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageLocation\",\r\n            classUrl: \"samplestoragelocation\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        // this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteSampleStorageLocation(ncontrolCode));\r\n    };\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            this.searchRef.current.value = \"\";\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\"\r\n                    // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\r\n                    //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterStorageCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nstoragecategorycode: this.state.nfilterStorageCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterStorageCategory: this.state.nfilterStorageCategory\r\n\r\n                }\r\n            }\r\n            this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STORAGECATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    onApproveSampleStorageLocation = (ncontrolCode) => {\r\n        let inputData = [];\r\n        let locationEnd = false;\r\n        let storageStart = false;\r\n        let storageEnd = false;\r\n        mapTree(this.state.treeDataView, \"items\", (item) => {\r\n            if (item.locationlastnode === true) {\r\n                locationEnd = true;\r\n            }\r\n            if (item.containerfirstnode === true) {\r\n                storageStart = true;\r\n            }\r\n            if (item.containerlastnode === true) {\r\n                storageEnd = true;\r\n            }\r\n            return null;\r\n        });\r\n        if (locationEnd === false) {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTLOCATIONEND\" }));\r\n            return;\r\n        }\r\n        if (storageStart === false) {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGESTART\" }));\r\n            return;\r\n        }\r\n        if (storageEnd === false) {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGEEND\" }));\r\n            return;\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n        inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n        const inputParam = {\r\n            inputData: inputData,\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo, operation: \"Approve\"\r\n        };\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openModal: true, operation: \"Approve\",\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    copySampleStorageversion = (ncontrolCode) => {\r\n        let inputData = [];\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n        inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n\r\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\r\n        inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\r\n        const inputParam = {\r\n            inputData: inputData,\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageVersion\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo, operation: \"copy\"\r\n        };\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openModal: true, operation: \"copy\",\r\n                    screenName: this.props.Login.inputParam.displayName\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            // this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageLocation = (addId) => {\r\n        if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\r\n            this.props.fetchStorageCategory({ userInfo: this.props.Login.userInfo, id: uuid(), nfilterStorageCategory: this.state.nfilterStorageCategory, addId });\r\n        } else {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_SELECTSTORAGECATEGORY\" }));\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n        const mandatoryFields = [\r\n            { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n        ]\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper> */}\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n                                {/* First column */}\r\n                                <TransactionListMaster\r\n                                    paneHeight={this.state.parentHeight}\r\n                                    needMultiSelect={false}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || []}\r\n                                    selectedMaster={[this.props.Login.masterData.selectedSampleStorageLocation]}\r\n                                    primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                    getMasterDetail={(selectedItem) =>\r\n                                        this.props.getSelectedSampleStorageLocation(\r\n                                            selectedItem,\r\n                                            this.props.Login.userInfo, this.props.Login.masterData\r\n                                        )}\r\n                                    inputParam={{\r\n                                        userInfo: this.props.Login.userInfo,\r\n                                        masterData: this.props.Login.masterData\r\n                                    }}\r\n                                    mainField={\"ssamplestoragelocationname\"}\r\n                                    selectedListName=\"selectedSampleStorageLocation\"\r\n                                    objectName=\"LocationMaster\"\r\n                                    listName=\"IDS_SAMPLESTORAGELOCATION\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    needFilter={true}\r\n                                    hidePaging={false}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.openStorageLocation(addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.reloadData()}\r\n                                                // data-for=\"tooltip-common-wrap\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_TESTFILTER\":\r\n                                                <StorageCategoryFilter\r\n                                                    filterStorageCategory={this.state.filterStorageCategory || []}\r\n                                                    nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n\r\n                                />\r\n\r\n                                {/* End of first column */}\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\">\r\n                                    {/* <PerfectScrollbar> */}\r\n                                    {/* Start of second column */}\r\n                                    <div className=\"card_group\">\r\n                                        <Row>\r\n                                            <Col md={3} style={{ paddingRight: '0' }}>\r\n                                                {/* Start of version column */}\r\n                                                <TransactionListMaster\r\n                                                    masterList={this.props.Login.masterData.sampleStorageVersion || []}\r\n                                                    needMultiSelect={false}\r\n                                                    selectedMaster={[this.props.Login.masterData.selectedSampleStorageVersion]}\r\n                                                    primaryKeyField=\"nsamplestorageversioncode\"\r\n                                                    getMasterDetail={(selectedItem) =>\r\n                                                        this.props.getSelectedSampleStorageVersion(\r\n                                                            selectedItem, this.props.Login.userInfo,\r\n                                                            this.props.Login.masterData\r\n                                                        )}\r\n                                                    inputParam={{\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        masterData: this.props.Login.masterData\r\n                                                    }}\r\n                                                    mainField={\"nversionno\"}\r\n                                                    mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                                    selectedListName=\"selectedSampleStorageVersion\"\r\n                                                    objectName=\"Version\"\r\n                                                    listName=\"IDS_SAMPLESTORAGEVersion\"\r\n                                                    hideSearch={true}\r\n                                                    needValidation={false}\r\n                                                    needFilter={false}\r\n                                                    moreField={[]}\r\n                                                    skip={this.state.detailSkip}\r\n                                                    take={this.state.detailTake}\r\n                                                    hidePaging={true}\r\n                                                    handlePageChange={this.handleDetailPageChange}\r\n                                                    splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                // actionIcons={\r\n                                                //     [\r\n                                                //         {\r\n                                                //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                //             controlname: \"faPencilAlt\",\r\n                                                //             objectName: \"detailtoedit\",\r\n                                                //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n                                                //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\r\n                                                //         },\r\n                                                //         {\r\n                                                //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                //             controlname: \"faTrashAlt\",\r\n                                                //             objectName: \"mastertodelete\",\r\n                                                //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\r\n                                                //             onClick: () => this.confirmDelete(deleteId)\r\n                                                //         }\r\n                                                //     ]\r\n                                                // }\r\n                                                />\r\n                                                {/* End of version column */}\r\n                                            </Col>\r\n                                            <Col md={9}>\r\n                                                {/* Start of detailed content */}\r\n                                                <ProductList className=\"panel-main-content grid-master tree-view-container\">\r\n                                                    {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Header>\r\n                                                                <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n                                                                <Card.Subtitle>\r\n                                                                    <div className=\"d-flex product-category\">\r\n                                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                            <Nav.Link className=\"action-icons-wrap mr-2\">\r\n                                                                                {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n\r\n                                                                                    <span className={`btn btn-outlined  outline-secondary btn-sm ml-3`}>\r\n                                                                                        <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\r\n                                                                                    </span>\r\n                                                                                    :\r\n                                                                                    this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ?\r\n\r\n                                                                                        <span className={`btn btn-outlined outline-danger btn-sm ml-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_RETIRED\"} defaultMessage=\"Retired\" />\r\n                                                                                        </span>\r\n                                                                                        :\r\n                                                                                        <span className={`btn btn-outlined outline-success btn-sm ml-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\r\n                                                                                        </span>\r\n                                                                                }\r\n                                                                            </Nav.Link>\r\n                                                                        </h2>\r\n                                                                        <div className=\"d-inline\">\r\n                                                                            {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n                                                                                <Nav.Link className=\"btn btn-circle 1 outline-grey mr-2 \" href=\"#\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                    onClick={(e) => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, editId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faPencilAlt} />\r\n\r\n                                                                                </Nav.Link>\r\n                                                                                :\r\n                                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                                    onClick={(e) => this.copySampleStorageversion(copyId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faCopy} />\r\n\r\n                                                                                </Nav.Link>\r\n                                                                            }\r\n                                                                            <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                                // data-for=\"tooltip_list_wrap\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                onClick={() => this.confirmDelete(deleteId)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                            </Nav.Link>\r\n                                                                            <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                                // data-for=\"tooltip_list_wrap\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                                onClick={() => this.onApproveSampleStorageLocation(approveId)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                            </Nav.Link>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </Card.Subtitle>\r\n                                                            </Card.Header>\r\n                                                            <Card.Body>\r\n                                                                <TreeViewEditable\r\n                                                                    id=\"samplestoragelocation\"\r\n                                                                    name=\"samplestoragelocation\"\r\n                                                                    // label=\"Sample Storage Location\"\r\n                                                                    data={this.state.treeDataView}\r\n                                                                    expandIcons={true}\r\n                                                                    selectField={'active-node'}\r\n                                                                    item={this.itemRenderView}\r\n                                                                    onExpandChange={this.onExpandChangeView}\r\n                                                                    onItemClick={this.onItemClickView}\r\n                                                                />\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                        : \"\"}\r\n\r\n                                                </ProductList>\r\n                                                {/* End of detailed content */}\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                    </div>\r\n                                    {/* End of second column */}\r\n                                    {/* </PerfectScrollbar> */}\r\n\r\n                                </SplitterLayout>\r\n\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATION\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.loadTreeProperties === true ? [] : mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.props.Login.loadTreeProperties ? (\r\n                                <AddTreeProperties\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                            ) : this.state.treeData ? (\r\n                                <AddTreeview\r\n                                    treeData={this.state.treeData}\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    itemRender={this.itemRender}\r\n                                    onExpandChange={this.onExpandChange}\r\n                                    onItemClick={this.onItemClick}\r\n                                    onComboChange={this.onComboChange}\r\n                                    storageCategoryList={this.props.Login.storageCategoryList || []}\r\n                                    isOnlyDraft={this.props.Login.isOnlyDraft}\r\n                                />\r\n                            ) : (\r\n                                <></>\r\n                            )\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential, filterColumnData, changeStorageCategoryFilter,\r\n    getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation,\r\n    getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation\r\n})(injectIntl(SampleStorageLocation));"]},"metadata":{},"sourceType":"module"}