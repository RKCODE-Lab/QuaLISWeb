{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\AddPreRegistrationDesign.jsx\";\nimport React from 'react';\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { updateStore, crudMaster, getTableColumns, getChildValues, preRegAction } from '../../actions/index';\nimport { SampleType, transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getSameRecordFromTwoArrays, comboChild, rearrangeDateFormat } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass AddPreRegistrationDesign extends React.Component {\n  constructor(props) {\n    super(props); // this.confirmMessage = new ConfirmMessage();\n\n    this.onComboChange = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\");\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      //   if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\n      let data = [];\n      this.props.templateData.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.mandatory === true) {\n                data.push({\n                  \"mandatory\": true,\n                  \"idsName\": componentrow.label,\n                  \"dataField\": componentrow.label,\n                  \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                  \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                });\n              }\n            }) : component.mandatory === true ? data.push({\n              \"mandatory\": true,\n              \"idsName\": component.label,\n              \"dataField\": component.label,\n              \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n              \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n            }) : \"\";\n          });\n        });\n      });\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      data.forEach(item => {\n        if (this.state.selectedRecord[item.dataField] === undefined || this.state.selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(this.state.selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof this.state.selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.state.selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof this.state.selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (this.state.selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (this.state.selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        }\n      });\n\n      if (failedControls.length === 0) {\n        let inputData = [];\n        let selectedId = null;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let dataState = undefined;\n\n        if (this.props.Login.operation === \"update\") {\n          // edit\n          selectedId = this.state.selectedRecord.nchecklistqbcode;\n          dataState = this.state.dataState;\n          inputData[\"registration\"] = {\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design),\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n          const inputParam = {\n            methodUrl: 'RegistrationTemplate',\n            classUrl: 'dynamicpreregdesign',\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            dataState,\n            selectedId\n          };\n          const masterData = this.props.Login.masterData;\n        } else {\n          //add               \n          inputData[\"registrationtemplate\"] = {\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design),\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n        } // if (showEsign(this.props.Login.userRoleControlRights, \n        //     this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //             loadEsign: true, screenData: { inputParam, masterData }, saveType\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        // }\n        // else {\n\n\n        let Map = {};\n        Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate); //formatDate(this.fromDate);\n\n        Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate); //formatDate(this.toDate);\n\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        this.props.preRegAction(saveType, this.state.selectedRecord, this.props.comboComponents, this.props.Login.userInfo, Map); // }\n        //this.props.onSaveClick(saveType, this.formRef);\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.state = {\n      nflag: 1,\n      selectedRecord: this.props.Login.selectedRecord || {}\n    };\n  }\n\n  render() {\n    // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      dialogClassName: `${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }, `${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_ADD\"\n    })} ${this.props.intl.formatMessage({\n      id: \"IDS_DESIGNTEMPLATE\"\n    })}`), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DynamicSlideout, {\n      selectedRecord: this.props.selectedRecord,\n      templateData: this.props.templateData,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.props.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.userInfo,\n      timeZoneList: this.props.timeZoneList,\n      defaultTimeZone: this.props.defaultTimeZone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 36\n      }\n    })))))));\n  } // componentDidUpdate(previousProps) {\n  //     let updateState = false;\n  //     let { openAlertModal, design, selectedRecord, selectedFieldRecord,\n  //         selectedComponentpath, components, validComponents, tableColumn,\n  //         showConfirmAlert } = this.state\n  //     if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\n  //         updateState = true;\n  //         openAlertModal = false;\n  //     }\n  //     if (this.props.Login.design !== previousProps.Login.design) {\n  //         updateState = true;\n  //         design = this.props.Login.design;\n  //     }\n  //     if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n  //         selectedRecord = this.props.Login.selectedRecord;\n  //         updateState = true;\n  //     }\n  //     if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n  //         selectedFieldRecord = this.props.Login.selectedFieldRecord;\n  //         updateState = true;\n  //     }\n  //     if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n  //         if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\n  //             selectedComponentpath = this.props.Login.selectedComponentpath\n  //         }\n  //         selectedFieldRecord = this.props.Login.selectedFieldRecord\n  //         components = this.props.Login.components\n  //         validComponents = this.props.Login.validComponents\n  //         tableColumn = this.props.Login.tableColumn\n  //         updateState = true;\n  //     }\n  //     if (updateState) {\n  //         this.setState({\n  //             openAlertModal, design, selectedRecord, selectedFieldRecord,\n  //             tableColumn, selectedComponentpath, components, validComponents,\n  //             showConfirmAlert\n  //         })\n  //     }\n  // }\n\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getTableColumns,\n  getChildValues,\n  preRegAction\n})(injectIntl(AddPreRegistrationDesign));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/AddPreRegistrationDesign.jsx"],"names":["React","Button","Col","Modal","Row","FontAwesomeIcon","faSave","FormattedMessage","injectIntl","connect","updateStore","crudMaster","getTableColumns","getChildValues","preRegAction","SampleType","transactionStatus","DEFAULT_RETURN","showEsign","getSameRecordFromTwoArrays","comboChild","rearrangeDateFormat","toast","DynamicSlideout","mapStateToProps","state","Login","AddPreRegistrationDesign","Component","constructor","props","onComboChange","comboData","control","customName","comboName","label","selectedRecord","child","length","childComboList","comboComponents","childColumnList","map","columnList","val","parentList","withoutCombocomponent","inputParem","source","primarykeyField","valuemember","value","item","userInfo","updateInfo","typeName","data","onInputOnChange","event","target","type","name","checked","setState","onNumericInputChange","handleDateChange","dateValue","dateName","handleSaveClick","saveType","templateData","row","children","column","component","hasOwnProperty","componentrow","mandatory","push","inputtype","failedControls","startLabel","forEach","dataField","undefined","alertMessage","alertPreFix","intl","formatMessage","id","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","trim","inputData","selectedId","dataState","operation","nchecklistqbcode","nreactregtemplatecode","masterData","selectedTemplate","nsampletypecode","sregtemplatename","templateName","jsonString","JSON","stringify","design","ntransactionstatus","DRAFT","inputParam","methodUrl","classUrl","displayName","Map","fromDate","toDate","RealRegTypeValue","nregtypecode","RealRegSubTypeValue","nregsubtypecode","RealSampleTypeValue","PREREGISTER","info","nflag","render","openPortal","closeModal","handleChange","timeZoneList","defaultTimeZone"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { updateStore, crudMaster, getTableColumns,getChildValues,preRegAction } from '../../actions/index'\r\nimport { SampleType, transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign ,getSameRecordFromTwoArrays,comboChild, rearrangeDateFormat} from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass AddPreRegistrationDesign extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            nflag: 1,\r\n            selectedRecord: this.props.Login.selectedRecord || {},\r\n        }\r\n    }\r\n    render() {\r\n        // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\r\n        return (\r\n            <>\r\n                <Modal\r\n                    centered\r\n                    scrollable\r\n                    bsPrefix=\"model model_zindex\"\r\n                    show={this.props.Login.openPortal}\r\n                    onHide={this.props.closeModal}\r\n                    dialogClassName={`${this.state.nflag && this.state.nflag === 2 ? \r\n                        'alert-popup' : ''} modal-fullscreen`}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    enforceFocus={false}\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                >\r\n                    <Modal.Header className=\"d-flex align-items-center\">\r\n                        <Modal.Title id=\"add\" className=\"header-primary flex-grow-1\">\r\n                            {`${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({ id: \"IDS_EDIT\" }) : this.props.intl.formatMessage({ id: \"IDS_ADD\" })} ${this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATE\" })}`}\r\n                        </Modal.Title>\r\n                        <>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick()}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id={\"IDS_SAVE\"} defaultMessage={\"Save\"} />\r\n                            </Button>\r\n                        </>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"modal-inner-content\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                   <DynamicSlideout\r\n                                        selectedRecord={this.props.selectedRecord}\r\n                                        templateData={this.props.templateData}\r\n                                        handleChange={this.props.handleChange}\r\n                                        handleDateChange={this.props.handleDateChange}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                        comboData={this.props.comboData}\r\n                                        onComboChange={this.onComboChange}\r\n                                        userInfo={this.props.userInfo}\r\n                                        timeZoneList={this.props.timeZoneList}\r\n                                        defaultTimeZone={this.props.defaultTimeZone}\r\n                                    /> \r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n    // componentDidUpdate(previousProps) {\r\n    //     let updateState = false;\r\n    //     let { openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n    //         selectedComponentpath, components, validComponents, tableColumn,\r\n    //         showConfirmAlert } = this.state\r\n    //     if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\r\n    //         updateState = true;\r\n    //         openAlertModal = false;\r\n    //     }\r\n    //     if (this.props.Login.design !== previousProps.Login.design) {\r\n    //         updateState = true;\r\n    //         design = this.props.Login.design;\r\n    //     }\r\n    //     if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n    //         selectedRecord = this.props.Login.selectedRecord;\r\n    //         updateState = true;\r\n    //     }\r\n    //     if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n    //         selectedFieldRecord = this.props.Login.selectedFieldRecord;\r\n    //         updateState = true;\r\n    //     }\r\n    //     if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n    //         if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\r\n    //             selectedComponentpath = this.props.Login.selectedComponentpath\r\n    //         }\r\n\r\n    //         selectedFieldRecord = this.props.Login.selectedFieldRecord\r\n    //         components = this.props.Login.components\r\n    //         validComponents = this.props.Login.validComponents\r\n    //         tableColumn = this.props.Login.tableColumn\r\n    //         updateState = true;\r\n\r\n    //     }\r\n    //     if (updateState) {\r\n    //         this.setState({\r\n    //             openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n    //             tableColumn, selectedComponentpath, components, validComponents,\r\n    //             showConfirmAlert\r\n    //         })\r\n    //     }\r\n    // }\r\n    onComboChange = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList])\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n         this.setState({ selectedRecord });\r\n    }\r\n    // onInputOnChange = (event, value) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (event.target.type === 'toggle') {\r\n    //         selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n    //     } else if (event.target.type === 'numeric') {\r\n    //         if (/\\D/.test(event.target.value))\r\n    //             selectedRecord[event.target.name] = event.target.value;\r\n    //     } else if (event.target.type === 'checkbox') {\r\n    //         selectedRecord[event.target.name] = value;\r\n    //     } else if (event.target.type === 'radio') {\r\n    //         selectedRecord[event.target.name] = value\r\n    //     } else {\r\n    //         selectedRecord[event.target.name] = event.target.value;\r\n    //     }\r\n    //     this.setState({ selectedRecord });\r\n    //     // this.saveComponentProperties()\r\n    // }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleSaveClick = (saveType) => {\r\n     //   if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\r\n     let data=[]   \r\n     this.props.templateData.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                        if (componentrow.mandatory === true) {\r\n                            data.push( { \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype===\"combo\"?\"IDS_SELECT\":\"IDS_ENTER\", \"controlType\":  componentrow.inputtype===\"combo\"?\"selectbox\":\"textbox\" })\r\n                           \r\n                        } \r\n                    })\r\n                        : component.mandatory === true ?   data.push( { \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype===\"combo\"?\"IDS_SELECT\":\"IDS_ENTER\", \"controlType\":  component.inputtype===\"combo\"?\"selectbox\":\"textbox\" }) : \"\"\r\n                })\r\n            })\r\n        })\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        data.forEach(item => {\r\n            if (this.state.selectedRecord[item.dataField] === undefined || this.state.selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(this.state.selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof this.state.selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (this.state.selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof this.state.selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (this.state.selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (this.state.selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (failedControls.length === 0) {\r\n\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                selectedId = this.state.selectedRecord.nchecklistqbcode\r\n                dataState = this.state.dataState\r\n                inputData[\"registration\"] = {\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design),\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                }\r\n                const inputParam = {\r\n                    methodUrl: 'RegistrationTemplate',\r\n                    classUrl: 'dynamicpreregdesign',\r\n                    displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, dataState, selectedId\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"registrationtemplate\"] =\r\n                {\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design),\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                };\r\n            }\r\n            // if (showEsign(this.props.Login.userRoleControlRights, \r\n            //     this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //             loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n            // }\r\n            // else {\r\n                let Map={}\r\n                Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                this.props.preRegAction(saveType, \r\n                    this.state.selectedRecord,\r\n                    this.props.comboComponents,\r\n                    this.props.Login.userInfo,Map);\r\n            // }\r\n                //this.props.onSaveClick(saveType, this.formRef);\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { updateStore, crudMaster, getTableColumns,getChildValues,preRegAction })(injectIntl(AddPreRegistrationDesign))"]},"metadata":{},"sourceType":"module"}