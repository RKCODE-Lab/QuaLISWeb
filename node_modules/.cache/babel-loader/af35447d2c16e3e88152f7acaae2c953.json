{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\checklist\\\\checklist\\\\TemplateForm.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Button, Form, Modal } from 'react-bootstrap';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { MediaHeader, MediaLabel, MediaSubHeader, ModalInner } from '../../../components/App.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport DateTimePicker from '../../../components/date-time-picker/date-time-picker.component';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport { toast } from 'react-toastify';\n\nclass TemplateForm extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderSwitch = (control, selectedRecord) => {\n      switch (control.nchecklistcomponentcode) {\n        case 1:\n          {\n            let comboData = control.squestiondata ? control.squestiondata.split(\",\") : [];\n            let options = comboData ? comboData.map(option => ({\n              \"value\": option,\n              \"label\": option\n            })) : [];\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.squestion,\n              as: \"select\",\n              onChange: event => this.props.onTemplateComboChange(event, control),\n              formLabel: control.squestion,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              defaultValue: control.sdefaultvalue ? {\n                \"value\": control.sdefaultvalue,\n                \"label\": control.sdefaultvalue\n              } : \"\",\n              options: options,\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isDisabled: false,\n              isSearchable: false,\n              isClearable: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 25\n              }\n            }));\n          }\n\n        case 2:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(FormInput, {\n              name: control.squestion,\n              label: control.squestion,\n              type: \"text\",\n              defaultValue: control.sdefaultvalue ? control.sdefaultvalue : \"\",\n              isMandatory: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              required: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              maxLength: 100,\n              onChange: event => this.props.onTemplateInputChange(event, control) // id={control.nchecklistversionqbcode}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 25\n              }\n            }));\n          }\n\n        case 3:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(FormTextarea, {\n              label: control.squestion,\n              name: control.squestion,\n              onChange: event => this.props.onTemplateInputChange(event, control),\n              defaultValue: control.sdefaultvalue ? control.sdefaultvalue : \"\",\n              isMandatory: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              required: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              rows: \"2\",\n              maxLength: 255,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 25\n              }\n            }));\n          }\n\n        case 4:\n          {\n            let checkboxes = control.squestiondata ? control.squestiondata.split(\",\") : [];\n            let defaultCheckboxes = control.sdefaultvalue ? control.sdefaultvalue.split(\",\") : [];\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"fieldset\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 33\n              }\n            }, control.squestion, control.nmandatoryfield === transactionStatus.YES && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 158\n              }\n            }, \"*\")), checkboxes.map(checkbox => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"checkbox\",\n              name: control.squestion,\n              label: checkbox,\n              onChange: event => this.props.onTemplateInputChange(event, control),\n              id: checkbox,\n              defaultChecked: defaultCheckboxes ? defaultCheckboxes.includes(checkbox.trim()) ? true : false : false,\n              isMandatory: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              required: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 37\n              }\n            })))));\n          }\n\n        case 5:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 29\n              }\n            }, control.squestion, control.nmandatoryfield === transactionStatus.YES && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 114\n              }\n            }, \"*\"))));\n          }\n\n        case 6:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              htmlFor: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 29\n              }\n            }, control.squestion, control.nmandatoryfield === transactionStatus.YES && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 142\n              }\n            }, \"*\")), /*#__PURE__*/React.createElement(Button, {\n              className: \"btn\",\n              name: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 29\n              }\n            }, control.squestion)));\n          }\n\n        case 7:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(DateTimePicker, {\n              name: control.squestion,\n              label: control.squestion,\n              placeholderText: \"DD/MM/YYYY\",\n              selected: selectedRecord ? selectedRecord[control.nchecklistversionqbcode] ? selectedRecord[control.nchecklistversionqbcode].sdefaultvalue : control.sdefaultvalue ? new Date(control.sdefaultvalue) : null : control.sdefaultvalue ? new Date(control.sdefaultvalue) : null,\n              isMandatory: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              dateFormat: \"dd/MM/yyyy\",\n              className: \"form-control\",\n              onChange: date => this.props.onTemplateDateChange(date, control),\n              isClearable: true,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 25\n              }\n            }));\n          }\n\n        case 8:\n          {\n            let radioButtons = control.squestiondata ? control.squestiondata.split(\",\") : [];\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"fieldset\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 33\n              }\n            }, control.squestion, control.nmandatoryfield === transactionStatus.YES && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 158\n              }\n            }, \"*\")), radioButtons.map(radioButton => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"radio\",\n              name: control.squestion,\n              label: radioButton,\n              onChange: event => this.props.onTemplateInputChange(event, control),\n              id: radioButton,\n              defaultChecked: control.sdefaultvalue ? control.sdefaultvalue.trim() === radioButton.trim() ? true : false : false,\n              isMandatory: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              required: control.nmandatoryfield === transactionStatus.YES ? true : false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 37\n              }\n            })))));\n          }\n\n        default:\n          return \"\";\n      }\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.needValidation) {\n        const failedControls = [];\n        const mandatoryFields = [];\n        this.props.templateData.map(control => control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : '');\n        mandatoryFields.forEach(item => {\n          if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\n            if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            }\n          } else {\n            const alertMessage = item.squestion;\n            failedControls.push(alertMessage);\n          }\n        }); // console.log(\"validationPassed:\", failedControls);\n\n        if (failedControls.length === 0) {\n          this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n        } else {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${failedControls[0]}`);\n        }\n      } else {\n        this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: \"lg\",\n      backdrop: \"static\",\n      show: this.props.viewScreen,\n      dialogClassName: \"modal-dialog-slideout\",\n      \"aria-labelledby\": \"add-\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }\n    }, this.props.screenName ? /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      defaultMessage: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 23\n      }\n    }, this.props.templateData[0].schecklistname, \" # \", this.props.templateData[0].schecklistversionname), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }\n    })), this.props.needSaveButton ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 25\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 25\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.props.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 33\n      }\n    }, this.props.screenName === \"IDS_CHECKLISTRESULT\" && Object.values(this.props.selectedRecord).length > 0 ?\n    /*#__PURE__*/\n    // <Row className=\"mb-4\">\n    React.createElement(Col, {\n      md: 12,\n      className: \"mb-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 45\n      }\n    }, \"Test:\", \" \" + this.props.selectedRecord.stestsynonym), /*#__PURE__*/React.createElement(MediaSubHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `labelfont`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 49\n      }\n    }, \"Parameter: \", this.props.selectedRecord.sparametersynonym))) // </Row>\n    : \"\", this.props.templateData.map(control => this.renderSwitch(control, this.props.selectedRecord))))))));\n  }\n\n}\n\nexport default injectIntl(TemplateForm);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/checklist/checklist/TemplateForm.jsx"],"names":["React","Row","Col","Card","Button","Form","Modal","faSave","FormattedMessage","injectIntl","MediaHeader","MediaLabel","MediaSubHeader","ModalInner","FontAwesomeIcon","FormTextarea","FormInput","FormSelectSearch","DateTimePicker","transactionStatus","toast","TemplateForm","Component","renderSwitch","control","selectedRecord","nchecklistcomponentcode","comboData","squestiondata","split","options","map","option","squestion","event","props","onTemplateComboChange","intl","formatMessage","id","nmandatoryfield","YES","sdefaultvalue","onTemplateInputChange","checkboxes","defaultCheckboxes","checkbox","includes","trim","nchecklistversionqbcode","Date","date","onTemplateDateChange","radioButtons","radioButton","onSaveClick","needValidation","failedControls","mandatoryFields","templateData","push","forEach","item","length","alertMessage","Login","userInfo","nregtypecode","nregsubtypecode","info","render","viewScreen","screenName","schecklistname","schecklistversionname","handleClose","needSaveButton","formRef","Object","values","stestsynonym","sparametersynonym"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Button, Form, Modal } from 'react-bootstrap';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { MediaHeader, MediaLabel, MediaSubHeader, ModalInner } from '../../../components/App.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport DateTimePicker from '../../../components/date-time-picker/date-time-picker.component';\r\nimport { transactionStatus } from '../../../components/Enumeration'\r\nimport { toast } from 'react-toastify';\r\nclass TemplateForm extends React.Component {\r\n\r\n    renderSwitch = (control, selectedRecord) => {\r\n        switch (control.nchecklistcomponentcode) {\r\n            case 1: {\r\n                let comboData = control.squestiondata ? control.squestiondata.split(\",\") : []\r\n                let options = comboData ? comboData.map(option => ({ \"value\": option, \"label\": option })) : []\r\n                return (\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            name={control.squestion}\r\n                            as={\"select\"}\r\n                            onChange={(event) => this.props.onTemplateComboChange(event, control)}\r\n                            formLabel={control.squestion}\r\n                            placeholder={this.props.intl.formatMessage({id:\"IDS_SELECTRECORD\"})}\r\n                            isMandatory={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                            defaultValue={control.sdefaultvalue ? { \"value\": control.sdefaultvalue, \"label\": control.sdefaultvalue } : \"\"}\r\n                            options={options}\r\n                            optionId={\"value\"}\r\n                            optionValue={\"label\"}\r\n                            isMulti={false}\r\n                            isDisabled={false}\r\n                            isSearchable={false}\r\n                            isClearable={true}\r\n                        />\r\n                    </Col>\r\n                );\r\n            }\r\n            case 2: {\r\n                return (\r\n                    <Col md={12}>\r\n                        <FormInput\r\n                            name={control.squestion}\r\n                            label={control.squestion}\r\n                            type=\"text\"\r\n                            defaultValue={control.sdefaultvalue ? control.sdefaultvalue : \"\"}\r\n                            isMandatory={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                            required={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                            maxLength={100}\r\n                            onChange={(event) => this.props.onTemplateInputChange(event, control)}\r\n                        // id={control.nchecklistversionqbcode}\r\n                        />\r\n                    </Col>\r\n                );\r\n            }\r\n            case 3: {\r\n                return (\r\n                    <Col md={12}>\r\n                        <FormTextarea\r\n                            label={control.squestion}\r\n                            name={control.squestion}\r\n                            onChange={(event) => this.props.onTemplateInputChange(event, control)}\r\n                            defaultValue={control.sdefaultvalue ? control.sdefaultvalue : \"\"}\r\n                            isMandatory={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                            required={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                            rows=\"2\"\r\n                            maxLength={255}\r\n                        />\r\n                    </Col>\r\n                );\r\n            }\r\n            case 4: {\r\n                let checkboxes = control.squestiondata ? control.squestiondata.split(\",\") : []\r\n                let defaultCheckboxes = control.sdefaultvalue ? control.sdefaultvalue.split(\",\") : []\r\n\r\n                return (\r\n                    <Col md={12}>\r\n                        <fieldset>\r\n                            <Form.Group>\r\n                                <Form.Label as=\"legend\" htmlFor={control.squestion}>{control.squestion}{control.nmandatoryfield === transactionStatus.YES && <sup>*</sup>}</Form.Label>\r\n                                {checkboxes.map(checkbox =>\r\n\r\n                                    <Form.Check\r\n                                        inline={true}\r\n                                        type=\"checkbox\"\r\n                                        name={control.squestion}\r\n                                        label={checkbox}\r\n                                        onChange={(event) => this.props.onTemplateInputChange(event, control)}\r\n                                        id={checkbox}\r\n                                        defaultChecked={defaultCheckboxes ? defaultCheckboxes.includes(checkbox.trim()) ? true : false : false}\r\n                                        isMandatory={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                                        required={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                                    />\r\n\r\n                                )}\r\n                            </Form.Group>\r\n                        </fieldset>\r\n                    </Col>\r\n\r\n                );\r\n            }\r\n            case 5: {\r\n                return (\r\n                    <Col md={12}>\r\n                        <Form.Group>\r\n                            <Form.Label>{control.squestion}{control.nmandatoryfield === transactionStatus.YES && <sup>*</sup>}</Form.Label>{ }\r\n                        </Form.Group>\r\n                    </Col>\r\n                );\r\n            }\r\n            case 6: {\r\n                return (\r\n                    <Col md={12}>\r\n                        <Form.Group>\r\n                            <Form.Label htmlFor={control.squestion}>{control.squestion}{control.nmandatoryfield === transactionStatus.YES && <sup>*</sup>}</Form.Label>\r\n                            <Button className=\"btn\" name={control.squestion}>\r\n                                {control.squestion}\r\n                            </Button>\r\n                        </Form.Group>\r\n                    </Col>\r\n                );\r\n            }\r\n            case 7: {\r\n                return (\r\n                    <Col md={12}>\r\n                        <DateTimePicker\r\n                            name={control.squestion}\r\n                            label={control.squestion}\r\n                            placeholderText={\"DD/MM/YYYY\"}\r\n                            selected={\r\n                                selectedRecord ?\r\n                                    selectedRecord[control.nchecklistversionqbcode] ? selectedRecord[control.nchecklistversionqbcode].sdefaultvalue :\r\n                                        control.sdefaultvalue ? new Date(control.sdefaultvalue) : null :\r\n                                    control.sdefaultvalue ? new Date(control.sdefaultvalue) : null\r\n                            }\r\n                            isMandatory={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                            dateFormat=\"dd/MM/yyyy\"\r\n                            className='form-control'\r\n                            onChange={(date) => this.props.onTemplateDateChange(date, control)}\r\n                            isClearable={true}\r\n                        />\r\n                    </Col>\r\n                );\r\n            }\r\n            case 8: {\r\n                let radioButtons = control.squestiondata ? control.squestiondata.split(\",\") : []\r\n                return (\r\n\r\n                    <Col md={12}>\r\n                        <fieldset>\r\n                            <Form.Group>\r\n                                <Form.Label as=\"legend\" htmlFor={control.squestion}>{control.squestion}{control.nmandatoryfield === transactionStatus.YES && <sup>*</sup>}</Form.Label>\r\n                                {radioButtons.map(radioButton =>\r\n\r\n                                    <Form.Check\r\n                                        inline={true}\r\n                                        type=\"radio\"\r\n                                        name={control.squestion}\r\n                                        label={radioButton}\r\n                                        onChange={(event) => this.props.onTemplateInputChange(event, control)}\r\n                                        id={radioButton}\r\n                                        defaultChecked={control.sdefaultvalue ? control.sdefaultvalue.trim() === radioButton.trim() ? true : false : false}\r\n                                        isMandatory={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                                        required={control.nmandatoryfield === transactionStatus.YES ? true : false}\r\n                                    />\r\n\r\n                                )}\r\n                            </Form.Group>\r\n                        </fieldset>\r\n                    </Col>\r\n\r\n                );\r\n            }\r\n            default:\r\n                return (\"\");\r\n\r\n\r\n        }\r\n\r\n    }\r\n    onSaveClick = () => {\r\n        if(this.props.needValidation){\r\n            const failedControls = [];\r\n            const mandatoryFields=[];\r\n      this.props.templateData.map(control =>\r\n          control.nmandatoryfield===transactionStatus.YES?mandatoryFields.push(control):''\r\n        \r\n        )\r\n        mandatoryFields.forEach(item=>{ \r\n            \r\n            if (this.props.selectedRecord&&this.props.selectedRecord[item.nchecklistversionqbcode]&&this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue)\r\n            {\r\n                if(typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\"){\r\n                    //to validate FormSelectSearch component\r\n                    if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0){\r\n                        const alertMessage=item.squestion\r\n                        failedControls.push(alertMessage);\r\n                    }\r\n                }\r\n                else if(typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\")\r\n                {\r\n                    if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0 ){\r\n                        const alertMessage=item.squestion\r\n                        failedControls.push(alertMessage);\r\n                    }\r\n                }\r\n                else \r\n                {\r\n                    if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0 ){\r\n                        const alertMessage=item.squestion\r\n                        failedControls.push(alertMessage);\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                const alertMessage=item.squestion\r\n                failedControls.push(alertMessage);\r\n            }\r\n        });\r\n       // console.log(\"validationPassed:\", failedControls);\r\n       \r\n        if (failedControls.length === 0){\r\n            this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode,this.props.nregsubtypecode)\r\n        }\r\n        else{\r\n            \r\n            toast.info(`${this.props.intl.formatMessage({id:\"IDS_ENTER\"})} ${failedControls[0]}`);\r\n           \r\n          \r\n        }\r\n        }else{\r\n            this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode,this.props.nregsubtypecode)\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                size=\"lg\"\r\n                backdrop=\"static\"\r\n                show={this.props.viewScreen}\r\n                dialogClassName=\"modal-dialog-slideout\"\r\n                aria-labelledby={\"add-\"}>\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    {this.props.screenName?\r\n                    <Modal.Title id={\"add\"} className=\"header-primary flex-grow-1\">\r\n                        <FormattedMessage id={this.props.screenName} defaultMessage={this.props.screenName} />\r\n                    </Modal.Title>\r\n                    : <Modal.Title id={\"add\"} className=\"header-primary flex-grow-1\">\r\n                        {this.props.templateData[0].schecklistname} # {this.props.templateData[0].schecklistversionname}\r\n                    </Modal.Title>}\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.handleClose}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.needSaveButton?\r\n                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode,this.props.nregsubtypecode)}>\r\n                        <FontAwesomeIcon icon={faSave} /> { }\r\n                        <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                    </Button>\r\n                    : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ModalInner>\r\n                        <Card.Body>\r\n                            <Form ref={this.props.formRef}>\r\n                                <Row>\r\n                                    {this.props.screenName === \"IDS_CHECKLISTRESULT\" && Object.values(this.props.selectedRecord).length > 0 ?\r\n                                        // <Row className=\"mb-4\">\r\n                                        <Col md={12} className=\"mb-4\">\r\n                                            <MediaHeader className={`labelfont`}>Test:{\" \" + this.props.selectedRecord.stestsynonym}</MediaHeader>\r\n                                            <MediaSubHeader>\r\n                                                <MediaLabel className={`labelfont`}>Parameter: {this.props.selectedRecord.sparametersynonym}</MediaLabel>\r\n                                            </MediaSubHeader>\r\n                                        </Col>\r\n                                        // </Row>\r\n                                        : \"\"}\r\n                                    {this.props.templateData.map(control =>\r\n                                        this.renderSwitch(control, this.props.selectedRecord)\r\n                                    )}\r\n                                </Row>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(TemplateForm);"]},"metadata":{},"sourceType":"module"}