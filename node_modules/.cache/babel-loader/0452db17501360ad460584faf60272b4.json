{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\DynamicSlideout.jsx\";\nimport React from 'react';\nimport { Row, Col, Button, Form, InputGroup } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { toast } from 'react-toastify';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormEmail from '../../components/form-email/form-email.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\n\nclass DynamicSlideout extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderSwitch = (control, selectedRecord) => {\n      const editfield = this.props.editfield && this.props.editfield;\n      const index = editfield ? editfield.findIndex(x => x.label === control.label) : -1;\n      const liststatus = editfield && editfield[index] && editfield[index];\n      const listdata = liststatus && liststatus.editableuntill || [];\n      const checkReadOnly = listdata ? this.props.selectedRecord.ntransactionstatus ? !listdata.includes(this.props.selectedRecord.ntransactionstatus) : false : false;\n\n      switch (control.inputtype) {\n        case 'combo':\n          {\n            console.log(control.label); // let comboData = control.squestiondata ? control.squestiondata.split(\",\") : []\n            // let options = comboData ? comboData.map(option => ({ \"value\": option, \"label\": option })) : []\n            //  console.log(control.label, this.props.selectedRecord[control.label])\n\n            return /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: control.label\n              }) : control.displayname[this.props.userInfo.slanguagetypecode],\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              isSearchable: false,\n              isClearable: false,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'textinput':\n          {\n            return /*#__PURE__*/React.createElement(FormInput, {\n              name: control.label,\n              label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: control.label\n              }) : control.displayname[this.props.userInfo.slanguagetypecode],\n              type: \"text\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control.label) // id={control.nchecklistversionqbcode}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'email':\n          {\n            return /*#__PURE__*/React.createElement(FormEmail, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode],\n              type: \"email\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control.label) // id={control.nchecklistversionqbcode}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'textarea':\n          {\n            // console.log(control.label, this.props.selectedRecord[control.label])\n            return /*#__PURE__*/React.createElement(FormTextarea, {\n              name: control.label,\n              label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: control.label\n              }) : control.displayname[this.props.userInfo.slanguagetypecode],\n              type: \"text\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              onChange: event => this.props.onInputOnChange(event, control.label),\n              rows: \"2\",\n              maxLength: control.sfieldlength,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'toggle':\n          return /*#__PURE__*/React.createElement(CustomSwitch, {\n            label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n              id: control.label\n            }) : control.displayname[this.props.userInfo.slanguagetypecode],\n            type: \"switch\",\n            name: control.label,\n            onChange: event => this.props.onInputOnChange(event),\n            placeholder: control.label,\n            defaultValue: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false,\n            checked: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false //disabled={props.selectedRecord[props.extractedColumnList[2].controlName] === 3 ? true :false}\n            ,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 21\n            }\n          });\n\n        case 5:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 25\n              }\n            }, control.isMultiLingualLabel ? this.props.intl.formatMessage({\n              id: control.squestion\n            }) : control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 70\n              }\n            }, \"*\")));\n          }\n\n        case 6:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              htmlFor: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 25\n              }\n            }, control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 106\n              }\n            }, \"*\")), /*#__PURE__*/React.createElement(Button, {\n              className: \"btn\",\n              name: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 25\n              }\n            }, control.squestion));\n          }\n\n        case 'Numeric':\n          {\n            return /*#__PURE__*/React.createElement(FormNumericInput, {\n              name: control.label,\n              label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: control.label\n              }) : control.displayname[this.props.userInfo.slanguagetypecode],\n              className: \"form-control\",\n              type: \"text\",\n              strict: true,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onNumericInputChange(event, control.label),\n              precision: control.precision || 0,\n              max: control.max,\n              min: control.min,\n              noStyle: true // id={control.nchecklistversionqbcode}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'date':\n          {\n            return (\n              /*#__PURE__*/\n              // <DateTimePicker\n              //     name={control.squestion}\n              //     label={control.squestion}\n              //     placeholderText={\"DD/MM/YYYY\"}\n              //     showTimeSelect={control.dateonly==true?false:true}\n              //     selected={\n              //         selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null\n              //     }\n              //     isMandatory={control.mandatory}\n              //     dateFormat=\"dd/MM/yyyy\"\n              //     className='form-control'\n              //     onChange={(date) => this.props.handleDateChange(date, control.label)}\n              //     isClearable={true}\n              // />\n              React.createElement(React.Fragment, null, control.timezone ? /*#__PURE__*/React.createElement(Row, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(Col, {\n                md: 6,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(DateTimePicker, {\n                name: control.label,\n                label: control.displayname[this.props.userInfo.slanguagetypecode],\n                className: \"form-control\",\n                placeholderText: this.props.intl.formatMessage({\n                  id: \"IDS_SELECTDATE\"\n                }),\n                selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null,\n                dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n                timeInputLabel: this.props.intl.formatMessage({\n                  id: \"IDS_TIME\"\n                }),\n                showTimeInput: control.dateonly === true ? false : true,\n                showTimeSelectOnly: control.timeonly // isClearable={false}\n                ,\n                isMandatory: control.mandatory,\n                maxDate: this.props.CurrentTime,\n                maxTime: this.props.CurrentTime,\n                onChange: date => this.props.handleDateChange(date, control.label),\n                value: this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date(),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 37\n                }\n              })), /*#__PURE__*/React.createElement(Col, {\n                md: 6,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n                name: `tz${control.label}`,\n                as: \"select\",\n                onChange: event => this.props.onComboChange(event, control, `tz${control.label}`),\n                formLabel: this.props.intl.formatMessage({\n                  id: \"IDS_TIMEZONE\"\n                }),\n                placeholder: this.props.intl.formatMessage({\n                  id: \"IDS_SELECTRECORD\"\n                }),\n                isMandatory: true // defaultValue={this.props.defaultTimeZone}\n                ,\n                value: this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone,\n                options: this.props.timeZoneList,\n                optionId: \"value\",\n                optionValue: \"label\",\n                isMulti: false,\n                isDisabled: control.readonly ? control.readonly : checkReadOnly,\n                isSearchable: false,\n                isClearable: false,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 37\n                }\n              }))) : /*#__PURE__*/React.createElement(DateTimePicker, {\n                name: control.label,\n                label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                  id: control.label\n                }) : control.displayname[this.props.userInfo.slanguagetypecode],\n                className: \"form-control\",\n                placeholderText: this.props.intl.formatMessage({\n                  id: \"IDS_SELECTDATE\"\n                }),\n                selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null,\n                dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n                timeInputLabel: this.props.intl.formatMessage({\n                  id: \"IDS_TIME\"\n                }),\n                showTimeInput: control.dateonly === true ? false : true,\n                showTimeSelectOnly: control.timeonly // isClearable={false}\n                ,\n                isMandatory: control.mandatory,\n                maxDate: this.props.CurrentTime,\n                maxTime: this.props.CurrentTime,\n                onChange: date => this.props.handleDateChange(date, control.label),\n                value: this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date(),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 29\n                }\n              }))\n            );\n          }\n\n        case 'checkbox':\n          {\n            let checkboxes = control.radioOptions ? control.radioOptions.tags : [];\n            console.log('checkbox:', checkboxes);\n            return /*#__PURE__*/React.createElement(InputGroup, {\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 29\n              }\n            }, control.isMultiLingualLabel ? this.props.intl.formatMessage({\n              id: control.label\n            }) : control.displayname[this.props.userInfo.slanguagetypecode]), checkboxes.map(checkbox => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"checkbox\",\n              name: control.label,\n              label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: checkbox.text\n              }) : checkbox.text // label={checkbox.text}\n              ,\n              onChange: event => this.props.onInputOnChange(event, checkbox.text),\n              id: checkbox.id // defaultChecked={this.props.selectedRecord[control.label] ?\n              //       checkbox.text.trim() === this.props.selectedRecord[control.label] ? true : false : false}\n              ,\n              defaultChecked: this.props.selectedRecord[control.label] === 3 ? true : false,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'radio':\n          {\n            let radioButtons = control.radioOptions ? control.radioOptions.tags : [];\n            return /*#__PURE__*/React.createElement(\"fieldset\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 29\n              }\n            }, control.displayname[this.props.userInfo.slanguagetypecode]), radioButtons.map(radioButton => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"radio\",\n              name: control.label,\n              label: radioButton.text,\n              onChange: event => this.props.onInputOnChange(event, radioButton.text),\n              id: radioButton.id,\n              defaultChecked: selectedRecord[control.label] ? radioButton.text.trim() === selectedRecord[control.label].trim() ? true : false : false,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              disabled: control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 288,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'files':\n          {\n            return /*#__PURE__*/React.createElement(DropZone, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode],\n              maxFiles: control.maxFiles || 1,\n              accept: control.accept && control.accept.value,\n              minSize: 0,\n              maxSize: 1,\n              onDrop: event => this.props.onDropFile(event, control.label, 1),\n              multiple: control.maxFiles > 1 ? true : false,\n              editFiles: this.props.selectedRecord ? this.props.selectedRecord : {} // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\n              // fileSizeName=\"nfilesize\"\n              ,\n              fileName: control.label,\n              deleteAttachment: this.props.deleteAttachment,\n              actionType: this.props.actionType,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 21\n              }\n            });\n          }\n\n        default:\n          return \"\";\n      }\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.needValidation) {\n        const failedControls = [];\n        const mandatoryFields = [];\n        this.props.templateData.map(control => control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : '');\n        mandatoryFields.forEach(item => {\n          if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\n            if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            }\n          } else {\n            const alertMessage = item.squestion;\n            failedControls.push(alertMessage);\n          }\n        }); // console.log(\"validationPassed:\", failedControls);\n\n        if (failedControls.length === 0) {\n          this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n        } else {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${failedControls[0]}`);\n        }\n      } else {\n        this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n      }\n    };\n  }\n\n  render() {\n    // this.props.templateData && Object.keys(this.props.templateData).map(design =>\n    console.log('design', Object.keys(this.props.templateData).length);\n    console.log('design11', this.props.templateData); // )\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.templateData ? this.props.templateData.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 29\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 41\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 61\n        }\n      }, component.children.map(componentrow => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / componentrow.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 69\n        }\n      }, this.renderSwitch(componentrow, this.props.selectedRecord)))) : /*#__PURE__*/React.createElement(React.Fragment, null, this.renderSwitch(component, this.props.selectedRecord));\n    }))) : \"\")) : \"\");\n  }\n\n}\n\nexport default injectIntl(DynamicSlideout);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dynamicpreregdesign/DynamicSlideout.jsx"],"names":["React","Row","Col","Button","Form","InputGroup","injectIntl","FormTextarea","FormInput","FormSelectSearch","DateTimePicker","transactionStatus","toast","CustomSwitch","FormEmail","FormNumericInput","DropZone","DynamicSlideout","Component","renderSwitch","control","selectedRecord","editfield","props","index","findIndex","x","label","liststatus","listdata","editableuntill","checkReadOnly","ntransactionstatus","includes","inputtype","console","log","event","onComboChange","isMultiLingualLabel","intl","formatMessage","id","displayname","userInfo","slanguagetypecode","mandatory","comboData","readonly","sfieldlength","onInputOnChange","squestion","onNumericInputChange","precision","max","min","timezone","Date","loadcurrentdate","dateonly","timeonly","CurrentTime","date","handleDateChange","defaultTimeZone","timeZoneList","checkboxes","radioOptions","tags","map","checkbox","text","radioButtons","radioButton","trim","maxFiles","accept","value","onDropFile","deleteAttachment","actionType","onSaveClick","needValidation","failedControls","mandatoryFields","templateData","nmandatoryfield","YES","push","forEach","item","nchecklistversionqbcode","sdefaultvalue","length","alertMessage","Login","nregtypecode","nregsubtypecode","info","render","Object","keys","children","column","component","hasOwnProperty","componentrow"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Button, Form, InputGroup } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { transactionStatus } from '../../components/Enumeration'\r\nimport { toast } from 'react-toastify';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormEmail from '../../components/form-email/form-email.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nclass DynamicSlideout extends React.Component {\r\n\r\n\r\n    renderSwitch = (control, selectedRecord) => {\r\n        const editfield = this.props.editfield && this.props.editfield\r\n        const index = editfield ? editfield.findIndex(x => x.label === control.label) : -1\r\n        const liststatus = editfield && editfield[index] &&\r\n            editfield[index]\r\n        const listdata = liststatus && liststatus.editableuntill || []\r\n        const checkReadOnly = listdata ? this.props.selectedRecord.ntransactionstatus ?\r\n            !listdata.includes(this.props.selectedRecord.ntransactionstatus)\r\n            : false : false\r\n\r\n\r\n\r\n        switch (control.inputtype) {\r\n            case 'combo': {\r\n                console.log(control.label)\r\n                // let comboData = control.squestiondata ? control.squestiondata.split(\",\") : []\r\n                // let options = comboData ? comboData.map(option => ({ \"value\": option, \"label\": option })) : []\r\n                //  console.log(control.label, this.props.selectedRecord[control.label])\r\n                return (\r\n                    <FormSelectSearch\r\n                        name={control.label}\r\n                        as={\"select\"}\r\n                        onChange={(event) => this.props.onComboChange(event, control)}\r\n                        formLabel={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: control.label }) : control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        isMandatory={control.mandatory}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                        optionId={\"value\"}\r\n                        optionValue={\"label\"}\r\n                        isMulti={false}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                        isSearchable={false}\r\n                        isClearable={false}\r\n                    />\r\n                );\r\n            }\r\n            case 'textinput': {\r\n                return (\r\n                    <FormInput\r\n                        name={control.label}\r\n                        label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: control.label }) : control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                        type=\"text\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                    // id={control.nchecklistversionqbcode}\r\n                    />\r\n                );\r\n            }\r\n            case 'email': {\r\n                return (\r\n                    <FormEmail\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                        type=\"email\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                    // id={control.nchecklistversionqbcode}\r\n                    />\r\n                );\r\n            }\r\n            case 'textarea': {\r\n                // console.log(control.label, this.props.selectedRecord[control.label])\r\n                return (\r\n                    <FormTextarea\r\n                        name={control.label}\r\n                        label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: control.label }) : control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                        type=\"text\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                        rows=\"2\"\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                    />\r\n                );\r\n            }\r\n            case 'toggle':\r\n                return (\r\n                    <CustomSwitch\r\n                        label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: control.label }) : control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                        type=\"switch\"\r\n                        name={control.label}\r\n                        onChange={(event) => this.props.onInputOnChange(event)}\r\n                        placeholder={control.label}\r\n                        defaultValue={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                        checked={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                    //disabled={props.selectedRecord[props.extractedColumnList[2].controlName] === 3 ? true :false}\r\n                    />\r\n                );\r\n            case 5: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label>{control.isMultiLingualLabel ? this.props.intl.formatMessage({\r\n                            id:\r\n                                control.squestion\r\n                        }) : control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>{ }\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 6: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor={control.squestion}>{control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>\r\n                        <Button className=\"btn\" name={control.squestion}>\r\n                            {control.squestion}\r\n                        </Button>\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 'Numeric': {\r\n                return (\r\n                    <FormNumericInput\r\n                        name={control.label}\r\n                        label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: control.label }) : control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        strict={true}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onNumericInputChange(event, control.label)}\r\n                        precision={control.precision || 0}\r\n                        max={control.max}\r\n                        min={control.min}\r\n                        noStyle={true}\r\n                    // id={control.nchecklistversionqbcode}\r\n                    />\r\n                )\r\n            }\r\n            case 'date': {\r\n                return (\r\n                    // <DateTimePicker\r\n                    //     name={control.squestion}\r\n                    //     label={control.squestion}\r\n                    //     placeholderText={\"DD/MM/YYYY\"}\r\n                    //     showTimeSelect={control.dateonly==true?false:true}\r\n                    //     selected={\r\n                    //         selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null\r\n                    //     }\r\n                    //     isMandatory={control.mandatory}\r\n                    //     dateFormat=\"dd/MM/yyyy\"\r\n                    //     className='form-control'\r\n                    //     onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                    //     isClearable={true}\r\n                    // />\r\n                    <>\r\n                        {control.timezone ?\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <DateTimePicker\r\n                                        name={control.label}\r\n                                        label={control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                                        className='form-control'\r\n                                        placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                        selected={selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null}\r\n                                        dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                        timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                        showTimeInput={control.dateonly === true ? false : true}\r\n                                        showTimeSelectOnly={control.timeonly}\r\n                                        // isClearable={false}\r\n                                        isMandatory={control.mandatory}\r\n                                        maxDate={this.props.CurrentTime}\r\n                                        maxTime={this.props.CurrentTime}\r\n                                        onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                        value={this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date()}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormSelectSearch\r\n                                        name={`tz${control.label}`}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.props.onComboChange(event, control, `tz${control.label}`)}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        // defaultValue={this.props.defaultTimeZone}\r\n                                        value={this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone}\r\n                                        options={this.props.timeZoneList}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n                                        isDisabled={control.readonly ?\r\n                                            control.readonly : checkReadOnly}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row> :\r\n                            <DateTimePicker\r\n                                name={control.label}\r\n                                label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: control.label }) : control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                                className='form-control'\r\n                                placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                selected={selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null}\r\n                                dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                showTimeInput={control.dateonly === true ? false : true}\r\n                                showTimeSelectOnly={control.timeonly}\r\n                                // isClearable={false}\r\n                                isMandatory={control.mandatory}\r\n                                maxDate={this.props.CurrentTime}\r\n                                maxTime={this.props.CurrentTime}\r\n                                onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                value={this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date()}\r\n                            />\r\n                        }\r\n\r\n                    </>\r\n                );\r\n            }\r\n            case 'checkbox': {\r\n                let checkboxes = control.radioOptions ? control.radioOptions.tags : []\r\n                console.log('checkbox:', checkboxes)\r\n                return (\r\n                    <InputGroup size={'lg'}>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{\r\n                                control.isMultiLingualLabel ? this.props.intl.formatMessage({\r\n                                    id:\r\n                                        control.label\r\n                                }) : control.displayname[this.props.userInfo.slanguagetypecode]}</Form.Label>\r\n                            {checkboxes.map(checkbox =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"checkbox\"\r\n                                    name={control.label}\r\n                                    label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: checkbox.text }) : checkbox.text}\r\n                                    // label={checkbox.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event, checkbox.text)}\r\n                                    id={checkbox.id}\r\n                                    // defaultChecked={this.props.selectedRecord[control.label] ?\r\n                                    //       checkbox.text.trim() === this.props.selectedRecord[control.label] ? true : false : false}\r\n\r\n                                    defaultChecked={this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    size={'lg'}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </InputGroup >\r\n\r\n                );\r\n            }\r\n            case 'radio': {\r\n                let radioButtons = control.radioOptions ? control.radioOptions.tags : []\r\n                return (\r\n                    <fieldset>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{control.displayname[this.props.userInfo.slanguagetypecode]}</Form.Label>\r\n                            {radioButtons.map(radioButton =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"radio\"\r\n                                    name={control.label}\r\n                                    label={radioButton.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event, radioButton.text)}\r\n                                    id={radioButton.id}\r\n                                    defaultChecked={selectedRecord[control.label] ? radioButton.text.trim() === selectedRecord[control.label].trim() ? true : false : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    disabled={control.readonly ?\r\n                                        control.readonly : checkReadOnly}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </fieldset>\r\n                );\r\n            }\r\n            case 'files': {\r\n                return (\r\n                    <DropZone\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode]}\r\n                        maxFiles={control.maxFiles || 1}\r\n                        accept={control.accept && control.accept.value}\r\n                        minSize={0}\r\n                        maxSize={1}\r\n                        onDrop={(event) => this.props.onDropFile(event, control.label, 1)}\r\n                        multiple={control.maxFiles > 1 ? true : false}\r\n                        editFiles={this.props.selectedRecord ? this.props.selectedRecord : {}}\r\n                        // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\r\n                        // fileSizeName=\"nfilesize\"\r\n                        fileName={control.label}\r\n                        deleteAttachment={this.props.deleteAttachment}\r\n                        actionType={this.props.actionType}\r\n                    />\r\n                )\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n\r\n    }\r\n    onSaveClick = () => {\r\n        if (this.props.needValidation) {\r\n            const failedControls = [];\r\n            const mandatoryFields = [];\r\n            this.props.templateData.map(control =>\r\n                control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : ''\r\n\r\n            )\r\n            mandatoryFields.forEach(item => {\r\n\r\n                if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\r\n                    if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const alertMessage = item.squestion\r\n                    failedControls.push(alertMessage);\r\n                }\r\n            });\r\n            // console.log(\"validationPassed:\", failedControls);\r\n\r\n            if (failedControls.length === 0) {\r\n                this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n            }\r\n            else {\r\n\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${failedControls[0]}`);\r\n\r\n\r\n            }\r\n        } else {\r\n            this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n        }\r\n    }\r\n    render() {\r\n        // this.props.templateData && Object.keys(this.props.templateData).map(design =>\r\n        console.log('design', Object.keys(this.props.templateData).length)\r\n        console.log('design11', this.props.templateData)\r\n        // )\r\n        return (\r\n            <>\r\n                {\r\n                    this.props.templateData ?\r\n                        this.props.templateData.map((item) =>\r\n                            <Row>\r\n                                {item.children.length > 0 ?\r\n                                    item.children.map((column) =>\r\n                                        <Col md={12 / item.children.length}>\r\n                                            {\r\n                                                column.children.map((component) => {\r\n                                                    return (\r\n                                                        component.hasOwnProperty(\"children\") ?\r\n                                                            <Row>\r\n                                                                {component.children.map(componentrow =>\r\n                                                                    <Col md={12 / componentrow.length}>\r\n                                                                        {this.renderSwitch(componentrow, this.props.selectedRecord)}\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                }\r\n                                                            </Row>\r\n                                                            : <>\r\n                                                                {this.renderSwitch(component, this.props.selectedRecord)}\r\n                                                            </>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    )\r\n                                    : \"\"}\r\n                            </Row>\r\n                        )\r\n                        :\r\n                        \"\"\r\n                }\r\n            </>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(DynamicSlideout);"]},"metadata":{},"sourceType":"module"}