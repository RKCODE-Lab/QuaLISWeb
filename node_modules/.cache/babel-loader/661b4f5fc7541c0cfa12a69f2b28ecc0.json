{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\AliquotPlan.jsx\";\nimport { process } from '@progress/kendo-data-query';\nimport React from 'react';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, Lims_JSON_stringify } from '../../components/CommonScript';\nimport { Col, Row } from 'react-bootstrap';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../audittrail/Esign';\nimport AddAliquotPlan from './AddAliquotPlan';\nimport { callService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\nimport { toast } from 'react-toastify';\nimport { getprojectytpe, getSampleTypeandPatientCatgeroy, getUnit, getActiveAliquotPlanById } from '../../actions';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass AliquotPlan extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"sprojecttypename\") {\n        selectedRecord[fieldName] = comboData;\n        delete selectedRecord[\"sproductname\"];\n        delete selectedRecord[\"stubename\"];\n        delete selectedRecord[\"svisitnumber\"];\n        delete selectedRecord[\"spatientcatname\"];\n        this.props.getSampleTypeandPatientCatgeroy(this.state.selectedRecord.sprojecttypename.value, this.state.selectedRecord.sprojecttypename.label, this.props.Login.userInfo);\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = (event, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const values = event.target.value; //.replace(/[^-^0-9]/g, '');\n      //let parsedvalues;\n\n      if (fieldName === \"saliquotno\") {\n        if (/^\\d+$/.test(values) && values !== \"\") {\n          //values = parseInt(values, 10);\n          selectedRecord[fieldName] = values;\n        } else {\n          selectedRecord[fieldName] = \"\";\n        }\n      } else if (fieldName === \"squantity\") {\n        if (/^\\d{0,3}(\\.\\d{0,2})?$/.test(values) && values !== \"\") {\n          selectedRecord[fieldName] = values;\n        } else {\n          selectedRecord[fieldName] = [];\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let controlButton = this.props.Login.controlButton;\n      let selectedId = this.props.Login.selectedId;\n      let processtypeList;\n      let projecttypeList;\n      let sampletypeList;\n      let collectiontubeList;\n      let patientcatgoryList;\n      let visitnameList;\n\n      if (this.props.Login.loadEsign) {\n        //ALPD-4713--Vignesh R(21-08-2024)\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        controlButton = [];\n        processtypeList = [];\n        projecttypeList = [];\n        sampletypeList = [];\n        collectiontubeList = [];\n        patientcatgoryList = [];\n        visitnameList = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId,\n          controlButton\n        }\n      };\n      this.props.updateStore(updateInfo);\n      this.setState({\n        selectedRecord: selectedRecord,\n        processtypeList: processtypeList,\n        projecttypeList: projecttypeList,\n        sampletypeList: sampletypeList,\n        collectiontubeList: collectiontubeList,\n        patientcatgoryList: patientcatgoryList,\n        visitnameList: visitnameList\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation === \"create\") {\n        this.onSaveAliquotPlan(saveType, formRef);\n      } else if (this.props.Login.operation === \"update\") {\n        this.updateAliquotPlan(saveType, formRef);\n      }\n    };\n\n    this.onSaveAliquotPlan = (saveType, formRef) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord !== undefined) {\n        const inputParam = {\n          nformcode: this.props.Login.userInfo.nformcode,\n          classUrl: \"aliquotplan\",\n          methodUrl: \"AliquotPlan\",\n          selectedRecord: { ...this.state.selectedRecord\n          },\n          inputData: {\n            userinfo: { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n            },\n            ncontrolCode: this.props.Login.userInfo.nformcode,\n            tubename: this.state.selectedRecord.stubename.label,\n            tubevalue: this.state.selectedRecord.stubename.value,\n            projecttypename: this.state.selectedRecord.sprojecttypename.label,\n            projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\n            productname: this.state.selectedRecord.sproductname.label,\n            productvalue: this.state.selectedRecord.sproductname.value,\n            patientcatvalue: this.state.selectedRecord.spatientcatname === undefined ? '-1' : this.state.selectedRecord.spatientcatname.value,\n            patientcatname: this.state.selectedRecord.spatientcatname === undefined ? 'NA' : this.state.selectedRecord.spatientcatname.label,\n            visitname: this.state.selectedRecord.svisitnumber.label,\n            visitnumber: this.state.selectedRecord.svisitnumber.value,\n            unitvalue: this.state.selectedRecord.sunitname.value,\n            unitname: this.state.selectedRecord.sunitname.label,\n            squantity: this.state.selectedRecord.squantity,\n            saliquotno: this.state.selectedRecord.saliquotno,\n            sdescription: this.state.selectedRecord.sdescription === undefined ? \"\" : this.state.selectedRecord.sdescription,\n            operation: \"create\"\n          },\n          operation: \"create\",\n          saveType,\n          formRef\n        };\n        const masterData = this.props.Login.masterData;\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.updateAliquotPlan = (saveType, formRef) => {\n      const inputParam = {\n        nformcode: this.props.Login.userInfo.nformcode,\n        classUrl: \"aliquotplan\",\n        methodUrl: \"AliquotPlan\",\n        selectedRecord: { ...this.state.selectedRecord\n        },\n        selectedId: this.state.selectedRecord.naliquotplancode,\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n          },\n          //indexof:\n          ncontrolCode: this.props.Login.userInfo.nformcode,\n          naliquotplancode: this.state.selectedRecord.naliquotplancode,\n          tubename: this.state.selectedRecord.stubename.label,\n          tubevalue: this.state.selectedRecord.stubename.value,\n          projecttypename: this.state.selectedRecord.sprojecttypename.label,\n          projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\n          productname: this.state.selectedRecord.sproductname.label,\n          productvalue: this.state.selectedRecord.sproductname.value,\n          patientcatvalue: this.state.selectedRecord.spatientcatname.value === undefined ? '-1' : this.state.selectedRecord.spatientcatname.value,\n          patientcatname: this.state.selectedRecord.spatientcatname.label,\n          visitname: this.state.selectedRecord.svisitnumber.label,\n          visitnumber: this.state.selectedRecord.svisitnumber.value,\n          unitvalue: this.state.selectedRecord.sunitname.value,\n          unitname: this.state.selectedRecord.sunitname.label,\n          squantity: this.state.selectedRecord.squantity,\n          saliquotno: this.state.selectedRecord.saliquotno,\n          sdescription: this.state.selectedRecord.sdescription === undefined ? \"\" : this.state.selectedRecord.sdescription,\n          operation: \"update\"\n        },\n        operation: \"update\",\n        saveType,\n        formRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        selectedRecord: deleteParam.selectedRecord\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"mandatory\": true,\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"sprojecttypename\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_SAMPLETYPE\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\",\n        \"dataField\": \"stubename\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\",\n        \"width\": 180\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_VISITNUMBER\",\n        \"dataField\": \"svisitnumber\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_PATIENTCATEGORY\",\n        \"dataField\": \"spatientcatname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\",\n        \"width\": 180\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_ALIQUOTNO\",\n        \"dataField\": \"saliquotno\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_QUANTITY\",\n        \"dataField\": \"squantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_UNIT\",\n        \"dataField\": \"sunitname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"mandatory\": true,\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }];\n      primaryKeyField = \"naliquotplancode\";\n    }\n\n    let mandatoryFields = [];\n    mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PROJECTTYPE\",\n      \"dataField\": \"sprojecttypename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SAMPLETYPE\",\n      \"dataField\": \"sproductname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\",\n      \"dataField\": \"stubename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_VISITNUMBER\",\n      \"dataField\": \"svisitnumber\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PATIENTCATEGORY\",\n      \"dataField\": \"spatientcatname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ALIQUOTNO\",\n      \"dataField\": \"saliquotno\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }, //ALPD-4712--Vignesh R(21-08-2024)\n    {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_QUANTITY\",\n      \"dataField\": \"squantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_UNIT\",\n      \"dataField\": \"sunitname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    });\n    const AddAliquotPlanId = this.state.controlMap.has(\"AddAliquotPlan\") && this.state.controlMap.get(\"AddAliquotPlan\").ncontrolcode;\n    const EditAliquotPlanId = this.state.controlMap.has(\"EditAliquotPlan\") && this.state.controlMap.get(\"EditAliquotPlan\").ncontrolcode;\n    const DeleteAliquotPlanId = this.state.controlMap.has(\"DeleteAliquotPlan\") && this.state.controlMap.get(\"DeleteAliquotPlan\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"naliquotplancode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: EditAliquotPlanId\n    };\n    const deleteParam = {\n      operation: \"delete\",\n      DeleteAliquotPlanId: DeleteAliquotPlanId\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getActiveAliquotPlanById,\n      addRecord: () => this.props.getprojectytpe(AddAliquotPlanId, this.props.Login.userInfo) || [],\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      groupable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }\n    })))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(AddAliquotPlan, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        renalCheck: this.state.renalCheck,\n        projecttypeList: this.state.projecttypeList || [],\n        sampletypeList: this.state.sampletypeList || [],\n        collectiontubeList: this.state.collectiontubeList || [],\n        patientcatgoryList: this.state.patientcatgoryList || [],\n        visitnameList: this.state.visitnameList || [],\n        unitList: this.state.unitList || [],\n        inputParam: this.props.Login.inputParam,\n        actionType: this.state.actionType,\n        operation: this.props.Login.operation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 27\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length > 0 && this.props.Login.operation !== 'update' && this.props.Login.operation === 'create') {\n            let skipcount = this.state.dataState.skip > 0 ? this.props.Login.masterData.length - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      } // let { dataState } = this.state;\n      // if (this.props.Login.dataState === undefined) {\n      //     dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\n      // }\n      // this.setState({\n      //     data: this.props.Login.masterData,\n      //     isOpen: false,\n      //     selectedRecord: this.props.Login.selectedRecord,\n      //     dataResult: process(this.props.Login.masterData, dataState),\n      //     dataState\n      // });\n\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.projecttypeList !== previousProps.Login.projecttypeList) {\n      this.setState({\n        projecttypeList: this.props.Login.projecttypeList\n      });\n    }\n\n    if (this.props.Login.sampletypeList !== previousProps.Login.sampletypeList) {\n      this.setState({\n        sampletypeList: this.props.Login.sampletypeList\n      });\n    }\n\n    if (this.props.Login.patientcatgoryList !== previousProps.Login.patientcatgoryList) {\n      let selectedRecord = this.props.Login.selectedRecord;\n      let renalCheck = false;\n\n      if (this.props.Login.patientcatgoryList.length > 0) {\n        renalCheck = true;\n\n        if (this.props.Login.operation !== 'update') {\n          selectedRecord[\"spatientcatname\"] = [];\n        }\n      } else {\n        selectedRecord[\"spatientcatname\"] = {\n          value: -1\n        };\n        renalCheck = false; //, selectedRecord: selectedRecord\n      }\n\n      this.setState({\n        patientcatgoryList: this.props.Login.patientcatgoryList,\n        renalCheck: renalCheck,\n        selectedRecord: selectedRecord\n      });\n    }\n\n    if (this.props.Login.collectiontubeList !== previousProps.Login.collectiontubeList) {\n      this.setState({\n        collectiontubeList: this.props.Login.collectiontubeList\n      });\n    }\n\n    if (this.props.Login.visitnameList !== previousProps.Login.visitnameList) {\n      this.setState({\n        visitnameList: this.props.Login.visitnameList\n      });\n    }\n\n    if (this.props.Login.unitList !== previousProps.Login.unitList) {\n      this.setState({\n        unitList: this.props.Login.unitList\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  getprojectytpe,\n  getSampleTypeandPatientCatgeroy,\n  getUnit,\n  getActiveAliquotPlanById\n})(injectIntl(AliquotPlan));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/storagemanagement/AliquotPlan.jsx"],"names":["process","React","SlideOutModal","connect","injectIntl","DEFAULT_RETURN","showEsign","getControlMap","Lims_JSON_stringify","Col","Row","ListWrapper","DataGrid","Esign","AddAliquotPlan","callService","updateStore","crudMaster","validateEsignCredential","toast","getprojectytpe","getSampleTypeandPatientCatgeroy","getUnit","getActiveAliquotPlanById","mapStateToProps","state","Login","AliquotPlan","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","reloadData","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","onComboChange","comboData","fieldName","selectedRecord","sprojecttypename","value","label","onInputOnChange","values","target","test","name","closeModal","loadEsign","openModal","controlButton","selectedId","processtypeList","projecttypeList","sampletypeList","collectiontubeList","patientcatgoryList","visitnameList","operation","updateInfo","typeName","validateEsign","sreason","nreasoncode","spredefinedreason","password","screenData","onSaveClick","saveType","formRef","onSaveAliquotPlan","updateAliquotPlan","undefined","nformcode","userinfo","sformname","smodulename","ncontrolCode","tubename","stubename","tubevalue","projecttypename","projecttypevalue","productname","sproductname","productvalue","patientcatvalue","spatientcatname","patientcatname","visitname","svisitnumber","visitnumber","unitvalue","sunitname","unitname","squantity","saliquotno","sdescription","masterData","naliquotplancode","userRoleControlRights","deleteRecord","deleteParam","toLowerCase","screenName","intl","formatMessage","id","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","mandatoryFields","push","AddAliquotPlanId","has","get","ncontrolcode","EditAliquotPlanId","DeleteAliquotPlanId","editParam","renalCheck","unitList","actionType","componentDidUpdate","previousProps","Object","map","item","length","skipcount","isOpen"],"mappings":"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","sourcesContent":["import { process } from '@progress/kendo-data-query';\r\nimport React from 'react'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap, Lims_JSON_stringify} from\r\n    '../../components/CommonScript';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport AddAliquotPlan from './AddAliquotPlan';\r\nimport { callService, updateStore, crudMaster, validateEsignCredential } from '../../actions';\r\nimport { toast } from 'react-toastify';\r\nimport { getprojectytpe, getSampleTypeandPatientCatgeroy, getUnit, getActiveAliquotPlanById } from '../../actions';\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass AliquotPlan extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.displayName\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\", \"dataField\": \"stubename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\", \"width\": 180 },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PATIENTCATEGORY\", \"dataField\": \"spatientcatname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\", \"width\": 180 },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_ALIQUOTNO\", \"dataField\": \"saliquotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"squantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"mandatory\": true, \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n\r\n            ]\r\n\r\n            primaryKeyField = \"naliquotplancode\";\r\n        }\r\n        let mandatoryFields = [];\r\n        mandatoryFields.push(\r\n            { \"mandatory\": true, \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_COLLECTIONTUBETYPEPROCESSTYPE\", \"dataField\": \"stubename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_PATIENTCATEGORY\", \"dataField\": \"spatientcatname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_ALIQUOTNO\", \"dataField\": \"saliquotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n            //ALPD-4712--Vignesh R(21-08-2024)\r\n            { \"mandatory\": true, \"idsName\": \"IDS_QUANTITY\", \"dataField\": \"squantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n        )\r\n\r\n\r\n        const AddAliquotPlanId = this.state.controlMap.has(\"AddAliquotPlan\") && this.state.controlMap.get(\"AddAliquotPlan\").ncontrolcode;\r\n        const EditAliquotPlanId = this.state.controlMap.has(\"EditAliquotPlan\") && this.state.controlMap.get(\"EditAliquotPlan\").ncontrolcode;\r\n        const DeleteAliquotPlanId = this.state.controlMap.has(\"DeleteAliquotPlan\") && this.state.controlMap.get(\"DeleteAliquotPlan\").ncontrolcode;\r\n\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"naliquotplancode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: EditAliquotPlanId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\", DeleteAliquotPlanId: DeleteAliquotPlanId };\r\n\r\n        return (<>\r\n            <Row>\r\n                <Col>\r\n                    <ListWrapper className=\"client-list-content\">\r\n\r\n                        <DataGrid\r\n                            primaryKeyField={primaryKeyField}\r\n                            selectedId={this.props.Login.selectedId}\r\n                            data={this.state.data}\r\n                            dataResult={this.state.dataResult}\r\n                            dataState={this.state.dataState}\r\n                            dataStateChange={this.dataStateChange}\r\n                            extractedColumnList={this.extractedColumnList}\r\n                            controlMap={this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            fetchRecord={this.props.getActiveAliquotPlanById}\r\n                            addRecord={() => this.props.getprojectytpe(AddAliquotPlanId, this.props.Login.userInfo) || []}\r\n                            deleteRecord={this.deleteRecord}\r\n                            reloadData={this.reloadData}\r\n                            editParam={editParam}\r\n                            deleteParam={deleteParam}\r\n                            scrollable={\"scrollable\"}\r\n                            gridHeight={\"600px\"}\r\n                            isActionRequired={true}\r\n                            isToolBarRequired={true}\r\n                            pageable={true}\r\n                            groupable={false}\r\n\r\n                        />\r\n\r\n                    </ListWrapper>\r\n                </Col>\r\n            </Row>\r\n\r\n            {this.props.Login.openModal &&\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    updateStore={this.props.updateStore}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign\r\n                            operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : <AddAliquotPlan\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange}\r\n                            renalCheck={this.state.renalCheck}\r\n                            projecttypeList={this.state.projecttypeList || []}\r\n                            sampletypeList={this.state.sampletypeList || []}\r\n                            collectiontubeList={this.state.collectiontubeList || []}\r\n                            patientcatgoryList={this.state.patientcatgoryList || []}\r\n                            visitnameList={this.state.visitnameList || []}\r\n                            unitList={this.state.unitList || []}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            actionType={this.state.actionType}\r\n                            operation={this.props.Login.operation}\r\n                        />}\r\n                />\r\n            }\r\n        </>);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let {dataState}=this.state;\r\n                if(dataState===undefined){\r\n                    dataState={skip:0,take:this.state.dataState.take}\r\n                }\r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length >0 && this.props.Login.operation !=='update' && this.props.Login.operation ==='create'){\r\n                       let skipcount=this.state.dataState.skip>0?(this.props.Login.masterData.length-this.state.dataState.take):\r\n                       this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                } \r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n            // let { dataState } = this.state;\r\n            // if (this.props.Login.dataState === undefined) {\r\n            //     dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n            // }\r\n\r\n            // this.setState({\r\n            //     data: this.props.Login.masterData,\r\n            //     isOpen: false,\r\n            //     selectedRecord: this.props.Login.selectedRecord,\r\n            //     dataResult: process(this.props.Login.masterData, dataState),\r\n            //     dataState\r\n            // });\r\n\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.projecttypeList !== previousProps.Login.projecttypeList) {\r\n            this.setState({ projecttypeList: this.props.Login.projecttypeList });\r\n        }\r\n\r\n        if (this.props.Login.sampletypeList !== previousProps.Login.sampletypeList) {\r\n            this.setState({ sampletypeList: this.props.Login.sampletypeList });\r\n        }\r\n\r\n        if (this.props.Login.patientcatgoryList !== previousProps.Login.patientcatgoryList) {\r\n\r\n            let selectedRecord = this.props.Login.selectedRecord;\r\n            let renalCheck = false;\r\n            if (this.props.Login.patientcatgoryList.length > 0) {\r\n                renalCheck = true;\r\n                if (this.props.Login.operation !== 'update') {\r\n                    selectedRecord[\"spatientcatname\"] = [];\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[\"spatientcatname\"] = { value: -1 };\r\n                renalCheck = false;   //, selectedRecord: selectedRecord\r\n            }\r\n            this.setState({ patientcatgoryList: this.props.Login.patientcatgoryList, renalCheck: renalCheck, selectedRecord: selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.collectiontubeList !== previousProps.Login.collectiontubeList) {\r\n            this.setState({ collectiontubeList: this.props.Login.collectiontubeList });\r\n        }\r\n\r\n        if (this.props.Login.visitnameList !== previousProps.Login.visitnameList) {\r\n            this.setState({ visitnameList: this.props.Login.visitnameList });\r\n        }\r\n\r\n        if (this.props.Login.unitList !== previousProps.Login.unitList) {\r\n            this.setState({ unitList: this.props.Login.unitList });\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n\r\n\r\n        if (fieldName === \"sprojecttypename\") {\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n            delete selectedRecord[\"sproductname\"];\r\n            delete selectedRecord[\"stubename\"];\r\n            delete selectedRecord[\"svisitnumber\"];\r\n            delete selectedRecord[\"spatientcatname\"];\r\n            this.props.getSampleTypeandPatientCatgeroy(\r\n                this.state.selectedRecord.sprojecttypename.value,\r\n                this.state.selectedRecord.sprojecttypename.label,\r\n                this.props.Login.userInfo,\r\n            )\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onInputOnChange = (event, fieldName) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        const values = event.target.value;  //.replace(/[^-^0-9]/g, '');\r\n\r\n        //let parsedvalues;\r\n\r\n        if (fieldName === \"saliquotno\") {\r\n\r\n            if (/^\\d+$/.test(values) && values !== \"\") {\r\n\r\n                //values = parseInt(values, 10);\r\n                selectedRecord[fieldName] = values;\r\n            } else {\r\n                selectedRecord[fieldName] = \"\";\r\n            }\r\n\r\n        } else if (fieldName === \"squantity\") {\r\n\r\n            if (/^\\d{0,3}(\\.\\d{0,2})?$/.test(values) && values !== \"\") {\r\n\r\n                selectedRecord[fieldName] = values;\r\n            } else {\r\n                selectedRecord[fieldName] = [];\r\n            }\r\n\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let controlButton = this.props.Login.controlButton;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let processtypeList;\r\n        let projecttypeList;\r\n        let sampletypeList;\r\n        let collectiontubeList;\r\n        let patientcatgoryList;\r\n        let visitnameList;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            //ALPD-4713--Vignesh R(21-08-2024)\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                  selectedRecord['esignpassword'] = \"\"\r\n                  selectedRecord['esignreason'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            controlButton = [];\r\n            processtypeList = [];\r\n            projecttypeList = [];\r\n            sampletypeList = [];\r\n            collectiontubeList = [];\r\n            patientcatgoryList = [];\r\n            visitnameList = [];\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign, selectedRecord, selectedId, controlButton\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n        this.setState({\r\n            selectedRecord: selectedRecord, processtypeList: processtypeList, projecttypeList: projecttypeList,\r\n            sampletypeList: sampletypeList, collectiontubeList: collectiontubeList, patientcatgoryList: patientcatgoryList, visitnameList: visitnameList\r\n        });\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.operation === \"create\") {\r\n            this.onSaveAliquotPlan(saveType, formRef);\r\n        } else if (this.props.Login.operation === \"update\") {\r\n            this.updateAliquotPlan(saveType, formRef);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    onSaveAliquotPlan = (saveType, formRef) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord !== undefined) {\r\n\r\n            const inputParam = {\r\n                nformcode: this.props.Login.userInfo.nformcode,\r\n                classUrl: \"aliquotplan\",\r\n                methodUrl: \"AliquotPlan\",\r\n                selectedRecord: {...this.state.selectedRecord},\r\n                inputData: {\r\n                    userinfo: {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                    },\r\n\r\n\r\n                    ncontrolCode: this.props.Login.userInfo.nformcode,\r\n                    tubename: this.state.selectedRecord.stubename.label,\r\n                    tubevalue: this.state.selectedRecord.stubename.value,\r\n                    projecttypename: this.state.selectedRecord.sprojecttypename.label,\r\n                    projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\r\n                    productname: this.state.selectedRecord.sproductname.label,\r\n                    productvalue: this.state.selectedRecord.sproductname.value,\r\n                    patientcatvalue: this.state.selectedRecord.spatientcatname === undefined ? '-1' : this.state.selectedRecord.spatientcatname.value,\r\n                    patientcatname: this.state.selectedRecord.spatientcatname === undefined ? 'NA' : this.state.selectedRecord.spatientcatname.label,\r\n                    visitname: this.state.selectedRecord.svisitnumber.label,\r\n                    visitnumber: this.state.selectedRecord.svisitnumber.value,\r\n                    unitvalue: this.state.selectedRecord.sunitname.value,\r\n                    unitname: this.state.selectedRecord.sunitname.label,\r\n                    squantity: this.state.selectedRecord.squantity,\r\n                    saliquotno: this.state.selectedRecord.saliquotno,\r\n                    sdescription: this.state.selectedRecord.sdescription===undefined?\"\":this.state.selectedRecord.sdescription,\r\n                    operation: \"create\",\r\n\r\n\r\n                },\r\n                operation: \"create\",\r\n                saveType, formRef,\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    updateAliquotPlan = (saveType, formRef) => {\r\n\r\n\r\n        const inputParam = {\r\n            nformcode: this.props.Login.userInfo.nformcode,\r\n            classUrl: \"aliquotplan\",\r\n            methodUrl: \"AliquotPlan\",\r\n            selectedRecord: {...this.state.selectedRecord},\r\n            selectedId:this.state.selectedRecord.naliquotplancode,\r\n            inputData: {\r\n                userinfo: {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                },\r\n                //indexof:\r\n                ncontrolCode: this.props.Login.userInfo.nformcode,\r\n                naliquotplancode: this.state.selectedRecord.naliquotplancode,\r\n                tubename: this.state.selectedRecord.stubename.label,\r\n                tubevalue: this.state.selectedRecord.stubename.value,\r\n                projecttypename: this.state.selectedRecord.sprojecttypename.label,\r\n                projecttypevalue: this.state.selectedRecord.sprojecttypename.value,\r\n                productname: this.state.selectedRecord.sproductname.label,\r\n                productvalue: this.state.selectedRecord.sproductname.value,\r\n                patientcatvalue: this.state.selectedRecord.spatientcatname.value === undefined ? '-1' : this.state.selectedRecord.spatientcatname.value,\r\n                patientcatname: this.state.selectedRecord.spatientcatname.label,\r\n                visitname: this.state.selectedRecord.svisitnumber.label,\r\n                visitnumber: this.state.selectedRecord.svisitnumber.value,\r\n                unitvalue: this.state.selectedRecord.sunitname.value,\r\n                unitname: this.state.selectedRecord.sunitname.label,\r\n                squantity: this.state.selectedRecord.squantity,\r\n                saliquotno: this.state.selectedRecord.saliquotno,\r\n                sdescription: this.state.selectedRecord.sdescription===undefined?\"\":this.state.selectedRecord.sdescription,\r\n                operation: \"update\",\r\n\r\n\r\n            },\r\n            operation: \"update\",\r\n            saveType, formRef,\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,//.dataItem,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState,\r\n            selectedRecord: deleteParam.selectedRecord\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, callService, crudMaster, validateEsignCredential,\r\n    getprojectytpe, getSampleTypeandPatientCatgeroy, getUnit, getActiveAliquotPlanById\r\n})(injectIntl(AliquotPlan));\r\n"]},"metadata":{},"sourceType":"module"}