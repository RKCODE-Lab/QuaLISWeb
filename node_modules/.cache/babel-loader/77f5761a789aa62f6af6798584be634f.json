{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureScreenFields.jsx\";\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport 'rc-tabs/assets/index.css';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, SampleType } from '../../components/Enumeration';\n\nclass ConfigureScreenFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    if (this.props.selectedSampleType !== SampleType.STABILITY) {\n      const screens = [{\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: formCode.SAMPLEREGISTRATION\n      }];\n\n      if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true) {\n        screens.push({\n          eventKey: 'joballocation',\n          name: \"IDS_JOBALLOCATION\",\n          formcode: formCode.JOBALLOCATION\n        });\n      }\n\n      if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\n        //screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\n        screens.push({\n          eventKey: 'testwisemyjobs',\n          name: \"IDS_MYJOBS\",\n          formcode: formCode.TESTWISEMYJOBS\n        });\n      }\n\n      if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedworklist === true) {\n        screens.push({\n          eventKey: 'worklist',\n          name: \"IDS_WORKLIST\",\n          formcode: formCode.WORKLIST\n        });\n      }\n\n      if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedbatch === true) {\n        screens.push({\n          eventKey: 'batchcreation',\n          name: \"IDS_BATCHCREATION\",\n          formcode: formCode.BATCHCREATION\n        });\n      }\n\n      screens.push({\n        eventKey: 'resultentry',\n        name: \"IDS_RESULTENTRY\",\n        formcode: formCode.RESULTENTRY\n      }, {\n        eventKey: 'approval',\n        name: \"IDS_APPROVAL\",\n        formcode: formCode.APPROVAL\n      }, {\n        eventKey: 'release',\n        name: \"IDS_RELEASE\",\n        formcode: formCode.RELEASE\n      }); // let extractedColumnList =[];\n      // if (this.props.selectedSampleType === SampleType.Masters || this.props.selectedSampleType === SampleType.GOODSIN){\n      //     extractedColumnList.push(              \n      //         { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\n      //         { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\n      //     );\n      // }\n      // else{\n      //     if(this.props.operation === 'configuresubsample'){\n      //     //if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\n      //         extractedColumnList.push(\n      //             { \"title\": \"IDS_LISTITEM\", \"field\": \"subsamplelistitem\", \"width\": \"600px\" },\n      //         );\n      //     }\n      //     else\n      //     {\n      //         extractedColumnList.push(\n      //             { \"title\": \"IDS_DISPLAYFIELDS\", \"field\": \"sampledisplayfields\", \"width\": \"600px\" },\n      //             { \"title\": \"IDS_LISTITEM\", \"field\": \"samplelistitem\", \"width\": \"600px\" },\n      //             // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\n      //             { \"title\": \"IDS_GRIDITEM\", \"field\": \"samplegriditem\", \"width\": \"600px\" },\n      //             { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"samplegridmoreitem\", \"width\": \"600px\" },\n      //             { \"title\": \"IDS_FILTERITEM\", \"field\": \"samplefilteritem\", \"width\": \"600px\" }\n      //         );\n      //     }\n      // }\n\n      this.state = {\n        screens,\n        //extractedColumnList,\n        selectedScreen: {\n          eventKey: 'registration',\n          name: \"IDS_SAMPLEREGISTRATION\",\n          formcode: formCode.SAMPLEREGISTRATION\n        }\n      };\n    } else {\n      const screens = [{\n        eventKey: 'stability',\n        name: \"IDS_STABILITYSTUDYPLAN\",\n        formcode: formCode.STUDYALLOCATION\n      }];\n      this.state = {\n        screens,\n        selectedScreen: {\n          eventKey: 'stability',\n          name: \"IDS_STABILITYSTUDYPLAN\",\n          formcode: formCode.STUDYALLOCATION\n        }\n      };\n    }\n  }\n\n  render() {\n    //console.log(\"props:\",this.props, this.state.screens, this.state.selectedScreen);\n    let extractedColumnList = [];\n\n    if (this.props.selectedSampleType === SampleType.Masters || this.props.selectedSampleType === SampleType.GOODSIN) {\n      extractedColumnList.push({\n        \"title\": \"IDS_GRIDITEM\",\n        \"field\": \"griditem\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_GRIDMOREITEM\",\n        \"field\": \"gridmoreitem\",\n        \"width\": \"600px\"\n      });\n    } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n\n\n    if (this.props.selectedSampleType === SampleType.PROTOCOL) {\n      extractedColumnList.push({\n        \"title\": \"IDS_LISTITEM\",\n        \"field\": \"listItem\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_DISPLAYFIELDS\",\n        \"field\": \"displayFields\",\n        \"width\": \"600px\"\n      });\n    } else {\n      if (this.props.operation === 'configuresubsample') {\n        //if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\n        extractedColumnList.push({\n          \"title\": \"IDS_LISTITEM\",\n          \"field\": \"subsamplelistitem\",\n          \"width\": \"600px\"\n        });\n      } else {\n        extractedColumnList.push({\n          \"title\": \"IDS_DISPLAYFIELDS\",\n          \"field\": \"sampledisplayfields\",\n          \"width\": \"600px\"\n        }, {\n          \"title\": \"IDS_LISTITEM\",\n          \"field\": \"samplelistitem\",\n          \"width\": \"600px\"\n        }, // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\n        {\n          \"title\": \"IDS_GRIDITEM\",\n          \"field\": \"samplegriditem\",\n          \"width\": \"600px\"\n        }, {\n          \"title\": \"IDS_GRIDMOREITEM\",\n          \"field\": \"samplegridmoreitem\",\n          \"width\": \"600px\"\n        });\n\n        if (this.state.selectedScreen.formcode !== formCode.RELEASE) {\n          extractedColumnList.push({\n            \"title\": \"IDS_FILTERITEM\",\n            \"field\": \"samplefilteritem\",\n            \"width\": \"600px\"\n          });\n        }\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.selectedSampleType === SampleType.Masters || this.props.selectedSampleType === SampleType.GOODSIN || this.props.selectedSampleType === SampleType.PROTOCOL ? /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '550px'\n      },\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\" // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\n      ,\n      data: this.props.dataResult\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\" // columnMenu={ColumnMenu}\n      ,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'] //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 49\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 41\n      }\n    }), //this.state.\n    extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }) //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex),\n        checked: row[\"dataItem\"][column.field] || false,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 57\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 45\n      }\n    }))))))) : /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\" //style={{ height: '550px' }}\n      ,\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\" // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\n      ,\n      data: this.props.dataResult[this.state.selectedScreen.formcode]\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\" // columnMenu={ColumnMenu}\n      ,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'] // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 61\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 53\n      }\n    }), //this.state.\n    extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode, this.props.operation),\n        checked: row[\"dataItem\"][column.field] || false //checked={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? false :row[\"dataItem\"][column.field]) : (row[\"dataItem\"][column.field] || false)}\n        //disabled={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? true : false):false}\n        ,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 68\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 57\n      }\n    }))))))))))));\n  }\n\n}\n\nexport default injectIntl(ConfigureScreenFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/designtemplatemapping/ConfigureScreenFields.jsx"],"names":["Grid","GridColumn","LocalizationProvider","React","injectIntl","AtTabs","CustomSwitch","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","SampleType","ConfigureScreenFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","selectedSampleType","STABILITY","name","formcode","SAMPLEREGISTRATION","approvedRegSubTypeVersion","jsondata","nneedjoballocation","push","JOBALLOCATION","nneedmyjob","TESTWISEMYJOBS","nneedworklist","WORKLIST","nneedbatch","BATCHCREATION","RESULTENTRY","APPROVAL","RELEASE","STUDYALLOCATION","render","extractedColumnList","Masters","GOODSIN","PROTOCOL","operation","height","dataResult","dataState","dataStateChange","intl","formatMessage","id","row","map","column","field","title","textAlign","event","onChangeToggle","dataIndex","columnIndex"],"mappings":"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","sourcesContent":["import { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, SampleType } from '../../components/Enumeration';\r\n\r\nclass ConfigureScreenFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        if(this.props.selectedSampleType !== SampleType.STABILITY){\r\n        const  screens = [{ eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION }];\r\n        if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\r\n            screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\r\n        }\r\n\r\n        if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\r\n            //screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\r\n            screens.push({ eventKey: 'testwisemyjobs', name: \"IDS_MYJOBS\", formcode: formCode.TESTWISEMYJOBS });\r\n        }\r\n\r\n        if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedworklist === true)  {\r\n            screens.push({ eventKey: 'worklist', name: \"IDS_WORKLIST\", formcode: formCode.WORKLIST });\r\n        }\r\n        if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedbatch === true)  {\r\n            screens.push({ eventKey: 'batchcreation', name: \"IDS_BATCHCREATION\", formcode: formCode.BATCHCREATION });\r\n        }\r\n\r\n        screens.push({ eventKey: 'resultentry', name: \"IDS_RESULTENTRY\", formcode: formCode.RESULTENTRY },\r\n                    { eventKey: 'approval', name: \"IDS_APPROVAL\", formcode: formCode.APPROVAL },\r\n                    { eventKey: 'release', name: \"IDS_RELEASE\", formcode: formCode.RELEASE },\r\n                    );\r\n\r\n        // let extractedColumnList =[];\r\n        // if (this.props.selectedSampleType === SampleType.Masters || this.props.selectedSampleType === SampleType.GOODSIN){\r\n        //     extractedColumnList.push(              \r\n        //         { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\r\n        //         { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\r\n        //     );\r\n        // }\r\n        // else{\r\n        //     if(this.props.operation === 'configuresubsample'){\r\n        //     //if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\r\n        //         extractedColumnList.push(\r\n        //             { \"title\": \"IDS_LISTITEM\", \"field\": \"subsamplelistitem\", \"width\": \"600px\" },\r\n        //         );\r\n        //     }\r\n        //     else\r\n        //     {\r\n        //         extractedColumnList.push(\r\n        //             { \"title\": \"IDS_DISPLAYFIELDS\", \"field\": \"sampledisplayfields\", \"width\": \"600px\" },\r\n        //             { \"title\": \"IDS_LISTITEM\", \"field\": \"samplelistitem\", \"width\": \"600px\" },\r\n        //             // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\r\n        //             { \"title\": \"IDS_GRIDITEM\", \"field\": \"samplegriditem\", \"width\": \"600px\" },\r\n        //             { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"samplegridmoreitem\", \"width\": \"600px\" },\r\n        //             { \"title\": \"IDS_FILTERITEM\", \"field\": \"samplefilteritem\", \"width\": \"600px\" }\r\n        //         );\r\n        //     }\r\n        // }\r\n        this.state = {\r\n            screens,\r\n            //extractedColumnList,\r\n            selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION }\r\n        }\r\n    }else{\r\n        const  screens = [{ eventKey: 'stability', name: \"IDS_STABILITYSTUDYPLAN\", formcode: formCode.STUDYALLOCATION }];\r\n        this.state = {\r\n            screens,\r\n            selectedScreen: { eventKey: 'stability', name: \"IDS_STABILITYSTUDYPLAN\", formcode: formCode.STUDYALLOCATION }\r\n    }\r\n    }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n    render() {\r\n        //console.log(\"props:\",this.props, this.state.screens, this.state.selectedScreen);\r\n        let extractedColumnList =[];\r\n        if (this.props.selectedSampleType === SampleType.Masters || this.props.selectedSampleType === SampleType.GOODSIN){\r\n            extractedColumnList.push(              \r\n                { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\r\n            );\r\n        }\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        if (this.props.selectedSampleType === SampleType.PROTOCOL){\r\n            extractedColumnList.push(              \r\n                { \"title\": \"IDS_LISTITEM\", \"field\": \"listItem\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_DISPLAYFIELDS\", \"field\": \"displayFields\", \"width\": \"600px\" }\r\n            );\r\n        }\r\n        else{\r\n            if(this.props.operation === 'configuresubsample'){\r\n            //if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedsubsample === true) {\r\n                extractedColumnList.push(\r\n                    { \"title\": \"IDS_LISTITEM\", \"field\": \"subsamplelistitem\", \"width\": \"600px\" },\r\n                );\r\n            }\r\n            else\r\n            {\r\n                extractedColumnList.push(\r\n                    { \"title\": \"IDS_DISPLAYFIELDS\", \"field\": \"sampledisplayfields\", \"width\": \"600px\" },\r\n                    { \"title\": \"IDS_LISTITEM\", \"field\": \"samplelistitem\", \"width\": \"600px\" },\r\n                    // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\r\n                    { \"title\": \"IDS_GRIDITEM\", \"field\": \"samplegriditem\", \"width\": \"600px\" },\r\n                    { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"samplegridmoreitem\", \"width\": \"600px\" },\r\n                );\r\n                if(this.state.selectedScreen.formcode !== formCode.RELEASE ){\r\n                    extractedColumnList.push({ \"title\": \"IDS_FILTERITEM\", \"field\": \"samplefilteritem\", \"width\": \"600px\" })\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n            {/* Added by sonia on 11th NOV 2024 for jira id:ALPD-5025 */}\r\n            {this.props.selectedSampleType === SampleType.Masters || this.props.selectedSampleType === SampleType.GOODSIN \r\n            || this.props.selectedSampleType === SampleType.PROTOCOL ?\r\n                    <PerfectScrollbar>\r\n                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n                                    <Grid\r\n                                        className={\"active-paging\"}\r\n                                        style={{ height: '550px' }}\r\n                                        resizable\r\n                                        reorderable\r\n                                        scrollable={\"scrollable\"}\r\n                                        // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\r\n                                        data={this.props.dataResult}\r\n                                        {...this.state.dataState}\r\n                                        onDataStateChange={this.dataStateChange}>\r\n                                        <GridColumn\r\n                                            field=\"label\"\r\n                                            // columnMenu={ColumnMenu}\r\n                                            title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                            cell={(row) => (\r\n                                                <td data-tip={row[\"dataItem\"]['label']} \r\n                                                //data-for=\"tooltip-grid-wrap\"\r\n                                                >\r\n                                                    {row[\"dataItem\"]['label']}\r\n                                                </td>\r\n                                            )}\r\n                                        />\r\n                                        {//this.state.\r\n                                        extractedColumnList.map(column =>\r\n                                            <GridColumn\r\n                                                field={column.field}\r\n                                                title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                headerClassName=\"text-center\"\r\n                                                cell={(row) => (\r\n                                                    <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} \r\n                                                    //data-for=\"tooltip-grid-wrap\"\r\n                                                    >\r\n                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                            onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex)}\r\n                                                            checked={row[\"dataItem\"][column.field] || false}\r\n                                                            name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                    </td>)}\r\n                                            />\r\n                                        )}\r\n\r\n                                    </Grid>\r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        {/* <ReactTooltip /> */}\r\n                    </PerfectScrollbar>        \r\n\r\n                :\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                                <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    //style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.formcode]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        // columnMenu={ColumnMenu}\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']}\r\n                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {//this.state.\r\n                                                    extractedColumnList.map(column =>\r\n                                                        <GridColumn\r\n                                                            field={column.field}\r\n                                                            title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                            headerClassName=\"text-center\"\r\n                                                            cell={(row) => (\r\n                                                                <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                   <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                        onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode,this.props.operation)}\r\n                                                                        checked={row[\"dataItem\"][column.field] || false}\r\n                                                                        //checked={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? false :row[\"dataItem\"][column.field]) : (row[\"dataItem\"][column.field] || false)}\r\n                                                                        //disabled={column.field === \"samplelistitem\" ? (row[\"dataItem\"][column.field] === \"none\" ? true : false):false}\r\n                                                                        name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                       \r\n                                                                </td>)}\r\n                                                        />\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                            </>\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>\r\n                            </TabPane>\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureScreenFields)"]},"metadata":{},"sourceType":"module"}