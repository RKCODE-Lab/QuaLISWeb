{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructjsonOptionList, constructOptionList, parentChildComboLoad } from '../components/CommonScript';\nimport { getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\nimport { ReactComponents, transactionStatus } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { getTreeByProduct } from './RegistrationAction';\nexport function getReactInputFields(userinfo, operation, respObj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const listURL = [];\n    listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", {\n      userinfo\n    });\n    listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", {\n      userinfo\n    });\n    Axios.all(listURL).then(response => {\n      respObj = respObj ? { ...respObj\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ReactInputFields: response[1].data,\n          ReactComponents: response[0].data.components,\n          ReactTables: constructOptionList(response[0].data.tables, 'stablename', 'displayname').get(\"OptionList\"),\n          selectedFieldRecord: {},\n          openModal: false,\n          loading: false,\n          openPortal: true,\n          operation,\n          ...respObj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: template.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedTemplate: response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\n      nsampletypecode: selectedSampleType.value,\n      userinfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType: [{\n            \"label\": \"IDS_SAMPLETYPE\",\n            \"value\": selectedSampleType.label,\n            \"item\": selectedSampleType\n          }],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegTemplate(masterData, userinfo, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      if (response.data.ntransactionstatus == transactionStatus.DRAFT) {\n        let jsonData = response.data.jsondata;\n        sortData(masterData);\n        const respObj = {\n          masterData,\n          ncontrolcode: editId,\n          openPortal: true,\n          loading: false,\n          openModal: false,\n          design: jsonData,\n          selectedRecord: {\n            templateName: response.data.sregtemplatename\n          }\n        }; // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         masterData,\n        //         ncontrolcode: editId,\n        //         // openPortal: true,\n        //         // loading: false,\n        //         design: jsonData,\n        //         selectedRecord: { templateName: response.data.sregtemplatename }\n        //     }\n        // })\n\n        dispatch(getReactInputFields(userinfo, \"update\", respObj));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterStatus: \"IDS_SELECTDRAFTRECORD\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJsonValue(PGjsonData) {\n  if (Array.isArray(PGjsonData)) {\n    let JSONData = [];\n    PGjsonData.map(data => {\n      JSONData.push(JSON.parse(data.jsondata));\n    });\n    return JSONData;\n  } else {\n    return JSON.parse(PGjsonData);\n  }\n}\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getTableColumns\", {\n      stablename,\n      userinfo\n    }).then(response => {\n      columnInfo = columnInfo || {};\n      const staicColumns = response.data.jstaticcolumns || [];\n      const dynamicColumns = response.data.jdynamiccolumns || [];\n      const multilingualColumns = response.data.jmultilingualcolumn || [];\n      const numericColumns = response.data.jnumericcolumns || [];\n      const primaryKeyName = response.data.sprimarykeyname;\n      columnInfo = { ...columnInfo,\n        [stablename]: {\n          staicColumns,\n          dynamicColumns,\n          multilingualColumns,\n          numericColumns,\n          primaryKeyName\n        }\n      };\n      let defaultColumn = {};\n      let comboData = [];\n      staicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode],\n          value: item.columnname,\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode],\n            value: item.columnname,\n            item\n          };\n        }\n      });\n      dynamicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode],\n          value: item.columnname,\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode],\n            value: item.columnname,\n            item\n          };\n        }\n      });\n      multilingualColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode],\n          value: item.columnname,\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode],\n            value: item.columnname,\n            item\n          };\n        }\n      });\n\n      if (updateComponents) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else if (componentData === undefined) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else {\n        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n        componentData = { ...componentData,\n          validComponents\n        };\n      }\n\n      columnInfo = { ...columnInfo,\n        [stablename]: { ...columnInfo[stablename],\n          tableColumn: comboData\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          tableColumn: comboData,\n          columnInfo,\n          primaryKeyName,\n          ...componentData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPreviewTemplate(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo\n    });\n    Axios.all([timeZoneService, actualService]).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent);\n      sortData(masterData);\n      const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n      if (ProductCategory.length > 0) {\n        const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label].value;\n        const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label] && newcomboData.selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\n\n        if (ncategorybasedFlow !== undefined) {\n          if (ncategorybasedFlow === 3) {} else {\n            const Product = comboComponents.filter(x => x.name === 'Product');\n\n            if (Product.length > 0) {\n              const nproductcode = newcomboData.selectedRecord[Product[0].label] && newcomboData.selectedRecord[Product[0].label].value;\n              if (nproductcode !== undefined) mapOfFilterRegData['nproductcode'] = nproductcode;\n              mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, newcomboData.selectedRecord, newcomboData.comboData, inputParam));\n            }\n          }\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              loading: false,\n              comboData: newcomboData.comboData,\n              selectedRecord: newcomboData.selectedRecord,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: newcomboData.comboData,\n            selectedRecord: newcomboData.selectedRecord,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValues(inputParem, userinfo, selectedRecord, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, productCategory, product, mapOfRegFilterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = response.data ? { ...comboData,\n        ...response.data\n      } : { ...comboData\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem.item);\n      selectedRecord = { ...selectedRecord,\n        ...returnObj.selectedRecord\n      };\n\n      if (productCategory) {\n        // const nproductcatcode = selectedRecord['Product Category'] && selectedRecord['Product Category'].value\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (product) {\n        // if (mapOfRegFilterData.nproductcode === -1) {\n        if (selectedRecord[\"Product\"]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[\"Product\"] ? selectedRecord[\"Product\"].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: []\n            }\n          }); // }\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            comboData: { ...returnObj.comboData\n            },\n            selectedRecord\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/DynamicPreRegDesignAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","constructjsonOptionList","constructOptionList","parentChildComboLoad","getValidComponent","replaceChildFromChildren","ReactComponents","transactionStatus","Axios","getTreeByProduct","getReactInputFields","userinfo","operation","respObj","dispatch","listURL","post","all","then","response","type","payload","ReactInputFields","data","components","ReactTables","tables","get","selectedFieldRecord","openModal","loading","openPortal","catch","error","status","message","warn","selectRegistrationTemplate","template","masterData","nreactregtemplatecode","selectedTemplate","getRegistrationTemplate","selectedSampleType","nsampletypecode","value","searchedData","undefined","realSampleType","label","getEditRegTemplate","editId","ntransactionstatus","DRAFT","jsonData","jsondata","ncontrolcode","design","selectedRecord","templateName","sregtemplatename","masterStatus","getJsonValue","PGjsonData","Array","isArray","JSONData","map","push","JSON","parse","getTableColumns","stablename","path","columnInfo","componentData","updateComponents","staicColumns","jstaticcolumns","dynamicColumns","jdynamiccolumns","multilingualColumns","jmultilingualcolumn","numericColumns","jnumericcolumns","primaryKeyName","sprimarykeyname","defaultColumn","comboData","item","displayname","slanguagetypecode","columnname","default","column","displaymember","valuemember","componentcode","COMBO","validComponents","tableColumn","getPreviewTemplate","columnList","childColumnList","comboComponents","withoutCombocomponent","mapOfFilterRegData","timeZoneService","actualService","parentcolumnlist","childcolumnlist","timeZoneMap","timeZoneList","defaultTimeZone","stimezoneid","ntimezonecode","newcomboData","ProductCategory","filter","x","name","length","nproductcatcode","ncategorybasedFlow","Product","nproductcode","inputParam","getChildValues","inputParem","parentListWithReadonly","productCategory","product","mapOfRegFilterData","child","parentdata","parentsource","source","primarykeyField","returnObj","AgaramTree","ActiveKey","FocusKey","OpenNodes","Test","SelectedTest","selectedSpec","Component","selectComponent","selectedComponent","Specification"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructjsonOptionList, constructOptionList, parentChildComboLoad } from '../components/CommonScript';\r\nimport { getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\r\nimport { ReactComponents, transactionStatus } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct } from './RegistrationAction';\r\n\r\nexport function getReactInputFields(userinfo, operation, respObj) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const listURL = [];\r\n        listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", { userinfo })\r\n        listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", { userinfo })\r\n        Axios.all(listURL)\r\n            .then(response => {\r\n                respObj = respObj ? { ...respObj } : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ReactInputFields: response[1].data,\r\n                        ReactComponents: response[0].data.components,\r\n                        ReactTables: constructOptionList(response[0].data.tables, 'stablename', 'displayname').get(\"OptionList\"),\r\n                        selectedFieldRecord: {},\r\n                        openModal: false,\r\n                        loading: false,\r\n                        openPortal: true,\r\n                        operation,\r\n                        ...respObj\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: template.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { masterData: { ...masterData, selectedTemplate: response.data }, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationTemplate(selectedSampleType, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\r\n            nsampletypecode: selectedSampleType.value,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data, searchedData: undefined }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType: [{\r\n                            \"label\": \"IDS_SAMPLETYPE\",\r\n                            \"value\": selectedSampleType.label,\r\n                            \"item\": selectedSampleType\r\n                        }],\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEditRegTemplate(masterData, userinfo, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                if (response.data.ntransactionstatus == transactionStatus.DRAFT) {\r\n                    let jsonData = response.data.jsondata;\r\n                    sortData(masterData)\r\n\r\n                    const respObj = {\r\n                        masterData,\r\n                        ncontrolcode: editId,\r\n                        openPortal: true,\r\n                        loading: false,\r\n                        openModal: false,\r\n                        design: jsonData,\r\n                        selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    }\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         masterData,\r\n                    //         ncontrolcode: editId,\r\n                    //         // openPortal: true,\r\n                    //         // loading: false,\r\n                    //         design: jsonData,\r\n                    //         selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    //     }\r\n                    // })\r\n                    dispatch(getReactInputFields(userinfo, \"update\", respObj))\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJsonValue(PGjsonData) {\r\n\r\n    if (Array.isArray(PGjsonData)) {\r\n        let JSONData = [];\r\n        PGjsonData.map(data => {\r\n            JSONData.push(JSON.parse(data.jsondata))\r\n        })\r\n        return JSONData;\r\n    } else {\r\n        return JSON.parse(PGjsonData);\r\n    }\r\n\r\n}\r\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getTableColumns\", { stablename, userinfo })\r\n            .then(response => {\r\n                columnInfo = columnInfo || {}\r\n                const staicColumns = response.data.jstaticcolumns || []\r\n                const dynamicColumns = response.data.jdynamiccolumns || []\r\n                const multilingualColumns = response.data.jmultilingualcolumn || []\r\n                const numericColumns = response.data.jnumericcolumns || []\r\n                const primaryKeyName = response.data.sprimarykeyname\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: {\r\n                        staicColumns,\r\n                        dynamicColumns,\r\n                        multilingualColumns,\r\n                        numericColumns,\r\n                        primaryKeyName\r\n                    }\r\n                }\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                staicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode],\r\n                        value: item.columnname,\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode],\r\n                            value: item.columnname,\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                dynamicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode],\r\n                        value: item.columnname,\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode],\r\n                            value: item.columnname,\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                multilingualColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode],\r\n                        value: item.columnname,\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode],\r\n                            value: item.columnname,\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else if (componentData === undefined) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else {\r\n                    let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                    componentData = { ...componentData, validComponents }\r\n                }\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: { ...columnInfo[stablename], tableColumn: comboData }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        tableColumn: comboData,\r\n                        columnInfo,\r\n                        primaryKeyName,\r\n                        ...componentData\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPreviewTemplate(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo\r\n        })\r\n        Axios.all([timeZoneService, actualService])\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data, selectedRecord, childColumnList, withoutCombocomponent)\r\n                sortData(masterData)\r\n                const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                if (ProductCategory.length > 0) {\r\n                    const nproductcatcode = newcomboData.selectedRecord[ProductCategory[0].label] &&\r\n                        newcomboData.selectedRecord[ProductCategory[0].label].value\r\n                    const ncategorybasedFlow = newcomboData.selectedRecord[ProductCategory[0].label]\r\n                        && newcomboData.selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\r\n                    if (ncategorybasedFlow !== undefined) {\r\n                        if (ncategorybasedFlow === 3) {\r\n\r\n                        }\r\n                        else {\r\n                            const Product = comboComponents.filter(x => x.name === 'Product');\r\n                            if (Product.length > 0) {\r\n                                const nproductcode = newcomboData.selectedRecord[Product[0].label]\r\n                                    && newcomboData.selectedRecord[Product[0].label].value;\r\n                                if (nproductcode !== undefined)\r\n                                    mapOfFilterRegData['nproductcode'] = nproductcode\r\n                                mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    newcomboData.selectedRecord,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                loading: false,\r\n                                comboData: newcomboData.comboData,\r\n                                selectedRecord: newcomboData.selectedRecord,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal\r\n                            }\r\n                        })\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: newcomboData.comboData,\r\n                            selectedRecord: newcomboData.selectedRecord,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValues(inputParem,\r\n    userinfo, selectedRecord, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    productCategory, product, mapOfRegFilterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n              let returnObj= response.data?{ ...comboData, ...response.data }:{...comboData}\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem.item)\r\n                selectedRecord = { ...selectedRecord, ...returnObj.selectedRecord }\r\n                if (productCategory) {\r\n                    // const nproductcatcode = selectedRecord['Product Category'] && selectedRecord['Product Category'].value\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                } else if (product) {\r\n                   // if (mapOfRegFilterData.nproductcode === -1) {\r\n                        if (selectedRecord[\"Product\"]) {\r\n                            mapOfRegFilterData[\"nproductcode\"] = selectedRecord[\"Product\"] ? selectedRecord[\"Product\"].value : -1\r\n                            dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                        } else {\r\n                            selectedRecord[\"nallottedspeccode\"]=\"\"\r\n                            selectedRecord[\"sversion\"]=\"\"\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    AgaramTree: [],\r\n                                    ActiveKey: [],\r\n                                    FocusKey: [],\r\n                                    OpenNodes: [],\r\n                                    Test: [],\r\n                                    SelectedTest: [],\r\n                                    selectedSpec:{},\r\n                                    Component: [],\r\n                                    selectComponent: {},\r\n                                    selectedComponent: {},\r\n                                    Specification:[]\r\n                                }\r\n                            })\r\n                       // }\r\n                    }\r\n\r\n\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            comboData: { ...returnObj.comboData },\r\n                            selectedRecord\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}