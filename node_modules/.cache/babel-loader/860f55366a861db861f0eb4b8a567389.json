{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\ChainofCustody.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { callService, updateStore, crudMaster } from '../../actions';\nimport { getControlMap } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport DateTimePicker from '../../../src/components/date-time-picker/date-time-picker.component';\nimport { getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat } from '../../../src/components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ChainofCustody extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data.ChainofCustody, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate\n        },\n        classUrl: \"chainofcustody\",\n        methodUrl: \"ChainofCustody\",\n        displayName: this.props.Login.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue; // this.setState({ selectedRecord });\n      // this.reloadData(selectedRecord, true);\n\n      let dateObj = {};\n\n      if (dateName === \"fromdate\") {\n        dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.ToDate, this.props.Login.userInfo, true);\n      } else {\n        dateObj = convertDateValuetoString(this.props.Login.masterData.ToDate, dateValue, this.props.Login.userInfo, true);\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: dateObj.fromDate,\n          toDate: dateObj.toDate\n        },\n        classUrl: 'chainofcustody',\n        methodUrl: \"ChainofCustody\",\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //let primaryKeyField = \"\";\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_TRANSDATE\",\n        \"dataField\": \"stransactiondate\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_REMARKS\",\n        \"dataField\": \"sremarks\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_ITEMNO\",\n        \"dataField\": \"sitemno\",\n        \"width\": \"180px\"\n      }, {\n        \"idsName\": \"IDS_STATUS\",\n        \"dataField\": \"sdisplaystatus\",\n        \"width\": \"180px\"\n      }, {\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"username\",\n        \"width\": \"180px\"\n      }, {\n        \"idsName\": \"IDS_SCREENNAME\",\n        \"dataField\": \"sformname\",\n        \"width\": \"180px\"\n      }]; //primaryKeyField = \"ncustodycode\";\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"fromdate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"fromdate\", date),\n      value: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"todate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"todate\"] || toDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"todate\", date),\n      value: this.state.selectedRecord[\"todate\"] || toDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 37\n      }\n    }))), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ncustodycode\",\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data.ChainofCustody //ALPD-2169\n      ,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      reloadData: this.reloadData,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: false,\n      isToolBarRequired: true,\n      pageable: true,\n      isAddRequired: false,\n      isDownloadPDFRequired: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 33\n      }\n    }) : \"\"))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData.ChainofCustody, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData.ChainofCustody ? this.props.Login.masterData.ChainofCustody : [], dataState),\n          //dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  updateStore,\n  crudMaster\n})(injectIntl(ChainofCustody));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/storagemanagement/ChainofCustody.jsx"],"names":["React","connect","injectIntl","Row","Col","process","toast","DataGrid","ListWrapper","callService","updateStore","crudMaster","getControlMap","DEFAULT_RETURN","DateTimePicker","getStartOfDay","getEndOfDay","convertDateValuetoString","rearrangeDateFormat","mapStateToProps","state","Login","ChainofCustody","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","reloadData","fromDate","masterData","FromDate","toDate","ToDate","obj","userInfo","inputParam","inputData","classUrl","methodUrl","displayName","handleDateChange","dateName","dateValue","Date","dateObj","formRef","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","isOpen","userRoleControlRights","controlMap","Map","getDerivedStateFromProps","warn","render","undefined","intl","formatMessage","id","ssitedate","date","selectedId","componentDidUpdate","previousProps","nformcode","Object","values","map","item","push","ncontrolcode"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { callService, updateStore, crudMaster } from '../../actions';\r\nimport { getControlMap } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport DateTimePicker from '../../../src/components/date-time-picker/date-time-picker.component';\r\nimport { getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat } from '../../../src/components/CommonScript';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ChainofCustody extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data.ChainofCustody, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        let obj = convertDateValuetoString(fromDate,toDate, this.props.Login.userInfo, true);\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo,\r\n            fromDate:obj.fromDate, \r\n            toDate:obj.toDate, },\r\n\r\n            classUrl: \"chainofcustody\",\r\n            methodUrl: \"ChainofCustody\",\r\n            displayName: this.props.Login.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n       // this.setState({ selectedRecord });\r\n       // this.reloadData(selectedRecord, true);\r\n\r\n       let dateObj = {};\r\n       if (dateName === \"fromdate\") {\r\n            dateObj = convertDateValuetoString(dateValue, this.props.Login.masterData.ToDate, this.props.Login.userInfo, true);\r\n       }\r\n       else{\r\n            dateObj = convertDateValuetoString(this.props.Login.masterData.ToDate, dateValue, this.props.Login.userInfo, true);\r\n       }\r\n\r\n       const inputParam = {\r\n                                inputData: {\r\n                                    \"userinfo\": this.props.Login.userInfo,\r\n                                    fromDate:dateObj.fromDate, \r\n                                    toDate:dateObj.toDate,\r\n                                },\r\n                                classUrl: 'chainofcustody',\r\n                                methodUrl: \"ChainofCustody\",\r\n                                userInfo: this.props.Login.userInfo,\r\n                                displayName:this.props.Login.displayName\r\n                            };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    render() {\r\n\r\n        //let primaryKeyField = \"\";\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.ToDate);\r\n        }\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_TRANSDATE\", \"dataField\": \"stransactiondate\", \"width\": \"250px\"},      \r\n                { \"idsName\": \"IDS_REMARKS\", \"dataField\": \"sremarks\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_ITEMNO\", \"dataField\": \"sitemno\", \"width\": \"180px\"},\r\n                { \"idsName\": \"IDS_STATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"180px\"},\r\n                { \"idsName\": \"IDS_USER\", \"dataField\": \"username\", \"width\": \"180px\"},\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"180px\"},\r\n              \r\n            ]\r\n            //primaryKeyField = \"ncustodycode\";\r\n        }\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"fromdate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n\r\n                                    />\r\n                                </Col> \r\n                                <Col md={3}>\r\n                                    <DateTimePicker\r\n                                        name={\"todate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || toDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || toDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                {/* <Col></Col> */}\r\n                            </Row>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"ncustodycode\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    data={this.state.data.ChainofCustody} //ALPD-2169\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    reloadData={this.reloadData}\r\n                                    scrollable={\"scrollable\"}\r\n                                    gridHeight={\"600px\"}\r\n                                    isActionRequired={false}\r\n                                    isToolBarRequired={true}\r\n                                    pageable={true}\r\n                                    isAddRequired={false}\r\n                                    isDownloadPDFRequired={false}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData.ChainofCustody, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData.ChainofCustody ? this.props.Login.masterData.ChainofCustody : [], dataState),\r\n                    //dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { callService, updateStore, crudMaster })(injectIntl(ChainofCustody));"]},"metadata":{},"sourceType":"module"}