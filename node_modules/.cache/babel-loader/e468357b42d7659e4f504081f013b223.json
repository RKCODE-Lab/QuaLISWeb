{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getSubSampleBySample(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getSubSampleBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n      let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();\n      releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseSubSample,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseSubSample,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {\n  let npreregno = \"\";\n  selectedSampleData.map((item, i) => {\n    let s = \"\";\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSampleData.length) {\n      if (i < selectedSampleData.length - 1) {\n        s = \",\";\n      }\n\n      npreregno = npreregno + s;\n    } else {\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSample\", {\n      npreregno: npreregno,\n      nregtypecode: selectedSampleData[0].nregtypecode,\n      nregsubtypecode: selectedSampleData[0].nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  selectedSubSampleData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSubSampleData.length) {\n      if (i < selectedSubSampleData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSubSample\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestBySample(methodParam, kjkj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getTestBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.viewRow.npreregno,\n      ntransactionsamplecode: methodParam.viewRow.ntransactionsamplecode,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let releaseTest = methodParam.masterData.releaseTest || new Map();\n      releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseTest,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseTest,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  let ntransactiontestcode = \"\";\n  selectedTestData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n    ntransactiontestcode = ntransactiontestcode + item.ntransactiontestcode;\n\n    if (i < selectedTestData.length) {\n      if (i < selectedTestData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n      ntransactiontestcode = ntransactiontestcode + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n      ntransactiontestcode = item.ntransactiontestcode;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedTest\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      ntransactiontestcode: ntransactiontestcode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \n//    let ntransactionsamplecode = \"\"\n//    let npreregno = \"\"\n//     let ntransactiontestcode = \"\" \n//     let bFlag = \"\" \n//     if (TestArray !== undefined) {\n//         TestArray.map(test => {\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\n//             npreregno += test.npreregno + ',';\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\n//         })\n//         TestArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"3\"\n//         }\n//     }   \n//     if (SubSampleArray !== undefined) {\n//         SubSampleArray.map(SubSample => {\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\n//             npreregno += SubSample.npreregno + ',';\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\n//             SubSampleArray = {\n//                 ntransactionsamplecode: ntransactionsamplecode,\n//                 npreregno: npreregno,\n//                 ntransactiontestcode: ntransactiontestcode,\n//                 bFlag:\"2\"\n//             }\n//         })\n//     }\n//     if (SampleArray !== undefined) {\n//         SampleArray.map(Sample => {\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\n//             npreregno += Sample.npreregno + ',';\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\n//         })\n//         SampleArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"1\"\n//         }\n//     }\n//     let allNpreregno = []\n//     if (SampleArray1 !== undefined) {\n//         SampleArray1.map(temp => {\n//             allNpreregno += temp + ','\n//         })\n//     }\n//     let allNtransactionsamplecode = []\n//     if (SubSampleArray1 !== undefined) {\n//         SubSampleArray1.map(temp => {\n//             allNtransactionsamplecode += temp + ','\n//         })\n//     }\n//     let allNtransactiontestcode = []\n//     if (TestArray1 !== undefined) {\n//         TestArray1.map(temp => {\n//             allNtransactiontestcode += temp + ','\n//         })\n//     }\n//     return function (dispatch) {  \n//     dispatch(initRequest(true));\n//     return rsapi.post(\"coarelease/updateStatus\", \n//         {\n//             SampleArray:SampleArray,\n//             SubSampleArray:SubSampleArray,\n//             TestArray: TestArray,\n//             userinfo: userInfo,\n//             allNtransactionsamplecode: allNtransactionsamplecode,\n//             allNtransactiontestcode: allNtransactiontestcode,\n//             allNpreregno:allNpreregno\n//         })\n//     .then(response=>{ \n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \n//        let releaseTest = Data1.releaseTest || new Map();           \n//        releaseSubSample = Data1.releaseSubSample || new Map();           \n//              releaseTest = Data1.releaseTest || new Map();\n// if(response.data.body[\"cFlag\"]===\"3\"){\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\n//        }\n//       //  else {\n//         if(response.data.body[\"cFlag\"]===\"2\"){\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\n//         }\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\n//             sortData(masterData);\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\n//                 data:releaseSubSample,releaseTest,\n//                       //  dataState:dataState,\n//                         loading:false\n//                     }});\n//         })\n//         .catch(error=>{\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//             if (error.response.status === 500){\n//                 toast.error(error.message);\n//             } \n//             else{               \n//                 toast.warn(error.response.data);\n//             }  \n//         })        \n//     }\n// }\n\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    //  if (TestArray !== undefined || TestArray.length&&TestArray.length!==0) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateStatus\", inputData).then(response => {\n      if (response.data.statusCodeValue !== 200) {\n        toast.warn(intl.formatMessage({\n          id: response.data.body\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        let selected = [];\n        let expanded = [];\n        let testdata = [];\n        let subsampleData = [];\n        let subsampleexpanded = [];\n        let subsampleselected = [];\n        let subsampleDataRes = [];\n        let y = [];\n        let a = [];\n        let SubSample = Object.values(Data1.ReleaseSubSample).forEach(item1 => {\n          item1.map(item2 => {\n            subsampleData.push(item2);\n\n            if (item2.expanded === true) {\n              subsampleexpanded.push({\n                \"ntransactionsamplecode\": item2.ntransactionsamplecode,\n                \"expanded\": item2.expanded\n              });\n            }\n\n            if (item2.selected === true) {\n              subsampleselected.push({\n                \"ntransactionsamplecode\": item2.ntransactionsamplecode,\n                \"selected\": item2.selected\n              });\n            }\n          });\n        });\n        let SubSampleRes = Object.values(response.data.body.ReleaseSubSample).forEach(item1 => {\n          item1.map(item2 => {\n            subsampleDataRes.push(item2);\n            subsampleexpanded.map(item1 => {\n              if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\n                item2[\"expanded\"] = true;\n              }\n            });\n            subsampleselected.map(item1 => {\n              if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\n                item2[\"selected\"] = true;\n              }\n            });\n          });\n        });\n        let testDataRes = [];\n        let testDataPrevious = [];\n        let testDataSelected = [];\n        let testDataExpanded = [];\n        testDataSelected = Object.values(Data1.ReleaseTest).forEach(item1 => {\n          item1.map(item2 => {\n            testDataPrevious.push(item2);\n\n            if (item2.selected === true) {\n              testdata.push({\n                \"ntransactiontestcode\": item2.ntransactiontestcode\n              });\n            }\n          });\n        });\n        testDataExpanded = Object.values(response.data.body.ReleaseTest).forEach(item1 => {\n          item1.map(item2 => {\n            testDataRes.push(item2);\n            testdata.map(x => {\n              if (item2.ntransactiontestcode === x.ntransactiontestcode) {\n                item2[\"selected\"] = true;\n              }\n            });\n          });\n        });\n        let ReleaseTest = replaceUpdatedObject(testDataRes, testDataPrevious, 'ntransactiontestcode');\n        let ReleaseTest1 = groupBy(ReleaseTest, 'ntransactionsamplecode');\n        let ReleaseSubSample = replaceUpdatedObject(subsampleDataRes, subsampleData, 'ntransactionsamplecode');\n        let ReleaseSubSample1 = groupBy(ReleaseSubSample, 'npreregno');\n\n        function groupBy(objectArray, property) {\n          return objectArray.reduce((acc, obj) => {\n            const key = obj[property];\n\n            if (!acc[key]) {\n              acc[key] = [];\n            }\n\n            acc[key].push(obj);\n            return acc;\n          }, {});\n        } // Data1.ReleaseSample.map(item => {\n        //     delete item[\"expanded\"]\n        // });\n\n\n        Data1.ReleaseSample.map(item2 => {\n          if (item2.expanded === true) {\n            expanded.push({\n              \"npreregno\": item2.npreregno,\n              \"expanded\": item2.expanded\n            });\n          }\n\n          if (item2.selected === true) {\n            selected.push({\n              \"npreregno\": item2.npreregno,\n              \"selected\": item2.selected\n            });\n          }\n        });\n        response.data.body.ReleaseSample.map(item2 => {\n          expanded.map(item1 => {\n            if (item1.npreregno === item2.npreregno) {\n              item2[\"expanded\"] = true;\n            }\n          });\n          selected.map(item1 => {\n            if (item1.npreregno === item2.npreregno) {\n              item2[\"selected\"] = true;\n            }\n          });\n        });\n        let masterData = { ...Data1,\n          ...response.data.body,\n          ReleaseTest: ReleaseTest1,\n          ReleaseSubSample: ReleaseSubSample1,\n          ReleaseSample: replaceUpdatedObject(response.data.body.ReleaseSample, Data1.ReleaseSample, 'npreregno')\n        };\n        console.log(\"ReleasedTest,\", masterData); // sortData(masterData);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            //  data: releaseSubSample, releaseTest,\n            //  dataState:dataState,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else {\n    //     toast.warn(intl.formatMessage({\n    //         id: \"IDS_SELECTANYONESAMPLE/SUBSAMPLE/TEST\"\n    //     }));\n    // }\n  };\n}\nexport function getReleaseRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getFilterStatus\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"coarelease/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleaseApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"coarelease/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/COAReleaseAction.js"],"names":["toast","intl","replaceUpdatedObject","sortData","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","getSubSampleBySample","methodParam","dispatch","post","nsitecode","npreregno","primaryKeyValue","userinfo","userInfo","then","response","releaseSubSample","masterData","Map","set","parseInt","Object","keys","data","values","type","payload","dataState","loading","catch","error","status","message","warn","getReleaseSelectedSamples","controlId","selectedSampleData","flag","map","item","i","s","length","nregtypecode","nregsubtypecode","console","log","getReleaseSelectedSubSamples","selectedSubSampleData","ntransactionsamplecode","getTestBySample","kjkj","viewRow","releaseTest","getReleaseSelectedTest","selectedTestData","ntransactiontestcode","getReleaseSelectedSampleSubSampleTest","Data1","inputData","statusCodeValue","formatMessage","id","body","selected","expanded","testdata","subsampleData","subsampleexpanded","subsampleselected","subsampleDataRes","y","a","SubSample","ReleaseSubSample","forEach","item1","item2","push","SubSampleRes","testDataRes","testDataPrevious","testDataSelected","testDataExpanded","ReleaseTest","x","ReleaseTest1","groupBy","ReleaseSubSample1","objectArray","property","reduce","acc","obj","key","ReleaseSample","change","getReleaseRegistrationType","responseData","SampleTypeValue","getReleaseRegistrationSubType","RegTypeValue","getReleaseFilterStatus","RegSubTypeValue","getReleaseFilterBasedTest","napprovalversioncode","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","getReleaseApprovalVersion","inputParam","getReleaseSample","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showFilter","skip","take","testskip","testtake","resultDataState","sort","filter","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getSubSampleBySample(methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/getSubSampleBySample\",\r\n            {\r\n                nsitecode: methodParam.nsitecode, npreregno: methodParam.primaryKeyValue,\r\n                userinfo: methodParam.userInfo\r\n            })\r\n            .then(response => {\r\n                // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n                let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();\r\n\r\n                releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\r\n                let masterData = { ...methodParam.masterData, releaseSubSample, ...response.data };\r\n\r\n                //  sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: methodParam.data, releaseSubSample,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {\r\n    let npreregno = \"\"\r\n    selectedSampleData.map((item, i) => {\r\n        let s = \"\"\r\n        npreregno = npreregno + item.npreregno;\r\n        if (i < selectedSampleData.length) {\r\n            if (i < selectedSampleData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            npreregno = npreregno + s;\r\n        }\r\n        else {\r\n            npreregno = item.npreregno;\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedSample\",\r\n            {\r\n                npreregno: npreregno,\r\n                nregtypecode: selectedSampleData[0].nregtypecode,\r\n                nregsubtypecode: selectedSampleData[0].nregsubtypecode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"errordot\", error)\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {\r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno = \"\"\r\n\r\n    selectedSubSampleData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno + item.npreregno;\r\n\r\n        if (i < selectedSubSampleData.length) {\r\n            if (i < selectedSubSampleData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno = npreregno + s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedSubSample\",\r\n            {\r\n\r\n                npreregno: npreregno,\r\n                ntransactionsamplecode: ntransactionsamplecode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"errordot\", error)\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTestBySample(methodParam, kjkj) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/getTestBySample\",\r\n            {\r\n                nsitecode: methodParam.nsitecode, npreregno: methodParam.viewRow.npreregno,\r\n                ntransactionsamplecode: methodParam.viewRow.ntransactionsamplecode,\r\n                userinfo: methodParam.userInfo\r\n            })\r\n            .then(response => {\r\n                let releaseTest = methodParam.masterData.releaseTest || new Map();\r\n                releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\r\n                let masterData = { ...methodParam.masterData, releaseTest, ...response.data };\r\n\r\n                //  sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: methodParam.data,\r\n                        releaseTest,\r\n                        dataState: methodParam.dataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {\r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno = \"\"\r\n    let ntransactiontestcode = \"\"\r\n\r\n    selectedTestData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno + item.npreregno;\r\n        ntransactiontestcode = ntransactiontestcode + item.ntransactiontestcode;\r\n\r\n        if (i < selectedTestData.length) {\r\n            if (i < selectedTestData.length - 1) {\r\n                s = \",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno = npreregno + s;\r\n            ntransactiontestcode = ntransactiontestcode + s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n            ntransactiontestcode = item.ntransactiontestcode;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateReleasedTest\",\r\n            {\r\n\r\n                npreregno: npreregno,\r\n                ntransactionsamplecode: ntransactionsamplecode,\r\n                ntransactiontestcode: ntransactiontestcode,\r\n\r\n                userinfo: userInfo\r\n            })\r\n\r\n            .then(response => {\r\n                // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n                let masterData = { ...data, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        data: response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(\"errordot\", error)\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \r\n//    let ntransactionsamplecode = \"\"\r\n//    let npreregno = \"\"\r\n//     let ntransactiontestcode = \"\" \r\n//     let bFlag = \"\" \r\n//     if (TestArray !== undefined) {\r\n//         TestArray.map(test => {\r\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\r\n//             npreregno += test.npreregno + ',';\r\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\r\n//         })\r\n//         TestArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"3\"\r\n\r\n//         }\r\n//     }   \r\n//     if (SubSampleArray !== undefined) {\r\n//         SubSampleArray.map(SubSample => {\r\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\r\n//             npreregno += SubSample.npreregno + ',';\r\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\r\n//             SubSampleArray = {\r\n//                 ntransactionsamplecode: ntransactionsamplecode,\r\n//                 npreregno: npreregno,\r\n//                 ntransactiontestcode: ntransactiontestcode,\r\n//                 bFlag:\"2\"\r\n\r\n//             }\r\n//         })\r\n//     }\r\n//     if (SampleArray !== undefined) {\r\n\r\n//         SampleArray.map(Sample => {\r\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\r\n//             npreregno += Sample.npreregno + ',';\r\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\r\n\r\n//         })\r\n//         SampleArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"1\"\r\n\r\n//         }\r\n//     }\r\n//     let allNpreregno = []\r\n//     if (SampleArray1 !== undefined) {\r\n\r\n//         SampleArray1.map(temp => {\r\n//             allNpreregno += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactionsamplecode = []\r\n//     if (SubSampleArray1 !== undefined) {\r\n\r\n//         SubSampleArray1.map(temp => {\r\n//             allNtransactionsamplecode += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactiontestcode = []\r\n//     if (TestArray1 !== undefined) {\r\n\r\n//         TestArray1.map(temp => {\r\n//             allNtransactiontestcode += temp + ','\r\n//         })\r\n//     }\r\n\r\n//     return function (dispatch) {  \r\n//     dispatch(initRequest(true));\r\n//     return rsapi.post(\"coarelease/updateStatus\", \r\n//         {\r\n//             SampleArray:SampleArray,\r\n//             SubSampleArray:SubSampleArray,\r\n//             TestArray: TestArray,\r\n//             userinfo: userInfo,\r\n//             allNtransactionsamplecode: allNtransactionsamplecode,\r\n//             allNtransactiontestcode: allNtransactiontestcode,\r\n//             allNpreregno:allNpreregno\r\n//         })\r\n//     .then(response=>{ \r\n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \r\n//        let releaseTest = Data1.releaseTest || new Map();           \r\n//        releaseSubSample = Data1.releaseSubSample || new Map();           \r\n\r\n//              releaseTest = Data1.releaseTest || new Map();\r\n// if(response.data.body[\"cFlag\"]===\"3\"){\r\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\r\n//        }\r\n//       //  else {\r\n//         if(response.data.body[\"cFlag\"]===\"2\"){\r\n\r\n\r\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\r\n\r\n//         }\r\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\r\n\r\n//             sortData(masterData);\r\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n//                 data:releaseSubSample,releaseTest,\r\n//                       //  dataState:dataState,\r\n//                         loading:false\r\n//                     }});\r\n//         })\r\n//         .catch(error=>{\r\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//             if (error.response.status === 500){\r\n//                 toast.error(error.message);\r\n//             } \r\n//             else{               \r\n//                 toast.warn(error.response.data);\r\n//             }  \r\n//         })        \r\n//     }\r\n// }\r\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n        //  if (TestArray !== undefined || TestArray.length&&TestArray.length!==0) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"coarelease/updateStatus\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                if (response.data.statusCodeValue !== 200) {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response.data.body\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n\r\n                }\r\n                else {\r\n                    let selected = []\r\n                    let expanded = []\r\n                    let testdata = []\r\n                    let subsampleData = []\r\n                    let subsampleexpanded = []\r\n                    let subsampleselected = []\r\n                    let subsampleDataRes = []\r\n                    let y = []\r\n                    let a = []\r\n                    let SubSample = Object.values(Data1.ReleaseSubSample).forEach(item1 => {\r\n                        item1.map(item2 => {\r\n                            subsampleData.push(item2)\r\n                            if (item2.expanded === true) {\r\n                                subsampleexpanded.push({ \"ntransactionsamplecode\": item2.ntransactionsamplecode, \"expanded\": item2.expanded })\r\n                            }\r\n                            if (item2.selected === true) {\r\n                                subsampleselected.push({ \"ntransactionsamplecode\": item2.ntransactionsamplecode, \"selected\": item2.selected })\r\n                            }\r\n\r\n                        })\r\n                    });\r\n                    let SubSampleRes = Object.values(response.data.body.ReleaseSubSample).forEach(item1 => {\r\n                        item1.map(item2 => {\r\n                            subsampleDataRes.push(item2)\r\n                            subsampleexpanded.map(item1 => {\r\n                                if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\r\n                                    item2[\"expanded\"] = true\r\n                                }\r\n                            })\r\n                            subsampleselected.map(item1 => {\r\n                                if (item1.ntransactionsamplecode === item2.ntransactionsamplecode) {\r\n                                    item2[\"selected\"] = true\r\n                                }\r\n                            })\r\n                        })\r\n                    });\r\n                    let testDataRes = []\r\n                    let testDataPrevious = []\r\n                    let testDataSelected = []\r\n                    let testDataExpanded = []\r\n                    testDataSelected = Object.values(Data1.ReleaseTest).forEach(item1 => {\r\n                        item1.map(item2 => {\r\n                            testDataPrevious.push(item2)\r\n                            if (item2.selected === true) {\r\n                                testdata.push({ \"ntransactiontestcode\": item2.ntransactiontestcode })\r\n                            }\r\n                        })\r\n                    });\r\n                    testDataExpanded = Object.values(response.data.body.ReleaseTest).forEach(item1 => {\r\n                        item1.map(item2 => {\r\n                            testDataRes.push(item2)\r\n\r\n                            testdata.map(x => {\r\n                                if (item2.ntransactiontestcode === x.ntransactiontestcode) {\r\n                                    item2[\"selected\"] = true\r\n                                }\r\n                            })\r\n                        })\r\n                    });\r\n                    let ReleaseTest = replaceUpdatedObject(testDataRes, testDataPrevious, 'ntransactiontestcode');\r\n                    let ReleaseTest1 = groupBy(ReleaseTest, 'ntransactionsamplecode');\r\n                    let ReleaseSubSample = replaceUpdatedObject(subsampleDataRes, subsampleData, 'ntransactionsamplecode');\r\n                    let ReleaseSubSample1 = groupBy(ReleaseSubSample, 'npreregno');\r\n\r\n                    function groupBy(objectArray, property) {\r\n                        return objectArray.reduce((acc, obj) => {\r\n                            const key = obj[property];\r\n                            if (!acc[key]) {\r\n                                acc[key] = [];\r\n                            }\r\n                            acc[key].push(obj);\r\n                            return acc;\r\n                        }, {});\r\n                    }\r\n                    // Data1.ReleaseSample.map(item => {\r\n                    //     delete item[\"expanded\"]\r\n                    // });\r\n                    Data1.ReleaseSample.map(item2 => {\r\n                        if (item2.expanded === true) {\r\n                            expanded.push({ \"npreregno\": item2.npreregno, \"expanded\": item2.expanded })\r\n                        }\r\n                        if (item2.selected === true) {\r\n                            selected.push({ \"npreregno\": item2.npreregno, \"selected\": item2.selected })\r\n                        }\r\n                    })\r\n                    response.data.body.ReleaseSample.map(item2 => {\r\n                        expanded.map(item1 => {\r\n                            if (item1.npreregno === item2.npreregno) {\r\n                                item2[\"expanded\"] = true\r\n                            }\r\n                        })\r\n                        selected.map(item1 => {\r\n                            if (item1.npreregno === item2.npreregno) {\r\n                                item2[\"selected\"] = true\r\n                            }\r\n                        })\r\n\r\n                    })\r\n\r\n                    let masterData = {\r\n\r\n                        ...Data1, ...response.data.body,\r\n                        ReleaseTest: ReleaseTest1,\r\n                        ReleaseSubSample: ReleaseSubSample1,\r\n\r\n                        ReleaseSample: replaceUpdatedObject(response.data.body.ReleaseSample, Data1.ReleaseSample, 'npreregno'),\r\n\r\n\r\n                    };\r\n\r\n                    console.log(\"ReleasedTest,\", masterData);\r\n                    // sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            //  data: releaseSubSample, releaseTest,\r\n                            //  dataState:dataState,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n        // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({\r\n        //         id: \"IDS_SELECTANYONESAMPLE/SUBSAMPLE/TEST\"\r\n        //     }));\r\n        // }\r\n    }\r\n}\r\nexport function getReleaseRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleaseFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"coarelease/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleaseApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleaseSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"coarelease/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}