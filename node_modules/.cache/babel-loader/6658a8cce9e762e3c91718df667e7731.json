{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sqlEmptyValue = exports.spelImportConcat = exports.spelFormatConcat = exports.spelFixList = exports.spelEscape = exports.mongoEmptyValue = exports.SqlString = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar SqlString = require(\"sqlstring\");\n\nexports.SqlString = SqlString;\n\nSqlString.trim = function (val) {\n  if (val.charAt(0) == \"'\") return val.substring(1, val.length - 1);else return val;\n};\n\nSqlString.escapeLike = function (val) {\n  var any_start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var any_end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true; // normal escape\n\n  var res = SqlString.escape(val); // unwrap ''\n\n  res = SqlString.trim(res); // escape % and _\n\n  res = res.replace(/[%_]/g, \"\\\\$&\"); // wrap with % for LIKE\n\n  res = (any_start ? \"%\" : \"\") + res + (any_end ? \"%\" : \"\"); // wrap ''\n\n  res = \"'\" + res + \"'\";\n  return res;\n};\n\nvar sqlEmptyValue = function sqlEmptyValue(fieldDef) {\n  var v = \"''\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n\n  if (type == \"date\") {\n    //todo: support other SQL dialects?  0001-01-01 for oracle, 1970-01-01 for timestamp\n    v = \"'0000-00-00'\";\n  } else if (type == \"datetime\") {\n    v = \"'0000-00-00 00:00'\";\n  } else if (type == \"time\") {\n    v = \"'00:00'\";\n  } else if (type == \"number\") {\n    v = \"0\";\n  }\n\n  return v;\n};\n\nexports.sqlEmptyValue = sqlEmptyValue;\n\nvar mongoEmptyValue = function mongoEmptyValue(fieldDef) {\n  var v = \"\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n\n  if (type == \"number\") {\n    v = 0;\n  }\n\n  return v;\n};\n\nexports.mongoEmptyValue = mongoEmptyValue;\n\nvar spelEscapeString = function spelEscapeString(val) {\n  // Strings are delimited by single quotes. To put a single quote itself in a string, use two single quote characters. \n  return \"'\" + val.replace(/'/g, \"''\") + \"'\";\n};\n\nvar spelInlineList = function spelInlineList(vals) {\n  var toArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // find java type of values\n\n  var javaType;\n  var jt;\n  var numberJavaTypes = [\"int\", \"float\"];\n  vals.map(function (v) {\n    if (v !== undefined && v !== null) {\n      if (typeof v === \"string\") {\n        jt = \"String\";\n      } else if (typeof v === \"number\") {\n        jt = Number.isInteger(v) ? \"int\" : \"float\";\n      } else throw new Error(\"spelEscape: Can't use value \".concat(v, \" in array\"));\n\n      if (!javaType) {\n        javaType = jt;\n      } else if (javaType != jt) {\n        if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {\n          // found int and float in collecton - use float\n          javaType = \"float\";\n        } else throw new Error(\"spelEscape: Can't use different types in array: found \".concat(javaType, \" and \").concat(jt));\n      }\n    }\n  });\n\n  if (!javaType) {\n    javaType = \"String\"; //default if empty array\n  } // for floats we should add 'f' to all items\n\n\n  var escapedVals;\n\n  if (javaType == \"float\") {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v, true);\n    });\n  } else {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v);\n    });\n  } // build inline list or array\n\n\n  var res;\n\n  if (toArray) {\n    res = \"new \".concat(javaType, \"[]{\").concat(escapedVals.join(\", \"), \"}\");\n  } else {\n    res = \"{\".concat(escapedVals.join(\", \"), \"}\");\n  }\n\n  return res;\n};\n\nvar spelFixList = function spelFixList(val) {\n  // `{1,2}.contains(1)` NOT works\n  // `{1,2}.?[true].contains(1)` works\n  return \"\".concat(val, \".?[true]\");\n};\n\nexports.spelFixList = spelFixList;\n\nvar spelEscape = function spelEscape(val) {\n  var numberToFloat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var arrayToArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html#expressions-ref-literal\n\n  if (val === undefined || val === null) {\n    return \"null\";\n  }\n\n  switch ((0, _typeof2[\"default\"])(val)) {\n    case \"boolean\":\n      return val ? \"true\" : \"false\";\n\n    case \"number\":\n      if (!Number.isFinite(val) || isNaN(val)) return undefined;\n      return val + (!Number.isInteger(val) || numberToFloat ? \"f\" : \"\");\n\n    case \"object\":\n      if (Array.isArray(val)) {\n        return spelInlineList(val, arrayToArray);\n      } else {\n        // see `spelFormatValue` for Date, LocalTime\n        throw new Error(\"spelEscape: Object is not supported\");\n      }\n\n    default:\n      return spelEscapeString(val);\n  }\n};\n\nexports.spelEscape = spelEscape;\n\nvar spelFormatConcat = function spelFormatConcat(parts) {\n  if (parts && Array.isArray(parts) && parts.length) {\n    return parts.map(function (part) {\n      if (part.type == \"const\") {\n        return spelEscape(part.value);\n      } else if (part.type == \"property\") {\n        return \"\" + part.value;\n      } else if (part.type == \"variable\") {\n        return \"#\" + part.value;\n      }\n\n      return undefined;\n    }).filter(function (r) {\n      return r != undefined;\n    }).join(\" + \");\n  } else {\n    return \"null\";\n  }\n}; // `val` is {value, valueType, valueSrc}\n// If `valueType` == \"case_value\", `value` is array of such items (to be considered as concatenation)\n\n\nexports.spelFormatConcat = spelFormatConcat;\n\nvar spelImportConcat = function spelImportConcat(val) {\n  if (val == undefined) return [undefined, []];\n  var errors = [];\n  var parts = val.valueType == \"case_value\" ? val.value : [val];\n  var res = parts.map(function (child) {\n    if (child.valueSrc == \"value\") {\n      if (child.value === null) {\n        return undefined;\n      } else {\n        return {\n          type: \"const\",\n          value: child.value\n        };\n      }\n    } else if (child.valueSrc == \"field\") {\n      return {\n        type: child.isVariable ? \"variable\" : \"property\",\n        value: child.value\n      };\n    } else {\n      errors.push(\"Unsupported valueSrc \".concat(child.valueSrc, \" in concatenation\"));\n    }\n  }).filter(function (v) {\n    return v != undefined;\n  });\n  return [res, errors];\n};\n\nexports.spelImportConcat = spelImportConcat;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/node_modules/react-awesome-query-builder/lib/utils/export.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","sqlEmptyValue","spelImportConcat","spelFormatConcat","spelFixList","spelEscape","mongoEmptyValue","SqlString","_typeof2","trim","val","charAt","substring","length","escapeLike","any_start","arguments","undefined","any_end","res","escape","replace","fieldDef","v","type","spelEscapeString","spelInlineList","vals","toArray","javaType","jt","numberJavaTypes","map","Number","isInteger","Error","concat","includes","escapedVals","join","numberToFloat","arrayToArray","isFinite","isNaN","Array","isArray","parts","part","filter","r","errors","valueType","child","valueSrc","isVariable","push"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sqlEmptyValue = exports.spelImportConcat = exports.spelFormatConcat = exports.spelFixList = exports.spelEscape = exports.mongoEmptyValue = exports.SqlString = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar SqlString = require(\"sqlstring\");\n\nexports.SqlString = SqlString;\n\nSqlString.trim = function (val) {\n  if (val.charAt(0) == \"'\") return val.substring(1, val.length - 1);else return val;\n};\n\nSqlString.escapeLike = function (val) {\n  var any_start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var any_end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // normal escape\n  var res = SqlString.escape(val); // unwrap ''\n\n  res = SqlString.trim(res); // escape % and _\n\n  res = res.replace(/[%_]/g, \"\\\\$&\"); // wrap with % for LIKE\n\n  res = (any_start ? \"%\" : \"\") + res + (any_end ? \"%\" : \"\"); // wrap ''\n\n  res = \"'\" + res + \"'\";\n  return res;\n};\n\nvar sqlEmptyValue = function sqlEmptyValue(fieldDef) {\n  var v = \"''\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n\n  if (type == \"date\") {\n    //todo: support other SQL dialects?  0001-01-01 for oracle, 1970-01-01 for timestamp\n    v = \"'0000-00-00'\";\n  } else if (type == \"datetime\") {\n    v = \"'0000-00-00 00:00'\";\n  } else if (type == \"time\") {\n    v = \"'00:00'\";\n  } else if (type == \"number\") {\n    v = \"0\";\n  }\n\n  return v;\n};\n\nexports.sqlEmptyValue = sqlEmptyValue;\n\nvar mongoEmptyValue = function mongoEmptyValue(fieldDef) {\n  var v = \"\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n\n  if (type == \"number\") {\n    v = 0;\n  }\n\n  return v;\n};\n\nexports.mongoEmptyValue = mongoEmptyValue;\n\nvar spelEscapeString = function spelEscapeString(val) {\n  // Strings are delimited by single quotes. To put a single quote itself in a string, use two single quote characters. \n  return \"'\" + val.replace(/'/g, \"''\") + \"'\";\n};\n\nvar spelInlineList = function spelInlineList(vals) {\n  var toArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // find java type of values\n  var javaType;\n  var jt;\n  var numberJavaTypes = [\"int\", \"float\"];\n  vals.map(function (v) {\n    if (v !== undefined && v !== null) {\n      if (typeof v === \"string\") {\n        jt = \"String\";\n      } else if (typeof v === \"number\") {\n        jt = Number.isInteger(v) ? \"int\" : \"float\";\n      } else throw new Error(\"spelEscape: Can't use value \".concat(v, \" in array\"));\n\n      if (!javaType) {\n        javaType = jt;\n      } else if (javaType != jt) {\n        if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {\n          // found int and float in collecton - use float\n          javaType = \"float\";\n        } else throw new Error(\"spelEscape: Can't use different types in array: found \".concat(javaType, \" and \").concat(jt));\n      }\n    }\n  });\n\n  if (!javaType) {\n    javaType = \"String\"; //default if empty array\n  } // for floats we should add 'f' to all items\n\n\n  var escapedVals;\n\n  if (javaType == \"float\") {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v, true);\n    });\n  } else {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v);\n    });\n  } // build inline list or array\n\n\n  var res;\n\n  if (toArray) {\n    res = \"new \".concat(javaType, \"[]{\").concat(escapedVals.join(\", \"), \"}\");\n  } else {\n    res = \"{\".concat(escapedVals.join(\", \"), \"}\");\n  }\n\n  return res;\n};\n\nvar spelFixList = function spelFixList(val) {\n  // `{1,2}.contains(1)` NOT works\n  // `{1,2}.?[true].contains(1)` works\n  return \"\".concat(val, \".?[true]\");\n};\n\nexports.spelFixList = spelFixList;\n\nvar spelEscape = function spelEscape(val) {\n  var numberToFloat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var arrayToArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  // https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html#expressions-ref-literal\n  if (val === undefined || val === null) {\n    return \"null\";\n  }\n\n  switch ((0, _typeof2[\"default\"])(val)) {\n    case \"boolean\":\n      return val ? \"true\" : \"false\";\n\n    case \"number\":\n      if (!Number.isFinite(val) || isNaN(val)) return undefined;\n      return val + (!Number.isInteger(val) || numberToFloat ? \"f\" : \"\");\n\n    case \"object\":\n      if (Array.isArray(val)) {\n        return spelInlineList(val, arrayToArray);\n      } else {\n        // see `spelFormatValue` for Date, LocalTime\n        throw new Error(\"spelEscape: Object is not supported\");\n      }\n\n    default:\n      return spelEscapeString(val);\n  }\n};\n\nexports.spelEscape = spelEscape;\n\nvar spelFormatConcat = function spelFormatConcat(parts) {\n  if (parts && Array.isArray(parts) && parts.length) {\n    return parts.map(function (part) {\n      if (part.type == \"const\") {\n        return spelEscape(part.value);\n      } else if (part.type == \"property\") {\n        return \"\" + part.value;\n      } else if (part.type == \"variable\") {\n        return \"#\" + part.value;\n      }\n\n      return undefined;\n    }).filter(function (r) {\n      return r != undefined;\n    }).join(\" + \");\n  } else {\n    return \"null\";\n  }\n}; // `val` is {value, valueType, valueSrc}\n// If `valueType` == \"case_value\", `value` is array of such items (to be considered as concatenation)\n\n\nexports.spelFormatConcat = spelFormatConcat;\n\nvar spelImportConcat = function spelImportConcat(val) {\n  if (val == undefined) return [undefined, []];\n  var errors = [];\n  var parts = val.valueType == \"case_value\" ? val.value : [val];\n  var res = parts.map(function (child) {\n    if (child.valueSrc == \"value\") {\n      if (child.value === null) {\n        return undefined;\n      } else {\n        return {\n          type: \"const\",\n          value: child.value\n        };\n      }\n    } else if (child.valueSrc == \"field\") {\n      return {\n        type: child.isVariable ? \"variable\" : \"property\",\n        value: child.value\n      };\n    } else {\n      errors.push(\"Unsupported valueSrc \".concat(child.valueSrc, \" in concatenation\"));\n    }\n  }).filter(function (v) {\n    return v != undefined;\n  });\n  return [res, errors];\n};\n\nexports.spelImportConcat = spelImportConcat;"]},"metadata":{},"sourceType":"script"}