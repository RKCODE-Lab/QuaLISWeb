{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\AddTestGroupSpecification.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus } from '../../components/Enumeration';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\n\nconst AddTestGroupSpecification = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  }, props.selectedRecord.ncategorybasedflow === transactionStatus.NO ? /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sproductname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_PRODUCTNAME\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PRODUCTNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sproductname\"] : \"\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sproductcatname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_PRODUCTCATEGORY\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_PRODUCTCATEGORY\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sproductcatname\"] : \"\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 28\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sspecname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SPECNAME\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SPECNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sspecname\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dexpirydate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_EXPIRYDATEWOTIME\"\n    }),\n    className: \"form-control\",\n    placeholderText: \"Select date..\",\n    selected: props.selectedRecord[\"dexpirydate\"] //dateFormat={\"dd/MM/yyyy\"}\n    ,\n    dateFormat: props.userInfo.ssitedate,\n    timeInputLabel: props.intl.formatMessage({\n      id: \"IDS_TIME\"\n    }),\n    showTimeInput: false,\n    isClearable: false,\n    onChange: date => props.handleDateChange(\"dexpirydate\", date),\n    value: props.selectedRecord[\"dexpirydate\"],\n    isMandatory: true,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntzexpirydate\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TIMEZONE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.timeZoneList,\n    optionId: \"ntimezonecode\",\n    optionValue: \"stimezoneid\",\n    value: props.selectedRecord[\"ntzexpirydate\"],\n    defaultValue: props.selectedRecord[\"ntzexpirydate\"],\n    isMandatory: true,\n    isSearchable: true,\n    isClearable: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: value => props.onComboChange(value, 'ntzexpirydate', 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ntransactionstatus\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [transactionStatus.ACTIVE, transactionStatus.DEACTIVE]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    defaultValue: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    checked: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ncomponentrequired\",\n    label: props.intl.formatMessage({\n      id: \"IDS_COMPONENTREQUIRED\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_COMPONENTREQUIRED\"\n    }),\n    defaultValue: props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false,\n    checked: props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false // disabled={true}//{props.operation===\"copy\"?true:false}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default injectIntl(AddTestGroupSpecification);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/AddTestGroupSpecification.jsx"],"names":["React","Row","Col","FormInput","DateTimePicker","CustomSwitch","injectIntl","transactionStatus","FormSelectSearch","AddTestGroupSpecification","props","selectedRecord","ncategorybasedflow","NO","intl","formatMessage","id","event","onInputOnChange","userInfo","ssitedate","date","handleDateChange","timeZoneList","value","onComboChange","ACTIVE","DEACTIVE","YES"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nconst AddTestGroupSpecification = props => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={12}>\r\n                    {props.selectedRecord.ncategorybasedflow===transactionStatus.NO?\r\n                    <FormInput\r\n                        name={\"sproductname\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_PRODUCTNAME\" })}\r\n                        type=\"text\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_PRODUCTNAME\" })}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"sproductname\"] : \"\"}\r\n                        readOnly={true}\r\n                    />\r\n\r\n                          :<FormInput\r\n                        name={\"sproductcatname\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORY\" })}\r\n                        type=\"text\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORY\" })}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"sproductcatname\"] : \"\"}\r\n                        readOnly={true}\r\n                    />\r\n}\r\n                    <FormInput\r\n                        name={\"sspecname\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                        type=\"text\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"sspecname\"] : \"\"}\r\n                        isMandatory=\"*\"\r\n                        required={true}\r\n                        maxLength={100}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={12}>\r\n                    {/* <Row>\r\n                        <Col md={6}> */}\r\n                       \r\n\r\n                            <DateTimePicker\r\n                                name={\"dexpirydate\"}\r\n                                label={props.intl.formatMessage({ id: \"IDS_EXPIRYDATEWOTIME\" })}\r\n                                className='form-control'\r\n                                placeholderText=\"Select date..\"\r\n                                selected={props.selectedRecord[\"dexpirydate\"]}\r\n                                //dateFormat={\"dd/MM/yyyy\"}\r\n                                dateFormat={props.userInfo.ssitedate}\r\n                                timeInputLabel=  {props.intl.formatMessage({ id:\"IDS_TIME\"})}\r\n                                showTimeInput={false}\r\n                                isClearable={false}\r\n                                onChange={date => props.handleDateChange(\"dexpirydate\", date)}\r\n                                value={props.selectedRecord[\"dexpirydate\"]}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                            />\r\n                        {/* </Col>\r\n                        <Col md={6}> */}\r\n                            <FormSelectSearch\r\n                                name={\"ntzexpirydate\"}\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                options={props.timeZoneList}\r\n                                optionId=\"ntimezonecode\"\r\n                                optionValue=\"stimezoneid\"\r\n                                value={props.selectedRecord[\"ntzexpirydate\"]}\r\n                                defaultValue={props.selectedRecord[\"ntzexpirydate\"]}\r\n                                isMandatory={true}\r\n                                isSearchable={true}\r\n                                isClearable={false}\r\n                                closeMenuOnSelect={true}\r\n                                alphabeticalSort={true}\r\n                                onChange={(value) => props.onComboChange(value, 'ntzexpirydate', 1)}\r\n                            />\r\n                        {/* </Col>\r\n                    </Row> */}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={12}>\r\n                    <CustomSwitch\r\n                        name={\"ntransactionstatus\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.ACTIVE, transactionStatus.DEACTIVE])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                        defaultValue={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                        checked={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col>\r\n                <Col md={12} >\r\n                    <CustomSwitch\r\n                        name={\"ncomponentrequired\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_COMPONENTREQUIRED\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_COMPONENTREQUIRED\" })}\r\n                        defaultValue={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\r\n                        checked={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\r\n                        // disabled={true}//{props.operation===\"copy\"?true:false}\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestGroupSpecification);"]},"metadata":{},"sourceType":"module"}