{"ast":null,"code":"import{ResultEntry}from'../../components/Enumeration';export function numberConversion(number,rounding){return Number.parseFloat(number).toFixed(rounding);}export function numericGrade(parameter,sfinalresult){var result=parseFloat(sfinalresult);var minA=parseFloat(parameter.smina);var maxA=parseFloat(parameter.smaxa);var minB=parseFloat(parameter.sminb);var maxB=parseFloat(parameter.smaxb);var minLoD=parseFloat(parameter.sminlod);var maxLoD=parseFloat(parameter.smaxlod);var minLOQ=parseFloat(parameter.sminloq);var maxLOQ=parseFloat(parameter.smaxloq);var disregard=parseFloat(parameter.sdisregard);if(disregard!==\"null\"&&disregard>sfinalresult){return ResultEntry.RESULTSTATUS_BELOWDISREGARD;}/* else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL;\r\n        }\r\n        else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n            if (result >= minLoD && result <= maxLoD) {\r\n                return ResultEntry.RESULTSTATUS_BDL;\r\n            }\r\n            else {\r\n                return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n            }\r\n        } else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n        if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } */else if(!isNaN(minLoD)&&!isNaN(minLOQ)&&!isNaN(maxLoD)&&!isNaN(maxLOQ)){if(result>=minLoD&&result<minLOQ){return ResultEntry.RESULTSTATUS_LLOQ;}else if(result<=minLoD){return ResultEntry.RESULTSTATUS_LLOD;}else if(result>maxLOQ&&result<=maxLoD){return ResultEntry.RESULTSTATUS_HLOQ;}else if(result>maxLOQ){return ResultEntry.RESULTSTATUS_HLOD;}else{//return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\nreturn findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}else if(!isNaN(minLoD)&&!isNaN(minLOQ)&&isNaN(maxLOQ)&&isNaN(maxLoD)){if(result>=minLoD&&result<=minLOQ){return ResultEntry.RESULTSTATUS_LLOQ;}else if(result<minLoD){return ResultEntry.RESULTSTATUS_LLOD;}else{return findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}else if(!isNaN(minLoD)&&!isNaN(minLOQ)&&!isNaN(maxLOQ)&&isNaN(maxLoD)){if(result>=minLoD&&result<=minLOQ){return ResultEntry.RESULTSTATUS_LLOQ;}else if(result<minLoD){return ResultEntry.RESULTSTATUS_LLOD;}else if(result>maxLOQ){return ResultEntry.RESULTSTATUS_HLOD;}else if(result<maxLOQ&&result>maxB){return ResultEntry.RESULTSTATUS_HOOS;}else{return findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}else if(!isNaN(minLoD)&&!isNaN(minLOQ)&&!isNaN(maxLoD)&&isNaN(maxLOQ)){if(result>=minLoD&&result<=minLOQ){return ResultEntry.RESULTSTATUS_LLOQ;}else if(result<minLoD){return ResultEntry.RESULTSTATUS_LLOD;}else if(result>maxLoD){return ResultEntry.RESULTSTATUS_HLOD;}else if(result<maxLoD&&result>maxB){return ResultEntry.RESULTSTATUS_HOOS;}else{return findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}else if(!isNaN(maxLoD)&&!isNaN(maxLOQ)&&isNaN(minLoD)&&isNaN(minLOQ)){if(result<=maxLoD&&result>=maxLOQ){return ResultEntry.RESULTSTATUS_HLOQ;}else if(result>maxLoD){return ResultEntry.RESULTSTATUS_HLOD;}else{return findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}else if(!isNaN(maxLoD)&&!isNaN(maxLOQ)&&!isNaN(minLoD)&&isNaN(minLOQ)){if(result<=maxLoD&&result>=maxLOQ){return ResultEntry.RESULTSTATUS_HLOQ;}else if(result>maxLoD){return ResultEntry.RESULTSTATUS_HLOD;}else if(result<minLoD){return ResultEntry.RESULTSTATUS_LLOD;}else if(result<minLoD&&result>maxB){return ResultEntry.RESULTSTATUS_HOOS;}else{return findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}else if(!isNaN(maxLoD)&&!isNaN(maxLOQ)&&!isNaN(minLOQ)&&isNaN(minLoD)){if(result<=maxLoD&&result>=maxLOQ){return ResultEntry.RESULTSTATUS_HLOQ;}else if(result>maxLoD){return ResultEntry.RESULTSTATUS_HLOD;}else if(result<minLOQ){return ResultEntry.RESULTSTATUS_LLOQ;}else if(result>minLOQ&&result<minB){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else{return findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}else{return findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result);}}/*export function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}*/export function findLOQandLOD(minLoD,maxLoD,minLOQ,maxLOQ,minA,maxA,minB,maxB,result){if(isNaN(minLoD)&&isNaN(maxLoD)&&isNaN(minLOQ)&&isNaN(maxLOQ)){return findGrade(minB,minA,maxA,maxB,result);}else if(!isNaN(minLoD)&&isNaN(maxLoD)&&isNaN(minLOQ)&&isNaN(maxLOQ)){if(result<minLoD){return ResultEntry.RESULTSTATUS_LLOD;}else if(result===minLoD){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result>minLoD&&result<minB){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result===minB){return ResultEntry.RESULTSTATUS_OOT;}else{return findGrade(minB,minA,maxA,maxB,result);}}else if(isNaN(minLoD)&&isNaN(maxLoD)&&!isNaN(minLOQ)&&isNaN(maxLOQ)){if(result<minLOQ){return ResultEntry.RESULTSTATUS_LLOQ;}else if(result===minLOQ){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result>minLOQ&&result<minB){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result===minB){return ResultEntry.RESULTSTATUS_OOT;}else{return findGrade(minB,minA,maxA,maxB,result);}}else if(isNaN(minLoD)&&isNaN(maxLoD)&&!isNaN(minLOQ)&&!isNaN(maxLOQ)){if(result<minLOQ){return ResultEntry.RESULTSTATUS_LLOQ;}else if(result===minLOQ){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result>minLOQ&&result<minB){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result===minB){return ResultEntry.RESULTSTATUS_OOT;}else if(result>maxLOQ){return ResultEntry.RESULTSTATUS_HLOQ;}else if(result===maxLOQ){return ResultEntry.RESULTSTATUS_HOOS;}else if(result<maxLOQ&&result>maxB){//return ResultEntry.RESULTSTATUS_BQL\nreturn ResultEntry.RESULTSTATUS_HOOS;}else if(result===maxB){return ResultEntry.RESULTSTATUS_HOOT;}else{return findGrade(minB,minA,maxA,maxB,result);}}else if(isNaN(minLoD)&&!isNaN(maxLoD)&&isNaN(minLOQ)&&isNaN(maxLOQ)){if(result>maxLoD){return ResultEntry.RESULTSTATUS_HLOD;}//  else if (result === maxLoD) {\n//     return ResultEntry.RESULTSTATUS_BQL\n// } \nelse if(result<maxLoD&&result>maxB){//return ResultEntry.RESULTSTATUS_BQL\nreturn ResultEntry.RESULTSTATUS_HOOS;}// else if (result === maxB) {\n//     return ResultEntry.RESULTSTATUS_OOT\n// } \nelse{return findGrade(minB,minA,maxA,maxB,result);}}else if(!isNaN(minLoD)&&!isNaN(maxLoD)&&isNaN(minLOQ)&&isNaN(maxLOQ)){if(result>maxLoD){return ResultEntry.RESULTSTATUS_HLOD;}else if(result===maxLoD){return ResultEntry.RESULTSTATUS_HLOQ;}else if(result<maxLoD&&result>maxB){//return ResultEntry.RESULTSTATUS_BQL\nreturn ResultEntry.RESULTSTATUS_HOOS;}else if(result===maxB){return ResultEntry.RESULTSTATUS_HOOT;}else if(result<minLoD){return ResultEntry.RESULTSTATUS_LLOD;}else if(result===minLoD){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result>minLoD&&result<minB){//return ResultEntry.RESULTSTATUS_BLOQ\nreturn ResultEntry.RESULTSTATUS_OOS;}else if(result===minB){return ResultEntry.RESULTSTATUS_OOT;}else{return findGrade(minB,minA,maxA,maxB,result);}}else if(isNaN(minLoD)&&isNaN(maxLoD)&&isNaN(minLOQ)&&!isNaN(maxLOQ)){if(result>maxLOQ){return ResultEntry.RESULTSTATUS_HLOQ;}else if(result===maxLOQ){return ResultEntry.RESULTSTATUS_HOOS;}else if(result<maxLOQ&&result>maxB){//return ResultEntry.RESULTSTATUS_BQL\nreturn ResultEntry.RESULTSTATUS_HOOS;}else if(result===maxB){return ResultEntry.RESULTSTATUS_HOOT;}else{return findGrade(minB,minA,maxA,maxB,result);}}/*else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD  \r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n    else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result > maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BQL\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    }\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result > maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BDL\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } */else{return findGrade(minB,minA,maxA,maxB,result);}}export function findGrade(minB,minA,maxA,maxB,result){if(isNaN(minA)&&isNaN(minB)&&isNaN(maxA)&&isNaN(maxB)){return ResultEntry.RESULTSTATUS_FIO;}else if(isNaN(minA)&&!isNaN(minB)&&isNaN(maxA)&&!isNaN(maxB)){if(result>=minB&&result<=maxB)return ResultEntry.RESULTSTATUS_PASS;// else if (result < minB || maxB < result)\n//     return ResultEntry.RESULTSTATUS_OOS;\nelse if(result<minB)return ResultEntry.RESULTSTATUS_OOS;else if(maxB<result)return ResultEntry.RESULTSTATUS_HOOS;else return ResultEntry.RESULTSTATUS_PASS;}else if(!isNaN(minA)&&isNaN(minB)&&!isNaN(maxA)&&isNaN(maxB)){if(result>=minA&&result<=maxA)return ResultEntry.RESULTSTATUS_PASS;else return ResultEntry.RESULTSTATUS_OOS;}else if(isNaN(minA)&&isNaN(minB)&&isNaN(maxA)&&!isNaN(maxB)){if(result<=maxB){return ResultEntry.RESULTSTATUS_PASS;}else if(result>maxB){// return ResultEntry.RESULTSTATUS_OOS;\nreturn ResultEntry.RESULTSTATUS_HOOS;}}else if(isNaN(minA)&&isNaN(minB)&&!isNaN(maxA)&&isNaN(maxB)){if(result<=maxA){return ResultEntry.RESULTSTATUS_PASS;}else if(result>maxA){// return ResultEntry.RESULTSTATUS_OOS;\nreturn ResultEntry.RESULTSTATUS_HOOS;}}else if(isNaN(minA)&&isNaN(minB)&&!isNaN(maxA)&&!isNaN(maxB)){if(result>maxA&&result<=maxB)return ResultEntry.RESULTSTATUS_OOS;else if(result>maxB)// return ResultEntry.RESULTSTATUS_OOT;\nreturn ResultEntry.RESULTSTATUS_HOOT;else if(result<maxA)return ResultEntry.RESULTSTATUS_PASS;}else if(isNaN(minA)&&!isNaN(minB)&&isNaN(maxA)&&isNaN(maxB)){if(result>=minB)return ResultEntry.RESULTSTATUS_PASS;else if(result<minB)return ResultEntry.RESULTSTATUS_OOS;}else if(isNaN(minA)&&!isNaN(minB)&&isNaN(maxA)&&!isNaN(maxB)){if(result>=minA&&result<=maxB)return ResultEntry.RESULTSTATUS_PASS;else if(result<minA)return ResultEntry.RESULTSTATUS_OOS;else if(result>maxB)// return ResultEntry.RESULTSTATUS_OOS;\nreturn ResultEntry.RESULTSTATUS_HOOS;}else if(isNaN(minA)&&!isNaN(minB)&&!isNaN(maxA)&&!isNaN(maxB)){if(result>=minB)return ResultEntry.RESULTSTATUS_PASS;else if(result>maxA&&result<=maxB)return ResultEntry.RESULTSTATUS_OOS;else if(result>maxB)// return ResultEntry.RESULTSTATUS_OOT;\nreturn ResultEntry.RESULTSTATUS_HOOT;else if(result<minB)return ResultEntry.RESULTSTATUS_OOT;}else if(!isNaN(minA)&&isNaN(minB)&&isNaN(maxA)&&isNaN(maxB)){if(result>=minA)return ResultEntry.RESULTSTATUS_PASS;else if(result<minA)return ResultEntry.RESULTSTATUS_OOS;}else if(!isNaN(minA)&&isNaN(minB)&&!isNaN(maxA)&&!isNaN(maxB)){if(result>=minA&&result<=maxA)return ResultEntry.RESULTSTATUS_PASS;else if(result>=minA&&result<=maxB)return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_OOT;}else if(isNaN(minA)&&!isNaN(minB)&&!isNaN(maxA)&&isNaN(maxB)){if(result>=minB&&result<=maxA)return ResultEntry.RESULTSTATUS_PASS;else if(result<minB)return ResultEntry.RESULTSTATUS_OOS;else if(result>maxA)// return ResultEntry.RESULTSTATUS_OOS;\nreturn ResultEntry.RESULTSTATUS_HOOS;}else if(isNaN(minA)&&!isNaN(minB)&&!isNaN(maxA)&&isNaN(maxB)){if(result>=minB&&result<=maxA)return ResultEntry.RESULTSTATUS_PASS;else if(result>maxA&&result<=maxB)return ResultEntry.RESULTSTATUS_OOS;// else if (result > maxB || result < minB)\n//     return ResultEntry.RESULTSTATUS_OOS;\nelse if(result>maxB)return ResultEntry.RESULTSTATUS_HOOS;else if(result<minB)return ResultEntry.RESULTSTATUS_OOS;}else if(!isNaN(minA)&&!isNaN(minB)&&isNaN(maxA)&&!isNaN(maxB)){if(result>=minB&&result<minA)return ResultEntry.RESULTSTATUS_OOS;else if(result<minB)return ResultEntry.RESULTSTATUS_OOS;else if(result>=minA)return ResultEntry.RESULTSTATUS_PASS;}else if(isNaN(minA)&&!isNaN(minB)&&isNaN(maxA)&&!isNaN(maxB)){if(result>=minB&&result<minA)return ResultEntry.RESULTSTATUS_OOS;else if(result>=minA&&result<=maxB)return ResultEntry.RESULTSTATUS_PASS;// else if (result > maxB || result < minB)\n//     return ResultEntry.RESULTSTATUS_OOT;\nelse if(result>maxB)return ResultEntry.RESULTSTATUS_HOOT;else if(result<minB)return ResultEntry.RESULTSTATUS_OOT;}else if(!isNaN(minA)&&!isNaN(minB)&&!isNaN(maxA)&&isNaN(maxB)){if(result>=minB&&result<minA)return ResultEntry.RESULTSTATUS_OOS;else if(result>=minA&&result<=maxA)return ResultEntry.RESULTSTATUS_PASS;else if(result<minB)return ResultEntry.RESULTSTATUS_OOT;else if(result>maxA)//return ResultEntry.RESULTSTATUS_OOT;\nreturn ResultEntry.RESULTSTATUS_HOOT;}else if(!isNaN(minA)&&!isNaN(minB)&&!isNaN(maxA)&&!isNaN(maxB)){if(result>=minA&&result<=maxA)return ResultEntry.RESULTSTATUS_PASS;// else if (result >= minB && result <= maxB)\n//     return ResultEntry.RESULTSTATUS_OOT;\nelse if(result>=minB&&result<minA)return ResultEntry.RESULTSTATUS_OOT;else if(result<=maxB&&result>maxA)return ResultEntry.RESULTSTATUS_HOOT;// else if ((result < minB || maxB < result) && (minB !== 0 && maxB !== 0))\n//     return ResultEntry.RESULTSTATUS_OOS;\nelse if(result<minB&&minB!==0)return ResultEntry.RESULTSTATUS_OOS;else if(maxB<result&&maxB!==0)return ResultEntry.RESULTSTATUS_HOOS;else return ResultEntry.RESULTSTATUS_PASS;}}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryValidation.jsx"],"names":["ResultEntry","numberConversion","number","rounding","Number","parseFloat","toFixed","numericGrade","parameter","sfinalresult","result","minA","smina","maxA","smaxa","minB","sminb","maxB","smaxb","minLoD","sminlod","maxLoD","smaxlod","minLOQ","sminloq","maxLOQ","smaxloq","disregard","sdisregard","RESULTSTATUS_BELOWDISREGARD","isNaN","RESULTSTATUS_LLOQ","RESULTSTATUS_LLOD","RESULTSTATUS_HLOQ","RESULTSTATUS_HLOD","findLOQandLOD","RESULTSTATUS_HOOS","RESULTSTATUS_OOS","findGrade","RESULTSTATUS_OOT","RESULTSTATUS_HOOT","RESULTSTATUS_FIO","RESULTSTATUS_PASS"],"mappings":"AAAA,OAASA,WAAT,KAA4B,8BAA5B,CAEA,MAAO,SAASC,CAAAA,gBAAT,CAA0BC,MAA1B,CAAkCC,QAAlC,CAA4C,CAC/C,MAAOC,CAAAA,MAAM,CAACC,UAAP,CAAkBH,MAAlB,EAA0BI,OAA1B,CAAkCH,QAAlC,CAAP,CACH,CAED,MAAO,SAASI,CAAAA,YAAT,CAAsBC,SAAtB,CAAiCC,YAAjC,CAA+C,CAClD,GAAIC,CAAAA,MAAM,CAAGL,UAAU,CAACI,YAAD,CAAvB,CACA,GAAIE,CAAAA,IAAI,CAAGN,UAAU,CAACG,SAAS,CAACI,KAAX,CAArB,CACA,GAAIC,CAAAA,IAAI,CAAGR,UAAU,CAACG,SAAS,CAACM,KAAX,CAArB,CACA,GAAIC,CAAAA,IAAI,CAAGV,UAAU,CAACG,SAAS,CAACQ,KAAX,CAArB,CACA,GAAIC,CAAAA,IAAI,CAAGZ,UAAU,CAACG,SAAS,CAACU,KAAX,CAArB,CACA,GAAIC,CAAAA,MAAM,CAAGd,UAAU,CAACG,SAAS,CAACY,OAAX,CAAvB,CACA,GAAIC,CAAAA,MAAM,CAAGhB,UAAU,CAACG,SAAS,CAACc,OAAX,CAAvB,CACA,GAAIC,CAAAA,MAAM,CAAGlB,UAAU,CAACG,SAAS,CAACgB,OAAX,CAAvB,CACA,GAAIC,CAAAA,MAAM,CAAGpB,UAAU,CAACG,SAAS,CAACkB,OAAX,CAAvB,CACA,GAAIC,CAAAA,SAAS,CAAGtB,UAAU,CAACG,SAAS,CAACoB,UAAX,CAA1B,CACA,GAAID,SAAS,GAAK,MAAd,EAAwBA,SAAS,CAAGlB,YAAxC,CAAsD,CAClD,MAAOT,CAAAA,WAAW,CAAC6B,2BAAnB,CACH,CACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAxBI,IAyBK,IAAI,CAACC,KAAK,CAACX,MAAD,CAAN,EAAkB,CAACW,KAAK,CAACP,MAAD,CAAxB,EAAoC,CAACO,KAAK,CAACT,MAAD,CAA1C,EAAsD,CAACS,KAAK,CAACL,MAAD,CAAhE,CAA0E,CAC3E,GAAIf,MAAM,EAAIS,MAAV,EAAoBT,MAAM,CAAGa,MAAjC,CAAyC,CACrC,MAAOvB,CAAAA,WAAW,CAAC+B,iBAAnB,CACH,CAFD,IAGK,IAAGrB,MAAM,EAAIS,MAAb,CACL,CACI,MAAOnB,CAAAA,WAAW,CAACgC,iBAAnB,CACH,CAHI,IAKA,IAAItB,MAAM,CAAGe,MAAT,EAAmBf,MAAM,EAAIW,MAAjC,CAAyC,CAC1C,MAAOrB,CAAAA,WAAW,CAACiC,iBAAnB,CACH,CAFI,IAGA,IAAGvB,MAAM,CAAGe,MAAZ,CACL,CACI,MAAOzB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CAHI,IAKA,CACD;AACA,MAAOC,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApB,CACH,CACJ,CArBI,IAuBA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,EAAkB,CAACW,KAAK,CAACP,MAAD,CAAxB,EAAoCO,KAAK,CAACL,MAAD,CAAzC,EAAqDK,KAAK,CAACT,MAAD,CAA9D,CAAwE,CACzE,GAAIX,MAAM,EAAIS,MAAV,EAAoBT,MAAM,EAAIa,MAAlC,CAA0C,CACtC,MAAOvB,CAAAA,WAAW,CAAC+B,iBAAnB,CACH,CAFD,IAGK,IAAGrB,MAAM,CAAGS,MAAZ,CACL,CACI,MAAOnB,CAAAA,WAAW,CAACgC,iBAAnB,CACH,CAHI,IAIA,CACD,MAAOG,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApB,CACH,CACJ,CAXI,IAcA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,EAAkB,CAACW,KAAK,CAACP,MAAD,CAAxB,EAAqC,CAACO,KAAK,CAACL,MAAD,CAA3C,EAAuDK,KAAK,CAACT,MAAD,CAAhE,CAA2E,CAC5E,GAAIX,MAAM,EAAIS,MAAV,EAAoBT,MAAM,EAAIa,MAAlC,CAA0C,CACtC,MAAOvB,CAAAA,WAAW,CAAC+B,iBAAnB,CACH,CAFD,IAGK,IAAGrB,MAAM,CAAGS,MAAZ,CACL,CACI,MAAOnB,CAAAA,WAAW,CAACgC,iBAAnB,CACH,CAHI,IAIA,IAAGtB,MAAM,CAAGe,MAAZ,CACL,CACI,MAAOzB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CAHI,IAIA,IAAGxB,MAAM,CAAGe,MAAT,EAAmBf,MAAM,CAAGO,IAA/B,CACL,CACI,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAHI,IAIA,CACD,MAAOD,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApB,CACH,CACJ,CAnBI,IAsBA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,EAAkB,CAACW,KAAK,CAACP,MAAD,CAAxB,EAAqC,CAACO,KAAK,CAACT,MAAD,CAA3C,EAAuDS,KAAK,CAACL,MAAD,CAAhE,CAA4E,CAC7E,GAAIf,MAAM,EAAIS,MAAV,EAAoBT,MAAM,EAAIa,MAAlC,CAA0C,CACtC,MAAOvB,CAAAA,WAAW,CAAC+B,iBAAnB,CACH,CAFD,IAGK,IAAGrB,MAAM,CAAGS,MAAZ,CACL,CACI,MAAOnB,CAAAA,WAAW,CAACgC,iBAAnB,CACH,CAHI,IAIA,IAAGtB,MAAM,CAAGW,MAAZ,CACL,CACI,MAAOrB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CAHI,IAIA,IAAGxB,MAAM,CAAGW,MAAT,EAAmBX,MAAM,CAAGO,IAA/B,CACL,CACI,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAHI,IAIA,CACD,MAAOD,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApB,CACH,CACJ,CAnBI,IAsBA,IAAI,CAACoB,KAAK,CAACT,MAAD,CAAN,EAAkB,CAACS,KAAK,CAACL,MAAD,CAAxB,EAAqCK,KAAK,CAACX,MAAD,CAA1C,EAAuDW,KAAK,CAAEP,MAAF,CAAhE,CAA4E,CAC7E,GAAIb,MAAM,EAAIW,MAAV,EAAoBX,MAAM,EAAIe,MAAlC,CAA0C,CACtC,MAAOzB,CAAAA,WAAW,CAACiC,iBAAnB,CACH,CAFD,IAGK,IAAGvB,MAAM,CAAGW,MAAZ,CACL,CACI,MAAOrB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CAHI,IAIA,CACD,MAAOC,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApB,CACH,CACJ,CAXI,IAcA,IAAI,CAACoB,KAAK,CAACT,MAAD,CAAN,EAAkB,CAACS,KAAK,CAACL,MAAD,CAAxB,EAAqC,CAACK,KAAK,CAACX,MAAD,CAA3C,EAAwDW,KAAK,CAAEP,MAAF,CAAjE,CAA6E,CAC9E,GAAIb,MAAM,EAAIW,MAAV,EAAoBX,MAAM,EAAIe,MAAlC,CAA0C,CACtC,MAAOzB,CAAAA,WAAW,CAACiC,iBAAnB,CACH,CAFD,IAGK,IAAGvB,MAAM,CAAGW,MAAZ,CACL,CACI,MAAOrB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CAHI,IAIA,IAAGxB,MAAM,CAAGS,MAAZ,CACL,CACI,MAAOnB,CAAAA,WAAW,CAACgC,iBAAnB,CACH,CAHI,IAIA,IAAGtB,MAAM,CAAGS,MAAT,EAAmBT,MAAM,CAAGO,IAA/B,CACL,CACI,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAHI,IAIA,CACD,MAAOD,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApB,CACH,CACJ,CAnBI,IAsBA,IAAI,CAACoB,KAAK,CAACT,MAAD,CAAN,EAAkB,CAACS,KAAK,CAACL,MAAD,CAAxB,EAAoC,CAACK,KAAK,CAACP,MAAD,CAA1C,EAAsDO,KAAK,CAACX,MAAD,CAA/D,CAAyE,CAC1E,GAAIT,MAAM,EAAIW,MAAV,EAAoBX,MAAM,EAAIe,MAAlC,CAA0C,CACtC,MAAOzB,CAAAA,WAAW,CAACiC,iBAAnB,CACH,CAFD,IAGK,IAAGvB,MAAM,CAAGW,MAAZ,CACL,CACI,MAAOrB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CAHI,IAKA,IAAGxB,MAAM,CAAGa,MAAZ,CACL,CACI,MAAOvB,CAAAA,WAAW,CAAC+B,iBAAnB,CACH,CAHI,IAIA,IAAIrB,MAAM,CAAGa,MAAT,EAAmBb,MAAM,CAAGK,IAAhC,CAAuC,CACxC;AACA,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHI,IAIA,CACD,MAAOF,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApB,CACH,CACJ,CApBI,IA0BA,CACD,MAAOyB,CAAAA,aAAa,CAAChB,MAAD,CAASE,MAAT,CAAiBE,MAAjB,CAAyBE,MAAzB,CAAiCd,IAAjC,CAAuCE,IAAvC,CAA6CE,IAA7C,CAAmDE,IAAnD,CAAyDP,MAAzD,CAApyB,CAAAA,aAAT,CAAuBhB,MAAvB,CAA+BE,MAA/B,CAAuCE,MAAvC,CAA+CE,MAA/C,CAAuDd,IAAvD,CAA6DE,IAA7D,CAAmEE,IAAnE,CAAyEE,IAAzE,CAA+EP,MAA/E,CAAuF,CAC1F,GAAIoB,KAAK,CAACX,MAAD,CAAL,EAAiBW,KAAK,CAACT,MAAD,CAAtB,EAAkCS,KAAK,CAACP,MAAD,CAAvC,EAAmDO,KAAK,CAACL,MAAD,CAA5D,CAAsE,CAClE,MAAOa,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhB,CACH,CAFD,IAKK,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,EAAkBW,KAAK,CAACT,MAAD,CAAvB,EAAmCS,KAAK,CAACP,MAAD,CAAxC,EAAoDO,KAAK,CAACL,MAAD,CAA7D,CAAuE,CACxE,GAAIf,MAAM,CAAGS,MAAb,CAAqB,CACjB,MAAOnB,CAAAA,WAAW,CAACgC,iBAAnB,CACH,CAFD,IAEO,IAAItB,MAAM,GAAKS,MAAf,CAAuB,CAC1B;AACA,MAAOnB,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHM,IAIF,IAAI3B,MAAM,CAAGS,MAAT,EAAmBT,MAAM,CAAGK,IAAhC,CAAuC,CACxC;AACA,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHI,IAIA,IAAI3B,MAAM,GAAKK,IAAf,CAAqB,CACtB,MAAOf,CAAAA,WAAW,CAACuC,gBAAnB,CACH,CAFI,IAGA,CACD,MAAOD,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhB,CACH,CACJ,CAjBI,IAoBA,IAAIoB,KAAK,CAACX,MAAD,CAAL,EAAiBW,KAAK,CAACT,MAAD,CAAtB,EAAkC,CAACS,KAAK,CAACP,MAAD,CAAxC,EAAoDO,KAAK,CAACL,MAAD,CAA7D,CAAuE,CACxE,GAAIf,MAAM,CAAGa,MAAb,CAAqB,CACjB,MAAOvB,CAAAA,WAAW,CAAC+B,iBAAnB,CACH,CAFD,IAEO,IAAIrB,MAAM,GAAKa,MAAf,CAAuB,CAC1B;AACA,MAAOvB,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHM,IAIF,IAAI3B,MAAM,CAAGa,MAAT,EAAmBb,MAAM,CAAGK,IAAhC,CAAuC,CACxC;AACA,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHI,IAIA,IAAI3B,MAAM,GAAKK,IAAf,CAAqB,CACtB,MAAOf,CAAAA,WAAW,CAACuC,gBAAnB,CACH,CAFI,IAGA,CACD,MAAOD,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhB,CACH,CACJ,CAjBI,IAoBA,IAAIoB,KAAK,CAACX,MAAD,CAAL,EAAiBW,KAAK,CAACT,MAAD,CAAtB,EAAkC,CAACS,KAAK,CAACP,MAAD,CAAxC,EAAoD,CAACO,KAAK,CAACL,MAAD,CAA9D,CAAwE,CACzE,GAAIf,MAAM,CAAGa,MAAb,CAAqB,CACjB,MAAOvB,CAAAA,WAAW,CAAC+B,iBAAnB,CACH,CAFD,IAEO,IAAIrB,MAAM,GAAKa,MAAf,CAAuB,CAC1B;AACA,MAAOvB,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHM,IAIF,IAAI3B,MAAM,CAAGa,MAAT,EAAmBb,MAAM,CAAGK,IAAhC,CAAuC,CACxC;AACA,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHI,IAIA,IAAI3B,MAAM,GAAKK,IAAf,CAAqB,CACtB,MAAOf,CAAAA,WAAW,CAACuC,gBAAnB,CACH,CAFI,IAGA,IAAI7B,MAAM,CAAGe,MAAb,CAAqB,CACtB,MAAOzB,CAAAA,WAAW,CAACiC,iBAAnB,CACH,CAFI,IAEE,IAAIvB,MAAM,GAAKe,MAAf,CAAuB,CAC1B,MAAOzB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAFM,IAGF,IAAI1B,MAAM,CAAGe,MAAT,EAAmBf,MAAM,CAAGO,IAAhC,CAAuC,CACxC;AACA,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAHI,IAIA,IAAI1B,MAAM,GAAKO,IAAf,CAAqB,CACtB,MAAOjB,CAAAA,WAAW,CAACwC,iBAAnB,CACH,CAFI,IAGA,CACD,MAAOF,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhB,CACH,CACJ,CA7BI,IA+BA,IAAIoB,KAAK,CAACX,MAAD,CAAL,EAAiB,CAACW,KAAK,CAACT,MAAD,CAAvB,EAAmCS,KAAK,CAACP,MAAD,CAAxC,EAAoDO,KAAK,CAACL,MAAD,CAA7D,CAAuE,CACxE,GAAIf,MAAM,CAAGW,MAAb,CAAqB,CACjB,MAAOrB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CACD;AACA;AACA;AALA,IAMK,IAAIxB,MAAM,CAAGW,MAAT,EAAmBX,MAAM,CAAGO,IAAhC,CAAuC,CACxC;AACA,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CACD;AACA;AACA;AANK,IAOA,CACD,MAAOE,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhB,CACH,CACJ,CAjBI,IAkBA,IAAI,CAACoB,KAAK,CAACX,MAAD,CAAN,EAAkB,CAACW,KAAK,CAACT,MAAD,CAAxB,EAAoCS,KAAK,CAACP,MAAD,CAAzC,EAAqDO,KAAK,CAACL,MAAD,CAA9D,CAAwE,CACzE,GAAIf,MAAM,CAAGW,MAAb,CAAqB,CACjB,MAAOrB,CAAAA,WAAW,CAACkC,iBAAnB,CACH,CAFD,IAEO,IAAIxB,MAAM,GAAKW,MAAf,CAAuB,CAC1B,MAAOrB,CAAAA,WAAW,CAACiC,iBAAnB,CACH,CAFM,IAGF,IAAIvB,MAAM,CAAGW,MAAT,EAAmBX,MAAM,CAAGO,IAAhC,CAAuC,CACxC;AACA,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAHI,IAIA,IAAI1B,MAAM,GAAKO,IAAf,CAAqB,CACtB,MAAOjB,CAAAA,WAAW,CAACwC,iBAAnB,CACH,CAFI,IAGA,IAAI9B,MAAM,CAAGS,MAAb,CAAqB,CACtB,MAAOnB,CAAAA,WAAW,CAACgC,iBAAnB,CACH,CAFI,IAEE,IAAItB,MAAM,GAAKS,MAAf,CAAuB,CAC1B;AACA,MAAOnB,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHM,IAIF,IAAI3B,MAAM,CAAGS,MAAT,EAAmBT,MAAM,CAAGK,IAAhC,CAAuC,CACxC;AACA,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CACH,CAHI,IAIA,IAAI3B,MAAM,GAAKK,IAAf,CAAqB,CACtB,MAAOf,CAAAA,WAAW,CAACuC,gBAAnB,CACH,CAFI,IAGA,CACD,MAAOD,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhB,CACH,CACJ,CA7BI,IAiCA,IAAIoB,KAAK,CAACX,MAAD,CAAL,EAAiBW,KAAK,CAACT,MAAD,CAAtB,EAAkCS,KAAK,CAACP,MAAD,CAAvC,EAAmD,CAACO,KAAK,CAACL,MAAD,CAA7D,CAAuE,CACxE,GAAIf,MAAM,CAAGe,MAAb,CAAqB,CACjB,MAAOzB,CAAAA,WAAW,CAACiC,iBAAnB,CACH,CAFD,IAEO,IAAIvB,MAAM,GAAKe,MAAf,CAAuB,CAC1B,MAAOzB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAFM,IAGF,IAAI1B,MAAM,CAAGe,MAAT,EAAmBf,MAAM,CAAGO,IAAhC,CAAuC,CACxC;AACA,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CAHI,IAIA,IAAI1B,MAAM,GAAKO,IAAf,CAAqB,CACtB,MAAOjB,CAAAA,WAAW,CAACwC,iBAAnB,CACH,CAFI,IAGA,CACD,MAAOF,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhrIS,IAqII,CACL,MAAO4B,CAAAA,SAAS,CAACvB,IAAD,CAAOJ,IAAP,CAAaE,IAAb,CAAmBI,IAAnB,CAAyBP,MAAzB,CAAhB,CACH,CACJ,CAED,MAAO,SAAS4B,CAAAA,SAAT,CAAmBvB,IAAnB,CAAyBJ,IAAzB,CAA+BE,IAA/B,CAAqCI,IAArC,CAA2CP,MAA3C,CAAmD,CACtD,GAAIoB,KAAK,CAACnB,IAAD,CAAL,EAAemB,KAAK,CAACf,IAAD,CAApB,EAA8Be,KAAK,CAACjB,IAAD,CAAnC,EAA6CiB,KAAK,CAACb,IAAD,CAAtD,CAA8D,CAC1D,MAAOjB,CAAAA,WAAW,CAACyC,gBAAnB,CACH,CAFD,IAEO,IAAIX,KAAK,CAACnB,IAAD,CAAL,EAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,EAA+Be,KAAK,CAACjB,IAAD,CAApC,EAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,CAAgE,CACnE,GAAIP,MAAM,EAAIK,IAAV,EAAkBL,MAAM,EAAIO,IAAhC,CACI,MAAOjB,CAAAA,WAAW,CAAC0C,iBAAnB,CACJ;AACA;AAHA,IAIK,IAAIhC,MAAM,CAAGK,IAAb,CACL,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CADK,IAEA,IAAIpB,IAAI,CAAGP,MAAX,CACL,MAAOV,CAAAA,WAAW,CAACoC,iBAAnB,CADK,IAGD,OAAOpC,CAAAA,WAAW,CAAC0C,iBAAnB,CACP,CAXM,IAWA,IAAI,CAACZ,KAAK,CAACnB,IAAD,CAAN,EAAgBmB,KAAK,CAACf,IAAD,CAArB,EAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,EAA+CiB,KAAK,CAACb,IAAD,CAAxD,CAAgE,CACnE,GAAIP,MAAM,EAAIC,IAAV,EAAkBD,MAAM,EAAIG,IAAhC,CACI,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAGI,OAAO1C,CAAAA,WAAW,CAACqC,gBAAnB,CACP,CALM,IAKA,IAAIP,KAAK,CAACnB,IAAD,CAAL,EAAemB,KAAK,CAACf,IAAD,CAApB,EAA8Be,KAAK,CAACjB,IAAD,CAAnC,EAA6C,CAACiB,KAAK,CAACb,IAAD,CAAvD,CAA+D,CAClE,GAAIP,MAAM,EAAIO,IAAd,CAAoB,CAChB,MAAOjB,CAAAA,WAAW,CAAC0C,iBAAnB,CACH,CAFD,IAEO,IAAIhC,MAAM,CAAGO,IAAb,CAAmB,CACtB;AACA,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CACJ,CAPM,IAOA,IAAIN,KAAK,CAACnB,IAAD,CAAL,EAAemB,KAAK,CAACf,IAAD,CAApB,EAA8B,CAACe,KAAK,CAACjB,IAAD,CAApC,EAA8CiB,KAAK,CAACb,IAAD,CAAvD,CAA+D,CAClE,GAAIP,MAAM,EAAIG,IAAd,CAAoB,CAChB,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CACH,CAFD,IAEO,IAAIhC,MAAM,CAAGG,IAAb,CAAmB,CACtB;AACA,MAAOb,CAAAA,WAAW,CAACoC,iBAAnB,CACH,CACJ,CAPM,IAOA,IAAIN,KAAK,CAACnB,IAAD,CAAL,EAAemB,KAAK,CAACf,IAAD,CAApB,EAA8B,CAACe,KAAK,CAACjB,IAAD,CAApC,EAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,CAAgE,CACnE,GAAIP,MAAM,CAAGG,IAAT,EAAiBH,MAAM,EAAIO,IAA/B,CACI,MAAOjB,CAAAA,WAAW,CAACqC,gBAAnB,CADJ,IAEK,IAAI3B,MAAM,CAAGO,IAAb,CACD;AACA,MAAOjB,CAAAA,WAAW,CAACwC,iBAAnB,CAFC,IAGA,IAAI9B,MAAM,CAAGG,IAAb,CACD,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CACP,CARM,IAQA,IAAIZ,KAAK,CAACnB,IAAD,CAAL,EAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,EAA+Be,KAAK,CAACjB,IAAD,CAApC,EAA8CiB,KAAK,CAACb,IAAD,CAAvD,CAA+D,CAClE,GAAIP,MAAM,EAAIK,IAAd,CACI,MAAOf,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAEK,IAAIhC,MAAM,CAAGK,IAAb,CACD,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CACP,CALM,IAKA,IAAIP,KAAK,CAACnB,IAAD,CAAL,EAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,EAA+Be,KAAK,CAACjB,IAAD,CAApC,EAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,CAAgE,CACnE,GAAIP,MAAM,EAAIC,IAAV,EAAkBD,MAAM,EAAIO,IAAhC,CACI,MAAOjB,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAEK,IAAIhC,MAAM,CAAGC,IAAb,CACD,MAAOX,CAAAA,WAAW,CAACqC,gBAAnB,CADC,IAEA,IAAI3B,MAAM,CAAGO,IAAb,CACD;AACA,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CACP,CARM,IAQA,IAAIN,KAAK,CAACnB,IAAD,CAAL,EAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,EAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,EAA+C,CAACiB,KAAK,CAACb,IAAD,CAAzD,CAAiE,CACpE,GAAIP,MAAM,EAAIK,IAAd,CACI,MAAOf,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAEK,IAAIhC,MAAM,CAAGG,IAAT,EAAiBH,MAAM,EAAIO,IAA/B,CACD,MAAOjB,CAAAA,WAAW,CAACqC,gBAAnB,CADC,IAEA,IAAI3B,MAAM,CAAGO,IAAb,CACD;AACA,MAAOjB,CAAAA,WAAW,CAACwC,iBAAnB,CAFC,IAGA,IAAI9B,MAAM,CAAGK,IAAb,CACD,MAAOf,CAAAA,WAAW,CAACuC,gBAAnB,CACP,CAVM,IAUA,IAAI,CAACT,KAAK,CAACnB,IAAD,CAAN,EAAgBmB,KAAK,CAACf,IAAD,CAArB,EAA+Be,KAAK,CAACjB,IAAD,CAApC,EAA8CiB,KAAK,CAACb,IAAD,CAAvD,CAA+D,CAClE,GAAIP,MAAM,EAAIC,IAAd,CACI,MAAOX,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAEK,IAAIhC,MAAM,CAAGC,IAAb,CACD,MAAOX,CAAAA,WAAW,CAACqC,gBAAnB,CACP,CALM,IAKA,IAAI,CAACP,KAAK,CAACnB,IAAD,CAAN,EAAgBmB,KAAK,CAACf,IAAD,CAArB,EAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,EAA+C,CAACiB,KAAK,CAACb,IAAD,CAAzD,CAAiE,CACpE,GAAIP,MAAM,EAAIC,IAAV,EAAkBD,MAAM,EAAIG,IAAhC,CACI,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAEK,IAAIhC,MAAM,EAAIC,IAAV,EAAkBD,MAAM,EAAIO,IAAhC,CACD,MAAOjB,CAAAA,WAAW,CAACqC,gBAAnB,CADC,IAGD,OAAOrC,CAAAA,WAAW,CAACuC,gBAAnB,CACP,CAPM,IAOA,IAAIT,KAAK,CAACnB,IAAD,CAAL,EAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,EAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,EAA+CiB,KAAK,CAACb,IAAD,CAAxD,CAAgE,CACnE,GAAIP,MAAM,EAAIK,IAAV,EAAkBL,MAAM,EAAIG,IAAhC,CACI,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAEK,IAAIhC,MAAM,CAAGK,IAAb,CACD,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CADC,IAEA,IAAI3B,MAAM,CAAGG,IAAb,CACD;AACA,MAAOb,CAAAA,WAAW,CAACoC,iBAAnB,CACP,CARM,IAQA,IAAIN,KAAK,CAACnB,IAAD,CAAL,EAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,EAA+B,CAACe,KAAK,CAACjB,IAAD,CAArC,EAA+CiB,KAAK,CAACb,IAAD,CAAxD,CAAgE,CACnE,GAAIP,MAAM,EAAIK,IAAV,EAAkBL,MAAM,EAAIG,IAAhC,CACI,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CADJ,IAEK,IAAIhC,MAAM,CAAGG,IAAT,EAAiBH,MAAM,EAAIO,IAA/B,CACD,MAAOjB,CAAAA,WAAW,CAACqC,gBAAnB,CACJ;AACA;AAHK,IAIA,IAAI3B,MAAM,CAAGO,IAAb,CACD,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CADC,IAEA,IAAI1B,MAAM,CAAGK,IAAb,CACD,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CACP,CAXM,IAWA,IAAI,CAACP,KAAK,CAACnB,IAAD,CAAN,EAAgB,CAACmB,KAAK,CAACf,IAAD,CAAtB,EAAgCe,KAAK,CAACjB,IAAD,CAArC,EAA+C,CAACiB,KAAK,CAACb,IAAD,CAAzD,CAAiE,CACpE,GAAIP,MAAM,EAAIK,IAAV,EAAkBL,MAAM,CAAGC,IAA/B,CACI,MAAOX,CAAAA,WAAW,CAACqC,gBAAnB,CADJ,IAEK,IAAI3B,MAAM,CAAGK,IAAb,CACD,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CADC,IAEA,IAAI3B,MAAM,EAAIC,IAAd,CACD,MAAOX,CAAAA,WAAW,CAAC0C,iBAAnB,CACP,CAPM,IAOA,IAAIZ,KAAK,CAACnB,IAAD,CAAL,EAAe,CAACmB,KAAK,CAACf,IAAD,CAArB,EAA+Be,KAAK,CAACjB,IAAD,CAApC,EAA8C,CAACiB,KAAK,CAACb,IAAD,CAAxD,CAAgE,CACnE,GAAIP,MAAM,EAAIK,IAAV,EAAkBL,MAAM,CAAGC,IAA/B,CACI,MAAOX,CAAAA,WAAW,CAACqC,gBAAnB,CADJ,IAEK,IAAI3B,MAAM,EAAIC,IAAV,EAAkBD,MAAM,EAAIO,IAAhC,CACD,MAAOjB,CAAAA,WAAW,CAAC0C,iBAAnB,CACJ;AACA;AAHK,IAIA,IAAIhC,MAAM,CAAGO,IAAb,CACL,MAAOjB,CAAAA,WAAW,CAACwC,iBAAnB,CADK,IAEA,IAAI9B,MAAM,CAAGK,IAAb,CACL,MAAOf,CAAAA,WAAW,CAACuC,gBAAnB,CACH,CAXM,IAWA,IAAI,CAACT,KAAK,CAACnB,IAAD,CAAN,EAAgB,CAACmB,KAAK,CAACf,IAAD,CAAtB,EAAgC,CAACe,KAAK,CAACjB,IAAD,CAAtC,EAAgDiB,KAAK,CAACb,IAAD,CAAzD,CAAiE,CACpE,GAAIP,MAAM,EAAIK,IAAV,EAAkBL,MAAM,CAAGC,IAA/B,CACI,MAAOX,CAAAA,WAAW,CAACqC,gBAAnB,CADJ,IAEK,IAAI3B,MAAM,EAAIC,IAAV,EAAkBD,MAAM,EAAIG,IAAhC,CACD,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CADC,IAEA,IAAIhC,MAAM,CAAGK,IAAb,CACD,MAAOf,CAAAA,WAAW,CAACuC,gBAAnB,CADC,IAEA,IAAI7B,MAAM,CAAGG,IAAb,CACD;AACA,MAAOb,CAAAA,WAAW,CAACwC,iBAAnB,CACP,CAVM,IAUA,IAAI,CAACV,KAAK,CAACnB,IAAD,CAAN,EAAgB,CAACmB,KAAK,CAACf,IAAD,CAAtB,EAAgC,CAACe,KAAK,CAACjB,IAAD,CAAtC,EAAgD,CAACiB,KAAK,CAACb,IAAD,CAA1D,CAAkE,CACrE,GAAIP,MAAM,EAAIC,IAAV,EAAkBD,MAAM,EAAIG,IAAhC,CACI,MAAOb,CAAAA,WAAW,CAAC0C,iBAAnB,CACJ;AACA;AAHA,IAIK,IAAIhC,MAAM,EAAIK,IAAV,EAAkBL,MAAM,CAAGC,IAA/B,CACD,MAAOX,CAAAA,WAAW,CAACuC,gBAAnB,CADC,IAEI,IAAI7B,MAAM,EAAIO,IAAV,EAAkBP,MAAM,CAACG,IAA7B,CACL,MAAOb,CAAAA,WAAW,CAACwC,iBAAnB,CACJ;AACA;AAHS,IAIJ,IAAK9B,MAAM,CAAGK,IAAV,EAAoBA,IAAI,GAAK,CAAjC,CACD,MAAOf,CAAAA,WAAW,CAACqC,gBAAnB,CADC,IAEC,IAAKpB,IAAI,CAAGP,MAAR,EAAoBO,IAAI,GAAK,CAAjC,CACD,MAAOjB,CAAAA,WAAW,CAACoC,iBAAnB,CADC,IAGF,OAAOpC,CAAAA,WAAW,CAAC0C,iBAAnB,CACP,CACJ","sourcesContent":["import { ResultEntry } from '../../components/Enumeration';\r\n\r\nexport function numberConversion(number, rounding) {\r\n    return Number.parseFloat(number).toFixed(rounding);\r\n}\r\n\r\nexport function numericGrade(parameter, sfinalresult) {\r\n    let result = parseFloat(sfinalresult);\r\n    let minA = parseFloat(parameter.smina);\r\n    let maxA = parseFloat(parameter.smaxa);\r\n    let minB = parseFloat(parameter.sminb);\r\n    let maxB = parseFloat(parameter.smaxb);\r\n    let minLoD = parseFloat(parameter.sminlod);\r\n    let maxLoD = parseFloat(parameter.smaxlod);\r\n    let minLOQ = parseFloat(parameter.sminloq);\r\n    let maxLOQ = parseFloat(parameter.smaxloq);\r\n    let disregard = parseFloat(parameter.sdisregard);\r\n    if (disregard !== \"null\" && disregard > sfinalresult) {\r\n        return ResultEntry.RESULTSTATUS_BELOWDISREGARD;\r\n    }\r\n    /* else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL;\r\n        }\r\n        else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n            if (result >= minLoD && result <= maxLoD) {\r\n                return ResultEntry.RESULTSTATUS_BDL;\r\n            }\r\n            else {\r\n                return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n            }\r\n        } else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n        if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } */\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ) && !isNaN(maxLoD) && !isNaN(maxLOQ)) {\r\n        if (result >= minLoD && result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result <= minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n\r\n        else if (result > maxLOQ && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLOQ)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n\r\n        else {\r\n            //return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ) && isNaN(maxLOQ) && isNaN(maxLoD)) {\r\n        if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ)  && !isNaN(maxLOQ) && isNaN(maxLoD))  {\r\n        if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else if(result > maxLOQ)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else if(result < maxLOQ && result > maxB)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (!isNaN(minLoD) && !isNaN(minLOQ)  && !isNaN(maxLoD) && isNaN(maxLOQ) )  {\r\n        if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else if(result < maxLoD && result > maxB)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    }\r\n\r\n\r\n    else if (!isNaN(maxLoD) && !isNaN(maxLOQ)  && isNaN(minLoD)  && isNaN (minLOQ) ) {\r\n        if (result <= maxLoD && result >= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (!isNaN(maxLoD) && !isNaN(maxLOQ)  && !isNaN(minLoD)  && isNaN (minLOQ) ) {\r\n        if (result <= maxLoD && result >= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n        else if(result < minLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOD;\r\n        }\r\n        else if(result < minLoD && result > maxB)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    }\r\n    \r\n\r\n    else if (!isNaN(maxLoD) && !isNaN(maxLOQ) && !isNaN(minLOQ) && isNaN(minLoD)) {\r\n        if (result <= maxLoD && result >= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ;\r\n        }\r\n        else if(result > maxLoD)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_HLOD;\r\n        }\r\n\r\n        else if(result < minLOQ)\r\n        {\r\n            return ResultEntry.RESULTSTATUS_LLOQ;\r\n        }\r\n        else if (result > minLOQ && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n\r\n\r\n    \r\n    else {\r\n        return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result);\r\n    }\r\n}\r\n\r\n\r\n/*export function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}*/\r\n\r\nexport function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } \r\n\r\n\r\n    else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_LLOD  \r\n        } else if (result === minLoD) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLoD && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ  \r\n        } else if (result === minLOQ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLOQ && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_LLOQ  \r\n        } else if (result === minLOQ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLOQ && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        } \r\n        else if (result > maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ  \r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result < maxLOQ && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result === maxB) {\r\n            return ResultEntry.RESULTSTATUS_HOOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    }\r\n\r\n    else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result > maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOD  \r\n        }\r\n        //  else if (result === maxLoD) {\r\n        //     return ResultEntry.RESULTSTATUS_BQL\r\n        // } \r\n        else if (result < maxLoD && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        // else if (result === maxB) {\r\n        //     return ResultEntry.RESULTSTATUS_OOT\r\n        // } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n    else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result > maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOD  \r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ\r\n        } \r\n        else if (result < maxLoD && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result === maxB) {\r\n            return ResultEntry.RESULTSTATUS_HOOT\r\n        } \r\n        else if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_LLOD  \r\n        } else if (result === minLoD) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result > minLoD && result < minB ) {\r\n            //return ResultEntry.RESULTSTATUS_BLOQ\r\n            return ResultEntry.RESULTSTATUS_OOS\r\n        } \r\n        else if (result === minB) {\r\n            return ResultEntry.RESULTSTATUS_OOT\r\n        }\r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n\r\n\r\n\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result > maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HLOQ  \r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result < maxLOQ && result > maxB ) {\r\n            //return ResultEntry.RESULTSTATUS_BQL\r\n            return ResultEntry.RESULTSTATUS_HOOS\r\n        } \r\n        else if (result === maxB) {\r\n            return ResultEntry.RESULTSTATUS_HOOT\r\n        } \r\n        else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    }\r\n\r\n\r\n    /*else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD  \r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } \r\n    else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result > maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BQL\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    }\r\n    else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result > maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BDL\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } */else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}\r\n\r\nexport function findGrade(minB, minA, maxA, maxB, result) {\r\n    if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        return ResultEntry.RESULTSTATUS_FIO;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        // else if (result < minB || maxB < result)\r\n        //     return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result < minB)\r\n        return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (maxB < result)\r\n        return ResultEntry.RESULTSTATUS_HOOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result <= maxB) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxB) {\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result <= maxA) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxA) {\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            // return ResultEntry.RESULTSTATUS_OOT;\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n        else if (result < maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            // return ResultEntry.RESULTSTATUS_OOT;\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxA)\r\n            // return ResultEntry.RESULTSTATUS_OOS;\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        // else if (result > maxB || result < minB)\r\n        //     return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_HOOS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        // else if (result > maxB || result < minB)\r\n        //     return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result > maxB)\r\n        return ResultEntry.RESULTSTATUS_HOOT;\r\n        else if (result < minB)\r\n        return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result > maxA)\r\n            //return ResultEntry.RESULTSTATUS_OOT;\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        // else if (result >= minB && result <= maxB)\r\n        //     return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n            else if (result <= maxB && result>maxA)\r\n            return ResultEntry.RESULTSTATUS_HOOT;\r\n        // else if ((result < minB || maxB < result) && (minB !== 0 && maxB !== 0))\r\n        //     return ResultEntry.RESULTSTATUS_OOS;\r\n        else if ((result < minB) && (minB !== 0))\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n         else if ((maxB < result) && (maxB !== 0))\r\n             return ResultEntry.RESULTSTATUS_HOOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}