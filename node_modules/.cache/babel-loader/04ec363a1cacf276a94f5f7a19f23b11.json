{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { comboChild, convertDateTimetoString, getSameRecordFromTwoArrays, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getComponentListfromUnwantedAttr, getRegistration, TestListManipulation } from './RegistrationValidation';\nimport SplitterLayout from 'react-splitter-layout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      selectedTestData: [],\n      parentSubSampleColumnList: []\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.state.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatoryFields.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }) : component.mandatory === true ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.state.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            this.setState({\n              selectedTestData: [],\n              loadSpec: false,\n              SelectedTest: [],\n              Test: [],\n              Component: [],\n              selectedSpec\n            }); // const updateInfo = {\n            //     typeName: DEFAULT_RETURN,\n            //     data: { selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [] }\n            // }\n            // this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData;\n      this.setState({\n        selectedTestData\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedTestData }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n      let product = false;\n      let productCategory = false;\n      let nproductcatcode = -1;\n      let nproductcode = -1;\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.name === 'Product') {\n        const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n        const ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\n        nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n\n        if (ncategorybasedflow !== 3) {\n          product = true;\n          nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n        }\n      } else if (control.name === 'Product Category') {\n        // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\n        const ncategorybasedflow = comboData && comboData['item']['ncategorybasedflow'];\n\n        if (ncategorybasedflow === 3) {\n          productCategory = true;\n        } else {\n          // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n          product = true;\n        }\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\"); // if (product) {\n        // }\n\n        const mapOfFilter = {\n          nproductcode,\n          nproductcatcode,\n          nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n        };\n        this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n      } else {\n        // if (productCategory) {\n        //     const ncategorybasedflow = selectedRecord[comboName] &&\n        //         selectedRecord[comboName].value;\n        // } else \n        if (product || productCategory) {\n          // const nproductcode = selectedRecord[comboName] &&\n          //     selectedRecord[comboName].value;\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getChildValues(inputParem, this.props.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        selectComponent[event.target.name] = event.target.checked;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      let parentList = [];\n      let childComboList = [];\n      let childColumnList = {};\n      let comboName = customName || control.label;\n      const selectComponent = this.state.selectComponent || {};\n      const inputParem = {\n        child: control.child,\n        source: control.source,\n        primarykeyField: control.valuemember,\n        value: comboData.value,\n        item: comboData.item,\n        label: comboName,\n        nameofdefaultcomp: control.name\n      };\n\n      if (comboData) {\n        selectComponent[comboName] = comboData;\n      } else {\n        selectComponent[comboName] = [];\n      }\n\n      if (control.child && control.child.length > 0) {\n        childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n        childColumnList = {};\n        childComboList.map(columnList => {\n          const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n        this.props.getChildValues(inputParem, this.props.userInfo, selectComponent, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList]);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      this.setState({\n        loadSpec: true\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSpec: true\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\n      if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n        delete selectedComponent[\"selected\"];\n        this.props.getTest(selectedComponent, this.props.Login, nneedsubsample, specBasedComponent);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: nneedsubsample === 3 ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      this.setState({\n        loadSpec: false,\n        selectedRecord: { ...this.state.selectedRecord,\n          ...this.state.selectedSpec\n        }\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSpec: false,\n      //         selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ? this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        if (nneedsubsample === 4) {\n          const selectComponent = this.state.selectComponent || {};\n\n          if (fieldName === 'ntzdreceivedate') {\n            selectComponent[\"ntzdreceivedate\"] = comboData;\n          } else {\n            // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n            // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n            //     //selectComponent[\"nneedservice\"] = true;\n            // }\n            selectComponent[fieldName] = comboData;\n            selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          }\n\n          this.setState({\n            selectComponent\n          }); // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: {\n          //         selectComponent\n          //     }\n          // }\n          // this.props.updateStore(updateInfo);\n        } else {\n          const selectComponent = this.state.selectComponent || {};\n          selectComponent[fieldName] = comboData; // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n\n          this.setState({\n            selectComponent\n          });\n        }\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        const userInfo = this.props.Login.userInfo;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\";\n        objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        objcomponent[\"jsondata\"] = {};\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ? {\n                      value: selectedComponent[componentrow.label].value,\n                      label: selectedComponent[componentrow.label].label\n                    } : -1;\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : new Date(), userInfo);\n                    } else {\n                      objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : new Date(), userInfo) : selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n                    }\n\n                    if (componentrow.timezone) {\n                      selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ? {\n                        value: selectedComponent[`tz${componentrow.label}`].value,\n                        label: selectedComponent[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                    } // dateList.push(componentrow.label)\n\n                  } else {\n                    objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ? selectedComponent[componentrow.label] : \"\";\n                  }\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ? {\n                    value: selectedComponent[component.label].value,\n                    label: selectedComponent[component.label].label\n                  } : -1;\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ? selectedComponent[component.label] : new Date(), userInfo);\n                  } else {\n                    objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(selectedComponent[component.label] ? selectedComponent[component.label] : new Date(), userInfo) : selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ? selectedComponent[component.label] : new Date(), userInfo) : \"\";\n                  }\n\n                  if (component.timezone) {\n                    objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ? {\n                      value: selectedComponent[`tz${component.label}`].value,\n                      label: selectedComponent[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  } //dateList.push(component.label)\n\n                } else {\n                  objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ? selectedComponent[component.label] : \"\";\n                }\n              }\n            });\n          });\n        });\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo; // inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      //  inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      //  inputData[\"userinfo\"] = this.props.Login.userInfo;\n      //   inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][componentrow.label]) : new Date();\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][component.label]) : new Date();\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n            }\n          });\n        });\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: \"SubSample\",\n          openChildModal: false,\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo); // this.props.editSubSample(inputData, objComponent, \n      //     this.props.Login.userInfo, specBasedComponent);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const Component = this.props.Login.Component;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = Component.findIndex(x => x.slno === dataItem.slno);\n\n      if (index > -1) {\n        Component.splice(index, 1);\n      }\n\n      Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n      SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: Component[0],\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      });\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest: Test[selectedComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          loadTest: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = specBasedComponent => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (SubSamplewithoutCombocomponent.length == 0 || data.length == 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              row.children.map(column => {\n                column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n                  }) : component.inputtype === \"combo\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      } else {\n        if (operation === \"create\") {\n          this.insertRegistration(true);\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENTNAME\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.subSampleDataGridList = [];\n    this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      row.children.map(column => {\n        column.children.map(component => {\n          return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n            if (componentrow.mandatory === true) {\n              this.subSampleDataGridList.push({\n                \"mandatory\": true,\n                \"idsName\": componentrow.label,\n                \"dataField\": componentrow.label\n              });\n            }\n          }) : component.mandatory === true ? this.subSampleDataGridList.push({\n            \"mandatory\": true,\n            \"idsName\": component.label,\n            \"dataField\": component.label\n          }) : \"\";\n        });\n      });\n    });\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.warn(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    const defaulttimezone = this.props.Login.defaulttimezone;\n    const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"jsondata\"] = {};\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? {\n                    value: objcomponent[componentrow.label].value,\n                    label: objcomponent[componentrow.label].label\n                  } : -1;\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo);\n                  } else {\n                    saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n                  }\n\n                  if (componentrow.timezone) {\n                    saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ? {\n                      value: objcomponent[`tz${componentrow.label}`].value,\n                      label: objcomponent[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  } // dateList.push(componentrow.label)\n\n                } else {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label] : \"\";\n                }\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? {\n                  value: objcomponent[component.label].value,\n                  label: objcomponent[component.label].label\n                } : -1;\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo);\n                } else {\n                  saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : \"\";\n                }\n\n                if (component.timezone) {\n                  saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ? {\n                    value: objcomponent[`tz${component.label}`].value,\n                    label: objcomponent[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                } //dateList.push(component.label)\n\n              } else {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label] : \"\";\n              }\n            }\n          });\n        });\n      });\n      saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      }); // let selectedComponent = this.props.Login.selectedComponent;\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n    const defaulttimezone = this.props.Login.defaulttimezone;\n    const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {};\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"jsondata\"] = {};\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? {\n                    value: objcomponent[componentrow.label].value,\n                    label: objcomponent[componentrow.label].label\n                  } : -1;\n                } else if (componentrow.inputtype === \"date\") {\n                  if (componentrow.mandatory) {\n                    saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo);\n                  } else {\n                    saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ? objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n                  }\n\n                  if (componentrow.timezone) {\n                    saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ? {\n                      value: objcomponent[`tz${componentrow.label}`].value,\n                      label: objcomponent[`tz${componentrow.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                  } // dateList.push(componentrow.label)\n\n                } else {\n                  saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label] : \"\";\n                }\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? {\n                  value: objcomponent[component.label].value,\n                  label: objcomponent[component.label].label\n                } : -1;\n              } else if (component.inputtype === \"date\") {\n                if (component.mandatory) {\n                  saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo);\n                } else {\n                  saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ? objcomponent[component.label] : new Date(), userInfo) : \"\";\n                }\n\n                if (component.timezone) {\n                  saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ? {\n                    value: objcomponent[`tz${component.label}`].value,\n                    label: objcomponent[`tz${component.label}`].label\n                  } : defaulttimezone ? defaulttimezone : -1;\n                } //dateList.push(component.label)\n\n              } else {\n                saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label] : \"\";\n              }\n            }\n          });\n        });\n      });\n      saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      });\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          selectComponent: objcomponent1,\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      row.children.map(column => {\n        column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let Test = this.props.Login.Test;\n    let Map = {};\n    Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n    Map[\"RegistrationSample\"] = this.props.Login.Component ? this.props.Login.Component : [];\n    Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\n    Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate); //formatDate(this.fromDate);\n\n    Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate); //formatDate(this.toDate);\n\n    Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n    Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n    Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n    Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n    Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n    Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\n    Map[\"checkBoxOperation\"] = 3;\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone);\n    Map[\"Registration\"] = param.sampleRegistration;\n    Map[\"DateList\"] = param.dateList;\n    Map[\"userinfo\"] = this.props.Login.userInfo;\n    Map[\"nflag\"] = 2;\n    Map[\"ntype\"] = 1;\n    Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n    Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n    Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n    const inputParam = {\n      inputData: Map,\n      postParamList: this.props.postParamList,\n      action: \"preregister\"\n    };\n    this.props.insertRegistration(inputParam, this.props.Login.masterData);\n  }\n\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    }\n\n    const testColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestsynonym\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_SECTION\",\n      \"dataField\": \"ssectionname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"ssourcename\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"smethodname\",\n      width: \"150px\"\n    }, {\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"sinstrumentcatname\",\n      width: \"200px\"\n    }];\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.state.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\",\n      className: this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1563,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1577,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1578,\n        columnNumber: 17\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1581,\n        columnNumber: 29\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583,\n        columnNumber: 33\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1587,\n        columnNumber: 45\n      }\n    }), \" \", this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1592,\n        columnNumber: 53\n      }\n    }) : \"\") : this.props.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1598,\n        columnNumber: 45\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.state.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1603,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1607,\n        columnNumber: 21\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1610,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1611,\n        columnNumber: 25\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1612,\n        columnNumber: 25\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1616,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1617,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1618,\n        columnNumber: 29\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1621,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1622,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1623,\n        columnNumber: 33\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1626,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1627,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1628,\n        columnNumber: 37\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1632,\n        columnNumber: 43\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1635,\n        columnNumber: 45\n      }\n    })) : this.props.hideSave ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1638,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1639,\n        columnNumber: 45\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1640,\n        columnNumber: 45\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1644,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1645,\n        columnNumber: 25\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1646,\n        columnNumber: 25\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1652,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1653,\n        columnNumber: 25\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1654,\n        columnNumber: 25\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1658,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1659,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1660,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1669,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1670,\n        columnNumber: 29\n      }\n    }, this.state.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedRecord: this.state.selectedRecord,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1673,\n        columnNumber: 41\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1686,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1691,\n        columnNumber: 49\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent // Unit={this.props.Login.Unit || []}\n      ,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      childoperation: this.props.Login.childoperation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1710,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut, {\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.nneedsubsample,\n      specBasedComponent: 4,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState //componentDataState={this.state.componentDataState}\n      ,\n      testDataStateChange: this.testDataStateChange //componentDataStateChange={this.componentDataStateChange}\n      ,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      onNumericInputChange: this.onNumericInputChange,\n      subSampleDataGridList: this.subSampleDataGridList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1731,\n        columnNumber: 55\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","transactionStatus","faCalculator","comboChild","convertDateTimetoString","getSameRecordFromTwoArrays","rearrangeDateFormat","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","AddComponentPopUp","AddSubSample","getComponentListfromUnwantedAttr","getRegistration","TestListManipulation","SplitterLayout","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","handleSaveClick","saveType","startLabel","label","mandatoryFields","loadComponent","loadSubSample","masterData","SubSampleTemplate","jsondata","map","row","children","column","component","hasOwnProperty","componentrow","mandatory","push","inputtype","loadTest","loadSpec","registrationTemplate","esign","forEach","item","dataField","undefined","alertMessage","alertPreFix","intl","formatMessage","id","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","info","validateEsign","setState","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","onComboChange","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","inputParem","child","source","primarykeyField","valuemember","value","nameofdefaultcomp","name","ProductCategory","comboComponents","filter","x","ncategorybasedflow","columnList","val","withoutCombocomponent","mapOfFilter","nsampletypecode","RealSampleTypeValue","userInfo","updateInfo","typeName","data","onInputOnChange","event","target","type","checked","onInputOnSubSampleChange","onComboSubSampleChange","onNumericInputChange","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","screenName","handleDateChange","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","selectedComponent","nneedsubsample","specBasedComponent","Object","keys","warn","closeSpec","closeComponent","closeTest","closeSubSample","selectedSubSample","onspecChange","oldpromarycode","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","userinfo","selectedNode","primaryKey","handleComponentRowClick","dataItem","slno","AddComponent","Map","nallottedspeccode","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","index","findIndex","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","SubSampleObjectAfterSave","SubSampleObject","defaulttimezone","Date","loadcurrentdate","timezone","editComponent","editselectedcomponent","inputData","objComponent","ChildscreenName","loading","deleteComponent","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","SubSamplecomboData","onUpdateRegistration","myRef","PrevoiusLoginData","componentColumnList","width","subSampleDataGridList","componentDidUpdate","previousProps","masterStatus","check","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","showSaveContinue","objcomponent1","findSubsampleDateList","subsampletemplate","dateList","Components","fromDate","toDate","RealRegSubTypeValue","nregsubtypecode","PREREGISTER","ndesigntemplatemappingcode","param","defaultTimeZone","sampleRegistration","activeSampleTab","activeTestTab","postParamList","action","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","testColumnList","className","openPortal","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","hideSave","showSave","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","TestCombined","myScrollRef","RealFilterStatusValue","lstComponent","timeZoneList","sreceiveddate","CurrentTime","userRoleControlRights","handleChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    comboChild, convertDateTimetoString,\r\n    getSameRecordFromTwoArrays, rearrangeDateFormat\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample, insertRegistration\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getComponentListfromUnwantedAttr,\r\n    getRegistration, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport SplitterLayout from 'react-splitter-layout';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENTNAME\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n\r\n        this.subSampleDataGridList = [];\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label })\r\n                                }\r\n                            })\r\n                            : component.mandatory === true ?\r\n                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label }) : \"\"\r\n                    })\r\n                })\r\n            })\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        selectedTestData: [],\r\n        parentSubSampleColumnList: []\r\n    }\r\n\r\n\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord\r\n\r\n        if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ? mandatoryFields.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.state.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                                if (componentrow.mandatory === true) {\r\n                                    mandatoryFields.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                }\r\n                            })\r\n                                : component.mandatory === true ? mandatoryFields.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.state.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n                    this.setState({\r\n                        selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    })\r\n                    // const updateInfo = {\r\n                    //     typeName: DEFAULT_RETURN,\r\n                    //     data: { selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [] }\r\n                    // }\r\n                    // this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        this.setState({ selectedTestData });\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedTestData }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let product = false;\r\n        let productCategory = false;\r\n        let nproductcatcode = -1\r\n        let nproductcode = -1\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.name === 'Product') {\r\n            const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n            const ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label]['item']['ncategorybasedflow'];\r\n            nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                selectedRecord[ProductCategory[0].label].value\r\n            if (ncategorybasedflow !== 3) {\r\n                product = true\r\n                nproductcode = selectedRecord[comboName] &&\r\n                    selectedRecord[comboName].value;\r\n            }\r\n\r\n        }\r\n        else if (control.name === 'Product Category') {\r\n            // const ProductCategory=comboComponents.filetr(x=>x.name===\"Product Category\");\r\n            const ncategorybasedflow = comboData &&\r\n                comboData['item']['ncategorybasedflow'];\r\n            if (ncategorybasedflow === 3) {\r\n                productCategory = true\r\n            } else {\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                product = true\r\n            }\r\n        }\r\n\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n\r\n\r\n\r\n            // if (product) {\r\n\r\n            // }\r\n\r\n            const mapOfFilter = {\r\n                nproductcode, nproductcatcode,\r\n                nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n            }\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectedRecord, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n        } else {\r\n\r\n            // if (productCategory) {\r\n            //     const ncategorybasedflow = selectedRecord[comboName] &&\r\n            //         selectedRecord[comboName].value;\r\n\r\n            // } else \r\n            if (product || productCategory) {\r\n                // const nproductcode = selectedRecord[comboName] &&\r\n                //     selectedRecord[comboName].value;\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\r\n                }\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter)\r\n            } else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            selectComponent[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        let parentList = []\r\n        let childComboList = []\r\n        let childColumnList = {}\r\n\r\n        let comboName = customName || control.label;\r\n        const selectComponent = this.state.selectComponent || {};\r\n        const inputParem = {\r\n            child: control.child,\r\n            source: control.source,\r\n            primarykeyField: control.valuemember,\r\n            value: comboData.value,\r\n            item: comboData.item,\r\n            label: comboName,\r\n            nameofdefaultcomp: control.name\r\n        }\r\n        if (comboData) {\r\n            selectComponent[comboName] = comboData;\r\n        } else {\r\n            selectComponent[comboName] = []\r\n        }\r\n        if (control.child && control.child.length > 0) {\r\n            childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                control.child, \"label\")\r\n            childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = comboChild(this.state.SubSamplecomboComponents,\r\n                    columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                control.child, \"label\")\r\n\r\n            this.props.getChildValues(inputParem,\r\n                this.props.userInfo, selectComponent, this.props.Login.comboData,\r\n                childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                [...childComboList, ...parentList])\r\n        } else {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n            this.setState({ selectedSpec: this.props.Login.selectedSpec });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.warn(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n    AddSpec = (e) => {\r\n        this.setState({\r\n            loadSpec: true\r\n        })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSpec: true\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, specBasedComponent) => {\r\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n            delete selectedComponent[\"selected\"];\r\n            this.props.getTest(selectedComponent, this.props.Login, nneedsubsample, specBasedComponent);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: nneedsubsample === 3 ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        this.setState({\r\n            loadSpec: false, selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\r\n        })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSpec: false,\r\n        //         selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec }\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n                this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            if (nneedsubsample === 4) {\r\n                const selectComponent = this.state.selectComponent || {};\r\n                if (fieldName === 'ntzdreceivedate') {\r\n                    selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                } else {\r\n                    // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                    // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                    //     //selectComponent[\"nneedservice\"] = true;\r\n                    // }\r\n                    selectComponent[fieldName] = comboData;\r\n                    selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n\r\n                }\r\n                this.setState({ selectComponent })\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: {\r\n                //         selectComponent\r\n                //     }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n            } else {\r\n                const selectComponent = this.state.selectComponent || {};\r\n                selectComponent[fieldName] = comboData;\r\n                // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n                this.setState({ selectComponent })\r\n            }\r\n        }\r\n\r\n    }\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            objcomponent[\"jsondata\"] = {}\r\n\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n                                            { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n                                                selectedComponent[componentrow.label] : new Date(), userInfo);\r\n                                        } else {\r\n                                            objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n                                                    selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n                                                selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n                                                    selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n                                                { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n                                        }\r\n                                        // dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n                                            selectedComponent[componentrow.label] : \"\"\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n                                        { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n                                            selectedComponent[component.label] : new Date(), userInfo);\r\n                                    } else {\r\n                                        objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(selectedComponent[component.label] ?\r\n                                                selectedComponent[component.label] : new Date(), userInfo) :\r\n                                            selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n                                                selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n                                            { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    //dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n                                        selectedComponent[component.label] : \"\"\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    })\r\n                })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"jsondata\"] = {}\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                objcomponent[componentrow.label] : new Date(), userInfo);\r\n                                        } else {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) :\r\n                                                objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n                                                { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n                                        }\r\n                                        // dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            objcomponent[componentrow.label] : \"\"\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n                                            objcomponent[component.label] : new Date(), userInfo);\r\n                                    } else {\r\n                                        saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) :\r\n                                            objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n                                            { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    //dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        objcomponent[component.label] : \"\"\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    })\r\n                })\r\n\r\n            saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"jsondata\"] = {}\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                objcomponent[componentrow.label] : new Date(), userInfo);\r\n                                        } else {\r\n                                            saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) :\r\n                                                objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n                                                    objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n                                                { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n                                        }\r\n                                        // dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n                                            objcomponent[componentrow.label] : \"\"\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n                                            objcomponent[component.label] : new Date(), userInfo);\r\n                                    } else {\r\n                                        saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) :\r\n                                            objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n                                                objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n                                            { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                    //dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n                                        objcomponent[component.label] : \"\"\r\n                                }\r\n                            }\r\n\r\n                        }\r\n                        )\r\n                    })\r\n                })\r\n\r\n            saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ?\r\n                this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, selectedComponent: saveComponent,\r\n                    selectComponent: objcomponent1,\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        // inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        //  inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        //  inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //   inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                row.children.map(column => {\r\n                    column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][componentrow.label]) : new Date();\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormat(userInfo, objComponent[\"jsondata\"][component.label]) : new Date();\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: true, childoperation: \"update\",\r\n                ChildscreenName: \"SubSample\",\r\n                openChildModal: false, selectComponent,\r\n                parentPopUpSize: \"lg\", loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.props.editSubSample(inputData, objComponent, \r\n        //     this.props.Login.userInfo, specBasedComponent);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const Component = this.props.Login.Component;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        const index = Component.findIndex(x => x.slno === dataItem.slno);\r\n        if (index > -1) {\r\n            Component.splice(index, 1);\r\n        }\r\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Component, selectedComponent: Component[0], Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n        selectedTestData.map((item) => {\r\n            return selectedTestArray.push(item.item);\r\n        });\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        let Test = this.props.Login.Test || [];\r\n\r\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n        //  ArrayTest.push(selectedTestArray);\r\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (SubSamplewithoutCombocomponent.length == 0 || data.length == 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        row.children.map(column => {\r\n                            column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                    })\r\n                                    : component.inputtype === \"combo\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData)\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n        else {\r\n            if (operation === \"create\") {\r\n                this.insertRegistration(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n}\r\n\r\ninsertRegistration() {\r\n    let Components = this.props.Login.Component;\r\n    let Test = this.props.Login.Test;\r\n    let Map = {};\r\n    Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n    Map[\"RegistrationSample\"] = this.props.Login.Component ? this.props.Login.Component : [];\r\n    Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n    Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n    Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n    Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n    Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n    Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n    Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n    Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n        && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n    Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.nneedsubsample;\r\n    Map[\"checkBoxOperation\"] = 3;\r\n\r\n\r\n    const param = getRegistration(this.props.Login.masterData,\r\n        this.state.selectedRecord, this.state.selectedSpec,\r\n        this.props.Login.masterData.registrationTemplate.jsondata,\r\n        this.props.Login.userInfo, this.props.Login.defaultTimeZone);\r\n    Map[\"Registration\"] = param.sampleRegistration\r\n    Map[\"DateList\"] = param.dateList\r\n\r\n    Map[\"userinfo\"] = this.props.Login.userInfo;\r\n    Map[\"nflag\"] = 2;\r\n    Map[\"ntype\"] = 1;\r\n    Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n    Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n    Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n    const inputParam = {\r\n        inputData: Map,\r\n        postParamList: this.props.postParamList,\r\n        action: \"preregister\"\r\n    }\r\n    this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n\r\n}\r\nonNumericInputChange = (value, name) => {\r\n    let selectedRecord = this.state.selectedRecord\r\n    selectedRecord[name] = value;\r\n    this.setState({ selectedRecord });\r\n}\r\n\r\nrender() {\r\n\r\n    let saveType = 1;\r\n    if (this.props.ignoreFormValidation) {\r\n        saveType = 5;\r\n    }\r\n    let buttonLabel = \"Save\";\r\n    let idsLabel = \"IDS_SAVE\";\r\n    if (this.props.buttonLabel) {\r\n        buttonLabel = this.props.buttonLabel;\r\n        idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n    }\r\n    const testColumnList = [\r\n        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n    return (\r\n        <Modal\r\n            size={this.props.Login.loadComponent ?\r\n                'lg' : this.state.loadSpec ? 'lg' :\r\n                    this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : 'xl'}\r\n            // size={this.props.templateData[0] ?\r\n            //     this.props.templateData[0].children ?\r\n            //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n            backdrop=\"static\"\r\n            className={this.props.className || \"\"}\r\n            show={this.props.Login.openPortal}\r\n            onHide={this.props.closeModal}\r\n            enforceFocus={false}\r\n            dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n            aria-labelledby=\"add-user\">\r\n            <Modal.Header className=\"d-flex align-items-center\">\r\n                <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                    {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                        this.props.Login.esign === true ?\r\n                            <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                            : this.props.loginoperation ?\r\n                                <FormattedMessage id={this.props.screenName} />\r\n                                : <>\r\n                                    {this.props.operation ?\r\n                                        <>\r\n                                            <FormattedMessage id={this.props.operation && \"IDS_\".concat(this.props.operation.toUpperCase())}\r\n                                                defaultMessage='Add' />\r\n                                            {\" \"}\r\n                                            {\r\n                                                this.props.screenName ?\r\n                                                    <FormattedMessage id={this.props.screenName} />\r\n                                                    : \"\"\r\n                                            }\r\n                                        </>\r\n                                        :\r\n                                        this.props.screenName ?\r\n                                            <FormattedMessage id={this.props.screenName} />\r\n                                            : \"\"}\r\n                                </>\r\n                        : \"\"}\r\n                </Modal.Title>\r\n                <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.state.loadSpec ?\r\n                    this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                        this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                            this.props.closeModal}>\r\n                    <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                </Button>\r\n                {this.props.esign === true ?\r\n                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                        <FontAwesomeIcon icon={faSave} /> { }\r\n                        <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                    </Button>\r\n                    :\r\n                    (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                        </Button> :\r\n                        this.props.showCalculate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                            </Button> :\r\n                            this.props.showParam === true && this.props.showExecute ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                    <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                    <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                </Button> :\r\n                                this.props.noSave || this.props.graphView ?\r\n                                    this.props.operation === \"view\" ? \"\"\r\n                                        : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                            onClick={this.props.resetView}\r\n                                        >\r\n                                            <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                        </Button>\r\n                                    : this.props.hideSave ? \"\" :\r\n                                        <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                            <FontAwesomeIcon icon={faSave} /> { }\r\n                                            <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                        </Button>\r\n                }\r\n                {this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue ?\r\n                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                        <FontAwesomeIcon icon={faSave} /> { }\r\n                        <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                    </Button>\r\n                    : \"\"\r\n                }\r\n                {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                    && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                        <FontAwesomeIcon icon={faSave} /> { }\r\n                        <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                    </Button>\r\n                    : \"\"}\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <ModalInner ref={this.myRef}>\r\n                    <Card.Body>\r\n                        {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                        <React.Fragment>\r\n                            <Form ref={this.formRef}>\r\n                                {\r\n                                    this.state.loadSpec ?\r\n                                        <AddSpecification\r\n                                            AgaramTree={this.props.Login.AgaramTree}\r\n                                            openNodes={this.props.Login.OpenNodes}\r\n                                            handleTreeClick={this.onTreeClick}\r\n                                            focusKey={this.props.Login.FocusKey}\r\n                                            activeKey={this.props.Login.ActiveKey}\r\n                                            Specification={this.props.Login.Specification}\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            selectedSpec={this.state.selectedSpec}\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            onSpecChange={this.onspecChange}\r\n                                        />\r\n                                        : this.props.Login.loadTest ?\r\n                                            <AddTest\r\n                                                TestCombined={this.props.Login.TestCombined || []}\r\n                                                TestChange={this.TestChange}\r\n                                                selectedTestData={this.props.Login.selectedTestData}\r\n                                            /> : this.props.Login.loadComponent ?\r\n                                                <AddComponentPopUp\r\n                                                    ref={this.myScrollRef}\r\n                                                    selectComponent={this.state.selectComponent || {}}\r\n                                                    RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                    RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                    RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                    RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                    formatMessage={this.props.intl.formatMessage}\r\n                                                    handleDateChange={this.handleDateChangeComp}\r\n                                                    Component={this.props.Login.lstComponent || []}\r\n                                                    onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                    // onComboChange={this.onComponentComboChange}\r\n                                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                                    onComponentChange={this.onComponentChange}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                    CurrentTime={this.props.Login.CurrentTime}\r\n                                                />\r\n                                                : this.props.Login.loadSubSample ?\r\n                                                    <AddSubSample\r\n                                                        Component={this.props.Login.lstComponent || []}\r\n                                                        selectComponent={this.state.selectComponent}\r\n                                                        // Unit={this.props.Login.Unit || []}\r\n                                                        onComponentChange={this.onComponentChange}\r\n                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                        templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                            this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                        handleDateChange={this.handleDateSubSampleChange}\r\n                                                        onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                        onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                        comboData={this.props.Login.SubSamplecomboData}\r\n                                                        onComboChange={this.onComboSubSampleChange}\r\n                                                        TestCombined={this.props.Login.TestCombined || []}\r\n                                                        TestChange={this.TestChange}\r\n                                                        selectedTestData={this.state.selectedTestData}\r\n                                                        childoperation={this.props.Login.childoperation}\r\n                                                    />\r\n                                                    : <RegisterSlideOut\r\n                                                        selectedSpec={this.state.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        selectedComponent={this.props.Login.selectedComponent}\r\n                                                        SelectedTest={this.props.Login.SelectedTest}\r\n                                                        selectedTestData={this.state.selectedTestData}\r\n                                                        userRoleControlRights={this.props.userRoleControlRights}\r\n                                                        templateData={this.props.Login.masterData.registrationTemplate &&\r\n                                                            this.props.Login.masterData.registrationTemplate.jsondata}\r\n                                                        handleChange={this.props.handleChange}\r\n                                                        handleDateChange={this.handleDateChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onNumericInputChange={this.onNumericInputChange}\r\n                                                        comboData={this.props.Login.comboData}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                        AddSpec={this.AddSpec}\r\n                                                        addTest={this.addTestslide}\r\n                                                        handleComponentRowClick={this.handleComponentRowClick}\r\n                                                        nneedsubsample={this.props.Login.masterData\r\n                                                            && this.props.Login.masterData.nneedsubsample}\r\n                                                        specBasedComponent={4}\r\n                                                        AddComponent={this.AddComponent}\r\n                                                        deleteComponent={this.deleteComponent}\r\n                                                        deleteTest={this.deleteTest}\r\n                                                        editComponent={this.editComponent}\r\n                                                        componentColumnList={this.componentColumnList}\r\n                                                        Component={this.props.Login.Component}\r\n                                                        TestChange={this.TestChange}\r\n                                                        testDataState={this.state.testDataState}\r\n                                                        subSampleDataState={this.state.subSampleDataState}\r\n                                                        //componentDataState={this.state.componentDataState}\r\n                                                        testDataStateChange={this.testDataStateChange}\r\n                                                        //componentDataStateChange={this.componentDataStateChange}\r\n                                                        subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                        addsubSample={this.addsubSample}\r\n                                                        editSubSample={this.editSubSample}\r\n                                                        onNumericInputChange={this.onNumericInputChange}\r\n                                                        subSampleDataGridList={this.subSampleDataGridList}\r\n\r\n                                                    />\r\n                                }\r\n                            </Form>\r\n                        </React.Fragment>\r\n                        {/* </SplitterLayout> */}\r\n                    </Card.Body>\r\n                </ModalInner>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n\r\n}\r\n\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}