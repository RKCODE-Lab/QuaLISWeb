{"ast":null,"code":"import React from'react';import{injectIntl}from'react-intl';import{Row,Col}from'react-bootstrap';import FormInput from'../../components/form-input/form-input.component';import FormTextarea from'../../components/form-textarea/form-textarea.component';// import MultiColumnComboSearch from '../../../components/multi-column-combo-search/multi-column-combo-search';\n//import FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\nimport DataGridWithSelection from'../../components/data-grid/DataGridWithSelection';var ResultEntryMean=function ResultEntryMean(props){console.log(\"props mean:\",props);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(DataGridWithSelection,{data:props.meanTestParameterList,selectAll:props.addSelectAll,title:props.intl.formatMessage({id:\"IDS_PARAMETER\"}),headerSelectionChange:props.headerSelectionChange,selectionChange:props.selectionChange,userInfo:props.userInfo,extractedColumnList:[{idsName:\"IDS_TEST\",dataField:\"stestsynonym\",width:\"350px\"},{idsName:\"IDS_REPEATRETEST\",dataField:\"sretestrepeatcount\",width:\"150px\"},{idsName:\"IDS_PARAMETER\",dataField:\"sparametersynonym\",width:\"350px\"},{idsName:\"IDS_RESULT\",dataField:\"sresult\",width:\"100px\"}]}),/*#__PURE__*/React.createElement(FormTextarea,{name:\"parametervalue\"//label={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}                    \n//placeholder={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}\n,value:props.selectedTestParam||\"\",rows:\"2\",readOnly:true//isMandatory={false}\n,required:false,maxLength:255,onChange:function onChange(event){return props.onInputOnChange(event);}}),/*#__PURE__*/React.createElement(FormInput,{name:\"testmean\",type:\"text\",label:props.intl.formatMessage({id:\"IDS_TESTMEAN\"}),placeholder:props.intl.formatMessage({id:\"IDS_TESTMEAN\"}),value:props.testMean||\"\",isMandatory:false,required:false,maxLength:10,isDisabled:true,onChange:function onChange(event){return props.onInputOnChange(event);}}))));};export default injectIntl(ResultEntryMean);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryMean.js"],"names":["React","injectIntl","Row","Col","FormInput","FormTextarea","DataGridWithSelection","ResultEntryMean","props","console","log","meanTestParameterList","addSelectAll","intl","formatMessage","id","headerSelectionChange","selectionChange","userInfo","idsName","dataField","width","selectedTestParam","event","onInputOnChange","testMean"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,UAAT,KAA2B,YAA3B,CACA,OAAQC,GAAR,CAAaC,GAAb,KAAuB,iBAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,kDAAtB,CACA,MAAOC,CAAAA,YAAP,KAAyB,wDAAzB,CACA;AACA;AACA,MAAOC,CAAAA,qBAAP,KAAkC,kDAAlC,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAU,CAC9BC,OAAO,CAACC,GAAR,CAAY,aAAZ,CAA2BF,KAA3B,EACG,mBAAQ,qDACJ,oBAAC,GAAD,mBACI,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eAgCS,oBAAC,qBAAD,EACQ,IAAI,CAAEA,KAAK,CAACG,qBADpB,CAEQ,SAAS,CAAEH,KAAK,CAACI,YAFzB,CAGQ,KAAK,CAAEJ,KAAK,CAACK,IAAN,CAAWC,aAAX,CAAyB,CAACC,EAAE,CAAC,eAAJ,CAAzB,CAHf,CAIQ,qBAAqB,CAAEP,KAAK,CAACQ,qBAJrC,CAKQ,eAAe,CAAER,KAAK,CAACS,eAL/B,CAMQ,QAAQ,CAAET,KAAK,CAACU,QANxB,CAOQ,mBAAmB,CAAE,CAAG,CAACC,OAAO,CAAC,UAAT,CAAqBC,SAAS,CAAC,cAA/B,CAA+CC,KAAK,CAAC,OAArD,CAAH,CACG,CAACF,OAAO,CAAC,kBAAT,CAA6BC,SAAS,CAAC,oBAAvC,CAA8DC,KAAK,CAAC,OAApE,CADH,CAEG,CAACF,OAAO,CAAC,eAAT,CAA0BC,SAAS,CAAC,mBAApC,CAA0DC,KAAK,CAAC,OAAhE,CAFH,CAGG,CAACF,OAAO,CAAC,YAAT,CAAuBC,SAAS,CAAC,SAAjC,CAA6CC,KAAK,CAAC,OAAnD,CAHH,CAP7B,EAhCT,cA6CK,oBAAC,YAAD,EACe,IAAI,CAAE,gBACN;AACA;AAHf,CAIe,KAAK,CAAIb,KAAK,CAACc,iBAAN,EAA4B,EAJpD,CAKe,IAAI,CAAC,GALpB,CAMe,QAAQ,CAAG,IACX;AAPf,CAQe,QAAQ,CAAE,KARzB,CASe,SAAS,CAAE,GAT1B,CAUe,QAAQ,CAAE,kBAACC,KAAD,QAAUf,CAAAA,KAAK,CAACgB,eAAN,CAAsBD,KAAtB,CAAV,EAVzB,EA7CL,cA0DS,oBAAC,SAAD,EACQ,IAAI,CAAE,UADd,CAEQ,IAAI,CAAC,MAFb,CAGQ,KAAK,CAAGf,KAAK,CAACK,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAC,cAAL,CAAzB,CAHhB,CAIQ,WAAW,CAAGP,KAAK,CAACK,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAC,cAAL,CAAzB,CAJtB,CAKQ,KAAK,CAAIP,KAAK,CAACiB,QAAN,EAAkB,EALnC,CAMQ,WAAW,CAAE,KANrB,CAOQ,QAAQ,CAAE,KAPlB,CAQQ,SAAS,CAAE,EARnB,CASQ,UAAU,CAAE,IATpB,CAUQ,QAAQ,CAAE,kBAACF,KAAD,QAAUf,CAAAA,KAAK,CAACgB,eAAN,CAAsBD,KAAtB,CAAV,EAVlB,EA1DT,CADJ,CADI,CAAR,CA6EH,CA/EJ,CAgFG,cAAetB,CAAAA,UAAU,CAACM,eAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\n// import MultiColumnComboSearch from '../../../components/multi-column-combo-search/multi-column-combo-search';\r\n//import FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\nimport DataGridWithSelection from '../../components/data-grid/DataGridWithSelection';\r\n\r\nconst ResultEntryMean = (props) =>{ \r\n    console.log(\"props mean:\", props);  \r\n       return (<>\r\n           <Row>\r\n               <Col md={12}>\r\n\r\n                        {/* {Object.keys(props.selectedMeanTestParam).length > 0 &&\r\n                            <MultiColumnComboSearch data={props.meanTestParameterList}\r\n                                visibility='show-all'\r\n                                labelledBy=\"IDS_MANUFACTURERNAME\"\r\n                                fieldToShow={[\"stestname\", \"sparametername\", \"sresult\"]}\r\n                                selectedId={props.selectedRecord[\"nproductmanufcode\"]}\r\n                                value={props.selectedRecord ? [props.selectedRecord] : []}\r\n                                isMandatory={true}\r\n                                showInputkey=\"smanufname\"\r\n                                idslabelfield={[\"IDS_TEST\", \"IDS_PARAMETER\", \"IDS_RESULT\"]}\r\n                                getValue={(value) => props.onMultiColumnValue(value, [\"nproductmanufcode\", \"nmanufcode\", \"nmanufsitecode\", \"smanufname\", \"smanufsitename\"], true, [\"seprotocolname\"], [\"neprotocolcode\"])}\r\n                                singleSelection={true}\r\n                            />\r\n                        } */}\r\n\r\n                    {/* <FormMultiSelect\r\n                            name={\"testparam\"}\r\n                            label={\"IDS_PARAMETER\"}\r\n                            options={props.meanTestParameterList || []}\r\n                           // optionId={\"value\"}\r\n                            //optionValue={\"label\"}\r\n                            constructedOption={true}                            \r\n                            value={props.selectedMeanTestParam ? props.selectedMeanTestParam[\"testparam\"] : \"\"}\r\n                            isMandatory={true}\r\n                            isClearable={true}\r\n                            disableSearch={false}\r\n                            disabled={false}\r\n                            closeMenuOnSelect={false}\r\n                            alphabeticalSort={true}\r\n                            onChange={(event) => props.onComboChange(event, \"testparam\")}  />    */}\r\n                        <DataGridWithSelection                               \r\n                                data={props.meanTestParameterList }\r\n                                selectAll={props.addSelectAll}\r\n                                title={props.intl.formatMessage({id:\"IDS_PARAMETER\"})}\r\n                                headerSelectionChange={props.headerSelectionChange}\r\n                                selectionChange={props.selectionChange}\r\n                                userInfo={props.userInfo}\r\n                                extractedColumnList={[  {idsName:\"IDS_TEST\", dataField:\"stestsynonym\", width:\"350px\"},\r\n                                                        {idsName:\"IDS_REPEATRETEST\", dataField:\"sretestrepeatcount\" , width:\"150px\"},\r\n                                                        {idsName:\"IDS_PARAMETER\", dataField:\"sparametersynonym\" , width:\"350px\"},\r\n                                                        {idsName:\"IDS_RESULT\", dataField:\"sresult\" , width:\"100px\"}]}                             \r\n                        /> \r\n\r\n                    <FormTextarea\r\n                                   name={\"parametervalue\"}\r\n                                   //label={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}                    \r\n                                   //placeholder={ props.intl.formatMessage({ id:\"IDS_NIBSCCOMMENTS\"})}\r\n                                   value ={ props.selectedTestParam  || \"\"}\r\n                                   rows=\"2\"\r\n                                   readOnly ={true}\r\n                                   //isMandatory={false}\r\n                                   required={false}\r\n                                   maxLength={255}\r\n                                   onChange={(event)=> props.onInputOnChange(event)}\r\n                                   />\r\n\r\n                        <FormInput\r\n                                name={\"testmean\"}\r\n                                type=\"text\"\r\n                                label={ props.intl.formatMessage({ id:\"IDS_TESTMEAN\"})}                        \r\n                                placeholder={ props.intl.formatMessage({ id:\"IDS_TESTMEAN\"})}\r\n                                value ={ props.testMean || \"\"}\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={10}\r\n                                isDisabled={true}\r\n                                onChange={(event)=> props.onInputOnChange(event)}\r\n                            />\r\n            </Col>              \r\n        </Row>   \r\n       \r\n      </>\r\n       )\r\n   }\r\n   export default injectIntl(ResultEntryMean);\r\n"]},"metadata":{},"sourceType":"module"}