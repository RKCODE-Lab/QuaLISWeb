{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\ReleaseTestAttachment.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { viewAttachment } from '../../actions';\nimport { connect } from 'react-redux';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { updateStore } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ReleaseTestAttachment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getSampleDetails = (event, ncontrolCode, operation) => {\n      const url = \"release/getActiveReleaseTestAttachmentById\";\n      let masterData = this.props.masterData; // let screenName = this.props.screenName;\n\n      const isInitialRender = true;\n\n      if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\n        if (operation === \"update\") {\n          let screenName = \"IDS_EDITRELEASETESTATTACHMENT\";\n          rsapi.post(url, {\n            \"ncoaparentcode\": event.editRow.ncoaparentcode,\n            \"npreregno\": event.editRow.npreregno,\n            \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\n            \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\n            \"nreleasetestattachmentcode\": event.editRow.nreleasetestattachmentcode,\n            \"userinfo\": this.props.userInfo\n          }).then(response => {\n            let responseData = response.data;\n\n            if (responseData.ntransactionstatus !== transactionStatus.RELEASED) {\n              let selectedReleaseTestAttachment = event.editRow;\n              let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\n              let sdescription = responseData && responseData.sdescription ? responseData.sdescription : \"\";\n              let sfilename = event.editRow && event.editRow.sfilename;\n              let npreregno;\n              let ntransactionsamplecode;\n              let ntransactiontestcode;\n              let sarno;\n              let ssamplearno;\n              let stestsynonym;\n              masterData.RegistrationArno.map(item => {\n                if (item.value === responseData.npreregno) {\n                  npreregno = item;\n                  sarno = item.label;\n                }\n              });\n              masterData.RegistrationSampleArno.map(item => {\n                if (item.value === responseData.ntransactionsamplecode) {\n                  ntransactionsamplecode = item;\n                  ssamplearno = item.label;\n                }\n              });\n              masterData.RegistrationTest.map(item => {\n                if (item.value === responseData.ntransactiontestcode) {\n                  ntransactiontestcode = item;\n                  stestsynonym = item.label;\n                }\n              });\n              let selectedRecord = { ...this.state.selectedRecord,\n                npreregno,\n                ntransactionsamplecode,\n                ntransactiontestcode,\n                sfilename,\n                sarno,\n                ssamplearno,\n                stestsynonym,\n                nneedreport,\n                sdescription,\n                selectedReleaseTestAttachment\n              };\n              masterData[\"selectedRecord\"] = selectedRecord;\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  isReleaseTestAttachment: false,\n                  isAddReleaseTestAttachment: true,\n                  masterData,\n                  operation,\n                  selectedRecord,\n                  screenName,\n                  ncontrolCode,\n                  isInitialRender\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_RECORDALREADYRELEASED\"\n              }));\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n\n            this.setState({\n              loading: false\n            });\n          });\n        } else {\n          let screenName = \"IDS_ADDRELEASETESTATTACHMENT\";\n          let RegistrationArno = this.props.masterData.RegistrationArno;\n          let selectedRecord = {\n            RegistrationArno: RegistrationArno,\n            ReleaseTestAttachmentDetails: this.props.masterData.ReleaseTestAttachmentDetails,\n            nneedreport: transactionStatus.NO\n          };\n          masterData[\"selectedRecord\"] = selectedRecord;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              isReleaseTestAttachment: false,\n              isAddReleaseTestAttachment: true,\n              masterData,\n              operation,\n              selectedRecord,\n              screenName,\n              ncontrolCode,\n              isInitialRender\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_RECORDALREADYRELEASED\"\n        }));\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const url = \"release/deleteReleaseTestAttachment\";\n\n      if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\n        let releasetestattachment = {\n          \"ncoaparentcode\": deleteParam.selectedRecord.ncoaparentcode,\n          \"npreregno\": deleteParam.selectedRecord.npreregno,\n          \"ntransactionsamplecode\": deleteParam.selectedRecord.ntransactionsamplecode,\n          \"ntransactiontestcode\": deleteParam.selectedRecord.ntransactiontestcode,\n          \"nreleasetestattachmentcode\": deleteParam.selectedRecord.nreleasetestattachmentcode\n        };\n        rsapi.post(url, {\n          releasetestattachment,\n          \"userinfo\": this.props.userInfo\n        }).then(response => {\n          let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n          let selectedRecord = { ...this.state.selectedRecord,\n            ...response.data\n          };\n          let masterData = this.props.masterData;\n          masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord,\n              ReleaseTestAttachmentDetails,\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n          this.setState({\n            selectedRecord,\n            ReleaseTestAttachmentDetails\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_RECORDALREADYRELEASED\"\n        }));\n      }\n    };\n\n    this.viewReleaseTestAttachmentFile = filedata => {\n      delete filedata.inputData.userinfo;\n      const inputParam = {\n        inputData: {\n          releasetestattachment: filedata.inputData,\n          userinfo: this.props.userInfo,\n          ncontrolcode: filedata.ncontrolCode\n        },\n        classUrl: \"release\",\n        operation: \"view\",\n        methodUrl: \"ReleaseTestAttachment\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      loading: false,\n      ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails,\n      dataState: dataState,\n      openModal: false,\n      inputParam: this.props.inputParam,\n      loadEsign: false,\n      operation: this.props.operation ? this.props.operation : \"\",\n      selectedRecord: this.props.selectedRecord,\n      isneedReport: this.props.isneedReport\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.ReleaseTestAttachmentDetails !== prevProps.ReleaseTestAttachmentDetails) {\n      this.setState({\n        ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails\n      });\n    }\n\n    if (this.props.inputParam !== prevProps.inputParam) {\n      this.setState({\n        inputParam: this.props.inputParam\n      });\n    }\n\n    if (this.props.selectedRecord !== prevProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    if (this.props.operation !== prevProps.operation) {\n      this.setState({\n        operation: this.props.operation\n      });\n    }\n  }\n\n  render() {\n    const addReleaseTestAttachment = this.props.controlMap.has(\"AddReleaseTestAttachment\") && this.props.controlMap.get(\"AddReleaseTestAttachment\").ncontrolcode;\n    const editReleaseTestAttachment = this.props.controlMap.has(\"EditReleaseTestAttachment\") && this.props.controlMap.get(\"EditReleaseTestAttachment\").ncontrolcode;\n    const editReleaseTestAttachmentParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_RELEASETESTATTACHMENT\"\n      }),\n      operation: \"update\",\n      primaryKeyField: \"nreleasetestattachmentcode\",\n      inputParam: this.state.inputParam,\n      userInfo: this.props.userInfo,\n      ncontrolCode: editReleaseTestAttachment\n    };\n    this.fieldsForReleasedTestAttachmentGrid = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INCULDEINREPORT\",\n      \"dataField\": \"sneedreport\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLENAME\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CREATEDDATE\",\n      \"dataField\": \"screateddate\",\n      \"width\": \"200px\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nreleasetestattachmentcode\",\n      data: this.state.ReleaseTestAttachmentDetails || [],\n      dataResult: process(this.state.ReleaseTestAttachmentDetails && this.state.ReleaseTestAttachmentDetails || [], this.props.dataState),\n      dataState: this.props.dataState,\n      isExportExcelRequired: false,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userInfo: this.props.userInfo,\n      editParam: editReleaseTestAttachmentParam,\n      extractedColumnList: this.fieldsForReleasedTestAttachmentGrid,\n      pageable: true,\n      dataStateChange: this.props.dataStateChange,\n      scrollable: 'scrollable',\n      gridHeight: '630px',\n      isActionRequired: true,\n      addRecord: event => this.getSampleDetails(event, addReleaseTestAttachment, \"create\"),\n      isToolBarRequired: true,\n      methodUrl: 'ReleaseTestAttachment',\n      isAddRequired: this.props.isAddRequired,\n      isRefreshRequired: this.props.isRefreshRequired,\n      isImportRequired: this.props.isImportRequired,\n      isDownloadPDFRequired: this.props.isDownloadPDFRequired,\n      isDownloadExcelRequired: this.props.isDownloadExcelRequired,\n      fetchRecord: event => {\n        this.getSampleDetails(event, editReleaseTestAttachment, \"update\");\n      },\n      deleteRecord: this.props.deleteRecord,\n      viewDownloadFile: this.viewReleaseTestAttachmentFile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  viewAttachment,\n  updateStore\n})(injectIntl(ReleaseTestAttachment));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/release/ReleaseTestAttachment.jsx"],"names":["React","Col","Row","injectIntl","transactionStatus","viewAttachment","connect","DataGrid","process","rsapi","toast","updateStore","DEFAULT_RETURN","mapStateToProps","state","Login","ReleaseTestAttachment","Component","constructor","props","getSampleDetails","event","ncontrolCode","operation","url","masterData","isInitialRender","selectedReleaseHistory","ntransactionstatus","RELEASED","screenName","post","editRow","ncoaparentcode","npreregno","ntransactionsamplecode","ntransactiontestcode","nreleasetestattachmentcode","userInfo","then","response","responseData","data","selectedReleaseTestAttachment","nneedreport","NO","sdescription","sfilename","sarno","ssamplearno","stestsynonym","RegistrationArno","map","item","value","label","RegistrationSampleArno","RegistrationTest","selectedRecord","updateInfo","typeName","isReleaseTestAttachment","isAddReleaseTestAttachment","warn","intl","formatMessage","id","catch","error","status","message","setState","loading","ReleaseTestAttachmentDetails","deleteRecord","deleteParam","releasetestattachment","viewReleaseTestAttachmentFile","filedata","inputData","userinfo","inputParam","ncontrolcode","classUrl","methodUrl","dataState","skip","take","settings","parseInt","openModal","loadEsign","isneedReport","componentDidUpdate","prevProps","render","addReleaseTestAttachment","controlMap","has","get","editReleaseTestAttachment","editReleaseTestAttachmentParam","primaryKeyField","fieldsForReleasedTestAttachmentGrid","userRoleControlRights","dataStateChange","isAddRequired","isRefreshRequired","isImportRequired","isDownloadPDFRequired","isDownloadExcelRequired"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { viewAttachment } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { updateStore } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass ReleaseTestAttachment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            loading: false,\r\n            ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails,\r\n            dataState: dataState,\r\n            openModal: false,\r\n            inputParam: this.props.inputParam,\r\n            loadEsign: false,\r\n            operation: this.props.operation ? this.props.operation : \"\",\r\n            selectedRecord: this.props.selectedRecord,\r\n            isneedReport: this.props.isneedReport\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.ReleaseTestAttachmentDetails !== prevProps.ReleaseTestAttachmentDetails) {\r\n            this.setState({ ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails })\r\n        }\r\n        if (this.props.inputParam !== prevProps.inputParam) {\r\n            this.setState({ inputParam: this.props.inputParam })\r\n        }\r\n        if (this.props.selectedRecord !== prevProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord })\r\n        }\r\n        if (this.props.operation !== prevProps.operation) {\r\n            this.setState({ operation: this.props.operation })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const addReleaseTestAttachment =\r\n            this.props.controlMap.has(\"AddReleaseTestAttachment\") &&\r\n            this.props.controlMap.get(\"AddReleaseTestAttachment\").ncontrolcode;\r\n\r\n        const editReleaseTestAttachment =\r\n            this.props.controlMap.has(\"EditReleaseTestAttachment\") &&\r\n            this.props.controlMap.get(\"EditReleaseTestAttachment\").ncontrolcode;\r\n\r\n        const editReleaseTestAttachmentParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTATTACHMENT\" }),\r\n            operation: \"update\", primaryKeyField: \"nreleasetestattachmentcode\",\r\n            inputParam: this.state.inputParam,\r\n            userInfo: this.props.userInfo,\r\n            ncontrolCode: editReleaseTestAttachment\r\n        };\r\n\r\n        this.fieldsForReleasedTestAttachmentGrid =\r\n            [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLENAME\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_CREATEDDATE\", \"dataField\": \"screateddate\", \"width\": \"200px\" },\r\n\r\n            ]\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <DataGrid\r\n                            primaryKeyField=\"nreleasetestattachmentcode\"\r\n                            data={this.state.ReleaseTestAttachmentDetails || []}\r\n                            dataResult={process(this.state.ReleaseTestAttachmentDetails && this.state.ReleaseTestAttachmentDetails || [], this.props.dataState)}\r\n                            dataState={this.props.dataState}\r\n                            isExportExcelRequired={false}\r\n                            controlMap={this.props.controlMap}\r\n                            userRoleControlRights={this.props.userRoleControlRights}\r\n                            userInfo={this.props.userInfo}\r\n                            editParam={editReleaseTestAttachmentParam}\r\n                            extractedColumnList={this.fieldsForReleasedTestAttachmentGrid}\r\n                            pageable={true}\r\n                            dataStateChange={this.props.dataStateChange}\r\n                            scrollable={'scrollable'}\r\n                            gridHeight={'630px'}\r\n                            isActionRequired={true}\r\n                            addRecord={(event) => this.getSampleDetails(event, addReleaseTestAttachment, \"create\")}\r\n                            isToolBarRequired={true}\r\n                            methodUrl={'ReleaseTestAttachment'}\r\n                            isAddRequired={this.props.isAddRequired}\r\n                            isRefreshRequired={this.props.isRefreshRequired}\r\n                            isImportRequired={this.props.isImportRequired}\r\n                            isDownloadPDFRequired={this.props.isDownloadPDFRequired}\r\n                            isDownloadExcelRequired={this.props.isDownloadExcelRequired}\r\n                            fetchRecord={(event) => { this.getSampleDetails(event, editReleaseTestAttachment, \"update\") }}\r\n                            deleteRecord={this.props.deleteRecord}\r\n                            viewDownloadFile={this.viewReleaseTestAttachmentFile}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    };\r\n\r\n    getSampleDetails = (event, ncontrolCode, operation) => {\r\n        const url = \"release/getActiveReleaseTestAttachmentById\";\r\n        let masterData = this.props.masterData;\r\n        // let screenName = this.props.screenName;\r\n        const isInitialRender = true;\r\n        if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\r\n            if (operation === \"update\") {\r\n                let screenName = \"IDS_EDITRELEASETESTATTACHMENT\";\r\n                rsapi.post(url, {\r\n                    \"ncoaparentcode\": event.editRow.ncoaparentcode,\r\n                    \"npreregno\": event.editRow.npreregno,\r\n                    \"ntransactionsamplecode\": event.editRow.ntransactionsamplecode,\r\n                    \"ntransactiontestcode\": event.editRow.ntransactiontestcode,\r\n                    \"nreleasetestattachmentcode\": event.editRow.nreleasetestattachmentcode,\r\n                    \"userinfo\": this.props.userInfo\r\n                })\r\n                    .then(response => {\r\n                        let responseData = response.data;\r\n                        if (responseData.ntransactionstatus !== transactionStatus.RELEASED) {\r\n                            let selectedReleaseTestAttachment = event.editRow;\r\n                            let nneedreport = responseData && responseData.nneedreport ? responseData.nneedreport : transactionStatus.NO;\r\n                            let sdescription = responseData && responseData.sdescription ? responseData.sdescription : \"\";\r\n                            let sfilename = event.editRow && event.editRow.sfilename;\r\n                            let npreregno;\r\n                            let ntransactionsamplecode;\r\n                            let ntransactiontestcode;\r\n                            let sarno;\r\n                            let ssamplearno;\r\n                            let stestsynonym;\r\n                            masterData.RegistrationArno.map(item => {\r\n                                if (item.value === responseData.npreregno) {\r\n                                    npreregno = item;\r\n                                    sarno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationSampleArno.map(item => {\r\n                                if (item.value === responseData.ntransactionsamplecode) {\r\n                                    ntransactionsamplecode = item;\r\n                                    ssamplearno = item.label;\r\n                                }\r\n                            });\r\n                            masterData.RegistrationTest.map(item => {\r\n                                if (item.value === responseData.ntransactiontestcode) {\r\n                                    ntransactiontestcode = item;\r\n                                    stestsynonym = item.label;\r\n                                }\r\n                            });\r\n                            let selectedRecord = {\r\n                                ...this.state.selectedRecord, npreregno, ntransactionsamplecode, ntransactiontestcode, sfilename, sarno, ssamplearno, stestsynonym, nneedreport, sdescription, selectedReleaseTestAttachment\r\n                            };\r\n                            masterData[\"selectedRecord\"] = selectedRecord;\r\n                            const updateInfo = {\r\n                                typeName: DEFAULT_RETURN,\r\n                                data: { isReleaseTestAttachment: false, isAddReleaseTestAttachment: true, masterData, operation, selectedRecord, screenName, ncontrolCode, isInitialRender }\r\n                            }\r\n                            this.props.updateStore(updateInfo);\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n                        }\r\n                    }).catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                        this.setState({\r\n                            loading: false\r\n                        });\r\n                    });\r\n            } else {\r\n                let screenName = \"IDS_ADDRELEASETESTATTACHMENT\"\r\n                let RegistrationArno = this.props.masterData.RegistrationArno;\r\n                let selectedRecord = {\r\n                    RegistrationArno: RegistrationArno,\r\n                    ReleaseTestAttachmentDetails: this.props.masterData.ReleaseTestAttachmentDetails,\r\n                    nneedreport: transactionStatus.NO\r\n                };\r\n                masterData[\"selectedRecord\"] = selectedRecord;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { isReleaseTestAttachment: false, isAddReleaseTestAttachment: true, masterData, operation, selectedRecord, screenName, ncontrolCode, isInitialRender }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const url = \"release/deleteReleaseTestAttachment\";\r\n        if (this.props.masterData.selectedReleaseHistory.ntransactionstatus !== transactionStatus.RELEASED) {\r\n            let releasetestattachment = {\r\n                \"ncoaparentcode\": deleteParam.selectedRecord.ncoaparentcode,\r\n                \"npreregno\": deleteParam.selectedRecord.npreregno,\r\n                \"ntransactionsamplecode\": deleteParam.selectedRecord.ntransactionsamplecode,\r\n                \"ntransactiontestcode\": deleteParam.selectedRecord.ntransactiontestcode,\r\n                \"nreleasetestattachmentcode\": deleteParam.selectedRecord.nreleasetestattachmentcode\r\n            }\r\n            rsapi.post(url, {\r\n                releasetestattachment, \"userinfo\": this.props.userInfo\r\n            })\r\n                .then(response => {\r\n                    let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n                    let selectedRecord = {\r\n                        ...this.state.selectedRecord, ...response.data\r\n                    };\r\n                    let masterData = this.props.masterData;\r\n                    masterData[\"ReleaseTestAttachmentDetails\"] = ReleaseTestAttachmentDetails;\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord, ReleaseTestAttachmentDetails, masterData }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    this.setState({\r\n                        selectedRecord, ReleaseTestAttachmentDetails\r\n                    });\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_RECORDALREADYRELEASED\" }));\r\n        }\r\n    }\r\n\r\n    viewReleaseTestAttachmentFile = (filedata) => {\r\n        delete (filedata.inputData.userinfo);\r\n        const inputParam = {\r\n            inputData: {\r\n                releasetestattachment: filedata.inputData,\r\n                userinfo: this.props.userInfo,\r\n                ncontrolcode: filedata.ncontrolCode\r\n            },\r\n            classUrl: \"release\",\r\n            operation: \"view\",\r\n            methodUrl: \"ReleaseTestAttachment\",\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { viewAttachment, updateStore })(injectIntl(ReleaseTestAttachment));"]},"metadata":{},"sourceType":"module"}