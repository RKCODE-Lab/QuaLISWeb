{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\Technique\\\\Technique.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, filterColumnData, getTechniqueDetail, getEditTechniqueService, getAddTestService } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\nimport { process } from '@progress/kendo-data-query';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\nimport AddType1Component from '../../../components/type1component/AddType1Component';\nimport Esign from '../../audittrail/Esign';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport AddTechniqueTest from './AddTechniqueTest';\nimport rsapi from '../../../rsapi';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Technique extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.confirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTechnique(\"Technique\", this.props.Login.masterData.SelectedTechnique, \"delete\", deleteId));\n    };\n\n    this.deleteTechnique = (methodUrl, SelectedTechnique, operation, ncontrolCode) => {\n      const postParam = {\n        inputListName: \"Technique\",\n        selectedObject: \"SelectedTechnique\",\n        primaryKeyField: \"ntechniquecode\",\n        primaryKeyValue: SelectedTechnique.ntechniquecode,\n        fetchUrl: \"technique/getTechnique\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl,\n        postParam,\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          \"technique\": SelectedTechnique\n        },\n        operation,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_TECHNIQUE\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteTechniqueTest = deleteParam => {\n      let postParam = {\n        inputListName: \"techniquetest\",\n        selectedObject: \"TechniqueTest\",\n        primaryKeyField: \"ntestcode\",\n        primaryKeyValue: deleteParam.selectedRecord.ntestcode,\n        fetchUrl: \"technique/getTechniqueTest\",\n        fecthInputObject: {\n          ntechniquecode: this.props.Login.masterData.SelectedTechnique.ntechniquecode,\n          userinfo: this.props.Login.userInfo\n        },\n        masterData: this.props.Login.masterData\n      };\n      const inputParam = {\n        classUrl: \"technique\",\n        methodUrl: \"TechniqueTest\",\n        inputData: {\n          \"techniquetest\": deleteParam.selectedRecord,\n          //.dataItem,\n          \"ntechniquecode\": this.props.Login.masterData.SelectedTechnique.ntechniquecode,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\",\n        postParam,\n        testDataState: this.state.testDataState\n      };\n      rsapi.post(\"technique/getTechniqueConducted\", {\n        \"ntechniquecode\": this.props.Login.masterData.SelectedTechnique.ntechniquecode,\n        userinfo: this.props.Login.userInfo\n      }).then(response => {\n        if (response.data !== null && response.data.length > 0) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_TESTTRAININGCONDUCTED\"\n          })); // dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \n          //     openChildModal:false,\n          //     operation, screenName, ncontrolCode,\n          //     loading:false}});\n        } else {\n          rsapi.post(\"technique/getTechniqueScheduled\", {\n            \"ntechniquecode\": this.props.Login.masterData.SelectedTechnique.ntechniquecode,\n            userinfo: this.props.Login.userInfo\n          }).then(response => {\n            if (response.data !== null && response.data.length > 0) {\n              //this.confirmMessage = new ConfirmMessage();\n              this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n                id: \"IDS_DELETE\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_TESTTRAININGSCHEDULED\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => {\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n                  const updateInfo = {\n                    typeName: DEFAULT_RETURN,\n                    data: {\n                      loadEsign: true,\n                      screenData: {\n                        inputParam,\n                        masterData: this.props.Login.masterData\n                      },\n                      openModal: true,\n                      screenName: this.props.intl.formatMessage({\n                        id: \"IDS_TEST\"\n                      }),\n                      operation: deleteParam.operation\n                    }\n                  };\n                  this.props.updateStore(updateInfo);\n                } else {\n                  this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n                }\n              });\n            } else {\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n                const updateInfo = {\n                  typeName: DEFAULT_RETURN,\n                  data: {\n                    loadEsign: true,\n                    screenData: {\n                      inputParam,\n                      masterData: this.props.Login.masterData\n                    },\n                    openModal: true,\n                    screenName: this.props.intl.formatMessage({\n                      id: \"IDS_TEST\"\n                    }),\n                    operation: deleteParam.operation\n                  }\n                };\n                this.props.updateStore(updateInfo);\n              } else {\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n              }\n            }\n          });\n        }\n      });\n    };\n\n    this.onSaveTechniqueTest = (saveType, formRef) => {\n      const techniqueTestData = {\n        \"userinfo\": this.props.Login.userInfo,\n        \"technique\": this.props.Login.masterData.SelectedTechnique,\n        \"ntechniquecode\": this.props.Login.masterData.SelectedTechnique.ntechniquecode\n      };\n      let postParam = undefined;\n      let techniquetestDataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {} else {\n        //add                                                 \n        let techniquetestList = [];\n        this.state.selectedRecord[\"ntestcode\"] && this.state.selectedRecord[\"ntestcode\"].map(item => {\n          return techniquetestList.push({\n            ntestcode: item.value\n          });\n        });\n        techniqueTestData[\"techniquetestlist\"] = techniquetestList;\n      }\n\n      if (techniqueTestData[\"technique\"].hasOwnProperty('esignpassword')) {\n        if (techniqueTestData[\"technique\"]['esignpassword'] === '') {\n          delete techniqueTestData[\"technique\"]['esigncomments'];\n          delete techniqueTestData[\"technique\"]['esignpassword'];\n          delete techniqueTestData[\"technique\"]['esignreason'];\n          delete techniqueTestData[\"technique\"][\"agree\"];\n        }\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"TechniqueTest\",\n        inputData: techniqueTestData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isClearSearch: this.props.Login.isClearSearch,\n        selectedId,\n        techniquetestDataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let techniqueData = [];\n      techniqueData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        //postParam = { inputListName: \"Technique\", selectedObject: \"SelectedTechnique\", primaryKeyField: \"ntechniquecode\" };\n        postParam = {\n          inputListName: \"Technique\",\n          selectedObject: \"SelectedTechnique\",\n          primaryKeyField: \"ntechniquecode\",\n          primaryKeyValue: this.props.Login.selectedRecord.ntechniquecode,\n          fetchUrl: \"technique/getActiveTechniqueById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData\n        };\n        techniqueData[\"technique\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n        techniqueData[\"stechniquename\"] = this.state.selectedRecord[\"stechniquename\"] || \"\";\n        techniqueData[\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] || \"\";\n      } else {\n        //add               \n        techniqueData[\"technique\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\n          \"stechniquename\": this.state.selectedRecord[\"stechniquename\"] || \"\",\n          \"sdescription\": this.state.selectedRecord[\"sdescription\"] || \"\"\n        };\n      }\n\n      if (techniqueData[\"technique\"].hasOwnProperty('esignpassword')) {\n        if (techniqueData[\"technique\"]['esignpassword'] === '') {\n          delete techniqueData[\"technique\"]['esigncomments'];\n          delete techniqueData[\"technique\"]['esignpassword'];\n          delete techniqueData[\"technique\"]['esignreason'];\n        }\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Technique\",\n        inputData: techniqueData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.openModal = inputParam => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: inputParam.operation,\n          ncontrolCode: inputParam.ncontrolcode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.intl.formatMessage({\n            id: 'IDS_TECHNIQUE'\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        testDataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.state.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n\n          if (this.props.Login.screenName === \"IDS_TEST\") {\n            openChildModal = false;\n          }\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n        openChildModal = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, primaryFieldKey) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"technique\",\n        methodUrl: \"Technique\",\n        displayName: \"IDS_TECHNIQUE\",\n        userInfo: this.props.Login.userInfo,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      this.props.callService(inputParam);\n    };\n\n    const testDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      SelectedTechnique: undefined,\n      screenName: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      isClearSearch: false,\n      data: [],\n      dataResult: [],\n      testDataState: testDataState\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.techniqueFieldList = [{\n      \"idsName\": \"IDS_TECHNIQUE\",\n      \"dataField\": \"stechniquename\",\n      \"width\": \"200px\",\n      \"fieldLength\": \"100\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\",\n      \"fieldLength\": \"255\",\n      \"mandatory\": false,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textarea\"\n    }];\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestname\",\n      \"width\": \"200px\"\n    }];\n    this.mandatoryFields = [{\n      \"idsName\": \"IDS_TECHNIQUE\",\n      \"dataField\": \"stechniquename\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    this.mandatoryTestFields = [{\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"ntestcode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.searchFieldList = [\"stechniquename\", \"sdescription\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    // let versionStatusCSS = \"outline-secondary\";\n    // let activeIconCSS = \"fa fa-check\"\n    // if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.APPROVED) {\n    //     versionStatusCSS = \"outline-success\";\n    // }\n    // else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.RETIRED) {\n    //     versionStatusCSS = \"outline-danger\";\n    //     activeIconCSS = \"\";\n    // }\n    // else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {\n    //     activeIconCSS = \"\";\n    // }\n    const addId = this.state.controlMap.has(\"AddTechnique\") && this.state.controlMap.get(\"AddTechnique\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditTechnique\") && this.state.controlMap.get(\"EditTechnique\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteTechnique\") && this.state.controlMap.get(\"DeleteTechnique\").ncontrolcode;\n    const addTechniqueTestId = this.state.controlMap.has(\"AddTechniqueTest\") && this.state.controlMap.get(\"AddTechniqueTest\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"Technique\",\n      selectedObject: \"SelectedTechnique\",\n      primaryKeyField: \"ntechniquecode\",\n      fetchUrl: \"technique/getTechnique\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const addParam = {\n      screenName: \"IDS_TECHNIQUE\",\n      operation: \"create\",\n      primaryKeyName: \"ntechniquecode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId\n    };\n    const editParam = {\n      screenName: \"IDS_TECHNIQUE\",\n      operation: \"update\",\n      primaryKeyName: \"ntechniquecode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      inputListName: \"Technique\",\n      selectedObject: \"SelectedTechnique\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TECHNIQUE\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Technique,\n      getMasterDetail: technique => this.props.getTechniqueDetail(technique, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedTechnique,\n      primaryKeyField: \"ntechniquecode\",\n      mainField: \"stechniquename\",\n      firstField: \"\",\n      secondField: \"\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.openModal(addParam),\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.Technique && this.props.Login.masterData.Technique.length > 0 && this.props.Login.masterData.SelectedTechnique ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedTechnique.stechniquename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editTechnique\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: () => this.props.getEditTechniqueService(editParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteTechnique\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 65\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedTechnique.sdescription)))), /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 51\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"addTechniqueTest\",\n      className: \"add-txt-btn\",\n      hidden: this.state.userRoleControlRights.indexOf(addTechniqueTestId) === -1,\n      onClick: () => this.props.getAddTestService(\"IDS_TEST\", \"create\", this.props.Login.masterData, this.props.Login.userInfo, addTechniqueTestId, this.confirmMessage),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 69\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TEST\",\n      defaultMessage: \"Test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 69\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"ntechniquetestcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.testDataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteTechniqueTest,\n      deleteParam: {\n        operation: \"delete\"\n      },\n      methodUrl: \"TechniqueTest\",\n      addRecord: () => this.openModal(addId),\n      pageable: true,\n      scrollable: 'scrollable',\n      isActionRequired: true,\n      isToolBarRequired: false,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 65\n      }\n    })))))) : \"\"))))), this.props.Login.openModal || this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.screenName === \"IDS_TEST\" ? this.props.Login.openChildModal : this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.Login.screenName === \"IDS_TEST\" ? this.onSaveTechniqueTest : this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_TEST\" ? this.props.Login.operation === \"update\" ? [] : this.mandatoryTestFields : this.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 25\n        }\n      }) : this.props.Login.openChildModal && this.props.Login.screenName === \"IDS_TEST\" ? /*#__PURE__*/React.createElement(AddTechniqueTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        techniqueTestList: this.props.Login.techniqueTestList || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddType1Component, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        extractedColumnList: this.techniqueFieldList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.Test,\n          dataResult: process(this.props.Login.masterData.TechniqueTest || [], this.state.testDataState)\n        });\n      } else {\n        let {\n          testDataState\n        } = this.state;\n\n        if (this.props.Login.testDataState === undefined) {\n          testDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData.TechniqueTest,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData.TechniqueTest || [], testDataState),\n          testDataState\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  getTechniqueDetail,\n  getEditTechniqueService,\n  getAddTestService,\n  updateStore,\n  filterColumnData\n})(injectIntl(Technique));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/competencemanagement/Technique/Technique.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faTrashAlt","faPlus","DataGrid","callService","crudMaster","validateEsignCredential","updateStore","filterColumnData","getTechniqueDetail","getEditTechniqueService","getAddTestService","DEFAULT_RETURN","showEsign","getControlMap","process","transactionStatus","ListMaster","SlideOutModal","ReadOnlyText","ContentPanel","AddType1Component","Esign","ConfirmMessage","AddTechniqueTest","rsapi","mapStateToProps","state","Login","Technique","Component","constructor","props","confirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","deleteTechnique","masterData","SelectedTechnique","methodUrl","operation","ncontrolCode","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","ntechniquecode","fetchUrl","fecthInputObject","userinfo","userInfo","inputParam","classUrl","inputData","isClearSearch","userRoleControlRights","nformcode","updateInfo","typeName","data","loadEsign","screenData","openModal","screenName","deleteTechniqueTest","deleteParam","selectedRecord","ntestcode","testDataState","post","then","response","length","warn","onSaveTechniqueTest","saveType","formRef","techniqueTestData","undefined","techniquetestDataState","selectedId","techniquetestList","map","item","push","value","hasOwnProperty","searchRef","onSaveClick","techniqueData","JSON","parse","stringify","nmastersitecode","ncontrolcode","dataStateChange","event","setState","dataResult","dataState","closeModal","openChildModal","onComboChange","comboData","fieldName","onNumericInputOnChange","name","onInputOnChange","primaryFieldKey","target","type","checked","ACTIVE","DEACTIVE","YES","NO","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","reloadData","current","displayName","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","createRef","techniqueFieldList","extractedColumnList","mandatoryFields","mandatoryTestFields","searchFieldList","getDerivedStateFromProps","render","addId","has","get","editId","addTechniqueTestId","filterParam","addParam","primaryKeyName","editParam","searchedData","technique","stechniquename","indexOf","sdescription","techniqueTestList","componentDidUpdate","previousProps","Object","values","Test","TechniqueTest","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faPlus} from '@fortawesome/free-solid-svg-icons';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, filterColumnData,getTechniqueDetail,getEditTechniqueService,getAddTestService\r\n   } from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\n\r\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\r\nimport AddType1Component from '../../../components/type1component/AddType1Component';\r\nimport Esign from '../../audittrail/Esign';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport AddTechniqueTest from './AddTechniqueTest';\r\nimport rsapi from '../../../rsapi';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Technique extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const testDataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            SelectedTechnique: undefined,\r\n            screenName: undefined,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            isClearSearch: false,\r\n            data: [], \r\n            dataResult: [],\r\n            testDataState: testDataState,\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n       \r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n       \r\n        this.techniqueFieldList = [\r\n            { \"idsName\": \"IDS_TECHNIQUE\", \"dataField\": \"stechniquename\", \"width\": \"200px\",\"fieldLength\":\"100\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" , \"fieldLength\":\"255\",\"mandatory\": false , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textarea\"},\r\n            ]\r\n        this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\"},\r\n                \r\n               ]\r\n        this.mandatoryFields = [ { \"idsName\": \"IDS_TECHNIQUE\", \"dataField\": \"stechniquename\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n                                    ];\r\n        this.mandatoryTestFields = [ { \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestcode\", \"width\": \"200px\",\"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                ];\r\n        this.searchFieldList = [\"stechniquename\", \"sdescription\"];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        // let versionStatusCSS = \"outline-secondary\";\r\n        // let activeIconCSS = \"fa fa-check\"\r\n        // if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.APPROVED) {\r\n        //     versionStatusCSS = \"outline-success\";\r\n        // }\r\n        // else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.RETIRED) {\r\n        //     versionStatusCSS = \"outline-danger\";\r\n        //     activeIconCSS = \"\";\r\n        // }\r\n        // else if (this.props.Login.masterData.SelectedTestPriceVersion && this.props.Login.masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT) {\r\n        //     activeIconCSS = \"\";\r\n        // }\r\n\r\n        const addId = this.state.controlMap.has(\"AddTechnique\") && this.state.controlMap.get(\"AddTechnique\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditTechnique\") && this.state.controlMap.get(\"EditTechnique\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteTechnique\") && this.state.controlMap.get(\"DeleteTechnique\").ncontrolcode\r\n        \r\n        const addTechniqueTestId = this.state.controlMap.has(\"AddTechniqueTest\") && this.state.controlMap.get(\"AddTechniqueTest\").ncontrolcode;\r\n        \r\n             \r\n\r\n        const filterParam = {\r\n            inputListName: \"Technique\", selectedObject: \"SelectedTechnique\", primaryKeyField: \"ntechniquecode\",\r\n            fetchUrl: \"technique/getTechnique\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_TECHNIQUE\", operation: \"create\", primaryKeyName: \"ntechniquecode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId\r\n        }\r\n\r\n        const editParam = {\r\n            screenName: \"IDS_TECHNIQUE\", operation: \"update\", primaryKeyName: \"ntechniquecode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId, inputListName: \"Technique\", selectedObject: \"SelectedTechnique\"\r\n        };\r\n\r\n        \r\n        return (<>\r\n            {/* Start of get display*/}\r\n            <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\">\r\n                <Row noGutters>\r\n                    <Col md={4}>\r\n                        {/* <Row noGutters>\r\n                            <Col md={12}> */}\r\n                            {/* <div className=\"list-fixed-wrap\"> */}\r\n                                <ListMaster\r\n                                    screenName={this.props.intl.formatMessage({ id: \"IDS_TECHNIQUE\" })}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.Technique}\r\n                                    getMasterDetail={(technique) => this.props.getTechniqueDetail(technique, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                    selectedMaster={this.props.Login.masterData.SelectedTechnique}\r\n                                    primaryKeyField=\"ntechniquecode\"\r\n                                    mainField=\"stechniquename\"\r\n                                    firstField=\"\"\r\n                                    secondField=\"\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    filterParam={filterParam}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    addId={addId}\r\n                                    searchRef={this.searchRef}\r\n                                    reloadData={this.reloadData}\r\n                                    openModal={() => this.openModal(addParam)}\r\n                                    isMultiSelecct={false}\r\n                                    hidePaging={false}\r\n                                    isClearSearch={this.props.Login.isClearSearch}\r\n                                />\r\n                            {/* </div>\r\n                        </Col></Row> */}\r\n                    </Col>\r\n                    <Col md={8}>\r\n                        {/* <Row>\r\n                            <Col md={12}> */}\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.Technique && this.props.Login.masterData.Technique.length > 0 && this.props.Login.masterData.SelectedTechnique ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                \r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    {this.props.Login.masterData.SelectedTechnique.stechniquename}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                            \r\n                                                        </h2>\r\n                                                        \r\n                                                        <div className=\"d-inline\">\r\n                                                            <Nav.Link name=\"editTechnique\" hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                \r\n                                                                onClick={() => this.props.getEditTechniqueService(editParam)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"deleteTechnique\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                              \r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.confirmDelete(deleteId)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                               \r\n                                                            </Nav.Link>\r\n                                                            \r\n                                                            \r\n                                                        </div>\r\n                                                        \r\n                                                    </div>\r\n\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body className=\"form-static-wrap\">\r\n                                                \r\n\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_DESCRIPTION\" message=\"Description\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedTechnique.sdescription}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                  \r\n                                                </Row>\r\n                                                \r\n                                                  <Card className=\"at-tabs border-0\">\r\n                                                        <Row noGutters>\r\n                                                            <Col md={12}>\r\n                                                                <div className=\"d-flex justify-content-end\">\r\n                                                                <Nav.Link name=\"addTechniqueTest\" className=\"add-txt-btn\" \r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(addTechniqueTestId) === -1}\r\n                                                                        onClick={()=>this.props.getAddTestService(\"IDS_TEST\", \"create\", this.props.Login.masterData, this.props.Login.userInfo, addTechniqueTestId,this.confirmMessage)}\r\n                                                                        >\r\n                                                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                                    <FormattedMessage id='IDS_TEST' defaultMessage='Test' />\r\n                                                                </Nav.Link>\r\n                                                                \r\n                                                                </div>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                        <Row noGutters>\r\n                                                            <Col md={12}>\r\n                                                                <DataGrid\r\n                                                                    primaryKeyField={\"ntechniquetestcode\"}\r\n                                                                    data={this.state.data}\r\n                                                                    dataResult={this.state.dataResult}\r\n                                                                    dataState={this.state.testDataState}\r\n                                                                    dataStateChange={this.dataStateChange}\r\n                                                                    extractedColumnList={this.extractedColumnList}\r\n                                                                    controlMap={this.state.controlMap}\r\n                                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    inputParam={this.props.Login.inputParam}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    \r\n                                                                    deleteRecord={this.deleteTechniqueTest}\r\n                                                                    deleteParam={{operation:\"delete\"}}\r\n                                                                    methodUrl={\"TechniqueTest\"}\r\n                                                                \r\n                                                                    addRecord = {() => this.openModal(addId)}\r\n                                                                    pageable={true}\r\n                                                                    scrollable={'scrollable'}\r\n                                                                \r\n                                                                    isActionRequired={true}\r\n                                                                    isToolBarRequired={false}\r\n                                                                    selectedId={this.props.Login.selectedId}\r\n                                                                />\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                </Card>\r\n                                                \r\n                                            \r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col></Row>\r\n                    {/* </Col>\r\n                </Row> */}\r\n            </div>\r\n\r\n            {/* End of get display*/}\r\n\r\n            {/* Start of Modal Sideout for  Creation */}\r\n            {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n            {this.props.Login.openModal || this.props.Login.openChildModal ?\r\n                <SlideOutModal show={this.props.Login.screenName === \"IDS_TEST\"?\r\n                this.props.Login.openChildModal:\r\n                this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.props.Login.screenName === \"IDS_TEST\"  ? this.onSaveTechniqueTest: this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={this.props.Login.screenName === \"IDS_TEST\" ? \r\n                            this.props.Login.operation === \"update\" ? [] : this.mandatoryTestFields:\r\n                            this.mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        : this.props.Login.openChildModal&&\r\n                        this.props.Login.screenName === \"IDS_TEST\"  ? \r\n                            \r\n                                <AddTechniqueTest\r\n                                     selectedRecord={this.state.selectedRecord || {}}\r\n                                     onComboChange={this.onComboChange}\r\n                                     techniqueTestList={this.props.Login.techniqueTestList || []}/>\r\n                                \r\n\r\n                            : <AddType1Component\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                extractedColumnList={this.techniqueFieldList}\r\n                            />\r\n                      \r\n                    }\r\n                /> : \"\"}\r\n            {/* End of Modal Sideout for User Creation */}\r\n        </>\r\n        );\r\n    }\r\n\r\n    confirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTechnique(\"Technique\", this.props.Login.masterData.SelectedTechnique, \"delete\", deleteId));\r\n    }\r\n\r\n    deleteTechnique = (methodUrl, SelectedTechnique, operation, ncontrolCode) => {\r\n        \r\n\r\n            const postParam = {\r\n                inputListName: \"Technique\", selectedObject: \"SelectedTechnique\",\r\n                primaryKeyField: \"ntechniquecode\",\r\n                primaryKeyValue: SelectedTechnique.ntechniquecode,\r\n                fetchUrl: \"technique/getTechnique\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl, postParam,\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"technique\": SelectedTechnique\r\n                },\r\n                operation,\r\n                isClearSearch: this.props.Login.isClearSearch\r\n            }\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_TECHNIQUE\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n            \r\n    }\r\n\r\n    deleteTechniqueTest = (deleteParam) =>{\r\n       let postParam = { inputListName: \"techniquetest\", selectedObject: \"TechniqueTest\", primaryKeyField: \"ntestcode\",\r\n        primaryKeyValue: deleteParam.selectedRecord.ntestcode,\r\n         fetchUrl: \"technique/getTechniqueTest\", fecthInputObject: {ntechniquecode:this.props.Login.masterData.SelectedTechnique.ntechniquecode, userinfo: this.props.Login.userInfo },\r\n         masterData: this.props.Login.masterData \r\n      }\r\n        const inputParam = {\r\n            classUrl: \"technique\",\r\n            methodUrl: \"TechniqueTest\",\r\n            \r\n            inputData: {\r\n                \"techniquetest\": deleteParam.selectedRecord,//.dataItem,\r\n                \"ntechniquecode\":this.props.Login.masterData.SelectedTechnique.ntechniquecode,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation:\"delete\",postParam,\r\n            testDataState:this.state.testDataState\r\n        }\r\n\r\n        rsapi.post(\"technique/getTechniqueConducted\",{\"ntechniquecode\":this.props.Login.masterData.SelectedTechnique.ntechniquecode, \r\n        userinfo:this.props.Login.userInfo})\r\n        .then(response=>{\r\n          if(response.data!==null && response.data.length >0)\r\n          {\r\n                \r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TESTTRAININGCONDUCTED\" }) );\r\n            // dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \r\n            //     openChildModal:false,\r\n            //     operation, screenName, ncontrolCode,\r\n            //     loading:false}});\r\n          }\r\n          else\r\n          {\r\n            rsapi.post(\"technique/getTechniqueScheduled\",{\"ntechniquecode\":this.props.Login.masterData.SelectedTechnique.ntechniquecode, \r\n            userinfo:this.props.Login.userInfo})\r\n            .then(response=>{\r\n              if(response.data!==null && response.data.length >0)\r\n              {\r\n                //this.confirmMessage = new ConfirmMessage();\r\n                this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_TESTTRAININGSCHEDULED\" }),\r\n                this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                () => { if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_TEST\" }),\r\n                            operation:deleteParam.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }}\r\n                );\r\n              }\r\n              else\r\n              {\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_TEST\" }),\r\n                            operation:deleteParam.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n              }\r\n    \r\n           })      \r\n          }\r\n\r\n       })\r\n\r\n        \r\n    }\r\n\r\n    onSaveTechniqueTest = (saveType, formRef) => {\r\n\r\n        const techniqueTestData = {\"userinfo\": this.props.Login.userInfo,\r\n                                 \"technique\":this.props.Login.masterData.SelectedTechnique,\r\n                                 \"ntechniquecode\":this.props.Login.masterData.SelectedTechnique.ntechniquecode};\r\n \r\n         let postParam = undefined;\r\n         let techniquetestDataState = undefined;\r\n         let selectedId = null;\r\n         \r\n         if (this.props.Login.operation === \"update\") {\r\n            \r\n         }\r\n         else {\r\n             //add                                                 \r\n             let techniquetestList = [];\r\n             this.state.selectedRecord[\"ntestcode\"] &&\r\n                 this.state.selectedRecord[\"ntestcode\"].map(item => {\r\n                     return techniquetestList.push({\r\n                        ntestcode: item.value                      \r\n                     })\r\n                 })\r\n            \r\n             techniqueTestData[\"techniquetestlist\"] = techniquetestList;                             \r\n \r\n         }\r\n         if (techniqueTestData[\"technique\"].hasOwnProperty('esignpassword')) {\r\n             if (techniqueTestData[\"technique\"]['esignpassword'] === '') {\r\n                 delete techniqueTestData[\"technique\"]['esigncomments']\r\n                 delete techniqueTestData[\"technique\"]['esignpassword']\r\n                 delete techniqueTestData[\"technique\"]['esignreason']\r\n                 delete techniqueTestData[\"technique\"][\"agree\"]\r\n             }\r\n         }\r\n        \r\n         const inputParam = {\r\n             classUrl: this.props.Login.inputParam.classUrl,\r\n             methodUrl: \"TechniqueTest\",\r\n             inputData: techniqueTestData,\r\n             operation: this.props.Login.operation,\r\n             saveType, formRef, postParam, searchRef: this.searchRef,\r\n             isClearSearch: this.props.Login.isClearSearch,\r\n             selectedId, techniquetestDataState\r\n         }\r\n         const masterData = this.props.Login.masterData;\r\n \r\n         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n \r\n             const updateInfo = {\r\n                 typeName: DEFAULT_RETURN,\r\n                 data: {\r\n                     loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                 }\r\n             }\r\n             this.props.updateStore(updateInfo);\r\n         }\r\n         else {            \r\n             this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n         }\r\n \r\n     }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let techniqueData = [];\r\n        techniqueData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        let postParam = undefined;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            //postParam = { inputListName: \"Technique\", selectedObject: \"SelectedTechnique\", primaryKeyField: \"ntechniquecode\" };\r\n            postParam = { inputListName: \"Technique\", selectedObject: \"SelectedTechnique\", primaryKeyField: \"ntechniquecode\",\r\n        primaryKeyValue: this.props.Login.selectedRecord.ntechniquecode,\r\n         fetchUrl: \"technique/getActiveTechniqueById\", fecthInputObject: {userinfo: this.props.Login.userInfo },\r\n         masterData: this.props.Login.masterData \r\n      }\r\n            techniqueData[\"technique\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n            techniqueData[\"stechniquename\"]=this.state.selectedRecord[\"stechniquename\"] || \"\";\r\n            techniqueData[\"sdescription\"]=this.state.selectedRecord[\"sdescription\"] || \"\";\r\n\r\n        }\r\n        else {\r\n            //add               \r\n            techniqueData[\"technique\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode,\r\n                                                \"stechniquename\":this.state.selectedRecord[\"stechniquename\"] || \"\",\r\n                                                \"sdescription\":this.state.selectedRecord[\"sdescription\"] || \"\",\r\n                                            };\r\n\r\n            \r\n\r\n        }\r\n        if (techniqueData[\"technique\"].hasOwnProperty('esignpassword')) {\r\n            if (techniqueData[\"technique\"]['esignpassword'] === '') {\r\n                delete techniqueData[\"technique\"]['esigncomments']\r\n                delete techniqueData[\"technique\"]['esignpassword']\r\n                delete techniqueData[\"technique\"]['esignreason']\r\n            }\r\n        }\r\n      \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Technique\",\r\n            inputData: techniqueData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({ userRoleControlRights, controlMap,\r\n                    data: this.props.Login.masterData.Test,\r\n                    dataResult: process(this.props.Login.masterData.TechniqueTest || [], this.state.testDataState), });\r\n            }\r\n            else {        \r\n                let {testDataState} = this.state;\r\n                if(this.props.Login.testDataState === undefined){\r\n                    testDataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }         \r\n                this.setState({\r\n                    data: this.props.Login.masterData.TechniqueTest, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData.TechniqueTest ||[],testDataState),\r\n                    testDataState\r\n                });\r\n            }  \r\n        }\r\n    }\r\n    openModal = (inputParam) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: inputParam.operation, ncontrolCode:inputParam.ncontrolcode, selectedId:null,\r\n                openModal: true, screenName: this.props.intl.formatMessage({id:'IDS_TECHNIQUE'})\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.state.selectedId;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n\r\n                if( this.props.Login.screenName === \"IDS_TEST\"){\r\n                    openChildModal=false\r\n                }\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n                \r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n            openChildModal=false;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal,openChildModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onInputOnChange = (event, primaryFieldKey) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {   \r\n                  \r\n                selectedRecord[event.target.name] = event.target.value;\r\n                   \r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"technique\",\r\n            methodUrl: \"Technique\",\r\n            displayName: \"IDS_TECHNIQUE\",\r\n            userInfo: this.props.Login.userInfo,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,getTechniqueDetail,getEditTechniqueService,getAddTestService,\r\n    updateStore,filterColumnData\r\n})(injectIntl(Technique));\r\n\r\n"]},"metadata":{},"sourceType":"module"}