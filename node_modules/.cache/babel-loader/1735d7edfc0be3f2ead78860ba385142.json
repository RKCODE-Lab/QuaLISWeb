{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\SpecificationInfo.jsx\";\nimport { faCheck, faCopy, faUserTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Col, FormGroup, FormLabel, Nav, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { ReadOnlyText } from '../../components/App.styles'; ///import { getStatusIcon } from '../../components/StatusIcon';\n\nimport ActionPopOver from '../product/ActionPopover'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n//import GenerateCertificate from '../../assets/image/generate-certificate.svg';\n\nimport { ReactComponent as Reports } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/report-Icon.svg\"; // import ReactTooltip from 'react-tooltip';\n\nconst SpecificationInfo = props => {\n  const {\n    selectedSpecification,\n    controlMap,\n    selectedNode,\n    userInfo,\n    approvalRoleActionDetail,\n    selectedRecord,\n    filterData\n  } = props;\n  const addSpecParam = {\n    testgroupspecification: selectedSpecification,\n    selectedRecord,\n    userInfo: userInfo,\n    filterData,\n    selectedNode\n  };\n  const specInfoFields = [{\n    \"fieldName\": \"sspecname\",\n    \"label\": \"IDS_SPECNAME\"\n  }, {\n    \"fieldName\": \"sapprovalstatus\",\n    \"label\": \"IDS_APPROVALSTATUS\"\n  }, {\n    \"fieldName\": \"sversion\",\n    \"label\": \"IDS_VERSIONNO\"\n  }, {\n    \"fieldName\": \"scomponentrequired\",\n    \"label\": \"IDS_COMPONENTREQUIRED\"\n  }, {\n    \"fieldName\": \"sexpirydate\",\n    \"label\": \"IDS_EXPIRYDATE\"\n  }, {\n    \"fieldName\": \"stimezoneid\",\n    \"label\": \"IDS_TIMEZONE\"\n  }];\n  const copySpecId = controlMap.has(\"CopySpecification\") && controlMap.get(\"CopySpecification\").ncontrolcode;\n  const completedSpecId = controlMap.has(\"CompleteSpecification\") && controlMap.get(\"CompleteSpecification\").ncontrolcode;\n  const completeSpecParam = {\n    testgroupspecification: selectedSpecification,\n    treetemplatemanipulation: selectedNode\n  };\n  const reportSpecId = controlMap.has(\"ReportSpecification\") && controlMap.get(\"ReportSpecification\").ncontrolcode;\n  const retireSpecId = controlMap.has(\"RetireSpecification\") && controlMap.get(\"RetireSpecification\").ncontrolcode;\n  const approvalActionId = controlMap.has(\"SpecApprovalAction\") && controlMap.get(\"SpecApprovalAction\").ncontrolcode;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex justify-content-end mr-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\",\n    hidden: props.userRoleControlRights.indexOf(copySpecId) === -1,\n    onClick: () => props.addSpecification(\"copy\", addSpecParam, copySpecId) // data-for=\"tooltip-list-wrap\"\n    ,\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_COPY\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faCopy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\",\n    hidden: props.userRoleControlRights.indexOf(completedSpecId) === -1,\n    onClick: () => props.completeSpecification(\"complete\", { ...completeSpecParam\n    }, completedSpecId) //  data-for=\"tooltip-list-wrap\"\n    ,\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_COMPLETE\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faCheck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\",\n    hidden: props.userRoleControlRights.indexOf(reportSpecId) === -1,\n    onClick: () => props.specificationReport(\"report\", reportSpecId) // data-for=\"tooltip-list-wrap\"\n    ,\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_SPECREPORT\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Reports, {\n    className: \"custom_icons\",\n    width: \"20\",\n    height: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\" // hidden={props.userRoleControlRights.indexOf(retireSpecId) === -1}\n    ,\n    hidden: true //  data-for=\"tooltip-list-wrap\"\n    ,\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_RETIRE\"\n    }),\n    onClick: () => props.retireSpec(\"retire\", { ...completeSpecParam\n    }, approvalRoleActionDetail, retireSpecId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faUserTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  })), approvalRoleActionDetail && approvalRoleActionDetail.length > 0 && props.userRoleControlRights.indexOf(approvalActionId) !== -1 &&\n  /*#__PURE__*/\n  // <Dropdown className=\"mr-2\">\n  //     <Dropdown.Toggle className=\"btn-circle btn-primary-blue flex\">\n  //         <FontAwesomeIcon icon={faBolt} size=\"sm\"></FontAwesomeIcon>\n  //     </Dropdown.Toggle>\n  //     <Dropdown.Menu>\n  // {approvalRoleActionDetail.map((action) =>\n  // <Dropdown.Item onClick={() => props.approveSpecification(action.ntransactionstatus, action.nesignneed)}>\n  //     <Nav.Link className='add-txt-btn blue-text ml-1' style={{ display: 'inline' }}>\n  //         {getStatusIcon(action.ntransactionstatus)}\n  //         <span className='ml-1 text-nowrap'><FormattedMessage id={action.sactiondisplaystatus}\n  //             defaultMessage={action.sactiondisplaystatus} /></span>\n  //     </Nav.Link>\n  // </Dropdown.Item>\n  React.createElement(ActionPopOver, {\n    actionDetails: approvalRoleActionDetail,\n    roleActionDetails: approvalRoleActionDetail,\n    dynamicButton: value => props.approveSpecification(value.paramstatus, value.sign),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  })), selectedSpecification && Object.values(selectedSpecification).length ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, props.auditInfoFields ? props.auditInfoFields.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      key: `specInfo_${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 41\n      }\n    }, props.intl.formatMessage({\n      id: item.label\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 41\n      }\n    }, selectedSpecification[item.fieldName])));\n  }) : specInfoFields.map((item, index) => {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      key: `specInfo_${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 41\n      }\n    }, props.intl.formatMessage({\n      id: item.label\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 41\n      }\n    }, selectedSpecification[item.fieldName])));\n  })) : \"\");\n};\n\nexport default injectIntl(SpecificationInfo);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/SpecificationInfo.jsx"],"names":["faCheck","faCopy","faUserTimes","FontAwesomeIcon","React","Col","FormGroup","FormLabel","Nav","Row","injectIntl","ReadOnlyText","ActionPopOver","SpecificationInfo","props","selectedSpecification","controlMap","selectedNode","userInfo","approvalRoleActionDetail","selectedRecord","filterData","addSpecParam","testgroupspecification","specInfoFields","copySpecId","has","get","ncontrolcode","completedSpecId","completeSpecParam","treetemplatemanipulation","reportSpecId","retireSpecId","approvalActionId","userRoleControlRights","indexOf","addSpecification","intl","formatMessage","id","completeSpecification","specificationReport","retireSpec","length","value","approveSpecification","paramstatus","sign","Object","values","auditInfoFields","map","item","index","label","fieldName"],"mappings":"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","sourcesContent":["import { faCheck, faCopy, faUserTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Col, FormGroup, FormLabel, Nav, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\n///import { getStatusIcon } from '../../components/StatusIcon';\r\nimport ActionPopOver from '../product/ActionPopover';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\n//import GenerateCertificate from '../../assets/image/generate-certificate.svg';\r\nimport { ReactComponent as Reports } from '../../assets/image/report-Icon.svg'\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst SpecificationInfo = (props) => {\r\n    const { selectedSpecification, controlMap, selectedNode, userInfo, approvalRoleActionDetail, selectedRecord, filterData } = props;\r\n    const addSpecParam = { testgroupspecification: selectedSpecification, selectedRecord, userInfo: userInfo, filterData, selectedNode };\r\n    const specInfoFields = [{ \"fieldName\": \"sspecname\", \"label\": \"IDS_SPECNAME\" },\r\n    { \"fieldName\": \"sapprovalstatus\", \"label\": \"IDS_APPROVALSTATUS\" },\r\n    { \"fieldName\": \"sversion\", \"label\": \"IDS_VERSIONNO\" },\r\n    { \"fieldName\": \"scomponentrequired\", \"label\": \"IDS_COMPONENTREQUIRED\" },\r\n    { \"fieldName\": \"sexpirydate\", \"label\": \"IDS_EXPIRYDATE\" },\r\n    { \"fieldName\": \"stimezoneid\", \"label\": \"IDS_TIMEZONE\" }];\r\n    const copySpecId = controlMap.has(\"CopySpecification\") && controlMap.get(\"CopySpecification\").ncontrolcode;\r\n    const completedSpecId = controlMap.has(\"CompleteSpecification\") && controlMap.get(\"CompleteSpecification\").ncontrolcode;\r\n    const completeSpecParam = { testgroupspecification: selectedSpecification, treetemplatemanipulation: selectedNode };\r\n    const reportSpecId = controlMap.has(\"ReportSpecification\") && controlMap.get(\"ReportSpecification\").ncontrolcode;\r\n    const retireSpecId = controlMap.has(\"RetireSpecification\") && controlMap.get(\"RetireSpecification\").ncontrolcode;\r\n    const approvalActionId = controlMap.has(\"SpecApprovalAction\") && controlMap.get(\"SpecApprovalAction\").ncontrolcode;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-end mr-3\">\r\n                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true} > */}\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" hidden={props.userRoleControlRights.indexOf(copySpecId) === -1}\r\n                    onClick={() => props.addSpecification(\"copy\", addSpecParam, copySpecId)}\r\n                   // data-for=\"tooltip-list-wrap\"\r\n                    data-tip={props.intl.formatMessage({ id: \"IDS_COPY\" })}>\r\n                    <FontAwesomeIcon icon={faCopy} />\r\n                </Nav.Link>\r\n                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" hidden={props.userRoleControlRights.indexOf(completedSpecId) === -1}\r\n                    onClick={() => props.completeSpecification(\"complete\", { ...completeSpecParam }, completedSpecId)}\r\n                  //  data-for=\"tooltip-list-wrap\"\r\n                    data-tip={props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}>\r\n                    <FontAwesomeIcon icon={faCheck} />\r\n                </Nav.Link>\r\n\r\n\r\n                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                    hidden={props.userRoleControlRights.indexOf(reportSpecId) === -1}\r\n                    onClick={() => props.specificationReport(\"report\", reportSpecId)}\r\n                   // data-for=\"tooltip-list-wrap\"\r\n                    data-tip={props.intl.formatMessage({ id: \"IDS_SPECREPORT\" })}>\r\n                    {/* <Image src={GenerateCertificate} alt=\"generate-certificate\" width=\"20\" hieght=\"20\"\r\n                        className=\"ActionIconColor img-normalize\"/> */}\r\n                    <Reports className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                </Nav.Link>\r\n\r\n                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                    // hidden={props.userRoleControlRights.indexOf(retireSpecId) === -1}\r\n                    hidden\r\n                  //  data-for=\"tooltip-list-wrap\"\r\n                    data-tip={props.intl.formatMessage({ id: \"IDS_RETIRE\" })}\r\n                    onClick={() => props.retireSpec(\"retire\", { ...completeSpecParam }, approvalRoleActionDetail, retireSpecId)}\r\n                >\r\n                    <FontAwesomeIcon icon={faUserTimes} />\r\n                </Nav.Link>\r\n\r\n                {/* </Tooltip> */}\r\n                {approvalRoleActionDetail && approvalRoleActionDetail.length > 0 &&\r\n                    props.userRoleControlRights.indexOf(approvalActionId) !== -1 &&\r\n                    // <Dropdown className=\"mr-2\">\r\n                    //     <Dropdown.Toggle className=\"btn-circle btn-primary-blue flex\">\r\n                    //         <FontAwesomeIcon icon={faBolt} size=\"sm\"></FontAwesomeIcon>\r\n                    //     </Dropdown.Toggle>\r\n                    //     <Dropdown.Menu>\r\n                    // {approvalRoleActionDetail.map((action) =>\r\n                    // <Dropdown.Item onClick={() => props.approveSpecification(action.ntransactionstatus, action.nesignneed)}>\r\n                    //     <Nav.Link className='add-txt-btn blue-text ml-1' style={{ display: 'inline' }}>\r\n                    //         {getStatusIcon(action.ntransactionstatus)}\r\n                    //         <span className='ml-1 text-nowrap'><FormattedMessage id={action.sactiondisplaystatus}\r\n                    //             defaultMessage={action.sactiondisplaystatus} /></span>\r\n                    //     </Nav.Link>\r\n                    // </Dropdown.Item>\r\n\r\n                    <ActionPopOver\r\n                        actionDetails={approvalRoleActionDetail}\r\n                        roleActionDetails={approvalRoleActionDetail}\r\n                        dynamicButton={(value) => props.approveSpecification(value.paramstatus, value.sign)}\r\n                    >\r\n                    </ActionPopOver>\r\n                }\r\n\r\n                {/* //)} */}\r\n                {/* //</Dropdown.Menu>\r\n                    </Dropdown>} */}\r\n            </div>\r\n\r\n            {selectedSpecification && Object.values(selectedSpecification).length ?\r\n                <Row>\r\n                    {props.auditInfoFields ?\r\n\r\n                        props.auditInfoFields.map((item, index) => {\r\n                            return (\r\n                                <Col md={6} key={`specInfo_${index}`}>\r\n                                    <FormGroup>\r\n                                        <FormLabel>{props.intl.formatMessage({ id: item.label })}</FormLabel>\r\n                                        <ReadOnlyText>{selectedSpecification[item.fieldName]}</ReadOnlyText>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            )\r\n                        }) :\r\n\r\n                        specInfoFields.map((item, index) => {\r\n                            return (\r\n                                <Col md={6} key={`specInfo_${index}`}>\r\n                                    <FormGroup>\r\n                                        <FormLabel>{props.intl.formatMessage({ id: item.label })}</FormLabel>\r\n                                        <ReadOnlyText>{selectedSpecification[item.fieldName]}</ReadOnlyText>\r\n                                    </FormGroup>\r\n                                </Col>\r\n                            )\r\n                        })}\r\n                </Row> : \"\"\r\n            }\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default injectIntl(SpecificationInfo);"]},"metadata":{},"sourceType":"module"}