{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\dropzone\\\\dropzone.component.jsx\";\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { useDropzone } from 'react-dropzone';\nimport { ListGroup, Media, Image } from 'react-bootstrap';\nimport './dropzone.styles.jsx';\nimport { Dzwrap, DzMessage, Attachments } from './dropzone.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileUpload, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { getAttachedFileIcon } from '../FileIcon';\nimport { injectIntl } from 'react-intl';\nimport { bytesToSize } from '../CommonScript.js';\nimport { Nav } from 'react-bootstrap';\n\nfunction DropZone({\n  name,\n  label,\n  isMandatory,\n  errors,\n  deleteAttachment,\n  onDrop,\n  accept,\n  minSize,\n  maxSize,\n  // maxFiles,\n  // multiple,\n  editFiles,\n  attachmentTypeCode,\n  fileSizeName,\n  fileName,\n  disabled,\n  onDropAccepted,\n  index,\n  ...props\n}) {\n  // const { onDrop, accept, minSize, maxSize, maxFiles, multiple, editFiles, attachmentTypeCode, fileSizeName, fileName, disabled, label } = props;\n  const {\n    maxFiles,\n    multiple\n  } = props;\n  let maxfileSize = maxSize * 1000000;\n  const {\n    fileRejections,\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept,\n    minSize,\n    maxSize: maxfileSize,\n    maxFiles: maxFiles,\n    multiple: multiple,\n    disabled,\n    onDropAccepted,\n    validator: nameLengthValidator\n  });\n  const fileRejectionItems = [...new Set(fileRejections.map(({\n    file,\n    errors\n  }) => {\n    switch (errors[0].code) {\n      case \"file-invalid-type\":\n        return `${file.path}: ${props.intl.formatMessage({\n          id: \"IDS_FILETYPENOTPERMITTED\"\n        })}`;\n\n      case \"too-many-files\":\n        return `${props.intl.formatMessage({\n          id: \"IDS_MAXIMUMALLOWSONLY\"\n        })} ${maxFiles} ${props.intl.formatMessage({\n          id: \"IDS_FILES\"\n        })}`;\n\n      case \"file-too-large\":\n        return `${file.path} ${props.intl.formatMessage({\n          id: \"IDS_IS\"\n        })} ${bytesToSize(file.size)}`;\n\n      case \"name-too-large\":\n        return errors[0].message;\n\n      default:\n        return \"\";\n    }\n  }))];\n  let files = [];\n\n  if (props.actionType === \"delete\") {\n    if (typeof editFiles[fileName] !== \"string\") {\n      let list = editFiles[fileName];\n      files = list && list.length > 0 ? list.map(file => attachmentData(file, file.path, \"name\", \"size\")) : editFiles && Object.values(editFiles).length > 0 ? attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\";\n    } else {\n      files = editFiles && Object.values(editFiles).length > 0 ? attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\";\n    }\n  } else {\n    if (typeof editFiles[fileName] !== \"string\") {\n      let list = editFiles[fileName];\n      files = list && list.length > 0 ? list.map(file => attachmentData(file, file.path, \"name\", \"size\")) : editFiles && Object.values(editFiles).length > 0 ? attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\";\n    } else {\n      files = editFiles && Object.values(editFiles).length > 0 ? attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\";\n    }\n  }\n\n  function nameLengthValidator(file) {\n    const fileNameLength = 100;\n\n    if (file.name.length >= fileNameLength) {\n      return {\n        code: \"name-too-large\",\n        message: `${file.name} ${props.intl.formatMessage({\n          id: \"IDS_NAMEGREATERTHAN\"\n        })} ${fileNameLength} ${props.intl.formatMessage({\n          id: \"IDS_CHARACTERS\"\n        })}`\n      };\n    }\n\n    return null;\n  }\n\n  function attachmentData(file, keyname, filename, size) {\n    let fileExtension = \"\";\n\n    if (filename !== \"\" && file[filename] !== undefined && file[filename] !== \"\") {\n      if (typeof file[filename] === \"object\") {\n        if (file[filename].length > 0) {\n          const splittedFileName = file[filename][0][\"name\"].split('.');\n          fileExtension = file[filename][0][\"name\"].split('.')[splittedFileName.length - 1];\n        }\n      } else {\n        const splittedFileName = file[filename].split('.');\n        fileExtension = file[filename].split('.')[splittedFileName.length - 1];\n      }\n    }\n\n    if (fileExtension !== \"\") {\n      return /*#__PURE__*/React.createElement(ListGroup.Item, {\n        key: keyname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Attachments, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Media, {\n        className: \"align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Image, {\n        width: 40,\n        height: 40,\n        className: \"mr-2\",\n        src: getAttachedFileIcon(fileExtension),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 22\n        }\n      }), /*#__PURE__*/React.createElement(Media.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(\"h5\", {\n        className: \"mt-0 attachment-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 25\n        }\n      }, typeof file[filename] === \"object\" ? file[filename][0][\"name\"] : file[filename]), size !== \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"attachment-details\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 40\n        }\n      }, typeof file[filename] === \"object\" ? bytesToSize(file[filename][0][\"size\"]) : bytesToSize(file[size])) : \"\"),\n      /*#__PURE__*/\n      //multiple ?\n      React.createElement(Nav.Link, {\n        name: \"deleteAttachment\",\n        className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\" //onClick = {deleteAttachment}\n        ,\n        onClick: event => deleteAttachment(event, file, fileName, index),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 28\n        }\n      })) // :\"\"\n      )));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Dzwrap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    htmlFor: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, label, isMandatory && /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 63\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: 'dropzone'\n  }), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 16\n    }\n  })), /*#__PURE__*/React.createElement(DzMessage, {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faFileUpload,\n    size: \"2x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 69\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-uppercase font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 24\n    }\n  }, `${props.intl.formatMessage({\n    id: \"IDS_DRAGANDDROP\"\n  })}`), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 20\n    }\n  }), \" \", `${props.intl.formatMessage({\n    id: \"IDS_OR\"\n  })}`, \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"drop-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 77\n    }\n  }, `${props.intl.formatMessage({\n    id: \"IDS_CLICKHERE\"\n  })}`), \" \", `${props.intl.formatMessage({\n    id: \"IDS_TOUPLOAD\"\n  })}`, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 19\n    }\n  }), `(${props.intl.formatMessage({\n    id: \"IDS_MAXALLOWS\"\n  })} \n                  ${maxFiles} ${props.intl.formatMessage({\n    id: \"IDS_FILESIZEOF\"\n  })} \n                  ${maxSize} ${props.intl.formatMessage({\n    id: \"IDS_MB\"\n  })})`, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 19\n    }\n  }), `(${props.intl.formatMessage({\n    id: \"IDS_MAXALLOWSFILENAMEOF\"\n  })} \n                  ${100} ${props.intl.formatMessage({\n    id: \"IDS_CHARACTERS\"\n  })})`))), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    className: \"d-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, fileRejectionItems.join(\",\")), /*#__PURE__*/React.createElement(ListGroup, {\n    variant: \"flush\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, files)));\n}\n\nexport default injectIntl(DropZone);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/dropzone/dropzone.component.jsx"],"names":["React","Form","useDropzone","ListGroup","Media","Image","Dzwrap","DzMessage","Attachments","FontAwesomeIcon","faFileUpload","faTrashAlt","getAttachedFileIcon","injectIntl","bytesToSize","Nav","DropZone","name","label","isMandatory","errors","deleteAttachment","onDrop","accept","minSize","maxSize","editFiles","attachmentTypeCode","fileSizeName","fileName","disabled","onDropAccepted","index","props","maxFiles","multiple","maxfileSize","fileRejections","getRootProps","getInputProps","validator","nameLengthValidator","fileRejectionItems","Set","map","file","code","path","intl","formatMessage","id","size","message","files","actionType","list","length","attachmentData","Object","values","fileNameLength","keyname","filename","fileExtension","undefined","splittedFileName","split","event","className","join"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { ListGroup, Media, Image } from 'react-bootstrap';\r\nimport './dropzone.styles.jsx';\r\nimport { Dzwrap, DzMessage, Attachments } from './dropzone.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileUpload, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { getAttachedFileIcon } from '../FileIcon';\r\nimport { injectIntl } from 'react-intl';\r\nimport { bytesToSize } from '../CommonScript.js';\r\nimport { Nav } from 'react-bootstrap';\r\n\r\nfunction DropZone({\r\n   name,\r\n   label,\r\n   isMandatory,\r\n   errors,\r\n   deleteAttachment,\r\n   onDrop,\r\n   accept,\r\n   minSize,\r\n   maxSize,\r\n   // maxFiles,\r\n   // multiple,\r\n   editFiles,\r\n   attachmentTypeCode,\r\n   fileSizeName,\r\n   fileName,\r\n   disabled,\r\n   onDropAccepted,\r\n   index,\r\n   ...props\r\n}) {\r\n   // const { onDrop, accept, minSize, maxSize, maxFiles, multiple, editFiles, attachmentTypeCode, fileSizeName, fileName, disabled, label } = props;\r\n   const { maxFiles, multiple } = props;\r\n   let maxfileSize = maxSize * 1000000;\r\n   const { fileRejections, getRootProps, getInputProps } = useDropzone({\r\n      onDrop, accept, minSize, maxSize: maxfileSize,\r\n      maxFiles: maxFiles, multiple: multiple, disabled, onDropAccepted,validator:nameLengthValidator\r\n   });\r\n   const fileRejectionItems = [...new Set(fileRejections.map(({ file, errors }) => {\r\n      switch (errors[0].code) {\r\n         case \"file-invalid-type\":\r\n            return `${file.path}: ${props.intl.formatMessage({ id: \"IDS_FILETYPENOTPERMITTED\" })}`;\r\n\r\n         case \"too-many-files\":\r\n            return `${props.intl.formatMessage({ id: \"IDS_MAXIMUMALLOWSONLY\" })} ${maxFiles} ${props.intl.formatMessage({ id: \"IDS_FILES\" })}`;\r\n\r\n         case \"file-too-large\":\r\n            return `${file.path} ${props.intl.formatMessage({ id: \"IDS_IS\" })} ${bytesToSize(file.size)}`;\r\n           \r\n            case \"name-too-large\":\r\n               return errors[0].message;\r\n   \r\n         default:\r\n            return \"\";\r\n      }\r\n   })\r\n   )]\r\n\r\n   let files = [];\r\n   if (props.actionType === \"delete\") {\r\n      if (typeof editFiles[fileName] !== \"string\") {\r\n         let list = editFiles[fileName]\r\n         files = list && list.length > 0 ?\r\n            list.map(file => (\r\n               attachmentData(file, file.path, \"name\", \"size\"))) :\r\n            editFiles && Object.values(editFiles).length > 0 ?\r\n               attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\"\r\n      } else {\r\n         files = editFiles && Object.values(editFiles).length > 0 ?\r\n            attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\"\r\n      }\r\n\r\n   }\r\n   else {\r\n      if (typeof editFiles[fileName] !== \"string\") {\r\n         let list = editFiles[fileName]\r\n         files = list && list.length > 0 ? list.map(file => (\r\n            attachmentData(file, file.path, \"name\", \"size\")\r\n         )) : editFiles && Object.values(editFiles).length > 0 ?\r\n            attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\"\r\n      } else {\r\n         files = editFiles && Object.values(editFiles).length > 0 ?\r\n            attachmentData(editFiles, \"filekeyname\", fileName, fileSizeName) : \"\"\r\n      }\r\n   }\r\n\r\n   function nameLengthValidator(file) {\r\n      const fileNameLength = 100;\r\n      if (file.name.length >= fileNameLength) {\r\n        return {\r\n          code: \"name-too-large\",\r\n          message: `${file.name} ${props.intl.formatMessage({ id: \"IDS_NAMEGREATERTHAN\" })} ${fileNameLength} ${props.intl.formatMessage({ id: \"IDS_CHARACTERS\" })}`\r\n        };\r\n      }\r\n    \r\n      return null\r\n    }\r\n\r\n   function attachmentData(file, keyname, filename, size) {\r\n      let fileExtension = \"\";\r\n      if (filename !== \"\" && file[filename] !== undefined && file[filename] !== \"\") {\r\n         if (typeof file[filename] === \"object\") {\r\n            if (file[filename].length > 0) {\r\n               const splittedFileName = file[filename][0][\"name\"].split('.');\r\n               fileExtension = file[filename][0][\"name\"].split('.')[splittedFileName.length - 1];\r\n            }\r\n         } else {\r\n            const splittedFileName = file[filename].split('.');\r\n            fileExtension = file[filename].split('.')[splittedFileName.length - 1];\r\n         }\r\n      }\r\n      if (fileExtension !== \"\") {\r\n         return (\r\n            <ListGroup.Item key={keyname}>\r\n               <Attachments>\r\n                  <Media className=\"align-items-center\">\r\n                     <Image\r\n                        width={40}\r\n                        height={40}\r\n                        className=\"mr-2\"\r\n                        src={getAttachedFileIcon(fileExtension)}\r\n                     />\r\n                     <Media.Body>\r\n                        <h5 className=\"mt-0 attachment-title\">{typeof file[filename] === \"object\" ? file[filename][0][\"name\"] : file[filename]}</h5>\r\n                        {size !== \"\" ? <div className=\"attachment-details\">{typeof file[filename] === \"object\" ? bytesToSize(file[filename][0][\"size\"]) : bytesToSize(file[size])}</div> : \"\"}\r\n                     </Media.Body>\r\n                     { \r\n                     //multiple ?\r\n                        <Nav.Link name=\"deleteAttachment\"\r\n                           className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                           //onClick = {deleteAttachment}\r\n                           onClick={(event) => deleteAttachment(event, file, fileName,index)}\r\n                        >\r\n                           <FontAwesomeIcon icon={faTrashAlt} />\r\n                        </Nav.Link>\r\n\r\n                    // :\"\"\r\n                     }\r\n                  </Media>\r\n               </Attachments>\r\n            </ListGroup.Item>\r\n         );\r\n      }\r\n   }\r\n\r\n   return (\r\n      <Dzwrap>\r\n         <Form.Group>\r\n            <Form.Label htmlFor={name}>{label}{isMandatory && <sup>*</sup>}</Form.Label>\r\n            <div {...getRootProps({ className: 'dropzone' })}>\r\n               <input {...getInputProps()} />\r\n               <DzMessage className=\"text-center\">\r\n                  <FontAwesomeIcon icon={faFileUpload} size=\"2x\" /> <br />\r\n                  <div><span className=\"text-uppercase font-weight-bold\">{`${props.intl.formatMessage({ id: \"IDS_DRAGANDDROP\" })}`}</span>\r\n                   <br /> {`${props.intl.formatMessage({ id: \"IDS_OR\" })}`} <span className=\"drop-link\">\r\n                      {`${props.intl.formatMessage({ id: \"IDS_CLICKHERE\" })}`}</span> {`${props.intl.formatMessage({ id: \"IDS_TOUPLOAD\" })}`}\r\n                  <br />{`(${props.intl.formatMessage({ id: \"IDS_MAXALLOWS\" })} \r\n                  ${maxFiles} ${props.intl.formatMessage({ id: \"IDS_FILESIZEOF\" })} \r\n                  ${maxSize} ${props.intl.formatMessage({ id: \"IDS_MB\" })})`}\r\n                  <br />{`(${props.intl.formatMessage({ id: \"IDS_MAXALLOWSFILENAMEOF\" })} \r\n                  ${100} ${props.intl.formatMessage({ id: \"IDS_CHARACTERS\" })})`}\r\n                   \r\n                  </div>\r\n\r\n               </DzMessage>\r\n            </div>\r\n            <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n               {fileRejectionItems.join(\",\")}\r\n            </Form.Control.Feedback>\r\n            <ListGroup variant=\"flush\">\r\n               {files}\r\n            </ListGroup>\r\n         </Form.Group>\r\n      </Dzwrap>\r\n   );\r\n}\r\n\r\nexport default injectIntl(DropZone);"]},"metadata":{},"sourceType":"module"}