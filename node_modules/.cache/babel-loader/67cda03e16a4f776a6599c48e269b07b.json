{"ast":null,"code":"import React from'react';import{injectIntl}from'react-intl';import{faPencilAlt}from'@fortawesome/free-solid-svg-icons';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{Row,Col,Nav,FormGroup,FormLabel}from'react-bootstrap';import{ReadOnlyText}from'../../components/App.styles';import{parameterType}from'../../components/Enumeration';import PredefinedParameterTab from'../testmanagement/PredefinedParameterTab';import{faEye}from'@fortawesome/free-regular-svg-icons';// import { Tooltip } from '@progress/kendo-react-tooltip';\nimport ReactTooltip from'react-tooltip';var TestGroupParameterAccordion=function TestGroupParameterAccordion(props){var parameterFieldName=[{\"stestname\":\"IDS_TESTNAME\"},{\"sparametersynonym\":\"IDS_PARAMETERSYNONYM\"},{\"sdisplaystatus\":\"IDS_PARAMETERTYPE\"},{\"nroundingdigits\":\"IDS_ROUNDINGDIGITS\",\"nparametertypecode\":parameterType.NUMERIC},{\"sunitname\":\"IDS_UNIT\",\"nparametertypecode\":parameterType.NUMERIC},{\"schecklistname\":\"IDS_CHECKLISTNAME\"},{\"nsorter\":\"IDS_SORTER\"},{\"schecklistversionname\":\"IDS_CHECKLISTVERSION\"},{\"sreportmandatory\":\"IDS_REPORTMANDATORY\"},{\"sresultmandatory\":\"IDS_RESULTMANDATORY\"},{\"sspecdesc\":\"IDS_SPECDESCRIPTION\"}];var specLimitFieldName=[// {\"sdisregard\": \"IDS_DISREGARDED\"}, {\"sminlod\": \"IDS_MINLOD\"}, {\"smaxlod\": \"IDS_MAXLOD\"}, \n{\"sminb\":\"IDS_MINB\"},{\"smaxb\":\"IDS_MAXB\"},// {\"smina\": \"IDS_MINA\"}, {\"smaxa\": \"IDS_MAXA\"}, {\"sminloq\": \"IDS_MINLOQ\"}, {\"smaxloq\": \"IDS_MAXLOQ\"}, \n{\"sresultvalue\":\"IDS_DEFAULTRESULT\"}];var formulaFieldName=[{\"sformulaname\":\"IDS_FORMULANAME\"},{\"sformulacalculationdetail\":\"IDS_FORMULA\"}];var editParameterId=props.controlMap&&props.controlMap.has(\"EditParameter\")&&props.controlMap.get(\"EditParameter\").ncontrolcode;var editViewCLId=props.controlMap&&props.controlMap.has(\"EditParameter\")&&props.controlMap.get(\"EditParameter\").ncontrolcode;var selectedParameter=props.selectedParameter,userInfo=props.userInfo,userRoleControlRights=props.userRoleControlRights,testGroupTestFormula=props.testGroupTestFormula,testGroupTestNumericParameter=props.testGroupTestNumericParameter,testGroupTestPredefinedParameter=props.testGroupTestPredefinedParameter,testGroupCharParameter=props.testGroupCharParameter,selectedSpecification=props.selectedSpecification;var viewCheckListParam={nchecklistversioncode:selectedParameter.nchecklistversioncode,flag:1,ntransactionresultcode:0,userinfo:userInfo};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12,className:\"d-flex justify-content-end\"},/*#__PURE__*/React.createElement(ReactTooltip,{place:\"bottom\",globalEventOff:\"click\"}),selectedParameter&&selectedParameter.nchecklistversioncode!==-1&&/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2\",hidden:userRoleControlRights.indexOf(editViewCLId)===-1,onClick:function onClick(){return props.viewTestGroupCheckList(viewCheckListParam);},\"data-tip\":props.intl.formatMessage({id:\"IDS_VIEW\"})},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faEye})),/*#__PURE__*/React.createElement(Nav.Link,{className:\"btn btn-circle outline-grey mr-2\",hidden:userRoleControlRights.indexOf(editParameterId)===-1,\"data-tip\":props.intl.formatMessage({id:\"IDS_EDIT\"}),onClick:function onClick(){return props.editTestGroupParameter(\"update\",selectedParameter,userInfo,editParameterId,selectedSpecification);}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faPencilAlt})))),/*#__PURE__*/React.createElement(Row,null,parameterFieldName.map(function(item){return item.nparametertypecode===undefined||item.nparametertypecode&&item.nparametertypecode===props.testgrouptestparameter.nparametertypecode?/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,props.intl.formatMessage({id:Object.values(item)[0]})),/*#__PURE__*/React.createElement(ReadOnlyText,null,selectedParameter[Object.keys(item)[0]]))):\"\";})),selectedParameter.nparametertypecode===parameterType.NUMERIC&&/*#__PURE__*/React.createElement(React.Fragment,null,testGroupTestNumericParameter&&testGroupTestNumericParameter.length>0&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"div\",{className:\"horizontal-line\"}))),/*#__PURE__*/React.createElement(Row,null,specLimitFieldName.map(function(item){return/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,props.intl.formatMessage({id:Object.values(item)[0]})),/*#__PURE__*/React.createElement(ReadOnlyText,null,testGroupTestNumericParameter[0][Object.keys(item)[0]])));}))),testGroupTestFormula&&testGroupTestFormula.length>0&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"div\",{className:\"horizontal-line\"}))),/*#__PURE__*/React.createElement(Row,null,formulaFieldName.map(function(item){return/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,props.intl.formatMessage({id:Object.values(item)[0]})),/*#__PURE__*/React.createElement(ReadOnlyText,null,testGroupTestFormula[0][Object.keys(item)[0]])));})))),selectedParameter.nparametertypecode===parameterType.PREDEFINED&&/*#__PURE__*/React.createElement(PredefinedParameterTab,{primaryKeyName:\"ntestgrouptestpredefcode\",predefinedParameterList:testGroupTestPredefinedParameter,selectedParameter:selectedParameter,userInfo:userInfo,optionalData:{testgroupspecification:selectedSpecification},methodUrl:\"TestGroupPredefParameter\",addId:props.controlMap.has(\"AddCodedResult\")&&props.controlMap.get(\"AddCodedResult\").ncontrolcode,editId:props.controlMap.has(\"EditCodedResult\")&&props.controlMap.get(\"EditCodedResult\").ncontrolcode,deleteId:props.controlMap.has(\"DeleteCodedResult\")&&props.controlMap.get(\"DeleteCodedResult\").ncontrolcode,userRoleControlRights:props.userRoleControlRights,deleteAction:props.deleteAction,onSwitchChange:props.onSwitchChange,openModal:props.addTestGroupCodedResult}),selectedParameter.nparametertypecode===parameterType.CHARACTER&&testGroupCharParameter.length>0&&props.testGroupCharParameter[0].scharname&&props.testGroupCharParameter[0].scharname!==\"null\"&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(\"div\",{className:\"horizontal-line\"}))),/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(FormLabel,null,props.intl.formatMessage({id:\"IDS_TESTCHARACTER\"})),/*#__PURE__*/React.createElement(ReadOnlyText,null,props.testGroupCharParameter[0].scharname)))));};export default injectIntl(TestGroupParameterAccordion);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/testgroup/TestGroupParameterAccordion.jsx"],"names":["React","injectIntl","faPencilAlt","FontAwesomeIcon","Row","Col","Nav","FormGroup","FormLabel","ReadOnlyText","parameterType","PredefinedParameterTab","faEye","ReactTooltip","TestGroupParameterAccordion","props","parameterFieldName","NUMERIC","specLimitFieldName","formulaFieldName","editParameterId","controlMap","has","get","ncontrolcode","editViewCLId","selectedParameter","userInfo","userRoleControlRights","testGroupTestFormula","testGroupTestNumericParameter","testGroupTestPredefinedParameter","testGroupCharParameter","selectedSpecification","viewCheckListParam","nchecklistversioncode","flag","ntransactionresultcode","userinfo","indexOf","viewTestGroupCheckList","intl","formatMessage","id","editTestGroupParameter","map","item","nparametertypecode","undefined","testgrouptestparameter","Object","values","keys","length","PREDEFINED","testgroupspecification","deleteAction","onSwitchChange","addTestGroupCodedResult","CHARACTER","scharname"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Row, Col, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport { parameterType } from '../../components/Enumeration';\r\nimport PredefinedParameterTab from '../testmanagement/PredefinedParameterTab';\r\nimport { faEye } from '@fortawesome/free-regular-svg-icons';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst TestGroupParameterAccordion = (props) => {\r\n\r\n    const parameterFieldName = [{ \"stestname\": \"IDS_TESTNAME\" },\r\n    { \"sparametersynonym\": \"IDS_PARAMETERSYNONYM\" },\r\n    { \"sdisplaystatus\": \"IDS_PARAMETERTYPE\" },\r\n    { \"nroundingdigits\": \"IDS_ROUNDINGDIGITS\", \"nparametertypecode\": parameterType.NUMERIC },\r\n    { \"sunitname\": \"IDS_UNIT\", \"nparametertypecode\": parameterType.NUMERIC },\r\n    { \"schecklistname\": \"IDS_CHECKLISTNAME\" },\r\n    { \"nsorter\": \"IDS_SORTER\" },\r\n    { \"schecklistversionname\": \"IDS_CHECKLISTVERSION\" },\r\n    { \"sreportmandatory\": \"IDS_REPORTMANDATORY\" }, { \"sresultmandatory\": \"IDS_RESULTMANDATORY\" },\r\n    { \"sspecdesc\": \"IDS_SPECDESCRIPTION\" }\r\n    ];\r\n\r\n\r\n    const specLimitFieldName = [\r\n        // {\"sdisregard\": \"IDS_DISREGARDED\"}, {\"sminlod\": \"IDS_MINLOD\"}, {\"smaxlod\": \"IDS_MAXLOD\"}, \r\n        { \"sminb\": \"IDS_MINB\" }, { \"smaxb\": \"IDS_MAXB\" },\r\n        // {\"smina\": \"IDS_MINA\"}, {\"smaxa\": \"IDS_MAXA\"}, {\"sminloq\": \"IDS_MINLOQ\"}, {\"smaxloq\": \"IDS_MAXLOQ\"}, \r\n        { \"sresultvalue\": \"IDS_DEFAULTRESULT\" }\r\n    ];\r\n    const formulaFieldName = [{ \"sformulaname\": \"IDS_FORMULANAME\" }, { \"sformulacalculationdetail\": \"IDS_FORMULA\" }];\r\n    const editParameterId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\r\n    const editViewCLId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\r\n    const { selectedParameter, userInfo, userRoleControlRights, testGroupTestFormula, testGroupTestNumericParameter,\r\n        testGroupTestPredefinedParameter, testGroupCharParameter, selectedSpecification } = props;\r\n    const viewCheckListParam = { nchecklistversioncode: selectedParameter.nchecklistversioncode, flag: 1, ntransactionresultcode: 0, userinfo: userInfo };\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={12} className=\"d-flex justify-content-end\">\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true} > */}\r\n                    {selectedParameter && selectedParameter.nchecklistversioncode !== -1 &&\r\n                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" hidden={userRoleControlRights.indexOf(editViewCLId) === -1}\r\n                            onClick={() => props.viewTestGroupCheckList(viewCheckListParam)}\r\n                            data-tip={props.intl.formatMessage({ id: \"IDS_VIEW\" })}>\r\n                            <FontAwesomeIcon icon={faEye} />\r\n                        </Nav.Link>\r\n                    }\r\n                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                        hidden={userRoleControlRights.indexOf(editParameterId) === -1}\r\n                        data-tip={props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                        onClick={() => props.editTestGroupParameter(\"update\", selectedParameter, userInfo, editParameterId, selectedSpecification)}>\r\n                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                    </Nav.Link>\r\n                    {/* </Tooltip> */}\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n            <Row>\r\n\r\n                {parameterFieldName.map(item => {\r\n                    return (\r\n                        item.nparametertypecode === undefined\r\n                            || (item.nparametertypecode\r\n                                && item.nparametertypecode === props.testgrouptestparameter.nparametertypecode) ?\r\n                            <Col md=\"6\">\r\n                                <FormGroup>\r\n                                    <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                    <ReadOnlyText>{selectedParameter[Object.keys(item)[0]]}</ReadOnlyText>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            : \"\"\r\n\r\n                    )\r\n                }\r\n                )}\r\n            </Row>\r\n\r\n            {/* <ListGroup as=\"ul\">\r\n            {parameterFieldName.map(item=> {\r\n                return (\r\n                <ListGroup.Item as=\"li\">\r\n                     <Media>\r\n                        <Media.Body>\r\n                            <MediaSubHeader>\r\n                                                            <MediaLabel>{props.intl.formatMessage({id: \"IDS_MINLOD\"})}{\": \"}</MediaLabel>{specitem.sminlod}\r\n                                                            <MediaLabel className=\"seperator\">|</MediaLabel>\r\n                                                            <MediaLabel>{props.intl.formatMessage({id: \"IDS_MAXLOD\"})}{\": \"}</MediaLabel>{specitem.smaxlod}\r\n                                                        </MediaSubHeader>\r\n                        </Media.Body>\r\n                    </Media>\r\n                </ListGroup.Item>\r\n                )\r\n            })}\r\n            </ListGroup> */}\r\n            { selectedParameter.nparametertypecode === parameterType.NUMERIC &&\r\n                <>\r\n                    { testGroupTestNumericParameter && testGroupTestNumericParameter.length > 0 &&\r\n                        <>\r\n                            <Row>\r\n                                <Col >\r\n                                    <div className=\"horizontal-line\"></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                {specLimitFieldName.map(item => {\r\n                                    return (\r\n                                        <Col md=\"4\">\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                                <ReadOnlyText>{testGroupTestNumericParameter[0][Object.keys(item)[0]]}</ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    )\r\n                                })}\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                    { testGroupTestFormula && testGroupTestFormula.length > 0 &&\r\n                        <>\r\n                            <Row>\r\n                                <Col >\r\n                                    <div className=\"horizontal-line\"></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                {formulaFieldName.map(item => {\r\n                                    return (\r\n                                        <Col md=\"6\">\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                                <ReadOnlyText>{testGroupTestFormula[0][Object.keys(item)[0]]}</ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    )\r\n                                })}\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                </>\r\n            }\r\n            { selectedParameter.nparametertypecode === parameterType.PREDEFINED &&\r\n                <PredefinedParameterTab\r\n                    primaryKeyName=\"ntestgrouptestpredefcode\"\r\n                    predefinedParameterList={testGroupTestPredefinedParameter}\r\n                    selectedParameter={selectedParameter}\r\n                    userInfo={userInfo}\r\n                    optionalData={{ testgroupspecification: selectedSpecification }}\r\n                    methodUrl=\"TestGroupPredefParameter\"\r\n                    addId={props.controlMap.has(\"AddCodedResult\") && props.controlMap.get(\"AddCodedResult\").ncontrolcode}\r\n                    editId={props.controlMap.has(\"EditCodedResult\") && props.controlMap.get(\"EditCodedResult\").ncontrolcode}\r\n                    deleteId={props.controlMap.has(\"DeleteCodedResult\") && props.controlMap.get(\"DeleteCodedResult\").ncontrolcode}\r\n                    userRoleControlRights={props.userRoleControlRights}\r\n                    deleteAction={props.deleteAction}\r\n                    onSwitchChange={props.onSwitchChange}\r\n                    openModal={props.addTestGroupCodedResult}\r\n                />\r\n            }\r\n            { selectedParameter.nparametertypecode === parameterType.CHARACTER &&\r\n                testGroupCharParameter.length > 0 && props.testGroupCharParameter[0].scharname &&\r\n                props.testGroupCharParameter[0].scharname !== \"null\" &&\r\n                <>\r\n                    <Row>\r\n                        <Col >\r\n                            <div className=\"horizontal-line\"></div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Col md={12}>\r\n                        <FormGroup>\r\n                            <FormLabel>{props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}</FormLabel>\r\n                            <ReadOnlyText>{props.testGroupCharParameter[0].scharname}</ReadOnlyText>\r\n                        </FormGroup>\r\n                    </Col>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(TestGroupParameterAccordion);\r\n"]},"metadata":{},"sourceType":"module"}