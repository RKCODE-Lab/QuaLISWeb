{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\SampleProcessing.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport AddSampleProcessing from '../storagemanagement//AddSampleProcessing';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { SampleCycle, transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { callService, crudMaster, updateStore, validateEsignCredential, getComboSampleProcessing, getBarcodeDataDetails, getSampleProcessType, getProcessduration, saveSampleProcessing, getActiveSampleProcessingById, getSampleProcessing, validateEsignCredentialSampleProcessing } from '../../actions';\nimport { sortData, getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat, constructOptionList, Lims_JSON_stringify, formatInputDate, showEsign } from '../../components/CommonScript';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SampleProcessing extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'update') {\n        this.props.validateEsignCredentialSampleProcessing(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo,\n          \"fromDate\": fromDate,\n          \"toDate\": toDate,\n          \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1,\n          \"nsampleprocessingcode\": deleteParam.selectedRecord['nsampleprocessingcode'],\n          \"sbarcodeid\": deleteParam.selectedRecord['sbarcodeid']\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let alertMessage;\n      const sbarcodeid = this.props.Login.masterData.barcodedata;\n\n      if (selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength)) {\n        let invalidbarcode = selectedRecord[\"sbarcodeid\"].substring(1, 2);\n\n        if (parseInt(invalidbarcode) === SampleCycle.PROCESSING) {\n          if (sbarcodeid != undefined && sbarcodeid != '') {\n            let date1;\n            let date2;\n            let diffenecemill;\n            let differenceInMinutes;\n            let flag = false;\n\n            if (selectedRecord[\"dprocessenddate\"] !== undefined && selectedRecord[\"dprocessenddate\"] !== \"\" && selectedRecord[\"dprocessenddate\"] !== null) {\n              date1 = new Date(formatInputDate(selectedRecord[\"dprocessstartdate\"], false));\n              date2 = new Date(formatInputDate(selectedRecord[\"dprocessenddate\"], false));\n              diffenecemill = date2 - date1;\n              differenceInMinutes = diffenecemill / (1000 * 60);\n              let nngracetimetime;\n              let nprocesstime;\n              nngracetimetime = parseInt(selectedRecord['ngracetime']) + parseInt(selectedRecord['nprocesstime']);\n              nprocesstime = parseInt(selectedRecord['nprocesstime']);\n\n              if (differenceInMinutes > nngracetimetime) {\n                if (selectedRecord[\"sdeviationcomments\"] === undefined || selectedRecord[\"sdeviationcomments\"] === \"\") {\n                  flag = true;\n                  alertMessage = \"IDS_DEVIATIONCOMMENTS\";\n                }\n              } else if (differenceInMinutes > nprocesstime) {\n                if (selectedRecord[\"scomments\"] === undefined || selectedRecord[\"scomments\"] === \"\") {\n                  flag = true;\n                  alertMessage = \"IDS_COMMENTS\";\n                }\n              }\n            }\n\n            if (!flag) {\n              let inputData = {};\n              inputData[\"sampleprocessing\"] = {};\n\n              if (this.props.Login.operation === \"create\") {\n                inputData[\"sampleprocessing\"][\"nsamplecollectiontypecode\"] = selectedRecord[\"nsamplecollectiontypecode\"] ? selectedRecord[\"nsamplecollectiontypecode\"] : -1;\n                inputData[\"sampleprocessing\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] ? selectedRecord[\"nproductcode\"].value : -1;\n                inputData[\"sampleprocessing\"][\"ncollectiontubetypecode\"] = selectedRecord[\"ncollectiontubetypecode\"] ? selectedRecord[\"ncollectiontubetypecode\"].value : -1;\n                inputData[\"sampleprocessing\"][\"jsondata\"] = Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.barcodedata));\n                let listProcessType = [...this.state.selectedRecord[\"processtype\"]];\n                const removeIndex = listProcessType.findIndex(item => {\n                  return item.value === parseInt(selectedRecord[\"nprocesstypecode\"].value);\n                });\n\n                if (removeIndex !== -1) {\n                  listProcessType.splice(removeIndex, listProcessType.length);\n\n                  if (listProcessType.length > 0) {\n                    inputData = { ...inputData,\n                      \"listOfnsampleprocesstypecode\": listProcessType.map(item => item.item.nsampleprocesstypecode).join(','),\n                      \"nsampleprocesstypecode\": selectedRecord[\"nsampleprocesstypecode\"],\n                      \"nprocesstypelength\": listProcessType.length\n                    };\n                  } else {\n                    inputData = { ...inputData,\n                      \"listOfnsampleprocesstypecode\": selectedRecord[\"nsampleprocesstypecode\"],\n                      \"nsampleprocesstypecode\": selectedRecord[\"nsampleprocesstypecode\"],\n                      \"isSingleProcesstype\": true,\n                      \"nprocesstypelength\": 1\n                    };\n                  }\n                }\n              }\n\n              inputData[\"sampleprocessing\"][\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\n\n              if (this.props.Login.operation === \"update\") {\n                inputData[\"sampleprocessing\"][\"nsampleprocessingcode\"] = this.props.Login.selectedId;\n              }\n\n              inputData[\"sampleprocessing\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\n              inputData[\"sampleprocessing\"][\"nsamplecollectiontypecode\"] = selectedRecord[\"nsamplecollectiontypecode\"] ? selectedRecord[\"nsamplecollectiontypecode\"] : -1;\n              inputData[\"sampleprocessing\"][\"scomments\"] = selectedRecord[\"scomments\"] && selectedRecord[\"scomments\"] || \"\";\n              inputData[\"sampleprocessing\"][\"sdeviationcomments\"] = selectedRecord[\"sdeviationcomments\"] && selectedRecord[\"sdeviationcomments\"] || \"\";\n              inputData[\"sampleprocessing\"][\"dprocessstartdate\"] = formatInputDate(selectedRecord[\"dprocessstartdate\"], false);\n              inputData[\"sampleprocessing\"][\"ntzprocessstartdate\"] = selectedRecord[\"ntzprocessstartdate\"] && selectedRecord[\"ntzprocessstartdate\"].value || transactionStatus.NA;\n              inputData[\"sampleprocessing\"][\"noffsetdprocessstartdate\"] = selectedRecord[\"noffsetdprocessenddate\"] && selectedRecord[\"noffsetdprocessenddate\"].value || transactionStatus.NA;\n              inputData[\"sampleprocessing\"][\"nsampleprocesstypecode\"] = selectedRecord[\"nsampleprocesstypecode\"] ? selectedRecord[\"nsampleprocesstypecode\"] : -1;\n              inputData[\"sampleprocessing\"][\"noffsetdprocessenddate\"] = selectedRecord[\"noffsetdprocessenddate\"] && selectedRecord[\"noffsetdprocessenddate\"].value || transactionStatus.NA;\n              inputData[\"sampleprocessing\"][\"ntzprocessenddate\"] = selectedRecord[\"ntzprocessenddate\"] && selectedRecord[\"ntzprocessenddate\"].value || transactionStatus.NA;\n\n              if (selectedRecord[\"dprocessenddate\"] !== undefined && selectedRecord[\"dprocessenddate\"] !== \"\" && selectedRecord[\"dprocessenddate\"] !== null) {\n                inputData[\"sampleprocessing\"][\"dprocessenddate\"] = formatInputDate(selectedRecord[\"dprocessenddate\"], false);\n              }\n\n              let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n              let fromDate = obj.fromDate;\n              let toDate = obj.toDate;\n              inputData[\"fromDate\"] = fromDate;\n              inputData[\"toDate\"] = toDate;\n              inputData[\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\n              inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n                sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n                smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\n              };\n              const inputParam = {\n                nformcode: this.props.Login.userInfo.nformcode,\n                classUrl: \"storagesampleprocessing\",\n                methodUrl: \"SampleProcessing\",\n                inputData: inputData,\n                operation: this.props.Login.operation,\n                saveType,\n                formRef,\n                selectedRecord: this.state.selectedRecord || {}\n              };\n              const masterData = this.props.Login.masterData;\n\n              if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n                const updateInfo = {\n                  typeName: DEFAULT_RETURN,\n                  data: {\n                    loadEsign: true,\n                    screenData: {\n                      inputParam,\n                      masterData\n                    },\n                    saveType\n                  }\n                };\n                this.props.updateStore(updateInfo);\n              } else {\n                this.props.saveSampleProcessing(inputParam, masterData);\n              }\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_ENTER\"\n              }) + \" \" + this.props.intl.formatMessage({\n                id: alertMessage\n              }));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_CLICKENTERTOJSONRECORD\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INVALIDBARCODEID\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INVALIDBARCODELENGTH\"\n        }));\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === 'nprojecttypecode') {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: parseInt(comboData.value),\n          selectedProjectType: comboData,\n          toDate: toDate,\n          fromDate: fromDate\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        const inputParam = {\n          masterData,\n          inputData\n        };\n        this.props.getSampleProcessing(inputParam);\n      }\n      /*  if (fieldName === \"nproductcode\") {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            selectedRecord={...selectedRecord,\"nproductcode\":comboData}\r\n            const inputParam = { masterData, inputData,selectedRecord }\r\n            this.props.getCollectionTubeType(inputParam)\r\n        } else {*/\n\n\n      if (fieldName === \"ncollectiontubetypecode\" && selectedRecord['nproductcode'] !== undefined) {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\n          nproductcode: selectedRecord['nproductcode'] && selectedRecord['nproductcode'].value || -1,\n          nsamplecollectiontypecode: selectedRecord['nsamplecollectiontypecode'] && selectedRecord['nsamplecollectiontypecode'] || -1,\n          ncollectiontubetypecode: parseInt(comboData.value),\n          toDate: toDate,\n          fromDate: fromDate\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        selectedRecord = { ...selectedRecord,\n          [fieldName]: comboData\n        };\n        const inputParam = {\n          masterData,\n          inputData,\n          selectedRecord\n        };\n        this.props.getSampleProcessType(inputParam);\n      } else if (fieldName === \"nproductcode\" && selectedRecord['ncollectiontubetypecode'] !== undefined) {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\n          nproductcode: parseInt(comboData.value),\n          nsamplecollectiontypecode: parseInt(comboData.item.nsamplecollectiontypecode),\n          ncollectiontubetypecode: selectedRecord['ncollectiontubetypecode'] && selectedRecord['ncollectiontubetypecode'].value || -1,\n          toDate: toDate,\n          fromDate: fromDate\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        selectedRecord = { ...selectedRecord,\n          [fieldName]: comboData,\n          \"nsamplecollectiontypecode\": parseInt(comboData.item.nsamplecollectiontypecode)\n        };\n        const inputParam = {\n          masterData,\n          inputData,\n          selectedRecord\n        };\n        this.props.getSampleProcessType(inputParam);\n      } else if (fieldName === \"nprocesstypecode\") {\n        let inputData = [];\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\n          nproductcode: selectedRecord['nproductcode'] && selectedRecord['nproductcode'].value || -1,\n          ncollectiontubetypecode: selectedRecord['ncollectiontubetypecode'] && selectedRecord['ncollectiontubetypecode'].value,\n          nsamplecollectiontypecode: selectedRecord['nsamplecollectiontypecode'] && selectedRecord['nsamplecollectiontypecode'] || -1,\n          nprocesstypecode: parseInt(comboData.value),\n          toDate: toDate,\n          fromDate: fromDate\n        };\n        const masterData = { ...this.props.Login.masterData\n        };\n        selectedRecord = { ...selectedRecord,\n          \"nprocesstypecode\": comboData\n        };\n        const inputParam = {\n          masterData,\n          inputData,\n          selectedRecord\n        };\n        this.props.getProcessduration(inputParam);\n      } else {\n        selectedRecord[fieldName] = comboData;\n\n        if (fieldName === \"nproductcode\") {\n          selectedRecord = { ...selectedRecord,\n            \"nsamplecollectiontypecode\": comboData.item.nsamplecollectiontypecode\n          };\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } //  }\n\n    };\n\n    this.handleDateChangeSlidout = (dateName, dateValue) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n      /* if (selectedRecord[\"sbarcodeid\"] !== undefined) {\r\n            let inputData = {};\r\n            inputData[\"sampleprocessing\"] = {};\r\n          if (dateName === \"dprocessenddate\") {\r\n                inputData[\"sampleprocessing\"][\"dprocessenddate\"] = formatInputDate(dateValue, false);\r\n                inputData[\"sampleprocessing\"][\"nsampleprocesstypecode\"] = selectedRecord[\"nsampleprocesstypecode\"] ? selectedRecord[\"nsampleprocesstypecode\"] : -1;\r\n                inputData[\"sampleprocessing\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\r\n                inputData[\"userinfo\"] = {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                }\r\n                selectedRecord = { ...selectedRecord, [dateName]: dateValue }\r\n                    const inputParam = {\r\n                    nformcode: this.props.Login.userInfo.nformcode,\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    selectedRecord: selectedRecord,\r\n                    masterData: this.props.Login.masterData\r\n                    }\r\n                this.props.getCommentsDeviation(inputParam)\r\n            }\r\n            else {\r\n                  \r\n            }\r\n        } else {\r\n                toast.warn(this.props.intl.formatMessage({\r\n                id: \"IDS_ENTER\",\r\n            }) +\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_BARCODEID\",\r\n                })\r\n            );\r\n            }\r\n      */\n    };\n\n    this.autoSaveGetDataProcessing = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n      event.stopPropagation(); //ALPD-4701--Vignesh R(21-08-2024)\n\n      if (event.keyCode === 13) {\n        if (selectedRecord['ncollectiontubetypecode'] && selectedRecord['nproductcode'] && selectedRecord['nprocesstypecode']) {\n          if (parseInt(selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length) === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength) && event.keyCode === 13) {\n            let invalidbarcode = event.target.value.substring(1, 2);\n\n            if (parseInt(invalidbarcode) === SampleCycle.PROCESSING) {\n              let inputParam = {\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\n                spositionvalue: event.target.value,\n                userinfo: this.props.Login.userInfo,\n                nbarcodeLength: parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength),\n                jsondata: {},\n                masterData: this.props.Login.masterData,\n                selectedRecord: selectedRecord || {}\n              };\n              this.props.getBarcodeDataDetails(inputParam);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_INVALIDBARCODEID\"\n              }));\n            }\n          }\n        } else {\n          event.stopPropagation();\n\n          if (selectedRecord['nproductcode'] === undefined) {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECT\"\n            }) + this.props.intl.formatMessage({\n              id: \"IDS_SAMPLETYPE\"\n            }));\n          } else if (selectedRecord['ncollectiontubetypecode'] === undefined) {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECT\"\n            }) + this.props.intl.formatMessage({\n              id: \"IDS_COLLECTIONTUBETYPENAME\"\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECT\"\n            }) + this.props.intl.formatMessage({\n              id: \"IDS_PROCESSTYPENAME\"\n            }));\n          }\n        }\n      }\n    };\n\n    this.onInputOnChange = (event, fieldname) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      if (dateName === 'todate') {\n        selectedRecord[dateName] = dateValue;\n      } else {\n        selectedRecord[dateName] = dateValue;\n      }\n\n      selectedRecord[dateName] = dateValue; // this.setState({ selectedRecord });\n      // this.reloadData(selectedRecord, true);\n\n      let dateObj = {};\n      let obj = convertDateValuetoString(selectedRecord['fromdate'] && selectedRecord['fromdate'] || this.props.Login.masterData.FromDate, selectedRecord['todate'] && selectedRecord['todate'] || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: fromDate,\n          toDate: toDate,\n          nprojecttypecode: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.value || -1\n        }\n      };\n      this.props.getSampleProcessing(inputParam);\n    };\n\n    this.reloadData = () => {\n      //this.searchRef.current.value = \"\";\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1 // currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\n\n        },\n        classUrl: 'storagesampleprocessing',\n        methodUrl: \"SampleProcessing\",\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {}\n      };\n      this.props.getSampleProcessing(inputParam);\n    };\n\n    this.searchRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showSaveContinue: true\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  gridfillingColumn(data, barcodeFields) {\n    //  const tempArray = [];\n    const temparray1 = [{\n      idsName: 'IDS_BARCODEID',\n      dataField: 'sbarcodeid',\n      width: '250px',\n      controlType: 'textinput'\n    }, {\n      idsName: 'IDS_SAMPLETYPE',\n      dataField: 'sproductname',\n      width: '250px',\n      controlType: 'selectbox'\n    }, {\n      idsName: 'IDS_PROCESSTYPENAME',\n      dataField: 'sprocesstypename',\n      width: '250px',\n      controlType: 'selectbox'\n    }, {\n      idsName: 'IDS_PROCESSDURATION',\n      dataField: 'sprocessduration',\n      width: '250px',\n      controlType: 'selectbox'\n    }, {\n      idsName: 'IDS_GRACEDURATION',\n      dataField: 'sgraceduration',\n      width: '250px',\n      controlType: 'selectbox'\n    }, {\n      idsName: 'IDS_STARTDATEANDTIME',\n      dataField: 'sprocessstartdate',\n      width: '250px'\n    }, {\n      idsName: 'IDS_ENDDATEANDTIME',\n      dataField: 'sprocessenddate',\n      width: '250px'\n    }];\n    this.mandatoryColumns = [{\n      \"mandatory\": true,\n      \"idsName\": 'IDS_SAMPLETYPE',\n      dataField: 'nproductcode',\n      width: '250px',\n      mandatoryLabel: 'IDS_SELECT',\n      controlType: 'selectbox'\n    }, {\n      \"mandatory\": true,\n      \"idsName\": 'IDS_COLLECTIONTUBETYPENAME',\n      dataField: 'ncollectiontubetypecode',\n      width: '250px',\n      mandatoryLabel: 'IDS_SELECT',\n      controlType: 'selectbox'\n    }, {\n      \"mandatory\": true,\n      \"idsName\": 'IDS_PROCESSTYPENAME',\n      dataField: 'nprocesstypecode',\n      width: '250px',\n      mandatoryLabel: 'IDS_SELECT',\n      controlType: 'selectbox'\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_BARCODEID\",\n      \"dataField\": \"sbarcodeid\",\n      \"width\": \"250px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textinput\"\n    }];\n    this.mandatoryColumns.push(!(this.props.Login.masterData.sprocessstartdatesecondtime && this.props.Login.masterData.sprocessstartdatesecondtime) ? {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_STARTDATEANDTIME\",\n      \"dataField\": \"dprocessstartdate\",\n      \"width\": \"250px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    } : {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ENDDATEANDTIME\",\n      \"dataField\": \"dprocessenddate\",\n      \"width\": \"250px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    });\n    let temparray2 = [];\n    barcodeFields && barcodeFields.forEach(barcodeItem => {\n      data && data.forEach(dataItem => {\n        const entries = Object.entries(dataItem.jsondata);\n\n        if (entries.length > 0) {\n          entries.forEach(([key]) => {\n            const keyExists = temparray2.some(column => column.idsName === key);\n\n            if (!keyExists) {\n              //    if ('Visit Number' === key || 'Participant ID' === key) {\n              if (barcodeItem.sfieldname === key) {\n                temparray2.push({\n                  idsName: key,\n                  dataField: key,\n                  width: '250px'\n                });\n              }\n            }\n          });\n        }\n      });\n    });\n    const newArray = [...temparray1, ...temparray2];\n    newArray.push({\n      idsName: 'IDS_COMMENTS',\n      dataField: 'scomments',\n      width: '250px'\n    }, {\n      idsName: 'IDS_DEVIATIONCOMMENTS',\n      dataField: 'sdeviationcomments',\n      width: '250px'\n    });\n    return newArray;\n  }\n\n  render() {\n    /* console.log(\"SampleProcessing\", this.props.Login.masterData.SampleProcessing);\r\n     console.log(\"extractedColumnList\", this.extractedColumnList);\r\n     console.log(\"SampleProcessing-Data\", this.state.data);*/\n    let fromDate = \"\";\n    let toDate = \"\";\n    const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing || [], this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields);\n    this.extractedColumnList = extractedColumnList;\n    const addId = this.state.controlMap.has(\"AddSampleProcessing\") && this.state.controlMap.get(\"AddSampleProcessing\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditSampleProcessing\") && this.state.controlMap.get(\"EditSampleProcessing\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteSampleProcessing\") && this.state.controlMap.get(\"DeleteSampleProcessing\").ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.displayName,\n      operation: \"update\",\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      primaryKeyField: \"nsampleprocessingcode\",\n      selectedRecord: this.state.selectedRecord || {},\n      dataState: this.state.dataState\n    };\n    const addParam = {\n      screenName: this.props.Login.displayName,\n      primaryKeyField: \"nsampleprocessingcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId,\n      selectedRecord: this.state.selectedRecord,\n      masterData: this.props.Login.masterData\n    }; //\t\t//ALPD-4618--Vignesh R(01-08-2024)\n\n    const deleteParam = {\n      operation: \"delete\",\n      ncontrolcode: deleteId,\n      selectedRecord: this.state.selectedRecord\n    };\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"fromdate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FROM\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"fromdate\", date),\n      value: this.state.selectedRecord[\"fromdate\"] || fromDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DateTimePicker, {\n      name: \"todate\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_TO\"\n      }),\n      className: \"form-control\",\n      placeholderText: \"Select date..\",\n      selected: this.state.selectedRecord[\"todate\"] || toDate,\n      dateFormat: this.props.Login.userInfo.ssitedate,\n      isClearable: false,\n      onChange: date => this.handleDateChange(\"todate\", date),\n      value: this.state.selectedRecord[\"todate\"] || toDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isSearchable: true,\n      name: \"nprojecttypecode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      isClearable: false,\n      options: this.state.projectType,\n      value: this.state.selectedRecord[\"nprojecttypecode\"] && this.state.selectedRecord[\"nprojecttypecode\"] || this.props.Login.masterData.selectedProjectType,\n      defaultValue: this.state.selectedRecord[\"nprojecttypecode\"],\n      onChange: event => this.onComboChange(event, \"nprojecttypecode\"),\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 37\n      }\n    })), \"    \"), this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsampleprocessingcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      scrollable: \"scrollable\",\n      pageable: true,\n      isComponent: true,\n      gridHeight: '600px',\n      isToolBarRequired: true,\n      isActionRequired: true,\n      expandField: \"expanded\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getComboSampleProcessing(addParam),\n      deleteParam: deleteParam,\n      deleteRecord: this.deleteRecord,\n      fetchRecord: this.props.getActiveSampleProcessingById,\n      editParam: editParam,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      size: 'lg',\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.mandatoryColumns,\n      showSaveContinue: true,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddSampleProcessing, {\n        autoSaveGetDataProcessing: this.autoSaveGetDataProcessing,\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        formatMessage: this.props.intl.formatMessage,\n        operation: this.props.Login.operation,\n        sampletype: this.props.Login.sampletype,\n        collectiontubetype: this.props.Login.collectiontubetype,\n        userInfo: this.props.Login.userInfo,\n        handleDateChangeSlidout: this.handleDateChangeSlidout,\n        projectType: this.state.projectType,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      projectType\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      projectType = projectTypeMap.get(\"OptionList\");\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      projectType = projectTypeMap.get(\"OptionList\");\n      bool = true;\n    } // if (this.props.Login.masterData.SampleProcessing !== previousProps.Login.masterData.SampleProcessing) {\n    //     let samplecollect = [];\n    //     samplecollect = this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\n    //         const entries = Object.entries(sampleItem.jsondata);\n    //         if (entries.length > 0) {\n    //             const newItem = { ...sampleItem };\n    //             entries.forEach(([key, value]) => {\n    //                 newItem[key] = value;\n    //             });\n    //             return newItem;\n    //         }\n    //         return sampleItem;\n    //     });\n    //     let { dataState } = this.state;\n    //     if (dataState === undefined) {\n    //         dataState = { skip: 0, take: this.state.dataState.take }\n    //     }\n    //     if (this.state.dataResult.data) {\n    //         if (this.state.dataResult.data.length === 1) {\n    //             let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\n    //                 this.state.dataState.skip\n    //             dataState = { skip: skipcount, take: this.state.dataState.take }\n    //         }\n    //     }\n    //     this.setState({\n    //         data: samplecollect,\n    //         dataState,\n    //         dataResult: process(samplecollect || [], dataState),\n    //     });\n    // }\n\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        let sampleProcessing = [];\n        sampleProcessing = this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\n          const entries = Object.entries(sampleItem.jsondata);\n\n          if (entries.length > 0) {\n            const newItem = { ...sampleItem\n            };\n            entries.forEach(([key, value]) => {\n              newItem[key] = value;\n            });\n            return newItem;\n          }\n\n          return sampleItem;\n        });\n        let {\n          dataState\n        } = this.state;\n\n        if (dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: sampleProcessing,\n          dataState,\n          dataResult: process(sampleProcessing || [], dataState)\n        });\n      } else {\n        //jana ALPD-4694 Temporary Storage-->While Try to Delete the Records the Fields are Align Wrongly\n        let {\n          dataState\n        } = this.state;\n        let sampleProcessingdata = [];\n        sampleProcessingdata = this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\n          const entries = Object.entries(sampleItem.jsondata);\n\n          if (entries.length > 0) {\n            const newItem = { ...sampleItem\n            };\n            entries.forEach(([key, value]) => {\n              newItem[key] = value;\n            });\n            return newItem;\n          }\n\n          return sampleItem;\n        });\n\n        if (this.props.Login.dataState === undefined || this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: sampleProcessingdata,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(sampleProcessingdata || [], dataState),\n          dataState\n        });\n      }\n\n      if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\n        const retrievedData = sortData(this.props.Login.masterData.jsondataBarcodeFields, \"ascending\", \"nsorter\");\n        this.setState({\n          jsondataBarcodeFields: retrievedData\n        });\n      }\n      /* else {\r\n           if (this.props.Login.masterData.SampleProcessing) {\r\n               let {dataState}=this.state;\r\n               if(dataState===undefined){\r\n                   dataState={skip:0,take:this.state.dataState.take}\r\n               }\r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                       let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                       this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                } \r\n               \r\n               let samplecollect = [];\r\n               samplecollect = this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\r\n                   const entries = Object.entries(sampleItem.jsondata);\r\n                   if (entries.length > 0) {\r\n                       const newItem = { ...sampleItem };\r\n                       entries.forEach(([key, value]) => {\r\n                              newItem[key] = value;\r\n                          });\r\n                       return newItem;\r\n                   }\r\n                   return sampleItem;\r\n               });\r\n                  this.setState({\r\n                   data: samplecollect,\r\n                   dataState,\r\n                   dataResult: process(samplecollect || [], dataState),\r\n               });\r\n           }\r\n       }*/\n\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (bool) {\n      this.setState({\n        projectType\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  getComboSampleProcessing,\n  getBarcodeDataDetails,\n  getSampleProcessType,\n  getProcessduration,\n  saveSampleProcessing,\n  getActiveSampleProcessingById,\n  getSampleProcessing,\n  validateEsignCredentialSampleProcessing\n})(injectIntl(SampleProcessing));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/storagemanagement/SampleProcessing.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","DateTimePicker","ListWrapper","AddSampleProcessing","SlideOutModal","Esign","SampleCycle","transactionStatus","DEFAULT_RETURN","FormSelectSearch","callService","crudMaster","updateStore","validateEsignCredential","getComboSampleProcessing","getBarcodeDataDetails","getSampleProcessType","getProcessduration","saveSampleProcessing","getActiveSampleProcessingById","getSampleProcessing","validateEsignCredentialSampleProcessing","sortData","getControlMap","getStartOfDay","getEndOfDay","convertDateValuetoString","rearrangeDateFormat","constructOptionList","Lims_JSON_stringify","formatInputDate","showEsign","mapStateToProps","state","Login","SampleProcessing","Component","constructor","props","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","dataStateChange","event","setState","dataResult","dataState","validateEsign","inputParam","inputData","userInfo","sreason","nreasoncode","value","spredefinedreason","label","password","screenData","deleteRecord","deleteParam","obj","masterData","FromDate","ToDate","fromDate","toDate","classUrl","methodUrl","displayName","toLowerCase","selectedProjectType","userRoleControlRights","nformcode","ncontrolCode","screenName","intl","formatMessage","id","onSaveClick","saveType","formRef","alertMessage","sbarcodeid","barcodedata","length","parseInt","nbarcodelength","invalidbarcode","substring","PROCESSING","undefined","date1","date2","diffenecemill","differenceInMinutes","flag","Date","nngracetimetime","nprocesstime","JSON","stringify","listProcessType","removeIndex","findIndex","item","splice","map","nsampleprocesstypecode","join","NA","selectedId","sformname","smodulename","ncontrolcode","warn","onComboChange","comboData","fieldName","userinfo","nprojecttypecode","nproductcode","nsamplecollectiontypecode","ncollectiontubetypecode","nprocesstypecode","handleDateChangeSlidout","dateName","dateValue","autoSaveGetDataProcessing","stopPropagation","keyCode","target","spositionvalue","nbarcodeLength","jsondata","onInputOnChange","fieldname","type","name","checked","YES","NO","handleDateChange","dateObj","reloadData","searchRef","createRef","skip","take","settings","masterStatus","error","controlMap","Map","showSaveContinue","getDerivedStateFromProps","gridfillingColumn","barcodeFields","temparray1","idsName","dataField","width","controlType","mandatoryColumns","mandatoryLabel","push","sprocessstartdatesecondtime","temparray2","forEach","barcodeItem","dataItem","entries","Object","key","keyExists","some","column","sfieldname","newArray","render","extractedColumnList","jsondataBarcodeFields","addId","has","get","editId","deleteId","editParam","primaryKeyField","addParam","primaryKeyValue","ssitedate","date","projectType","sampletype","collectiontubetype","componentDidUpdate","previousProps","bool","projectTypeMap","values","sampleProcessing","sampleItem","newItem","skipcount","sampleProcessingdata","retrievedData"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport AddSampleProcessing from '../storagemanagement//AddSampleProcessing';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { SampleCycle, transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nimport {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential, getComboSampleProcessing, getBarcodeDataDetails,\r\n    getSampleProcessType, getProcessduration, saveSampleProcessing, getActiveSampleProcessingById, getSampleProcessing, validateEsignCredentialSampleProcessing\r\n} from '../../actions';\r\nimport {sortData, getControlMap, getStartOfDay, getEndOfDay, convertDateValuetoString, rearrangeDateFormat, constructOptionList, Lims_JSON_stringify, formatInputDate, showEsign } from '../../components/CommonScript'\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SampleProcessing extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showSaveContinue: true\r\n        };\r\n\r\n\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    gridfillingColumn(data, barcodeFields) {\r\n        //  const tempArray = [];\r\n        const temparray1 = [\r\n            { idsName: 'IDS_BARCODEID', dataField: 'sbarcodeid', width: '250px', controlType: 'textinput' },\r\n            { idsName: 'IDS_SAMPLETYPE', dataField: 'sproductname', width: '250px', controlType: 'selectbox' },\r\n            { idsName: 'IDS_PROCESSTYPENAME', dataField: 'sprocesstypename', width: '250px', controlType: 'selectbox' },\r\n            { idsName: 'IDS_PROCESSDURATION', dataField: 'sprocessduration', width: '250px', controlType: 'selectbox' },\r\n            { idsName: 'IDS_GRACEDURATION', dataField: 'sgraceduration', width: '250px', controlType: 'selectbox' },\r\n            { idsName: 'IDS_STARTDATEANDTIME', dataField: 'sprocessstartdate', width: '250px' },\r\n            { idsName: 'IDS_ENDDATEANDTIME', dataField: 'sprocessenddate', width: '250px' },\r\n        ];\r\n\r\n        this.mandatoryColumns = [\r\n            { \"mandatory\": true, \"idsName\": 'IDS_SAMPLETYPE', dataField: 'nproductcode', width: '250px', mandatoryLabel: 'IDS_SELECT', controlType: 'selectbox' },\r\n            { \"mandatory\": true, \"idsName\": 'IDS_COLLECTIONTUBETYPENAME', dataField: 'ncollectiontubetypecode', width: '250px', mandatoryLabel: 'IDS_SELECT', controlType: 'selectbox' },\r\n            { \"mandatory\": true, \"idsName\": 'IDS_PROCESSTYPENAME', dataField: 'nprocesstypecode', width: '250px', mandatoryLabel: 'IDS_SELECT', controlType: 'selectbox' },\r\n            { \"mandatory\": true, \"idsName\": \"IDS_BARCODEID\", \"dataField\": \"sbarcodeid\", \"width\": \"250px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textinput\" }\r\n\r\n        ]\r\n        this.mandatoryColumns.push(\r\n            !(this.props.Login.masterData.sprocessstartdatesecondtime && this.props.Login.masterData.sprocessstartdatesecondtime)\r\n                ? { \"mandatory\": true, \"idsName\": \"IDS_STARTDATEANDTIME\", \"dataField\": \"dprocessstartdate\", \"width\": \"250px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                : { \"mandatory\": true, \"idsName\": \"IDS_ENDDATEANDTIME\", \"dataField\": \"dprocessenddate\", \"width\": \"250px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        );\r\n\r\n        let temparray2 = [];\r\n        barcodeFields && barcodeFields.forEach(barcodeItem => {\r\n            data && data.forEach(dataItem => {\r\n                const entries = Object.entries(dataItem.jsondata);\r\n                if (entries.length > 0) {\r\n                    entries.forEach(([key]) => {\r\n                        const keyExists = temparray2.some(column => column.idsName === key);\r\n                        if (!keyExists) {\r\n                            //    if ('Visit Number' === key || 'Participant ID' === key) {\r\n                            if (barcodeItem.sfieldname === key) {\r\n                                temparray2.push({\r\n                                    idsName: key,\r\n                                    dataField: key,\r\n                                    width: '250px'\r\n                                });\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        const newArray = [...temparray1, ...temparray2]\r\n        newArray.push(\r\n            { idsName: 'IDS_COMMENTS', dataField: 'scomments', width: '250px' },\r\n            { idsName: 'IDS_DEVIATIONCOMMENTS', dataField: 'sdeviationcomments', width: '250px' }\r\n        );\r\n        return newArray;\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'update') {\r\n            this.props.validateEsignCredentialSampleProcessing(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n    render() {\r\n        /* console.log(\"SampleProcessing\", this.props.Login.masterData.SampleProcessing);\r\n         console.log(\"extractedColumnList\", this.extractedColumnList);\r\n         console.log(\"SampleProcessing-Data\", this.state.data);*/\r\n\r\n\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n        const extractedColumnList = this.gridfillingColumn(this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing || [], this.props.Login.masterData.jsondataBarcodeFields && this.props.Login.masterData.jsondataBarcodeFields);\r\n\r\n\r\n\r\n\r\n        this.extractedColumnList = extractedColumnList;\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"AddSampleProcessing\") && this.state.controlMap.get(\"AddSampleProcessing\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditSampleProcessing\") && this.state.controlMap.get(\"EditSampleProcessing\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteSampleProcessing\") && this.state.controlMap.get(\"DeleteSampleProcessing\").ncontrolcode;\r\n        const editParam = {\r\n            screenName: this.props.Login.displayName,\r\n            operation: \"update\",\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId,\r\n            masterData: this.props.Login.masterData,\r\n            inputParam: this.props.Login.inputParam,\r\n            primaryKeyField: \"nsampleprocessingcode\",\r\n            selectedRecord: this.state.selectedRecord || {},\r\n            dataState:this.state.dataState\r\n\r\n        };\r\n        const addParam = {\r\n            screenName: this.props.Login.displayName, primaryKeyField: \"nsampleprocessingcode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolcode: addId,\r\n            selectedRecord: this.state.selectedRecord,\r\n            masterData: this.props.Login.masterData\r\n        };\r\n//\t\t//ALPD-4618--Vignesh R(01-08-2024)\r\n        const deleteParam = { operation: \"delete\", ncontrolcode:deleteId, selectedRecord: this.state.selectedRecord };\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        }\r\n        return (\r\n            <>\r\n                {/* <Preloader loadng={this.props.Login.loading}/> */}\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            <Row>\r\n                                <Col md={2}>\r\n                                    <DateTimePicker\r\n                                        name={\"fromdate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_FROM\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"fromdate\", date)}\r\n                                        value={this.state.selectedRecord[\"fromdate\"] || fromDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <DateTimePicker\r\n                                        name={\"todate\"}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_TO\" })}\r\n                                        className='form-control'\r\n                                        placeholderText=\"Select date..\"\r\n                                        selected={this.state.selectedRecord[\"todate\"] || toDate}\r\n                                        dateFormat={this.props.Login.userInfo.ssitedate}\r\n                                        isClearable={false}\r\n                                        onChange={date => this.handleDateChange(\"todate\", date)}\r\n                                        value={this.state.selectedRecord[\"todate\"] || toDate}\r\n\r\n                                    />\r\n                                </Col>\r\n                                <Col md={2}>\r\n                                    <FormSelectSearch\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                        isSearchable={true}\r\n                                        name={\"nprojecttypecode\"}\r\n                                        isDisabled={false}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        isClearable={false}\r\n                                        options={this.state.projectType}\r\n                                        value={this.state.selectedRecord[\"nprojecttypecode\"] && this.state.selectedRecord[\"nprojecttypecode\"] || this.props.Login.masterData.selectedProjectType}\r\n                                        defaultValue={this.state.selectedRecord[\"nprojecttypecode\"]}\r\n                                        onChange={(event) => this.onComboChange(event, \"nprojecttypecode\")}\r\n                                        closeMenuOnSelect={true}\r\n                                    >\r\n                                    </FormSelectSearch>\r\n                                </Col>    {/* <Col></Col> */}\r\n                            </Row>\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nsampleprocessingcode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    scrollable={\"scrollable\"}\r\n                                    pageable={true}\r\n                                    isComponent={true}\r\n                                    gridHeight={'600px'}\r\n                                    isToolBarRequired={true}\r\n                                    isActionRequired={true}\r\n                                    expandField=\"expanded\"\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.getComboSampleProcessing(addParam)}\r\n                                    deleteParam={deleteParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    fetchRecord={this.props.getActiveSampleProcessingById}\r\n                                    editParam={editParam}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        size={'lg'}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.mandatoryColumns}\r\n                        showSaveContinue={true}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddSampleProcessing\r\n                                autoSaveGetDataProcessing={this.autoSaveGetDataProcessing}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                operation={this.props.Login.operation}\r\n                                sampletype={this.props.Login.sampletype}\r\n                                collectiontubetype={this.props.Login.collectiontubetype}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                handleDateChangeSlidout={this.handleDateChangeSlidout}\r\n                                projectType={this.state.projectType}\r\n                                masterData={this.props.Login.masterData}\r\n\r\n\r\n                            />}\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n    deleteRecord = (deleteParam) => {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"fromDate\": fromDate,\r\n                \"toDate\": toDate,\r\n                \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1,\r\n                \"nsampleprocessingcode\": deleteParam.selectedRecord['nsampleprocessingcode'],\r\n                \"sbarcodeid\": deleteParam.selectedRecord['sbarcodeid']\r\n\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let alertMessage;\r\n        const sbarcodeid = this.props.Login.masterData.barcodedata;\r\n        if (selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength)) {\r\n            let invalidbarcode = selectedRecord[\"sbarcodeid\"].substring(1, 2);\r\n            if (parseInt(invalidbarcode) === SampleCycle.PROCESSING) {\r\n                if (sbarcodeid != undefined && sbarcodeid != '') {\r\n\r\n                    let date1;\r\n                    let date2;\r\n                    let diffenecemill;\r\n                    let differenceInMinutes;\r\n\r\n                    let flag = false;\r\n\r\n                    if (selectedRecord[\"dprocessenddate\"] !== undefined && selectedRecord[\"dprocessenddate\"] !== \"\"&&selectedRecord[\"dprocessenddate\"] !==null) {\r\n\r\n                        date1 = new Date(formatInputDate(selectedRecord[\"dprocessstartdate\"], false));\r\n                        date2 = new Date(formatInputDate(selectedRecord[\"dprocessenddate\"], false));\r\n\r\n                        diffenecemill = date2 - date1;\r\n                        differenceInMinutes = diffenecemill / (1000 * 60);\r\n\r\n                        let nngracetimetime;\r\n                        let nprocesstime;\r\n\r\n                        nngracetimetime = parseInt(selectedRecord['ngracetime']) + parseInt(selectedRecord['nprocesstime']);\r\n                        nprocesstime = parseInt(selectedRecord['nprocesstime']);\r\n                        if (differenceInMinutes > nngracetimetime) {\r\n                            if (selectedRecord[\"sdeviationcomments\"] === undefined || selectedRecord[\"sdeviationcomments\"] === \"\") {\r\n                                flag = true;\r\n                                alertMessage = \"IDS_DEVIATIONCOMMENTS\"\r\n                            }\r\n                        }\r\n                        else if (differenceInMinutes > nprocesstime) {\r\n                            if (selectedRecord[\"scomments\"] === undefined || selectedRecord[\"scomments\"] === \"\") {\r\n                                flag = true;\r\n                                alertMessage = \"IDS_COMMENTS\"\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (!flag) {\r\n                        let inputData = {};\r\n                        inputData[\"sampleprocessing\"] = {};\r\n                        if (this.props.Login.operation === \"create\") {\r\n                            inputData[\"sampleprocessing\"][\"nsamplecollectiontypecode\"] = selectedRecord[\"nsamplecollectiontypecode\"] ? selectedRecord[\"nsamplecollectiontypecode\"] : -1;\r\n                            inputData[\"sampleprocessing\"][\"nproductcode\"] = selectedRecord[\"nproductcode\"] ? selectedRecord[\"nproductcode\"].value : -1;\r\n                            inputData[\"sampleprocessing\"][\"ncollectiontubetypecode\"] = selectedRecord[\"ncollectiontubetypecode\"] ? selectedRecord[\"ncollectiontubetypecode\"].value : -1;\r\n                            inputData[\"sampleprocessing\"][\"jsondata\"] = Lims_JSON_stringify(JSON.stringify(this.props.Login.masterData.barcodedata));\r\n                        \r\n                        let listProcessType=[...this.state.selectedRecord[\"processtype\"]];\r\n\r\n                        \r\n                        const removeIndex = listProcessType.findIndex(item => {\r\n                            return item.value === parseInt(selectedRecord[\"nprocesstypecode\"].value);\r\n                        });\r\n                        \r\n                        if (removeIndex !== -1) {\r\n                            listProcessType.splice(removeIndex, listProcessType.length);\r\n                            if(listProcessType.length>0){\r\n\r\n                                inputData={...inputData,\"listOfnsampleprocesstypecode\":listProcessType.map(item => item.item.nsampleprocesstypecode).join(','),\"nsampleprocesstypecode\":selectedRecord[\"nsampleprocesstypecode\"],\"nprocesstypelength\":listProcessType.length}\r\n                            }else{\r\n                                inputData={...inputData,\"listOfnsampleprocesstypecode\":selectedRecord[\"nsampleprocesstypecode\"],\"nsampleprocesstypecode\":selectedRecord[\"nsampleprocesstypecode\"],\"isSingleProcesstype\":true,\"nprocesstypelength\":1}\r\n\r\n                            }\r\n\r\n                        }\r\n                        \r\n                        }\r\n                        inputData[\"sampleprocessing\"][\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\r\n                        if (this.props.Login.operation === \"update\") {\r\n                            inputData[\"sampleprocessing\"][\"nsampleprocessingcode\"] = this.props.Login.selectedId;\r\n                        }\r\n                        inputData[\"sampleprocessing\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\r\n\r\n                inputData[\"sampleprocessing\"][\"nsamplecollectiontypecode\"] = selectedRecord[\"nsamplecollectiontypecode\"] ? selectedRecord[\"nsamplecollectiontypecode\"] : -1;\r\n\r\n                        inputData[\"sampleprocessing\"][\"scomments\"] = selectedRecord[\"scomments\"] && selectedRecord[\"scomments\"] || \"\";\r\n\r\n                        inputData[\"sampleprocessing\"][\"sdeviationcomments\"] = selectedRecord[\"sdeviationcomments\"] && selectedRecord[\"sdeviationcomments\"] || \"\";\r\n\r\n                        inputData[\"sampleprocessing\"][\"dprocessstartdate\"] = formatInputDate(selectedRecord[\"dprocessstartdate\"], false);\r\n                        inputData[\"sampleprocessing\"][\"ntzprocessstartdate\"] = selectedRecord[\"ntzprocessstartdate\"] && selectedRecord[\"ntzprocessstartdate\"].value || transactionStatus.NA\r\n                        inputData[\"sampleprocessing\"][\"noffsetdprocessstartdate\"] = selectedRecord[\"noffsetdprocessenddate\"] && selectedRecord[\"noffsetdprocessenddate\"].value || transactionStatus.NA\r\n\r\n                        inputData[\"sampleprocessing\"][\"nsampleprocesstypecode\"] = selectedRecord[\"nsampleprocesstypecode\"] ? selectedRecord[\"nsampleprocesstypecode\"] : -1;\r\n                        inputData[\"sampleprocessing\"][\"noffsetdprocessenddate\"] = selectedRecord[\"noffsetdprocessenddate\"] && selectedRecord[\"noffsetdprocessenddate\"].value || transactionStatus.NA\r\n                        inputData[\"sampleprocessing\"][\"ntzprocessenddate\"] = selectedRecord[\"ntzprocessenddate\"] && selectedRecord[\"ntzprocessenddate\"].value || transactionStatus.NA\r\n                        if (selectedRecord[\"dprocessenddate\"] !== undefined && selectedRecord[\"dprocessenddate\"] !== \"\" && selectedRecord[\"dprocessenddate\"]!==null) {\r\n                            inputData[\"sampleprocessing\"][\"dprocessenddate\"] = formatInputDate(selectedRecord[\"dprocessenddate\"], false);\r\n\r\n                        }\r\n\r\n\r\n                        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n                        let fromDate = obj.fromDate;\r\n                        let toDate = obj.toDate;\r\n                        inputData[\"fromDate\"] = fromDate;\r\n                        inputData[\"toDate\"] = toDate;\r\n                        inputData[\"nprojecttypecode\"] = this.props.Login.masterData.selectedProjectType.value || transactionStatus.NA;\r\n                        inputData[\"userinfo\"] = {\r\n                            ...this.props.Login.userInfo,\r\n                            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                        }\r\n\r\n\r\n\r\n                        const inputParam = {\r\n                            nformcode: this.props.Login.userInfo.nformcode,\r\n                            classUrl: \"storagesampleprocessing\",\r\n                            methodUrl: \"SampleProcessing\",\r\n                            inputData: inputData,\r\n                            operation: this.props.Login.operation,\r\n                            saveType, formRef,\r\n                            selectedRecord: this.state.selectedRecord || {}\r\n                        }\r\n\r\n                        const masterData = this.props.Login.masterData;\r\n\r\n                        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                            const updateInfo = {\r\n                                typeName: DEFAULT_RETURN,\r\n                                data: {\r\n                                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                                }\r\n                            }\r\n                            this.props.updateStore(updateInfo);\r\n                        }\r\n                        else {\r\n                            this.props.saveSampleProcessing(inputParam, masterData);\r\n                        }\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({\r\n                            id: \"IDS_ENTER\",\r\n                        }) + \" \" +\r\n                            this.props.intl.formatMessage({\r\n                                id: alertMessage,\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n                else {\r\n                    toast.warn(\r\n                        this.props.intl.formatMessage({\r\n                            id: \"IDS_CLICKENTERTOJSONRECORD\",\r\n                        })\r\n                    );\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_INVALIDBARCODEID\",\r\n                    })\r\n                );\r\n            }\r\n        } else {\r\n            toast.warn(\r\n                this.props.intl.formatMessage({\r\n                    id: \"IDS_INVALIDBARCODELENGTH\",\r\n                })\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (fieldName === 'nprojecttypecode') {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: parseInt(comboData.value),\r\n                selectedProjectType: comboData,\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            const inputParam = { masterData, inputData }\r\n            this.props.getSampleProcessing(inputParam)\r\n        }\r\n        /*  if (fieldName === \"nproductcode\") {\r\n              let inputData = [];\r\n              let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n              let fromDate = obj.fromDate;\r\n              let toDate = obj.toDate;\r\n              inputData[\"fromDate\"] = fromDate;\r\n              inputData[\"toDate\"] = toDate;\r\n              inputData = {\r\n                  userinfo: this.props.Login.userInfo,\r\n                  nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\r\n                  toDate: toDate,\r\n                  fromDate: fromDate\r\n              }\r\n              const masterData = { ...this.props.Login.masterData }\r\n              selectedRecord={...selectedRecord,\"nproductcode\":comboData}\r\n              const inputParam = { masterData, inputData,selectedRecord }\r\n              this.props.getCollectionTubeType(inputParam)\r\n          } else {*/\r\n        if (fieldName === \"ncollectiontubetypecode\" && selectedRecord['nproductcode'] !== undefined) {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\r\n                nproductcode: selectedRecord['nproductcode'] && selectedRecord['nproductcode'].value || -1,\r\n                nsamplecollectiontypecode: selectedRecord['nsamplecollectiontypecode'] && selectedRecord['nsamplecollectiontypecode'] || -1,\r\n                ncollectiontubetypecode: parseInt(comboData.value),\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            selectedRecord = { ...selectedRecord, [fieldName]: comboData }\r\n            const inputParam = { masterData, inputData, selectedRecord }\r\n            this.props.getSampleProcessType(inputParam)\r\n        }\r\n        else if (fieldName === \"nproductcode\" && selectedRecord['ncollectiontubetypecode'] !== undefined) {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\r\n                nproductcode: parseInt(comboData.value),\r\n                nsamplecollectiontypecode: parseInt(comboData.item.nsamplecollectiontypecode),\r\n                ncollectiontubetypecode: selectedRecord['ncollectiontubetypecode'] && selectedRecord['ncollectiontubetypecode'].value || -1,\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            const masterData = { ...this.props.Login.masterData }\r\n            selectedRecord = {\r\n                ...selectedRecord, [fieldName]: comboData, \"nsamplecollectiontypecode\": parseInt(comboData.item.nsamplecollectiontypecode)\r\n            }\r\n            const inputParam = { masterData, inputData, selectedRecord }\r\n            this.props.getSampleProcessType(inputParam)\r\n        }\r\n        else if (fieldName === \"nprocesstypecode\") {\r\n            let inputData = [];\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\r\n                nproductcode: selectedRecord['nproductcode'] && selectedRecord['nproductcode'].value || -1,\r\n                ncollectiontubetypecode: selectedRecord['ncollectiontubetypecode'] && selectedRecord['ncollectiontubetypecode'].value,\r\n                nsamplecollectiontypecode: selectedRecord['nsamplecollectiontypecode'] && selectedRecord['nsamplecollectiontypecode'] || -1,\r\n                nprocesstypecode: parseInt(comboData.value),\r\n                toDate: toDate,\r\n                fromDate: fromDate\r\n            }\r\n            \r\n            const masterData = { ...this.props.Login.masterData }\r\n            selectedRecord = { ...selectedRecord, \"nprocesstypecode\": comboData }\r\n            const inputParam = { masterData, inputData, selectedRecord }\r\n            this.props.getProcessduration(inputParam)\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n            if (fieldName === \"nproductcode\") {\r\n                selectedRecord = { ...selectedRecord, \"nsamplecollectiontypecode\": comboData.item.nsamplecollectiontypecode }\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n        //  }\r\n\r\n    }\r\n    handleDateChangeSlidout = (dateName, dateValue) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n        /* if (selectedRecord[\"sbarcodeid\"] !== undefined) {\r\n              let inputData = {};\r\n              inputData[\"sampleprocessing\"] = {};\r\n            if (dateName === \"dprocessenddate\") {\r\n                  inputData[\"sampleprocessing\"][\"dprocessenddate\"] = formatInputDate(dateValue, false);\r\n                  inputData[\"sampleprocessing\"][\"nsampleprocesstypecode\"] = selectedRecord[\"nsampleprocesstypecode\"] ? selectedRecord[\"nsampleprocesstypecode\"] : -1;\r\n                  inputData[\"sampleprocessing\"][\"sbarcodeid\"] = selectedRecord[\"sbarcodeid\"] ? selectedRecord[\"sbarcodeid\"] : -1;\r\n                  inputData[\"userinfo\"] = {\r\n                      ...this.props.Login.userInfo,\r\n                      sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                      smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename)\r\n                  }\r\n                  selectedRecord = { ...selectedRecord, [dateName]: dateValue }\r\n  \r\n                  const inputParam = {\r\n                      nformcode: this.props.Login.userInfo.nformcode,\r\n                      inputData: inputData,\r\n                      operation: this.props.Login.operation,\r\n                      selectedRecord: selectedRecord,\r\n                      masterData: this.props.Login.masterData\r\n  \r\n                  }\r\n                  this.props.getCommentsDeviation(inputParam)\r\n              }\r\n              else {\r\n  \r\n                \r\n              }\r\n          } else {\r\n  \r\n              toast.warn(this.props.intl.formatMessage({\r\n                  id: \"IDS_ENTER\",\r\n              }) +\r\n                  this.props.intl.formatMessage({\r\n                      id: \"IDS_BARCODEID\",\r\n                  })\r\n              );\r\n  \r\n          }\r\n  */\r\n    };\r\n    autoSaveGetDataProcessing = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n\r\n        event.stopPropagation();\r\n        //ALPD-4701--Vignesh R(21-08-2024)\r\n        if(event.keyCode === 13){\r\n        if (selectedRecord['ncollectiontubetypecode'] && selectedRecord['nproductcode'] && selectedRecord['nprocesstypecode']) {\r\n            if (parseInt(selectedRecord[\"sbarcodeid\"] && selectedRecord[\"sbarcodeid\"].length) === parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength) && event.keyCode === 13) {\r\n\r\n                let invalidbarcode = event.target.value.substring(1, 2);\r\n                if (parseInt(invalidbarcode) === SampleCycle.PROCESSING) {\r\n\r\n                    let inputParam = {\r\n                        nprojecttypecode: this.props.Login.masterData.selectedProjectType.value,\r\n                        spositionvalue: event.target.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nbarcodeLength:  parseInt(this.props.Login.masterData.nbarcodelength && this.props.Login.masterData.nbarcodelength),\r\n                        jsondata: {},\r\n                        masterData: this.props.Login.masterData,\r\n                        selectedRecord: selectedRecord || {}\r\n                    }\r\n                    this.props.getBarcodeDataDetails(inputParam);\r\n                }\r\n                else {\r\n                    toast.warn(\r\n                        this.props.intl.formatMessage({\r\n                            id: \"IDS_INVALIDBARCODEID\",\r\n                        })\r\n                    );\r\n                }\r\n            } \r\n        }\r\n        else {\r\n            event.stopPropagation();    \r\n            if (selectedRecord['nproductcode'] === undefined) {\r\n                toast.warn(this.props.intl.formatMessage({\r\n                    id: \"IDS_SELECT\",\r\n                }) +\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_SAMPLETYPE\",\r\n                    })\r\n                );\r\n            } else if (selectedRecord['ncollectiontubetypecode'] === undefined) {\r\n                toast.warn(this.props.intl.formatMessage({\r\n                    id: \"IDS_SELECT\",\r\n                }) +\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_COLLECTIONTUBETYPENAME\",\r\n                    })\r\n                );\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({\r\n                    id: \"IDS_SELECT\",\r\n                }) +\r\n                    this.props.intl.formatMessage({\r\n                        id: \"IDS_PROCESSTYPENAME\",\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    };\r\n    onInputOnChange = (event, fieldname) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let { projectType } = this.state;\r\n        let bool = false;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            bool = true;\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            bool = true;\r\n\r\n        }\r\n\r\n        // if (this.props.Login.masterData.SampleProcessing !== previousProps.Login.masterData.SampleProcessing) {\r\n        //     let samplecollect = [];\r\n        //     samplecollect = this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\r\n        //         const entries = Object.entries(sampleItem.jsondata);\r\n        //         if (entries.length > 0) {\r\n        //             const newItem = { ...sampleItem };\r\n        //             entries.forEach(([key, value]) => {\r\n\r\n        //                 newItem[key] = value;\r\n\r\n        //             });\r\n        //             return newItem;\r\n        //         }\r\n        //         return sampleItem;\r\n        //     });\r\n        //     let { dataState } = this.state;\r\n        //     if (dataState === undefined) {\r\n        //         dataState = { skip: 0, take: this.state.dataState.take }\r\n        //     }\r\n        //     if (this.state.dataResult.data) {\r\n        //         if (this.state.dataResult.data.length === 1) {\r\n        //             let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n        //                 this.state.dataState.skip\r\n        //             dataState = { skip: skipcount, take: this.state.dataState.take }\r\n        //         }\r\n        //     }\r\n\r\n        //     this.setState({\r\n        //         data: samplecollect,\r\n        //         dataState,\r\n        //         dataResult: process(samplecollect || [], dataState),\r\n        //     });\r\n        // }\r\n\r\n\r\n       \r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                let sampleProcessing = [];\r\n                sampleProcessing =\r\n                    this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\r\n                        const entries = Object.entries(sampleItem.jsondata);\r\n                        if (entries.length > 0) {\r\n                            const newItem = { ...sampleItem };\r\n                            entries.forEach(([key, value]) => {\r\n\r\n                                newItem[key] = value;\r\n\r\n                            });\r\n                            return newItem;\r\n                        }\r\n                        return sampleItem;\r\n                    });\r\n\r\n                let { dataState } = this.state;\r\n                if (dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.state.dataState.take }\r\n                }\r\n                if (this.state.dataResult.data) {\r\n                    if (this.state.dataResult.data.length === 1) {\r\n                        let skipcount = this.state.dataState.skip > 0 ? (this.state.dataState.skip - this.state.dataState.take) :\r\n                            this.state.dataState.skip\r\n                        dataState = { skip: skipcount, take: this.state.dataState.take }\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: sampleProcessing, dataState,\r\n                    dataResult: process(sampleProcessing || [], dataState),\r\n                });\r\n            }else { \r\n                //jana ALPD-4694 Temporary Storage-->While Try to Delete the Records the Fields are Align Wrongly\r\n\r\n            let {dataState}=this.state;\r\n            let sampleProcessingdata = [];\r\n            sampleProcessingdata =\r\n                this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\r\n                    const entries = Object.entries(sampleItem.jsondata);\r\n                    if (entries.length > 0) {\r\n                        const newItem = { ...sampleItem };\r\n                        entries.forEach(([key, value]) => {\r\n\r\n                            newItem[key] = value;\r\n\r\n                        });\r\n                        return newItem;\r\n                    }\r\n                    return sampleItem;\r\n                });\r\n\r\n            if(this.props.Login.dataState===undefined  || this.props.Login.masterData.selectedProjectType !== previousProps.Login.masterData.selectedProjectType){\r\n                dataState={skip:0,take:this.state.dataState.take}\r\n            }\r\n             if(this.state.dataResult.data){\r\n                 if(this.state.dataResult.data.length ===1){\r\n                    let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                    this.state.dataState.skip\r\n                     dataState={skip:skipcount,take:this.state.dataState.take}\r\n                 }\r\n             } \r\n             this.setState({\r\n                data: sampleProcessingdata, selectedRecord: this.props.Login.selectedRecord,\r\n                dataResult: process(sampleProcessingdata || [],dataState),\r\n                dataState\r\n            });\r\n            }\r\n\r\n            \r\n            if (this.props.Login.masterData.jsondataBarcodeFields !== previousProps.Login.masterData.jsondataBarcodeFields) {\r\n                const retrievedData = sortData(this.props.Login.masterData.jsondataBarcodeFields,\"ascending\",\"nsorter\");\r\n                this.setState({ jsondataBarcodeFields: retrievedData });\r\n            }\r\n            /* else {\r\n                 if (this.props.Login.masterData.SampleProcessing) {\r\n                     let {dataState}=this.state;\r\n                     if(dataState===undefined){\r\n                         dataState={skip:0,take:this.state.dataState.take}\r\n                     }\r\n                      if(this.state.dataResult.data){\r\n                          if(this.state.dataResult.data.length ===1){\r\n                             let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                             this.state.dataState.skip\r\n                              dataState={skip:skipcount,take:this.state.dataState.take}\r\n                          }\r\n                      } \r\n                     \r\n                     let samplecollect = [];\r\n                     samplecollect = this.props.Login.masterData.SampleProcessing && this.props.Login.masterData.SampleProcessing.map(sampleItem => {\r\n                         const entries = Object.entries(sampleItem.jsondata);\r\n                         if (entries.length > 0) {\r\n                             const newItem = { ...sampleItem };\r\n                             entries.forEach(([key, value]) => {\r\n \r\n                                 newItem[key] = value;\r\n \r\n                             });\r\n                             return newItem;\r\n                         }\r\n                         return sampleItem;\r\n                     });\r\n \r\n                     this.setState({\r\n                         data: samplecollect,\r\n                         dataState,\r\n                         dataResult: process(samplecollect || [], dataState),\r\n                     });\r\n                 }\r\n             }*/\r\n        }else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                projectType\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        if (dateName === 'todate') {\r\n            selectedRecord[dateName] = dateValue;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[dateName] = dateValue;\r\n\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        // this.setState({ selectedRecord });\r\n        // this.reloadData(selectedRecord, true);\r\n\r\n        let dateObj = {};\r\n        let obj = convertDateValuetoString(selectedRecord['fromdate'] && selectedRecord['fromdate'] || this.props.Login.masterData.FromDate, selectedRecord['todate'] && selectedRecord['todate'] || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: fromDate,\r\n                toDate: toDate,\r\n                nprojecttypecode: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.value || -1\r\n            }\r\n\r\n        };\r\n        this.props.getSampleProcessing(inputParam);\r\n    }\r\n\r\n    reloadData = () => {\r\n        //this.searchRef.current.value = \"\";\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo, true);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                \"nprojecttypecode\": this.props.Login.masterData.selectedProjectType.value || -1\r\n                // currentdate: isDateChange === true ? null : formatInputDate(new Date(), true)\r\n            },\r\n            classUrl: 'storagesampleprocessing',\r\n            methodUrl: \"SampleProcessing\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo,\r\n            selectedRecord: this.state.selectedRecord || {}\r\n        };\r\n        this.props.getSampleProcessing(inputParam);\r\n    }\r\n\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,\r\n    updateStore, validateEsignCredential, getComboSampleProcessing, getBarcodeDataDetails, getSampleProcessType, getProcessduration, saveSampleProcessing,\r\n    getActiveSampleProcessingById, getSampleProcessing, validateEsignCredentialSampleProcessing\r\n})(injectIntl(SampleProcessing));"]},"metadata":{},"sourceType":"module"}