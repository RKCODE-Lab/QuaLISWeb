{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\SqlBuilderTableGrid.jsx\";\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords } from '@progress/kendo-react-grid';\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons';\nimport { Draggable } from 'react-drag-and-drop';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\n\nclass SqlBuilderTableGrid extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.selectedRecord.ssqlqueryname !== nextProps.selectedRecord.ssqlqueryname || this.props.selectedRecord.ssqlquery !== nextProps.selectedRecord.ssqlquery) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      style: this.props.style,\n      data: this.props.data,\n      onDataStateChange: this.props.onDataStateChange,\n      dataState: this.props.dataState,\n      detail: this.props.detail,\n      expandField: this.props.expandField,\n      onExpandChange: this.props.onExpandChange //pageable={this.props.pageable}\n      //data={process(this.props.tableList, this.props.dataStateTable)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(GridNoRecords, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 39\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })), /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"48px\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Draggable, {\n        type: \"dragtable\",\n        data: row.dataItem.tableName + \" \\\"\" + row.dataItem.stabledisplayname + \"\\\"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faGripVertical,\n        className: \"dragicon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 53\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, Object.assign({\n      width: \"425px\",\n      field: \"stabledisplayname\"\n    }, this.columnProps(\"stabledisplayname\"), {\n      title: this.props.intl.formatMessage({\n        id: \"IDS_TABLE_NAME\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 37\n      }\n    }))));\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      return {\n        field: field,\n        columnMenu: ColumnMenu,\n        headerClassName: this.isColumnActive(field, this.props.onDataStateChange) ? 'active' : ''\n      };\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n}\n\nexport default injectIntl(SqlBuilderTableGrid);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/dashboard/SqlBuilderTableGrid.jsx"],"names":["React","Component","injectIntl","AtTableWrap","Grid","GridColumn","GridColumnMenuFilter","GridNoRecords","faGripVertical","Draggable","FontAwesomeIcon","ColumnMenu","SqlBuilderTableGrid","constructor","props","shouldComponentUpdate","nextProps","nextState","selectedRecord","ssqlqueryname","ssqlquery","render","style","data","onDataStateChange","dataState","detail","expandField","onExpandChange","intl","formatMessage","id","row","dataItem","tableName","stabledisplayname","columnProps","field","hideColumnFilter","columnMenu","headerClassName","isColumnActive","active","filter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,oBAA3B,EAAgDC,aAAhD,QAAoE,4BAApE;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,UAAP,MAAuB,uCAAvB;;AAEA,MAAMC,mBAAN,SAAkCX,SAAlC,CAA4C;AACxCY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACDC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAI,KAAKH,KAAL,CAAWI,cAAX,CAA0BC,aAA1B,KAA0CH,SAAS,CAACE,cAAV,CAAyBC,aAApE,IACF,KAAKL,KAAL,CAAWI,cAAX,CAA0BE,SAA1B,KAAsCJ,SAAS,CAACE,cAAV,CAAyBE,SADhE,EAC2E;AAC3E,aAAO,KAAP;AACC,KAHD,MAGK;AACD,aAAO,IAAP;AACD;AACF;;AACLC,EAAAA,MAAM,GAAG;AACL,wBAEM,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,eAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACkB,oBAAC,IAAD;AACI,MAAA,KAAK,EAAE,KAAKP,KAAL,CAAWQ,KADtB;AAEI,MAAA,IAAI,EAAE,KAAKR,KAAL,CAAWS,IAFrB;AAGI,MAAA,iBAAiB,EAAE,KAAKT,KAAL,CAAWU,iBAHlC;AAII,MAAA,SAAS,EAAE,KAAKV,KAAL,CAAWW,SAJ1B;AAKI,MAAA,MAAM,EAAE,KAAKX,KAAL,CAAWY,MALvB;AAMI,MAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWa,WAN5B;AAOI,MAAA,cAAc,EAAE,KAAKb,KAAL,CAAWc,cAP/B,CAQI;AACJ;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAYM,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACD,KAAKd,KAAL,CAAWe,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADC,CAZN,eAeI,oBAAC,UAAD;AACI,MAAA,KAAK,EAAC,MADV;AAEI,MAAA,IAAI,EAAGC,GAAD,iBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAC,WAAhB;AAA4B,QAAA,IAAI,EAAEA,GAAG,CAACC,QAAJ,CAAaC,SAAb,GAAyB,KAAzB,GAAiCF,GAAG,CAACC,QAAJ,CAAaE,iBAA9C,GAAkE,IAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAE3B,cAAvB;AAAuC,QAAA,SAAS,EAAC,UAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfJ,eA0BI,oBAAC,UAAD;AACI,MAAA,KAAK,EAAE,OADX;AAEI,MAAA,KAAK,EAAC;AAFV,OAGQ,KAAK4B,WAAL,CAAiB,mBAAjB,CAHR;AAII,MAAA,KAAK,EAAE,KAAKtB,KAAL,CAAWe,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OA1BJ,CADlB,CAFN;AAwCH;;AACDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,QAAI,CAAC,KAAKvB,KAAL,CAAWwB,gBAAhB,EAAkC;AAC9B,aAAO;AACHD,QAAAA,KAAK,EAAEA,KADJ;AAEHE,QAAAA,UAAU,EAAE5B,UAFT;AAGH6B,QAAAA,eAAe,EAAE,KAAKC,cAAL,CAAoBJ,KAApB,EAA2B,KAAKvB,KAAL,CAAWU,iBAAtC,IAA2D,QAA3D,GAAsE;AAHpF,OAAP;AAKH;AACJ;;AAEDiB,EAAAA,cAAc,CAACJ,KAAD,EAAQZ,SAAR,EAAmB;AAC7B,WAAOnB,oBAAoB,CAACoC,MAArB,CAA4BL,KAA5B,EAAmCZ,SAAS,CAACkB,MAA7C,CAAP;AACH;;AAlEuC;;AAoE5C,eAAgBzC,UAAU,CAACU,mBAAD,CAA1B","sourcesContent":["import React, { Component } from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { Grid, GridColumn, GridColumnMenuFilter,GridNoRecords} from '@progress/kendo-react-grid';\r\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons';\r\nimport { Draggable } from 'react-drag-and-drop';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\r\n\r\nclass SqlBuilderTableGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if((this.props.selectedRecord.ssqlqueryname!==nextProps.selectedRecord.ssqlqueryname) ||\r\n        (this.props.selectedRecord.ssqlquery!==nextProps.selectedRecord.ssqlquery)){\r\n        return false\r\n        }else{\r\n            return true;\r\n          }\r\n        }\r\n    render() {\r\n        return (\r\n           \r\n              <AtTableWrap className=\"at-list-table\">\r\n                                <Grid\r\n                                    style={this.props.style}\r\n                                    data={this.props.data}\r\n                                    onDataStateChange={this.props.onDataStateChange}\r\n                                    dataState={this.props.dataState}\r\n                                    detail={this.props.detail}\r\n                                    expandField={this.props.expandField}\r\n                                    onExpandChange={this.props.onExpandChange}\r\n                                    //pageable={this.props.pageable}\r\n                                //data={process(this.props.tableList, this.props.dataStateTable)}\r\n\r\n                                >\r\n                                      <GridNoRecords>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                                </GridNoRecords>\r\n                                    <GridColumn\r\n                                        width=\"48px\"\r\n                                        cell={(row) => (\r\n                                            <td >\r\n                                                <Draggable type=\"dragtable\" data={row.dataItem.tableName + \" \\\"\" + row.dataItem.stabledisplayname + \"\\\"\"}>\r\n                                                    <FontAwesomeIcon icon={faGripVertical} className=\"dragicon\"></FontAwesomeIcon>\r\n                                                </Draggable>\r\n                                            </td>\r\n                                        )}\r\n                                    />\r\n\r\n                                    <GridColumn\r\n                                        width={\"425px\"}\r\n                                        field=\"stabledisplayname\"\r\n                                        {...this.columnProps(\"stabledisplayname\")}\r\n                                        title={this.props.intl.formatMessage({ id: \"IDS_TABLE_NAME\" })}\r\n                                    />\r\n                                </Grid>\r\n                            </AtTableWrap>\r\n    \r\n        );\r\n\r\n    } \r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n            return {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                headerClassName: this.isColumnActive(field, this.props.onDataStateChange) ? 'active' : ''\r\n            };\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n}\r\nexport default (injectIntl(SqlBuilderTableGrid));\r\n"]},"metadata":{},"sourceType":"module"}