{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import Axios from'axios';import{numericGrade}from'../pages/ResultEntryBySample/ResultEntryValidation';import{constructOptionList,fillRecordBasedOnCheckBoxSelection,filterRecordBasedOnTwoArrays,getRecordBasedOnPrimaryKeyName,getSameRecordFromTwoArrays,replaceUpdatedObject,sortData,updatedObjectWithNewElement,rearrangeDateFormat,filterRecordBasedOnPrimaryKeyName,reArrangeArrays}from'../components/CommonScript';import{transactionStatus}from'../components/Enumeration';export function getsubSampleREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntype:2,nflag:inputData.nflag||2,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),ntransactiontestcode:0,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestKey:inputData.activeTestKey,activeSampleKey:inputData.activeSampleKey,//nneedsubsample: inputData.masterData.nneedsubsample,\nnneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,nneedtemplatebasedflow:inputData.nneedtemplatebasedflow};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\ndispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){// if (response.data.DynamicGetSamples) {\n//     sortData(response.data.DynamicGetSamples, \"\", \"\");\n// }\n// if (response.data.DynamicGetTests) {\n//     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n// }\nsortData(response.data);// let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\n// responseData = sortData(responseData)\nvar oldSelectedTest=inputData.masterData.RESelectedTest;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var RESelectedSubSample=inputData.checkBoxOperation===3||inputData.checkBoxOperation===7?response.data.RESelectedSubSample:inputData.masterData.RESelectedSubSample;RESelectedSubSample=inputData.masterData.nneedsubsample?RESelectedSubSample:inputData.masterData.RE_SUBSAMPLE;var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:RESelectedSubSample});// if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n//     inputData.searchSampleRef.current.value = \"\";\n//     masterData['searchedSample'] = undefined\n// }\nif(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedMaterial=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_MATERIAL\":list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedMaterial),_toConsumableArray(response.data.ResultUsedMaterial));ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}// else if(inputData.checkBoxOperation === 7){\n//     getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n//     let list = []\n//     switch (inputData.activeTestKey) {\n//         case \"IDS_RESULTS\":\n//             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n//             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"TestParameters\"\n//             dataStateName = \"resultDataState\"\n//             break;\n//         case \"IDS_INSTRUMENT\":\n//             list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n//             ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"ResultUsedInstrument\"\n//             dataStateName = \"instrumentDataState\"\n//             break;\n//         case \"IDS_MATERIAL\":\n//             list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n//             ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"ResultUsedMaterial\"\n//             dataStateName = \"materialDataState\"\n//             break;\n//         case \"IDS_TASK\":\n//             list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n//             list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n//             ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"ResultUsedTasks\"\n//             dataStateName = \"taskDataState\"\n//             break;\n//         case \"IDS_TESTATTACHMENTS\":\n//             list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n//             RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"RegistrationTestAttachment\"\n//             break;\n//         case \"IDS_RESULTCHANGEHISTORY\":\n//             list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n//             ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"ResultChangeHistory\"\n//             dataStateName = \"resultChangeDataState\"\n//             break;\n//         case \"IDS_TESTCOMMENTS\":\n//             list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n//             RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"RegistrationTestComment\"\n//             dataStateName = \"testCommentDataState\"\n//             break;\n//         default:\n//             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n//             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//             activeName = \"TestParameters\"\n//             dataStateName = \"resultDataState\"\n//             break;\n//     }\n// } \nelse{var _list=[];if(!inputData.masterData.realRegSubTypeValue.nneedsubsample){var _wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!_wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var _keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){_keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}}switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":_list=response.data.ResultUsedMaterial?sortData(response.data.ResultUsedMaterial,'descending','nresultusedmaterialcode'):[];ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":_list=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,skip:undefined,take:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.RESelectedTest;//let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n//let isGrandChildGetRequired = false;\nvar oldSelectedSubSample=inputData.masterData.RESelectedSubSample;var _inputData2=inputData,subsampletake=_inputData2.subsampletake,subsampleskip=_inputData2.subsampleskip;var skipInfo={};var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSample=inputData.RESelectedSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];var RESelectedSubSample=inputData.masterData.RE_SUBSAMPLE;if(inputData.masterData.nneedsubsample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.RE_SUBSAMPLE,\"ntransactionsamplecode\");RESelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.RE_SUBSAMPLE[0]];if(inputData.masterData.RE_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var ntransactionsamplecode=RESelectedSubSample.map(function(subsample){return subsample.ntransactionsamplecode;}).join(',');var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedSample:RESelectedSample,RESelectedSubSample:RESelectedSubSample,RESelectedTest:RESelectedTest});inputData=_objectSpread(_objectSpread({},inputData),{},{ntransactiontestcode:ntransactiontestcode,ntransactionsamplecode:ntransactionsamplecode,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey,masterData:masterData});if(RESelectedTest.length>0){inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedMaterial\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"]});dispatch(getTestChildTabREDetail(inputData,true));}else{inputData=_objectSpread(_objectSpread({},inputData),{},{masterData:masterData,childTabsKey:[\"RE_TEST\"]});dispatch(getTestREDetail(inputData,true));}}else{//added by sudharshanan for test select issue while sample click\nvar _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n// RESelectedSample: inputData.RESelectedSample,\n// RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\nRESelectedTest:TestSelected?TestSelected:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.RE_SUBSAMPLE.length>0?[inputData.masterData.RE_SUBSAMPLE[0]]:[]});var subsamplecheck=true;if(inputData.masterData.nneedsubsample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.RE_SUBSAMPLE,\"ntransactionsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=_masterData.RE_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});if(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&_masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.RE_SUBSAMPLE[0]];_masterData=_objectSpread(_objectSpread({},_masterData),{},{RESelectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),_masterData);inputData[\"npreregno\"]=selectedSubSample1.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=selectedSubSample1.map(function(x){return x.ntransactionsamplecode;}).join(\",\");inputData[\"checkBoxOperation\"]=3;inputData[\"childTabsKey\"]=[\"RE_TEST\"];subsamplecheck=false;dispatch(getTestREDetail(inputData,true));}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=_masterData.RE_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!_wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});}if(subsamplecheck){_masterData=_objectSpread(_objectSpread({},_masterData),{},{RESelectedSubSample:oldSelectedSubSample});}if(inputData.masterData.RE_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=_masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=inputData.masterData.RE_TEST[0].ntransactiontestcode;// ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\n}//const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n//ntransactiontestcode, \"ntransactiontestcode\");\nvar TestParameters=keepOld?inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno,\"npreregno\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno,\"npreregno\"):getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var _skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},_masterData),{},{RESelectedSample:inputData.RESelectedSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory// RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},_skipInfo)});}}};}export function getTestREDetail(inputData,isServiceRequired){return function(dispatch){var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntransactiontestcode:0,ntranscode:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestKey:inputData.activeTestKey,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation,nneedsubsample:inputData.nneedsubsample};var subSample=inputData.nneedsubsample;// dispatch(initRequest(true));\n// rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\nif(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\",inputParamData).then(function(response){// let responseData = {\n//     ...response.data,\n//     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n//     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n//     // RESelectedTest: inputData.masterData.RESelectedTest\n// }\nvar responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','npreregno');var oldSelectedTest=inputData.masterData.RESelectedTest;var oldSelectedSubSample=inputData.masterData.RESelectedSubSample||[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.masterData.RESelectedSample,RESelectedSubSample:inputData.RESelectedSubSample||inputData.masterData.RESelectedSubSample});if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedMaterial=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];var RegistrationSampleComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_MATERIAL\":list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedMaterial),_toConsumableArray(response.data.ResultUsedMaterial));ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list2=[];var _dbData=[];var testList=reArrangeArrays(inputData.masterData.RE_SUBSAMPLE,responseData.RE_TEST,\"ntransactionsamplecode\");masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:[testList[0]],RE_TEST:testList// ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n});switch(inputData.activeTestKey){case\"IDS_RESULTS\":_dbData=response.data.TestParameters||[];_list2=_toConsumableArray(response.data.TestParameters);TestParameters=getRecordBasedOnPrimaryKeyName(_list2,testList.length>0?testList[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":_dbData=response.data.TestParameters||[];_list2=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_MATERIAL\":_list2=[].concat(_toConsumableArray(inputData.masterData.ResultUsedMaterial),_toConsumableArray(response.data.ResultUsedMaterial));ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":_dbData=response.data.ResultUsedTasks||[];_list2=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(_dbData));_list2.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":_dbData=response.data.RegistrationTestAttachment||[];_list2=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":_dbData=response.data.ResultChangeHistory||[];_list2=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(_dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":_dbData=response.data.RegistrationTestComment||[];_list2=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(_dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:_dbData=response.data.TestParameters||[];_list2=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(_dbData));TestParameters=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list3=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list3=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list3=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":_list3=response.data.ResultUsedMaterial?sortData(response.data.ResultUsedMaterial,'descending','nresultusedmaterialcode'):[];ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":_list3=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list3.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list3=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list3=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list3=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;default:_list3=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}if(subSample){var wholeSubsampleList=masterData.RegistrationGetSubSample.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.map(function(test,index){if(!wholeSubsampleList.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});var _keepOld2=false;var ntransactionsamplecode;if(oldSelectedSubSample.length>0){_keepOld2=true;}else{ntransactionsamplecode=masterData.selectedSubSample[0].ntransactionsamplecode;}switch(inputData.activeSubSampleTab){case\"IDS_SUBSAMPLECOMMENTS\":RegistrationSampleComment=_keepOld2?inputData.masterData.RegistrationSampleComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"subSampleCommentDataState\";break;default:RegistrationSampleAttachment=_keepOld2?inputData.masterData.RegistrationSampleAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subSampleAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment,RegistrationSampleComment:RegistrationSampleComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nvar oldSelectedTest=inputData.masterData.RESelectedTest;//let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n// let isGrandChildGetRequired = false;\n// if (TestSelected.length > 0) {\n//     isGrandChildGetRequired = true;\n// } else {\n//     isGrandChildGetRequired = false;\n// }\nvar TestSelected=inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSubSample=inputData.RESelectedSubSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];// let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\ninputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedMaterial\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"],ntransactiontestcode:ntransactiontestcode,RESelectedSample:inputData.masterData.RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey});dispatch(getTestChildTabREDetail(inputData,true));}else{//added by sudharshanan for test select issue while sample click\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSubSample:inputData.RESelectedSubSample});var wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode3;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode3=masterData.RE_TEST[0].ntransactiontestcode;}// const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n//     ntransactiontestcode, \"ntransactiontestcode\");\nvar TestParameters=keepOld?inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode3,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode3,\"ntransactiontestcode\");var ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial||[],_ntransactiontestcode3,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode3,\"ntransactiontestcode\");var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSubSample:inputData.RESelectedSubSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},skipInfo)});}}};}export function getSampleChildTabREDetail(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,npreregno:inputData.npreregno,userinfo:inputData.userinfo};var url=\"\";switch(inputData.activeSampleKey){case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_APPROVALHISTORY\":url=\"resultentrybysample/getSampleApprovalHistory\";break;case\"IDS_SAMPLECOMMENTS\":url=\"comments/getSampleComment\";break;default:url=\"attachment/getSampleAttachment\";break;}dispatch(initRequest(true));rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread({},response.data);//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{RESelectedSample:inputData.RESelectedSample}),loading:false,showFilter:false,activeSampleKey:inputData.activeSampleKey,screenName:inputData.screenName}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestChildTabREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\nvar url=\"resultentrybysample/getTestbasedParameter\";switch(inputData.activeTestKey){case\"IDS_RESULTS\":url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":url=\"resultentrybysample/getResultUsedInstrument\";activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":url=\"resultentrybysample/getResultUsedMaterial\";activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":url=\"resultentrybysample/getResultUsedTask\";activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":url=\"resultentrybysample/getResultChangeHistory\";activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"resultDataState\";break;default:url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){//sortData(response.data,'ascending','ntransactiontestcode');\n//sortData(response.data,'ascending','ntestattachmentcode');\nvar responseData=_objectSpread(_objectSpread({},response.data),{},{RESelectedSample:inputData.RESelectedSample||inputData.masterData.RESelectedSample,RESelectedTest:inputData.RESelectedTest});var skipInfo={};//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RESelectedTest:inputData.RESelectedTest});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,activeTestKey:inputData.activeTestKey,screenName:inputData.activeTestKey,testskip:undefined,testtake:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.RESelectedTest});if(masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}};}export function getRERegistrationType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRERegistrationSubType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationsubType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{//defaultFilterStatus:inputData.masterData.defaultFilterStatus,\ndefaultRegistrationType:inputData.defaultRegistrationType}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREApprovalConfigVersion(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getApprovalConfigVersion\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationSubType:inputData.defaultRegistrationSubType// fromDate: inputData.fromdate,\n//  toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREFilterStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFilterStatus\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultjobstatus:inputData.defaultjobstatus// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREJobStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getJobStatus\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultApprovalConfigVersion:inputData.defaultApprovalConfigVersion// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getResultEntryDetails(inputParamData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData.inputData),{},{nneedsubsample:inputParamData.masterData.nneedsubsample})).then(function(response){var masterData=_objectSpread({},inputParamData.masterData);if(inputParamData.refs.searchSampleRef!==undefined&&inputParamData.refs.searchSampleRef.current!==null){inputParamData.refs.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParamData.refs.searchSubSampleRef!==undefined&&inputParamData.refs.searchSubSampleRef.current!==null){inputParamData.refs.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParamData.refs.searchTestRef!==undefined&&inputParamData.refs.searchTestRef.current!==null){inputParamData.refs.searchTestRef.current.value=\"\";// masterData['searchedTests'] = undefined\nmasterData['searchedTest']=undefined;}//sortData(response.data)\nsortData(response.data,'ascending','ntransactionresultcode');dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{realFromDate:response.data[\"fromDate\"],realToDate:response.data[\"toDate\"]}),loading:false,showTest:inputParamData.inputData.showTest,showSample:inputParamData.inputData.showSample,activeTestKey:inputParamData.inputData.activeTestKey,skip:0,take:inputParamData.inputData.take,testskip:0,testtake:inputParamData.inputData.testtake,resultDataState:_objectSpread(_objectSpread({},inputParamData.resultDataState),{},{sort:undefined,filter:undefined}),instrumentDataState:_objectSpread(_objectSpread({},inputParamData.instrumentDataState),{},{sort:undefined,filter:undefined}),materialDataState:_objectSpread(_objectSpread({},inputParamData.materialDataState),{},{sort:undefined,filter:undefined}),taskDataState:_objectSpread(_objectSpread({},inputParamData.taskDataState),{},{sort:undefined,filter:undefined}),documentDataState:_objectSpread(_objectSpread({},inputParamData.documentDataState),{},{sort:undefined,filter:undefined}),resultChangeDataState:_objectSpread(_objectSpread({},inputParamData.resultChangeDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParamData.testCommentDataState),{},{sort:undefined,filter:undefined}),historyDataState:_objectSpread(_objectSpread({},inputParamData.historyDataState),{},{sort:undefined,filter:undefined}),samplePrintHistoryDataState:_objectSpread(_objectSpread({},inputParamData.samplePrintHistoryDataState),{},{sort:undefined,filter:undefined}),sampleHistoryDataState:_objectSpread(_objectSpread({},inputParamData.sampleHistoryDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultGetModule(inputData,userInfo,ncontrolcode,testskip,testtake){return function(dispatch){var TestList=_toConsumableArray(inputData.RE_TEST);TestList=TestList.splice(testskip,testskip+testtake);var acceptTestList=getSameRecordFromTwoArrays(TestList,inputData.RESelectedTest,\"ntransactiontestcode\");if(acceptTestList&&acceptTestList.length>0){if(Object.values(inputData).length>0&&inputData.RESelectedTest.length>0){var inputParamData={ntransactiontestcode:acceptTestList?acceptTestList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",userinfo:userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryResults\",inputParamData).then(function(response){var selectedResultGrade=[];var paremterResultcode=[];var parameterResults=response.data.ResultParameter;var predefDefaultFlag=false;parameterResults.map(function(param,index){selectedResultGrade[index]={ngradecode:param.ngradecode};paremterResultcode[index]=param.ntransactionresultcode;predefDefaultFlag=false;response.data.PredefinedValues&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(function(predefinedvalue){if(predefinedvalue.ndefaultstatus===transactionStatus.YES){if(!predefDefaultFlag){predefDefaultFlag=true;response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]=constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]||[],'spredefinedname','spredefinedname',undefined,undefined,undefined).get(\"OptionList\");}// response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n//     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n//         undefined, undefined).get(\"OptionList\");\nif(response.data.ResultParameter[index].sresult===null){response.data.ResultParameter[index].sresult=predefinedvalue.spredefinedname;response.data.ResultParameter[index].sfinal=predefinedvalue.spredefinedname;response.data.ResultParameter[index].editable=true;response.data.ResultParameter[index].ngradecode=predefinedvalue.ngradecode;}}else{if(!predefDefaultFlag){predefDefaultFlag=true;response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]=constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]||[],'spredefinedname','spredefinedname',undefined,undefined,undefined).get(\"OptionList\");}}//return null;\n});//return null;\n// response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n// undefined, undefined).get(\"OptionList\");\n});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData),response.data),{},{paremterResultcode:paremterResultcode//,\n//selectedResultGrade ,\n}),selectedRecord:{selectedResultGrade:selectedResultGrade,ResultParameter:response.data.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",openModal:true,operation:\"update\",activeTestKey:\"IDS_RESULTS\",ncontrolcode:ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});//}\n}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}};}export function completeTest(inputParam,acceptList,userInfo,completeResultId){if(acceptList!==undefined&&acceptList.length>0){return function(dispatch){var inputData=inputParam.testChildGetREParam;var inputParamData={ntype:3,nflag:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),napprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:userInfo,fromdate:inputData.fromdate,todate:inputData.todate,ntestcode:inputData.ntestcode,transactiontestcode:acceptList?acceptList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntransactiontestcode:0,activeTestKey:inputData.activeTestKey,ncontrolcode:inputParam.inputData.ncontrolcode,nneedsubsample:inputData.masterData.nneedsubsample,ndesigntemplatemappingcode:inputData.masterData.ndesigntemplatemappingcode};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\n// let url = \"resultentrybysample/getTestbasedParameter\"\nswitch(inputData.activeTestKey){case\"IDS_RESULTS\":activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":activeName=\"\";dataStateName=\"resultDataState\";break;default:activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));rsapi.post(\"resultentrybysample/completeTest\",inputParamData).then(function(response){var RE_SAMPLE=[];var RE_SUBSAMPLE=[];var RE_TEST=[];var responseData=response.data;if(responseData[\"RE_TEST\"].length>0){if(inputData.masterData.nneedsubsample)RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactionsamplecode\");else RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"npreregno\");}else{RE_TEST=inputData.masterData[\"RE_TEST\"];}RE_SUBSAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"],RE_TEST,\"ntransactionsamplecode\");if(RE_SUBSAMPLE.length>0){RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"];}else{RE_SAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_TEST,\"npreregno\");}var RESelectedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"],RE_TEST,\"npreregno\");var RESelectedSubSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"],RE_TEST,\"ntransactionsamplecode\");var RESelectedTest1=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"],acceptList,\"ntransactiontestcode\");var RESelectedTest2=updatedObjectWithNewElement(RESelectedTest1,responseData.RESelectedTest);var searchedSample=undefined;if(inputData.masterData[\"searchedSample\"]){searchedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"],RE_TEST,\"npreregno\");}var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RE_SAMPLE:RE_SAMPLE,RE_SUBSAMPLE:RE_SUBSAMPLE,RESelectedSubSample:RESelectedSubSample,searchedSample:searchedSample,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest2,RE_TEST:responseData[\"RE_TEST\"]});var skipInfo={};if(masterData.RE_SAMPLE&&masterData.RE_SAMPLE.length<=inputParam.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{skip:0,take:inputParam.take});}if(masterData.RE_TEST&&masterData.RE_TEST.length<=inputParam.testskip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:0,testtake:inputParam.testtake});}if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}var respObject=_objectSpread(_objectSpread({},inputParamData.inputData),{},{openModal:false,loadEsign:false,showConfirmAlert:false,//selectedRecord: undefined,\nloading:false,screenName:inputData.activeTestKey},skipInfo);if(searchedSample&&RESelectedSample.length===0&&searchedSample.length>0){var _objectSpread10;var paramList=inputParam.postParamList[0];var inputParameter=_objectSpread(_objectSpread({},paramList.fecthInputObject.fecthInputObject),{},(_objectSpread10={fetchUrl:paramList.fetchUrl},_defineProperty(_objectSpread10,paramList.primaryKeyField,String(searchedSample[0][paramList.primaryKeyField])),_defineProperty(_objectSpread10,\"ntype\",2),_defineProperty(_objectSpread10,\"nflag\",2),_objectSpread10));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[searchedSample[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},inputParameter),{},{checkBoxOperation:3}),respObject));}else if(!searchedSample&&RESelectedSample.length===0&&RE_SAMPLE.length>0){var _objectSpread11;var _paramList=inputParam.postParamList[0];var _inputParameter=_objectSpread(_objectSpread({},_paramList.fecthInputObject.fecthInputObject),{},(_objectSpread11={fetchUrl:_paramList.fetchUrl},_defineProperty(_objectSpread11,_paramList.primaryKeyField,String(RE_SAMPLE[0][_paramList.primaryKeyField])),_defineProperty(_objectSpread11,\"ntype\",2),_defineProperty(_objectSpread11,\"nflag\",2),_objectSpread11));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[RE_SAMPLE[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},_inputParameter),{},{checkBoxOperation:3}),respObject));}else{respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:masterData});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{loading:false})});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}export function testStart(inputParam,acceptList,userInfo,completeResultId){if(acceptList!==undefined&&acceptList.length>0){return function(dispatch){var inputData=inputParam.testChildGetREParam;var inputParamData={ntype:3,nflag:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),napprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:userInfo,fromdate:inputData.fromdate,todate:inputData.todate,ntestcode:inputData.ntestcode,transactiontestcode:acceptList?acceptList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",//ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\nntransactiontestcode:0,activeTestKey:inputData.activeTestKey,ncontrolcode:inputParam.inputData.ncontrolcode,nneedsubsample:inputData.masterData.nneedsubsample,ndesigntemplatemappingcode:inputData.masterData.ndesigntemplatemappingcode};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\n// let url = \"resultentrybysample/getTestbasedParameter\"\nswitch(inputData.activeTestKey){case\"IDS_RESULTS\":activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":activeName=\"\";dataStateName=\"resultDataState\";break;default:activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));rsapi.post(\"resultentrybysample/testInitiated\",inputParamData).then(function(response){var RE_SAMPLE=[];var RE_SUBSAMPLE=[];var RE_TEST=[];var responseData=response.data;if(responseData[\"RE_TEST\"].length>0){if(inputData.masterData.nneedsubsample)RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactionsamplecode\");else RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"npreregno\");}else{RE_TEST=inputData.masterData[\"RE_TEST\"];}RE_SUBSAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"],RE_TEST,\"ntransactionsamplecode\");if(RE_SUBSAMPLE.length>0){RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"];}else{RE_SAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_TEST,\"npreregno\");}var RESelectedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"],RE_TEST,\"npreregno\");var RESelectedSubSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"],RE_TEST,\"ntransactionsamplecode\");var RESelectedTest1=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"],acceptList,\"ntransactiontestcode\");var RESelectedTest2=updatedObjectWithNewElement(RESelectedTest1,responseData.RESelectedTest);RESelectedTest2=replaceUpdatedObject(responseData[\"RE_TEST\"],inputData.masterData.RE_TEST,'ntransactiontestcode');var searchedSample=undefined;if(inputData.masterData[\"searchedSample\"]){searchedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"],RE_TEST,\"npreregno\");}var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RE_SAMPLE:RE_SAMPLE,RE_SUBSAMPLE:RE_SUBSAMPLE,RESelectedSubSample:RESelectedSubSample,searchedSample:searchedSample,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest2,RE_TEST:responseData[\"RE_TEST\"]});var skipInfo={};if(masterData.RE_SAMPLE&&masterData.RE_SAMPLE.length<=inputParam.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{skip:0,take:inputParam.take});}if(masterData.RE_TEST&&masterData.RE_TEST.length<=inputParam.testskip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:0,testtake:inputParam.testtake});}if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}var respObject=_objectSpread(_objectSpread({},inputParamData.inputData),{},{openModal:false,loadEsign:false,showConfirmAlert:false,//selectedRecord: undefined,\nloading:false,screenName:inputData.activeTestKey},skipInfo);if(searchedSample&&RESelectedSample.length===0&&searchedSample.length>0){var _objectSpread14;var paramList=inputParam.postParamList[0];var inputParameter=_objectSpread(_objectSpread({},paramList.fecthInputObject.fecthInputObject),{},(_objectSpread14={fetchUrl:paramList.fetchUrl},_defineProperty(_objectSpread14,paramList.primaryKeyField,String(searchedSample[0][paramList.primaryKeyField])),_defineProperty(_objectSpread14,\"ntype\",2),_defineProperty(_objectSpread14,\"nflag\",2),_objectSpread14));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[searchedSample[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},inputParameter),{},{checkBoxOperation:3}),respObject));}else if(!searchedSample&&RESelectedSample.length===0&&RE_SAMPLE.length>0){var _objectSpread15;var _paramList2=inputParam.postParamList[0];var _inputParameter2=_objectSpread(_objectSpread({},_paramList2.fecthInputObject.fecthInputObject),{},(_objectSpread15={fetchUrl:_paramList2.fetchUrl},_defineProperty(_objectSpread15,_paramList2.primaryKeyField,String(RE_SAMPLE[0][_paramList2.primaryKeyField])),_defineProperty(_objectSpread15,\"ntype\",2),_defineProperty(_objectSpread15,\"nflag\",2),_objectSpread15));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[RE_SAMPLE[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},_inputParameter2),{},{checkBoxOperation:3}),respObject));}else{respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:masterData});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{loading:false})});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}//Compare two array and return the first array which is available in second array\nexport function compareTwoArray(firstArray,secondArray,PrimaryKey){var filterArray=firstArray.filter(function(x){return secondArray.some(function(y){return x[PrimaryKey]===y[PrimaryKey];});});return filterArray;}function fetchSelectedData(inputParam,respObject){return function(dispatch){rsapi.post(inputParam.fetchUrl,_objectSpread({},inputParam)).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},respObject.masterData),response.data),{},{RESelectedSample:response.data.RESelectedSample||respObject.masterData.RESelectedSample||[]});//sortData(masterData);\ndispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{masterData:masterData,loading:false})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function testMethodSourceEdit(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.test.ntransactiontestcode,ntestgrouptestcode:inputData.test.ntestgrouptestcode,ntestcode:inputData.test.ntestcode,ncontrolcode:inputData.editSourceMethodId,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestMethodSource\",inputParamData).then(function(response){var TagSource=constructOptionList(response.data.SourceData||[],\"nsourcecode\",\"ssourcename\",undefined,undefined,undefined);var TagListSource=TagSource.get(\"OptionList\");var TagMethod=constructOptionList(response.data.MethodData||[],\"nmethodcode\",\"smethodname\",undefined,undefined,undefined);var TagListMethod=TagMethod.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{SourceData:TagListSource,MethodData:TagListMethod,RESelectedSubSample:inputData.masterData.RESelectedSubSample}),selectedRecord:{ntransactiontestcode:inputData.test.ntransactiontestcode,stestsynonym:inputData.test.jsondata.stestsynonym,nsourcecode:response.data.SourceDataValue,nmethodcode:response.data.MethodDataValue},loading:false,screenName:\"IDS_TESTMETHODSOURCE\",openModal:true,operation:\"update\",ncontrolcode:inputData.editSourceMethodId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateParameterComments(inputData,masterData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,ntransactionresultcode:inputData.ntransactionresultcode,sresultcomment:inputData.sresultcomment,transactiontestcode:inputData.transactiontestcode,userinfo:inputData.userinfo,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),loading:false,loadEsign:false,screenName:\"IDS_RESULT\",openModal:false,operation:\"update\",ncontrolcode:inputData.ncontrolcode//ncontrolcode:inputData.editSourceMethodId\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function addREInstrument(inputData){return function(dispatch){var urlArray=[];var resultusedinstrument=rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\",{userinfo:inputData.userInfo});var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var UTCtimeZoneService=rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:inputData.userInfo});urlArray=[resultusedinstrument,timeZoneService,UTCtimeZoneService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory}),selectedId:null,selectedRecord:{sarno:inputData.test.sarno,ssamplearno:inputData.test.ssamplearno,stestsynonym:inputData.test.stestsynonym,transactiontestcode:inputData.RESelectedTest?inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",ntransactiontestcode:inputData.test.ntransactiontestcode,ninstrumentcatcode:TagInsturmentcategory.get(\"DefaultValue\")?TagInsturmentcategory.get(\"DefaultValue\"):[],ninstrumentcode:TagInstrument.get(\"DefaultValue\")?TagInstrument.get(\"DefaultValue\"):[],npreregno:inputData.test.npreregno,//dtodate: new Date(response[2].data),//new Date(),\ndtodate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\n//dfromdate: new Date(response[2].data),//new Date(),\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\nntzfromdate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid},ntztodate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid}},timeZoneList:TagListTimeZone||[],loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"create\",//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function addREMaterial(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\",{userinfo:inputData.userInfo,nsectioncode:inputData.test.nsectioncode}).then(function(response){var materialTypeMap=constructOptionList(response.data.MaterialType||[],\"nmaterialtypecode\",\"smaterialtypename\",undefined,undefined,undefined);var materialType=materialTypeMap.get(\"OptionList\");var materialCatMap=constructOptionList(response.data.MaterialCategory||[],\"nmaterialcatcode\",\"smaterialcatname\",undefined,undefined,undefined);var materialCat=materialCatMap.get(\"OptionList\");var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:{sarno:inputData.test.sarno,ssamplearno:inputData.test.ssamplearno,stestsynonym:inputData.test.stestsynonym,nsectioncode:inputData.test.nsectioncode,ssectionname:inputData.test.ssectionname,transactiontestcode:inputData.RESelectedTest?inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",ntransactiontestcode:inputData.test.ntransactiontestcode,npreregno:inputData.test.npreregno,nmaterialtypecode:materialTypeMap.get(\"DefaultValue\"),nmaterialcatcode:materialCatMap.get(\"DefaultValue\"),nmaterialcode:materialMap.get(\"OptionList\").length>0?materialMap.get(\"OptionList\")[0]:\"\",nmaterialinventorycode:materialInventoryMap.get(\"OptionList\").length>0?materialInventoryMap.get(\"OptionList\")[0]:\"\",sunitname:response.data.MaterialInventory!==undefined?response.data.MaterialInventory[0].sunitname:\"\",savailablequantity:response.data.MaterialInventory!==undefined?response.data.MaterialInventory[0].savailablequatity:\"\"},materialType:materialType,materialCat:materialCat,material:material,materialInventory:materialInventory,loading:false,screenName:\"IDS_MATERIAL\",openModal:true,operation:\"create\",//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedMaterailId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREMaterialCategoryByType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\",{nmaterialtypecode:inputData.selectedRecord.nmaterialtypecode.value,userinfo:inputData.userInfo}).then(function(response){var materialCatMap=constructOptionList(response.data.MaterialCategory||[],\"nmaterialcatcode\",\"smaterialcatname\",undefined,undefined,undefined);var materialCat=materialCatMap.get(\"OptionList\");var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{nmaterialcatcode:materialCatMap.get(\"DefaultValue\")||{}}),materialCat:materialCat,material:material,materialInventory:materialInventory,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREMaterialByCategory(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getREMaterialByCategory\",{nmaterialtypecode:inputData.selectedRecord.nmaterialtypecode.value,nmaterialcatcode:inputData.selectedRecord.nmaterialcatcode.value,nsectioncode:inputData.selectedRecord.nsectioncode,userinfo:inputData.userInfo}).then(function(response){var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{nmaterialcode:materialMap.get(\"OptionList\")[0],nmaterialinventorycode:materialInventoryMap.get(\"OptionList\")[0],savailablequantity:response.data.MaterialInventory[0].savailablequatity,sunitname:response.data.MaterialInventory[0].sunitname}),material:material,materialInventory:materialInventory,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREMaterialInvertoryByMaterial(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\",{nmaterialcode:inputData.selectedRecord.nmaterialcode.value,nsectioncode:inputData.selectedRecord.nsectioncode,userinfo:inputData.userInfo}).then(function(response){var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{sunitname:response.data.MaterialInventory[0].sunitname,savailablequantity:response.data.MaterialInventory[0].savailablequatity}),materialInventory:materialInventory,loading:false,screenName:\"IDS_MATERIAL\",openModal:true,//operation: \"create\",\n//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAvailableMaterialQuantity(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\",{nmaterialinventorycode:inputData.selectedRecord.nmaterialinventorycode.value,nsectioncode:inputData.selectedRecord.nsectioncode,userinfo:inputData.userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{savailablequantity:response.data.inventory.savailablequatity,sunitname:response.data.inventory.jsondata.Unit}),loading:false,screenName:\"IDS_MATERIAL\",openModal:true,//operation: \"create\",\n//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteInstrumentRecord(inputData){return function(dispatch){var inputParamData={nresultusedinstrumentcode:inputData.selectedRecord.nresultusedinstrumentcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}// export function deleteInstrumentRecord(inputData) {\n//     return function (dispatch) {\n//         let inputParamData = {\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n//             userinfo: inputData.userInfo,\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n//         }\n//         dispatch(initRequest(true));\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\n//             .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         masterData: {\n//                             ...inputData.masterData,\n//                             ...response.data\n//                         },\n//                         loading: false,\n//                         operation: \"delete\",\n//                         openModal: false,\n//                         loadEsign: false\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\nexport function fetchInstrumentRecord(inputData){return function(dispatch){var urlArray=[];//const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\nvar timeZoneService=rsapi.post(\"resultentrybysample/getResultUsedInstrument\",{nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,userinfo:inputData.userInfo});var getResultUsedInstrument=rsapi.post(\"timezone/getTimeZone\");urlArray=[timeZoneService,getResultUsedInstrument];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory},response[1].data),selectedId:inputData.editRow.nresultusedinstrumentcode,selectedRecord:{stestsynonym:inputData.editRow.stestsynonym,npreregno:response[0].data.EditResultUsedInstrument[0].npreregno,ntransactiontestcode:inputData.editRow.ntransactiontestcode,nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,ninstrumentcatcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentcatname},ninstrumentcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentid},ntzfromdate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntzfromdate,\"label\":response[0].data.EditResultUsedInstrument[0].stzfromdate},ntztodate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntztodate,\"label\":response[0].data.EditResultUsedInstrument[0].stztodate},//dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n//dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].sfromdate),dtodate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].stodate)},timeZoneList:TagListTimeZone||[],ncontrolcode:inputData.ncontrolCode,loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchMaterialRecord(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedMaterial\",{nresultusedmaterialcode:inputData.editRow.nresultusedmaterialcode,userinfo:inputData.userInfo}).then(function(response){var materialTypeMap=constructOptionList(response.data.MaterialType||[],\"nmaterialtypecode\",\"smaterialtypename\",undefined,undefined,undefined);var materialType=materialTypeMap.get(\"OptionList\");var materialCatMap=constructOptionList(response.data.MaterialCategory||[],\"nmaterialcatcode\",\"smaterialcatname\",undefined,undefined,undefined);var materialCat=materialCatMap.get(\"OptionList\");var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");var EditResultUsedMaterial=response.data.EditResultUsedMaterial[0];dispatch({type:DEFAULT_RETURN,payload:{selectedId:inputData.editRow.nresultusedinstrumentcode,materialType:materialType,materialCat:materialCat,material:material,materialInventory:materialInventory,selectedRecord:_objectSpread(_objectSpread({},EditResultUsedMaterial),{},{stestsynonym:inputData.editRow.jsondata.stestsynonym,npreregno:EditResultUsedMaterial.npreregno,ntransactiontestcode:inputData.editRow.ntransactiontestcode,nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,nmaterialtypecode:{label:EditResultUsedMaterial.jsondata.smaterialtypename,value:EditResultUsedMaterial.nmaterialtypecode},nmaterialcatcode:{\"value\":EditResultUsedMaterial.nmaterialcategorycode,\"label\":EditResultUsedMaterial.jsondata.smaterialcatname},nmaterialcode:{\"value\":EditResultUsedMaterial.nmaterialcode,\"label\":EditResultUsedMaterial.jsondata.smaterialname},nmaterialinventorycode:{\"value\":EditResultUsedMaterial.ninventorycode,\"label\":EditResultUsedMaterial.jsondata.sinventoryid},ntztodate:{\"value\":EditResultUsedMaterial.ntztodate,\"label\":EditResultUsedMaterial.stztodate},susedquantity:EditResultUsedMaterial.jsondata.nqtyused,scarriergas:EditResultUsedMaterial.jsondata.scarriergas,smobilephase:EditResultUsedMaterial.jsondata.smobilephase,sremarks:EditResultUsedMaterial.jsondata.sremarks,savailablequantity:response.data.inventory.savailablequatity,sunitname:response.data.inventory.sunitname}),ncontrolcode:inputData.ncontrolCode,loading:false,screenName:\"IDS_MATERIAL\",openModal:true,operation:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteTaskRecord(inputData,userInfo){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.selectedRecord.nresultusedtaskcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedTasks\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchTaskRecord(inputData){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.editRow.nresultusedtaskcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedTask\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.EditResultUsedTasks[0].nresultusedtaskcode,selectedRecord:{npreregno:response.data.EditResultUsedTasks[0].npreregno,stestsynonym:inputData.editRow.stestsynonym,sanalysistime:response.data.EditResultUsedTasks[0].jsondata.sanalysistime,smisctime:response.data.EditResultUsedTasks[0].jsondata.smisctime,spreanalysistime:response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,spreparationtime:response.data.EditResultUsedTasks[0].jsondata.spreparationtime,scomments:response.data.EditResultUsedTasks[0].jsondata.scomments,nresultusedtaskcode:response.data.EditResultUsedTasks[0].nresultusedtaskcode},loading:false,screenName:\"IDS_TASK\",openModal:true,operation:\"update\",ncontrolcode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function parameterRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputData.masterData),selectedId:response.data.ParameterComments.ntransactionresultcode,selectedRecord:{sresultcomment:response.data.ParameterComments.sresultcomment,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,transactiontestcode:response.data.ParameterComments.ntransactiontestcode,ntransactionresultcode:response.data.ParameterComments.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode},loading:false,screenName:\"IDS_PARAMETERCOMMENTS\",openModal:true,operation:\"updateParameterComments\",ncontrolcode:inputData.controlcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function checkListRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,napprovalparametercode:inputData.selectedRecord.napprovalparametercode,nchecklistversioncode:inputData.selectedRecord.nchecklistversioncode,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode.toString(),ncontrolcode:inputData.ncontrolcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getChecklistdesign\",inputParamData).then(function(response){var selectedRecord={};var lsteditedQB=[];selectedRecord={sarno:inputData.selectedRecord.sarno,ssamplearno:inputData.selectedRecord.ssamplearno,npreregno:inputData.selectedRecord.npreregno,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode,ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,transactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\"};response.data.ChecklistData.map(function(checklist){selectedRecord[checklist.nchecklistversionqbcode]={nchecklistqbcode:checklist.nchecklistqbcode,nchecklistversioncode:checklist.nchecklistversioncode,nchecklistversionqbcode:checklist.nchecklistversionqbcode,sdefaultvalue:checklist.sdefaultvalue,sarno:inputData.selectedRecord.sarno,ssamplearno:inputData.selectedRecord.ssamplearno,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym};lsteditedQB.push(checklist.nchecklistversionqbcode);return null;});response.data.ChecklistData.map(function(checklist){selectedRecord['jsondata']=_objectSpread(_objectSpread({},selectedRecord['jsondata']),{},_defineProperty({},checklist.nchecklistversionqbcode,checklist.sdefaultvalue));return null;});selectedRecord[\"editedQB\"]=lsteditedQB;dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.selectedId,selectedRecord:selectedRecord,loading:false,screenName:\"IDS_CHECKLISTRESULT\",openTemplateModal:true,needSaveButton:inputData.needSaveButton,operation:\"create\",ncontrolCode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode){return function(dispatch){var listResultCheckList=[];if(selectedRecord&&selectedRecord.jsondata){selectedRecord.editedQB.map(function(qbcode){return listResultCheckList.push(selectedRecord[qbcode]);});var inputParamData={ntransactionresultcode:selectedRecord.ntransactionresultcode,ntransactiontestcode:selectedRecord.ntransactiontestcode.toString(),transactiontestcode:selectedRecord.transactiontestcode,npreregno:selectedRecord.npreregno,ResultCheckList:{nchecklistversioncode:listResultCheckList[0].nchecklistversioncode,nchecklistqbcode:listResultCheckList[0].nchecklistqbcode,jsondata:selectedRecord.jsondata,npreregno:selectedRecord.npreregno,ntransactionresultcode:selectedRecord.ntransactionresultcode},//jsondata: selectedRecord.jsondata,\nuserinfo:userInfo,nregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ncontrolcode:-1};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/createResultEntryChecklist\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:{},templateData:undefined,openTemplateModal:false,openModal:false,loading:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{dispatch({type:DEFAULT_RETURN,payload:{openTemplateModal:false,selectedRecord:{},loading:false,loadEsign:false}});}};}export function defaultTest(inputData,RESelectedTest,RESelectedSample,nregtypecode,nregsubtypecode){if(RESelectedTest!==undefined&&RESelectedTest.length>0){return function(dispatch){var inputParamData={userinfo:inputData.userinfo,ntransactiontestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntestgrouptestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntestgrouptestcode;}).join(\",\"):\"\",npreregno:RESelectedTest?RESelectedTest.map(function(preregno){return preregno.npreregno;}).join(\",\"):\"\",//RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\nnregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateDefaultValue\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{TestParameters:replaceUpdatedObject(response.data.TestParameters,inputData.masterData.TestParameters,'ntransactionresultcode'),RESelectedSubSample:inputData.masterData.RESelectedSubSample}),loading:false,activeTestKey:\"IDS_RESULTS\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}export function getFormula(parameterData,userInfo,masterData,index,selectedRecord){return function(dispatch){var inputParamData={ntransactiontestcode:parameterData.ntransactiontestcode,nformulacode:parameterData.ntestgrouptestformulacode,userinfo:userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFormulaInputs\",inputParamData).then(function(response){var validateFormulaMandyFields=response.data.DynamicFormulaFields.map(function(item,index){return{\"idsName\":\"IDS_FILLALLFIELDS\",\"dataField\":index,\"mandatory\":true};});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),selectedRecord:_objectSpread(_objectSpread({},selectedRecord),{},{parameterData:parameterData,sformulacalculationdetail:response.data.query,formulainput:response.data.Formula,resultindex:index,selectedForumulaInput:[]}),validateFormulaMandyFields:validateFormulaMandyFields,loading:false,screenName:\"IDS_RESULTFORMULA\",showFormula:true,operation:\"validate\",showValidate:true}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function calculateFormula(inputDataValue){return function(dispatch){var inputData={ntransactiontestcode:inputDataValue.selectedRecord.parameterData.ntransactiontestcode,ntransactionresultcode:inputDataValue.selectedRecord.parameterData.ntransactionresultcode,npreregno:inputDataValue.selectedRecord.parameterData.npreregno,sformulacalculationcode:inputDataValue.selectedRecord.sformulacalculationdetail,nformulacode:inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,userinfo:inputDataValue.userInfo,dynamicformulafields:inputDataValue.lstDynamicFields};dispatch(initRequest(true));rsapi.post(\"testmaster/calculateFormula\",inputData).then(function(response){// inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n// {\n//     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n//     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n//     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n//     sresult: response.data.Result,\n//     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n//     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n//     parameter: inputDataValue.selectedRecord.parameterData\n// }\ninputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable']=true;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"]=3;inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex]={ngradecode:numericGrade(inputDataValue.selectedRecord.parameterData,parseInt(response.data.Result))};dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputDataValue.masterData),selectedRecord:{selectedResultGrade:inputDataValue.selectedResultGrade,ResultParameter:inputDataValue.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",showFormula:false,operation:\"update\",showValidate:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{//toast.warn(error.response.data);\ntoast.warn(error.response.data[\"Result\"]);}});};}export function getREFilterTestData(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestBasedOnCombo\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultFilterStatus:inputData.defaultFilterStatus,defaultRegistrationSubType:inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\nndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,DesignTemplateMappingValue:inputData.DesignTemplateMappingValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREFilterTemplate(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestBasedOnCombo\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationSubType:inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\nndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,DesignTemplateMappingValue:inputData.DesignTemplateMappingValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateTestMethodSource(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateTestMethodSource\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{RE_TEST:replaceUpdatedObject(response.data.RE_TEST,masterData.RE_TEST,'ntransactiontestcode')}),loading:false,openModal:false,loadEsign:false// activeTestKey: \"IDS_RESULTS\"\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultImportFile(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getImportResultEntry\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},masterData),loading:false,openModal:false// activeTestKey: \"IDS_RESULTS\"\n}});if(response.data.returnStatus&&response.data.returnStatus!==\"\"){toast.info(response.data.returnStatus);}else{toast.warn(response.data.returnStatus);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function validateEsignCredentialComplete(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=\"performaction\";inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"complete\"){dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam.inputData.userinfo));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"default\"){dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteInstrument\"){dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"createMethod\"){dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteTask\"){dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"updateParameterComments\"){dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"operation\"]===\"updatechecklist\"){var _inputParam$screenDat=inputParam[\"screenData\"],selectedRecord=_inputParam$screenDat.selectedRecord,userInfo=_inputParam$screenDat.userInfo,nregtypecode=_inputParam$screenDat.nregtypecode,nregsubtypecode=_inputParam$screenDat.nregsubtypecode;delete selectedRecord.esignpassword;delete selectedRecord.esigncomments;delete selectedRecord.agree;delete inputParam.inputData.password;userInfo=inputParam.inputData.userinfo;dispatch(onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode));}}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getMeanCalculationTestParameter(meanParam){return function(dispatch){dispatch(initRequest(true));var inputData={npreregno:meanParam.selectedRecord.npreregno,ntransactionresultcode:meanParam.selectedRecord.ntransactionresultcode,userinfo:meanParam.userInfo};return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\",inputData).then(function(response){var list=response.data||[];// const optionList = [];\n// list.map(item=>{\n//     console.log(\"item:\", item);\n//         optionList.push({item:item, \n//                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n//                         value:item.ntransactionresultcode})\n//     })\n// const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\ndispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:true,meanTestParameterList:list,screenName:\"IDS_MEANPARAMETER\",ncontrolcode:meanParam.ncontrolCode,selectedTestParameterMean:meanParam.selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","nneedtemplatebasedflow","activeName","dataStateName","post","checkBoxOperation","then","response","data","oldSelectedTest","RESelectedTest","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedMaterial","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","oldSelectedSubSample","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","join","getTestChildTabREDetail","getTestREDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","showFilter","activeSampleTab","subSample","responseData","RegistrationSampleComment","RegistrationSampleAttachment","testList","wholeSubsampleList","RegistrationGetSubSample","selectedSubSample","activeSubSampleTab","screenName","getSampleChildTabREDetail","url","getRERegistrationType","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","predefDefaultFlag","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","formatMessage","id","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","testStart","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","jsondata","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","sarno","ssamplearno","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","addREMaterial","nsectioncode","materialTypeMap","MaterialType","materialType","materialCatMap","MaterialCategory","materialCat","materialMap","Material","material","materialInventoryMap","MaterialInventory","materialInventory","ssectionname","nmaterialtypecode","nmaterialcatcode","nmaterialcode","nmaterialinventorycode","sunitname","savailablequantity","savailablequatity","addResultUsedMaterailId","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","getAvailableMaterialQuantity","inventory","Unit","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","fetchMaterialRecord","nresultusedmaterialcode","EditResultUsedMaterial","label","smaterialtypename","nmaterialcategorycode","smaterialcatname","smaterialname","ninventorycode","sinventoryid","susedquantity","nqtyused","scarriergas","smobilephase","sremarks","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","sformulacalculationdetail","query","formulainput","Formula","resultindex","selectedForumulaInput","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","dynamicformulafields","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","DesignTemplateMappingValue","getREFilterTemplate","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat,filterRecordBasedOnPrimaryKeyName, reArrangeArrays\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            //nneedsubsample: inputData.masterData.nneedsubsample,\r\n            nneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow:inputData.nneedtemplatebasedflow\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    sortData(response.data);\r\n                    // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\r\n                    // responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n                    \r\n                    \r\n                    \r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                     }\r\n                    // else if(inputData.checkBoxOperation === 7){\r\n\r\n                    //     getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n\r\n                    //     let list = []\r\n                    //     switch (inputData.activeTestKey) {\r\n                    //         case \"IDS_RESULTS\":\r\n                    //             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                    //             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"TestParameters\"\r\n                    //             dataStateName = \"resultDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_INSTRUMENT\":\r\n                    //             list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                    //             ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultUsedInstrument\"\r\n                    //             dataStateName = \"instrumentDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_MATERIAL\":\r\n                    //             list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                    //             ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultUsedMaterial\"\r\n                    //             dataStateName = \"materialDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_TASK\":\r\n                    //             list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                    //             list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                    //             ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultUsedTasks\"\r\n                    //             dataStateName = \"taskDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_TESTATTACHMENTS\":\r\n                    //             list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                    //             RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"RegistrationTestAttachment\"\r\n                    //             break;\r\n                    //         case \"IDS_RESULTCHANGEHISTORY\":\r\n                    //             list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                    //             ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultChangeHistory\"\r\n                    //             dataStateName = \"resultChangeDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_TESTCOMMENTS\":\r\n                    //             list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                    //             RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"RegistrationTestComment\"\r\n                    //             dataStateName = \"testCommentDataState\"\r\n                    //             break;\r\n                    //         default:\r\n                    //             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                    //             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"TestParameters\"\r\n                    //             dataStateName = \"resultDataState\"\r\n                    //             break;\r\n                    \r\n                    //     }\r\n                    \r\n                    // } \r\n                    else {\r\n                        let list = []\r\n                        if(!inputData.masterData.realRegSubTypeValue.nneedsubsample)\r\n                        {\r\n                            let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            //let isGrandChildGetRequired = false;\r\n            let oldSelectedSubSample = inputData.masterData.RESelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if(inputData[\"statusNone\"])\r\n            {\r\n             TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n             subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else\r\n            {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n          \r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let masterData = { ...inputData.masterData, RESelectedSample, RESelectedSubSample, RESelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey,masterData\r\n                }\r\n                \r\n                if (RESelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                        ]\r\n                    }\r\n                    dispatch(getTestChildTabREDetail(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData,masterData,\r\n                        childTabsKey: [\"RE_TEST\"]\r\n                    }\r\n                    dispatch(getTestREDetail(inputData, true));\r\n                }\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    // RESelectedSample: inputData.RESelectedSample,\r\n                    // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\r\n                    RESelectedTest: TestSelected ? TestSelected :inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length>0 ? [inputData.masterData.RE_SUBSAMPLE[0]]:[]\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RE_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getTestREDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode\r\n                   // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters =  keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName (inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno, \"npreregno\"): filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\") \r\n                \r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample:inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData,'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.RESelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays( inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedTest:[testList[0]],\r\n                            RE_TEST:testList,\r\n                           // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    }else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if(subSample)\r\n                    {\r\n                        let wholeSubsampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    let keepOld = false;\r\n                    let ntransactionsamplecode;\r\n                    if (oldSelectedSubSample.length > 0) {\r\n                        keepOld = true\r\n                    } else {\r\n                        ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                    }\r\n                 \r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                            break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.screenName,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            // let isGrandChildGetRequired = false;\r\n            // if (TestSelected.length > 0) {\r\n            //     isGrandChildGetRequired = true;\r\n            // } else {\r\n            //     isGrandChildGetRequired = false;\r\n            // }\r\n\r\n            let TestSelected = \r\n            inputData[\"statusNone\"] ?\r\n               getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\"):\r\n              filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n              let isGrandChildGetRequired = false;\r\n              if (TestSelected.length > 0) {\r\n                  isGrandChildGetRequired = false;\r\n              } else {\r\n                  isGrandChildGetRequired = true;\r\n              }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //     ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ? \r\n                inputData[\"statusNone\"] ?\r\n                getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):\r\n                filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n           case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"ResultUsedMaterial\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    //sortData(response.data,'ascending','ntransactiontestcode');\r\n                    //sortData(response.data,'ascending','ntestattachmentcode');\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    let skipInfo = {};\r\n                    //responseData = sortData(responseData)\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            //defaultFilterStatus:inputData.masterData.defaultFilterStatus,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getJobStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: inputParamData.masterData.nneedsubsample })\r\n            .then(response => {\r\n                let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                //sortData(response.data)\r\n                sortData(response.data,'ascending','ntransactionresultcode')\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let TestList = [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        let predefDefaultFlag = false;\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n                            predefDefaultFlag = false;\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        if(!predefDefaultFlag)\r\n                                        {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                            undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n                                        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                        //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                        //         undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                         if(!predefDefaultFlag)\r\n                                         {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                            undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n                                       \r\n                                    }\r\n                                    //return null;\r\n                                  \r\n                                });\r\n                            //return null;\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            // undefined, undefined).get(\"OptionList\");\r\n                        });\r\n                       \r\n                        \r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                //ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/testInitiated\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n                    RESelectedTest2= replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        // ...inputData.masterData,\r\n                        // //...responseData,\r\n                        // //RE_SAMPLE,\r\n                        // //RE_SUBSAMPLE,\r\n                        // //RESelectedSubSample,\r\n                        // searchedSample,\r\n                        // RE_TEST:replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n                        // //RESelectedSample,\r\n                        // //RESelectedTest: RESelectedTest2,\r\n                        // //RE_TEST: responseData[\"RE_TEST\"]\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.jsondata.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function addREMaterial(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo,nsectioncode:inputData.test.nsectioncode})\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsectioncode: inputData.test.nsectioncode,\r\n                            ssectionname: inputData.test.ssectionname,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            npreregno: inputData.test.npreregno,\r\n                            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\r\n                             nmaterialcode:  materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                             nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length >0? materialInventoryMap.get(\"OptionList\")[0]:\"\",\r\n                            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname:\"\",\r\n                            savailablequantity:response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity:\"\"\r\n                        },\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedMaterailId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialCategoryByType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {},\r\n                        },\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialByCategory(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                             nmaterialcode: materialMap.get(\"OptionList\")[0],\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\r\n                            savailablequantity:response.data.MaterialInventory[0].savailablequatity,\r\n                            sunitname:response.data.MaterialInventory[0].sunitname\r\n                        },\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialInvertoryByMaterial(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\r\n            nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            sunitname: response.data.MaterialInventory[0].sunitname,\r\n                            savailablequantity:response.data.MaterialInventory[0].savailablequatity\r\n                        },\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getAvailableMaterialQuantity(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\r\n            nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.jsondata.Unit\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function deleteInstrumentRecord(inputData) {\r\n//     return function (dispatch) {\r\n//         let inputParamData = {\r\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n//             userinfo: inputData.userInfo,\r\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n//             .then(response => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         masterData: {\r\n//                             ...inputData.masterData,\r\n//                             ...response.data\r\n//                         },\r\n//                         loading: false,\r\n//                         operation: \"delete\",\r\n//                         openModal: false,\r\n//                         loadEsign: false\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchMaterialRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\r\n            nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        selectedRecord: {\r\n                            ...EditResultUsedMaterial,\r\n                            stestsynonym: inputData.editRow.jsondata.stestsynonym,\r\n                            npreregno: EditResultUsedMaterial.npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            nmaterialtypecode: {\r\n                                label: EditResultUsedMaterial.jsondata.smaterialtypename,\r\n                                value: EditResultUsedMaterial.nmaterialtypecode\r\n                            },\r\n                            nmaterialcatcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcategorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\r\n                            },\r\n                            nmaterialcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialname,\r\n                            },\r\n                            nmaterialinventorycode: {\r\n                                \"value\": EditResultUsedMaterial.ninventorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.sinventoryid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": EditResultUsedMaterial.ntztodate,\r\n                                \"label\": EditResultUsedMaterial.stztodate\r\n                            },\r\n                            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\r\n                            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\r\n                            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\r\n                            sremarks: EditResultUsedMaterial.jsondata.sremarks,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.sunitname\r\n                        },\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    sarno:inputData.selectedRecord.sarno,\r\n                    ssamplearno:inputData.selectedRecord.ssamplearno,\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue,\r\n                        sarno:inputData.selectedRecord.sarno,\r\n                        ssamplearno:inputData.selectedRecord.ssamplearno,\r\n                        stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord['jsondata']={\r\n                        ...selectedRecord['jsondata'],\r\n                        [checklist.nchecklistversionqbcode]:checklist.sdefaultvalue\r\n                    }\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.jsondata) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: {\r\n                    nchecklistversioncode:listResultCheckList[0].nchecklistversioncode,\r\n                    nchecklistqbcode:listResultCheckList[0].nchecklistqbcode,\r\n                    jsondata: selectedRecord.jsondata,\r\n                    npreregno: selectedRecord.npreregno,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                },\r\n                //jsondata: selectedRecord.jsondata,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            selectedForumulaInput: []\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue:inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getREFilterTemplate(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue:inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/"]},"metadata":{},"sourceType":"module"}