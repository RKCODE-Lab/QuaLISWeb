{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\DesignTemplateMapping.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail, getMappedFieldProps, editFieldConfigService, auditFieldConfigService, mappingFieldConfigService, getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService, exportFieldConfigService, configureCheckList, getConfigureCheckListLatestVersion } from '../../actions';\nimport TemplateFilter from './TemplateFilter';\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\nimport { getControlMap, showEsign, constructOptionList, validateCreateView } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component'; // import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { designProperties, formCode, SampleType, transactionStatus, templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\n// SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\n//SAMPLETEMPLATEFIELDS, \n//SUBSAMPLETEMPLATEFIELDS, \ndesignComponents, QUALISFORMS //ARNOMULTILINGUAL, SUBARNOMULTILINGUAL\n} from '../../components/Enumeration';\nimport AddSynonym from '../../components/droparea/AddSynonym';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nimport ConfigureScreenFields from './ConfigureScreenFields';\nimport ConfigureEditFields from './ConfigureEditFields';\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\nimport ConfigureAuditFields from './ConfigureAuditFields';\nimport CustomPopover from '../../components/customPopover';\nimport ConfigureSendToStoreFields from './configureSendToStoreFields'; //import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfigureExportFields from './ConfigureExportFields';\nimport ConfigureCheckList from './ConfigureCheckList';\nimport ConfigureCheckListAdd from './ConfigureCheckListAdd';\nimport { process } from '@progress/kendo-data-query';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DesignTemplateMapping extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.filterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        // let uRL = \"\";\n        let inputData = [];\n\n        if (fieldname === \"sampleType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: parseInt(event.value)\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultsampletype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === SampleType.Masters) {\n            const masterTypeArray = this.state.masterTypeArray;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  masterTypeArray,\n                  defaultMasterType: masterTypeArray[0],\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (event.value === SampleType.GOODSIN) {\n            let masterData = { ...this.props.Login.masterData,\n              defaultsampletype: event\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  nregtypecode: -1,\n                  nregsubtypecode: -1,\n                  defaultform: {\n                    value: -1,\n                    label: \"-\"\n                  }\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            inputParam[\"masterData\"][\"defaultform\"] = {\n              value: -1,\n              label: \"-\"\n            };\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else if (fieldname === \"registrationType\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: parseInt(event.value),\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value\n          };\n          let masterData = { ...this.props.Login.masterData,\n            defaultregtype: event\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n          this.props.getTMPFilterRegSubType(inputParam);\n        } else if (fieldname === \"registrationSubType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultregsubtype: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldname === \"masterType\") {\n          let masterData = { ...this.props.Login.masterData,\n            defaultMasterType: event\n          };\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 1,\n            nsampletypecode: SampleType.Masters\n          };\n          let inputParam = {\n            masterData,\n            inputData\n          };\n\n          if (event.value === 1) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...masterData,\n                  qualisforms: [],\n                  defaultform: this.state.newMasterForm\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.getTMPFilterRegType(inputParam);\n          }\n        } else {\n          let masterData = { ...this.props.Login.masterData,\n            defaultform: event\n          };\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onChangeExportFields = (event, dataItem, field, dataIndex, formCode, operation) => {\n      const sampleexportdataResult = this.props.Login.sampleexportdataResult;\n      sampleexportdataResult[formCode][dataIndex] = { ...sampleexportdataResult[formCode][dataIndex],\n        sampleexportfields: event.target.checked\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          sampleexportdataResult\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onClickAddCheckList = () => {\n      this.props.getConfigureCheckListLatestVersion(this.props.Login.userInfo);\n    };\n\n    this.onComboChangeCheckList = (event, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[field] = event;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.openModal = (ncontrolcode, operation) => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: operation,\n          ncontrolcode,\n          selectedId: null,\n          openModal: true,\n          screenName: this.props.Login.inputParam.displayName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      console.log(\"this.props.Login.masterData:\", this.props.Login.masterData);\n      const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n      const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n      const sampleType = this.props.Login.masterData.realSampleValue.value;\n      const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n      const tabMap = new Map();\n      tabMap.set(\"IDS_TEMPLATE\", /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 36\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 814,\n          columnNumber: 13\n        }\n      }, Layout ? Layout.map(item => /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818,\n          columnNumber: 29\n        }\n      }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / item.children.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 821,\n          columnNumber: 41\n        }\n      }, column.children.map(component => {\n        return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 61\n          }\n        }, component.children.map(componentrow => componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n          md: componentrow && componentrow.length || 4,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 830,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 831,\n            columnNumber: 77\n          }\n        }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 77\n          }\n        }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 840,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 841,\n            columnNumber: 65\n          }\n        }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 65\n          }\n        }, \" \", \"-\"));\n      }))) : \"\")) : \"\")));\n\n      if (sampleType !== SampleType.Masters && sampleType !== SampleType.GOODSIN && needsubsample) {\n        tabMap.set(\"IDS_SUBSAMPLETEMPLATE\", /*#__PURE__*/React.createElement(Card, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(Card.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 861,\n            columnNumber: 17\n          }\n        }, subSampleLayout ? subSampleLayout.map(item => /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 865,\n            columnNumber: 33\n          }\n        }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n          md: 12 / item.children.length,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 45\n          }\n        }, column.children.map(component => {\n          return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 873,\n              columnNumber: 65\n            }\n          }, component.children.map(componentrow => componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(Col, {\n            md: componentrow && componentrow.length || 4,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 876,\n              columnNumber: 73\n            }\n          }, /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 877,\n              columnNumber: 77\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 878,\n              columnNumber: 81\n            }\n          }, componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 879,\n              columnNumber: 81\n            }\n          }, \"-\"))))) : component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" && /*#__PURE__*/React.createElement(FormGroup, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 887,\n              columnNumber: 65\n            }\n          }, /*#__PURE__*/React.createElement(FormLabel, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 888,\n              columnNumber: 69\n            }\n          }, component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label), /*#__PURE__*/React.createElement(ReadOnlyText, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 889,\n              columnNumber: 69\n            }\n          }, \" \", \"-\"));\n        }))) : \"\")) : \"\")));\n      }\n\n      return tabMap;\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateCL: event.dataState\n      });\n    };\n\n    this.actionMethod = value => {\n      if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, \"configure\");\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configureedit');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\n        this.openFieldConfiguration(value.controlId, 'configuresubsample');\n      } else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\n        this.editFieldConfiguration(value.controlId, 'configuresubsampleedit');\n      } else if (value.method === templateMappingAction.CONFIGUNIQUE) {\n        this.openCombinationUniqueFieldConfiguration(value.controlId);\n      } else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\n        this.auditFieldConfiguration(value.controlId, 'configureaudit');\n      } else if (value.method === templateMappingAction.CONFIGSENDTOSTORE) {\n        this.mappingFieldConfiguration(value.controlId, 'configuresendtostore');\n      } else if (value.method === templateMappingAction.CONFIGEXPORTFIELDS) {\n        this.exportFieldConfiguration(value.controlId, 'configureexportfields');\n      } else if (value.method === templateMappingAction.CONFIGURECHECKLIST) {\n        this.configureCheckList(value.controlId, 'configurechecklist');\n      }\n    };\n\n    this.configureCheckList = (controlCode, operation) => {\n      let ncontrolcode = controlCode;\n      let screenName = \"\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          userinfo: this.props.Login.userInfo //  nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.configureCheckList(inputParam);\n    };\n\n    this.exportFieldConfiguration = (controlCode, operation) => {\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          userinfo: this.props.Login.userInfo,\n          nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.exportFieldConfigService(inputParam);\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\n        //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.realSampleValue.value,\n        nformcode: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? formCode.GOODSIN : parseInt(this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1)\n      };\n      let inputParam = {\n        masterData: this.props.Login.masterData,\n        inputData\n      };\n      this.props.reloadDesignTemplateMapping(inputParam);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters || this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\n        nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters || this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\n        nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\n        nformcode: this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? formCode.GOODSIN : parseInt(this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1)\n      };\n      let masterData = { ...this.props.Login.masterData,\n        realSampleValue: this.props.Login.masterData.defaultsampletype,\n        realFormValue: this.props.Login.masterData.defaultform,\n        realRegTypeValue: this.props.Login.masterData.defaultregtype,\n        realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\n      };\n      let inputParam = {\n        masterData,\n        inputData\n      };\n      this.props.getTMPFilterSubmit(inputParam);\n    };\n\n    this.onApproveClick = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\n        const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode; // if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        //     const updateInfo = {\n        //         typeName: DEFAULT_RETURN,\n        //         data: {\n        //              openModal: true,\n        //             operation: \"approve\", ncontrolCode: ncontrolCode\n        //         }\n        //     }\n        //     this.props.updateStore(updateInfo);\n        // } else {\n\n        let inputData = {};\n\n        if (this.props.Login.realSampleValue && this.props.Login.realSampleValue.value !== SampleType.GOODSIN) {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n        } else {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getGoodsInJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n        } // console.log(\"deleteValidation 2:\", deleteValidation);\n        //let inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\n\n\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping; // inputData[\"deletevalidationlist\"] = deleteValidation;\n\n        inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\"\n        };\n        const inputParam = {\n          inputData: { ...inputData\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          screenName: 'Template Mapping',\n          operation: \"Approve\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType; // console.log(\"approve:\", inputParam);\n\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"Approve\",\n              screenName: 'Template Mapping'\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } //  }\n      else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATERETIRED\"\n        }));\n      }\n    };\n\n    this.configureunique = () => {\n      let inputData = [];\n      let operation = this.props.Login.operation;\n      let designData = this.props.Login.designData; //  let formCodeArray = Object.keys(this.state.selectedRecord);\n\n      let isCheckedSampleMandatory = false;\n      let isCheckedSubSampleMandatory = this.props.Login.dataListSubSample.length === 0 ? true : false;\n      const dataList = [];\n      const dataListsubsample = [];\n      let dataListKeyvalue = [];\n      let dataListsubsampleKeyvalue = [];\n      this.props.Login.dataListSubSample.map(x => {\n        if (Object.keys(x).length !== 0) {\n          dataListsubsample.push(x);\n          dataListsubsampleKeyvalue = Object.keys(x);\n        }\n      });\n      this.props.Login.dataList.map(x => {\n        if (Object.keys(x).length !== 0) {\n          dataList.push(x);\n          dataListKeyvalue = Object.keys(x);\n        }\n      });\n      designData.sampletemplatemandatoryfields && designData.sampletemplatemandatoryfields.map(item => {\n        dataListKeyvalue.map(value => {\n          if (value === item[2]) {\n            isCheckedSampleMandatory = true;\n          }\n        });\n      });\n      designData.subsampletemplatemandatoryfields && designData.subsampletemplatemandatoryfields.map(item => {\n        dataListsubsampleKeyvalue.map(value => {\n          if (value === item[2]) {\n            isCheckedSubSampleMandatory = true;\n          }\n        });\n      });\n      designData.templatemandatoryfields && designData.templatemandatoryfields.map(item => {\n        dataListKeyvalue.map(value => {\n          if (value === item[2]) {\n            isCheckedSampleMandatory = true;\n          }\n        });\n      });\n\n      if (isCheckedSampleMandatory && isCheckedSubSampleMandatory) {\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n          designData['mastercombinationunique'] = dataList;\n        } else if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n          designData['combinationunique'] = dataList;\n        } else {\n          designData['samplecombinationunique'] = dataList;\n          designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList; // this.props.Login.dataListSubSample.map(x => {\n          //     if (Object.keys(x).length !== 0) {\n          //         dataListsubsample.push(x);\n          //     }\n          // })\n\n          designData['subsamplecombinationunique'] = dataListsubsample;\n          designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample;\n        }\n\n        inputData = {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            jsondataobj: designData\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        operation = 'configure';\n        let postParam = undefined;\n        const inputParam = {\n          classUrl: \"designtemplatemapping\",\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation,\n          postParam,\n          searchRef: this.searchRef,\n          dataList: [],\n          dataListCount: [],\n          dataListCountSubSample: [],\n          dataListSubSample: []\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              dataList: [],\n              dataListCount: [],\n              dataListCountSubSample: [],\n              dataListSubSample: []\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        if (!isCheckedSampleMandatory) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYONEMANDATORYFIELD\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTANYONEMANDATORYFIELDINSUBSAMPLE\"\n          }));\n        }\n      }\n    };\n\n    this.ConfirmDelete = () => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteTemplate());\n    };\n\n    this.deleteTemplate = () => {\n      if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT) {\n        const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n        let inputData = [];\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let postParam = undefined;\n        inputData[\"designtemplatemapping\"] = {\n          \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n        };\n        inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n        postParam = {\n          inputListName: \"DesignTemplateMapping\",\n          selectedObject: \"selectedDesignTemplateMapping\",\n          primaryKeyField: \"ndesigntemplatemappingcode\",\n          primaryKeyValue: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n          fetchUrl: \"designtemplatemapping/getDesignTemplateMappingById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          inputData: { ...inputData,\n            \"userinfo\": this.props.Login.userInfo\n          },\n          classUrl: 'designtemplatemapping',\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          screenName: 'Template Mapping',\n          operation: \"delete\",\n          postParam,\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        let saveType;\n        const masterData = this.props.Login.masterData;\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\n\n        if (esignNeeded) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              openModal: true,\n              operation: \"delete\",\n              screenName: 'Template Mapping'\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORDTODELETE\"\n        }));\n      }\n    };\n\n    this.deleteCombinationUnique = (index, eventKey) => {\n      if (eventKey === \"subsample\") {\n        let dataList = this.props.Login.subsampledataList || [];\n        let dataListCount = this.props.Login.subsampledataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            subsampledataListCount: dataListCount,\n            subsampledataList: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        let dataList = this.props.Login.dataList || [];\n        let dataListCount = this.props.Login.dataListCount || [];\n        dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]; //   delete dataListCount[index]\n\n        if (dataList[index] || dataList[index] === null) {\n          dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]; // delete dataList[index]\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.addCombinatonUnique = (designData, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCountSubSample || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCountSubSample: dataListCount,\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || []; //    const obj={}\n        //     designData.map(item=>{\n        //         obj[item[\"2\"]]={...item}\n        //     })\n        //dataList.push({})\n\n        const dataListCount = this.props.Login.dataListCount || [];\n        dataListCount.push(dataListCount.length + 1);\n        dataList.push({});\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListCount,\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.openCombinationUniqueFieldConfiguration = controlCode => {\n      let openModal = true;\n      let operation = 'configureunique';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.combinationUniqueConfigService(inputParam);\n    };\n\n    this.openFieldConfiguration = (controlCode, operation) => {\n      let openModal = true; //let operation = 'configure';\n\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.getMappedFieldProps(inputParam);\n    };\n\n    this.editFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      }; // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\n      //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      //  }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.editFieldConfigService(inputParam);\n    };\n\n    this.mappingFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      // let operation = 'configureedit';\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let displayname = \"ConfigSendTOStore\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping\n          },\n          userinfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData\n        },\n        operation,\n        ncontrolcode,\n        screenName,\n        displayname\n      };\n\n      if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\n      }\n\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.mappingFieldConfigService(inputParam);\n    };\n\n    this.auditFieldConfiguration = (controlCode, operation) => {\n      //console.log(\"edit config:\", this.props.Login);\n      let ncontrolcode = controlCode;\n      let screenName = \"IDS_FIELDS\";\n      let inputParam = {\n        inputData: {\n          designtemplatemapping: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          },\n          nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value : -1,\n          nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value : -1,\n          //nregtypecode: this.props.Login.masterData.defaultregtype.value,\n          //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\n          userinfo: this.props.Login.userInfo,\n          nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\n        },\n        operation,\n        ncontrolcode,\n        screenName\n      };\n      inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\n      this.props.auditFieldConfigService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.loadEsign) {\n        if (operation === \"configurechecklistadd\") {\n          selectedRecord = {};\n          loadEsign = false;\n          operation = \"configurechecklist\";\n        } else if (operation === \"Approve\" || operation === \"delete\") {\n          loadEsign = false;\n          openModal = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? true : false;\n          selectedRecord = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.state.selectedRecord : {};\n        } else {\n          loadEsign = false;\n        }\n      } else if (operation === \"configurechecklistadd\") {\n        selectedRecord = {};\n        operation = \"configurechecklist\";\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation,\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          dataList: [],\n          dataListCount: [],\n          dataListSubSample: [],\n          dataListCountSubSample: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, screenName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (screenName === \"Sample\") {\n        if (fieldName == \"Quantity\") {\n          selectedRecord[\"Quantity\"] = comboData;\n        } else {\n          selectedRecord[\"Unit\"] = comboData;\n        }\n      } else if (screenName === \"SubSample\") {\n        if (fieldName == \"Quantity\") {\n          selectedRecord[\"SubQuantity\"] = comboData;\n        } else {\n          selectedRecord[\"SubUnit\"] = comboData;\n        }\n      } else if (screenName === \"Masters\") {\n        selectedRecord[\"nnewmodule\"] = comboData;\n        selectedRecord[\"nmodulecode\"] = [];\n      } else {\n        selectedRecord[fieldName] = comboData;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onConfigureComboChange = (comboData, formCode, item) => {\n      if (item === \"Quantity\") {\n        const fieldName = item;\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (item === \"Unit\") {\n        const fieldName = item;\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        const fieldName = item.label;\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[formCode] = { ...selectedRecord[formCode],\n          [fieldName]: comboData\n        };\n        this.setState({\n          selectedRecord\n        });\n      } // let designData = this.props.Login.editFieldDesignData;\n      // let dataResult = this.props.Login.editFieldDataResult;\n      // if (formCode === undefined){\n      //     dataResult[dataIndex][field] = event.target.checked;\n      //     if (event.target.checked) {\n      //         designData[field].splice(dataIndex, 0, dataItem.realData)\n      //     } else {\n      //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // else{\n      //     dataResult[formCode][\"sampleeditable\"] = comboData;\n      //     if (event.target.checked) {\n      //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n      //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\n      //         } else {\n      //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\n      //         }\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\n      //         }\n      //     } else {\n      //         if (field === 'sampledisplayfields') {\n      //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\n      //         }\n      //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\n      //     }\n      // }\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { designData, dataResult }\n      // }\n      // this.props.updateStore(updateInfo);\n\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (event.target.name === \"sviewname\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validateCreateView(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          } //  selectedRecord[event.target.name] =  event.target.value.replace(/[^a-z]/g, '');\n\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\n      if (eventKey === \"subsample\") {\n        const dataList = this.props.Login.dataListSubSample || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataListSubSample: dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const dataList = this.props.Login.dataList || [];\n\n        if (dataList[index]) {\n          const value = dataList[index] && dataList[index][event.target.name];\n\n          if (value !== '' && value !== undefined) {\n            delete dataList[index][event.target.name];\n          } else {\n            dataList[index][event.target.name] = {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            };\n          }\n        } else {\n          dataList[index] = {\n            [event.target.name]: {\n              [designProperties.LABEL]: { ...multilinguallabel\n              },\n              [designProperties.VALUE]: radiotext\n            }\n          };\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            dataList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.getGridJsondata = (templatedata, task) => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let masterdatefields = [];\n      let masterdateconstraints = [];\n      let masteruniquevalidation = [];\n      let mastercombinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let mastertemplatefields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let sampleQuerybuilderViewCondition = [];\n      let sampleQuerybuilderViewSelect = [];\n      let templatemandatoryfields = [];\n      const masterexportfields = [];\n      let deleteValidation = [];\n      let jsqlquerycolumns = [{\n        \"columnname\": \"ndynamicmastercode\",\n        \"displayname\": {\n          \"en-US\": \"DynamicMaster Code PK\",\n          \"ru-RU\": \"Код DynamicMaster ПК\",\n          \"tg-TG\": \"Рамзи DynamicMaster PK\"\n        },\n        \"columndatatype\": \"numeric\"\n      }, {\n        \"columnname\": \"nstatus\",\n        \"displayname\": {\n          \"en-US\": \"Status\",\n          \"ru-RU\": \"Статус\",\n          \"tg-TG\": \"Статус\"\n        },\n        \"columndatatype\": \"numeric\"\n      }];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              if (componentRow.isExportField) {\n                masterexportfields.push(componentRow);\n              }\n\n              if (componentRow.mandatory) {\n                templatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              jsqlquerycolumns.push({\n                \"columnname\": componentRow.label,\n                \"displayname\": componentRow.displayname,\n                \"isjsoncolumn\": true,\n                \"columndatatype\": \"string\",\n                \"jsoncolumnname\": \"jsonuidata\"\n              });\n              componentRow.unique && masteruniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && mastercombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                  \"stranstableforeignkeyname\": componentRow.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"viewvaluemember\": componentRow.label,\n                  \"valuemember\": componentRow.valuemember,\n                  \"displaymember\": componentRow.displaymember,\n                  \"mastertablename\": componentRow.source,\n                  \"needmasterdata\": true,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"foreigntableformcode\": componentRow.table.item.nformcode,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.valuemember,\n                  \"tablecolumnname\": componentRow.label,\n                  \"foriegntablename\": componentRow.source,\n                  \"parentforeignPK\": componentRow.displaymember,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              }\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                masterdatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n              }\n\n              if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              mastertemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            if (component.isExportField) {\n              masterexportfields.push(component);\n            }\n\n            if (component.mandatory) {\n              templatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            component.unique && masteruniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && mastercombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            jsqlquerycolumns.push({\n              \"columnname\": component.label,\n              \"displayname\": component.displayname,\n              \"isjsoncolumn\": true,\n              \"columndatatype\": \"string\",\n              \"jsoncolumnname\": \"jsonuidata\"\n            });\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            mastertemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                \"stranstableforeignkeyname\": component.valuemember,\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"foreigntableformcode\": component.table.item.nformcode,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.valuemember,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.label,\n                \"foriegntablename\": component.source,\n                \"parentforeignPK\": component.displaymember,\n                ...comboDataInputObject\n              });\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"viewvaluemember\": component.label,\n                \"valuemember\": component.valuemember,\n                \"displaymember\": component.displaymember,\n                \"mastertablename\": component.source,\n                \"needmasterdata\": true,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              masterdatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 2,\n                \"columntypedesc\": \"datetime\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n            }\n\n            if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n        if (needsubsample) {\n          selectedSubSampleTemplate.map(row => row.children && row.children.map(column => {\n            column.children && column.children.map(component => {\n              if (component.hasOwnProperty('children')) {\n                component.children.map(componentRow => {\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.valuemember,\n                      \"stranstablename\": \"registrationsample\",\n                      \"stranstableforeignkeyname\": componentRow.valuemember,\n                      // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                    });\n                  }\n                });\n              } else {\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.valuemember,\n                    \"stranstablename\": \"registrationsample\",\n                    \"stranstableforeignkeyname\": component.valuemember,\n                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n              }\n            });\n          }));\n        }\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        masterdatefields,\n        masterdateconstraints,\n        masteruniquevalidation,\n        editable,\n        mastertemplatefields,\n        mastercombinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields,\n        masterexportfields,\n        templatemandatoryfields\n      };\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey: \"ndynamicmastercode\",\n        deleteValidation,\n        jsqlquerycolumns,\n        sampleQuerybuilderViewCondition,\n        sampleQuerybuilderViewSelect\n      };\n    };\n\n    this.getGoodsInJsondata = (templatedata, task) => {\n      let gridItem = [];\n      let gridMoreItem = [];\n      let datefields = [];\n      let dateconstraints = [];\n      let uniquevalidation = [];\n      let combinationunique = [];\n      let editable = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let templatePrimaryKey = \"\";\n      let templatefields = [];\n      let nonmandatoryExportFields = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let sampleQuerybuilderViewCondition = [];\n      let sampleQuerybuilderViewSelect = [];\n      let deleteValidation = [];\n      let exportFields = [];\n      let templatemandatoryfields = [];\n      let jsqlquerycolumns = [{\n        \"columnname\": \"ngoodsinsamplecode\",\n        \"displayname\": {\n          \"en-US\": \"GoodsIn Sample Code PK\",\n          \"ru-RU\": \"Товары в коде PK\",\n          \"tg-TG\": \"МолҳоДар Кодекси PK\"\n        },\n        \"columndatatype\": \"numeric\"\n      }, {\n        \"columnname\": \"nstatus\",\n        \"displayname\": {\n          \"en-US\": \"Status\",\n          \"ru-RU\": \"Статус\",\n          \"tg-TG\": \"Статус\"\n        },\n        \"columndatatype\": \"numeric\"\n      }];\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map((component, index) => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              // if (componentRow.isExportField) {\n              //     exportFields.push(componentRow)\n              // }\n              if (componentRow.mandatory === true) {\n                exportFields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              } else {\n                nonmandatoryExportFields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              if (componentRow.mandatory) {\n                templatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              } // if(componentRow.mandatory === false){\n              //     nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\n              // }\n\n\n              jsqlquerycolumns.push({\n                \"columnname\": componentRow.label,\n                \"displayname\": componentRow.displayname,\n                \"isjsoncolumn\": true,\n                \"columndatatype\": \"string\",\n                \"jsoncolumnname\": \"jsonuidata\"\n              });\n              componentRow.unique && uniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && combinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\n              let filterinputtype = \"text\";\n              let comboDataInputObject = {};\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\n                  \"stranstableforeignkeyname\": componentRow.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"viewvaluemember\": componentRow.label,\n                  \"valuemember\": componentRow.valuemember,\n                  \"displaymember\": componentRow.displaymember,\n                  \"mastertablename\": componentRow.source,\n                  \"needmasterdata\": true,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'combo') {\n                comboDataInputObject = {\n                  \"predefinedtablename\": componentRow.source,\n                  \"predefinedvaluemember\": componentRow.valuemember,\n                  \"predefineddisplaymember\": componentRow.displaymember,\n                  \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\n                  \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\n                };\n                jnumericcolumns.push({\n                  \"columnname\": componentRow.displaymember,\n                  \"foreigntableformcode\": componentRow.table.item.nformcode,\n                  \"displayname\": componentRow.displayname,\n                  \"foriegntablePK\": componentRow.valuemember,\n                  \"tablecolumnname\": componentRow.label,\n                  \"foriegntablename\": componentRow.source,\n                  \"parentforeignPK\": componentRow.displaymember,\n                  ...comboDataInputObject\n                });\n                filterinputtype = \"predefinednumeric\";\n              }\n\n              if (componentRow.inputtype === 'date') {\n                filterinputtype = \"date\";\n                datefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 2,\n                  \"columntypedesc\": \"datetime\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\n                filterinputtype = \"numeric\";\n\n                if (componentRow.inputtype === 'Numeric') {\n                  sampleQuerybuilderViewCondition.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"columntype\": 5,\n                    \"columntypedesc\": \"numericinput\"\n                  });\n                  sampleQuerybuilderViewSelect.push({\n                    \"columnname\": componentRow.label,\n                    \"displayname\": componentRow.displayname,\n                    \"languagecode\": false\n                  });\n                }\n              }\n\n              if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email' || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"columntype\": 1,\n                  \"columntypedesc\": \"textinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": componentRow.label,\n                  \"displayname\": componentRow.displayname,\n                  \"languagecode\": false\n                });\n              }\n\n              jdynamiccolumns.push({\n                default: componentRow.unique ? true : false,\n                filterinputtype,\n                columnname: componentRow.label,\n                displayname: componentRow.displayname,\n                ...comboDataInputObject\n              });\n\n              if (componentRow.mandatory || componentRow.templatemandatory) {\n                gridItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n                sampleAuditEditable.push(componentRow.label);\n              } else {\n                gridMoreItem.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label,\n                  [designProperties.LISTITEM]: componentRow.inputtype\n                });\n              }\n\n              templatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label\n              });\n              sampleAuditFields.push(componentRow.label);\n              sampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.templatemandatory) {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: []\n                });\n              } else {\n                editable.push({\n                  label: componentRow.label,\n                  editableuntill: [transactionStatus.DRAFT]\n                });\n              }\n\n              return null;\n            });\n          } else {\n            // if (component.isExportField) {\n            //     exportFields.push(component)\n            // }\n            if (component.mandatory === true) {\n              exportFields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            } else {\n              nonmandatoryExportFields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.mandatory) {\n              templatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            } // if(component.mandatory === false){\n            //     nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\n            // }\n\n\n            component.unique && uniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && combinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\n            jsqlquerycolumns.push({\n              \"columnname\": component.label,\n              \"displayname\": component.displayname,\n              \"isjsoncolumn\": true,\n              \"columndatatype\": \"string\",\n              \"jsoncolumnname\": \"jsonuidata\"\n            });\n            let filterinputtype = \"text\";\n            let comboDataInputObject = {};\n            templatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label\n            });\n            sampleAuditFields.push(component.label);\n            sampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\n                \"stranstableforeignkeyname\": component.valuemember,\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            if (component.inputtype === 'combo') {\n              filterinputtype = \"predefinednumeric\";\n              comboDataInputObject = {\n                \"predefinedtablename\": component.source,\n                \"predefinedvaluemember\": component.valuemember,\n                \"predefineddisplaymember\": component.displaymember,\n                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\n                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\n              };\n              jnumericcolumns.push({\n                \"columnname\": component.label,\n                \"foreigntableformcode\": component.table.item.nformcode,\n                \"displayname\": component.displayname,\n                \"foriegntablePK\": component.valuemember,\n                // \"ismultilingual\": true,\n                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\n                \"tablecolumnname\": component.label,\n                \"foriegntablename\": component.source,\n                \"parentforeignPK\": component.displaymember,\n                ...comboDataInputObject\n              });\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"viewvaluemember\": component.label,\n                \"valuemember\": component.valuemember,\n                \"displaymember\": component.displaymember,\n                \"mastertablename\": component.source,\n                \"needmasterdata\": true,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'date') {\n              filterinputtype = \"date\";\n              datefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 2,\n                \"columntypedesc\": \"datetime\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\n              filterinputtype = \"numeric\";\n\n              if (component.inputtype === 'Numeric') {\n                sampleQuerybuilderViewCondition.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"columntype\": 5,\n                  \"columntypedesc\": \"numericinput\"\n                });\n                sampleQuerybuilderViewSelect.push({\n                  \"columnname\": component.label,\n                  \"displayname\": component.displayname,\n                  \"languagecode\": false\n                });\n              }\n            }\n\n            if (component.inputtype === 'textinput' || component.inputtype === 'email' || component.inputtype === 'textarea' || component.inputtype === 'radio') {\n              sampleQuerybuilderViewCondition.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"columntype\": 1,\n                \"columntypedesc\": \"textinput\"\n              });\n              sampleQuerybuilderViewSelect.push({\n                \"columnname\": component.label,\n                \"displayname\": component.displayname,\n                \"languagecode\": false\n              });\n            }\n\n            jdynamiccolumns.push({\n              default: component.unique ? true : false,\n              columnname: component.label,\n              displayname: component.displayname,\n              filterinputtype,\n              ...comboDataInputObject\n            });\n\n            if (component.mandatory || component.templatemandatory) {\n              gridItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n              sampleAuditEditable.push(component.label);\n            } else {\n              gridMoreItem.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label,\n                [designProperties.LISTITEM]: component.inputtype\n              });\n            }\n\n            if (component.templatemandatory) {\n              editable.push({\n                label: component.label,\n                editableuntill: []\n              });\n            } else {\n              editable.push({\n                label: component.label,\n                editableuntill: [transactionStatus.DRAFT]\n              });\n            }\n\n            return null;\n          }\n        });\n      }));\n\n      if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\n        const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n        if (needsubsample) {\n          selectedSubSampleTemplate.map(row => row.children && row.children.map(column => {\n            column.children && column.children.map(component => {\n              if (component.hasOwnProperty('children')) {\n                component.children.map(componentRow => {\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.valuemember,\n                      \"stranstablename\": \"registrationsample\",\n                      \"stranstableforeignkeyname\": componentRow.valuemember,\n                      // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode //\"nformcode\":componentRow.table.item.nformcode\n\n                    });\n                  }\n                });\n              } else {\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.valuemember,\n                    \"stranstablename\": \"registrationsample\",\n                    \"stranstableforeignkeyname\": component.valuemember,\n                    //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n              }\n            });\n          }));\n        }\n      }\n\n      let jsondata = {\n        griditem: gridItem,\n        gridmoreitem: gridMoreItem,\n        datefields,\n        dateconstraints,\n        uniquevalidation,\n        editable,\n        templatefields,\n        combinationunique,\n        sampleAuditFields,\n        sampleAuditEditable,\n        sampleAuditMultilingualFields,\n        exportFields,\n        nonmandatoryExportFields,\n        templatemandatoryfields\n      };\n      return {\n        jsondata,\n        jdynamiccolumns,\n        jnumericcolumns,\n        templatePrimaryKey: \"ngoodsinsamplecode\",\n        deleteValidation,\n        jsqlquerycolumns,\n        sampleQuerybuilderViewCondition,\n        sampleQuerybuilderViewSelect\n      };\n    };\n\n    this.getJsondata = templatedata => {\n      //let displayFields = [];\n      //ALPD-533\n      let displayFields = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        //{ ...ARNOMULTILINGUAL },\n        [designProperties.VALUE]: 'sarno'\n      }];\n      let listItem = []; // let gridItem = [];\n\n      let gridItem = [{\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        //{ ...ARNOMULTILINGUAL }, \n        [designProperties.VALUE]: \"sarno\"\n      }];\n      let gridMoreItem = [];\n      let editable = [];\n      let subsampleeditable = [];\n      let subsamplelistitem = [];\n      let sampledatefields = [{\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }];\n      let sampledateconstraints = [];\n      let subsampledatefields = [];\n      let subsampledateconstraints = [];\n      let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\"];\n      let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\n      let sampletemplatefields = [];\n      let subsampletemplatefields = [];\n      let sampleuniquevalidation = [];\n      let subsampleuniquevalidation = [];\n      let jdynamiccolumns = [];\n      let jnumericcolumns = [];\n      let samplecombinationunique = [];\n      let subsamplecombinationunique = [];\n      let sampleAuditFields = [];\n      let sampleAuditEditable = [];\n      let sampleAuditMultilingualFields = [];\n      let subSampleAuditFields = [];\n      let subSampleAuditEditable = [];\n      let subSampleAuditMultilingualFields = [];\n      let deleteValidation = [];\n      let sampletemplatemandatoryfields = [];\n      let subsampletemplatemandatoryfields = [];\n      const sampleExportFields = [];\n      const subSampleExportFields = [];\n      const sampletemplatemandatory = []; //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \n\n      sampleAuditFields = [\"sarno\"];\n      sampleAuditEditable = [\"sarno\"];\n      sampleAuditMultilingualFields = [{\n        \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...ARNOMULTILINGUAL } \n\n      }];\n      subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\n      subSampleAuditMultilingualFields = [{\n        \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...ARNOMULTILINGUAL } \n\n      }, {\n        \"ssamplearno\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"] //{ ...SUBARNOMULTILINGUAL } \n\n      }]; //}\n      ////////////////////////////////////////////\n      // let sampleAuditFields = SAMPLEAUDITFIELDS;\n      // let sampleAuditEditable = SAMPLEAUDITEDITABLE\n      // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\n      // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\n      // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\n      // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\n\n      let testdatefields = [{\n        [designProperties.VALUE]: 'dtransactiondate',\n        dateonly: false\n      }, {\n        [designProperties.VALUE]: 'dregdate',\n        dateonly: false\n      }]; //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n\n      this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.hasOwnProperty('children')) {\n            component.children.map(componentRow => {\n              if (componentRow.isExportField) {\n                subSampleExportFields.push(componentRow.label);\n              }\n\n              componentRow.unique && subsampleuniquevalidation.push({\n                [designProperties.LABEL]: componentRow.label\n              });\n              componentRow.unique && subsamplecombinationunique.push({\n                [componentRow.label]: {\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                }\n              });\n              subsamplesearchfields.push(componentRow.label);\n              subsampletemplatefields.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n              });\n\n              if (componentRow.mandatory) {\n                subsampletemplatemandatoryfields.push({\n                  [designProperties.LABEL]: componentRow.displayname,\n                  [designProperties.VALUE]: componentRow.label\n                });\n              }\n\n              if (componentRow.componentcode === designComponents.COMBOBOX) {\n                deleteValidation.push({\n                  \"smastertablename\": componentRow.table.item.stablename,\n                  \"smasterprimarykeyname\": componentRow.table.valuemember,\n                  \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                  \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                  \"sjsonfieldname\": \"jsondata\",\n                  \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                  \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                });\n              }\n\n              subSampleAuditFields.push(componentRow.label);\n              subSampleAuditMultilingualFields.push({\n                [componentRow.label]: componentRow.displayname\n              });\n\n              if (componentRow.mandatory) {\n                subSampleAuditEditable.push(componentRow.label);\n              }\n\n              if (componentRow.readonly) subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: []\n              });else subsampleeditable.push({\n                label: componentRow.label,\n                editableuntill: [transactionStatus.PREREGISTER]\n              });\n\n              if (componentRow.inputtype === 'date') {\n                subsampledatefields.push({\n                  [designProperties.VALUE]: componentRow.label,\n                  dateonly: componentRow.dateonly || false\n                });\n                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n              }\n\n              subsamplelistitem.push({\n                [designProperties.LABEL]: componentRow.displayname,\n                [designProperties.VALUE]: componentRow.label,\n                [designProperties.LISTITEM]: componentRow.inputtype\n              });\n            });\n          } else {\n            if (component.templatemandatory) {\n              sampletemplatemandatory.push(component.label);\n            }\n\n            if (component.isExportField) {\n              subSampleExportFields.push(component.label);\n            }\n\n            component.unique && subsampleuniquevalidation.push({\n              [designProperties.LABEL]: component.label\n            });\n            component.unique && subsamplecombinationunique.push({\n              [component.label]: {\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              }\n            });\n            subsamplesearchfields.push(component.label);\n            subsampletemplatefields.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.PRIMARYKEY]: component.valuemember,\n              [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n            });\n\n            if (component.mandatory) {\n              subsampletemplatemandatoryfields.push({\n                [designProperties.LABEL]: component.displayname,\n                [designProperties.VALUE]: component.label\n              });\n            }\n\n            if (component.componentcode === designComponents.COMBOBOX) {\n              deleteValidation.push({\n                \"smastertablename\": component.table.item.stablename,\n                \"smasterprimarykeyname\": component.table.valuemember,\n                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\n                \"stranstableforeignkeyname\": component.table.valuemember,\n                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\n                \"sjsonfieldname\": \"jsondata\",\n                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                //\"nformcode\":component.table.item.nformcode,\n                \"nquerybuildertablecode\": component.nquerybuildertablecode\n              });\n            }\n\n            subSampleAuditFields.push(component.label);\n            subSampleAuditMultilingualFields.push({\n              [component.label]: component.displayname\n            });\n\n            if (component.mandatory) {\n              subSampleAuditEditable.push(component.label);\n            }\n\n            if (component.readonly) subsampleeditable.push({\n              label: component.label,\n              editableuntill: []\n            });else subsampleeditable.push({\n              label: component.label,\n              editableuntill: [transactionStatus.PREREGISTER]\n            });\n\n            if (component.inputtype === 'date') {\n              subsampledatefields.push({\n                [designProperties.VALUE]: component.label,\n                dateonly: component.dateonly || false\n              });\n              subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\n            }\n\n            subsamplelistitem.push({\n              [designProperties.LABEL]: component.displayname,\n              [designProperties.VALUE]: component.label,\n              [designProperties.LISTITEM]: component.inputtype\n            });\n          }\n        });\n      }));\n      templatedata && templatedata.map(row => row.children && row.children.map(column => {\n        column.children && column.children.map(component => {\n          if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n            if (component.hasOwnProperty('children')) {\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                // let combinedField = [];\n                component.children.map(componentRow => {\n                  if (componentRow.templatemandatory) {\n                    sampletemplatemandatory.push(componentRow.label);\n                  }\n\n                  if (componentRow.isExportField) {\n                    sampleExportFields.push(componentRow.label);\n                  } // combinedField.push(componentRow.label)\n\n\n                  jdynamiccolumns.push({\n                    columnname: componentRow.label,\n                    displayname: componentRow.displayname\n                  });\n\n                  if (componentRow.hasOwnProperty('child')) {\n                    componentRow.child.map(childData => {\n                      jnumericcolumns.push({\n                        \"columnname\": componentRow.label,\n                        \"displayname\": componentRow.displayname,\n                        \"foriegntablePK\": componentRow.label,\n                        // \"ismultilingual\": true,\n                        // \"conditionstring\": \" and nformcode in (140) \",\n                        \"tablecolumnname\": childData.tablecolumnname,\n                        \"foriegntablename\": \"dynamicmaster\"\n                      });\n                    });\n                  }\n\n                  if (componentRow.componentcode === designComponents.COMBOBOX) {\n                    deleteValidation.push({\n                      \"smastertablename\": componentRow.table.item.stablename,\n                      \"smasterprimarykeyname\": componentRow.table.valuemember,\n                      \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                      \"stranstableforeignkeyname\": componentRow.table.valuemember,\n                      //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                      \"sjsonfieldname\": \"jsondata\",\n                      \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                      //\"nformcode\":componentRow.table.item.nformcode,\n                      \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\n                    });\n                  }\n\n                  componentRow.unique && sampleuniquevalidation.push({\n                    [designProperties.LABEL]: componentRow.label\n                  });\n                  componentRow.unique && samplecombinationunique.push({\n                    [componentRow.label]: {\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label\n                    }\n                  });\n\n                  if (componentRow.name === undefined || componentRow.name !== 'manualsampleid') {\n                    samplesearchfields.push(componentRow.label);\n                    sampletemplatefields.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.PRIMARYKEY]: componentRow.valuemember,\n                      [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\n                    });\n\n                    if (componentRow.mandatory) {\n                      sampletemplatemandatoryfields.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label\n                      });\n                    }\n\n                    displayFields.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.LISTITEM]: componentRow.inputtype\n                    });\n                    componentRow.templatemandatory && listItem.push({\n                      [designProperties.LABEL]: componentRow.displayname,\n                      [designProperties.VALUE]: componentRow.label,\n                      [designProperties.LISTITEM]: componentRow.inputtype\n                    });\n\n                    if (componentRow.mandatory || componentRow.templatemandatory) {\n                      gridItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label\n                      });\n                      sampleAuditEditable.push(componentRow.label);\n                    } else {\n                      gridMoreItem.push({\n                        [designProperties.LABEL]: componentRow.displayname,\n                        [designProperties.VALUE]: componentRow.label,\n                        [designProperties.LISTITEM]: componentRow.inputtype\n                      });\n                    }\n\n                    if (componentRow.templatemandatory) {\n                      editable.push({\n                        label: componentRow.label,\n                        editableuntill: []\n                      });\n                    } else {\n                      if (componentRow.readonly) editable.push({\n                        label: componentRow.label,\n                        editableuntill: []\n                      });else editable.push({\n                        label: componentRow.label,\n                        editableuntill: [transactionStatus.PREREGISTER]\n                      });\n                    }\n                  }\n\n                  sampleAuditFields.push(componentRow.label);\n                  sampleAuditMultilingualFields.push({\n                    [componentRow.label]: componentRow.displayname\n                  });\n\n                  if (componentRow.inputtype === 'date') {\n                    sampledatefields.push({\n                      [designProperties.VALUE]: componentRow.label,\n                      dateonly: componentRow.dateonly || false\n                    });\n                    sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                  }\n\n                  return null;\n                }); // let fieldSet = combinedField.join(\"&\")\n                // displayFields.push(fieldSet);\n                // componentRow.templatemandatory && listItem.push(fieldSet)\n                // gridMoreItem.push(fieldSet);\n              }\n            } else {\n              if (component.templatemandatory) {\n                sampletemplatemandatory.push(component.label);\n              }\n\n              if (component.isExportField) {\n                sampleExportFields.push(component.label);\n              }\n\n              if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\n                //console.log(\"componentRow main:\", component);\n                jdynamiccolumns.push({\n                  columnname: component.label,\n                  displayname: component.displayname\n                });\n\n                if (component.componentcode === designComponents.COMBOBOX) {\n                  deleteValidation.push({\n                    \"smastertablename\": component.table.item.stablename,\n                    \"smasterprimarykeyname\": component.table.valuemember,\n                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\n                    \"stranstableforeignkeyname\": component.table.valuemember,\n                    //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\n                    \"sjsonfieldname\": \"jsondata\",\n                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\n                    //\"nformcode\":component.table.item.nformcode,\n                    \"nquerybuildertablecode\": component.nquerybuildertablecode\n                  });\n                }\n\n                if (component.hasOwnProperty('child')) {\n                  component.child.map(childData => {\n                    jnumericcolumns.push({\n                      \"columnname\": component.label,\n                      \"displayname\": component.displayname,\n                      \"foriegntablePK\": component.label,\n                      // \"ismultilingual\": true,\n                      // \"conditionstring\": \" and nformcode in (140) \",\n                      \"tablecolumnname\": childData.tablecolumnname,\n                      \"foriegntablename\": \"dynamicmaster\"\n                    });\n                  });\n                }\n\n                component.unique && sampleuniquevalidation.push({\n                  [designProperties.LABEL]: component.label\n                });\n                component.unique && samplecombinationunique.push({\n                  [component.label]: {\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label\n                  }\n                });\n\n                if (component.name === undefined || component.name !== 'manualsampleid') {\n                  samplesearchfields.push(component.label);\n                  sampletemplatefields.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.PRIMARYKEY]: component.valuemember,\n                    [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\n                  });\n\n                  if (component.mandatory) {\n                    sampletemplatemandatoryfields.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label\n                    });\n                  }\n\n                  displayFields.push({\n                    [designProperties.LABEL]: component.displayname,\n                    [designProperties.VALUE]: component.label,\n                    [designProperties.LISTITEM]: component.inputtype\n                  });\n\n                  if (component.mandatory || component.templatemandatory) {\n                    gridItem.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label,\n                      [designProperties.LISTITEM]: component.inputtype\n                    });\n                    listItem.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label,\n                      [designProperties.LISTITEM]: component.inputtype,\n                      mandatory: true\n                    });\n                    sampleAuditEditable.push(component.label);\n                  } else {\n                    gridMoreItem.push({\n                      [designProperties.LABEL]: component.displayname,\n                      [designProperties.VALUE]: component.label,\n                      [designProperties.LISTITEM]: component.inputtype\n                    });\n                  }\n\n                  if (component.templatemandatory) {\n                    editable.push({\n                      label: component.label,\n                      editableuntill: []\n                    });\n                  } else {\n                    // editable.push({ label: component.label, editableuntill: [17] })\n                    if (component.readonly) editable.push({\n                      label: component.label,\n                      editableuntill: []\n                    });else editable.push({\n                      label: component.label,\n                      editableuntill: [transactionStatus.PREREGISTER]\n                    });\n                  }\n                }\n\n                sampleAuditFields.push(component.label);\n                sampleAuditMultilingualFields.push({\n                  [component.label]: component.displayname\n                });\n\n                if (component.inputtype === 'date') {\n                  sampledatefields.push({\n                    [designProperties.VALUE]: component.label,\n                    dateonly: component.dateonly || false\n                  });\n                  sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\n                }\n\n                return null;\n              }\n            }\n          }\n        });\n      }));\n      displayFields.push({\n        [designProperties.LABEL]: this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\n        [designProperties.VALUE]: 'dregdate'\n      });\n      const testListFields = { ...this.props.Login.testListFields\n      };\n      let obj = {\n        sampledisplayfields: displayFields,\n        samplelistitem: listItem,\n        samplegriditem: gridItem,\n        samplegridmoreitem: gridMoreItem,\n        subsamplelistitem,\n        sampledatefields,\n        subsampledatefields,\n        samplesearchfields,\n        subsamplesearchfields,\n        testdatefields,\n        sampledateconstraints,\n        subsampledateconstraints,\n        samplecombinationunique,\n        testListFields,\n        deleteValidation\n      };\n      sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\n      sampleAuditEditable.push(\"stransdisplaystatus\");\n      subSampleAuditFields.push(\"stransdisplaystatus\");\n      subSampleAuditEditable.push(\"stransdisplaystatus\");\n      sampleAuditMultilingualFields.push({\n        \"dregdate\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"]\n      }, {\n        \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]\n      });\n      subSampleAuditMultilingualFields.push({\n        \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"] //{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } \n\n      });\n      const SAMPLETEMPLATEFIELDS = [{\n        \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sarno\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"Specification\"] && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sspecname\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"dregdate\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"stransdisplaystatus\"\n      }];\n      const SUBSAMPLETEMPLATEFIELDS = [{\n        \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"sarno\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"ssamplearno\"\n      }, {\n        \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\n        \"2\": \"stransdisplaystatus\"\n      }];\n      let jsondata = {\n        subsamplecombinationunique,\n        samplecombinationunique,\n        sampletemplatefields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\n        sampletemplatemandatoryfields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatemandatoryfields],\n        subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],\n        //: subsamplesearchfields,\n        subsampletemplatemandatoryfields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatemandatoryfields],\n        [formCode.SAMPLEREGISTRATION]: { ...obj,\n          sampleeditable: editable,\n          subsampleeditable,\n          samplecombinationunique,\n          subsamplecombinationunique,\n          sampleExportFields,\n          subSampleExportFields\n        },\n        [formCode.RESULTENTRY]: { ...obj\n        },\n        [formCode.APPROVAL]: { ...obj\n        },\n        [formCode.JOBALLOCATION]: { ...obj,\n          samplegriditem: [...obj.samplegriditem, {\n            \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Section\"\n          }],\n          samplesearchfields: [...obj.samplesearchfields, \"Section\"],\n          subsamplesearchfields: [...obj.subsamplesearchfields, \"ssectionname\"],\n          testgriditem: [{\n            \"1\": this.props.Login.genericLabel[\"TestSynonym\"] && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"stestsynonym\"\n          }, {\n            \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }, {\n            \"1\": this.props.Login.genericLabel[\"Technique\"] && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Technique\"\n          }, {\n            \"1\": this.props.Login.genericLabel[\"Users\"] && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Users\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentCategory\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Instrument\"\n          }],\n          samplelistitem: [...obj.samplelistitem, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Section\"\n          }],\n          subsamplelistitem: [...obj.subsamplelistitem, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }],\n          testdisplayfields: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"stestsynonym\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssectionname\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Technique\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Users\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentCategory\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Instrument\"\n          }],\n          testgridmoreitem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserStartDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserStartDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserEndDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserEndDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserDuration\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"UserDuration\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentStartDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentStartDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentEndDate\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentEndDate\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentDuration\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"InstrumentDuration\"\n          }, {\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Comments\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"Comments\"\n          }]\n        },\n        [formCode.MYJOBS]: { ...obj\n        },\n        [formCode.WORKLIST]: { ...obj\n        },\n        [formCode.BATCHCREATION]: {\n          samplegriditem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"sarno\"\n          }, ...obj.samplegriditem],\n          subsamplelistitem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem],\n          ...obj\n        },\n        [formCode.TESTWISEMYJOBS]: { ...obj\n        },\n        [formCode.RELEASE]: { ...obj,\n          subsamplelistitem: [{\n            \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\n            \"2\": \"ssamplearno\"\n          }, ...obj.subsamplelistitem]\n        },\n        sampleAuditEditable,\n        sampleAuditFields,\n        sampleAuditMultilingualFields,\n        subSampleAuditEditable,\n        subSampleAuditFields,\n        subSampleAuditMultilingualFields,\n        deleteValidation,\n        sampletemplatemandatory\n      };\n      return jsondata;\n    };\n\n    this.onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\n      let designData = this.props.Login.designData;\n      let dataResult = this.props.Login.dataResult;\n\n      if (operation === 'configureaudit') {\n        designData = this.props.Login.auditFieldDesignData;\n        dataResult = this.props.Login.auditFieldDataResult;\n      }\n\n      let tableName = \"registration\";\n\n      if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        tableName = \"dynamicmaster\";\n      }\n\n      if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n        tableName = \"goodsinsample\";\n      }\n\n      if (formCode === undefined) {\n        dataResult[dataIndex][field] = event.target.checked;\n\n        if (event.target.checked) {\n          designData[field].splice(dataIndex, 0, dataItem.realData);\n        } else {\n          designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n        }\n      } else {\n        //dataResult[formCode][dataIndex][field] = event.target.checked;\n        if (event.target.checked) {\n          if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_MAXIMUMSELECTIONEXCEEDS\"\n            }));\n          } else {\n            if (field === 'sampledisplayfields') {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n            } else if (field === 'sampleauditfields') {\n              dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'sampleauditeditfields') {\n              dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\n              dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else if (field === 'subsampleauditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                  [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                });\n              }\n            } else if (field === 'subsampleauditeditfields') {\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\n              dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n\n              if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n\n                if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\n                  designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\n                  designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, {\n                    [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL]\n                  });\n                }\n              }\n            } else {\n              dataResult[formCode][dataIndex][field] = event.target.checked;\n              designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\n            }\n          }\n        } else {\n          if (field === 'sampledisplayfields') {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1);\n            const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode]['samplesearchfields'].splice(index, 1);\n            }\n          } else if (field === 'sampleauditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index !== -1) {\n              designData[formCode][tableName][field].splice(index, 1);\n            }\n\n            const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index1 !== -1) {\n              designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\n            }\n\n            const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'sampleauditeditfields') {\n            dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\n            const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index4 !== -1) {\n              designData[formCode][tableName][field].splice(index4, 1);\n            }\n          } else if (field === 'subsampleauditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n\n            const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\n\n            if (index2 !== -1) {\n              designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\n            }\n\n            const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index3 !== -1) {\n              designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1);\n            }\n\n            dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\n          } else if (field === 'subsampleauditeditfields') {\n            dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\n            const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\n\n            if (index1 !== -1) {\n              designData[formCode][\"registrationsample\"][field].splice(index1, 1);\n            }\n          } else {\n            dataResult[formCode][dataIndex][field] = event.target.checked;\n            designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1);\n          }\n        }\n      }\n\n      let data = {\n        designData,\n        dataResult\n      };\n\n      if (operation === 'configureaudit') {\n        data = {\n          auditFieldDesignData: designData,\n          auditFieldDataResult: dataResult\n        };\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: { ...data\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onApproveSaveClick = () => {\n      this.onApproveClick();\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\n      //console.log(\"data:\", this.props.Login.editFieldDesignData)\n      let inputData = [];\n      let operation = this.props.Login.operation; //const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n      const needsubsample = this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\n\n      if (operation === 'Approve') {\n        this.onApproveClick();\n      } else if (operation === 'configureunique') {\n        this.configureunique();\n      } else {\n        if (operation === 'configure' || operation === 'configuresubsample') {\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: this.props.Login.designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\n          let designData = this.props.Login.editFieldDesignData;\n          let formCodeArray = Object.keys(this.state.selectedRecord);\n          formCodeArray.forEach(formCode => {\n            const data = this.state.selectedRecord[formCode];\n            let editableData = designData[formCode]['sampleeditable'];\n            ;\n\n            if (operation === 'configuresubsampleedit') {\n              editableData = designData[formCode]['subsampleeditable'];\n              ;\n            }\n\n            Object.keys(data).map(label => {\n              const editableuntil = [];\n              data[label].map(statusItem => editableuntil.push(statusItem.value));\n              const index = editableData.findIndex(item => item.label === label);\n\n              if (index === -1) {\n                editableData.push({\n                  \"label\": label,\n                  \"editableuntill\": editableuntil\n                });\n              } else {\n                editableData[index] = {\n                  \"label\": label,\n                  \"editableuntill\": editableuntil\n                };\n              } //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\n\n            });\n          });\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } // else if (operation === 'configureunique') {\n        //     let designData = this.props.Login.designData;\n        //     //  let formCodeArray = Object.keys(this.state.selectedRecord);\n        //     const dataList = []\n        //     const dataListsubsample = []\n        //     this.props.Login.dataList.map(x => {\n        //         if (Object.keys(x).length !== 0) {\n        //             dataList.push(x);\n        //         }\n        //     })\n        //     if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n        //         designData['mastercombinationunique'] = dataList\n        //     }else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n        //         designData['combinationunique'] = dataList\n        //     } \n        //     else {\n        //         designData['samplecombinationunique'] = dataList\n        //         designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\n        //         this.props.Login.dataListSubSample.map(x => {\n        //             if (Object.keys(x).length !== 0) {\n        //                 dataListsubsample.push(x);\n        //             }\n        //         })\n        //         designData['subsamplecombinationunique'] = dataListsubsample\n        //         designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\n        //     }\n        //     inputData = {\n        //         designtemplatemapping: {\n        //             ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n        //             jsondataobj: designData\n        //         },\n        //         userinfo: this.props.Login.userInfo\n        //     }\n        //     operation = 'configure';\n        // }\n        else if (operation === 'configureexportfields') {\n          let designData = this.props.Login.designData;\n\n          if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n            const dataList = [];\n            this.props.Login.sampleexportdataResult.master.map(x => {\n              if (x.sampleexportfields === true) {\n                dataList.push(x.realData[designProperties.VALUE]);\n              }\n            });\n            designData['masterexportfields'] = dataList;\n          } else if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n            this.props.Login.sampleexportdataResult.master.map(x => {\n              if (x.sampleexportfields === true) {\n                let checkArray = designData['exportFields'].map(item => item['2']);\n\n                if (checkArray.includes(x.realData['2']) === false) {\n                  designData['exportFields'].push(x.realData);\n                }\n              } else {\n                let index = designData['exportFields'].findIndex(y => y['2'] === x.realData['2']);\n\n                if (index !== -1) {\n                  designData['exportFields'].splice(index, 1);\n                }\n              }\n            });\n          } else {\n            const dataList = [];\n            this.props.Login.sampleexportdataResult.sample.map(x => {\n              if (x.sampleexportfields === true) {\n                dataList.push(x.realData[designProperties.VALUE]);\n              }\n            });\n            designData[formCode.SAMPLEREGISTRATION]['sampleExportFields'] = dataList;\n\n            if (this.props.Login.masterData && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample) {\n              const dataListSub = [];\n              this.props.Login.sampleexportdataResult.subsample.map(x => {\n                if (x.sampleexportfields === true) {\n                  dataListSub.push(x.realData[designProperties.VALUE]);\n                }\n              });\n              designData[formCode.SAMPLEREGISTRATION]['subSampleExportFields'] = dataListSub;\n            }\n          }\n\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configurechecklistadd') {\n          let designData = this.props.Login.designData;\n\n          if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n            designData['checklist'] = {\n              \"nchecklistversioncode\": this.state.selectedRecord.nchecklistversioncode.value\n            };\n          }\n\n          inputData = {\n            designtemplatemapping: {\n              ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n              jsondataobj: designData\n            },\n            userinfo: this.props.Login.userInfo\n          };\n          operation = 'configure';\n        } else if (operation === 'configureaudit') {\n          //console.log(\"auditFieldDesignData:\", this.props.Login);\n          inputData = {\n            //dynamicaudit: {\n            ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\n            auditdata: this.props.Login.auditData,\n            //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \n            //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \n            //nformcode:43, stablename:'registration',\n            // },\n            userinfo: this.props.Login.userInfo\n          }; //operation = 'configure';\n        } else if (operation === 'configuresendtostore') {\n          // const sampleQty = new Map();\n          //  const sampleUnit = new Map();\n          // let inputData=[];\n          //  let subsamplefields = [];\n          //  let senttostoragefields=[];\n          let samqty = {\n            \"1\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.label : \"\"\n          };\n          let samunit = {\n            \"1\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.label : \"\"\n          };\n          let subsamqty = {\n            \"1\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.label : \"\"\n          };\n          let subsamunit = {\n            \"1\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.item.displayname : \"\",\n            \"2\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.label : \"\"\n          };\n          let sample = {\n            \"nsampleqty\": samqty,\n            \"nunitcode\": samunit\n          };\n          let subsample = {\n            \"nsampleqty\": subsamqty,\n            \"nunitcode\": subsamunit\n          };\n          let str = {\n            \"samplefields\": sample,\n            \"subsamplefields\": subsample\n          };\n          let senttostoragefields = {\n            \"senttostoragefields\": str\n          }; // console.log(JSON.stringify(senttostoragefields));\n\n          inputData = {\n            \"userinfo\": this.props.Login.userInfo,\n            \"senttostoragefields\": senttostoragefields,\n            \"updatesendtostore\": senttostoragefields.senttostoragefields,\n            \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\n          };\n        } else if (operation === 'approve') {\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey,\n            deleteValidation,\n            jsqlquerycolumns,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\"); // console.log(\"deleteValidation 2:\", deleteValidation);\n\n          inputData = {\n            jdynamiccolumns,\n            jnumericcolumns,\n            jsqlquerycolumns,\n            sprimarykeyname: templatePrimaryKey,\n            sampleQuerybuilderViewCondition,\n            sampleQuerybuilderViewSelect\n          };\n          inputData[\"userinfo\"] = this.props.Login.userInfo;\n          inputData[\"designtemplatemapping\"] = {\n            \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\"\n          };\n          inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\n          inputData[\"deletevalidationlist\"] = deleteValidation;\n          inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\n        } else {\n          // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\n          let {\n            jsondata,\n            jdynamiccolumns,\n            jnumericcolumns,\n            templatePrimaryKey\n          } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? this.getGoodsInJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata) : {};\n          let auditData = {};\n          let dataObject = {};\n\n          if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN) {\n            dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata); // console.log(\"json:\",dataObject);\n\n            auditData = {\n              \"registration\": {\n                editmandatoryfields: dataObject[\"sampleAuditEditable\"],\n                auditcapturefields: dataObject[\"sampleAuditFields\"],\n                multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\n              }\n            };\n\n            if (needsubsample) {\n              auditData = { ...auditData,\n                registrationsample: {\n                  editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\n                  auditcapturefields: dataObject[\"subSampleAuditFields\"],\n                  multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\n                }\n              };\n              delete dataObject[\"subSampleAuditEditable\"];\n              delete dataObject[\"subSampleAuditFields\"];\n              delete dataObject[\"subSampleAuditMultilingualFields\"];\n            }\n\n            delete dataObject[\"sampleAuditEditable\"];\n            delete dataObject[\"sampleAuditFields\"];\n            delete dataObject[\"sampleAuditMultilingualFields\"];\n          } else {\n            if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\n              auditData = {\n                \"dynamicmaster\": {\n                  editmandatoryfields: jsondata[\"sampleAuditEditable\"],\n                  auditcapturefields: jsondata[\"sampleAuditFields\"],\n                  multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\n                }\n              };\n            } else if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\n              auditData = {\n                \"goodsinsample\": {\n                  editmandatoryfields: jsondata[\"sampleAuditEditable\"],\n                  auditcapturefields: jsondata[\"sampleAuditFields\"],\n                  multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\n                }\n              };\n            }\n          }\n\n          inputData = {\n            \"userinfo\": this.props.Login.userInfo,\n            \"ncontrolcode\": this.props.Login.ncontrolCode,\n            \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\n            \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\n            \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n            \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n            \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\n            \"nformcode\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? formCode.GOODSIN : this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n            \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\n            \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? jsondata : dataObject,\n            auditdata: auditData,\n            needsubsample: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false //needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\n\n          };\n          inputData[\"designtemplatemapping\"] = {\n            \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n          };\n\n          if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\n            let qf_jsonData = {\n              sdisplayname: {}\n            };\n            let qbt_jsonData = {\n              tablename: {}\n            };\n            this.props.Login.languageList.map(lang => {\n              qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\n              qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname;\n            });\n            let qm_jsonData = {\n              sdisplayname: {}\n            };\n            let nmodulecode = 0;\n            let smoduledisplayname = \"\";\n\n            if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\n              smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\n              this.props.Login.languageList.map(lang => {\n                qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\n              });\n            } else {\n              nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\n            }\n\n            inputData = { ...inputData,\n              sformname: this.state.selectedRecord.sformname,\n              sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n              nmodulecode,\n              smoduledisplayname,\n              qm_jsonData,\n              qf_jsonData,\n              qbt_jsonData,\n              sprimarykeyname: templatePrimaryKey,\n              jdynamiccolumns,\n              jnumericcolumns\n            };\n          } else {\n            inputData = { ...inputData,\n              sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n              sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\n              ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\n              sprimarykeyname: templatePrimaryKey,\n              jdynamiccolumns,\n              jnumericcolumns\n            };\n          } // this.designtemplatemappingFieldList.map(item => {\n          //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\n          // });\n\n        } //console.log(\"input:\", inputData);\n\n\n        let postParam = undefined;\n        const inputParam = {\n          classUrl: \"designtemplatemapping\",\n          methodUrl: \"DesignTemplateMapping\",\n          inputData: inputData,\n          operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          dataList: [],\n          dataListCount: [],\n          dataListCountSubSample: [],\n          dataListSubSample: []\n        };\n\n        if (operation === 'configureaudit') {\n          inputParam[\"methodUrl\"] = \"DynamicAudit\";\n          inputParam[\"operation\"] = \"configure\"; //operation = 'configure';\n        }\n\n        if (operation === 'configuresendtostore') {\n          inputParam[\"methodUrl\"] = \"ConfigureSendToStore\";\n          inputParam[\"operation\"] = \"update\"; //operation = 'configure';\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType,\n              dataList: [],\n              dataListCount: [],\n              dataListCountSubSample: [],\n              dataListSubSample: []\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const dataStateCL = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      isOpen: false,\n      designtemplatemappingData: [],\n      masterStatus: \"\",\n      error: \"\",\n      //selectedRecord: {},\n      operation: \"\",\n      dataStateCL,\n      screenName: undefined,\n      userLogged: true,\n      selectedDesignTemplateMapping: undefined,\n      sidebarview: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      selectedInput: \"\",\n      masterTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMASTER\"\n        }),\n        value: 1,\n        item: {\n          nmastertypecode: 1,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_NEWMASTER\"\n          })\n        }\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMASTER\"\n        }),\n        value: 2,\n        item: {\n          nmastertypecode: 2,\n          smastertype: this.props.intl.formatMessage({\n            id: \"IDS_EXISTINGMASTER\"\n          })\n        }\n      }],\n      newMasterForm: {\n        value: -2,\n        label: \"-\"\n      },\n      moduleTypeArray: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_NEWMODULE\"\n        }),\n        value: 3\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EXISTINGMODULE\"\n        }),\n        value: 4\n      }]\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\n    this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode', 'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const Layout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\n    const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\n    const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\n    const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\n    const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\n    const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\n    const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\n    const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\n    const sendToStoreId = this.state.controlMap.has(\"ConfigureSendToStore\") && this.state.controlMap.get(\"ConfigureSendToStore\").ncontrolcode; //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\n\n    const exportFieldsID = this.state.controlMap.has(\"ConfigureExportFields\") && this.state.controlMap.get(\"ConfigureExportFields\").ncontrolcode;\n    const checkListId = this.state.controlMap.has(\"ConfigureCheckList\") && this.state.controlMap.get(\"ConfigureCheckList\").ncontrolcode;\n    const actionList = [];\n    let validationColumnList = [];\n\n    if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREDISPLAYFIELDS\"\n        }),\n        \"controlId\": sampleFieldId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEEDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREEDITFIELDS\"\n        }),\n        \"controlId\": sampleEditFieldId\n      });\n\n      if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n        if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\"\n            }),\n            \"controlId\": subSampleFieldId\n          });\n        }\n\n        if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\n          actionList.push({\n            \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT,\n            \"value\": this.props.intl.formatMessage({\n              id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\"\n            }),\n            \"controlId\": subSampleEditFieldId\n          });\n        }\n      }\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGUNIQUE,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\n      //sampleAuditConfigId\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSAMPLEAUDIT,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREAUDITFIELDS\"\n        }),\n        \"controlId\": combinationUniqueFieldId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN && this.state.userRoleControlRights.indexOf(sendToStoreId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGSENDTOSTORE,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURESENDTOSTORE\"\n        }),\n        \"controlId\": sendToStoreId\n      });\n    }\n\n    if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN && this.state.userRoleControlRights.indexOf(checkListId) !== -1) {\n      actionList.push({\n        \"method\": templateMappingAction.CONFIGURECHECKLIST,\n        \"value\": this.props.intl.formatMessage({\n          id: \"IDS_CONFIGURECHECKLIST\"\n        }),\n        \"controlId\": checkListId\n      });\n    }\n\n    actionList.push({\n      \"method\": templateMappingAction.CONFIGEXPORTFIELDS,\n      \"value\": this.props.intl.formatMessage({\n        id: \"IDS_CONFIGUREEXPORTFIELD\"\n      }),\n      \"controlId\": exportFieldsID\n    });\n    const filterParam = {\n      inputListName: \"DesignTemplateMapping\",\n      selectedObject: \"selectedDesignTemplateMapping\",\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\n      fecthInputObject: {\n        nregtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\n        nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\n        //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\n        //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\n        nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value == -2 ? // Object.keys(this.props.Login.masterData.length > 0) && this.props.Login.masterData.realFormValue  !== undefined && this.props.Login.masterData.realFormValue.value==-2 ?\n    validationColumnList.push({\n      \"idsName\": \"IDS_FORMNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_MODULENAME\",\n      \"dataField\": \"nmodulecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }) : validationColumnList.push({\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"nreactregtemplatecode\",\n      \"width\": \"200px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }); //ALPD-903\n\n    if (this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.Masters && this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.GOODSIN && this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\n      validationColumnList.push({\n        \"idsName\": \"IDS_SUBSAMPLETEMPLATE\",\n        \"dataField\": \"nsubsampletemplatecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n    }\n\n    const mandatoryFields = [];\n    validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\"); // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\n    //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\n    //     this.props.Login.userInfo)\n    // const breadCrumbData = [\n\n    let breadCrumbData = [];\n    this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, //defaultMasterType\n    // {\n    //     \"label\": \"IDS_MASTERTYPE\",\n    //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    // },\n    {\n      \"label\": \"IDS_SCREEN\",\n      \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\n    }] : this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 7 ? breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }] : breadCrumbData = [{\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\n    }];\n    const addParam = {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      operation: \"create\",\n      userInfo: this.props.Login.userInfo,\n      realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\n      realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\n      realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\n      controlId: addId,\n      moduleTypeArray: this.state.moduleTypeArray\n    }; // console.log(\"render, props, state:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 29\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DESIGNTEMPLATEMAPPING\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping,\n      getMasterDetail: designtemplatemapping => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDesignTemplateMapping,\n      primaryKeyField: \"ndesigntemplatemappingcode\",\n      mainField: \"sregtemplatename\",\n      firstField: \"sversionno\",\n      secondField: \"stransdisplaystatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.getDesignTemplateMappingComboService(addParam),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_TEMPLATEFILTER\": /*#__PURE__*/React.createElement(TemplateFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          filterSampletype: this.state.listSampletype || [],\n          filterRegistrationType: this.state.listRegistrationType || [],\n          filterRegistrationSubType: this.state.listRegistrationSubType || [],\n          filterForms: this.state.listForms || [],\n          defaultsampletype: this.props.Login.masterData[\"defaultsampletype\"] || {},\n          defaultregsubtype: this.props.Login.masterData[\"defaultregsubtype\"] || [],\n          defaultregtype: this.props.Login.masterData[\"defaultregtype\"] || [],\n          defaultform: this.props.Login.masterData.defaultform || [],\n          filterComboChange: this.filterComboChange,\n          masterTypeArray: this.props.Login.masterData.masterTypeArray || [],\n          defaultMasterType: this.props.Login.masterData.defaultMasterType || {},\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 61\n      }\n    }, `${this.props.intl.formatMessage({\n      id: \"IDS_VERSION\"\n    })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) // data-for=\"tooltip_list_wrap\"\n      // onClick={() => this.onApproveClick()}\n      ,\n      onClick: e => this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? this.openModal(approveId, 'Approve') : this.onApproveClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \" btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1 // onClick={() => this.ConfirmDelete(this.state.approveId)}>\n      ,\n      onClick: () => this.ConfirmDelete(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 69\n      }\n    })), actionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: actionList,\n      Button: false,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      icon: faChevronCircleDown // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\n      ,\n      dynamicButton: value => this.actionMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 69\n      }\n    }) : \"\"))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping && this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 76\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 65\n      }\n    }, \"   \", this.props.Login.masterData.selectedDesignTemplateMapping.smodulename))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FORMNAME\",\n      message: \"Form Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.selectedDesignTemplateMapping.sformname))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 57\n      }\n    }))))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal // size={(this.props.Login.operation === 'configure'\n      //     || this.props.Login.operation === 'configuresubsample'\n      //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\n      ,\n      size: this.props.Login.screenName === \"\" || this.props.Login.screenName === 'Template Mapping' || this.props.Login.operation === 'Approve' ? 'lg' : \"xl\" //\"xl\"\n      ,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      hideSave: this.props.Login.operation === 'configurechecklist',\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'Approve' ? [{\n        \"idsName\": \"IDS_VIEWNAME\",\n        \"dataField\": \"sviewname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === 'configurechecklistadd' ? [{\n        \"idsName\": \"IDS_CHECKLIST\",\n        \"dataField\": \"nchecklistversioncode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"textbox\"\n      }] : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' || this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' || this.props.Login.operation === 'configureunique' || this.props.Login.operation === 'configureaudit' || this.props.Login.operation === 'configuresendtostore' || this.props.Login.operation === 'configureexportfields' ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'Approve' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }),\n        name: \"sviewname\",\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_VIEWNAME\"\n        }) // value={this.state.selectedRecord[\"sviewname\"]}\n        ,\n        value: this.props.Login.selectedRecord[\"sviewname\"],\n        isMandatory: true,\n        maxLength: 30,\n        onPaste: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 41\n        }\n      }))) : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ? /*#__PURE__*/React.createElement(ConfigureScreenFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.dataResult || [] : this.props.Login.dataResult || {},\n        onChangeToggle: this.onChangeToggle,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 37\n        }\n      }) : this.props.Login.operation === 'configureedit' || this.props.Login.operation === 'configuresubsampleedit' ? /*#__PURE__*/React.createElement(ConfigureEditFields, {\n        operation: this.props.Login.operation,\n        designData: this.props.Login.editFieldDesignData || {},\n        inputParam: this.props.Login.inputParam,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.editFieldDataResult || [] : this.props.Login.editFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onConfigureComboChange // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\n        ,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 41\n        }\n      }) : this.props.Login.operation === 'configureaudit' ? /*#__PURE__*/React.createElement(ConfigureAuditFields, {\n        operation: this.props.Login.operation,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designData: this.props.Login.auditFieldDesignData || {},\n        auditTable: this.props.Login.auditTable || {},\n        auditData: this.props.Login.auditData || {},\n        inputParam: this.props.Login.inputParam,\n        formName: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n        dataResult: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ? this.props.Login.auditFieldDataResult || [] : this.props.Login.auditFieldDataResult || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onChangeToggle: this.onChangeToggle,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 45\n        }\n      }) : this.props.Login.operation === 'configureunique' ? /*#__PURE__*/React.createElement(ConfigureUniqueFields, {\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\n        //     this.props.Login.dataResult || [] :\n        //     this.props.Login.dataResult || {}}\n        ,\n        dataList: this.props.Login.dataList || [],\n        dataListCount: this.props.Login.dataListCount || [],\n        dataListsubsample: this.props.Login.dataListSubSample || [],\n        dataListCountsubsample: this.props.Login.dataListCountSubSample || [],\n        onInputOnChange: this.onInputOnChangeForUnique,\n        addCombinatonUnique: this.addCombinatonUnique,\n        deleteCombinationUnique: this.deleteCombinationUnique,\n        slanguagetypecode: this.props.Login.userInfo.slanguagetypecode,\n        approvedRegSubTypeVersion: this.props.Login.approvedRegSubTypeVersion,\n        selectedTemplateType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 678,\n          columnNumber: 49\n        }\n      }) : this.props.Login.operation === 'configureexportfields' ? /*#__PURE__*/React.createElement(ConfigureExportFields, {\n        operation: this.props.Login.operation,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designData: this.props.Login.designData || {},\n        inputParam: this.props.Login.inputParam,\n        formName: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\n        dataResult: this.props.Login.sampleexportdataResult || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onChangeToggle: this.onChangeExportFields,\n        selectedSampleType: this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 53\n        }\n      }) : this.props.Login.operation === 'configurechecklist' ? /*#__PURE__*/React.createElement(ConfigureCheckList, {\n        operation: this.props.Login.operation,\n        version: this.props.Login.checkListData || {},\n        checkListQB: this.props.Login.checkListQB || {},\n        onClickAddCheckList: this.onClickAddCheckList,\n        dataResult: process(this.props.Login.checkListQB ? this.props.Login.checkListQB : [], this.state.dataStateCL),\n        dataState: this.state.dataStateCL,\n        dataStateChange: this.dataStateChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 57\n        }\n      }) : this.props.Login.operation === 'configurechecklistadd' ? /*#__PURE__*/React.createElement(ConfigureCheckListAdd, {\n        checkList: this.props.Login.checkList || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChangeCheckList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 61\n        }\n      }) : this.props.Login.operation === 'configuresendtostore' ? /*#__PURE__*/React.createElement(ConfigureSendToStoreFields, {\n        operation: this.props.Login.operation,\n        SampleName: this.props.Login.samplename || {},\n        needSubSample: this.props.Login.needsubsample || {},\n        MainSampleList: this.props.Login.SampleTemplateNumber || [],\n        MainSubSampleList: this.props.Login.SampleTemplatecombobox,\n        SampleList: this.props.Login.subSampleTemplateNumber || [],\n        SubSampleList: this.props.Login.subSampleTemplateCombobox,\n        selectedRecord: this.state.selectedRecord || {} // onChangeToggle={this.onChangeToggle}\n        ,\n        onComboChange: this.onComboChange,\n        selectedValue: this.props.Login.selectedValue[0],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 65\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"nmodulecode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 69\n        }\n      }) : /*#__PURE__*/React.createElement(AddDesignTemplateMapping, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        designtemplatemappingList: this.props.Login.designtemplatemappingList,\n        subSampleTemplateList: this.props.Login.subSampleTemplateList,\n        selectedDesignTemplateMapping: this.props.Login.masterData.selectedDesignTemplateMapping || {},\n        operation: this.props.Login.operation,\n        userLogged: this.props.Login.userLogged,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        nformcode: this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\n        needSubSample: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false,\n        designTemplateQualisModule: this.props.Login.designTemplateQualisModule,\n        language: this.props.Login.language,\n        moduleTypeArray: this.state.moduleTypeArray || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 71\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      listSampletype,\n      listRegistrationType,\n      listRegistrationSubType,\n      listForms\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    const selectedInput = {};\n    let Taglstsampletype;\n    let TaglistRegistrationType;\n    let TaglistRegistrationSubType;\n    let ListFormsMap;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.props.Login.masterData.SampleTypes) {\n        Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\n        listSampletype = Taglstsampletype.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationTypes) {\n        TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\n        listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.registrationSubTypes) {\n        TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\n        listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.qualisforms) {\n        ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\n        listForms = ListFormsMap.get(\"OptionList\");\n      }\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        listSampletype,\n        listRegistrationType,\n        listRegistrationSubType,\n        selectedInput,\n        listForms\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  editFieldConfigService,\n  updateStore,\n  getDesignTemplateMappingDetail,\n  getMappedFieldProps,\n  getDesignTemplateMappingComboService,\n  filterColumnData,\n  auditFieldConfigService,\n  reloadDesignTemplateMapping,\n  getTMPFilterRegType,\n  getTMPFilterRegSubType,\n  getTMPFilterSubmit,\n  combinationUniqueConfigService,\n  mappingFieldConfigService,\n  exportFieldConfigService,\n  configureCheckList,\n  getConfigureCheckListLatestVersion\n})(injectIntl(DesignTemplateMapping));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/DesignTemplateMapping.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faTrashAlt","faThumbsUp","faChevronCircleDown","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","getDesignTemplateMappingDetail","getMappedFieldProps","editFieldConfigService","auditFieldConfigService","mappingFieldConfigService","getDesignTemplateMappingComboService","filterColumnData","reloadDesignTemplateMapping","getTMPFilterRegType","getTMPFilterRegSubType","getTMPFilterSubmit","combinationUniqueConfigService","exportFieldConfigService","configureCheckList","getConfigureCheckListLatestVersion","TemplateFilter","ContentPanel","ReadOnlyText","getControlMap","showEsign","constructOptionList","validateCreateView","ListMaster","SlideOutModal","AddDesignTemplateMapping","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","designProperties","formCode","SampleType","transactionStatus","templateMappingAction","designComponents","QUALISFORMS","AddSynonym","Affix","ConfirmMessage","ConfigureScreenFields","ConfigureEditFields","ConfigureUniqueFields","ConfigureAuditFields","CustomPopover","ConfigureSendToStoreFields","FormInput","CustomTabs","ConfigureExportFields","ConfigureCheckList","ConfigureCheckListAdd","process","mapStateToProps","state","Login","DesignTemplateMapping","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","filterComboChange","event","fieldname","inputData","userinfo","userInfo","nflag","nsampletypecode","parseInt","value","masterData","defaultsampletype","inputParam","Masters","masterTypeArray","updateInfo","typeName","data","defaultMasterType","qualisforms","defaultform","newMasterForm","nregtypecode","nregsubtypecode","GOODSIN","label","defaultregtype","defaultregsubtype","onChangeExportFields","dataItem","field","dataIndex","operation","sampleexportdataResult","sampleexportfields","target","checked","onClickAddCheckList","onComboChangeCheckList","selectedRecord","openModal","ncontrolcode","selectedId","screenName","displayName","onTabChange","tabProps","tabDetail","console","log","Layout","selectedDesignTemplateMapping","jsondata","subSampleLayout","subsamplejsondata","sampleType","realSampleValue","needsubsample","realRegSubTypeValue","item","nneedsubsample","tabMap","Map","set","map","children","length","column","component","hasOwnProperty","componentrow","inputtype","displayname","slanguagetypecode","dataStateChange","dataStateCL","dataState","actionMethod","method","CONFIGSAMPLEDISPLAY","openFieldConfiguration","controlId","CONFIGSAMPLEEDIT","editFieldConfiguration","CONFIGSUBSAMPLEDISPLAY","CONFIGSUBSAMPLEEDIT","CONFIGUNIQUE","openCombinationUniqueFieldConfiguration","CONFIGSAMPLEAUDIT","auditFieldConfiguration","CONFIGSENDTOSTORE","mappingFieldConfiguration","CONFIGEXPORTFIELDS","exportFieldConfiguration","CONFIGURECHECKLIST","controlCode","designtemplatemapping","ndesigntemplatemappingcode","reloadData","searchRef","current","NA","realRegTypeValue","nformcode","realFormValue","openFilter","showFilter","closeFilter","onFilterSubmit","onApproveClick","ntransactionstatus","RETIRED","ncontrolCode","controlMap","has","get","jdynamiccolumns","jnumericcolumns","templatePrimaryKey","deleteValidation","jsqlquerycolumns","sampleQuerybuilderViewCondition","sampleQuerybuilderViewSelect","getGridJsondata","sprimarykeyname","getGoodsInJsondata","postParam","undefined","Value","sviewname","inputListName","selectedObject","primaryKeyField","classUrl","methodUrl","saveType","esignNeeded","userRoleControlRights","loadEsign","screenData","warn","intl","formatMessage","id","configureunique","designData","isCheckedSampleMandatory","isCheckedSubSampleMandatory","dataListSubSample","dataList","dataListsubsample","dataListKeyvalue","dataListsubsampleKeyvalue","x","Object","keys","push","sampletemplatemandatoryfields","subsampletemplatemandatoryfields","templatemandatoryfields","SAMPLEREGISTRATION","jsondataobj","dataListCount","dataListCountSubSample","ConfirmDelete","confirmMessage","confirm","deleteTemplate","DRAFT","primaryKeyValue","fetchUrl","fecthInputObject","deleteCombinationUnique","index","eventKey","subsampledataList","subsampledataListCount","slice","addCombinatonUnique","napprovalconfigcode","validateEsign","sreason","nreasoncode","spredefinedreason","password","closeModal","onComboChange","comboData","fieldName","onConfigureComboChange","onInputOnChange","type","name","YES","NO","onInputOnChangeForUnique","radiotext","multilinguallabel","LABEL","VALUE","handleDateChange","dateName","dateValue","templatedata","task","gridItem","gridMoreItem","masterdatefields","masterdateconstraints","masteruniquevalidation","mastercombinationunique","editable","mastertemplatefields","sampleAuditFields","sampleAuditEditable","sampleAuditMultilingualFields","masterexportfields","row","componentRow","isExportField","mandatory","unique","filterinputtype","comboDataInputObject","componentcode","COMBOBOX","table","stablename","valuemember","nquerybuildertablecode","displaymember","source","isMultiLingual","dateonly","dateConstraintArraySQL","default","columnname","templatemandatory","editableuntill","selectedSubSampleTemplate","griditem","gridmoreitem","datefields","dateconstraints","uniquevalidation","combinationunique","templatefields","nonmandatoryExportFields","exportFields","LISTITEM","getJsondata","displayFields","genericLabel","listItem","subsampleeditable","subsamplelistitem","sampledatefields","sampledateconstraints","subsampledatefields","subsampledateconstraints","samplesearchfields","subsamplesearchfields","sampletemplatefields","subsampletemplatefields","sampleuniquevalidation","subsampleuniquevalidation","samplecombinationunique","subsamplecombinationunique","subSampleAuditFields","subSampleAuditEditable","subSampleAuditMultilingualFields","sampleExportFields","subSampleExportFields","sampletemplatemandatory","testdatefields","nsubsampletemplatecode","PRIMARYKEY","QUERYBUILDERTABLECODE","readonly","PREREGISTER","child","childData","tablecolumnname","testListFields","obj","sampledisplayfields","samplelistitem","samplegriditem","samplegridmoreitem","SAMPLETEMPLATEFIELDS","SUBSAMPLETEMPLATEFIELDS","sampleeditable","RESULTENTRY","APPROVAL","JOBALLOCATION","testgriditem","testdisplayfields","testgridmoreitem","MYJOBS","WORKLIST","BATCHCREATION","TESTWISEMYJOBS","RELEASE","onChangeToggle","dataResult","auditFieldDesignData","auditFieldDataResult","tableName","splice","realData","findIndex","indexOf","index1","object","index3","index4","index2","onApproveSaveClick","onSaveClick","formRef","editFieldDesignData","formCodeArray","forEach","editableData","editableuntil","statusItem","master","checkArray","includes","y","sample","dataListSub","subsample","nchecklistversioncode","auditdata","auditData","samqty","Quantity","samunit","Unit","subsamqty","SubQuantity","subsamunit","SubUnit","str","senttostoragefields","nreactregtemplatecode","dataObject","editmandatoryfields","auditcapturefields","multilingualfields","registrationsample","nmastersitecode","qf_jsonData","sdisplayname","qbt_jsonData","tablename","languageList","lang","sformname","qm_jsonData","nmodulecode","smoduledisplayname","sregtemplatename","ssubregtemplatename","skip","take","isOpen","designtemplatemappingData","masterStatus","error","userLogged","showAccordian","selectedInput","nmastertypecode","smastertype","moduleTypeArray","createRef","searchFieldList","designtemplatemappingFieldList","getDerivedStateFromProps","render","addId","deleteId","approveId","sampleFieldId","sampleEditFieldId","subSampleFieldId","subSampleEditFieldId","combinationUniqueFieldId","sendToStoreId","exportFieldsID","checkListId","actionList","validationColumnList","filterParam","mandatoryFields","breadCrumbData","addParam","searchedData","listSampletype","listRegistrationType","listRegistrationSubType","listForms","sversionno","APPROVED","stransdisplaystatus","e","smodulename","approvedRegSubTypeVersion","editFieldDataResult","auditTable","checkListData","checkListQB","checkList","samplename","SampleTemplateNumber","SampleTemplatecombobox","subSampleTemplateNumber","subSampleTemplateCombobox","selectedValue","showSynonym","designtemplatemappingList","subSampleTemplateList","designTemplateQualisModule","language","componentDidUpdate","previousProps","updateState","values","Taglstsampletype","TaglistRegistrationType","TaglistRegistrationSubType","ListFormsMap","SampleTypes","registrationTypes","registrationSubTypes","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faThumbsUp, faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\n//import { falistUl } from '@fortawesome/free-regular-svg-icons';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getDesignTemplateMappingDetail,\r\n    getMappedFieldProps, editFieldConfigService, auditFieldConfigService, mappingFieldConfigService,\r\n    getDesignTemplateMappingComboService, filterColumnData, reloadDesignTemplateMapping,\r\n    getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit, combinationUniqueConfigService,\r\n    exportFieldConfigService, configureCheckList, getConfigureCheckListLatestVersion\r\n} from '../../actions';\r\nimport TemplateFilter from './TemplateFilter';\r\nimport { ContentPanel, ReadOnlyText } from '../../components/App.styles';\r\nimport { getControlMap, showEsign, constructOptionList, validateCreateView } from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\n// import DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDesignTemplateMapping from './AddDesignTemplateMapping'\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport {\r\n    designProperties, formCode, SampleType, transactionStatus,\r\n    templateMappingAction, //SAMPLEAUDITFIELDS, SAMPLEAUDITEDITABLE, SAMPLEAUDITMULTILINGUALFIELDS,\r\n    // SUBSAMPLEAUDITFIELDS, SUBSAMPLEAUDITEDITABLE, SUBSAMPLEAUDITMULTILINGUALFIELDS,\r\n    //SAMPLETEMPLATEFIELDS, \r\n    //SUBSAMPLETEMPLATEFIELDS, \r\n    designComponents,\r\n    QUALISFORMS,\r\n    //ARNOMULTILINGUAL, SUBARNOMULTILINGUAL\r\n} from '../../components/Enumeration';\r\n\r\nimport AddSynonym from '../../components/droparea/AddSynonym';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ConfigureScreenFields from './ConfigureScreenFields';\r\nimport ConfigureEditFields from './ConfigureEditFields';\r\nimport ConfigureUniqueFields from './ConfigureUniqueFields.jsx';\r\nimport ConfigureAuditFields from './ConfigureAuditFields';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport ConfigureSendToStoreFields from './configureSendToStoreFields'\r\n//import { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfigureExportFields from './ConfigureExportFields';\r\nimport ConfigureCheckList from './ConfigureCheckList';\r\nimport ConfigureCheckListAdd from './ConfigureCheckListAdd';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass DesignTemplateMapping extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataStateCL = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            designtemplatemappingData: [],\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            //selectedRecord: {},\r\n            operation: \"\",\r\n            dataStateCL,\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedDesignTemplateMapping: undefined,\r\n            sidebarview: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            selectedInput: \"\",\r\n            masterTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }), value: 1, item: { nmastertypecode: 1, smastertype: this.props.intl.formatMessage({ id: \"IDS_NEWMASTER\" }) } },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }), value: 2, item: { nmastertypecode: 2, smastertype: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMASTER\" }) } }],\r\n            newMasterForm: { value: -2, label: \"-\" },\r\n            moduleTypeArray: [{ label: this.props.intl.formatMessage({ id: \"IDS_NEWMODULE\" }), value: 3 },\r\n            { label: this.props.intl.formatMessage({ id: \"IDS_EXISTINGMODULE\" }), value: 4 }]\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.searchFieldList = [\"sregtemplatename\", \"sversionno\", \"stransdisplaystatus\"];\r\n\r\n        this.designtemplatemappingFieldList = ['ndesigntemplatemappingcode', 'nsampletypecode', 'nformcode',\r\n            'nregtypecode', 'nregsubtypecode', 'nformwisetypecode', 'nreactregtemplatecode', 'ntransactionstatus', 'nversionno'];//'nmahcode',\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    filterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            // let uRL = \"\";\r\n            let inputData = [];\r\n            if (fieldname === \"sampleType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: parseInt(event.value),\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === SampleType.Masters) {\r\n                    const masterTypeArray = this.state.masterTypeArray\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                masterTypeArray,\r\n                                defaultMasterType: masterTypeArray[0],\r\n                                qualisforms: [], defaultform: this.state.newMasterForm,\r\n                                nregtypecode: -1, nregsubtypecode: -1\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                } else if (event.value === SampleType.GOODSIN) {\r\n                    let masterData = { ...this.props.Login.masterData, defaultsampletype: event }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                nregtypecode: -1, nregsubtypecode: -1,defaultform: { value: -1, label: \"-\" }\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    inputParam[\"masterData\"][\"defaultform\"] = { value: -1, label: \"-\" };\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n            }\r\n            else if (fieldname === \"registrationType\") {\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n\r\n                    nregtypecode: parseInt(event.value),\r\n                    nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n\r\n                }\r\n                let masterData = { ...this.props.Login.masterData, defaultregtype: event }\r\n                let inputParam = { masterData, inputData }\r\n                this.props.getTMPFilterRegSubType(inputParam)\r\n\r\n            } else if (fieldname === \"registrationSubType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultregsubtype: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if (fieldname === \"masterType\") {\r\n\r\n                let masterData = { ...this.props.Login.masterData, defaultMasterType: event }\r\n\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 1,\r\n                    nsampletypecode: SampleType.Masters,\r\n                }\r\n\r\n                let inputParam = { masterData, inputData }\r\n                if (event.value === 1) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData: { ...masterData, qualisforms: [], defaultform: this.state.newMasterForm } }\r\n                    }\r\n\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.getTMPFilterRegType(inputParam)\r\n                }\r\n\r\n            } else {\r\n                let masterData = { ...this.props.Login.masterData, defaultform: event }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData }\r\n                }\r\n\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onChangeExportFields = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n\r\n        const sampleexportdataResult = this.props.Login.sampleexportdataResult\r\n        sampleexportdataResult[formCode][dataIndex] = { ...sampleexportdataResult[formCode][dataIndex], sampleexportfields: event.target.checked }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { sampleexportdataResult }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onClickAddCheckList = () => {\r\n\r\n        this.props.getConfigureCheckListLatestVersion(this.props.Login.userInfo);\r\n\r\n    }\r\n\r\n    onComboChangeCheckList = (event, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {}\r\n        selectedRecord[field] = event\r\n        this.setState({ selectedRecord })\r\n    }\r\n\r\n    render() {\r\n\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\r\n\r\n        const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata\r\n\r\n        const addId = this.state.controlMap.has(\"AddDesignTemplateMapping\") && this.state.controlMap.get(\"AddDesignTemplateMapping\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode;\r\n        const sampleFieldId = this.state.controlMap.has(\"ConfigureSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSampleDisplayFields\").ncontrolcode;\r\n        const sampleEditFieldId = this.state.controlMap.has(\"ConfigureSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSampleEditableFields\").ncontrolcode;\r\n        const subSampleFieldId = this.state.controlMap.has(\"ConfigureSubSampleDisplayFields\") && this.state.controlMap.get(\"ConfigureSubSampleDisplayFields\").ncontrolcode;\r\n        const subSampleEditFieldId = this.state.controlMap.has(\"ConfigureSubSampleEditableFields\") && this.state.controlMap.get(\"ConfigureSubSampleEditableFields\").ncontrolcode;\r\n        const combinationUniqueFieldId = this.state.controlMap.has(\"ConfigureCombinationUniqueFields\") && this.state.controlMap.get(\"ConfigureCombinationUniqueFields\").ncontrolcode;\r\n        const sendToStoreId = this.state.controlMap.has(\"ConfigureSendToStore\") && this.state.controlMap.get(\"ConfigureSendToStore\").ncontrolcode;\r\n        //const sampleAuditConfigId = this.state.controlMap.has(\"ConfigureSampleAuditFields\") && this.state.controlMap.get(\"ConfigureSampleAuditFields\").ncontrolcode;\r\n        const exportFieldsID = this.state.controlMap.has(\"ConfigureExportFields\") && this.state.controlMap.get(\"ConfigureExportFields\").ncontrolcode;\r\n        const checkListId = this.state.controlMap.has(\"ConfigureCheckList\") && this.state.controlMap.get(\"ConfigureCheckList\").ncontrolcode;\r\n        const actionList = [];\r\n        let validationColumnList=[];\r\n        if (this.state.userRoleControlRights.indexOf(sampleFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREDISPLAYFIELDS\" }), \"controlId\": sampleFieldId })\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN &&\r\n            this.state.userRoleControlRights.indexOf(sampleEditFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEDITFIELDS\" }), \"controlId\": sampleEditFieldId })\r\n\r\n            if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\r\n                if (this.state.userRoleControlRights.indexOf(subSampleFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEDISPLAY, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESUBSAMPLEDISPLAYFIELDS\" }), \"controlId\": subSampleFieldId })\r\n                }\r\n\r\n                if (this.state.userRoleControlRights.indexOf(subSampleEditFieldId) !== -1) {\r\n                    actionList.push({ \"method\": templateMappingAction.CONFIGSUBSAMPLEEDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURSUBSAMPLEEEDITFIELDS\" }), \"controlId\": subSampleEditFieldId })\r\n                }\r\n            }\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGUNIQUE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURECOMBINATIONUNIQUEFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n        if (this.state.userRoleControlRights.indexOf(combinationUniqueFieldId) !== -1) {//sampleAuditConfigId\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSAMPLEAUDIT, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREAUDITFIELDS\" }), \"controlId\": combinationUniqueFieldId })\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN &&\r\n            this.state.userRoleControlRights.indexOf(sendToStoreId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGSENDTOSTORE, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURESENDTOSTORE\" }), \"controlId\": sendToStoreId })\r\n        }\r\n\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN &&\r\n            this.state.userRoleControlRights.indexOf(checkListId) !== -1) {\r\n            actionList.push({ \"method\": templateMappingAction.CONFIGURECHECKLIST, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGURECHECKLIST\" }), \"controlId\": checkListId })\r\n        }\r\n\r\n        actionList.push({ \"method\": templateMappingAction.CONFIGEXPORTFIELDS, \"value\": this.props.intl.formatMessage({ id: \"IDS_CONFIGUREEXPORTFIELD\" }), \"controlId\": exportFieldsID })\r\n\r\n        const filterParam = {\r\n            inputListName: \"DesignTemplateMapping\",\r\n            selectedObject: \"selectedDesignTemplateMapping\",\r\n            primaryKeyField: \"ndesigntemplatemappingcode\",\r\n            fetchUrl: \"designtemplatemapping/getDesignTemplateMapping\",\r\n            fecthInputObject: {\r\n                nregtypecode: this.props.Login.masterData.realSampleValue ?\r\n                    this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1) : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1) : -1,\r\n\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData[\"realSampleValue\"] ? this.props.Login.masterData[\"realSampleValue\"].value : -1,\r\n                //nregtypecode: this.props.Login.masterData[\"realRegTypeValue\"] ? this.props.Login.masterData[\"realRegTypeValue\"].value : -1,\r\n                //nregsubtypecode: this.props.Login.masterData[\"realRegSubTypeValue\"] ? this.props.Login.masterData[\"realRegSubTypeValue\"].value : -1,\r\n                nformcode: this.props.Login.masterData[\"realFormValue\"] ? this.props.Login.masterData[\"realFormValue\"].value : -1,\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n\r\n        };\r\n      this.props.Login.masterData.realFormValue  && this.props.Login.masterData.realFormValue.value==-2 ?\r\n       // Object.keys(this.props.Login.masterData.length > 0) && this.props.Login.masterData.realFormValue  !== undefined && this.props.Login.masterData.realFormValue.value==-2 ?\r\n         validationColumnList.push( \r\n            { \"idsName\": \"IDS_FORMNAME\", \"dataField\": \"sformname\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"nmodulecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        )\r\n        :validationColumnList.push(\r\n            { \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"nreactregtemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n           )\r\n        //ALPD-903\r\n        if (this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.Masters \r\n            && this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value !== SampleType.GOODSIN\r\n            && this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample === true) {\r\n            validationColumnList.push({ \"idsName\": \"IDS_SUBSAMPLETEMPLATE\", \"dataField\": \"nsubsampletemplatecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },);\r\n        }\r\n\r\n        const mandatoryFields = [];\r\n           validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        // let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n        //     this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n        //     this.props.Login.userInfo)\r\n\r\n        // const breadCrumbData = [\r\n\r\n        let breadCrumbData = [];\r\n        this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 4 ?\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                },\r\n                //defaultMasterType\r\n                // {\r\n                //     \"label\": \"IDS_MASTERTYPE\",\r\n                //     \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                // },\r\n                {\r\n                    \"label\": \"IDS_SCREEN\",\r\n                    \"value\": this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.label : \"-\"\r\n                }\r\n            ] :\r\n            this.props.Login.masterData[\"realSampleValue\"] && this.props.Login.masterData[\"realSampleValue\"].value === 7 ?\r\n                breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                    }\r\n                ] :\r\n                breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.label : \"-\"\r\n                    }, {\r\n                        \"label\": \"IDS_REGTYPE\",\r\n                        \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.label : \"-\"\r\n                    }, {\r\n                        \"label\": \"IDS_REGSUBTYPE\",\r\n                        \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"-\"\r\n                    }\r\n                ];\r\n\r\n        const addParam = {\r\n            screenName: this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" }),\r\n            operation: \"create\",\r\n            userInfo: this.props.Login.userInfo,\r\n            realSampleValue: this.props.Login.masterData.realSampleValue ? this.props.Login.masterData.realSampleValue.value : -1,\r\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n            controlId: addId,\r\n            moduleTypeArray: this.state.moduleTypeArray\r\n        }\r\n\r\n        // console.log(\"render, props, state:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* Start of get display*/}\r\n                    {/* <div className=\"client-listing-wrap mtop-4\"> */}\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                            <span onClick={() => this.setState({ sidebarview: !this.state.sidebarview })} className='sidebar-view-btn'>\r\n                                {!this.state.sidebarview ?\r\n                                    <i class=\"fa fa-less-than\"></i> :\r\n                                    <i class=\"fa fa-greater-than\"></i>\r\n                                }\r\n                            </span>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATEMAPPING\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DesignTemplateMapping}\r\n                                getMasterDetail={(designtemplatemapping) => this.props.getDesignTemplateMappingDetail(designtemplatemapping, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDesignTemplateMapping}\r\n                                primaryKeyField=\"ndesigntemplatemappingcode\"\r\n                                mainField=\"sregtemplatename\"\r\n                                firstField=\"sversionno\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.getDesignTemplateMappingComboService(addParam)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TEMPLATEFILTER\":\r\n                                            <TemplateFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                filterSampletype={this.state.listSampletype || []}\r\n                                                filterRegistrationType={this.state.listRegistrationType || []}\r\n                                                filterRegistrationSubType={this.state.listRegistrationSubType || []}\r\n                                                filterForms={this.state.listForms || []}\r\n                                                defaultsampletype={this.props.Login.masterData[\"defaultsampletype\"] || {}}\r\n                                                defaultregsubtype={this.props.Login.masterData[\"defaultregsubtype\"] || []}\r\n                                                defaultregtype={this.props.Login.masterData[\"defaultregtype\"] || []}\r\n                                                defaultform={this.props.Login.masterData.defaultform || []}\r\n                                                filterComboChange={this.filterComboChange}\r\n                                                masterTypeArray={this.props.Login.masterData.masterTypeArray || []}\r\n                                                defaultMasterType={this.props.Login.masterData.defaultMasterType || {}}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping.length > 0 && this.props.Login.masterData.selectedDesignTemplateMapping ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.selectedDesignTemplateMapping.sregtemplatename}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                {`${this.props.intl.formatMessage({ id: \"IDS_VERSION\" })} : ${this.props.Login.masterData.selectedDesignTemplateMapping.sversionno}`}\r\n                                                                <span className={`btn btn-outlined ${this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT ? \"outline-secondary\" : this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.APPROVED ? \"outline-success\" : \"outline-danger\"} btn-sm mx-md-3 mx-sm-2`}>\r\n                                                                    {this.props.Login.masterData.selectedDesignTemplateMapping.stransdisplaystatus}\r\n                                                                </span>\r\n\r\n                                                            </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                    // data-for=\"tooltip_list_wrap\"\r\n                                                                    // onClick={() => this.onApproveClick()}\r\n                                                                    onClick={(e) => this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters  || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? this.openModal(approveId, 'Approve') : this.onApproveClick()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faThumbsUp} title={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\" btn btn-circle outline-grey mr-2\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    //    data-for=\"tooltip_list_wrap\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    // onClick={() => this.ConfirmDelete(this.state.approveId)}>\r\n                                                                    onClick={() => this.ConfirmDelete()}>\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                {actionList.length > 0 ?\r\n                                                                    <CustomPopover\r\n                                                                        nav={true}\r\n                                                                        data={actionList}\r\n                                                                        Button={false}\r\n                                                                        hideIcon={true}\r\n                                                                        btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                        textKey=\"value\"\r\n                                                                        icon={faChevronCircleDown}\r\n                                                                        // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\r\n                                                                        dynamicButton={(value) => this.actionMethod(value)}\r\n                                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    />\r\n                                                                    :\r\n                                                                    \"\"}\r\n\r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                {this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                                                    this.props.Login.masterData.selectedDesignTemplateMapping.nformcode > 0 &&\r\n                                                    <Row>\r\n                                                        <Col md={6}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                                <ReadOnlyText>   {this.props.Login.masterData.selectedDesignTemplateMapping.smodulename}\r\n                                                                </ReadOnlyText>\r\n                                                            </FormGroup>\r\n\r\n                                                        </Col>\r\n                                                        <Col md={6}>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_FORMNAME\" message=\"Form Name\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.selectedDesignTemplateMapping.sformname}\r\n                                                            </ReadOnlyText>\r\n\r\n                                                        </Col>\r\n                                                    </Row>}\r\n\r\n                                                <Row>\r\n                                                    <Col md={12} >\r\n                                                        <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                                                    </Col>\r\n                                                </Row>\r\n\r\n                                            </Card.Body>\r\n\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        // size={(this.props.Login.operation === 'configure'\r\n                        //     || this.props.Login.operation === 'configuresubsample'\r\n                        //     || this.props.Login.operation === 'configureaudit') ? \"xl\" : \"lg\"}\r\n                        size={this.props.Login.screenName === \"\" || this.props.Login.screenName === 'Template Mapping' || this.props.Login.operation === 'Approve' ? 'lg' : \"xl\"}//\"xl\"\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        hideSave={this.props.Login.operation === 'configurechecklist'}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n\r\n                        mandatoryFields={this.props.Login.operation === 'Approve' ? [{ \"idsName\": \"IDS_VIEWNAME\", \"dataField\": \"sviewname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n                        ] : this.props.Login.operation === 'configurechecklistadd' ? [{ \"idsName\": \"IDS_CHECKLIST\", \"dataField\": \"nchecklistversioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" }\r\n                        ] : (this.props.Login.operation === 'configure'\r\n                            || this.props.Login.operation === 'configuresubsample'\r\n                            || this.props.Login.operation === 'configureedit'\r\n                            || this.props.Login.operation === 'configuresubsampleedit'\r\n                            || this.props.Login.operation === 'configureunique'\r\n                            || this.props.Login.operation === 'configureaudit'\r\n                            || this.props.Login.operation === 'configuresendtostore'\r\n                            || this.props.Login.operation === 'configureexportfields') ? [] : mandatoryFields}\r\n\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.operation === 'Approve' ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormInput\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                            name={\"sviewname\"}\r\n                                            type=\"text\"\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_VIEWNAME\" })}\r\n                                           // value={this.state.selectedRecord[\"sviewname\"]}\r\n                                            value={this.props.Login.selectedRecord[\"sviewname\"]}\r\n                                            isMandatory={true}\r\n                                            maxLength={30}\r\n                                            onPaste={true}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                : this.props.Login.operation === 'configure' || this.props.Login.operation === 'configuresubsample' ?\r\n                                    <ConfigureScreenFields\r\n                                        operation={this.props.Login.operation}\r\n                                        designData={this.props.Login.designData || {}}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                            this.props.Login.dataResult || [] :\r\n                                            this.props.Login.dataResult || {}}\r\n                                        onChangeToggle={this.onChangeToggle}\r\n                                        approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                        selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                    />\r\n                                    : (this.props.Login.operation === 'configureedit'\r\n                                        || this.props.Login.operation === 'configuresubsampleedit') ?\r\n                                        <ConfigureEditFields\r\n                                            operation={this.props.Login.operation}\r\n                                            designData={this.props.Login.editFieldDesignData || {}}\r\n                                            inputParam={this.props.Login.inputParam}\r\n                                            dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                this.props.Login.editFieldDataResult || [] :\r\n                                                this.props.Login.editFieldDataResult || {}}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            // onChangeToggle={this.onChangeToggle}\r\n                                            onComboChange={this.onConfigureComboChange}\r\n                                            // approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                            selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                        />\r\n                                        : (this.props.Login.operation === 'configureaudit') ?\r\n                                            <ConfigureAuditFields\r\n                                                operation={this.props.Login.operation}\r\n                                                needSubSample={this.props.Login.masterData.realRegSubTypeValue ?\r\n                                                    this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                designData={this.props.Login.auditFieldDesignData || {}}\r\n                                                auditTable={this.props.Login.auditTable || {}}\r\n                                                auditData={this.props.Login.auditData || {}}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                formName={this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label}\r\n                                                dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                    this.props.Login.auditFieldDataResult || [] :\r\n                                                    this.props.Login.auditFieldDataResult || {}}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onChangeToggle={this.onChangeToggle}\r\n                                                selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                            />\r\n                                            : this.props.Login.operation === 'configureunique' ?\r\n                                                <ConfigureUniqueFields\r\n                                                    designData={this.props.Login.designData || {}}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    // dataResult={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode === SampleType.Masters ?\r\n                                                    //     this.props.Login.dataResult || [] :\r\n                                                    //     this.props.Login.dataResult || {}}\r\n                                                    dataList={this.props.Login.dataList || []}\r\n                                                    dataListCount={this.props.Login.dataListCount || []}\r\n                                                    dataListsubsample={this.props.Login.dataListSubSample || []}\r\n                                                    dataListCountsubsample={this.props.Login.dataListCountSubSample || []}\r\n                                                    onInputOnChange={this.onInputOnChangeForUnique}\r\n                                                    addCombinatonUnique={this.addCombinatonUnique}\r\n                                                    deleteCombinationUnique={this.deleteCombinationUnique}\r\n                                                    slanguagetypecode={this.props.Login.userInfo.slanguagetypecode}\r\n                                                    approvedRegSubTypeVersion={this.props.Login.approvedRegSubTypeVersion}\r\n                                                    selectedTemplateType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                                /> : this.props.Login.operation === 'configureexportfields' ?\r\n                                                    <ConfigureExportFields\r\n                                                        operation={this.props.Login.operation}\r\n                                                        needSubSample={this.props.Login.masterData.realRegSubTypeValue ?\r\n                                                            this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                        designData={this.props.Login.designData || {}}\r\n                                                        inputParam={this.props.Login.inputParam}\r\n                                                        formName={this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label}\r\n                                                        dataResult={this.props.Login.sampleexportdataResult || {}}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        onChangeToggle={this.onChangeExportFields}\r\n                                                        selectedSampleType={this.props.Login.masterData.selectedDesignTemplateMapping.nsampletypecode}\r\n                                                    />\r\n                                                    : this.props.Login.operation === 'configurechecklist' ?\r\n                                                        <ConfigureCheckList\r\n                                                            operation={this.props.Login.operation}\r\n                                                            version={this.props.Login.checkListData || {}}\r\n                                                            checkListQB={this.props.Login.checkListQB || {}}\r\n                                                            onClickAddCheckList={this.onClickAddCheckList}\r\n                                                            dataResult={process(this.props.Login.checkListQB ? this.props.Login.checkListQB : [], this.state.dataStateCL)}\r\n                                                            dataState={this.state.dataStateCL}\r\n                                                            dataStateChange={this.dataStateChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                        />\r\n\r\n\r\n                                                        : this.props.Login.operation === 'configurechecklistadd' ?\r\n                                                            <ConfigureCheckListAdd\r\n                                                                checkList={this.props.Login.checkList || {}}\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                onComboChange={this.onComboChangeCheckList}\r\n\r\n                                                            />\r\n\r\n                                                            :\r\n                                                            this.props.Login.operation === 'configuresendtostore' ?\r\n                                                                <ConfigureSendToStoreFields\r\n                                                                    operation={this.props.Login.operation}\r\n                                                                    SampleName={this.props.Login.samplename || {}}\r\n                                                                    needSubSample={this.props.Login.needsubsample || {}}\r\n                                                                    MainSampleList={this.props.Login.SampleTemplateNumber || []}\r\n                                                                    MainSubSampleList={this.props.Login.SampleTemplatecombobox}\r\n                                                                    SampleList={this.props.Login.subSampleTemplateNumber || []}\r\n                                                                    SubSampleList={this.props.Login.subSampleTemplateCombobox}\r\n                                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                                    // onChangeToggle={this.onChangeToggle}\r\n                                                                    onComboChange={this.onComboChange}\r\n                                                                    selectedValue={this.props.Login.selectedValue[0]}\r\n                                                                />\r\n                                                                :\r\n                                                                this.state.showSynonym ?\r\n                                                                    <AddSynonym\r\n                                                                        selectedFieldRecord={this.state.selectedRecord}\r\n                                                                        onInputOnChange={this.onInputOnChange}\r\n                                                                        languages={this.props.Login.languageList || []}\r\n                                                                        fieldName=\"nmodulecode\"\r\n                                                                    />\r\n                                                                    : <AddDesignTemplateMapping\r\n                                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                                        onInputOnChange={this.onInputOnChange}\r\n                                                                        onComboChange={this.onComboChange}\r\n                                                                        handleDateChange={this.handleDateChange}\r\n                                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                                        designtemplatemappingList={this.props.Login.designtemplatemappingList}\r\n                                                                        subSampleTemplateList={this.props.Login.subSampleTemplateList}\r\n                                                                        selectedDesignTemplateMapping={this.props.Login.masterData.selectedDesignTemplateMapping || {}}\r\n                                                                        operation={this.props.Login.operation}\r\n                                                                        userLogged={this.props.Login.userLogged}\r\n                                                                        inputParam={this.props.Login.inputParam}\r\n                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                        nformcode={this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1}\r\n                                                                        needSubSample={this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false}\r\n                                                                        designTemplateQualisModule={this.props.Login.designTemplateQualisModule}\r\n                                                                        language={this.props.Login.language}\r\n                                                                        moduleTypeArray={this.state.moduleTypeArray || []}\r\n\r\n                                                                    />}\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n    openModal = (ncontrolcode, operation) => {     \r\n              const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: operation, ncontrolcode, selectedId: null,\r\n                openModal: true, screenName: this.props.Login.inputParam.displayName\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n\r\n        console.log(\"this.props.Login.masterData:\", this.props.Login.masterData);\r\n        const Layout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.jsondata;\r\n\r\n        const subSampleLayout = this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n            this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n        const sampleType = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_TEMPLATE\", <Card>\r\n            {/* <Card.Header><FormattedMessage id=\"IDS_TEMPLATE\" message=\"Template\" /></Card.Header> */}\r\n            <Card.Body>\r\n                {\r\n                    Layout ?\r\n                        Layout.map((item) =>\r\n                            <Row>\r\n                                {item.children.length > 0 ?\r\n                                    item.children.map((column) =>\r\n                                        <Col md={12 / item.children.length}>\r\n                                            {\r\n                                                column.children.map((component) => {\r\n                                                    return (\r\n                                                        component.hasOwnProperty(\"children\") ?\r\n                                                            <Row>\r\n                                                                {component.children.map(componentrow =>\r\n                                                                    componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                    <Col md={componentrow && componentrow.length || 4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                            <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                }\r\n                                                            </Row>\r\n                                                            :\r\n                                                            component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                            <FormGroup>\r\n                                                                <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                            </FormGroup>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    )\r\n                                    : \"\"}\r\n                            </Row>\r\n                        )\r\n                        :\r\n                        \"\"\r\n                }\r\n            </Card.Body>\r\n        </Card>);\r\n        if (sampleType !== SampleType.Masters && sampleType !== SampleType.GOODSIN && needsubsample) {\r\n            tabMap.set(\"IDS_SUBSAMPLETEMPLATE\", <Card>\r\n                {/* <Card.Header><FormattedMessage id=\"IDS_SUBSAMPLETEMPLATE\" message=\"Sub Sample Template\" /></Card.Header> */}\r\n                <Card.Body>\r\n                    {\r\n                        subSampleLayout ?\r\n                            subSampleLayout.map((item) =>\r\n                                <Row>\r\n                                    {item.children.length > 0 ?\r\n                                        item.children.map((column) =>\r\n                                            <Col md={12 / item.children.length}>\r\n                                                {\r\n                                                    column.children.map((component) => {\r\n                                                        return (\r\n                                                            component.hasOwnProperty(\"children\") ?\r\n                                                                <Row>\r\n                                                                    {component.children.map(componentrow =>\r\n                                                                        componentrow.inputtype !== \"frontendsearchfilter\" && componentrow.inputtype !== \"backendsearchfilter\" &&\r\n                                                                        <Col md={componentrow && componentrow.length || 4}>\r\n                                                                            <FormGroup>\r\n                                                                                <FormLabel>{componentrow.displayname ? componentrow.displayname[this.props.Login.userInfo.slanguagetypecode] || componentrow.label : componentrow.label}</FormLabel>\r\n                                                                                <ReadOnlyText>{\"-\"}</ReadOnlyText>\r\n                                                                            </FormGroup>\r\n                                                                        </Col>\r\n                                                                    )\r\n                                                                    }\r\n                                                                </Row>\r\n                                                                :\r\n                                                                component.inputtype !== \"frontendsearchfilter\" && component.inputtype !== \"backendsearchfilter\" &&\r\n                                                                <FormGroup>\r\n                                                                    <FormLabel>{component.displayname ? component.displayname[this.props.Login.userInfo.slanguagetypecode] || component.label : component.label}</FormLabel>\r\n                                                                    <ReadOnlyText> {\"-\"}</ReadOnlyText>\r\n                                                                </FormGroup>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                            </Col>\r\n                                        )\r\n                                        : \"\"}\r\n                                </Row>\r\n                            )\r\n                            :\r\n                            \"\"\r\n                    }\r\n                </Card.Body>\r\n            </Card>);\r\n        }\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateCL: event.dataState\r\n        });\r\n    }\r\n\r\n    actionMethod = (value) => {\r\n        if (value.method === templateMappingAction.CONFIGSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, \"configure\");\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configureedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEDISPLAY) {\r\n            this.openFieldConfiguration(value.controlId, 'configuresubsample')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSUBSAMPLEEDIT) {\r\n            this.editFieldConfiguration(value.controlId, 'configuresubsampleedit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGUNIQUE) {\r\n            this.openCombinationUniqueFieldConfiguration(value.controlId)\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSAMPLEAUDIT) {\r\n            this.auditFieldConfiguration(value.controlId, 'configureaudit')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGSENDTOSTORE) {\r\n            this.mappingFieldConfiguration(value.controlId, 'configuresendtostore')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGEXPORTFIELDS) {\r\n            this.exportFieldConfiguration(value.controlId, 'configureexportfields')\r\n        }\r\n        else if (value.method === templateMappingAction.CONFIGURECHECKLIST) {\r\n            this.configureCheckList(value.controlId, 'configurechecklist')\r\n        }\r\n    }\r\n\r\n\r\n    configureCheckList = (controlCode, operation) => {\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                //  nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.configureCheckList(inputParam)\r\n    }\r\n\r\n    exportFieldConfiguration = (controlCode, operation) => {\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters && this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.exportFieldConfigService(inputParam)\r\n    }\r\n\r\n    // onFilterSubmit = () => {\r\n    //     this.reloadData()\r\n    // }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n\r\n            // nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value || -1 : -1),\r\n            //nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.realSampleValue.value,\r\n            nformcode: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? formCode.GOODSIN : parseInt(this.props.Login.masterData.realFormValue ? this.props.Login.masterData[\"realFormValue\"].value : -1)\r\n        };\r\n\r\n        let inputParam = { masterData: this.props.Login.masterData, inputData };\r\n        this.props.reloadDesignTemplateMapping(inputParam);\r\n\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n\r\n        let { selectedRecord, userRoleControlRights, controlMap,\r\n            listSampletype, listRegistrationType, listRegistrationSubType, listForms } = this.state;\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]\r\n                    && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                updateState = true;\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n\r\n        const selectedInput = {};\r\n        let Taglstsampletype;\r\n        let TaglistRegistrationType;\r\n        let TaglistRegistrationSubType;\r\n        let ListFormsMap;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            updateState = true;\r\n            if (this.props.Login.masterData.SampleTypes) {\r\n                Taglstsampletype = constructOptionList(this.props.Login.masterData.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", undefined);\r\n                listSampletype = Taglstsampletype.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationTypes) {\r\n                TaglistRegistrationType = constructOptionList(this.props.Login.masterData.registrationTypes || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, undefined);\r\n                listRegistrationType = TaglistRegistrationType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.registrationSubTypes) {\r\n                TaglistRegistrationSubType = constructOptionList(this.props.Login.masterData.registrationSubTypes || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", undefined);\r\n                listRegistrationSubType = TaglistRegistrationSubType.get(\"OptionList\");\r\n            }\r\n            if (this.props.Login.masterData.qualisforms) {\r\n                ListFormsMap = constructOptionList(this.props.Login.masterData.qualisforms || [], \"nformcode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                listForms = ListFormsMap.get(\"OptionList\");\r\n            }\r\n        }\r\n\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, controlMap, userRoleControlRights,\r\n                listSampletype, listRegistrationType, listRegistrationSubType,\r\n                selectedInput, listForms\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters || this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregtype ? this.props.Login.masterData.defaultregtype.value || -1 : -1),\r\n            nregsubtypecode: this.props.Login.masterData.defaultsampletype.value === SampleType.Masters || this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? transactionStatus.NA : parseInt(this.props.Login.masterData.defaultregsubtype ? this.props.Login.masterData.defaultregsubtype.value || -1 : -1),\r\n            nsampletypecode: this.props.Login.masterData.defaultsampletype.value,\r\n            nformcode: this.props.Login.masterData.defaultsampletype.value === SampleType.GOODSIN ? formCode.GOODSIN : parseInt(this.props.Login.masterData.defaultform ? this.props.Login.masterData.defaultform.value || -1 : -1)\r\n\r\n        };\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            realSampleValue: this.props.Login.masterData.defaultsampletype,\r\n            realFormValue: this.props.Login.masterData.defaultform,\r\n            realRegTypeValue: this.props.Login.masterData.defaultregtype,\r\n            realRegSubTypeValue: this.props.Login.masterData.defaultregsubtype\r\n        }\r\n        let inputParam = { masterData, inputData };\r\n        this.props.getTMPFilterSubmit(inputParam);\r\n    }\r\n\r\n    onApproveClick = () => {\r\n        if (this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus !== transactionStatus.RETIRED) {\r\n            const ncontrolCode = this.state.controlMap.has(\"ApproveDesignTemplateMapping\") && this.state.controlMap.get(\"ApproveDesignTemplateMapping\").ncontrolcode\r\n            // if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            //     const updateInfo = {\r\n            //         typeName: DEFAULT_RETURN,\r\n            //         data: {\r\n            //              openModal: true,\r\n            //             operation: \"approve\", ncontrolCode: ncontrolCode\r\n            //         }\r\n            //     }\r\n            //     this.props.updateStore(updateInfo);\r\n\r\n            // } else {\r\n\r\n\r\n            let inputData ={};\r\n\r\n\r\n            if(this.props.Login.realSampleValue && this.props.Login.realSampleValue.value !== SampleType.GOODSIN){\r\n               let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect }=  this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n\r\n\r\n            }else{\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } = this.getGoodsInJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n\r\n    \r\n            }\r\n            // console.log(\"deleteValidation 2:\", deleteValidation);\r\n\r\n            //let inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n           // inputData[\"deletevalidationlist\"] = deleteValidation;\r\n            inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\r\n            postParam = {\r\n                inputListName: \"DesignTemplateMapping\",\r\n                selectedObject: \"selectedDesignTemplateMapping\",\r\n                primaryKeyField: \"ndesigntemplatemappingcode\"\r\n            };\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    ...inputData\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                screenName: 'Template Mapping',\r\n                operation: \"Approve\", postParam,\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n            }\r\n            let saveType;\r\n\r\n            // console.log(\"approve:\", inputParam);\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"Approve\", screenName: 'Template Mapping'\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n\r\n        //  }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TEMPLATERETIRED\" }));\r\n        }\r\n    }\r\n    configureunique=()=>{\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n        let designData = this.props.Login.designData;\r\n        //  let formCodeArray = Object.keys(this.state.selectedRecord);\r\n        let isCheckedSampleMandatory=false\r\n        let isCheckedSubSampleMandatory=this.props.Login.dataListSubSample.length===0?true:false\r\n        const dataList = []\r\n        const dataListsubsample = []\r\n        let dataListKeyvalue=[];\r\n        let dataListsubsampleKeyvalue=[];\r\n        this.props.Login.dataListSubSample.map(x => {\r\n            if (Object.keys(x).length !== 0) {\r\n                dataListsubsample.push(x);\r\n                dataListsubsampleKeyvalue=Object.keys(x);\r\n            }\r\n        })\r\n        this.props.Login.dataList.map(x => {\r\n            if (Object.keys(x).length !== 0) {\r\n                dataList.push(x);\r\n                dataListKeyvalue=Object.keys(x);\r\n            }\r\n        })\r\n        designData.sampletemplatemandatoryfields && designData.sampletemplatemandatoryfields.map(item=>{\r\n            dataListKeyvalue.map(value=>{\r\n                if(value===item[2])\r\n                    {isCheckedSampleMandatory=true;}\r\n        })});\r\n\r\n        designData.subsampletemplatemandatoryfields && designData.subsampletemplatemandatoryfields.map(item=>{\r\n            dataListsubsampleKeyvalue.map(value=>{\r\n                if(value===item[2])\r\n                    {isCheckedSubSampleMandatory=true;}\r\n         })});\r\n\r\n        designData.templatemandatoryfields && designData.templatemandatoryfields.map(item=>{\r\n            dataListKeyvalue.map(value=>{\r\n                    if(value===item[2])\r\n                        {isCheckedSampleMandatory=true;}\r\n        })});\r\n\r\n\r\n            \r\n        if(isCheckedSampleMandatory && isCheckedSubSampleMandatory) {\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            designData['mastercombinationunique'] = dataList\r\n        }else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\r\n            designData['combinationunique'] = dataList\r\n        }else {\r\n            designData['samplecombinationunique'] = dataList\r\n            designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\r\n            // this.props.Login.dataListSubSample.map(x => {\r\n            //     if (Object.keys(x).length !== 0) {\r\n            //         dataListsubsample.push(x);\r\n            //     }\r\n            // })\r\n            designData['subsamplecombinationunique'] = dataListsubsample\r\n            designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\r\n        }\r\n\r\n\r\n        inputData = {\r\n            designtemplatemapping: {\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                jsondataobj: designData\r\n            },\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n\r\n        operation = 'configure';\r\n        let postParam = undefined;\r\n        const inputParam = {\r\n            classUrl: \"designtemplatemapping\",\r\n            methodUrl: \"DesignTemplateMapping\",\r\n            inputData: inputData,\r\n            operation,\r\n             postParam, searchRef: this.searchRef, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (\r\n            showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }else{\r\n        if(!isCheckedSampleMandatory){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEMANDATORYFIELD\" }));\r\n        }else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEMANDATORYFIELDINSUBSAMPLE\" }));\r\n        }\r\n    }\r\n    }\r\n\r\n    ConfirmDelete = () => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteTemplate());\r\n    }\r\n\r\n    deleteTemplate = () => {\r\n        if ((this.props.Login.masterData.selectedDesignTemplateMapping.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            const ncontrolCode = this.state.controlMap.has(\"DeleteDesignTemplateMapping\") && this.state.controlMap.get(\"DeleteDesignTemplateMapping\").ncontrolcode\r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            let postParam = undefined;\r\n            inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n            inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n            postParam = {\r\n                inputListName: \"DesignTemplateMapping\",\r\n                selectedObject: \"selectedDesignTemplateMapping\",\r\n                primaryKeyField: \"ndesigntemplatemappingcode\",\r\n                primaryKeyValue: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                fetchUrl: \"designtemplatemapping/getDesignTemplateMappingById\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            };\r\n\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    ...inputData,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n\r\n                },\r\n                classUrl: 'designtemplatemapping',\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                screenName: 'Template Mapping',\r\n                operation: \"delete\", postParam,\r\n                selectedRecord: { ...this.state.selectedRecord }\r\n            }\r\n            let saveType;\r\n\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode);\r\n            if (esignNeeded) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, openModal: true, operation: \"delete\", screenName: 'Template Mapping'\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTODELETE\" }));\r\n        }\r\n    }\r\n\r\n    deleteCombinationUnique = (index, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            let dataList = this.props.Login.subsampledataList || []\r\n            let dataListCount = this.props.Login.subsampledataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { subsampledataListCount: dataListCount, subsampledataList: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            let dataList = this.props.Login.dataList || []\r\n            let dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount = [...dataListCount.slice(0, index), ...dataListCount.slice(index + 1)]\r\n            //   delete dataListCount[index]\r\n            if (dataList[index] || dataList[index] === null) {\r\n                dataList = [...dataList.slice(0, index), ...dataList.slice(index + 1)]\r\n\r\n                // delete dataList[index]\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    addCombinatonUnique = (designData, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCountSubSample || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCountSubSample: dataListCount, dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            //    const obj={}\r\n            //     designData.map(item=>{\r\n            //         obj[item[\"2\"]]={...item}\r\n            //     })\r\n            //dataList.push({})\r\n            const dataListCount = this.props.Login.dataListCount || []\r\n            dataListCount.push(dataListCount.length + 1)\r\n            dataList.push({})\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListCount, dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    openCombinationUniqueFieldConfiguration = (controlCode) => {\r\n        let openModal = true;\r\n        let operation = 'configureunique';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.combinationUniqueConfigService(inputParam)\r\n    }\r\n\r\n    openFieldConfiguration = (controlCode, operation) => {\r\n        let openModal = true;\r\n        //let operation = 'configure';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.getMappedFieldProps(inputParam)\r\n    }\r\n\r\n    editFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        // if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){\r\n        //     inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        //  }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.editFieldConfigService(inputParam)\r\n    }\r\n\r\n    mappingFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        // let operation = 'configureedit';\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let displayname = \"ConfigSendTOStore\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping\r\n                },\r\n                userinfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName, displayname\r\n        }\r\n        if (this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n            inputParam.inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.defaultregsubtype.item.napprovalconfigcode;\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n        this.props.mappingFieldConfigService(inputParam)\r\n    }\r\n\r\n    auditFieldConfiguration = (controlCode, operation) => {\r\n\r\n        //console.log(\"edit config:\", this.props.Login);\r\n        let ncontrolcode = controlCode;\r\n        let screenName = \"IDS_FIELDS\";\r\n        let inputParam = {\r\n            inputData: {\r\n                designtemplatemapping: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                },\r\n                nregtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters || \r\n                this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregtype\r\n                        ? this.props.Login.masterData.defaultregtype.value : -1,\r\n                nregsubtypecode: this.props.Login.masterData.realSampleValue.value === SampleType.Masters ||\r\n                this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN\r\n                    ? -1 : this.props.Login.masterData.defaultregsubtype\r\n                        ? this.props.Login.masterData.defaultregsubtype.value : -1,\r\n                //nregtypecode: this.props.Login.masterData.defaultregtype.value,\r\n                //nregsubtypecode: this.props.Login.masterData.defaultregsubtype.value,\r\n                userinfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.props.Login.masterData.defaultregsubtype && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample\r\n            },\r\n            operation,\r\n            ncontrolcode,\r\n            screenName\r\n        }\r\n        inputParam[\"SampleType\"] = this.props.Login.masterData.realSampleValue.value;\r\n\r\n        this.props.auditFieldConfigService(inputParam)\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.loadEsign) {\r\n            if (operation === \"configurechecklistadd\") {\r\n                selectedRecord = {}\r\n                loadEsign = false;\r\n                operation = \"configurechecklist\"\r\n            }\r\n            else if (operation === \"Approve\"\r\n                || operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? true : false;\r\n                selectedRecord = this.props.Login.masterData.realSampleValue && this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? this.state.selectedRecord : {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else if (operation === \"configurechecklistadd\") {\r\n            selectedRecord = {}\r\n            operation = \"configurechecklist\"\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { operation, openModal, loadEsign, selectedRecord, selectedId: null, dataList: [], dataListCount: [], dataListSubSample: [], dataListCountSubSample: [] }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, screenName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (screenName === \"Sample\") {\r\n            if (fieldName == \"Quantity\") {\r\n                selectedRecord[\"Quantity\"] = comboData;\r\n            } else {\r\n                selectedRecord[\"Unit\"] = comboData;\r\n            }\r\n        }\r\n        else if (screenName === \"SubSample\") {\r\n            if (fieldName == \"Quantity\") {\r\n                selectedRecord[\"SubQuantity\"] = comboData;\r\n            } else {\r\n                selectedRecord[\"SubUnit\"] = comboData;\r\n            }\r\n        }\r\n        else if(screenName === \"Masters\"){\r\n           selectedRecord[\"nnewmodule\"] = comboData;\r\n           selectedRecord[\"nmodulecode\"]= [];\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onConfigureComboChange = (comboData, formCode, item) => {\r\n        if (item === \"Quantity\") {\r\n            const fieldName = item;\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        } else if (item === \"Unit\") {\r\n            const fieldName = item;\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            const fieldName = item.label;\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[formCode] = { ...selectedRecord[formCode], [fieldName]: comboData };\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n        // let designData = this.props.Login.editFieldDesignData;\r\n        // let dataResult = this.props.Login.editFieldDataResult;\r\n        // if (formCode === undefined){\r\n        //     dataResult[dataIndex][field] = event.target.checked;\r\n        //     if (event.target.checked) {\r\n        //         designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n        //     } else {\r\n        //         designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     dataResult[formCode][\"sampleeditable\"] = comboData;\r\n        //     if (event.target.checked) {\r\n        //         if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n        //             return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n        //         } else {\r\n        //             designData[formCode][field].splice(dataIndex, 0, dataItem.realData)\r\n        //         }\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label)\r\n        //         }\r\n        //     } else {\r\n        //         if (field === 'sampledisplayfields') {\r\n        //             designData[formCode]['samplesearchfields'].splice(designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.label), 1)\r\n        //         }\r\n        //         designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n        //     }\r\n        // }\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { designData, dataResult }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            if (event.target.name === \"sviewname\") {\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validateCreateView(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                //  selectedRecord[event.target.name] =  event.target.value.replace(/[^a-z]/g, '');\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChangeForUnique = (event, radiotext, index, multilinguallabel, eventKey) => {\r\n        if (eventKey === \"subsample\") {\r\n            const dataList = this.props.Login.dataListSubSample || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataListSubSample: dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            const dataList = this.props.Login.dataList || []\r\n            if (dataList[index]) {\r\n                const value = dataList[index] && dataList[index][event.target.name];\r\n                if (value !== '' && value !== undefined) {\r\n                    delete dataList[index][event.target.name]\r\n                } else {\r\n\r\n                    dataList[index][event.target.name] = {\r\n                        [designProperties.LABEL]: { ...multilinguallabel },\r\n                        [designProperties.VALUE]: radiotext\r\n                    };\r\n                }\r\n            } else {\r\n                dataList[index] = {\r\n                    [event.target.name]: { [designProperties.LABEL]: { ...multilinguallabel }, [designProperties.VALUE]: radiotext }\r\n                }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { dataList }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    getGridJsondata = (templatedata, task) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let masterdatefields = [];\r\n        let masterdateconstraints = [];\r\n        let masteruniquevalidation = [];\r\n        let mastercombinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let mastertemplatefields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let sampleQuerybuilderViewCondition = [];\r\n        let sampleQuerybuilderViewSelect = [];\r\n        let templatemandatoryfields =[];\r\n        const masterexportfields = []\r\n        let deleteValidation = [];\r\n        let jsqlquerycolumns = [{\r\n            \"columnname\": \"ndynamicmastercode\",\r\n            \"displayname\": {\r\n                \"en-US\": \"DynamicMaster Code PK\",\r\n                \"ru-RU\": \"Код DynamicMaster ПК\",\r\n                \"tg-TG\": \"Рамзи DynamicMaster PK\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        },\r\n        {\r\n            \"columnname\": \"nstatus\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Status\",\r\n                \"ru-RU\": \"Статус\",\r\n                \"tg-TG\": \"Статус\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        }];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            if (componentRow.isExportField) {\r\n                                masterexportfields.push(componentRow)\r\n                            }\r\n\r\n                            if(componentRow.mandatory){\r\n                                templatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                                })\r\n                            }\r\n\r\n                            jsqlquerycolumns.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"isjsoncolumn\": true,\r\n                                \"columndatatype\": \"string\",\r\n                                \"jsoncolumnname\": \"jsonuidata\"\r\n                            })\r\n                            componentRow.unique && masteruniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && mastercombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                    \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": componentRow.label,\r\n                                    \"valuemember\": componentRow.valuemember,\r\n                                    \"displaymember\": componentRow.displaymember,\r\n                                    \"mastertablename\": componentRow.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"foreigntableformcode\": componentRow.table.item.nformcode,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.valuemember,\r\n                                    \"tablecolumnname\": componentRow.label,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    \"parentforeignPK\": componentRow.displaymember,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                masterdatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                masterdateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                                || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            }\r\n                            mastertemplatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if (component.isExportField) {\r\n                            masterexportfields.push(component)\r\n                        }\r\n\r\n                        if(component.mandatory){\r\n                            templatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                            })\r\n                        }\r\n\r\n                        component.unique && masteruniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && mastercombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                        jsqlquerycolumns.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": true,\r\n                            \"columndatatype\": \"string\",\r\n                            \"jsoncolumnname\": \"jsonuidata\"\r\n                        })\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        mastertemplatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                \"stranstableforeignkeyname\": component.valuemember,\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"foreigntableformcode\": component.table.item.nformcode,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.valuemember,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.label,\r\n                                \"foriegntablename\": component.source,\r\n                                \"parentforeignPK\": component.displaymember,\r\n                                ...comboDataInputObject\r\n                            })\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"viewvaluemember\": component.label,\r\n                                \"valuemember\": component.valuemember,\r\n                                \"displaymember\": component.displaymember,\r\n                                \"mastertablename\": component.source,\r\n                                \"needmasterdata\": true,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            masterdatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            masterdateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...masterdateconstraints] : masterdateconstraints;\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 2,\r\n                                \"columntypedesc\": \"datetime\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                            || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n        if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n\r\n            const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n            const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n            if (needsubsample) {\r\n                selectedSubSampleTemplate.map(row =>\r\n                    row.children && row.children.map(column => {\r\n                        column.children && column.children.map(component => {\r\n                            if (component.hasOwnProperty('children')) {\r\n                                component.children.map(componentRow => {\r\n\r\n\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                            \"stranstablename\": \"registrationsample\",\r\n                                            \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                            // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                            //\"nformcode\":componentRow.table.item.nformcode\r\n                                        });\r\n                                    }\r\n                                }\r\n                                )\r\n                            } else {\r\n\r\n\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.valuemember,\r\n                                        \"stranstablename\": \"registrationsample\",\r\n                                        \"stranstableforeignkeyname\": component.valuemember,\r\n                                        //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            masterdatefields,\r\n            masterdateconstraints,\r\n            masteruniquevalidation,\r\n            editable,\r\n            mastertemplatefields,\r\n            mastercombinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields,\r\n            masterexportfields,\r\n            templatemandatoryfields,\r\n        }\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey: \"ndynamicmastercode\", deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n    }\r\n\r\n    getGoodsInJsondata = (templatedata, task) => {\r\n        let gridItem = [];\r\n        let gridMoreItem = [];\r\n        let datefields = [];\r\n        let dateconstraints = [];\r\n        let uniquevalidation = [];\r\n        let combinationunique = [];\r\n        let editable = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let templatePrimaryKey = \"\";\r\n        let templatefields = [];\r\n        let nonmandatoryExportFields = [];\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let sampleQuerybuilderViewCondition = [];\r\n        let sampleQuerybuilderViewSelect = [];\r\n        let deleteValidation = [];\r\n        let exportFields =[];\r\n        let templatemandatoryfields =[];\r\n        let jsqlquerycolumns = [{\r\n            \"columnname\": \"ngoodsinsamplecode\",\r\n            \"displayname\": {\r\n                \"en-US\": \"GoodsIn Sample Code PK\",\r\n                \"ru-RU\": \"Товары в коде PK\",\r\n                \"tg-TG\": \"МолҳоДар Кодекси PK\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        },\r\n        {\r\n            \"columnname\": \"nstatus\",\r\n            \"displayname\": {\r\n                \"en-US\": \"Status\",\r\n                \"ru-RU\": \"Статус\",\r\n                \"tg-TG\": \"Статус\"\r\n            },\r\n            \"columndatatype\": \"numeric\"\r\n        }];\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map((component, index) => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            // if (componentRow.isExportField) {\r\n                            //     exportFields.push(componentRow)\r\n                            // }\r\n\r\n                            if(componentRow.mandatory === true){\r\n                               exportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }else {\r\n                                nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }\r\n\r\n\r\n                            if(componentRow.mandatory){\r\n                                templatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                                })\r\n                            }\r\n\r\n                            // if(componentRow.mandatory === false){\r\n                            //     nonmandatoryExportFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label });\r\n                            // }\r\n\r\n                            jsqlquerycolumns.push({\r\n                                \"columnname\": componentRow.label,\r\n                                \"displayname\": componentRow.displayname,\r\n                                \"isjsoncolumn\": true,\r\n                                \"columndatatype\": \"string\",\r\n                                \"jsoncolumnname\": \"jsonuidata\"\r\n                            })\r\n                            componentRow.unique && uniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && combinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n\r\n                            templatePrimaryKey = templatePrimaryKey === \"\" && componentRow.unique ? componentRow.label : templatePrimaryKey;\r\n\r\n                            let filterinputtype = \"text\";\r\n                            let comboDataInputObject = {};\r\n\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\r\n                                    \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"viewvaluemember\": componentRow.label,\r\n                                    \"valuemember\": componentRow.valuemember,\r\n                                    \"displaymember\": componentRow.displaymember,\r\n                                    \"mastertablename\": componentRow.source,\r\n                                    \"needmasterdata\": true,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'combo') {\r\n\r\n                                comboDataInputObject = {\r\n                                    \"predefinedtablename\": componentRow.source,\r\n                                    \"predefinedvaluemember\": componentRow.valuemember,\r\n                                    \"predefineddisplaymember\": componentRow.displaymember,\r\n                                    \"predefinedismultilingual\": componentRow.isMultiLingual ? componentRow.isMultiLingual : false,\r\n                                    \"predefinedconditionalString\": \"\\\"\" + componentRow.valuemember + \"\\\"\" + \" > '0' \"\r\n                                };\r\n                                jnumericcolumns.push({\r\n                                    \"columnname\": componentRow.displaymember,\r\n                                    \"foreigntableformcode\": componentRow.table.item.nformcode,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"foriegntablePK\": componentRow.valuemember,\r\n                                    \"tablecolumnname\": componentRow.label,\r\n                                    \"foriegntablename\": componentRow.source,\r\n                                    \"parentforeignPK\": componentRow.displaymember,\r\n                                    ...comboDataInputObject\r\n                                })\r\n                                filterinputtype = \"predefinednumeric\";\r\n                            }\r\n                            if (componentRow.inputtype === 'date') {\r\n                                filterinputtype = \"date\";\r\n                                datefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                dateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 2,\r\n                                    \"columntypedesc\": \"datetime\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n                            if (componentRow.inputtype === 'Numeric' || componentRow.inputtype === 'radio') {\r\n                                filterinputtype = \"numeric\";\r\n\r\n                                if (componentRow.inputtype === 'Numeric') {\r\n                                    sampleQuerybuilderViewCondition.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"columntype\": 5,\r\n                                        \"columntypedesc\": \"numericinput\",\r\n                                    })\r\n\r\n                                    sampleQuerybuilderViewSelect.push({\r\n                                        \"columnname\": componentRow.label,\r\n                                        \"displayname\": componentRow.displayname,\r\n                                        \"languagecode\": false\r\n                                    })\r\n                                }\r\n                            }\r\n\r\n                            if (componentRow.inputtype === 'textinput' || componentRow.inputtype === 'email'\r\n                                || componentRow.inputtype === 'textarea' || componentRow.inputtype === 'radio') {\r\n\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"columntype\": 1,\r\n                                    \"columntypedesc\": \"textinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": componentRow.label,\r\n                                    \"displayname\": componentRow.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n\r\n                            }\r\n\r\n                            jdynamiccolumns.push({\r\n                                default: componentRow.unique ? true : false,\r\n                                filterinputtype,\r\n                                columnname: componentRow.label,\r\n                                displayname: componentRow.displayname,\r\n                                ...comboDataInputObject\r\n                            })\r\n                            if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype })\r\n                                sampleAuditEditable.push(componentRow.label);\r\n                            }\r\n                            else {\r\n                                gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label,[designProperties.LISTITEM]: componentRow.inputtype });\r\n                            }\r\n                            templatefields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                            sampleAuditFields.push(componentRow.label);\r\n                            sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n\r\n                            if (componentRow.templatemandatory) {\r\n                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                            }\r\n                            else {\r\n                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.DRAFT] })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n\r\n                        // if (component.isExportField) {\r\n                        //     exportFields.push(component)\r\n                        // }\r\n\r\n                        if(component.mandatory === true){\r\n                           exportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype })\r\n                        }else{\r\n                            nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n\r\n                        }\r\n\r\n                        if(component.mandatory){\r\n                            templatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                            })\r\n                        }\r\n\r\n                        // if(component.mandatory === false){\r\n                        //     nonmandatoryExportFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label });\r\n                        // }\r\n\r\n\r\n                        component.unique && uniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && combinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        templatePrimaryKey = templatePrimaryKey === \"\" && component.unique ? component.label : templatePrimaryKey;\r\n                        jsqlquerycolumns.push({\r\n                            \"columnname\": component.label,\r\n                            \"displayname\": component.displayname,\r\n                            \"isjsoncolumn\": true,\r\n                            \"columndatatype\": \"string\",\r\n                            \"jsoncolumnname\": \"jsonuidata\"\r\n                        })\r\n\r\n                        let filterinputtype = \"text\";\r\n                        let comboDataInputObject = {};\r\n\r\n                        templatefields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label })\r\n                        sampleAuditFields.push(component.label);\r\n                        sampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? \"goodsinsample\" : \"registration\",\r\n                                \"stranstableforeignkeyname\": component.valuemember,\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN ? transactionStatus.YES : transactionStatus.NO,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n\r\n                        if (component.inputtype === 'combo') {\r\n                            filterinputtype = \"predefinednumeric\";\r\n                            comboDataInputObject = {\r\n                                \"predefinedtablename\": component.source,\r\n                                \"predefinedvaluemember\": component.valuemember,\r\n                                \"predefineddisplaymember\": component.displaymember,\r\n                                \"predefinedismultilingual\": component.isMultiLingual ? component.isMultiLingual : false,\r\n                                \"predefinedconditionalString\": \"\\\"\" + component.valuemember + \"\\\"\" + \" > '0'\"\r\n                            };\r\n                            jnumericcolumns.push({\r\n                                \"columnname\": component.label,\r\n                                \"foreigntableformcode\": component.table.item.nformcode,\r\n                                \"displayname\": component.displayname,\r\n                                \"foriegntablePK\": component.valuemember,\r\n                                // \"ismultilingual\": true,\r\n                                //\"conditionstring\": \" and nformcode in (\" + component.table.item.nformcode + \") \",\r\n                                \"tablecolumnname\": component.label,\r\n                                \"foriegntablename\": component.source,\r\n                                \"parentforeignPK\": component.displaymember,\r\n                                ...comboDataInputObject\r\n                            })\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"viewvaluemember\": component.label,\r\n                                \"valuemember\": component.valuemember,\r\n                                \"displaymember\": component.displaymember,\r\n                                \"mastertablename\": component.source,\r\n                                \"needmasterdata\": true,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'date') {\r\n                            filterinputtype = \"date\";\r\n                            datefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            dateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...dateconstraints] : dateconstraints;\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 2,\r\n                                \"columntypedesc\": \"datetime\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n                        }\r\n                        if (component.inputtype === 'Numeric' || component.inputtype === 'radio') {\r\n                            filterinputtype = \"numeric\";\r\n\r\n                            if (component.inputtype === 'Numeric') {\r\n                                sampleQuerybuilderViewCondition.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"columntype\": 5,\r\n                                    \"columntypedesc\": \"numericinput\",\r\n                                })\r\n\r\n                                sampleQuerybuilderViewSelect.push({\r\n                                    \"columnname\": component.label,\r\n                                    \"displayname\": component.displayname,\r\n                                    \"languagecode\": false\r\n                                })\r\n                            }\r\n                        }\r\n\r\n                        if (component.inputtype === 'textinput' || component.inputtype === 'email'\r\n                            || component.inputtype === 'textarea' || component.inputtype === 'radio') {\r\n\r\n                            sampleQuerybuilderViewCondition.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"columntype\": 1,\r\n                                \"columntypedesc\": \"textinput\",\r\n                            })\r\n\r\n                            sampleQuerybuilderViewSelect.push({\r\n                                \"columnname\": component.label,\r\n                                \"displayname\": component.displayname,\r\n                                \"languagecode\": false\r\n                            })\r\n\r\n                        }\r\n\r\n                        jdynamiccolumns.push({\r\n                            default: component.unique ? true : false,\r\n                            columnname: component.label,\r\n                            displayname: component.displayname,\r\n                            filterinputtype,\r\n                            ...comboDataInputObject\r\n                        });\r\n\r\n                        if (component.mandatory || component.templatemandatory) {\r\n                            gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype })\r\n                            sampleAuditEditable.push(component.label);\r\n                        } else {\r\n                            gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label,[designProperties.LISTITEM]: component.inputtype });\r\n                        }\r\n                        if (component.templatemandatory) {\r\n                            editable.push({ label: component.label, editableuntill: [] });\r\n\r\n                        }\r\n                        else {\r\n                            editable.push({ label: component.label, editableuntill: [transactionStatus.DRAFT] })\r\n                        }\r\n                        return null;\r\n                    }\r\n\r\n                })\r\n            })\r\n        );\r\n\r\n        if (task === \"DeleteValidation\" && this.props.Login.masterData.realSampleValue.value !== SampleType.Masters) {\r\n\r\n            const selectedSubSampleTemplate = this.props.Login.masterData.selectedDesignTemplateMapping.subsamplejsondata;\r\n\r\n            const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n            if (needsubsample) {\r\n                selectedSubSampleTemplate.map(row =>\r\n                    row.children && row.children.map(column => {\r\n                        column.children && column.children.map(component => {\r\n                            if (component.hasOwnProperty('children')) {\r\n                                component.children.map(componentRow => {\r\n\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.valuemember,\r\n                                            \"stranstablename\": \"registrationsample\",\r\n                                            \"stranstableforeignkeyname\": componentRow.valuemember,\r\n                                            // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                            //\"nformcode\":componentRow.table.item.nformcode\r\n                                        });\r\n                                    }\r\n                                }\r\n                                )\r\n                            } else {\r\n\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.valuemember,\r\n                                        \"stranstablename\": \"registrationsample\",\r\n                                        \"stranstableforeignkeyname\": component.valuemember,\r\n                                        //\"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n        let jsondata = {\r\n            griditem: gridItem,\r\n            gridmoreitem: gridMoreItem,\r\n            datefields,\r\n            dateconstraints,\r\n            uniquevalidation,\r\n            editable,\r\n            templatefields,\r\n            combinationunique,\r\n            sampleAuditFields,\r\n            sampleAuditEditable,\r\n            sampleAuditMultilingualFields,\r\n            exportFields,\r\n            nonmandatoryExportFields,\r\n            templatemandatoryfields,\r\n        }\r\n        return { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey: \"ngoodsinsamplecode\", deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n    }\r\n\r\n    getJsondata = (templatedata) => {\r\n        //let displayFields = [];\r\n        //ALPD-533\r\n        let displayFields = [{\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL },\r\n            [designProperties.VALUE]: 'sarno'\r\n        }];\r\n        let listItem = []\r\n        // let gridItem = [];\r\n        let gridItem = [{\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL }, \r\n            [designProperties.VALUE]: \"sarno\"\r\n        }];\r\n        let gridMoreItem = []\r\n        let editable = []\r\n        let subsampleeditable = [];\r\n        let subsamplelistitem = [];\r\n        let sampledatefields = [{ [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        let sampledateconstraints = [];\r\n        let subsampledatefields = [];\r\n        let subsampledateconstraints = [];\r\n        let samplesearchfields = [\"dregdate\", \"sarno\", \"stransdisplaystatus\", \"sspecname\"];\r\n        let subsamplesearchfields = [\"sarno\", \"ssamplearno\", \"stransdisplaystatus\"];\r\n        let sampletemplatefields = [];\r\n        let subsampletemplatefields = [];\r\n        let sampleuniquevalidation = [];\r\n        let subsampleuniquevalidation = [];\r\n        let jdynamiccolumns = [];\r\n        let jnumericcolumns = [];\r\n        let samplecombinationunique = [];\r\n        let subsamplecombinationunique = [];\r\n\r\n        let sampleAuditFields = [];\r\n        let sampleAuditEditable = [];\r\n        let sampleAuditMultilingualFields = [];\r\n        let subSampleAuditFields = [];\r\n        let subSampleAuditEditable = [];\r\n        let subSampleAuditMultilingualFields = [];\r\n        let deleteValidation = [];\r\n        let sampletemplatemandatoryfields = [];\r\n        let subsampletemplatemandatoryfields = [];\r\n\r\n        const sampleExportFields = []\r\n        const subSampleExportFields = []\r\n        const sampletemplatemandatory = []\r\n\r\n        //if(this.props.Login.masterData.realSampleValue.value !== SampleType.Masters){        \r\n\r\n        sampleAuditFields = [\"sarno\"];\r\n        sampleAuditEditable = [\"sarno\"];\r\n        sampleAuditMultilingualFields = [{\r\n            \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL } \r\n        }];\r\n        subSampleAuditFields = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditEditable = [\"sarno\", \"ssamplearno\"];\r\n        subSampleAuditMultilingualFields = [{\r\n            \"sarno\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n            //{ ...ARNOMULTILINGUAL } \r\n        },\r\n        {\r\n            \"ssamplearno\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"]//{ ...SUBARNOMULTILINGUAL } \r\n        }];\r\n        //}\r\n\r\n        ////////////////////////////////////////////\r\n        // let sampleAuditFields = SAMPLEAUDITFIELDS;\r\n        // let sampleAuditEditable = SAMPLEAUDITEDITABLE\r\n        // let sampleAuditMultilingualFields = SAMPLEAUDITMULTILINGUALFIELDS\r\n        // let subSampleAuditFields = SUBSAMPLEAUDITFIELDS\r\n        // let subSampleAuditEditable = SUBSAMPLEAUDITEDITABLE\r\n        // let subSampleAuditMultilingualFields = SUBSAMPLEAUDITMULTILINGUALFIELDS;\r\n\r\n        let testdatefields = [{ [designProperties.VALUE]: 'dtransactiondate', dateonly: false },\r\n        { [designProperties.VALUE]: 'dregdate', dateonly: false }];\r\n        //console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n        this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.item.jsondata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n                    if (component.hasOwnProperty('children')) {\r\n                        component.children.map(componentRow => {\r\n\r\n                            if (componentRow.isExportField) {\r\n                                subSampleExportFields.push(componentRow.label)\r\n                            }\r\n\r\n\r\n\r\n                            componentRow.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                            componentRow.unique && subsamplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                            subsamplesearchfields.push(componentRow.label);\r\n\r\n                            subsampletemplatefields.push({\r\n                                [designProperties.LABEL]: componentRow.displayname,\r\n                                [designProperties.VALUE]: componentRow.label,\r\n                                [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                            })\r\n                            if(componentRow.mandatory){\r\n                                subsampletemplatemandatoryfields.push({\r\n                                    [designProperties.LABEL]: componentRow.displayname,\r\n                                    [designProperties.VALUE]: componentRow.label,\r\n                            })\r\n                        }\r\n                            if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                deleteValidation.push({\r\n                                    \"smastertablename\": componentRow.table.item.stablename,\r\n                                    \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                    \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                    \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                    \"sjsonfieldname\": \"jsondata\",\r\n                                    \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                    \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                });\r\n                            }\r\n                            subSampleAuditFields.push(componentRow.label);\r\n                            subSampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n\r\n                            if (componentRow.mandatory) {\r\n                                subSampleAuditEditable.push(componentRow.label);\r\n                            }\r\n\r\n                            if (componentRow.readonly)\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [] })\r\n                            else\r\n                                subsampleeditable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                            if (componentRow.inputtype === 'date') {\r\n                                subsampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                subsampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                            }\r\n                            subsamplelistitem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype })\r\n                        }\r\n                        )\r\n                    } else {\r\n\r\n                        if (component.templatemandatory) {\r\n                            sampletemplatemandatory.push(component.label)\r\n                        }\r\n                        if (component.isExportField) {\r\n                            subSampleExportFields.push(component.label)\r\n                        }\r\n                        component.unique && subsampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                        component.unique && subsamplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n                        subsamplesearchfields.push(component.label);\r\n\r\n                        subsampletemplatefields.push({\r\n                            [designProperties.LABEL]: component.displayname,\r\n                            [designProperties.VALUE]: component.label,\r\n                            [designProperties.PRIMARYKEY]: component.valuemember,\r\n                            [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                        })\r\n                        if(component.mandatory){\r\n                            subsampletemplatemandatoryfields.push({\r\n                                [designProperties.LABEL]: component.displayname,\r\n                                [designProperties.VALUE]: component.label,\r\n                        })\r\n                    }\r\n\r\n                        if (component.componentcode === designComponents.COMBOBOX) {\r\n                            deleteValidation.push({\r\n                                \"smastertablename\": component.table.item.stablename,\r\n                                \"smasterprimarykeyname\": component.table.valuemember,\r\n                                \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registrationsample\",\r\n                                \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                // \"salertmessage\":\"IDS_REGISTRATIONSAMPLE\",\t\r\n                                \"sjsonfieldname\": \"jsondata\",\r\n                                \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                //\"nformcode\":component.table.item.nformcode,\r\n                                \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                            });\r\n                        }\r\n                        subSampleAuditFields.push(component.label);\r\n                        subSampleAuditMultilingualFields.push({ [component.label]: component.displayname });\r\n\r\n                        if (component.mandatory) {\r\n                            subSampleAuditEditable.push(component.label);\r\n                        }\r\n                        if (component.readonly)\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [] })\r\n                        else\r\n                            subsampleeditable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                        if (component.inputtype === 'date') {\r\n                            subsampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                            subsampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...subsampledateconstraints] : subsampledateconstraints;\r\n                        }\r\n                        subsamplelistitem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n                    }\r\n                })\r\n            })\r\n        )\r\n        templatedata && templatedata.map(row =>\r\n            row.children && row.children.map(column => {\r\n                column.children && column.children.map(component => {\r\n\r\n\r\n                    if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                        if (component.hasOwnProperty('children')) {\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                // let combinedField = [];\r\n                                component.children.map(componentRow => {\r\n\r\n                                    if (componentRow.templatemandatory) {\r\n                                        sampletemplatemandatory.push(componentRow.label)\r\n                                    }\r\n\r\n\r\n                                    if (componentRow.isExportField) {\r\n                                        sampleExportFields.push(componentRow.label)\r\n                                    }\r\n                                    // combinedField.push(componentRow.label)\r\n                                    jdynamiccolumns.push({\r\n                                        columnname: componentRow.label,\r\n                                        displayname: componentRow.displayname\r\n                                    })\r\n                                    if (componentRow.hasOwnProperty('child')) {\r\n                                        componentRow.child.map(childData => {\r\n                                            jnumericcolumns.push({\r\n                                                \"columnname\": componentRow.label,\r\n                                                \"displayname\": componentRow.displayname,\r\n                                                \"foriegntablePK\": componentRow.label,\r\n                                                // \"ismultilingual\": true,\r\n                                                // \"conditionstring\": \" and nformcode in (140) \",\r\n                                                \"tablecolumnname\": childData.tablecolumnname,\r\n                                                \"foriegntablename\": \"dynamicmaster\"\r\n                                            })\r\n                                        })\r\n                                    }\r\n                                    if (componentRow.componentcode === designComponents.COMBOBOX) {\r\n                                        deleteValidation.push({\r\n                                            \"smastertablename\": componentRow.table.item.stablename,\r\n                                            \"smasterprimarykeyname\": componentRow.table.valuemember,\r\n                                            \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                            \"stranstableforeignkeyname\": componentRow.table.valuemember,\r\n                                            //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                            \"sjsonfieldname\": \"jsondata\",\r\n                                            \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                            //\"nformcode\":componentRow.table.item.nformcode,\r\n                                            \"nquerybuildertablecode\": componentRow.nquerybuildertablecode\r\n                                        });\r\n                                    }\r\n                                    componentRow.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: componentRow.label });\r\n                                    componentRow.unique && samplecombinationunique.push({ [componentRow.label]: { [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label } })\r\n                                    if (componentRow.name === undefined || componentRow.name !== 'manualsampleid') {\r\n                                        samplesearchfields.push(componentRow.label)\r\n                                        sampletemplatefields.push({\r\n                                            [designProperties.LABEL]: componentRow.displayname,\r\n                                            [designProperties.VALUE]: componentRow.label,\r\n                                            [designProperties.PRIMARYKEY]: componentRow.valuemember,\r\n                                            [designProperties.QUERYBUILDERTABLECODE]: componentRow.nquerybuildertablecode\r\n                                        })\r\n                                        if(componentRow.mandatory){\r\n                                            sampletemplatemandatoryfields.push({\r\n                                                [designProperties.LABEL]: componentRow.displayname,\r\n                                                [designProperties.VALUE]: componentRow.label,\r\n                                            })\r\n                                        }\r\n                                        displayFields.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype });\r\n\r\n                                        componentRow.templatemandatory && listItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype })\r\n\r\n\r\n                                        if (componentRow.mandatory || componentRow.templatemandatory) {\r\n                                            gridItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label })\r\n                                            sampleAuditEditable.push(componentRow.label);\r\n                                        }\r\n                                        else {\r\n                                            gridMoreItem.push({ [designProperties.LABEL]: componentRow.displayname, [designProperties.VALUE]: componentRow.label, [designProperties.LISTITEM]: componentRow.inputtype });\r\n                                        }\r\n                                        if (componentRow.templatemandatory) {\r\n                                            editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                        }\r\n                                        else {\r\n                                            if (componentRow.readonly)\r\n                                                editable.push({ label: componentRow.label, editableuntill: [] })\r\n                                            else\r\n                                                editable.push({ label: componentRow.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                        }\r\n                                    }\r\n\r\n                                    sampleAuditFields.push(componentRow.label);\r\n                                    sampleAuditMultilingualFields.push({ [componentRow.label]: componentRow.displayname });\r\n                                    if (componentRow.inputtype === 'date') {\r\n                                        sampledatefields.push({ [designProperties.VALUE]: componentRow.label, dateonly: componentRow.dateonly || false });\r\n                                        sampledateconstraints = componentRow.dateConstraintArraySQL ? [...componentRow.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                    }\r\n\r\n\r\n\r\n\r\n                                    return null;\r\n                                })\r\n                                // let fieldSet = combinedField.join(\"&\")\r\n                                // displayFields.push(fieldSet);\r\n                                // componentRow.templatemandatory && listItem.push(fieldSet)\r\n                                // gridMoreItem.push(fieldSet);\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n\r\n\r\n                            if (component.templatemandatory) {\r\n                                sampletemplatemandatory.push(component.label)\r\n                            }\r\n                            if (component.isExportField) {\r\n                                sampleExportFields.push(component.label)\r\n                            }\r\n                            if (component.inputtype !== 'frontendsearchfilter' && component.inputtype !== 'backendsearchfilter') {\r\n                                //console.log(\"componentRow main:\", component);\r\n                                jdynamiccolumns.push({\r\n                                    columnname: component.label,\r\n                                    displayname: component.displayname\r\n                                });\r\n                                if (component.componentcode === designComponents.COMBOBOX) {\r\n                                    deleteValidation.push({\r\n                                        \"smastertablename\": component.table.item.stablename,\r\n                                        \"smasterprimarykeyname\": component.table.valuemember,\r\n                                        \"stranstablename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? \"dynamicmaster\" : \"registration\",\r\n                                        \"stranstableforeignkeyname\": component.table.valuemember,\r\n                                        //\"salertmessage\":this.props.Login.masterData.realSampleValue.value === SampleType.Masters? \"IDS_DYNAMICMASTER\" :\"IDS_REGISTRATION\",\t\r\n                                        \"sjsonfieldname\": \"jsondata\",\r\n                                        \"nisdynamicmaster\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters ? transactionStatus.YES : transactionStatus.NO,\r\n                                        //\"nformcode\":component.table.item.nformcode,\r\n                                        \"nquerybuildertablecode\": component.nquerybuildertablecode\r\n                                    });\r\n                                }\r\n                                if (component.hasOwnProperty('child')) {\r\n                                    component.child.map(childData => {\r\n                                        jnumericcolumns.push({\r\n                                            \"columnname\": component.label,\r\n                                            \"displayname\": component.displayname,\r\n                                            \"foriegntablePK\": component.label,\r\n                                            // \"ismultilingual\": true,\r\n                                            // \"conditionstring\": \" and nformcode in (140) \",\r\n                                            \"tablecolumnname\": childData.tablecolumnname,\r\n                                            \"foriegntablename\": \"dynamicmaster\"\r\n                                        })\r\n                                    })\r\n                                }\r\n                                component.unique && sampleuniquevalidation.push({ [designProperties.LABEL]: component.label });\r\n                                component.unique && samplecombinationunique.push({ [component.label]: { [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label } })\r\n\r\n\r\n\r\n                                if (component.name === undefined || component.name !== 'manualsampleid') {\r\n\r\n                                    samplesearchfields.push(component.label)\r\n                                    sampletemplatefields.push({\r\n                                        [designProperties.LABEL]: component.displayname,\r\n                                        [designProperties.VALUE]: component.label,\r\n                                        [designProperties.PRIMARYKEY]: component.valuemember,\r\n                                        [designProperties.QUERYBUILDERTABLECODE]: component.nquerybuildertablecode\r\n                                    })\r\n                                    if(component.mandatory){\r\n                                        sampletemplatemandatoryfields.push({\r\n                                            [designProperties.LABEL]: component.displayname,\r\n                                            [designProperties.VALUE]: component.label,\r\n                                        })\r\n                                    }\r\n\r\n                                    displayFields.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype })\r\n                                    if (component.mandatory || component.templatemandatory) {\r\n                                        gridItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype })\r\n                                        listItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype, mandatory: true })\r\n                                        sampleAuditEditable.push(component.label);\r\n                                    } else {\r\n                                        gridMoreItem.push({ [designProperties.LABEL]: component.displayname, [designProperties.VALUE]: component.label, [designProperties.LISTITEM]: component.inputtype });\r\n                                    }\r\n                                    if (component.templatemandatory) {\r\n                                        editable.push({ label: component.label, editableuntill: [] })\r\n                                    }\r\n                                    else {\r\n                                        // editable.push({ label: component.label, editableuntill: [17] })\r\n                                        if (component.readonly)\r\n                                            editable.push({ label: component.label, editableuntill: [] })\r\n                                        else\r\n                                            editable.push({ label: component.label, editableuntill: [transactionStatus.PREREGISTER] })\r\n\r\n                                    }\r\n\r\n                                }\r\n                                sampleAuditFields.push(component.label);\r\n                                sampleAuditMultilingualFields.push({ [component.label]: component.displayname })\r\n                                if (component.inputtype === 'date') {\r\n                                    sampledatefields.push({ [designProperties.VALUE]: component.label, dateonly: component.dateonly || false });\r\n                                    sampledateconstraints = component.dateConstraintArraySQL ? [...component.dateConstraintArraySQL, ...sampledateconstraints] : sampledateconstraints;\r\n                                }\r\n\r\n                                return null;\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n            )\r\n        )\r\n\r\n        displayFields.push({\r\n            [designProperties.LABEL]: this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\r\n            [designProperties.VALUE]: 'dregdate'\r\n        });\r\n        const testListFields = { ...this.props.Login.testListFields };\r\n\r\n        let obj = {\r\n            sampledisplayfields: displayFields,\r\n            samplelistitem: listItem,\r\n            samplegriditem: gridItem,\r\n            samplegridmoreitem: gridMoreItem,\r\n            subsamplelistitem,\r\n            sampledatefields,\r\n            subsampledatefields,\r\n            samplesearchfields,\r\n            subsamplesearchfields,\r\n            testdatefields,\r\n            sampledateconstraints,\r\n            subsampledateconstraints,\r\n            samplecombinationunique,\r\n            testListFields,\r\n            deleteValidation\r\n        }\r\n\r\n\r\n        sampleAuditFields.push(\"dregdate\", \"stransdisplaystatus\");\r\n        sampleAuditEditable.push(\"stransdisplaystatus\");\r\n        subSampleAuditFields.push(\"stransdisplaystatus\");\r\n        subSampleAuditEditable.push(\"stransdisplaystatus\");\r\n        sampleAuditMultilingualFields.push({ \"dregdate\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"] },\r\n            { \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"] });\r\n        subSampleAuditMultilingualFields.push({\r\n            \"stransdisplaystatus\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"]//{ \"en-US\": \"Transaction Status\", \"ru-RU\": \"Статус транзакции\", \"tg-TG\": \"Ҳолати транзаксия\" } \r\n        });\r\n\r\n\r\n        const SAMPLETEMPLATEFIELDS = [\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"sarno\"\r\n            },\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"Specification\"] && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"sspecname\"\r\n            },\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"RegistrationDate\"] && this.props.Login.genericLabel[\"RegistrationDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"dregdate\"\r\n            },\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"stransdisplaystatus\"\r\n            }\r\n        ];\r\n\r\n        const SUBSAMPLETEMPLATEFIELDS = [\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"ARNo\"] && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"sarno\"\r\n            },\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"SubARNo\"] && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"ssamplearno\"\r\n            },\r\n            {\r\n                \"1\": this.props.Login.genericLabel[\"TransactionStatus\"] && this.props.Login.genericLabel[\"TransactionStatus\"][\"jsondata\"][\"sdisplayname\"],\r\n                \"2\": \"stransdisplaystatus\"\r\n            },\r\n        ];\r\n\r\n        let jsondata = {\r\n\r\n            subsamplecombinationunique,\r\n            samplecombinationunique,\r\n            sampletemplatefields: [...SAMPLETEMPLATEFIELDS, ...sampletemplatefields],\r\n            sampletemplatemandatoryfields:[...SAMPLETEMPLATEFIELDS, ...sampletemplatemandatoryfields],\r\n            subsampletemplatefields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatefields],//: subsamplesearchfields,\r\n            subsampletemplatemandatoryfields: [...SUBSAMPLETEMPLATEFIELDS, ...subsampletemplatemandatoryfields],\r\n            [formCode.SAMPLEREGISTRATION]: {\r\n                ...obj,\r\n                sampleeditable: editable,\r\n                subsampleeditable,\r\n                samplecombinationunique,\r\n                subsamplecombinationunique,\r\n                sampleExportFields,\r\n                subSampleExportFields,\r\n\r\n            },\r\n            [formCode.RESULTENTRY]: { ...obj, },\r\n            [formCode.APPROVAL]: { ...obj, },\r\n            [formCode.JOBALLOCATION]: {\r\n                ...obj,\r\n                samplegriditem: [\r\n                    ...obj.samplegriditem,\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Section\"\r\n                    },\r\n                ],\r\n                samplesearchfields: [\r\n                    ...obj.samplesearchfields,\r\n                    \"Section\"\r\n                ],\r\n                subsamplesearchfields: [\r\n                    ...obj.subsamplesearchfields,\r\n                    \"ssectionname\"\r\n                ],    \r\n\r\n                testgriditem: [\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"TestSynonym\"] && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"stestsynonym\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel[\"Section\"] && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"Technique\"] && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Technique\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel[\"Users\"] && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Users\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentCategory\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Instrument\"\r\n                    }\r\n                ],\r\n                samplelistitem: [\r\n                    ...obj.samplelistitem,\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Section\"\r\n                    },\r\n                ],\r\n                subsamplelistitem: [\r\n                    ...obj.subsamplelistitem,\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                ],\r\n                testdisplayfields: [\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"TestSynonym\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"stestsynonym\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Section\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"ssectionname\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Technique\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Technique\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Users\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Users\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentCategory\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentCategory\"\r\n                    },\r\n                    {\r\n\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Instrument\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Instrument\"\r\n                    }\r\n                ],\r\n                testgridmoreitem: [\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserStartDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserStartDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserEndDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserEndDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"UserDuration\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"UserDuration\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentStartDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentStartDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentEndDate\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentEndDate\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"InstrumentDuration\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"InstrumentDuration\"\r\n                    },\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Comments\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"Comments\"\r\n                    }\r\n                ]\r\n\r\n            },\r\n            [formCode.MYJOBS]: { ...obj, },\r\n            [formCode.WORKLIST]: { ...obj, },\r\n            [formCode.BATCHCREATION]: {\r\n\r\n                samplegriditem: [\r\n                    {\r\n                        \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                        \"2\": \"sarno\"\r\n                    },\r\n                    ...obj.samplegriditem,\r\n\r\n                ],\r\n\r\n                subsamplelistitem: [{\r\n                    \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem,\r\n                ],\r\n                ...obj,\r\n            },\r\n            [formCode.TESTWISEMYJOBS]: { ...obj, },\r\n            [formCode.RELEASE]: {\r\n                ...obj,\r\n                subsamplelistitem: [{\r\n                    \"1\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"],\r\n                    \"2\": \"ssamplearno\"\r\n                },\r\n                ...obj.subsamplelistitem]\r\n\r\n            },\r\n            sampleAuditEditable,\r\n            sampleAuditFields,\r\n            sampleAuditMultilingualFields,\r\n            subSampleAuditEditable,\r\n            subSampleAuditFields,\r\n            subSampleAuditMultilingualFields,\r\n            deleteValidation,\r\n            sampletemplatemandatory\r\n        }\r\n        return jsondata;\r\n    }\r\n\r\n\r\n    onChangeToggle = (event, dataItem, field, dataIndex, formCode, operation) => {\r\n\r\n        let designData = this.props.Login.designData;\r\n        let dataResult = this.props.Login.dataResult;\r\n        if (operation === 'configureaudit') {\r\n            designData = this.props.Login.auditFieldDesignData;\r\n            dataResult = this.props.Login.auditFieldDataResult;\r\n        }\r\n\r\n        let tableName = \"registration\";\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            tableName = \"dynamicmaster\";\r\n        }\r\n\r\n        if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\r\n            tableName = \"goodsinsample\"\r\n        }\r\n\r\n        if (formCode === undefined) {\r\n            dataResult[dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                designData[field].splice(dataIndex, 0, dataItem.realData)\r\n\r\n            } else {\r\n                designData[field].splice(designData[field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n            }\r\n        }\r\n        else {\r\n            //dataResult[formCode][dataIndex][field] = event.target.checked;\r\n            if (event.target.checked) {\r\n                if (field === 'samplelistitem' && designData[formCode][field].length >= 6) {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_MAXIMUMSELECTIONEXCEEDS\" }))\r\n                }\r\n                else {\r\n\r\n                    if (field === 'sampledisplayfields') {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode]['samplesearchfields'].splice(dataIndex, 0, dataItem.label);\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                    }\r\n                    else if (field === 'sampleauditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'sampleauditeditfields') {\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode][tableName]['sampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode][tableName][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode][tableName]['sampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode][tableName]['sampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode][tableName]['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                            designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                        }\r\n                    }\r\n                    else if (field === 'subsampleauditeditfields') {\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditfields\"] = event.target.checked;\r\n                        dataResult[formCode]['registrationsample'][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                        if (designData[formCode]['registrationsample']['subsampleauditeditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n\r\n                            designData[formCode]['registrationsample'][field].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                            if (designData[formCode]['registrationsample']['subsampleauditfields'].indexOf(dataItem.realData[designProperties.VALUE]) === -1) {\r\n                                designData[formCode]['registrationsample']['subsampleauditfields'].splice(dataIndex, 0, dataItem.realData[designProperties.VALUE]);\r\n                                designData[formCode]['registrationsample']['multilingualfields'].splice(dataIndex, 0, { [dataItem.realData[designProperties.VALUE]]: dataItem.realData[designProperties.LABEL] });\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                        designData[formCode][field].splice(dataIndex, 0, dataItem.realData);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n                if (field === 'sampledisplayfields') {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.label), 1)\r\n\r\n                    const index = designData[formCode]['samplesearchfields'].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index !== -1) {\r\n                        designData[formCode]['samplesearchfields'].splice(index, 1)\r\n                    }\r\n                }\r\n                else if (field === 'sampleauditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index !== -1) {\r\n                        designData[formCode][tableName][field].splice(index, 1);\r\n                    }\r\n\r\n                    const index1 = designData[formCode][tableName]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][tableName]['multilingualfields'].splice(index1, 1);\r\n                    }\r\n\r\n                    const index3 = designData[formCode][tableName][\"sampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][tableName][\"sampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][tableName][dataIndex][\"sampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'sampleauditeditfields') {\r\n                    dataResult[formCode][tableName][dataIndex][field] = event.target.checked;\r\n                    const index4 = designData[formCode][tableName][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index4 !== -1) {\r\n                        designData[formCode][tableName][field].splice(index4, 1);\r\n                    }\r\n                }\r\n                else if (field === 'subsampleauditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1)\r\n                    }\r\n\r\n                    const index2 = designData[formCode][\"registrationsample\"]['multilingualfields'].map(object => Object.keys(object)[0]).indexOf(dataItem.label);\r\n                    if (index2 !== -1) {\r\n                        designData[formCode][\"registrationsample\"]['multilingualfields'].splice(index2, 1);\r\n                    }\r\n                    const index3 = designData[formCode]['registrationsample'][\"subsampleauditeditfields\"].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index3 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][\"subsampleauditeditfields\"].splice(index3, 1)\r\n                    }\r\n                    dataResult[formCode][\"registrationsample\"][dataIndex][\"subsampleauditeditfields\"] = event.target.checked;\r\n                }\r\n                else if (field === 'subsampleauditeditfields') {\r\n                    dataResult[formCode]['registrationsample'][dataIndex][field] = event.target.checked;\r\n                    const index1 = designData[formCode]['registrationsample'][field].findIndex(x => x === dataItem.realData[designProperties.VALUE]);\r\n                    if (index1 !== -1) {\r\n                        designData[formCode][\"registrationsample\"][field].splice(index1, 1);\r\n                    }\r\n                }\r\n                else {\r\n                    dataResult[formCode][dataIndex][field] = event.target.checked;\r\n                    designData[formCode][field].splice(designData[formCode][field].findIndex(x => x[designProperties.VALUE] === dataItem.realData[designProperties.VALUE]), 1)\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        let data = { designData, dataResult };\r\n        if (operation === 'configureaudit') {\r\n            data = {\r\n                auditFieldDesignData: designData,\r\n                auditFieldDataResult: dataResult\r\n            };\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { ...data }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    onApproveSaveClick = () => {\r\n        this.onApproveClick()\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        // console.log(\"save:\", this.props.Login.masterData.realRegSubTypeValue);\r\n        //console.log(\"data:\", this.props.Login.editFieldDesignData)\r\n        let inputData = [];\r\n\r\n        let operation = this.props.Login.operation;\r\n        //const needsubsample = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n        const needsubsample = this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? false \r\n        : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false;\r\n\r\n        if (operation === 'Approve') {\r\n            this.onApproveClick()\r\n        } \r\n        else if (operation === 'configureunique') {\r\n            this.configureunique()}\r\n            else {\r\n            if (operation === 'configure' || operation === 'configuresubsample') {\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: this.props.Login.designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n                operation = 'configure'\r\n            }\r\n            else if (operation === 'configureedit' || operation === 'configuresubsampleedit') {\r\n\r\n                let designData = this.props.Login.editFieldDesignData;\r\n                let formCodeArray = Object.keys(this.state.selectedRecord);\r\n\r\n                formCodeArray.forEach(formCode => {\r\n                    const data = this.state.selectedRecord[formCode];\r\n\r\n                    let editableData = designData[formCode]['sampleeditable'];;\r\n                    if (operation === 'configuresubsampleedit') {\r\n                        editableData = designData[formCode]['subsampleeditable'];;\r\n                    }\r\n\r\n                    Object.keys(data).map(label => {\r\n                        const editableuntil = [];\r\n                        data[label].map(statusItem =>\r\n                            editableuntil.push(statusItem.value)\r\n                        )\r\n                        const index = editableData.findIndex(item => item.label === label);\r\n                        if (index === -1) {\r\n                            editableData.push({ \"label\": label, \"editableuntill\": editableuntil });\r\n                        }\r\n                        else {\r\n                            editableData[index] = { \"label\": label, \"editableuntill\": editableuntil };\r\n                        }\r\n                        //designData[formCode]['sampleeditable'].push({\"label\":label, \"editableuntill\":editableuntil});\r\n                    })\r\n\r\n                })\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                operation = 'configure';\r\n            }\r\n            // else if (operation === 'configureunique') {\r\n            //     let designData = this.props.Login.designData;\r\n            //     //  let formCodeArray = Object.keys(this.state.selectedRecord);\r\n            //     const dataList = []\r\n            //     const dataListsubsample = []\r\n            //     this.props.Login.dataList.map(x => {\r\n            //         if (Object.keys(x).length !== 0) {\r\n            //             dataList.push(x);\r\n            //         }\r\n            //     })\r\n            //     if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n            //         designData['mastercombinationunique'] = dataList\r\n            //     }else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\r\n            //         designData['combinationunique'] = dataList\r\n            //     } \r\n            //     else {\r\n            //         designData['samplecombinationunique'] = dataList\r\n            //         designData[formCode.SAMPLEREGISTRATION]['samplecombinationunique'] = dataList\r\n            //         this.props.Login.dataListSubSample.map(x => {\r\n            //             if (Object.keys(x).length !== 0) {\r\n            //                 dataListsubsample.push(x);\r\n            //             }\r\n            //         })\r\n            //         designData['subsamplecombinationunique'] = dataListsubsample\r\n            //         designData[formCode.SAMPLEREGISTRATION]['subsamplecombinationunique'] = dataListsubsample\r\n            //     }\r\n\r\n\r\n\r\n            //     inputData = {\r\n            //         designtemplatemapping: {\r\n            //             ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n            //             jsondataobj: designData\r\n            //         },\r\n            //         userinfo: this.props.Login.userInfo\r\n            //     }\r\n\r\n            //     operation = 'configure';\r\n            // }\r\n            else if (operation === 'configureexportfields') {\r\n                let designData = this.props.Login.designData;\r\n\r\n                if (this.props.Login.masterData.realSampleValue.value === SampleType.Masters) {\r\n                    const dataList = []\r\n                    this.props.Login.sampleexportdataResult.master.map(x => {\r\n                        if (x.sampleexportfields === true) {\r\n                            dataList.push(x.realData[designProperties.VALUE]);\r\n                        }\r\n                    })\r\n                    designData['masterexportfields'] = dataList\r\n                }else  if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN){\r\n                    this.props.Login.sampleexportdataResult.master.map(x => {\r\n                    if(x.sampleexportfields === true){                        \r\n                        let checkArray=designData['exportFields'].map(item=>item['2'])\r\n                        if((checkArray.includes(x.realData['2']))=== false) {\r\n                            designData['exportFields'].push(x.realData)\r\n                        }\r\n\r\n                    }else{\r\n                        let index=designData['exportFields'].findIndex(y=>y['2']===x.realData['2'])\r\n                        if(index!==-1){\r\n                            designData['exportFields'].splice(index, 1);                           \r\n                        }\r\n                    }                    \r\n                    })   \r\n                } \r\n                else {\r\n                    const dataList = []\r\n                    this.props.Login.sampleexportdataResult.sample.map(x => {\r\n                        if (x.sampleexportfields === true) {\r\n                            dataList.push(x.realData[designProperties.VALUE]);\r\n                        }\r\n                    })\r\n                    designData[formCode.SAMPLEREGISTRATION]['sampleExportFields'] = dataList\r\n\r\n                    if(this.props.Login.masterData && this.props.Login.masterData.defaultregsubtype.item.nneedsubsample){\r\n                        const dataListSub = []\r\n                        this.props.Login.sampleexportdataResult.subsample.map(x => {\r\n                            if (x.sampleexportfields === true) {\r\n                                dataListSub.push(x.realData[designProperties.VALUE]);\r\n                            }\r\n                        })\r\n                        designData[formCode.SAMPLEREGISTRATION]['subSampleExportFields'] = dataListSub\r\n                    }\r\n                    \r\n                }\r\n\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                operation = 'configure';\r\n            }\r\n            else if (operation === 'configurechecklistadd') {\r\n                let designData = this.props.Login.designData;\r\n\r\n\r\n                if (this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN) {\r\n                    designData['checklist'] = { \"nchecklistversioncode\": this.state.selectedRecord.nchecklistversioncode.value }\r\n                }\r\n\r\n                inputData = {\r\n                    designtemplatemapping: {\r\n                        ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                        jsondataobj: designData\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                operation = 'configure';\r\n            }\r\n            else if (operation === 'configureaudit') {\r\n                //console.log(\"auditFieldDesignData:\", this.props.Login);\r\n\r\n                inputData = {\r\n                    //dynamicaudit: {\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode,\r\n                    auditdata: this.props.Login.auditData,\r\n                    //nregtypecode:this.props.Login.masterData.realRegTypeValue.value, \r\n                    //nregsubtypecode:this.props.Login.masterData.realRegSubTypeValue.value, \r\n                    //nformcode:43, stablename:'registration',\r\n\r\n                    // },\r\n                    userinfo: this.props.Login.userInfo\r\n                }\r\n\r\n                //operation = 'configure';\r\n            } else if (operation === 'configuresendtostore') {\r\n                // const sampleQty = new Map();\r\n                //  const sampleUnit = new Map();\r\n                // let inputData=[];\r\n                //  let subsamplefields = [];\r\n                //  let senttostoragefields=[];\r\n\r\n                let samqty = {\r\n                    \"1\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.Quantity !== undefined && this.state.selectedRecord.Quantity !== null ? this.state.selectedRecord.Quantity.label : \"\"\r\n                }\r\n                let samunit = {\r\n                    \"1\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.Unit !== undefined && this.state.selectedRecord.Unit !== null ? this.state.selectedRecord.Unit.label : \"\"\r\n                }\r\n                let subsamqty = {\r\n                    \"1\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.SubQuantity !== undefined && this.state.selectedRecord.SubQuantity !== null ? this.state.selectedRecord.SubQuantity.label : \"\"\r\n                }\r\n                let subsamunit = {\r\n                    \"1\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.item.displayname : \"\",\r\n                    \"2\": this.state.selectedRecord.SubUnit !== undefined && this.state.selectedRecord.SubUnit !== null ? this.state.selectedRecord.SubUnit.label : \"\"\r\n                }\r\n                let sample = { \"nsampleqty\": samqty, \"nunitcode\": samunit };\r\n                let subsample = { \"nsampleqty\": subsamqty, \"nunitcode\": subsamunit };\r\n                let str = { \"samplefields\": sample, \"subsamplefields\": subsample };\r\n                let senttostoragefields = { \"senttostoragefields\": str };\r\n                // console.log(JSON.stringify(senttostoragefields));\r\n                inputData = {\r\n                    \"userinfo\": this.props.Login.userInfo, \"senttostoragefields\": senttostoragefields, \"updatesendtostore\": senttostoragefields.senttostoragefields,\r\n                    \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping.ndesigntemplatemappingcode\r\n                };\r\n            }\r\n            else if (operation === 'approve') {\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey, deleteValidation, jsqlquerycolumns, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect } = this.getGridJsondata(this.props.Login.masterData.selectedDesignTemplateMapping &&\r\n                    this.props.Login.masterData.selectedDesignTemplateMapping.jsondata, \"DeleteValidation\");\r\n\r\n                // console.log(\"deleteValidation 2:\", deleteValidation);\r\n\r\n                inputData = { jdynamiccolumns, jnumericcolumns, jsqlquerycolumns, sprimarykeyname: templatePrimaryKey, sampleQuerybuilderViewCondition, sampleQuerybuilderViewSelect };\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                inputData[\"designtemplatemapping\"] = { \"ndesigntemplatemappingcode\": this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"] ? this.props.Login.masterData.selectedDesignTemplateMapping[\"ndesigntemplatemappingcode\"].Value : \"\" };\r\n                inputData[\"designtemplatemapping\"] = this.props.Login.masterData.selectedDesignTemplateMapping;\r\n                inputData[\"deletevalidationlist\"] = deleteValidation;\r\n                inputData[\"sviewname\"] = this.state.selectedRecord.sviewname;\r\n            }\r\n            else {\r\n                // console.log(\"this.state.selectedRecord:\", this.state.selectedRecord);\r\n                let { jsondata, jdynamiccolumns, jnumericcolumns, templatePrimaryKey } = this.props.Login.masterData.realSampleValue.value === SampleType.Masters ?\r\n                    this.getGridJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                    : this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? this.getGoodsInJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata)\r\n                        : {};\r\n\r\n                let auditData = {};\r\n\r\n                let dataObject = {};\r\n                if (this.props.Login.masterData.realSampleValue.value !== SampleType.Masters && this.props.Login.masterData.realSampleValue.value !== SampleType.GOODSIN) {\r\n                    dataObject = this.getJsondata(this.state.selectedRecord.nreactregtemplatecode.item.jsondata);\r\n                    // console.log(\"json:\",dataObject);\r\n\r\n                    auditData = {\r\n                        \"registration\": {\r\n                            editmandatoryfields: dataObject[\"sampleAuditEditable\"],\r\n                            auditcapturefields: dataObject[\"sampleAuditFields\"],\r\n                            multilingualfields: dataObject[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n                    };\r\n\r\n                    if (needsubsample) {\r\n                        auditData = {\r\n                            ...auditData,\r\n                            registrationsample: {\r\n                                editmandatoryfields: dataObject[\"subSampleAuditEditable\"],\r\n                                auditcapturefields: dataObject[\"subSampleAuditFields\"],\r\n                                multilingualfields: dataObject[\"subSampleAuditMultilingualFields\"]\r\n                            },\r\n                        }\r\n                        delete dataObject[\"subSampleAuditEditable\"];\r\n                        delete dataObject[\"subSampleAuditFields\"];\r\n                        delete dataObject[\"subSampleAuditMultilingualFields\"];\r\n                    }\r\n                    delete dataObject[\"sampleAuditEditable\"];\r\n                    delete dataObject[\"sampleAuditFields\"];\r\n                    delete dataObject[\"sampleAuditMultilingualFields\"];\r\n                }\r\n               \r\n                else {\r\n                     if(this.props.Login.masterData.realSampleValue.value === SampleType.Masters){\r\n                    auditData = {\r\n                        \"dynamicmaster\": {\r\n                            editmandatoryfields: jsondata[\"sampleAuditEditable\"],\r\n                            auditcapturefields: jsondata[\"sampleAuditFields\"],\r\n                            multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n                    };\r\n                    } else if(this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN){\r\n                    auditData = {\r\n                        \"goodsinsample\": {\r\n                            editmandatoryfields: jsondata[\"sampleAuditEditable\"],\r\n                            auditcapturefields: jsondata[\"sampleAuditFields\"],\r\n                            multilingualfields: jsondata[\"sampleAuditMultilingualFields\"]\r\n                        },\r\n                    };\r\n                }\r\n                }\r\n\r\n                inputData = {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    \"ncontrolcode\": this.props.Login.ncontrolCode,\r\n                    \"nreactregtemplatecode\": this.state.selectedRecord.nreactregtemplatecode.value,\r\n                    \"nsampletypecode\": this.props.Login.masterData.realSampleValue.value,\r\n                    \"nregtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.value : -1,\r\n                    \"nregsubtypecode\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.value : -1,\r\n                    \"sregsubtypename\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? -1 : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.label : \"\",\r\n                    \"nformcode\": this.props.Login.masterData.realSampleValue.value ===SampleType.GOODSIN ? formCode.GOODSIN : this.props.Login.masterData.realFormValue ? this.props.Login.masterData.realFormValue.value : -1,\r\n                    \"nsubsampletemplatecode\": this.state.selectedRecord.nsubsampletemplatecode ? this.state.selectedRecord.nsubsampletemplatecode.value : -1,\r\n                    \"jsondataobj\": this.props.Login.masterData.realSampleValue.value === SampleType.Masters || this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? jsondata\r\n                        : dataObject,\r\n                    auditdata: auditData,\r\n                    needsubsample: this.props.Login.masterData.realSampleValue.value === SampleType.GOODSIN ? false : this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\r\n                    //needsubsample: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.item.nneedsubsample : false\r\n                }\r\n\r\n                inputData[\"designtemplatemapping\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n                if (this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.value === -2) {\r\n                    let qf_jsonData = { sdisplayname: {} };\r\n                    let qbt_jsonData = { tablename: {} };\r\n\r\n                    this.props.Login.languageList.map(lang => {\r\n                        qf_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord.sformname;\r\n                        qbt_jsonData['tablename'][lang.value] = this.state.selectedRecord.sformname\r\n                    })\r\n\r\n                    let qm_jsonData = { sdisplayname: {} };\r\n\r\n                    let nmodulecode = 0;\r\n                    let smoduledisplayname = \"\";\r\n\r\n                    if (this.state.selectedRecord[\"nnewmodule\"].value === transactionStatus.YES) {\r\n                        smoduledisplayname = this.state.selectedRecord[\"nmodulecode\"];\r\n                        this.props.Login.languageList.map(lang => {\r\n                            qm_jsonData['sdisplayname'][lang.value] = this.state.selectedRecord[\"nmodulecode\"];\r\n                        })\r\n                    }\r\n                    else {\r\n                        nmodulecode = this.state.selectedRecord[\"nmodulecode\"].value;\r\n                    }\r\n                    inputData = {\r\n                        ...inputData,\r\n                        sformname: this.state.selectedRecord.sformname,\r\n                        sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                        nmodulecode,\r\n                        smoduledisplayname,\r\n                        qm_jsonData,\r\n                        qf_jsonData,\r\n                        qbt_jsonData,\r\n                        sprimarykeyname: templatePrimaryKey,\r\n                        jdynamiccolumns,\r\n                        jnumericcolumns\r\n                    }\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        sformname: this.props.Login.masterData.realFormValue && this.props.Login.masterData.realFormValue.label,\r\n                        sregtemplatename: this.state.selectedRecord.nreactregtemplatecode.label,\r\n                        ssubregtemplatename: this.state.selectedRecord.nsubsampletemplatecode && this.state.selectedRecord.nsubsampletemplatecode.label,\r\n                        sprimarykeyname: templatePrimaryKey,\r\n                        jdynamiccolumns,\r\n                        jnumericcolumns\r\n\r\n                    }\r\n                }\r\n                // this.designtemplatemappingFieldList.map(item => {\r\n                //     return inputData[\"designtemplatemapping\"][item] = this.state.selectedRecord[item]\r\n                // });\r\n            }\r\n\r\n            //console.log(\"input:\", inputData);\r\n            let postParam = undefined;\r\n            const inputParam = {\r\n                classUrl: \"designtemplatemapping\",\r\n                methodUrl: \"DesignTemplateMapping\",\r\n                inputData: inputData,\r\n                operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n            }\r\n            if (operation === 'configureaudit') {\r\n                inputParam[\"methodUrl\"] = \"DynamicAudit\";\r\n                inputParam[\"operation\"] = \"configure\";\r\n                //operation = 'configure';\r\n            }\r\n            if (operation === 'configuresendtostore') {\r\n                inputParam[\"methodUrl\"] = \"ConfigureSendToStore\";\r\n                inputParam[\"operation\"] = \"update\";\r\n                //operation = 'configure';\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (\r\n                showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType, dataList: [], dataListCount: [], dataListCountSubSample: [], dataListSubSample: []\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, editFieldConfigService,\r\n    updateStore, getDesignTemplateMappingDetail, getMappedFieldProps,\r\n    getDesignTemplateMappingComboService, filterColumnData, auditFieldConfigService,\r\n    reloadDesignTemplateMapping, getTMPFilterRegType, getTMPFilterRegSubType, getTMPFilterSubmit,\r\n    combinationUniqueConfigService, mappingFieldConfigService, exportFieldConfigService, configureCheckList, getConfigureCheckListLatestVersion\r\n})(injectIntl(DesignTemplateMapping));\r\n\r\n"]},"metadata":{},"sourceType":"module"}