{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\testapproval\\\\SampleCertification.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Button } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, updateStore, getSampleCertTypeChange, getSampleCertRegSubTypeChange, filterColumnData, validateEsignCredential, getTestResultData, getActiveSample, generateCertificateAction, sentCertificateAction, correctionCertificateAction, xmlExportAction, getWholeFilterStatus, validateXMLEsignCredential, getApprovalVersionSampleCertification, onClickReportSample, validateEsignforSampCerGen, viewAttachment, viewReportForSample } from '../../actions';\nimport { getControlMap, showEsign, rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { faFileCode, faSync } from '@fortawesome/free-solid-svg-icons';\nimport rsapi, { fileViewUrl } from '../../rsapi';\nimport SampleCertificationFilter from './SampleCertificationFilter';\nimport { ReadOnlyText, ContentPanel, OutlineTransactionStatus, DecisionStatus } from '../../components/App.styles';\nimport { constructOptionList } from '../../components/CommonScript';\nimport { ReactComponent as Certified } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/generate-certificate.svg\";\nimport { ReactComponent as CertificateSend } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/certificate-Send.svg\";\nimport { ReactComponent as CertificateCorrectionicon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/certificate-correction.svg\";\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport ApprovalHistory from './ApprovalHistory';\nimport PrintHistory from './PrintHistory';\nimport SentMailHistory from './SentMailHistory';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Results from './Results';\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, RegistrationSubType } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport SplitterLayout from \"react-splitter-layout\";\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { process } from '@progress/kendo-data-query';\nimport CerGenTabs from '../batch/certificategeneration/CerGenTabs';\nimport DocViewer from '../../components/doc-viewer/doc-viewer.component'; //import { Tooltip } from '@progress/kendo-react-tooltip';\n// import ReactTooltip from 'react-tooltip';\n\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SampleCertification extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onRegSubTypeChange = (comboData, fieldName) => {\n      const regSubTypeValue = this.state.regSubTypeValue || {}; // regSubTypeValue[fieldName] = comboData;\n      // this.setState({ regSubTypeValue });\n\n      if (comboData.value !== this.state.regSubTypeValue.nregsubtypecode.value) {\n        let inputParamData = {};\n        let inputData = {\n          // nflag: 4,\n          FromDate: this.props.Login.masterData.FromDate,\n          ToDate: this.props.Login.masterData.ToDate,\n          nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RegistrationTypeValue.nregtypecode,\n          nregsubtypecode: comboData.value,\n          userinfo: this.props.Login.userInfo\n        };\n        inputParamData = {\n          inputData,\n          masterData: { ...this.props.Login.masterData,\n            //RegistrationSubTypeValue: comboData.item,\n            operation: \"onChange\"\n          }\n        };\n        this.props.getApprovalVersionSampleCertification(inputParamData);\n      } //this.props.getApprovalVersion(inputParamData)\n      //this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n\n\n      regSubTypeValue[fieldName] = comboData;\n      this.setState({\n        regSubTypeValue\n      });\n    };\n\n    this.onFilterChange = (comboData, fieldName) => {\n      const FilterStatusValue = this.state.FilterStatusValue || {};\n      FilterStatusValue[fieldName] = comboData;\n      this.setState({\n        FilterStatusValue\n      });\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      if (comboData.value !== this.props.Login.masterData.ApprovalVersionValue.napproveconfversioncode) {\n        const ApprovalVersionValue = comboData;\n        this.setState({\n          ApprovalVersionValue\n        }); // let masterData = { ...this.props.Login.masterData, ApprovalVersionValue: comboData.item  }\n        // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { masterData }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const operation = this.props.Login.screenData.inputParam.operation;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.screenData.inputParam.methodUrl === \"regenerateCertificate\") {\n        this.props.validateXMLEsignCredential(inputParam, \"openModal\");\n      } else if (operation === \"xml\") {\n        this.props.validateXMLEsignCredential(inputParam, \"openModal\");\n      } else if (operation === \"generate\") {\n        this.props.validateEsignforSampCerGen(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.handleExpandChange = (row, dataState) => {\n      const viewParam = {\n        TransactionSampleResults: this.props.Login.masterData.TransactionSampleResults,\n        userInfo: this.props.Login.userInfo,\n        primaryKeyField: \"ntransactiontestcode\",\n        npreregno: \"npreregno\",\n        masterData: this.props.Login.masterData\n      };\n      this.props.getTestResultData({ ...viewParam,\n        dataState,\n        primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField],\n        viewRow: row[\"dataItem\"]\n      });\n    };\n\n    this.generateCertificate = (operation, masterData, genCertificateId) => {\n      const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus;\n\n      if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ALREADYCERTIFIEDORSENT\"\n        }));\n      } else {\n        let postParam = {\n          inputListName: \"Registration\",\n          selectedObject: \"SelectedRegistration\",\n          primaryKeyField: \"npreregno\",\n          unchangeList: [\"FromDate\", \"ToDate\"],\n          isSingleGet: true\n        };\n        const inputParam = {\n          methodUrl: \"CertificationStatus\",\n          classUrl: \"samplecertification\",\n          postParam: postParam,\n          operation: \"generate\",\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: genCertificateId,\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            methodUrl: \"generateCertificationStatus\",\n            npreregno: masterData.SelectedRegistration.npreregno,\n            ntransactionstatus: transactionStatus.CERTIFIED,\n            registration: masterData.SelectedRegistration,\n            nversioncode: 0,\n            ncontrolcode: genCertificateId,\n            operation: \"generate\",\n            masterData: this.props.Login.masterData\n          }\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, genCertificateId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.generateCertificateAction(inputParam[\"inputData\"]);\n        }\n      }\n    };\n\n    this.correctionCertificate = (operation, masterData, certificateCorrectionId) => {\n      const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus;\n\n      if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\n        const inputParam = {\n          methodUrl: \"Certificate\",\n          classUrl: \"samplecertification\",\n          operation: \"correction\",\n          userinfo: this.props.Login.userInfo,\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            methodUrl: \"generateCertificationStatus\",\n            npreregno: masterData.SelectedRegistration.npreregno,\n            ntransactionstatus: transactionStatus.CERTIFIED,\n            registration: masterData.SelectedRegistration,\n            napprovalversioncode: String(masterData.SelectedRegistration.napprovalversioncode),\n            fromDate: masterData.FromDate,\n            toDate: masterData.ToDate,\n            nregtypecode: masterData.SelectedRegistration.nregtypecode,\n            nregsubtypecode: masterData.SelectedRegistration.nregsubtypecode\n          }\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, certificateCorrectionId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.correctionCertificateAction(inputParam[\"inputData\"], operation, this.props.Login.masterData, certificateCorrectionId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTCERTIFIEDRECORD\"\n        }));\n      }\n    };\n\n    this.xmlExport = (operation, masterData, XmlReportID) => {\n      const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus;\n\n      if (masterData.SelectedRegistration.ndecisionstatus === transactionStatus.PASS) {\n        if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\n          let inputData = {\n            methodUrl: \"xmlExport\",\n            npreregno: masterData.SelectedRegistration.npreregno,\n            userinfo: this.props.Login.userInfo,\n            ntransactionstatus: transactionStatus.CERTIFIED,\n            ncontrolcode: XmlReportID,\n            registration: masterData.SelectedRegistration\n          };\n          const inputParam = {\n            methodUrl: \"Export\",\n            classUrl: \"samplecertification\",\n            operation: \"xml\",\n            userInfo: this.props.Login.userInfo,\n            inputData\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, XmlReportID)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\",\n                operation\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.xmlExportAction(inputParam[\"inputData\"], this.props.Login.masterData, inputData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTCERTIFIEDRECORD\"\n          }));\n        }\n      } else {\n        // toast.warn(this.props.intl.formatMessage({ id: \"IDS_DECISIONSTATUSFAILED\" }));\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CANEXPORTXMLFORPASS\"\n        }));\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let showReport = this.props.Login.showReport;\n\n      if (this.props.Login.loadEsign) {\n        loadEsign = false;\n        selectedRecord.agree = false;\n        openModal = false;\n      } else {\n        selectedRecord = {};\n        showReport = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          showReport\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkConfirmation = (masterData, sendCertificateId) => {\n      const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus;\n\n      if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\n        return rsapi.post(\"samplecertification/getSentCertifiedStatus\", {\n          \"npreregno\": this.props.Login.masterData.SelectedRegistration.npreregno,\n          \"userinfo\": this.props.Login.userInfo\n        }).then(response => {\n          if (response.status === 202) {\n            toast.warn(response.data);\n          } else {\n            this.confirmMessage.confirm(this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CONFIRMATION\"\n            }), response.data, this.props.intl.formatMessage({\n              id: \"IDS_OK\"\n            }), this.props.intl.formatMessage({\n              id: \"IDS_CANCEL\"\n            }), // () => this.onClickSentesign(inputParam),\n            () => this.sendCertificate(\"send\", masterData, sendCertificateId), false, undefined);\n          }\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response\n            }));\n          }\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTCERTIFIEDRECORDTOSEND\"\n        }));\n      } // if (ntransactionstatus === transactionStatus.CERTIFIED) {\n      //     this.sendCertificate(\"send\", masterData, sendCertificateId);\n      // } else if (ntransactionstatus === transactionStatus.SENT) {\n      //     this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_CERTIFICATERESEND\" }),\n      //         \"OK\", \"Cancel\", () => this.sendCertificate(\"send\", masterData, sendCertificateId));\n      // } else {\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCERTIFIEDRECORD\" }));\n      // }\n\n    };\n\n    this.sendCertificate = (operation, masterData, sendCertificateId) => {\n      let postParam = {\n        inputListName: \"Registration\",\n        selectedObject: \"SelectedRegistration\",\n        primaryKeyField: \"npreregno\",\n        unchangeList: [\"FromDate\", \"ToDate\"],\n        isSingleGet: true\n      };\n      const inputParam = {\n        methodUrl: \"Certification\",\n        classUrl: \"samplecertification\",\n        operation: \"send\",\n        userInfo: this.props.Login.userInfo,\n        postParam: postParam,\n        inputData: {\n          methodUrl: \"sendCertification\",\n          npreregno: masterData.SelectedRegistration.npreregno,\n          nregtypecode: masterData.SelectedRegistration.nregtypecode,\n          nregsubtypecode: masterData.SelectedRegistration.nregsubtypecode,\n          userinfo: this.props.Login.userInfo,\n          ntransactionstatus: transactionStatus.CERTIFIED,\n          registration: masterData.SelectedRegistration,\n          ncontrolcode: sendCertificateId\n        }\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, sendCertificateId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.sentCertificateAction(inputParam[\"inputData\"], operation, this.props.Login.masterData);\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      let FromDate = this.props.Login.masterData.RealFromDate || new Date();\n      let ToDate = this.props.Login.masterData.RealToDate || new Date();\n      let obj = {};\n\n      if (dateName === 'fromDate') {\n        obj = convertDateValuetoString(dateValue, ToDate, this.props.Login.userInfo);\n        FromDate = obj.fromDate;\n        ToDate = obj.toDate;\n      } else {\n        obj = convertDateValuetoString(FromDate, dateValue, this.props.Login.userInfo);\n        FromDate = obj.fromDate;\n        ToDate = obj.toDate;\n      } // let RealFromDate =obj.breadCrumbFrom;\n      // let RealToDate=obj.breadCrumbto;\n      // this.setState({RealFromDate, RealToDate});\n\n\n      let inputParam = {\n        inputData: {\n          nflag: 2,\n          nregtypecode: this.state.RegTypeValue.nregtypecode.value,\n          nregsubtypecode: this.state.regSubTypeValue.nregsubtypecode.value,\n          userinfo: this.props.Login.userInfo,\n          FromDate: String(FromDate),\n          ToDate: String(ToDate)\n        },\n        masterData: this.props.Login.masterData\n      };\n      this.props.getApprovalVersionSampleCertification(inputParam);\n    };\n\n    this.onFilterSubmit = () => {\n      //let SampleTypeValue = this.state.SampleTypeValue?this.state.SampleTypeValue.nsampletypecode:\"\"\n      let RealSampleTypeValue = this.state.SampleTypeValue ? this.state.SampleTypeValue.nsampletypecode.item.ssampletypename : \"\";\n      let RealRegTypeValue = this.state.RegTypeValue ? this.state.RegTypeValue.nregtypecode.item.sregtypename : \"\";\n      let RealRegSubTypeValue = this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.item.sregsubtypename : \"\";\n      let RealFilterValue = this.state.FilterStatusValue && this.state.FilterStatusValue.ntransactionstatus ? this.state.FilterStatusValue.ntransactionstatus.item : \"\";\n      let RealApprovalVersion = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.sversionname : \"\";\n      let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate, this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate, this.props.Login.userInfo); // let RealFromDate = obj.fromDate || this.props.Login.masterData.RealFromDate\n      // let RealToDate = obj.toDate || this.props.Login.masterData.RealToDate\n\n      let RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n\n      if (RealRegSubTypeValue !== \"\" && RealFilterValue !== \"\" && RealApprovalVersion !== \"\") {\n        let inputData = {\n          nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\n          nregtypecode: this.state.RegTypeValue.nregtypecode.value,\n          nregsubtypecode: this.state.regSubTypeValue.nregsubtypecode.value,\n          nfilterstatus: this.state.FilterStatusValue.ntransactionstatus.value,\n          napprovalversioncode: this.state.ApprovalVersionValue.value ? String(this.state.ApprovalVersionValue.value) : '-1',\n          userinfo: this.props.Login.userInfo,\n          approvalVersionValue: this.state.ApprovalVersionValue.item\n        };\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        this.setState({\n          RealSampleTypeValue,\n          RealRegTypeValue,\n          RealRegSubTypeValue,\n          RealFilterValue,\n          RealFromDate,\n          RealToDate\n        });\n        let masterData = { ...this.props.Login.masterData,\n          RealSampleTypeValue,\n          RealRegTypeValue,\n          RealRegSubTypeValue,\n          RealFilterValue,\n          RealFromDate,\n          RealToDate,\n          RealApprovalVersion\n        };\n        this.props.getWholeFilterStatus(masterData, inputData, \"FilterSubmit\", this.searchRef);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.reloadData = () => {\n      let SampleTypeValue = this.state.SampleTypeValue ? this.state.SampleTypeValue.nsampletypecode : \"\";\n\n      if (SampleTypeValue !== \"\") {\n        let inputData = {\n          nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\n          nregtypecode: this.state.RegTypeValue.nregtypecode.value,\n          nregsubtypecode: this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode : this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.value : \"\",\n          nfilterstatus: this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue.napprovalstatuscode : this.state.FilterStatusValue ? this.state.FilterStatusValue.ntransactionstatus.value : \"\",\n          userinfo: this.props.Login.userInfo,\n          napprovalversioncode: this.state.ApprovalVersionValue.value ? String(this.state.ApprovalVersionValue.value) : '-1'\n        };\n\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== \"-1\" && inputData.nfilterstatus !== undefined) {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate, this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n          inputData['FromDate'] = obj.fromDate;\n          inputData['ToDate'] = obj.toDate;\n          this.props.getWholeFilterStatus(this.props.Login.masterData, inputData, \"FilterSubmit\", this.searchRef);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_APPROVALHISTORY\", /*#__PURE__*/React.createElement(ApprovalHistory, {\n        approvalHistory: this.props.Login.masterData.approvalHistory,\n        dataResult: process(this.props.Login.masterData.approvalHistory || [], this.state.appHistoryDataState),\n        dataState: this.state.appHistoryDataState,\n        controlMap: this.state.controlMap,\n        userInfo: this.props.Login.userInfo,\n        userRoleControlRights: this.state.userRoleControlRights,\n        dataStateChange: event => this.setState({\n          appHistoryDataState: event.dataState\n        }),\n        screenName: \"IDS_APPROVALHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_CERTIFIEDREPORT\", /*#__PURE__*/React.createElement(CerGenTabs, {\n        userRoleControlRights: this.state.userRoleControlRights,\n        controlMap: this.state.controlMap,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        primaryList: \"ReportHistory\",\n        dataResult: process(this.props.Login.masterData[\"ReportHistory\"] || [], this.state.dataStateReportHistory),\n        dataState: this.props.screenName === undefined || this.props.screenName === \"IDS_BATCHREPORTHISTORY\" ? this.state.dataStateReportHistory : {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        },\n        dataStateChange: event => this.setState({\n          dataStateReportHistory: event.dataState\n        }),\n        columnList: this.extractedReportHistoryColumnList,\n        methodUrl: \"Certificate\",\n        isActionRequired: true,\n        selectedId: 0,\n        expandField: \"\",\n        viewDownloadFile: inputParam => this.viewAttachment(inputParam),\n        downloadParam: {\n          classUrl: \"samplecertification\",\n          operation: \"download\",\n          methodUrl: \"Report\"\n        },\n        hasControlWithOutRights: true,\n        viewReportFile: this.props.viewReportForSample,\n        showDocViewer: true,\n        isreportview: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 43\n        }\n      }));\n      tabMap.set(\"IDS_PRINTHISTORY\", /*#__PURE__*/React.createElement(PrintHistory, {\n        printHistory: this.props.Login.masterData.printHistory,\n        dataResult: process(this.props.Login.masterData.printHistory || [], this.state.printHistoryDataState),\n        dataState: this.state.printHistoryDataState,\n        controlMap: this.state.controlMap,\n        dataStateChange: event => this.setState({\n          printHistoryDataState: event.dataState\n        }),\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_PRINTHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(Results, {\n        TransactionSampleTests: this.props.Login.masterData.TransactionSampleTests,\n        dataResult: process(this.props.Login.masterData.TransactionSampleTests || [], this.state.resultsDataState),\n        dataState: this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_RESULTS\" ? this.state.resultsDataState : {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        },\n        controlMap: this.state.controlMap,\n        dataStateChange: event => this.setState({\n          resultsDataState: event.dataState\n        }),\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        handleExpandChange: this.handleExpandChange,\n        screenName: \"IDS_RESULTS\",\n        childList: this.props.Login.masterData.sampleTestResults,\n        childMappingField: \"ntransactiontestcode\",\n        hasChild: true // childList ={props.childList || new Map()}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_MAILSTATUS\", /*#__PURE__*/React.createElement(SentMailHistory, {\n        printHistory: this.props.Login.masterData.emailSentHistory,\n        dataResult: process(this.props.Login.masterData.emailSentHistory || [], this.state.sentMailHistory),\n        dataState: this.state.sentMailHistory,\n        controlMap: this.state.controlMap,\n        dataStateChange: event => this.setState({\n          sentMailHistory: event.dataState\n        }),\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_MAILSTATUS\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.viewAttachment = inputParam => {\n      inputParam.inputData = { ...inputParam.inputData,\n        ncontrolcode: inputParam.ncontrolCode\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); // setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.showConfirmAlert = (selectedRecord, flag, ReportId) => {\n      this.confirmMessage.confirm(\"regenerate\", //name\n      this.props.intl.formatMessage({\n        id: \"IDS_CONFIRMATION\"\n      }), //tittle\n      this.props.intl.formatMessage({\n        id: \"IDS_REGENERATECONFIRMATION\"\n      }), //message\n      this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), //do Label\n      this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), //Do not label\n      () => this.onClickReport(selectedRecord, flag, ReportId), undefined, () => this.closeConfirmAlert());\n    };\n\n    this.closeConfirmAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onClickReport = (selectedRecord, flag, ReportId) => {\n      const reportParam = {\n        classUrl: \"samplecertification\",\n        methodUrl: \"regenerateCertificate\",\n        screenName: \"SampleCertification\",\n        operation: \"update\",\n        primaryKeyField: \"npreregno\",\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        ncontrolCode: ReportId,\n        inputData: {\n          sprimarykeyname: 'npreregno',\n          nprimarykey: selectedRecord.npreregno,\n          npreregno: selectedRecord.npreregno,\n          nregtypecode: selectedRecord.nregtypecode,\n          nregsubtypecode: selectedRecord.nregsubtypecode,\n          nsectioncode: transactionStatus.NA,\n          // ncertificatetypecode:selectedRecord.ndecisionstatuscode===transactionStatus.PASS&&flag===1?selectedRecord.ncertificatetypecode:-1,\n          ndecisionstatus: selectedRecord.ndecisionstatuscode,\n          ncontrolcode: ReportId,\n          nreporttypecode: reportTypeEnum.SAMPLE,\n          ncoareporttypecode: reportCOAType.SAMPLECERTIFICATE,\n          userinfo: this.props.Login.userInfo,\n          nflag: flag,\n          isRegenerate: true\n        }\n      }; // this.props.onClickReportSample(reportParam)\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ReportId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam: reportParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\",\n            operation: reportParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.onClickReportSample(reportParam);\n      }\n    };\n\n    const appHistoryDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const resultsDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const printHistoryDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const sentMailHistory = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const dataStateReportHistory = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.searchSampleRef = React.createRef();\n    this.state = {\n      openModal: false,\n      masterStatus: \"\",\n      controlMap: new Map(),\n      error: \"\",\n      selectedRecord: {},\n      selectedFilter: {},\n      userRoleControlRights: [],\n      appHistoryDataState,\n      resultsDataState,\n      printHistoryDataState,\n      dataStateReportHistory,\n      sentMailHistory,\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25\n    };\n    this.extractedReportHistoryColumnList = [{\n      \"idsName\": \"IDS_VERSION\",\n      \"dataField\": \"nversioncode\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_REPORTDATE\",\n      \"dataField\": \"sgeneratedtime\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_USERROLE\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_REPORTCOMMENTS\",\n      \"dataField\": \"sreportcomments\",\n      \"width\": \"250px\"\n    }];\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"scomponentname\", \"sarno\", \"sproductname\", \"ssamplecertificateversioncode\", \"sversion\", \"smanufname\", \"sspecname\", \"nrmsno\", \"dtransactiondate\", \"smanuflotno\"];\n  } // onSampleTypeChange = (event, fieldName, labelname) => {\n  //     if (event !== null) {\n  //         let Map = {};\n  //         Map[\"nsampletypecode\"] = parseInt(event.value);\n  //         Map['userinfo'] = this.props.Login.userInfo;\n  //         this.props.getSampleCertTypeChange(Map, this.props.Login.masterData, event, labelname);\n  //     }\n  // }\n\n\n  // covertDatetoString(startDateValue, endDateValue) {\n  //     const startDate = new Date(startDateValue);\n  //     const endDate = new Date(endDateValue);\n  //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\n  //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\n  //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\n  //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\n  //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\n  //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\n  //     const fromDate = fromDateOnly + \"T00:00:00\";\n  //     const toDate = toDateOnly + \"T23:59:59\";\n  //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\n  // }\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const {\n      SelectedRegistration,\n      searchedData,\n      Registration\n    } = this.props.Login.masterData;\n    const getSample = {\n      screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"SampleCertification\",\n      keyName: \"samplecertification\"\n    };\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"] || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealFromDate);\n    this.toDate = this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"] || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealToDate); // const { SampleCertification } = this.props.Login.masterData;\n\n    const genCertificateId = this.state.controlMap.has(\"GenerateCertificate\") && this.state.controlMap.get(\"GenerateCertificate\").ncontrolcode;\n    const sendCertificateId = this.state.controlMap.has(\"SendCertificate\") && this.state.controlMap.get(\"SendCertificate\").ncontrolcode;\n    const certificateCorrectionId = this.state.controlMap.has(\"CertificateCorrection\") && this.state.controlMap.get(\"CertificateCorrection\").ncontrolcode;\n    const ReportId = this.state.controlMap.has(\"Re-GenerateCetrificate\") && this.state.controlMap.get(\"Re-GenerateCetrificate\").ncontrolcode;\n    const XmlReportID = this.state.controlMap.has(\"XmlReport\") && this.state.controlMap.get(\"XmlReport\").ncontrolcode;\n    this.confirmMessage = new ConfirmMessage();\n    let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate, this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate, this.props.Login.userInfo); // let breadCrumbFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealFromDate)\n    //let breadCrumbToDate=rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealToDate)\n\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom || this.state.RealFromDate\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto || this.state.RealToDate\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      //\"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n      \"value\": this.state.RealSampleTypeValue\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.state.RealRegTypeValue\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.state.RealRegSubTypeValue\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.state.RealFilterValue ? this.state.RealFilterValue.stransdisplaystatus : \"-\"\n    }, {\n      \"label\": \"IDS_CONFIGVERSION\",\n      \"value\": this.state.RealApprovalVersion\n    }];\n    const filterParam = {\n      inputListName: \"Registration\",\n      selectedObject: \"SelectedRegistration\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"samplecertification/getSampleCertificationById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 878,\n        columnNumber: 17\n      }\n    }, this.breadCrumbData && this.breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 884,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: 30,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 885,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: searchedData || Registration || [],\n      selectedMaster: [SelectedRegistration],\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: SampleCertification => this.props.getActiveSample(SampleCertification, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: getSample,\n      additionalParam: [],\n      mainField: \"ssamplecertificateversioncode\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_CERTIFICATENUMBER\"\n      }),\n      listName: \"IDS_SAMPLE\",\n      showStatusLink: false,\n      subFieldsLabel: true,\n      subFields: [{\n        [designProperties.LABEL]: \"IDS_ARNO\",\n        [designProperties.VALUE]: \"sarno\"\n      }, {\n        [designProperties.LABEL]: \"IDS_MANUFACTURERLOTNO\",\n        [designProperties.VALUE]: \"smanuflotno\"\n      }, {\n        [designProperties.LABEL]: \"IDS_COMPONENT\",\n        [designProperties.VALUE]: \"scomponentname\"\n      } // { [designProperties.LABEL]: \"IDS_STATUS\", [designProperties.VALUE]: \"stransdisplaystatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\n      ] // moreField=\"sarno\"\n      //needValidation={false}\n      ,\n      needFilter: true,\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      handlePageChange: this.handlePageChange,\n      onFilterSubmit: this.onFilterSubmit,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        onClick: () => this.reloadData(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 925,\n          columnNumber: 49\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_SAMPLECERTIFICATEGENERATION\": /*#__PURE__*/React.createElement(SampleCertificationFilter, {\n          formatMessage: this.props.intl.formatMessage,\n          Product: this.props.Login.masterData.MAHProduct || [],\n          SampleType: this.state.SampleType || [],\n          RegistrationType: this.state.RegistrationType || [],\n          RegistrationSubType: this.state.RegistrationSubType || [],\n          FilterStatus: this.state.FilterList || [],\n          ApprovalVersion: this.state.ApprovalValue || [],\n          ApprovalVersionValue: this.state.ApprovalVersionValue || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.state.SampleTypeValue || {},\n          RegTypeValue: this.state.RegTypeValue || {},\n          regSubTypeValue: this.state.regSubTypeValue || {},\n          FilterStatusValue: this.state.FilterStatusValue || {} // FilterStatusValue={this.props.Login.masterData.FilterStatus || {}}\n          ,\n          FromDate: this.fromDate,\n          ToDate: this.toDate,\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          handleDateChange: this.handleDateChange,\n          onFilterComboChange: this.onFilterComboChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 80\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: 400,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedRegistration ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sarno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 976,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(OutlineTransactionStatus, {\n      transcolor: this.props.Login.masterData.SelectedRegistration.scolorhexcode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category justify-content-end icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"generateCertificate\",\n      hidden: this.state.userRoleControlRights.indexOf(genCertificateId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\" ///onClick = {()=>this.props.(editParam)}\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_GENERATECERTIFICATE\"\n      }),\n      onClick: e => this.generateCertificate(\"generate\", this.props.Login.masterData, genCertificateId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Certified, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"Certified\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 81\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"correctionCertificate\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(certificateCorrectionId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RECERTIFICATECORRECTION\"\n      }),\n      onClick: e => this.correctionCertificate(\"CorrectionCertificate\", this.props.Login.masterData, certificateCorrectionId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(CertificateCorrectionicon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"Correction\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 81\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"sendCertificate\",\n      hidden: this.state.userRoleControlRights.indexOf(sendCertificateId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_SENDCERTIFICATE\"\n      }),\n      onClick: e => this.checkConfirmation(this.props.Login.masterData, sendCertificateId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(CertificateSend, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"Sent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 81\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"xmlExport\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(XmlReportID) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_XMLEXPORT\"\n      }),\n      onClick: e => this.xmlExport(\"Export\", this.props.Login.masterData, XmlReportID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 81\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"Report\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REGENREATEREPORT\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(ReportId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      onClick: () => this.showConfirmAlert(this.props.Login.masterData.SelectedRegistration, 1, ReportId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(CertificateSend, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"Sent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 81\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1051,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ARNO\",\n      message: \"Arno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1056,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sarno))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1060,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMPONENTNAME\",\n      message: \"Componentname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.scomponentname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1066,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_GENERICPRODUCT\",\n      message: \"Generic Product\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sproductname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CERTIFICATENUMBER\",\n      message: \"Certificate No.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.ssamplecertificateversioncode))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      message: \"Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1083,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sversion))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1087,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MANUFACTURENAME\",\n      message: \"Manufacturename\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1089,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1090,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.smanufname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SPECIFICATIONSTUDYPLAN\",\n      message: \"Specificationname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sspecname))), this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RMSNO\",\n      message: \"Rmsno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 92\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 81\n      }\n    }, this.props.Login.masterData.SelectedRegistration.nrmsno))) : \"\", /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1113,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REGISTRATIONDATE\",\n      message: \"RegistrationDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1115,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.dtransactiondate))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1120,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1121,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MANUFLOTNO\",\n      message: \"Manuf Lot No.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.smanuflotno))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1128,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DECISIONSTATUS\",\n      message: \"Decisionstatus\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1129,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(DecisionStatus, {\n      style: {\n        marginLeft: \"0rem\"\n      },\n      decisioncolor: this.props.Login.masterData.SelectedRegistration.sdecisioncolor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1130,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.SelectedRegistration.sdecisionstatus)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"horizontal-line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1140,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1141,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1142,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_USERNAME\",\n      message: \"User Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1144,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ? this.props.Login.masterData.CertificateHistoryView[0].username : \"-\"))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_USERROLE\",\n      message: \"User Role\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1150,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ? this.props.Login.masterData.CertificateHistoryView[0].suserrolename : \"-\"))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1153,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1154,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CERTIFIEDDATE\",\n      message: \"Certified Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1155,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1156,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ? this.props.Login.masterData.CertificateHistoryView[0].scertificatedate : \"-\"))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CERTIFICATECOMMENTS\",\n      message: \"Certificate Comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 88\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1162,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ? this.props.Login.masterData.CertificateHistoryView[0].scomments === \"\" || this.props.Login.masterData.CertificateHistoryView[0].scomments === null ? \"-\" : this.props.Login.masterData.CertificateHistoryView[0].scomments : \"-\")))), /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 65\n      }\n    }))) : \"\"))))))))), this.props.Login.showReport ? /*#__PURE__*/React.createElement(DocViewer, {\n      file: fileViewUrl() + this.props.Login.ViewUrl,\n      showReport: this.props.Login.showReport,\n      closeModal: this.closeModal,\n      type: \"pdf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1191,\n        columnNumber: 21\n      }\n    }) : \"\", this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      showSaveContinue: this.state.showSaveContinue,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1214,\n          columnNumber: 29\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1200,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const SampleMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const SampleType = SampleMap.get(\"OptionList\");\n      const SampleTypeValue = {\n        nsampletypecode: SampleType.length > 0 ? SampleType[0] : \"\"\n      };\n      const RegMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const RegistrationType = RegMap.get(\"OptionList\");\n      const RegTypeValue = {\n        nregtypecode: RegistrationType.length > 0 ? RegistrationType[0] : \"\"\n      };\n      const RegSubMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'nsorter', \"ascending\", false);\n      const RegistrationSubType = RegSubMap.get(\"OptionList\"); //const regSubTypeValue = {nregsubtypecode: RegistrationSubType.length> 0? RegistrationSubType[2]: \"\"};\n\n      const FilterStatus = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"napprovalstatuscode\", \"stransdisplaystatus\", undefined, undefined, true);\n      const FilterList = FilterStatus.get(\"OptionList\");\n      const ConfigVersionList = constructOptionList(this.props.Login.masterData.ApprovalVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\n      const ApprovalValue = ConfigVersionList.get(\"OptionList\"); // const ApprovalVersionValue = ApprovalValue.length > 0 ? ApprovalValue[0] : \"\" \n      // const Transcolor=  this.props.Login.masterData?this.props.Login.masterData[\"SelectedRegistration\"][\"stransdisplaystatus\"]\n      // :\"\"\n      // let  Transdisplaystatus={};\n      // if(this.props.Login.masterData.SelectedRegistration.stransdisplaystatus===transactionStatus.CERTIFIED){\n      //     Transdisplaystatus = this.props.Login.masterData[\"SelectedRegistration\"][\"stransdisplaystatus\"]\n      // }\n\n      let FilterStatusValue = {};\n      let regSubTypeValue = {};\n      let ApprovalVersionValue = {};\n\n      if (this.props.Login.masterData.operation === \"FilterSubmit\" || this.props.Login.masterData.operation === \"onChange\") {\n        //FilterStatusValue = this.props.Login.masterData.FilterStatusValue //this.state.FilterStatusValue\n        FilterStatusValue = {\n          ntransactionstatus: {\n            \"label\": this.props.Login.masterData.FilterStatusValue.stransdisplaystatus,\n            \"value\": this.props.Login.masterData.FilterStatusValue.napprovalstatuscode,\n            \"item\": this.props.Login.masterData.FilterStatusValue\n          }\n        };\n        regSubTypeValue = this.state.regSubTypeValue;\n        ApprovalVersionValue = this.props.Login.masterData.ApprovalVersionValue ? {\n          label: this.props.Login.masterData.ApprovalVersionValue.sversionname,\n          value: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\n          item: this.props.Login.masterData.ApprovalVersionValue\n        } : this.state.ApprovalVersionValue;\n      } else {\n        FilterStatusValue = {\n          ntransactionstatus: FilterList.length > 0 ? FilterList[0] : \"\"\n        };\n        regSubTypeValue = {\n          nregsubtypecode: RegistrationSubType.length > 0 ? {\n            label: this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename,\n            value: this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode,\n            item: this.props.Login.masterData.ApprovalVersionValue\n          } : \"\"\n        };\n        ApprovalVersionValue = ApprovalValue.length > 0 ? ApprovalValue[0] : \"\";\n      }\n\n      let RealFilterValue = {};\n      let RealRegSubTypeValue = {};\n      let RealFromDate = {};\n      let RealToDate = {};\n      let RealApprovalVersion = {};\n\n      if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData) {\n        RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue : \"\";\n      }\n\n      if (this.props.Login.masterData.RealRegSubTypeValue !== previousProps.Login.masterData) {\n        RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue : this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename : \"\"; // this.props.intl.formatMessage({ id: \"IDS_PLASMAPOOL\" })\n      }\n\n      if (this.props.Login.masterData.RealFromDate !== previousProps.Login.masterData) {\n        RealFromDate = this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate : this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate : \"\";\n      }\n\n      if (this.props.Login.masterData.RealToDate !== previousProps.Login.masterData) {\n        RealToDate = this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate : this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate : \"\";\n      }\n\n      if (this.props.Login.masterData.ApprovalVersionValue !== previousProps.Login.masterData) {\n        RealApprovalVersion = this.props.Login.masterData.RealApprovalVersion ? this.props.Login.masterData.RealApprovalVersion : this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname : \" - \";\n      } // const RealFromDate = this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate:\"\"\n      // const RealToDate = this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate:\"\"\n\n\n      const RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename : \"\";\n      const RealRegTypeValue = this.props.Login.masterData.RegistrationTypeValue ? this.props.Login.masterData.RegistrationTypeValue.sregtypename : \"\";\n      let {\n        appHistoryDataState,\n        resultsDataState,\n        printHistoryDataState,\n        sentMailHistory\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        if (this.props.screenName === \"IDS_APPROVALHISTORY\") {\n          appHistoryDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        } else if (this.props.screenName === \"IDS_MAILSTATUS\") {\n          sentMailHistory = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        } else if (this.props.screenName === \"IDS_PRINTHISTORY\") {\n          printHistoryDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        } else if (this.props.screenName === \"IDS_RESULTS\") {\n          resultsDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        } else {\n          appHistoryDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n          resultsDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n          printHistoryDataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n          sentMailHistory = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n      }\n\n      ;\n      this.setState({\n        appHistoryDataState,\n        resultsDataState,\n        printHistoryDataState,\n        sentMailHistory,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        FilterList,\n        SampleTypeValue,\n        RegTypeValue,\n        RealSampleTypeValue,\n        regSubTypeValue,\n        FilterStatusValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterValue,\n        RealFromDate,\n        RealToDate,\n        ApprovalValue,\n        RealApprovalVersion,\n        ApprovalVersionValue\n      });\n    } // if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData)  {\n    //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\n    //     this.setState({RealFilterValue});\n    //  }\n    //else{\n    //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\n    //     //this.setState({RealFilterValue});\n    // }this.state.regSubTypeValue\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getSampleCertTypeChange,\n  filterColumnData,\n  viewAttachment,\n  getSampleCertRegSubTypeChange,\n  getTestResultData,\n  getActiveSample,\n  generateCertificateAction,\n  sentCertificateAction,\n  viewReportForSample,\n  correctionCertificateAction,\n  xmlExportAction,\n  getWholeFilterStatus,\n  validateXMLEsignCredential,\n  getApprovalVersionSampleCertification,\n  onClickReportSample,\n  validateEsignforSampCerGen\n})(injectIntl(SampleCertification));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/testapproval/SampleCertification.jsx"],"names":["React","Component","connect","Row","Col","Card","Nav","FormGroup","FormLabel","Button","toast","callService","crudMaster","updateStore","getSampleCertTypeChange","getSampleCertRegSubTypeChange","filterColumnData","validateEsignCredential","getTestResultData","getActiveSample","generateCertificateAction","sentCertificateAction","correctionCertificateAction","xmlExportAction","getWholeFilterStatus","validateXMLEsignCredential","getApprovalVersionSampleCertification","onClickReportSample","validateEsignforSampCerGen","viewAttachment","viewReportForSample","getControlMap","showEsign","rearrangeDateFormat","convertDateValuetoString","FontAwesomeIcon","FormattedMessage","injectIntl","faFileCode","faSync","rsapi","fileViewUrl","SampleCertificationFilter","ReadOnlyText","ContentPanel","OutlineTransactionStatus","DecisionStatus","constructOptionList","CustomTab","ApprovalHistory","PrintHistory","SentMailHistory","DEFAULT_RETURN","Results","transactionStatus","designProperties","reportTypeEnum","reportCOAType","RegistrationSubType","ConfirmMessage","BreadcrumbComponent","TransactionListMaster","SplitterLayout","PerfectScrollbar","ListWrapper","ProductList","SlideOutModal","Esign","process","CerGenTabs","DocViewer","mapStateToProps","state","Login","SampleCertification","constructor","props","onRegSubTypeChange","comboData","fieldName","regSubTypeValue","value","nregsubtypecode","inputParamData","inputData","FromDate","masterData","ToDate","nsampletypecode","SampleTypeValue","nregtypecode","RegistrationTypeValue","userinfo","userInfo","operation","setState","onFilterChange","FilterStatusValue","onFilterComboChange","ApprovalVersionValue","napproveconfversioncode","onInputOnChange","event","selectedRecord","target","type","name","checked","ACTIVE","DEACTIVE","YES","NO","validateEsign","screenData","inputParam","sreason","nreasoncode","spredefinedreason","label","password","methodUrl","onRegTypeChange","labelname","Map","parseInt","handleExpandChange","row","dataState","viewParam","TransactionSampleResults","primaryKeyField","npreregno","primaryKeyValue","viewRow","generateCertificate","genCertificateId","ntransactionstatus","SelectedRegistration","CERTIFIED","SENT","warn","intl","formatMessage","id","postParam","inputListName","selectedObject","unchangeList","isSingleGet","classUrl","ncontrolcode","registration","nversioncode","userRoleControlRights","nformcode","updateInfo","typeName","data","loadEsign","openModal","screenName","correctionCertificate","certificateCorrectionId","napprovalversioncode","String","fromDate","toDate","xmlExport","XmlReportID","ndecisionstatus","PASS","closeModal","showReport","agree","checkConfirmation","sendCertificateId","post","then","response","status","confirmMessage","confirm","sendCertificate","undefined","catch","error","message","handleDateChange","dateName","dateValue","Date","RealFromDate","RealToDate","obj","nflag","RegTypeValue","onFilterSubmit","RealSampleTypeValue","item","ssampletypename","RealRegTypeValue","sregtypename","RealRegSubTypeValue","sregsubtypename","RealFilterValue","RealApprovalVersion","sversionname","selectedFilter","fromdate","todate","nfilterstatus","approvalVersionValue","searchRef","reloadData","RegistrationSubTypeValue","napprovalstatuscode","onTabChange","tabProps","tabDetail","tabMap","set","approvalHistory","appHistoryDataState","controlMap","dataStateReportHistory","skip","take","settings","extractedReportHistoryColumnList","printHistory","printHistoryDataState","TransactionSampleTests","resultsDataState","sampleTestResults","emailSentHistory","sentMailHistory","ncontrolCode","handlePageChange","e","showConfirmAlert","flag","ReportId","onClickReport","closeConfirmAlert","reportParam","sprimarykeyname","nprimarykey","nsectioncode","NA","ndecisionstatuscode","nreporttypecode","SAMPLE","ncoareporttypecode","SAMPLECERTIFICATE","isRegenerate","searchSampleRef","createRef","masterStatus","searchFieldList","getDerivedStateFromProps","render","searchedData","Registration","getSample","keyName","has","get","breadCrumbData","breadCrumbFrom","breadCrumbto","stransdisplaystatus","filterParam","fetchUrl","fecthInputObject","length","parentHeight","LABEL","VALUE","MAHProduct","SampleType","RegistrationType","FilterList","ApprovalValue","onSampleTypeChange","handleFilterDateChange","sarno","scolorhexcode","indexOf","scomponentname","sproductname","ssamplecertificateversioncode","sversion","smanufname","sspecname","EXTERNAL_POOL","nrmsno","dtransactiondate","smanuflotno","marginLeft","sdecisioncolor","sdecisionstatus","CertificateHistoryView","username","suserrolename","scertificatedate","scomments","ViewUrl","onSaveClick","showSaveContinue","componentDidUpdate","previousProps","SampleMap","RegMap","RegSubMap","FilterStatus","ConfigVersionList","ApprovalVersion","napprovalconfigversioncode","Object","values","map","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Button } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, updateStore, getSampleCertTypeChange, getSampleCertRegSubTypeChange, filterColumnData, validateEsignCredential,\r\n    getTestResultData, getActiveSample, generateCertificateAction, sentCertificateAction, correctionCertificateAction, xmlExportAction, getWholeFilterStatus, validateXMLEsignCredential,\r\n    getApprovalVersionSampleCertification, onClickReportSample,validateEsignforSampCerGen, viewAttachment,viewReportForSample\r\n} from '../../actions'\r\nimport { getControlMap, showEsign,rearrangeDateFormat,convertDateValuetoString }\r\n    from '../../components/CommonScript';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { faFileCode, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport rsapi, { fileViewUrl } from '../../rsapi';\r\n\r\nimport SampleCertificationFilter from './SampleCertificationFilter';\r\nimport { ReadOnlyText, ContentPanel, OutlineTransactionStatus, DecisionStatus } from '../../components/App.styles';\r\nimport { constructOptionList } from '../../components/CommonScript';\r\nimport { ReactComponent as Certified } from '../../assets/image/generate-certificate.svg';\r\nimport { ReactComponent as CertificateSend } from '../../assets/image/certificate-Send.svg';\r\nimport { ReactComponent as CertificateCorrectionicon } from '../../assets/image/certificate-correction.svg';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport ApprovalHistory from './ApprovalHistory';\r\nimport PrintHistory from './PrintHistory';\r\nimport SentMailHistory from './SentMailHistory';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Results from './Results';\r\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, RegistrationSubType } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport CerGenTabs from '../batch/certificategeneration/CerGenTabs';\r\nimport DocViewer from '../../components/doc-viewer/doc-viewer.component';\r\n//import { Tooltip } from '@progress/kendo-react-tooltip';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SampleCertification extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const appHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const resultsDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const printHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const sentMailHistory = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const dataStateReportHistory = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        this.searchSampleRef = React.createRef();\r\n        this.state = {\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            controlMap: new Map(),\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            selectedFilter: {},\r\n            userRoleControlRights: [],\r\n            appHistoryDataState,\r\n            resultsDataState,\r\n            printHistoryDataState,\r\n            dataStateReportHistory,\r\n            sentMailHistory,\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 25\r\n        }\r\n        this.extractedReportHistoryColumnList = [\r\n            {  \"idsName\": \"IDS_VERSION\", \"dataField\": \"nversioncode\", \"width\": \"150px\" },\r\n            {  \"idsName\": \"IDS_STATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"150px\" },\r\n            {  \"idsName\": \"IDS_REPORTDATE\", \"dataField\": \"sgeneratedtime\", \"width\": \"250px\" },\r\n            {  \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"250px\" },\r\n            {   \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"150px\" },       \r\n            { \"idsName\": \"IDS_REPORTCOMMENTS\", \"dataField\": \"sreportcomments\", \"width\": \"250px\" },\r\n           \r\n        ]\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList = [\"scomponentname\",\"sarno\",\"sproductname\",\"ssamplecertificateversioncode\",\"sversion\",\r\n\t\t\"smanufname\",\"sspecname\",\"nrmsno\",\"dtransactiondate\",\"smanuflotno\"]\r\n    }\r\n\r\n    // onSampleTypeChange = (event, fieldName, labelname) => {\r\n    //     if (event !== null) {\r\n    //         let Map = {};\r\n    //         Map[\"nsampletypecode\"] = parseInt(event.value);\r\n    //         Map['userinfo'] = this.props.Login.userInfo;\r\n    //         this.props.getSampleCertTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n    //     }\r\n    // }\r\n\r\n    onRegSubTypeChange = (comboData, fieldName) => {\r\n        const regSubTypeValue = this.state.regSubTypeValue || {};\r\n        // regSubTypeValue[fieldName] = comboData;\r\n        // this.setState({ regSubTypeValue });\r\n        if (comboData.value !== this.state.regSubTypeValue.nregsubtypecode.value) {\r\n            let inputParamData = {};\r\n            let inputData = {\r\n                // nflag: 4,\r\n                FromDate: this.props.Login.masterData.FromDate,\r\n                ToDate: this.props.Login.masterData.ToDate,\r\n                nsampletypecode: this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RegistrationTypeValue.nregtypecode,\r\n                nregsubtypecode: comboData.value,\r\n                userinfo: this.props.Login.userInfo,\r\n            }\r\n            inputParamData = {\r\n                inputData,\r\n                masterData: {\r\n                    ...this.props.Login.masterData,\r\n                    //RegistrationSubTypeValue: comboData.item,\r\n                    operation: \"onChange\"\r\n                }\r\n            }\r\n            this.props.getApprovalVersionSampleCertification(inputParamData)\r\n        }\r\n        //this.props.getApprovalVersion(inputParamData)\r\n        //this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        regSubTypeValue[fieldName] = comboData;\r\n        this.setState({ regSubTypeValue });\r\n\r\n    }\r\n\r\n    onFilterChange = (comboData, fieldName) => {\r\n\r\n        const FilterStatusValue = this.state.FilterStatusValue || {};\r\n        FilterStatusValue[fieldName] = comboData;\r\n        this.setState({ FilterStatusValue });\r\n\r\n    }\r\n\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n        if (comboData.value !== this.props.Login.masterData.ApprovalVersionValue.napproveconfversioncode) {\r\n\r\n            const ApprovalVersionValue = comboData;\r\n            this.setState({ ApprovalVersionValue });\r\n\r\n            // let masterData = { ...this.props.Login.masterData, ApprovalVersionValue: comboData.item  }\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterData }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const operation = this.props.Login.screenData.inputParam.operation;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.screenData.inputParam.methodUrl === \"regenerateCertificate\"){\r\n            this.props.validateXMLEsignCredential(inputParam, \"openModal\"); \r\n        }\r\n        else if (operation === \"xml\")\r\n        {\r\n            this.props.validateXMLEsignCredential(inputParam, \"openModal\");\r\n        } \r\n        else if (operation === \"generate\") {\r\n            this.props.validateEsignforSampCerGen(inputParam, \"openModal\");\r\n        }\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleCertRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n    handleExpandChange = (row, dataState) => {\r\n\r\n        const viewParam = {\r\n            TransactionSampleResults: this.props.Login.masterData.TransactionSampleResults,\r\n            userInfo: this.props.Login.userInfo,\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            npreregno: \"npreregno\",\r\n            masterData: this.props.Login.masterData\r\n        };\r\n        this.props.getTestResultData({\r\n            ...viewParam, dataState,\r\n            primaryKeyValue: row[\"dataItem\"][viewParam.primaryKeyField], viewRow: row[\"dataItem\"]\r\n        });\r\n    }\r\n\r\n    generateCertificate = (operation, masterData, genCertificateId) => {\r\n\r\n        const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus\r\n\r\n        if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYCERTIFIEDORSENT\" }));\r\n        } else {\r\n            let postParam = {\r\n                inputListName: \"Registration\", selectedObject: \"SelectedRegistration\",\r\n                primaryKeyField: \"npreregno\",\r\n                unchangeList: [\"FromDate\", \"ToDate\"], isSingleGet: true\r\n            };\r\n            const inputParam = {\r\n                methodUrl: \"CertificationStatus\",\r\n                classUrl: \"samplecertification\",\r\n                postParam: postParam,\r\n                operation: \"generate\",\r\n                userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: genCertificateId,\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    methodUrl: \"generateCertificationStatus\",\r\n                    npreregno: masterData.SelectedRegistration.npreregno,\r\n                    ntransactionstatus: transactionStatus.CERTIFIED,\r\n                    registration: masterData.SelectedRegistration,\r\n                    nversioncode: 0,\r\n                    ncontrolcode: genCertificateId,\r\n                    operation: \"generate\",\r\n                    masterData: this.props.Login.masterData\r\n\r\n                }\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, genCertificateId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.generateCertificateAction(inputParam[\"inputData\"])\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    correctionCertificate = (operation, masterData, certificateCorrectionId) => {\r\n\r\n        const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus\r\n        if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\r\n            const inputParam = {\r\n                methodUrl: \"Certificate\",\r\n                classUrl: \"samplecertification\",\r\n                operation: \"correction\",\r\n                userinfo: this.props.Login.userInfo,\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    methodUrl: \"generateCertificationStatus\",\r\n                    npreregno: masterData.SelectedRegistration.npreregno,\r\n                    ntransactionstatus: transactionStatus.CERTIFIED,\r\n                    registration: masterData.SelectedRegistration,\r\n                    napprovalversioncode: String(masterData.SelectedRegistration.napprovalversioncode),\r\n                    fromDate: masterData.FromDate,\r\n                    toDate: masterData.ToDate,\r\n                    nregtypecode: masterData.SelectedRegistration.nregtypecode,\r\n                    nregsubtypecode: masterData.SelectedRegistration.nregsubtypecode\r\n\r\n                }\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, certificateCorrectionId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.correctionCertificateAction(inputParam[\"inputData\"], operation, this.props.Login.masterData, certificateCorrectionId)\r\n            }\r\n\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCERTIFIEDRECORD\" }));\r\n        }\r\n\r\n    }\r\n\r\n    xmlExport = (operation, masterData, XmlReportID) => {\r\n        const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus\r\n\r\n        if (masterData.SelectedRegistration.ndecisionstatus === transactionStatus.PASS) {\r\n            if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\r\n                let inputData = {\r\n                    methodUrl: \"xmlExport\",\r\n                    npreregno: masterData.SelectedRegistration.npreregno,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ntransactionstatus: transactionStatus.CERTIFIED,\r\n                    ncontrolcode: XmlReportID,\r\n                    registration: masterData.SelectedRegistration\r\n                }\r\n                const inputParam = {\r\n                    methodUrl: \"Export\",\r\n                    classUrl: \"samplecertification\",\r\n                    operation: \"xml\",\r\n                    userInfo: this.props.Login.userInfo,\r\n                    inputData\r\n\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, XmlReportID)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\", operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.xmlExportAction(inputParam[\"inputData\"], this.props.Login.masterData,inputData)\r\n                }\r\n\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCERTIFIEDRECORD\" }));\r\n            }\r\n        } else {\r\n            // toast.warn(this.props.intl.formatMessage({ id: \"IDS_DECISIONSTATUSFAILED\" }));\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANEXPORTXMLFORPASS\" }));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let showReport = this.props.Login.showReport;\r\n        if (this.props.Login.loadEsign) {\r\n            loadEsign = false;\r\n            selectedRecord.agree = false;\r\n            openModal = false;\r\n\r\n        } else {\r\n            selectedRecord = {};\r\n            showReport=false;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,showReport }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    checkConfirmation = (masterData, sendCertificateId) => {\r\n        const ntransactionstatus = masterData.SelectedRegistration.ntransactionstatus;\r\n\r\n        if (ntransactionstatus === transactionStatus.CERTIFIED || ntransactionstatus === transactionStatus.SENT) {\r\n            return rsapi.post(\"samplecertification/getSentCertifiedStatus\", {\r\n                \"npreregno\": this.props.Login.masterData.SelectedRegistration.npreregno,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            }).then(response => {\r\n                if (response.status === 202) {\r\n                    toast.warn(response.data);\r\n                }\r\n                else {\r\n                    this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                        this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                        response.data,\r\n                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                        // () => this.onClickSentesign(inputParam),\r\n                        () => this.sendCertificate(\"send\", masterData, sendCertificateId),\r\n                        false,\r\n                        undefined);\r\n                }\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCERTIFIEDRECORDTOSEND\" }));\r\n        }\r\n        // if (ntransactionstatus === transactionStatus.CERTIFIED) {\r\n        //     this.sendCertificate(\"send\", masterData, sendCertificateId);\r\n        // } else if (ntransactionstatus === transactionStatus.SENT) {\r\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_CERTIFICATERESEND\" }),\r\n        //         \"OK\", \"Cancel\", () => this.sendCertificate(\"send\", masterData, sendCertificateId));\r\n        // } else {\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCERTIFIEDRECORD\" }));\r\n        // }\r\n    }\r\n\r\n    sendCertificate = (operation, masterData, sendCertificateId) => {\r\n        let postParam = {\r\n            inputListName: \"Registration\", selectedObject: \"SelectedRegistration\",\r\n            primaryKeyField: \"npreregno\",\r\n            unchangeList: [\"FromDate\", \"ToDate\"], isSingleGet: true\r\n        };\r\n        const inputParam = {\r\n            methodUrl: \"Certification\",\r\n            classUrl: \"samplecertification\",\r\n            operation: \"send\",\r\n            userInfo: this.props.Login.userInfo,\r\n            postParam: postParam,\r\n            inputData: {\r\n                methodUrl: \"sendCertification\",\r\n                npreregno: masterData.SelectedRegistration.npreregno,\r\n                nregtypecode: masterData.SelectedRegistration.nregtypecode,\r\n                nregsubtypecode: masterData.SelectedRegistration.nregsubtypecode,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: transactionStatus.CERTIFIED,\r\n                registration: masterData.SelectedRegistration,\r\n                ncontrolcode: sendCertificateId\r\n            },\r\n        }\r\n\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, sendCertificateId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n\r\n            this.props.sentCertificateAction(inputParam[\"inputData\"], operation, this.props.Login.masterData)\r\n        }\r\n    }\r\n\r\n    // handleFilterDateChange = (dateName, dateValue) => {\r\n    //     const { selectedFilter } = this.state;\r\n    //     if (dateValue === null) {\r\n    //         dateValue = new Date();\r\n    //     }\r\n    //     selectedFilter[dateName] = dateValue;\r\n    //     this.setState({ selectedFilter });\r\n    // }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        let FromDate = this.props.Login.masterData.RealFromDate || new Date()\r\n        let ToDate = this.props.Login.masterData.RealToDate || new Date()\r\n        let obj = {}\r\n        if (dateName === 'fromDate') {\r\n            obj = convertDateValuetoString(dateValue, ToDate,this.props.Login.userInfo)\r\n            FromDate = obj.fromDate\r\n            ToDate = obj.toDate\r\n        } else {\r\n            obj = convertDateValuetoString(FromDate, dateValue,this.props.Login.userInfo)\r\n            FromDate = obj.fromDate\r\n            ToDate = obj.toDate\r\n\r\n        }\r\n        // let RealFromDate =obj.breadCrumbFrom;\r\n        // let RealToDate=obj.breadCrumbto;\r\n        // this.setState({RealFromDate, RealToDate});\r\n    \r\n        let inputParam = {\r\n            inputData: {\r\n                nflag: 2,\r\n                nregtypecode: this.state.RegTypeValue.nregtypecode.value,\r\n                nregsubtypecode: this.state.regSubTypeValue.nregsubtypecode.value,\r\n                userinfo: this.props.Login.userInfo,\r\n                FromDate: String(FromDate),\r\n                ToDate: String(ToDate)\r\n            },\r\n            masterData: this.props.Login.masterData\r\n\r\n        }\r\n        this.props.getApprovalVersionSampleCertification(inputParam)\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n       \r\n    //let SampleTypeValue = this.state.SampleTypeValue?this.state.SampleTypeValue.nsampletypecode:\"\"\r\n    \r\n        let RealSampleTypeValue = this.state.SampleTypeValue ? this.state.SampleTypeValue.nsampletypecode.item.ssampletypename : \"\"\r\n        let RealRegTypeValue = this.state.RegTypeValue ? this.state.RegTypeValue.nregtypecode.item.sregtypename : \"\"\r\n        let RealRegSubTypeValue = this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.item.sregsubtypename : \"\"\r\n        let RealFilterValue = this.state.FilterStatusValue && this.state.FilterStatusValue.ntransactionstatus? this.state.FilterStatusValue.ntransactionstatus.item : \"\"\r\n        let RealApprovalVersion = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.sversionname : \"\"\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate,\r\n            this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate,this.props.Login.userInfo)\r\n        // let RealFromDate = obj.fromDate || this.props.Login.masterData.RealFromDate\r\n        // let RealToDate = obj.toDate || this.props.Login.masterData.RealToDate\r\n        let RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let RealToDate = rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.toDate);\r\n        if(RealRegSubTypeValue !== \"\" && RealFilterValue !== \"\" && RealApprovalVersion !== \"\"){\r\n        let inputData = {\r\n            nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\r\n            nregtypecode: this.state.RegTypeValue.nregtypecode.value,\r\n            nregsubtypecode: this.state.regSubTypeValue.nregsubtypecode.value,\r\n            nfilterstatus: this.state.FilterStatusValue.ntransactionstatus.value,\r\n            napprovalversioncode: this.state.ApprovalVersionValue.value ? String(this.state.ApprovalVersionValue.value) : '-1',\r\n            userinfo: this.props.Login.userInfo,\r\n            approvalVersionValue: this.state.ApprovalVersionValue.item  \r\n\r\n        }\r\n        inputData['FromDate'] = obj.fromDate;\r\n        inputData['ToDate'] = obj.toDate;\r\n        this.setState({\r\n            RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterValue, RealFromDate, RealToDate\r\n        });\r\n\r\n        let masterData = {\r\n            ...this.props.Login.masterData,\r\n            RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterValue, RealFromDate, RealToDate, RealApprovalVersion\r\n        }\r\n        this.props.getWholeFilterStatus(masterData, inputData, \"FilterSubmit\", this.searchRef);\r\n         } else {\r\n                 toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n          }\r\n\r\n    }\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    reloadData = () => {\r\n        let SampleTypeValue = this.state.SampleTypeValue?this.state.SampleTypeValue.nsampletypecode:\"\"\r\n        if(SampleTypeValue !==\"\"){\r\n        let inputData = {\r\n            nsampletypecode: this.state.SampleTypeValue.nsampletypecode.value,\r\n            nregtypecode: this.state.RegTypeValue.nregtypecode.value,\r\n            nregsubtypecode: this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode :\r\n                this.state.regSubTypeValue ? this.state.regSubTypeValue.nregsubtypecode.value : \"\",\r\n            nfilterstatus: this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue.napprovalstatuscode :\r\n                this.state.FilterStatusValue ? this.state.FilterStatusValue.ntransactionstatus.value : \"\",\r\n            userinfo: this.props.Login.userInfo,\r\n            napprovalversioncode: this.state.ApprovalVersionValue.value ? String(this.state.ApprovalVersionValue.value) : '-1'\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n             && inputData.napprovalversioncode !== \"-1\" && inputData.nfilterstatus !== undefined)\r\n            {\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate,\r\n                    this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate,this.props.Login.userInfo)\r\n                inputData['FromDate'] = obj.fromDate;\r\n                inputData['ToDate'] = obj.toDate;\r\n                this.props.getWholeFilterStatus(this.props.Login.masterData, inputData, \"FilterSubmit\", this.searchRef);\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n            }\r\n        }else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    // dataStateChange = (event) => {\r\n    //     this.setState({\r\n    //         dataResult: process(this.props.Login.masterData.approvalHistory, event.dataState),\r\n    //         dataState: event.dataState\r\n    //     });\r\n    // }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_APPROVALHISTORY\",\r\n            <ApprovalHistory\r\n                approvalHistory={this.props.Login.masterData.approvalHistory}\r\n                dataResult={process(this.props.Login.masterData.approvalHistory || [], this.state.appHistoryDataState)}\r\n                dataState={this.state.appHistoryDataState}\r\n                controlMap={this.state.controlMap}\r\n                userInfo={this.props.Login.userInfo}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                dataStateChange={(event) => this.setState({ appHistoryDataState: event.dataState })}\r\n                screenName=\"IDS_APPROVALHISTORY\"\r\n            />\r\n        );\r\n        tabMap.set(\"IDS_CERTIFIEDREPORT\", <CerGenTabs\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            controlMap={this.state.controlMap}\r\n            inputParam={this.props.Login.inputParam}\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            primaryList={\"ReportHistory\"}\r\n            dataResult={process(this.props.Login.masterData[\"ReportHistory\"]||[], this.state.dataStateReportHistory)}\r\n            dataState={(this.props.screenName === undefined || this.props.screenName === \"IDS_BATCHREPORTHISTORY\") ? this.state.dataStateReportHistory : { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }}\r\n            dataStateChange={(event) => this.setState({ dataStateReportHistory: event.dataState })}\r\n            columnList={this.extractedReportHistoryColumnList}\r\n            methodUrl={\"Certificate\"}\r\n            isActionRequired={true}\r\n            selectedId={0}\r\n            expandField=\"\"\r\n            viewDownloadFile= {(inputParam)=>this.viewAttachment(inputParam)}\r\n            downloadParam = {{classUrl:\"samplecertification\",operation:\"download\",methodUrl:\"Report\"}}\r\n            hasControlWithOutRights={true}\r\n            viewReportFile={this.props.viewReportForSample}\r\n            showDocViewer={true}\r\n            isreportview={true}\r\n        />)\r\n        tabMap.set(\"IDS_PRINTHISTORY\",\r\n            <PrintHistory\r\n                printHistory={this.props.Login.masterData.printHistory}\r\n                dataResult={process(this.props.Login.masterData.printHistory || [], this.state.printHistoryDataState)}\r\n                dataState={this.state.printHistoryDataState}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={(event) => this.setState({ printHistoryDataState: event.dataState })}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_PRINTHISTORY\"\r\n            />);\r\n\r\n\r\n        tabMap.set(\"IDS_RESULTS\",\r\n            <Results\r\n                TransactionSampleTests={this.props.Login.masterData.TransactionSampleTests}\r\n                dataResult={process(this.props.Login.masterData.TransactionSampleTests || [], this.state.resultsDataState)}\r\n                dataState={(this.props.Login.screenName === \"\" || this.props.Login.screenName === \"IDS_RESULTS\") ? this.state.resultsDataState : { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={(event) => this.setState({ resultsDataState: event.dataState })}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                handleExpandChange={this.handleExpandChange}\r\n                screenName=\"IDS_RESULTS\"\r\n                childList={this.props.Login.masterData.sampleTestResults}\r\n                childMappingField={\"ntransactiontestcode\"}\r\n                hasChild={true}\r\n            // childList ={props.childList || new Map()}\r\n            />);\r\n\r\n\r\n        tabMap.set(\"IDS_MAILSTATUS\",\r\n            <SentMailHistory\r\n                printHistory={this.props.Login.masterData.emailSentHistory}\r\n                dataResult={process(this.props.Login.masterData.emailSentHistory || [], this.state.sentMailHistory)}\r\n                dataState={this.state.sentMailHistory}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={(event) => this.setState({ sentMailHistory: event.dataState })}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_MAILSTATUS\"\r\n            />);\r\n\r\n        return tabMap;\r\n\r\n    }\r\n\r\n    viewAttachment=(inputParam)=>{\r\n        inputParam.inputData = {...inputParam.inputData,ncontrolcode:inputParam.ncontrolCode}\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n    \r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        // setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    showConfirmAlert = (selectedRecord, flag, ReportId) => {\r\n        this.confirmMessage.confirm(\r\n            \"regenerate\",//name\r\n            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),//tittle\r\n            this.props.intl.formatMessage({ id: \"IDS_REGENERATECONFIRMATION\" }),//message\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),//do Label\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),//Do not label\r\n            () => this.onClickReport(selectedRecord, flag, ReportId),\r\n            undefined,\r\n            () => this.closeConfirmAlert());\r\n    }\r\n\r\n    closeConfirmAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onClickReport = (selectedRecord, flag, ReportId) => {\r\n        const reportParam = {\r\n            classUrl: \"samplecertification\",\r\n            methodUrl: \"regenerateCertificate\",\r\n            screenName: \"SampleCertification\",\r\n            operation: \"update\",\r\n            primaryKeyField: \"npreregno\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: ReportId,\r\n            inputData: {\r\n                sprimarykeyname: 'npreregno',\r\n                nprimarykey: selectedRecord.npreregno,\r\n                npreregno: selectedRecord.npreregno,\r\n                nregtypecode: selectedRecord.nregtypecode,\r\n                nregsubtypecode: selectedRecord.nregsubtypecode,\r\n                nsectioncode: transactionStatus.NA,\r\n                // ncertificatetypecode:selectedRecord.ndecisionstatuscode===transactionStatus.PASS&&flag===1?selectedRecord.ncertificatetypecode:-1,\r\n                ndecisionstatus: selectedRecord.ndecisionstatuscode,\r\n                ncontrolcode: ReportId,\r\n                nreporttypecode: reportTypeEnum.SAMPLE,\r\n                ncoareporttypecode: reportCOAType.SAMPLECERTIFICATE,\r\n                userinfo: this.props.Login.userInfo,\r\n                nflag: flag,\r\n                isRegenerate:true\r\n            }\r\n        };\r\n       // this.props.onClickReportSample(reportParam)\r\n       \r\n       if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ReportId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam:reportParam, masterData:this.props.Login.masterData },\r\n                    openModal: true, screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\", operation:reportParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.onClickReportSample(reportParam)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { SelectedRegistration, searchedData, Registration } = this.props.Login.masterData;\r\n        const getSample = {\r\n            screenName: \"IDS_SAMPLECERTIFICATIONGENERATION\", operation: \"get\", masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"SampleCertification\", keyName: \"samplecertification\"\r\n        };\r\n       \r\n        this.fromDate = (this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.RealFromDate);\r\n        this.toDate = (this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo,this.props.Login.masterData.RealToDate);\r\n        \r\n\r\n        // const { SampleCertification } = this.props.Login.masterData;\r\n        const genCertificateId = this.state.controlMap.has(\"GenerateCertificate\") && this.state.controlMap.get(\"GenerateCertificate\").ncontrolcode;\r\n        const sendCertificateId = this.state.controlMap.has(\"SendCertificate\") && this.state.controlMap.get(\"SendCertificate\").ncontrolcode;\r\n        const certificateCorrectionId = this.state.controlMap.has(\"CertificateCorrection\") && this.state.controlMap.get(\"CertificateCorrection\").ncontrolcode;\r\n        const ReportId = this.state.controlMap.has(\"Re-GenerateCetrificate\") && this.state.controlMap.get(\"Re-GenerateCetrificate\").ncontrolcode\r\n        const XmlReportID = this.state.controlMap.has(\"XmlReport\") && this.state.controlMap.get(\"XmlReport\").ncontrolcode;\r\n        this.confirmMessage = new ConfirmMessage();\r\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.RealFromDate,\r\n            this.state.selectedFilter.todate || this.props.Login.masterData.RealToDate,this.props.Login.userInfo)\r\n\r\n       // let breadCrumbFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealFromDate)\r\n        //let breadCrumbToDate=rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.RealToDate)\r\n    \r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom || this.state.RealFromDate\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto || this.state.RealToDate\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                //\"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                \"value\": this.state.RealSampleTypeValue\r\n            }, {\r\n                \"label\": \"IDS_REGTYPE\",\r\n                \"value\": this.state.RealRegTypeValue\r\n            }, {\r\n                \"label\": \"IDS_REGSUBTYPE\",\r\n                \"value\": this.state.RealRegSubTypeValue,\r\n            }, {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.state.RealFilterValue?this.state.RealFilterValue.stransdisplaystatus:\"-\"\r\n            },\r\n\r\n            {\r\n                \"label\": \"IDS_CONFIGVERSION\",\r\n                \"value\": this.state.RealApprovalVersion\r\n            }\r\n        ]\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"Registration\", selectedObject: \"SelectedRegistration\", primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"samplecertification/getSampleCertificationById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.searchFieldList\r\n        };\r\n\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n\r\n                    {this.breadCrumbData && this.breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} /> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={30}\r\n                              primaryMinSize={40} secondaryMinSize={20}>\r\n                                <TransactionListMaster\r\n                                    masterList={searchedData || Registration || []}\r\n                                    selectedMaster={[SelectedRegistration]}\r\n                                    primaryKeyField=\"npreregno\"\r\n                                    getMasterDetail={(SampleCertification) => this.props.getActiveSample(SampleCertification, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                    inputParam={getSample}\r\n                                    additionalParam={[]}\r\n                                    mainField=\"ssamplecertificateversioncode\"\r\n                                    mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_CERTIFICATENUMBER\" })}\r\n                                    listName=\"IDS_SAMPLE\"\r\n                                    showStatusLink={false}\r\n                                    subFieldsLabel={true}\r\n                                    subFields={\r\n                                        [\r\n                                            { [designProperties.LABEL]: \"IDS_ARNO\", [designProperties.VALUE]: \"sarno\" },\r\n                                            { [designProperties.LABEL]: \"IDS_MANUFACTURERLOTNO\", [designProperties.VALUE]: \"smanuflotno\" },\r\n                                            { [designProperties.LABEL]: \"IDS_COMPONENT\", [designProperties.VALUE]: \"scomponentname\" },\r\n                                            // { [designProperties.LABEL]: \"IDS_STATUS\", [designProperties.VALUE]: \"stransdisplaystatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\r\n                                        ]\r\n                                    }\r\n                                    // moreField=\"sarno\"\r\n                                    //needValidation={false}\r\n                                    needFilter={true}\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                onClick={() => this.reloadData()} >\r\n                                                <RefreshIcon className='custom_icons'/>\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_SAMPLECERTIFICATEGENERATION\": <SampleCertificationFilter\r\n                                                formatMessage={this.props.intl.formatMessage}\r\n                                                Product={this.props.Login.masterData.MAHProduct || []}\r\n                                                SampleType={this.state.SampleType || []}\r\n                                                RegistrationType={this.state.RegistrationType || []}\r\n                                                RegistrationSubType={this.state.RegistrationSubType || []}\r\n                                                FilterStatus={this.state.FilterList || []}\r\n                                                ApprovalVersion={this.state.ApprovalValue || []}\r\n                                                ApprovalVersionValue={this.state.ApprovalVersionValue || []}\r\n                                                userInfo={this.props.Login.userInfo || {}}\r\n                                                SampleTypeValue={this.state.SampleTypeValue || {}}\r\n                                                RegTypeValue={this.state.RegTypeValue || {}}\r\n                                                regSubTypeValue={this.state.regSubTypeValue || {}}\r\n                                                FilterStatusValue={this.state.FilterStatusValue || {}}\r\n                                                // FilterStatusValue={this.props.Login.masterData.FilterStatus || {}}\r\n                                                FromDate={this.fromDate}\r\n                                                ToDate={this.toDate}\r\n                                                onSampleTypeChange={this.onSampleTypeChange}\r\n                                                onRegTypeChange={this.onRegTypeChange}\r\n                                                onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                onFilterComboChange={this.onFilterComboChange}\r\n                                                onFilterChange={this.onFilterChange}\r\n\r\n                                            />\r\n                                        }\r\n                                    ]}\r\n                                />\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\">\r\n                                    <PerfectScrollbar>\r\n\r\n                                        <div className=\"card_group\">\r\n                                            <ContentPanel className=\"panel-main-content\">\r\n                                                <Card className=\"border-0\">\r\n                                                    {this.props.Login.masterData.SelectedRegistration ?\r\n                                                        <>\r\n                                                            <Card.Header>\r\n                                                                {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                <Card.Title className=\"product-title-main\">\r\n                                                                    {this.props.Login.masterData.SelectedRegistration.sarno}\r\n                                                                </Card.Title>\r\n\r\n                                                                <Card.Subtitle>\r\n                                                                    <div className=\"d-flex product-category\">\r\n                                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                            <OutlineTransactionStatus\r\n                                                                                transcolor={this.props.Login.masterData.SelectedRegistration.scolorhexcode}>\r\n                                                                                {this.props.Login.masterData.SelectedRegistration.stransdisplaystatus}\r\n                                                                            </OutlineTransactionStatus>\r\n                                                                            {/* <DecisionStatus\r\n                                                                                decisioncolor={this.props.Login.masterData.SelectedRegistration.sdecisioncolor}>\r\n                                                                                {this.props.Login.masterData.SelectedRegistration.sdecisionstatus}\r\n                                                                            </DecisionStatus> */}\r\n\r\n                                                                            {/* <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                                                {this.props.Login.masterData.SelectedRegistration.sdecisionstatus}\r\n                                                                            </span> */}\r\n                                                                        </h2>\r\n                                                                        <div className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                                                            {/* certificate Generation */}\r\n                                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                            <Nav.Link\r\n                                                                                name=\"generateCertificate\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(genCertificateId) === -1}\r\n                                                                                className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                                ///onClick = {()=>this.props.(editParam)}\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_GENERATECERTIFICATE\" })}\r\n                                                                                onClick={(e) => this.generateCertificate(\"generate\", this.props.Login.masterData, genCertificateId)}\r\n                                                                            >\r\n                                                                                <Certified className=\"custom_icons\" width=\"20\" height=\"20\" name=\"Certified\" />\r\n                                                                            </Nav.Link>\r\n                                                                            {/* Certificate Correction */}\r\n                                                                            <Nav.Link name=\"correctionCertificate\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(certificateCorrectionId) === -1}\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_RECERTIFICATECORRECTION\" })}\r\n                                                                                onClick={(e) => this.correctionCertificate(\"CorrectionCertificate\", this.props.Login.masterData, certificateCorrectionId)}\r\n                                                                            >\r\n                                                                                <CertificateCorrectionicon className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                    name=\"Correction\"\r\n                                                                                />\r\n                                                                            </Nav.Link>\r\n                                                                            {/* Send Certificate */}\r\n                                                                            <Nav.Link name=\"sendCertificate\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(sendCertificateId) === -1}\r\n                                                                                className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_SENDCERTIFICATE\" })}\r\n                                                                                onClick={(e) => this.checkConfirmation(this.props.Login.masterData, sendCertificateId)}\r\n                                                                            >\r\n                                                                                <CertificateSend className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                    name=\"Sent\"\r\n                                                                                />\r\n                                                                            </Nav.Link>\r\n                                                                            {/* Certificate XML */}\r\n                                                                            <Nav.Link name=\"xmlExport\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(XmlReportID) === -1}\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_XMLEXPORT\" })}\r\n                                                                                onClick={(e) => this.xmlExport(\"Export\", this.props.Login.masterData, XmlReportID)}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faFileCode} />\r\n                                                                            </Nav.Link>\r\n\r\n                                                                            <Nav.Link name=\"Report\"\r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REGENREATEREPORT\" })} hidden={this.state.userRoleControlRights.indexOf(ReportId) === -1}\r\n                                                                                className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                                onClick={() => this.showConfirmAlert(this.props.Login.masterData.SelectedRegistration, 1, ReportId)}\r\n                                                                            >\r\n                                                                                {/* <CertificateSend className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                        name=\"ReportView\"\r\n                                                                                        /> */}\r\n                                                                                <CertificateSend className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                    name=\"Sent\"\r\n                                                                                />\r\n                                                                            </Nav.Link>\r\n                                                                            {/* </Tooltip> */}\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </Card.Subtitle>\r\n                                                            </Card.Header>\r\n                                                            <Card.Body>\r\n                                                                <Row>\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_ARNO\" message=\"Arno\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sarno}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_COMPONENTNAME\" message=\"Componentname\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.scomponentname}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_GENERICPRODUCT\" message=\"Generic Product\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sproductname}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_CERTIFICATENUMBER\" message=\"Certificate No.\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.ssamplecertificateversioncode}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_VERSION\" message=\"Version\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sversion}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_MANUFACTURENAME\" message=\"Manufacturename\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.smanufname}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                    \r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_SPECIFICATIONSTUDYPLAN\" message=\"Specificationname\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sspecname}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n\r\n\r\n                                                                    {this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL ?\r\n                                                                        <Col md={4}>\r\n                                                                            <FormGroup>\r\n                                                                                <FormLabel><FormattedMessage id=\"IDS_RMSNO\" message=\"Rmsno\" /></FormLabel>\r\n                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.nrmsno}</ReadOnlyText>\r\n                                                                            </FormGroup>\r\n                                                                        </Col>\r\n                                                                        : \"\"\r\n                                                                    }\r\n\r\n\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_REGISTRATIONDATE\" message=\"RegistrationDate\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.dtransactiondate}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_MANUFLOTNO\" message=\"Manuf Lot No.\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.smanuflotno}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_DECISIONSTATUS\" message=\"Decisionstatus\" /></FormLabel>\r\n                                                                            <DecisionStatus style={{ marginLeft: \"0rem\" }}\r\n                                                                                decisioncolor={this.props.Login.masterData.SelectedRegistration.sdecisioncolor}>\r\n                                                                                {this.props.Login.masterData.SelectedRegistration.sdecisionstatus}\r\n                                                                            </DecisionStatus>\r\n                                                                            {/* <ReadOnlyText>{this.props.Login.masterData.SelectedRegistration.sdecisionstatus}</ReadOnlyText> */}\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                                <div className=\"horizontal-line\"></div>\r\n\r\n                                                                <Row>\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_USERNAME\" message=\"User Name\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ? this.props.Login.masterData.CertificateHistoryView[0].username : \"-\"}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_USERROLE\" message=\"User Role\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ? this.props.Login.masterData.CertificateHistoryView[0].suserrolename : \"-\"}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                    <Col md={4}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_CERTIFIEDDATE\" message=\"Certified Date\" /></FormLabel>\r\n                                                                            <ReadOnlyText>{this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ? this.props.Login.masterData.CertificateHistoryView[0].scertificatedate : \"-\"}</ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                    <Col md={12}>\r\n                                                                        <FormGroup>\r\n                                                                            <FormLabel><FormattedMessage id=\"IDS_CERTIFICATECOMMENTS\" message=\"Certificate Comments\" /></FormLabel>\r\n                                                                            <ReadOnlyText>\r\n                                                                                {\r\n                                                                                    this.props.Login.masterData.CertificateHistoryView && this.props.Login.masterData.CertificateHistoryView[0] ?\r\n                                                                                        this.props.Login.masterData.CertificateHistoryView[0].scomments === \"\" || this.props.Login.masterData.CertificateHistoryView[0].scomments === null ?\r\n                                                                                            \"-\" : this.props.Login.masterData.CertificateHistoryView[0].scomments\r\n                                                                                        : \"-\"\r\n                                                                                }\r\n                                                                            </ReadOnlyText>\r\n                                                                        </FormGroup>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n\r\n                                                                <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n\r\n                                                            </Card.Body>\r\n                                                        </>\r\n\r\n                                                        : \"\"}\r\n                                                </Card>\r\n                                            </ContentPanel>\r\n                                        </div>\r\n                                    </PerfectScrollbar>\r\n                                </SplitterLayout>\r\n                            </SplitterLayout >\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n                {this.props.Login.showReport ?\r\n                    <DocViewer file={fileViewUrl() + this.props.Login.ViewUrl} \r\n                    showReport = {this.props.Login.showReport}\r\n                    closeModal = {this.closeModal}\r\n                    type={\"pdf\"}>\r\n                    </DocViewer>  \r\n                    :\"\"\r\n                }\r\n\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        showSaveContinue={this.state.showSaveContinue}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : \"\"}\r\n                    /> : \"\"}\r\n                {/* End of Modal Sideout for GoodsIn Creation */}\r\n            </>\r\n\r\n        );\r\n\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const SampleMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                \"ssampletypename\", undefined, undefined, true);\r\n            const SampleType = SampleMap.get(\"OptionList\");\r\n            const SampleTypeValue = { nsampletypecode: SampleType.length > 0 ? SampleType[0] : \"\" };\r\n\r\n            const RegMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                \"sregtypename\", undefined, undefined, true);\r\n            const RegistrationType = RegMap.get(\"OptionList\");\r\n            const RegTypeValue = { nregtypecode: RegistrationType.length > 0 ? RegistrationType[0] : \"\" };\r\n\r\n            const RegSubMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                \"sregsubtypename\", 'nsorter', \"ascending\", false);\r\n            const RegistrationSubType = RegSubMap.get(\"OptionList\");\r\n            //const regSubTypeValue = {nregsubtypecode: RegistrationSubType.length> 0? RegistrationSubType[2]: \"\"};\r\n\r\n            const FilterStatus = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"napprovalstatuscode\",\r\n                \"stransdisplaystatus\", undefined, undefined, true);\r\n            const FilterList = FilterStatus.get(\"OptionList\")\r\n\r\n            const ConfigVersionList = constructOptionList(this.props.Login.masterData.ApprovalVersion || [],\r\n                \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\r\n            const ApprovalValue = ConfigVersionList.get(\"OptionList\");\r\n            // const ApprovalVersionValue = ApprovalValue.length > 0 ? ApprovalValue[0] : \"\" \r\n\r\n            // const Transcolor=  this.props.Login.masterData?this.props.Login.masterData[\"SelectedRegistration\"][\"stransdisplaystatus\"]\r\n            // :\"\"\r\n            // let  Transdisplaystatus={};\r\n            // if(this.props.Login.masterData.SelectedRegistration.stransdisplaystatus===transactionStatus.CERTIFIED){\r\n            //     Transdisplaystatus = this.props.Login.masterData[\"SelectedRegistration\"][\"stransdisplaystatus\"]\r\n            // }\r\n            let FilterStatusValue = {};\r\n            let regSubTypeValue = {};\r\n            let ApprovalVersionValue = {};\r\n            if (this.props.Login.masterData.operation === \"FilterSubmit\" || this.props.Login.masterData.operation === \"onChange\") {\r\n                //FilterStatusValue = this.props.Login.masterData.FilterStatusValue //this.state.FilterStatusValue\r\n                FilterStatusValue = { ntransactionstatus: { \"label\": this.props.Login.masterData.FilterStatusValue.stransdisplaystatus, \"value\": this.props.Login.masterData.FilterStatusValue.napprovalstatuscode ,\r\n                \"item\":this.props.Login.masterData.FilterStatusValue}};\r\n                regSubTypeValue = this.state.regSubTypeValue\r\n                ApprovalVersionValue = this.props.Login.masterData.ApprovalVersionValue ?\r\n                    {\r\n                        label: this.props.Login.masterData.ApprovalVersionValue.sversionname,\r\n                        value: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\r\n                        item: this.props.Login.masterData.ApprovalVersionValue\r\n                    }\r\n                    : this.state.ApprovalVersionValue\r\n            }\r\n            else {\r\n                FilterStatusValue = { ntransactionstatus: FilterList.length > 0 ? FilterList[0] : \"\" };\r\n                regSubTypeValue = {\r\n                    nregsubtypecode: RegistrationSubType.length > 0 ?\r\n                        {\r\n                            label: this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename,\r\n                            value: this.props.Login.masterData.RegistrationSubTypeValue.nregsubtypecode,\r\n                            item: this.props.Login.masterData.ApprovalVersionValue\r\n                        }\r\n                        : \"\"\r\n                };\r\n                ApprovalVersionValue = ApprovalValue.length > 0 ? ApprovalValue[0] : \"\"\r\n            }\r\n            let RealFilterValue = {};\r\n            let RealRegSubTypeValue = {};\r\n            let RealFromDate = {};\r\n            let RealToDate = {};\r\n            let RealApprovalVersion = {};\r\n            if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData) {\r\n\r\n                RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue :\r\n                    this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue :\"\"\r\n                       \r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RealRegSubTypeValue !== previousProps.Login.masterData) {\r\n\r\n                RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue :\r\n                    this.props.Login.masterData.RegistrationSubTypeValue ? this.props.Login.masterData.RegistrationSubTypeValue.sregsubtypename :\"\"\r\n                        // this.props.intl.formatMessage({ id: \"IDS_PLASMAPOOL\" })\r\n\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.RealFromDate !== previousProps.Login.masterData) {\r\n\r\n                RealFromDate = this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate :\r\n                    this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate : \"\"\r\n\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.RealToDate !== previousProps.Login.masterData) {\r\n\r\n                RealToDate = this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate :\r\n                    this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate : \"\"\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.ApprovalVersionValue !== previousProps.Login.masterData) {\r\n\r\n                RealApprovalVersion = this.props.Login.masterData.RealApprovalVersion ? this.props.Login.masterData.RealApprovalVersion :\r\n                    this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname :\r\n                        \" - \"\r\n\r\n            }\r\n\r\n\r\n            // const RealFromDate = this.props.Login.masterData.RealFromDate ? this.props.Login.masterData.RealFromDate:\"\"\r\n            // const RealToDate = this.props.Login.masterData.RealToDate ? this.props.Login.masterData.RealToDate:\"\"\r\n            const RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename : \"\"\r\n            const RealRegTypeValue = this.props.Login.masterData.RegistrationTypeValue ? this.props.Login.masterData.RegistrationTypeValue.sregtypename : \"\"\r\n          \r\n          \r\n        \r\n            let {appHistoryDataState,\r\n                resultsDataState,printHistoryDataState,sentMailHistory } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                if (this.props.screenName === \"IDS_APPROVALHISTORY\") {\r\n                    appHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                }  else if (this.props.screenName === \"IDS_MAILSTATUS\") {\r\n                    sentMailHistory = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                } else if (this.props.screenName === \"IDS_PRINTHISTORY\") {\r\n                    printHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                }       \r\n                else if (this.props.screenName === \"IDS_RESULTS\") {\r\n                    resultsDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                }          \r\n                else {\r\n                     appHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                     resultsDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                     printHistoryDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                     sentMailHistory = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n                }\r\n            };\r\n          \r\n            this.setState({\r\n                appHistoryDataState,resultsDataState,printHistoryDataState,sentMailHistory,SampleType, RegistrationType, RegistrationSubType, FilterList, SampleTypeValue, RegTypeValue, RealSampleTypeValue,\r\n                regSubTypeValue, FilterStatusValue, RealRegTypeValue, RealRegSubTypeValue, RealFilterValue,\r\n                RealFromDate, RealToDate, ApprovalValue, RealApprovalVersion, ApprovalVersionValue\r\n            });\r\n\r\n        }\r\n        // if (this.props.Login.masterData.RealFilterValue !== previousProps.Login.masterData)  {\r\n\r\n        //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\r\n\r\n        //     this.setState({RealFilterValue});\r\n        //  }\r\n        //else{\r\n        //     const RealFilterValue = this.props.Login.masterData.RealFilterValue ? this.props.Login.masterData.RealFilterValue:\"\"\r\n\r\n        //     //this.setState({RealFilterValue});\r\n        // }this.state.regSubTypeValue\r\n\r\n\r\n\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSampleCertTypeChange, filterColumnData,viewAttachment,\r\n    getSampleCertRegSubTypeChange, getTestResultData, getActiveSample, generateCertificateAction, sentCertificateAction,viewReportForSample,\r\n    correctionCertificateAction, xmlExportAction, getWholeFilterStatus, validateXMLEsignCredential, getApprovalVersionSampleCertification, onClickReportSample,validateEsignforSampCerGen\r\n\r\n}\r\n)(injectIntl(SampleCertification));"]},"metadata":{},"sourceType":"module"}