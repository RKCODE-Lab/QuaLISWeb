{"ast":null,"code":"import { toast } from 'react-toastify';\nimport rsapi from '../rsapi';\nimport { initRequest, updateStore } from './LoginAction';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { sortData, searchData, searchJsonData, replaceUpdatedObject, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { selectedDashBoardView } from './DashBoardTypeAction';\nimport Axios from \"axios\";\nimport { designComponents } from '../components/Enumeration'; // import { getValidComponent } from '../components/droparea/helpers';\n//import { Engine } from 'json-rules-engine';\n//import employee from '../rules/Employee-Salary.json';\n\nexport const callService = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(inputParam.classUrl + \"/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      // console.log(\"res:\", response);\n      ///Start of Rule Engine code///////////////////////\n      // const decisions1 = [\n      //   {\n      //       \"conditions\": {\n      //           \"all\": [\n      //               {\n      //                   \"fact\": \"Designation\",\n      //                   \"operator\": \"equal\",\n      //                   \"value\": \"Manager\"\n      //               },\n      //               {\n      //                   \"fact\": \"Experience\",\n      //                   \"operator\": \"greaterThan\",\n      //                   \"value\": 10\n      //               }\n      //           ]\n      //       },\n      //       \"event\": {\n      //           \"type\": \"RS.1500000\",\n      //           \"params\": {message: 'Your Salary is 1500000/annum!'}\n      //       }\n      //   }\n      // ];\n      // console.log(\"decisions:\",decisions1);  \n      // const inputs1 = {Designation: 'Manager', Experience: 9 };\n      // const engine = new Engine(employee.decisions);   \n      // engine.run(inputs1)\n      // .then(results => {       \n      //   console.log(\"Rule output:\", results.events);\n      //   if ( results.events.length > 0){\n      //     const events = results.events;\n      //     events.map(event => console.log(\"Message:\",event.params.message)); \n      //     rsapi.post(\"section/getSection\" , inputParam.inputData)\n      //     .then(response => {\n      //       console.log(\"data:\", response);\n      //       let data = response.data;\n      //       sortData(data);\n      //       const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: { masterData: [], organisation: undefined, }\n      //       }\n      //       dispatch(updateStore(updateInfo))\n      //       dispatch({\n      //         type: DEFAULT_RETURN,\n      //         payload: {\n      //           masterData: data,\n      //           activeTestTab: data.activeTestTab,\n      //           activeTestKey: data.activeTestKey,\n      //           activeBCTab: data.activeBCTab,\n      //           inputParam: inputParam,\n      //           masterStatus: \"\",\n      //           userInfo: inputParam.inputData.userinfo,\n      //           loading: false, selectedId: null, selectedRecord: {},\n      //           dataState: undefined,\n      //           organisation: {\n      //             selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\n      //             primaryKeyValue: data.AddedChildPrimaryKey\n      //           },\n      //           displayName: inputParam.displayName,\n      //           reportFilePath: undefined\n      //         }\n      //       })\n      //     })\n      //     .catch(error => {\n      //       if (error.response === undefined && error === \"Network Error\") {\n      //         dispatch({\n      //           type: REQUEST_FAILURE,\n      //           payload: {\n      //             error: \"Network Error\",\n      //             loading: false,\n      //           }\n      //         });\n      //       } else if (error.response.status === 417) {\n      //         toast.warning(error.response.data);\n      //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\n      //       } else {\n      //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\n      //       }\n      //     })\n      //   }\n      //   else{\n      //     console.log(\"Message:\",\"Rules Failed\");\n      //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\n      //   }         \n      // })\n      ///End of Rule Engine code///////////////////////\n      ////uncomment below for Orginial Source start////////////////////\n      let data = response.data;\n      sortData(data);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: [],\n          organisation: undefined\n        }\n      };\n      dispatch(updateStore(updateInfo));\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: data,\n          activeTestTab: data.activeTestTab,\n          activeTestKey: data.activeTestKey,\n          activeBCTab: data.activeBCTab,\n          inputParam: inputParam,\n          masterStatus: \"\",\n          userInfo: inputParam.inputData.userinfo,\n          loading: false,\n          selectedId: null,\n          selectedRecord: {},\n          dataState: undefined,\n          organisation: {\n            selectedNode: data.SelectedNode,\n            selectedNodeName: data.SelectedNodeName,\n            primaryKeyValue: data.AddedChildPrimaryKey\n          },\n          displayName: inputParam.displayName,\n          reportFilePath: undefined,\n          skip: 0,\n          take: undefined,\n          testskip: 0,\n          testtake: 5\n        }\n      }); ///Uncomment till above for original source\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      if (error.response === undefined && error === \"Network Error\") {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: \"Network Error\",\n            loading: false\n          }\n        });\n      } else if (error.response.status === 417) {\n        toast.warning(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            displayName: inputParam.displayName,\n            userInfo: inputParam.inputData.userinfo\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            displayName: inputParam.displayName,\n            userInfo: inputParam.inputData.userinfo\n          }\n        });\n      }\n    });\n  };\n}; //Start- Add /Edit/Delete Master Data\n\nexport function crudMaster(inputParam, masterData, modalName, defaultInput) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      const formData = inputParam.formData;\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\n    } else {\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n      });\n    }\n\n    return requestUrl.then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        const retrievedData = sortData(response.data);\n\n        if (masterData === undefined || Array.isArray(retrievedData)) {\n          masterData = retrievedData;\n        } else {\n          masterData = { ...masterData,\n            ...retrievedData\n          };\n\n          if (modalName === \"openModal\" && inputParam.operation !== \"delete\" && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\n            if (inputParam.postParam) {\n              if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\n              }\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]); //masterData[inputParam.postParam.selectedObject] = response.data;\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {\n            //searchedData\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n              masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n\n              if (masterData[\"searchedData\"] !== undefined) {\n                const foundIndex = masterData[\"searchedData\"].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              }\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"delete\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              if (inputParam.postParam.task === \"cancel\") {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const list = masterData[inputParam.postParam.inputListName].filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue);\n                masterData[inputParam.postParam.inputListName] = list; // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\n                //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\n                // );\n                // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \n              }\n\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          }\n        } // (masterData);\n\n\n        let openModal = false;\n        let selectedRecord = {};\n        let activeSampleTab = inputParam.activeSampleTab ? {\n          activeSampleTab: inputParam.activeSampleTab\n        } : '';\n        let activeTestKey = inputParam.activeTestKey ? {\n          activeTestKey: inputParam.activeTestKey\n        } : '';\n        let showSample = inputParam.showSample ? inputParam.showSample : '';\n        let respObject = {\n          masterData,\n          inputParam,\n          modalName,\n          //modalName:undefined,\n          [modalName]: openModal,\n          operation: inputParam.operation,\n          masterStatus: \"\",\n          errorCode: undefined,\n          loadEsign: false,\n          showEsign: false,\n          selectedRecord,\n          loading: false,\n          dataState: inputParam.dataState,\n          selectedId: inputParam.selectedId,\n          ...activeSampleTab,\n          ...activeTestKey,\n          showSample,\n          design: [],\n          //organisation: undefined\n          organisation: inputParam.nextNode ? {\n            selectedNode: inputParam.nextNode,\n            selectedNodeName: masterData.SelectedNodeName,\n            primaryKeyValue: masterData.AddedChildPrimaryKey\n          } : undefined,\n          showConfirmAlert: inputParam.showConfirmAlert,\n          loadPoolSource: inputParam.loadPoolSource,\n          skip: inputParam.skip || undefined,\n          take: inputParam.take || undefined\n        };\n\n        if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\n          if (inputParam.saveType === 2) {\n            openModal = true;\n            selectedRecord = defaultInput;\n          }\n\n          respObject = { ...respObject,\n            [modalName]: openModal,\n            selectedRecord\n          };\n        }\n\n        if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1 && masterData[\"searchedData\"] !== undefined) {\n          dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject));\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              modalName: undefined\n            }\n          });\n        }\n      }\n    }).catch(response => {\n      console.log(\"error:\", response);\n\n      if (response.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: response.message,\n            loading: false\n          }\n        });\n      } else {\n        if (inputParam.operation === \"delete\" || inputParam.operation === \"receive\" || inputParam.operation === 'approve' || inputParam.operation === \"correction\" || inputParam.operation === \"complete\" || inputParam.operation === \"dynamic\" || inputParam.operation === \"setDefault\" || inputParam.operation === \"reset\" || inputParam.operation === \"xml\" || inputParam.operation === 'blackList' || inputParam.operation === 'attendance' || inputParam.operation === 'certified' || inputParam.operation === 'competent' || inputParam.operation === \"invite\" || inputParam.operation === \"cancel\" || inputParam.operation === \"cancel\" || inputParam.operation === \"conduct\" || inputParam.operation === \"attend\" || inputParam.operation === \"certify\" || inputParam.operation === \"Competent\") {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterStatus: response.response.data,\n              errorCode: response.response.status,\n              loadEsign: false,\n              [modalName]: false,\n              loading: false\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterStatus: response.response.data,\n              errorCode: response.response.status,\n              loadEsign: false,\n              loading: false\n            }\n          });\n        }\n      }\n    });\n  };\n}\nexport const validateEsignCredential = (inputParam, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(crudMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const fetchRecord = fetchRecordParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n    rsapi.post(url, {\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n      \"userinfo\": fetchRecordParam.userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: response.data,\n          screenName: fetchRecordParam.screenName,\n          operation: fetchRecordParam.operation,\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId: fetchRecordParam.primaryKeyValue\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function filterColumnData(filterValue, filterParam) {\n  return function (dispatch) {\n    let masterData = filterParam.masterData;\n    let primaryKeyValue = 0;\n    let searchedData = undefined;\n\n    if (filterValue === \"\") {\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n        // if(filterParam.isjsondata)\n        // {\n        //    primaryKeyValue = masterData[filterParam.inputListName][0][\"jsondata\"][filterParam.primaryKeyField]\n        //  }\n        //else\n        // {\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField]; // }\n      }\n    } else {\n      if (filterParam.isjsondata) {\n        searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      } else {\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      }\n\n      if (searchedData.length > 0) {\n        //  if(filterParam.isjsondata)\n        // {\n        //  primaryKeyValue = searchedData[0][\"jsondata\"][filterParam.primaryKeyField];\n        //  }\n        // else{\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField]; //  }\n      }\n    }\n\n    if (primaryKeyValue !== 0) {\n      dispatch(initRequest(true));\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n        [filterParam.primaryKeyField]: primaryKeyValue\n      }).then(response => {\n        masterData[\"searchedData\"] = searchedData;\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (filterParam.inputListName === \"DashBoardView\") {\n          dispatch(selectedDashBoardView(response, masterData));\n        } else {\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              skip: 0,\n              take: 10,\n              selectedId: null\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      masterData[filterParam.selectedObject] = undefined;\n      masterData[\"searchedData\"] = [];\n      Object.keys(masterData).forEach(item => {\n        if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function postCRUDOrganiseSearch(postParam, respObject) {\n  return function (dispatch) {\n    let masterData = respObject.masterData;\n\n    if (respObject.inputParam.operation === \"create\" || respObject.inputParam.operation === \"copy\") {\n      if (respObject.modalName === \"openModal\") {\n        if (respObject.inputParam.isChild === undefined) {\n          respObject.inputParam.searchRef.current.value = \"\";\n          masterData[\"searchedData\"] = undefined;\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          modalName: undefined\n        }\n      });\n    } else if (respObject.inputParam.operation === \"delete\") {\n      if (masterData[\"searchedData\"] !== undefined && respObject.modalName === \"openModal\") {\n        let temp = masterData[\"searchedData\"];\n        let primaryKeyValue = respObject.masterData[\"searchedData\"][0][postParam.primaryKeyField];\n\n        if (respObject.inputParam.isChild === undefined) {\n          temp = masterData[\"searchedData\"].filter(item => Array.isArray(postParam.primaryKeyValue) ? !postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]) : item[postParam.primaryKeyField] !== postParam.primaryKeyValue);\n          primaryKeyValue = temp.length > 0 ? temp[0][postParam.primaryKeyField] : 0;\n        } else {\n          primaryKeyValue = masterData[postParam.selectedObject][postParam.primaryKeyField];\n        }\n\n        masterData[\"searchedData\"] = temp;\n        respObject = { ...respObject,\n          modalName: undefined\n        };\n\n        if (masterData[\"searchedData\"].length > 0) {\n          primaryKeyValue = masterData[\"searchedData\"][0][postParam.primaryKeyField];\n          return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject,\n            [postParam.primaryKeyField]: primaryKeyValue\n          }).then(response => {\n            masterData = { ...masterData,\n              ...response.data\n            };\n            sortData(masterData);\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject,\n                masterData\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: { ...respObject\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(intl.formatMessage({\n                id: error.message\n              }));\n            } else {\n              toast.warn(intl.formatMessage({\n                id: error.response.data\n              }));\n            }\n          });\n        } else {\n          masterData[postParam.selectedObject] = undefined;\n          masterData[\"searchedData\"] = [];\n          Object.keys(masterData).forEach(item => {\n            if (item !== postParam.inputListName && item !== postParam.selectedObject && postParam.unchangeList && postParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              masterData\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...respObject,\n            masterData,\n            modalName: undefined\n          }\n        });\n      }\n    } else if (respObject.inputParam.filtercombochange) {\n      respObject = { ...respObject,\n        modalName: undefined\n      };\n\n      if (masterData[\"searchedData\"] !== undefined) {\n        masterData[\"searchedData\"] = undefined;\n        respObject.inputParam.searchRef.current.value = \"\";\n      }\n\n      let Map = {};\n\n      if (postParam.selectedComboName !== undefined) {\n        Map = {\n          [postParam.selectedComboName]: {\n            [postParam.selectedComboId]: postParam.selectedCombo\n          },\n          comboSet: true\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          ...Map\n        }\n      });\n    } else {\n      respObject = { ...respObject,\n        modalName: undefined\n      };\n\n      if (masterData[\"searchedData\"] !== undefined) {\n        if (masterData[postParam.selectedObject][postParam.primaryKeyField]) {\n          const foundIndex = masterData[\"searchedData\"].findIndex(x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][postParam.primaryKeyField]);\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject];\n        } else {\n          const foundIndex = masterData[\"searchedData\"].findIndex(x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][0][postParam.primaryKeyField]);\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject][0];\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData\n        }\n      });\n    }\n  };\n}\nexport const viewAttachment = inputParam => {\n  return dispatch => {\n    let inputData = { ...inputParam.inputData\n    };\n\n    if (inputData['selectedRecord']) {\n      delete inputData['selectedRecord']['expanded'];\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      let value = \"\";\n\n      if (response.data[\"AttachFile\"]) {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        value = response.data[\"AttachLink\"];\n        var win = window.open(value, '_blank');\n\n        if (win) {\n          win.focus();\n        } else {\n          intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport function filterTransactionList(filterValue, filterParam, filteredListName) {\n  return function (dispatch) {\n    let masterData = filterParam.masterData;\n    filteredListName = filteredListName || \"searchedData\";\n    let primaryKeyValue = 0;\n    let searchedData = undefined;\n    let selectedData = [];\n    filterParam.childRefs && filterParam.childRefs.map(childref => {\n      if (childref.ref !== undefined && childref.ref.current !== null) {\n        childref.ref.current.value = \"\";\n        masterData[childref.childFilteredListName] = undefined;\n      }\n\n      return null;\n    });\n\n    if (filterValue === \"\") {\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        selectedData.push(masterData[filterParam.inputListName][0]);\n      }\n    } else {\n      if (masterData[filterParam.inputListName]) {\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n      } else {\n        searchedData = [];\n      }\n\n      if (searchedData.length > 0) {\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        selectedData.push(searchedData[0]);\n      }\n    }\n\n    if (primaryKeyValue !== 0) {\n      primaryKeyValue = filterParam.isSingleSelect ? primaryKeyValue : String(primaryKeyValue);\n      dispatch(initRequest(true));\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n        [filterParam.primaryKeyField]: primaryKeyValue\n      }).then(response => {\n        const dataState = {\n          skip: 0,\n          take: 10\n        };\n        masterData[filteredListName] = searchedData;\n        masterData[filterParam.selectedObject] = selectedData;\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (filterParam.isSortable) {\n          sortData(masterData[filterParam.sortList], 'descending', filterParam.sortValue);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            // skip: 0, take: 10, testskip: 0, testtake: 10,dataState \n            skip: filterParam.skip,\n            take: filterParam.take,\n            testskip: filterParam.testskip,\n            testtake: filterParam.testtake,\n            dataState\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      masterData[filterParam.selectedObject] = undefined;\n      masterData[filteredListName] = [];\n      filterParam.changeList.map(name => masterData[name] = []); // Object.keys(masterData).forEach(item=> {\n      //   if (item !== filterParam.inputListName && item !== filterParam.selectedObject \n      //     && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) ===-1)\n      //       masterData[item] = [];\n      //   })   \n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function postCRUDOrganiseTransSearch(postParamList, respObject) {\n  return function (dispatch) {\n    let masterData = respObject.masterData;\n    postParamList && Array.isArray(postParamList) && postParamList.map((postParam, index) => {\n      if (postParam.clearFilter === 'yes') {\n        postParam.searchRef.current.value = \"\";\n        masterData[postParam.filteredListName] = undefined;\n        postParam.childRefs && postParam.childRefs.map(childref => {\n          if (childref.ref !== undefined && childref.ref.current !== null) {\n            childref.ref.current.value = \"\";\n            masterData[childref.childFilteredListName] = undefined;\n          }\n\n          return null;\n        });\n      }\n\n      if (Object.keys(masterData).indexOf(postParam.filteredListName) !== -1 && masterData[postParam.filteredListName] !== undefined) {\n        if (postParam.clearFilter === 'check') {\n          if (masterData[postParam.filteredListName] !== undefined) {\n            const temp = masterData[postParam.filteredListName].filter(item => !Array.isArray(postParam.primaryKeyValue) ? postParam.primaryKeyValue : postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]));\n            masterData[postParam.filteredListName] = temp;\n\n            if (masterData[postParam.filteredListName].length > 0) {\n              return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject.fecthInputObject,\n                [postParam.primaryKeyField]: String(respObject.masterData[postParam.filteredListName][0][postParam.primaryKeyField])\n              }).then(response => {\n                masterData = { ...masterData,\n                  ...response.data\n                };\n              });\n            }\n          }\n        } else {\n          if (masterData[postParam.filteredListName] !== undefined) {\n            masterData[postParam.filteredListName] = replaceUpdatedObject(masterData[postParam.updatedListname], masterData[postParam.filteredListName], postParam.primaryKeyField);\n          }\n        }\n      }\n\n      return null;\n    }); //sortData(masterData);\n\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: { ...respObject,\n        masterData\n      }\n    });\n  };\n}\nexport function showUnderDevelopment() {\n  return function (dispatch) {\n    toast.info(intl.formatMessage({\n      id: \"IDS_UNDERDEVELOPMENT\"\n    }));\n  };\n}\nexport function onComboLoad(operation, userInfo, inputParam, ncontrolcode, extractedColumnList) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    extractedColumnList.map(item => urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n      userinfo: userInfo\n    })));\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let dataList = [];\n      extractedColumnList.map((item, index) => {\n        if (item.ndesigncomponentcode == designComponents.COMBOBOX) {\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          dataList,\n          operation,\n          screenName: inputParam.displayName,\n          openModal: true,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport const fetchRecordCombo = fetchRecordParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\n    urlArray.push(rsapi.post(url, {\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n      \"userinfo\": fetchRecordParam.userInfo\n    }));\n    fetchRecordParam.extractedColumnList.map(item => {\n      if (item.classUrl && item.methodUrl) {\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          \"userinfo\": fetchRecordParam.userInfo\n        }));\n      }\n    });\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let dataList = [];\n      let selectedRecordData = { ...response[0].data\n      };\n      let responseData = [...response];\n      let extractedColumnData = [];\n      responseData.splice(0, 1);\n      fetchRecordParam.extractedColumnList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          extractedColumnData.push(item);\n        } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n          selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\n        }\n      });\n      extractedColumnData.map((field, index) => {\n        responseData.map((item, indexValue) => {\n          if (index === indexValue) {\n            ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField, field.dataField, undefined, undefined, undefined);\n            dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\n          }\n        });\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: selectedRecordData,\n          screenName: fetchRecordParam.screenName,\n          operation: fetchRecordParam.operation,\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId: fetchRecordParam.primaryKeyValue,\n          dataList\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ServiceAction.js"],"names":["toast","rsapi","initRequest","updateStore","DEFAULT_RETURN","REQUEST_FAILURE","sortData","searchData","searchJsonData","replaceUpdatedObject","constructOptionList","rearrangeDateFormat","intl","selectedDashBoardView","Axios","designComponents","callService","inputParam","dispatch","post","classUrl","methodUrl","inputData","then","response","data","updateInfo","typeName","masterData","organisation","undefined","type","payload","activeTestTab","activeTestKey","activeBCTab","masterStatus","userInfo","userinfo","loading","selectedId","selectedRecord","dataState","selectedNode","SelectedNode","selectedNodeName","SelectedNodeName","primaryKeyValue","AddedChildPrimaryKey","displayName","reportFilePath","skip","take","testskip","testtake","catch","error","status","warning","crudMaster","modalName","defaultInput","requestUrl","isFileupload","formData","append","JSON","stringify","operation","loadEsign","success","warn","retrievedData","Array","isArray","postParam","selectedObject","primaryKeyField","foundIndex","inputListName","findIndex","x","isSingleGet","push","task","list","filter","item","openModal","activeSampleTab","showSample","respObject","errorCode","showEsign","design","nextNode","showConfirmAlert","loadPoolSource","saveType","Object","keys","indexOf","postCRUDOrganiseSearch","console","log","message","validateEsignCredential","toLowerCase","formatMessage","id","fetchRecord","fetchRecordParam","url","screenName","ncontrolCode","filterColumnData","filterValue","filterParam","searchedData","length","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","forEach","unchangeList","isChild","searchRef","current","value","temp","includes","filtercombochange","Map","selectedComboName","selectedComboId","selectedCombo","comboSet","viewAttachment","document","getElementById","setAttribute","FilePath","click","win","window","open","focus","filterTransactionList","filteredListName","selectedData","childRefs","map","childref","ref","childFilteredListName","isSingleSelect","String","isSortable","sortList","sortValue","changeList","name","postCRUDOrganiseTransSearch","postParamList","index","clearFilter","updatedListname","showUnderDevelopment","info","onComboLoad","ncontrolcode","extractedColumnList","urlArray","all","ComboFieldData","dataList","ndesigncomponentcode","COMBOBOX","objectValue","foreignDataField","dataField","get","fetchRecordCombo","selectedRecordData","responseData","extractedColumnData","splice","DATEPICKER","field","indexValue"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest, updateStore } from './LoginAction';\r\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\r\nimport { sortData, searchData,searchJsonData, replaceUpdatedObject, constructOptionList, rearrangeDateFormat} from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport {selectedDashBoardView} from './DashBoardTypeAction';\r\nimport Axios from \"axios\";\r\nimport {  designComponents } from '../components/Enumeration';\r\n// import { getValidComponent } from '../components/droparea/helpers';\r\n//import { Engine } from 'json-rules-engine';\r\n//import employee from '../rules/Employee-Salary.json';\r\n\r\nexport const callService = (inputParam) => {\r\n  return (dispatch) => {\r\n    dispatch(initRequest(true));\r\n    return rsapi.post(inputParam.classUrl + \"/get\" + inputParam.methodUrl, inputParam.inputData)\r\n      .then(response => {\r\n        \r\n        // console.log(\"res:\", response);\r\n\r\n///Start of Rule Engine code///////////////////////\r\n\r\n        // const decisions1 = [\r\n        //   {\r\n        //       \"conditions\": {\r\n        //           \"all\": [\r\n        //               {\r\n        //                   \"fact\": \"Designation\",\r\n        //                   \"operator\": \"equal\",\r\n        //                   \"value\": \"Manager\"\r\n        //               },\r\n        //               {\r\n        //                   \"fact\": \"Experience\",\r\n        //                   \"operator\": \"greaterThan\",\r\n        //                   \"value\": 10\r\n        //               }\r\n        //           ]\r\n        //       },\r\n        //       \"event\": {\r\n        //           \"type\": \"RS.1500000\",\r\n        //           \"params\": {message: 'Your Salary is 1500000/annum!'}\r\n        //       }\r\n        //   }\r\n        // ];\r\n        // console.log(\"decisions:\",decisions1);  \r\n        // const inputs1 = {Designation: 'Manager', Experience: 9 };\r\n  \r\n        // const engine = new Engine(employee.decisions);   \r\n  \r\n        // engine.run(inputs1)\r\n        // .then(results => {       \r\n        //   console.log(\"Rule output:\", results.events);\r\n        //   if ( results.events.length > 0){\r\n        //     const events = results.events;\r\n        //     events.map(event => console.log(\"Message:\",event.params.message)); \r\n           \r\n           \r\n        //     rsapi.post(\"section/getSection\" , inputParam.inputData)\r\n        //     .then(response => {\r\n        //       console.log(\"data:\", response);\r\n        //       let data = response.data;\r\n        //       sortData(data);\r\n          \r\n        //       const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: { masterData: [], organisation: undefined, }\r\n        //       }\r\n        //       dispatch(updateStore(updateInfo))\r\n      \r\n        //       dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //           masterData: data,\r\n        //           activeTestTab: data.activeTestTab,\r\n        //           activeTestKey: data.activeTestKey,\r\n        //           activeBCTab: data.activeBCTab,\r\n        //           inputParam: inputParam,\r\n        //           masterStatus: \"\",\r\n        //           userInfo: inputParam.inputData.userinfo,\r\n        //           loading: false, selectedId: null, selectedRecord: {},\r\n        //           dataState: undefined,\r\n        //           organisation: {\r\n        //             selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n        //             primaryKeyValue: data.AddedChildPrimaryKey\r\n        //           },\r\n        //           displayName: inputParam.displayName,\r\n        //           reportFilePath: undefined\r\n        //         }\r\n        //       })\r\n\r\n        //     })\r\n        //     .catch(error => {\r\n        //       if (error.response === undefined && error === \"Network Error\") {\r\n        //         dispatch({\r\n        //           type: REQUEST_FAILURE,\r\n        //           payload: {\r\n        //             error: \"Network Error\",\r\n        //             loading: false,\r\n        //           }\r\n        //         });\r\n        //       } else if (error.response.status === 417) {\r\n        //         toast.warning(error.response.data);\r\n        //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        //       } else {\r\n        //         dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\r\n        //       }\r\n        //     })\r\n        //   }\r\n        //   else{\r\n        //     console.log(\"Message:\",\"Rules Failed\");\r\n        //     dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        //   }         \r\n        // })\r\n///End of Rule Engine code///////////////////////\r\n\r\n////uncomment below for Orginial Source start////////////////////\r\n        let data = response.data;\r\n        sortData(data);\r\n    \r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { masterData: [], organisation: undefined, }\r\n        }\r\n        dispatch(updateStore(updateInfo))\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            masterData: data,\r\n            activeTestTab: data.activeTestTab,\r\n            activeTestKey: data.activeTestKey,\r\n            activeBCTab: data.activeBCTab,\r\n            inputParam: inputParam,\r\n            masterStatus: \"\",\r\n            userInfo: inputParam.inputData.userinfo,\r\n            loading: false, selectedId: null, selectedRecord: {},\r\n            dataState: undefined,\r\n            organisation: {\r\n              selectedNode: data.SelectedNode, selectedNodeName: data.SelectedNodeName,\r\n              primaryKeyValue: data.AddedChildPrimaryKey\r\n            },\r\n            displayName: inputParam.displayName,\r\n            reportFilePath: undefined,\r\n            skip:0, take:undefined, testskip:0, testtake:5\r\n          }\r\n        })\r\n        \r\n///Uncomment till above for original source\r\n      })\r\n      .catch(error => {\r\n        //console.log(\"error:\", error);\r\n        if (error.response === undefined && error === \"Network Error\") {\r\n          dispatch({\r\n            type: REQUEST_FAILURE,\r\n            payload: {\r\n              error: \"Network Error\",\r\n              loading: false,\r\n            }\r\n          });\r\n        } else if (error.response.status === 417) {\r\n          toast.warning(error.response.data);\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } });\r\n        } else {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false, displayName: inputParam.displayName, userInfo: inputParam.inputData.userinfo } })\r\n        }\r\n      })\r\n  };\r\n};\r\n\r\n//Start- Add /Edit/Delete Master Data\r\nexport function crudMaster(inputParam, masterData, modalName, defaultInput) {\r\n  return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n    let requestUrl = '';\r\n    if (inputParam.isFileupload) {\r\n      const formData = inputParam.formData;\r\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\r\n    } else {\r\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n    }\r\n    return requestUrl\r\n      .then(response => {\r\n        if (response.status === 202) {\r\n          //HttpStatus:Accepted\r\n          //Use this block when u need to display any success message\r\n    \r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              loadEsign: false,\r\n              [modalName]: false,\r\n              loading: false\r\n            }\r\n          })\r\n          toast.success(response.data);\r\n        }\r\n        else if (response.status === 208) {\r\n          //HttpStatus:Accepted\r\n          //208-Already Reported\r\n          dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n              loadEsign: false,\r\n              [modalName]: false,\r\n              loading: false\r\n            }\r\n          })\r\n          toast.warn(response.data);\r\n        }\r\n        else {\r\n          const retrievedData = sortData(response.data);\r\n          if (masterData === undefined || Array.isArray(retrievedData)) {\r\n            masterData = retrievedData;\r\n          }\r\n          else {\r\n            masterData = {\r\n              ...masterData,\r\n              ...retrievedData\r\n            };\r\n            if (modalName === \"openModal\" && inputParam.operation !== \"delete\"\r\n              && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\r\n\r\n              if (inputParam.postParam) {\r\n                if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                } else {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\r\n                }\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                //masterData[inputParam.postParam.selectedObject] = response.data;\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {//searchedData\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                  x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                );\r\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n              \r\n                if (masterData[\"searchedData\"] !== undefined)\r\n                {\r\n                  const foundIndex = masterData[\"searchedData\"].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                \r\n                }\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n              }\r\n            }\r\n            else if (modalName === \"openModal\" && inputParam.operation === \"delete\") {\r\n              if (inputParam.postParam && inputParam.postParam.isSingleGet) \r\n              {\r\n                if (inputParam.postParam.task === \"cancel\"){\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                }\r\n                else{\r\n                    const list = masterData[inputParam.postParam.inputListName]\r\n                      .filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue)\r\n                    masterData[inputParam.postParam.inputListName] = list;\r\n\r\n                    // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\r\n                    // );\r\n                    // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \r\n                  \r\n                }\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n              }\r\n            }\r\n          }\r\n          // (masterData);\r\n\r\n          let openModal = false;\r\n          let selectedRecord = {};\r\n          let activeSampleTab = inputParam.activeSampleTab ? { activeSampleTab: inputParam.activeSampleTab } : ''\r\n          let activeTestKey = inputParam.activeTestKey ? { activeTestKey: inputParam.activeTestKey } : ''\r\n          let showSample = inputParam.showSample ? inputParam.showSample : ''\r\n          let respObject = {\r\n            masterData,\r\n            inputParam,\r\n            modalName,\r\n            //modalName:undefined,\r\n            [modalName]: openModal,\r\n            operation: inputParam.operation,\r\n            masterStatus: \"\",\r\n            errorCode: undefined,\r\n            loadEsign: false,\r\n            showEsign: false,\r\n            selectedRecord,\r\n            loading: false,\r\n            dataState: inputParam.dataState,\r\n            selectedId: inputParam.selectedId,\r\n            ...activeSampleTab,\r\n            ...activeTestKey,\r\n            showSample,\r\n            design : [],\r\n            //organisation: undefined\r\n            organisation: inputParam.nextNode ? {\r\n              selectedNode: inputParam.nextNode,\r\n              selectedNodeName: masterData.SelectedNodeName,\r\n              primaryKeyValue: masterData.AddedChildPrimaryKey,\r\n\r\n            } : undefined,\r\n            showConfirmAlert: inputParam.showConfirmAlert,\r\n            loadPoolSource: inputParam.loadPoolSource,\r\n            skip:inputParam.skip||undefined,\r\n            take:inputParam.take||undefined\r\n          }\r\n\r\n          if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\r\n            if (inputParam.saveType === 2) {\r\n              openModal = true;\r\n              selectedRecord = defaultInput;\r\n\r\n            }\r\n            respObject = { ...respObject, [modalName]: openModal, selectedRecord };\r\n          }\r\n          if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1\r\n            && masterData[\"searchedData\"] !== undefined) {\r\n            dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject))\r\n          }\r\n          else {\r\n            dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, modalName: undefined } })\r\n          }\r\n        }\r\n      })\r\n      .catch(response => {\r\n        console.log(\"error:\", response);\r\n        if (response.response.status === 500) {\r\n          dispatch({\r\n            type: REQUEST_FAILURE,\r\n            payload: {\r\n              error: response.message,\r\n              loading: false\r\n            }\r\n          });\r\n        } else {\r\n          if (inputParam.operation === \"delete\" || inputParam.operation === \"receive\" ||\r\n            inputParam.operation === 'approve' || inputParam.operation === \"correction\"\r\n            || inputParam.operation === \"complete\" || inputParam.operation === \"dynamic\"\r\n            || inputParam.operation === \"setDefault\" || inputParam.operation === \"reset\"\r\n            || inputParam.operation === \"xml\"||inputParam.operation === 'blackList'||inputParam.operation === 'attendance'\r\n            || inputParam.operation === 'certified' || inputParam.operation === 'competent' || inputParam.operation === \"invite\"\r\n            || inputParam.operation === \"cancel\"|| inputParam.operation === \"cancel\" || inputParam.operation === \"conduct\"\r\n            ||inputParam.operation === \"attend\"||inputParam.operation === \"certify\"||inputParam.operation === \"Competent\" ) {\r\n            dispatch({\r\n              type: DEFAULT_RETURN,\r\n              payload: {\r\n                masterStatus: response.response.data,\r\n                errorCode: response.response.status,\r\n                loadEsign: false,\r\n                [modalName]: false,\r\n                loading: false\r\n              }\r\n            });\r\n          } else {\r\n            dispatch({\r\n              type: DEFAULT_RETURN,\r\n              payload: {\r\n                masterStatus: response.response.data,\r\n                errorCode: response.response.status,\r\n                loadEsign: false, loading: false\r\n              }\r\n            });\r\n          }\r\n\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport const validateEsignCredential = (inputParam, modalName) => {\r\n  return (dispatch) => {\r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n      .then(response => {\r\n        if (response.data === \"Success\") {\r\n\r\n          const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n          }\r\n          dispatch(crudMaster(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName))\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  };\r\n};\r\n\r\nexport const fetchRecord = (fetchRecordParam) => {\r\n  return (dispatch) => {\r\n\r\n    dispatch(initRequest(true));\r\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n    rsapi.post(url, {\r\n      [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo\r\n    })\r\n      .then(response => {\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            selectedRecord: response.data,\r\n            screenName: fetchRecordParam.screenName,\r\n            operation: fetchRecordParam.operation,\r\n            openModal: true,\r\n            ncontrolCode: fetchRecordParam.ncontrolCode,\r\n            loading: false,\r\n            selectedId: fetchRecordParam.primaryKeyValue\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\nexport function filterColumnData(filterValue, filterParam) {\r\n  return function (dispatch) {\r\n\r\n    let masterData = filterParam.masterData;\r\n\r\n    let primaryKeyValue = 0;\r\n    let searchedData = undefined;\r\n    if (filterValue === \"\") {\r\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n       // if(filterParam.isjsondata)\r\n       // {\r\n      //    primaryKeyValue = masterData[filterParam.inputListName][0][\"jsondata\"][filterParam.primaryKeyField]\r\n      \r\n      //  }\r\n        //else\r\n       // {\r\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n       // }\r\n      }\r\n    }\r\n    else {\r\n      if(filterParam.isjsondata)\r\n      {\r\n        searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n      }\r\n      else\r\n      {\r\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n      }\r\n      if (searchedData.length > 0) {\r\n      //  if(filterParam.isjsondata)\r\n       // {\r\n      //  primaryKeyValue = searchedData[0][\"jsondata\"][filterParam.primaryKeyField];\r\n      //  }\r\n       // else{\r\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n      //  }\r\n      }\r\n    }\r\n\r\n    if (primaryKeyValue !== 0) {\r\n      dispatch(initRequest(true));\r\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n        .then(response => {\r\n              masterData[\"searchedData\"] = searchedData;\r\n              masterData = { ...masterData, ...response.data };\r\n             \r\n              if (filterParam.inputListName === \"DashBoardView\"){\r\n                  dispatch(selectedDashBoardView(response, masterData));\r\n              }\r\n              else{\r\n                if(filterParam.sortField){\r\n                  sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                }\r\n                else{\r\n                  sortData(masterData);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false,skip: 0, take: 10, selectedId:null } });\r\n              }\r\n        })\r\n        .catch(error => {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n          if (error.response.status === 500) {\r\n            toast.error(intl.formatMessage({ id: error.message }));\r\n          }\r\n          else {\r\n            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      masterData[filterParam.selectedObject] = undefined;\r\n      masterData[\"searchedData\"] = [];\r\n      Object.keys(masterData).forEach(item => {\r\n        if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n          && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n          masterData[item] = [];\r\n      })\r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          masterData, operation: null, modalName: undefined,\r\n          loading: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport function postCRUDOrganiseSearch(postParam, respObject) {\r\n  return function (dispatch) {\r\n\r\n    let masterData = respObject.masterData;\r\n\r\n    if (respObject.inputParam.operation === \"create\" || respObject.inputParam.operation === \"copy\") {\r\n      if (respObject.modalName === \"openModal\") {\r\n        if (respObject.inputParam.isChild === undefined) {\r\n          respObject.inputParam.searchRef.current.value = \"\";\r\n          masterData[\"searchedData\"] = undefined;\r\n        }\r\n      }\r\n      dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData, modalName: undefined } })\r\n    }\r\n    else if (respObject.inputParam.operation === \"delete\") {\r\n\r\n      if (masterData[\"searchedData\"] !== undefined && respObject.modalName === \"openModal\") {\r\n        let temp = masterData[\"searchedData\"];\r\n        let primaryKeyValue = respObject.masterData[\"searchedData\"][0][postParam.primaryKeyField];\r\n        if (respObject.inputParam.isChild === undefined) {          \r\n\r\n          temp = masterData[\"searchedData\"].filter(item => Array.isArray(postParam.primaryKeyValue) ?\r\n            !postParam.primaryKeyValue.includes(item[postParam.primaryKeyField])\r\n            : item[postParam.primaryKeyField] !== postParam.primaryKeyValue);\r\n          primaryKeyValue = temp.length > 0 ? temp[0][postParam.primaryKeyField] : 0;\r\n        }\r\n        else {\r\n          primaryKeyValue = masterData[postParam.selectedObject][postParam.primaryKeyField];\r\n        }\r\n        masterData[\"searchedData\"] = temp;\r\n        respObject = { ...respObject, modalName: undefined };\r\n        if (masterData[\"searchedData\"].length > 0) {\r\n          primaryKeyValue = masterData[\"searchedData\"][0][postParam.primaryKeyField];\r\n\r\n          return rsapi.post(postParam.fetchUrl, {\r\n            ...postParam.fecthInputObject, [postParam.primaryKeyField]: primaryKeyValue\r\n          })\r\n            .then(response => {\r\n              masterData = { ...masterData, ...response.data };\r\n              sortData(masterData);\r\n              dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n            })\r\n            .catch(error => {\r\n              dispatch({ type: DEFAULT_RETURN, payload: { ...respObject } })\r\n              if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n              }\r\n              else {\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n              }\r\n            })\r\n        }\r\n        else {\r\n          masterData[postParam.selectedObject] = undefined;\r\n          masterData[\"searchedData\"] = [];\r\n          Object.keys(masterData).forEach(item => {\r\n            if (item !== postParam.inputListName && item !== postParam.selectedObject\r\n              && postParam.unchangeList && postParam.unchangeList.indexOf(item) === -1)\r\n              masterData[item] = [];\r\n          })\r\n\r\n          dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n        }\r\n      }\r\n      else {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData, modalName: undefined } });\r\n      }\r\n    }\r\n    else if(respObject.inputParam.filtercombochange){\r\n\r\n      respObject = { ...respObject, modalName: undefined };\r\n      if (masterData[\"searchedData\"] !== undefined) {\r\n        masterData[\"searchedData\"] = undefined;\r\n        respObject.inputParam.searchRef.current.value = \"\";\r\n      }\r\n\r\n      let Map={}\r\n      if(postParam.selectedComboName!==undefined){\r\n        Map={[postParam.selectedComboName]:{[postParam.selectedComboId]:postParam.selectedCombo},comboSet:true}\r\n      }\r\n\r\n      dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData,...Map\r\n         } });\r\n    }\r\n    else {\r\n      respObject = { ...respObject, modalName: undefined };\r\n      if (masterData[\"searchedData\"] !== undefined) {\r\n        if (masterData[postParam.selectedObject][postParam.primaryKeyField]) {\r\n\r\n          const foundIndex = masterData[\"searchedData\"].findIndex(\r\n            x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][postParam.primaryKeyField]\r\n          );\r\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject];\r\n        } else {\r\n          const foundIndex = masterData[\"searchedData\"].findIndex(\r\n            x => x[postParam.primaryKeyField] === masterData[postParam.selectedObject][0][postParam.primaryKeyField]\r\n          );\r\n          masterData[\"searchedData\"][foundIndex] = masterData[postParam.selectedObject][0];\r\n        }\r\n      }\r\n      dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } });\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport const viewAttachment = (inputParam) => {\r\n  return (dispatch) => {\r\n    let inputData = { ...inputParam.inputData }\r\n    if (inputData['selectedRecord']) {\r\n      delete inputData['selectedRecord']['expanded'];\r\n    }\r\n    dispatch(initRequest(true));\r\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, inputData)\r\n      .then(response => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        let value=\"\";\r\n        if (response.data[\"AttachFile\"]) {\r\n          document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n          document.getElementById(\"download_data\").click();\r\n        } else {\r\n          value = response.data[\"AttachLink\"];\r\n          var win = window.open(value, '_blank');\r\n          if (win) {\r\n            win.focus();\r\n          } else {\r\n            intl.warn('IDS_PLEASEALLOWPOPUPSFORTHISWEBSITE');\r\n          }\r\n        }\r\n        \r\n        \r\n        \r\n      \r\n        \r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(error.message);\r\n        } else {\r\n          toast.warn(error.response.data);\r\n        }\r\n      });\r\n  }\r\n}\r\n\r\nexport function filterTransactionList(filterValue, filterParam, filteredListName) {\r\n  return function (dispatch) {\r\n    let masterData = filterParam.masterData;\r\n    filteredListName = filteredListName || \"searchedData\"\r\n    let primaryKeyValue = 0;\r\n    let searchedData = undefined;\r\n    let selectedData = []\r\n    filterParam.childRefs && filterParam.childRefs.map(childref => {\r\n      if (childref.ref !== undefined && childref.ref.current !== null) {\r\n        childref.ref.current.value = \"\";\r\n        masterData[childref.childFilteredListName] = undefined\r\n      }\r\n      return null;\r\n    })\r\n    if (filterValue === \"\") {\r\n      if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n        primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n        selectedData.push(masterData[filterParam.inputListName][0])\r\n      }\r\n    }\r\n    else {\r\n      if (masterData[filterParam.inputListName]) {\r\n        searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n      } else {\r\n        searchedData = []\r\n      }\r\n\r\n      if (searchedData.length > 0) {\r\n        primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n        selectedData.push(searchedData[0])\r\n      }\r\n    }\r\n\r\n    if (primaryKeyValue !== 0) {\r\n      primaryKeyValue = filterParam.isSingleSelect ? primaryKeyValue : String(primaryKeyValue)\r\n      dispatch(initRequest(true));\r\n      return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n        .then(response => {\r\n          const dataState={\r\n            skip:0,\r\n            take:10\r\n          }\r\n          masterData[filteredListName] = searchedData;\r\n          masterData[filterParam.selectedObject] = selectedData\r\n          masterData = { ...masterData, ...response.data };\r\n          if(filterParam.isSortable)\r\n          {\r\n            sortData(masterData[filterParam.sortList],'descending',filterParam.sortValue);\r\n          }\r\n          dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, \r\n           // skip: 0, take: 10, testskip: 0, testtake: 10,dataState \r\n           skip: filterParam.skip, take: filterParam.take, \r\n            testskip: filterParam.testskip, testtake: filterParam.testtake,\r\n            dataState \r\n          } });\r\n        })\r\n        .catch(error => {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n          if (error.response.status === 500) {\r\n            toast.error(intl.formatMessage({ id: error.message }));\r\n          }\r\n          else {\r\n            toast.warn(intl.formatMessage({ id: error.response.data }));\r\n          }\r\n        })\r\n    }\r\n    else {\r\n      masterData[filterParam.selectedObject] = undefined;\r\n      masterData[filteredListName] = [];\r\n      filterParam.changeList.map(name => masterData[name] = [])\r\n      // Object.keys(masterData).forEach(item=> {\r\n      //   if (item !== filterParam.inputListName && item !== filterParam.selectedObject \r\n      //     && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) ===-1)\r\n      //       masterData[item] = [];\r\n      //   })   \r\n      dispatch({\r\n        type: DEFAULT_RETURN, payload: {\r\n          masterData, operation: null, modalName: undefined,\r\n          loading: false\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function postCRUDOrganiseTransSearch(postParamList, respObject) {\r\n  return function (dispatch) {\r\n    let masterData = respObject.masterData;\r\n    postParamList && Array.isArray(postParamList) && postParamList.map((postParam, index) => {\r\n      if (postParam.clearFilter === 'yes') {\r\n\r\n        postParam.searchRef.current.value = \"\";\r\n        masterData[postParam.filteredListName] = undefined;\r\n        postParam.childRefs && postParam.childRefs.map(childref => {\r\n          if (childref.ref !== undefined && childref.ref.current !== null) {\r\n            childref.ref.current.value = \"\";\r\n            masterData[childref.childFilteredListName] = undefined\r\n          }\r\n          return null;\r\n        })\r\n\r\n      }\r\n      if (Object.keys(masterData).indexOf(postParam.filteredListName) !== -1 && masterData[postParam.filteredListName] !== undefined) {\r\n\r\n        if (postParam.clearFilter === 'check') {\r\n          if (masterData[postParam.filteredListName] !== undefined) {\r\n            const temp = masterData[postParam.filteredListName].filter(item => !Array.isArray(postParam.primaryKeyValue) ? postParam.primaryKeyValue : postParam.primaryKeyValue.includes(item[postParam.primaryKeyField]));\r\n            masterData[postParam.filteredListName] = temp;\r\n\r\n            if (masterData[postParam.filteredListName].length > 0) {\r\n              return rsapi.post(postParam.fetchUrl, { ...postParam.fecthInputObject.fecthInputObject, [postParam.primaryKeyField]: String(respObject.masterData[postParam.filteredListName][0][postParam.primaryKeyField]) })\r\n                .then(response => {\r\n                  masterData = { ...masterData, ...response.data };\r\n                })\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          if (masterData[postParam.filteredListName] !== undefined) {\r\n            masterData[postParam.filteredListName] = replaceUpdatedObject(masterData[postParam.updatedListname], masterData[postParam.filteredListName], postParam.primaryKeyField)\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    })\r\n    //sortData(masterData);\r\n    dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, masterData } })\r\n  }\r\n}\r\n\r\nexport function showUnderDevelopment() {\r\n  return function (dispatch) {\r\n    toast.info(intl.formatMessage({ id: \"IDS_UNDERDEVELOPMENT\"}));\r\n  }\r\n}\r\n\r\nexport function onComboLoad(operation, userInfo, inputParam, ncontrolcode, extractedColumnList) {\r\n  return function (dispatch) {\r\n\r\n    dispatch(initRequest(true));\r\n    let urlArray = [];\r\n    extractedColumnList.map(item=>\r\n      urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { userinfo: userInfo }))\r\n      )\r\n     \r\n          Axios.all(urlArray)\r\n              .then(response => {\r\n                let ComboFieldData = [];\r\n                let dataList = [];\r\n                     \r\n                    extractedColumnList.map((item, index)=> {\r\n                      if(item.ndesigncomponentcode == designComponents.COMBOBOX){\r\n                        ComboFieldData = constructOptionList(item.objectValue === null ? response[index].data || [] : response[index].data[item.objectValue], item.foreignDataField,\r\n                                item.dataField, undefined, undefined, undefined);\r\n                           dataList[item.dataField] = ComboFieldData.get(\"OptionList\");\r\n                      }\r\n\r\n                    });\r\n\r\n                  dispatch({\r\n                      type: DEFAULT_RETURN,\r\n                      payload: {\r\n                          dataList ,\r\n                          operation, \r\n                          screenName: inputParam.displayName,\r\n                          openModal: true,\r\n                          ncontrolcode, loading: false\r\n                      }\r\n                  })\r\n              })\r\n              .catch(error => {\r\n                  dispatch(initRequest(false));\r\n                  if (error.response.status === 500) {\r\n                      toast.error(error.message);\r\n                  } else {\r\n                      toast.warn(intl.formatMessage({\r\n                          id: error.response.data\r\n                      }));\r\n                  }\r\n              })\r\n      }\r\n}\r\n\r\nexport const fetchRecordCombo = (fetchRecordParam) => {\r\n  return (dispatch) => {\r\n\r\n    dispatch(initRequest(true));\r\n    let urlArray = [];\r\n    const url = fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\";\r\n    urlArray.push(rsapi.post(url, {[fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo}));\r\n    fetchRecordParam.extractedColumnList.map(item => {\r\n      if(item.classUrl && item.methodUrl){\r\n        urlArray.push(rsapi.post(item.classUrl+\"/\"+item.methodUrl, { \"userinfo\" : fetchRecordParam.userInfo }))\r\n      }\r\n    });\r\n    \r\n    Axios.all(urlArray)\r\n    .then(response => {\r\n      \r\n      let ComboFieldData = [];\r\n      let dataList = [];\r\n      let selectedRecordData = {...response[0].data};\r\n      let responseData = [...response];\r\n      let extractedColumnData = [];\r\n      responseData.splice(0,1);\r\n\r\n      fetchRecordParam.extractedColumnList.map((item) => {\r\n        if(item.ndesigncomponentcode === designComponents.COMBOBOX){\r\n          extractedColumnData.push(item);\r\n        }\r\n        else if(item.ndesigncomponentcode === designComponents.DATEPICKER){\r\n          selectedRecordData[item.dataField] = rearrangeDateFormat(fetchRecordParam.userInfo, selectedRecordData[item.dataField]);\r\n        }\r\n      })\r\n           \r\n      extractedColumnData.map((field, index) => {\r\n        responseData.map((item, indexValue) => {\r\n          if(index === indexValue){\r\n            ComboFieldData = constructOptionList(field.objectValue === null ? responseData[index].data || [] : responseData[index].data[field.objectValue], field.foreignDataField,\r\n              field.dataField, undefined, undefined, undefined);\r\n         dataList[field.dataField] = ComboFieldData.get(\"OptionList\");\r\n          }\r\n        })\r\n      });\r\n\r\n        dispatch({\r\n          type: DEFAULT_RETURN,\r\n          payload: {\r\n            selectedRecord: selectedRecordData,\r\n            screenName: fetchRecordParam.screenName,\r\n            operation: fetchRecordParam.operation,\r\n            openModal: true,\r\n            ncontrolCode: fetchRecordParam.ncontrolCode,\r\n            loading: false,\r\n            selectedId: fetchRecordParam.primaryKeyValue,\r\n            dataList\r\n          }\r\n        });\r\n      })\r\n      .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n          toast.error(intl.formatMessage({ id: error.message }));\r\n        } else {\r\n          toast.warn(intl.formatMessage({ id: error.response.data }));\r\n        }\r\n      })\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}