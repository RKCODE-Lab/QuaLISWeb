{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction'; //import { intl } from '../components/App';\n\nimport { getComboLabelValue } from \"../components/CommonScript\";\nexport function plantgroupsite(nformcode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"plantgroup/getPlantGroupSite\", {\n      \"nformcode\": nformcode,\n      userinfo: userInfo\n    }).then(response => {\n      const constructType = constructOptionList(response.data || [], \"nsitecode\", \"ssitecode\", undefined, undefined, false);\n      const fustionsite = constructType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          fusionplantSite: fustionsite,\n          screenName: \"IDS_FUSIONPLANT\",\n          operation: \"create\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function plantgroupdepartment(nsitecode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"plantgroup/getPlantGroupDepartment\", {\n      \"nsitecode\": nsitecode,\n      userinfo: userInfo\n    }).then(response => {\n      const constructType = constructOptionList(response.data || [], \"nplantcode\", \"splantshortdesc\", undefined, undefined, false);\n      const fusionplant = constructType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          fusionparentplants: fusionplant,\n          screenName: \"IDS_FUSIONPLANT\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fusionplantchild(ssitecode, splantparentcode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"plantgroup/getPlantGroupDepartmentchild\", {\n      \"ssitecode\": ssitecode,\n      \"splantparentcode\": splantparentcode,\n      update: 0,\n      userinfo: userInfo\n    }).then(response => {\n      const constructType = constructOptionList(response.data || [], \"nplantcode\", \"splantshortdesc\", undefined, undefined, false);\n      const fusionplant = constructType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          fusionchildplants: fusionplant,\n          screenName: \"IDS_FUSIONPLANT\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActivePlantGroupById(editplantgroupId, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const nformcode = editplantgroupId.ncontrolCode;\n    const ssitecode = editplantgroupId.editRow.nmappingsite;\n    const splantparentcode = editplantgroupId.editRow.nparentcode;\n    const getActivePlantGroupById = rsapi.post(\"/plantgroup/getActivePlantGroupById\", {\n      editplantgroupId: editplantgroupId,\n      nplantgroupcode: editplantgroupId.editRow.nplantgroupcode,\n      userinfo: editplantgroupId.userInfo\n    });\n    const fustionsite = rsapi.post(\"/plantgroup/getPlantGroupSite\", {\n      \"nformcode\": nformcode,\n      \"userinfo\": userInfo\n    });\n    const fusionparentplant = rsapi.post(\"/plantgroup/getPlantGroupDepartment\", {\n      \"nsitecode\": ssitecode,\n      \"userinfo\": userInfo\n    });\n    const fusionchildplant = rsapi.post(\"/plantgroup/getPlantGroupDepartmentchild\", {\n      \"ssitecode\": ssitecode,\n      \"splantparentcode\": splantparentcode,\n      update: 1,\n      userinfo: userInfo\n    });\n    let urlArray = [];\n    urlArray = [getActivePlantGroupById, fustionsite, fusionparentplant, fusionchildplant];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let splantchildcode = [];\n      let selectedRecord = {};\n      const fustionsiteconstruct = constructOptionList(response[1].data || [], \"nmappingsite\", \"ssitecode\", undefined, undefined, false);\n      const fustionplantconstruct = constructOptionList(response[2].data || [], \"nplantcode\", \"splantshortdesc\", undefined, undefined, false);\n      const fustionchildconstruct = constructOptionList(response[3].data || [], \"nplantcode\", \"splantshortdesc\", undefined, undefined, false);\n      const fustionsite = fustionsiteconstruct.get(\"OptionList\");\n      const fusionparent = fustionplantconstruct.get(\"OptionList\");\n      const fustionchild = fustionchildconstruct.get(\"OptionList\");\n      selectedRecord = response[0].data;\n      selectedRecord[\"ssitecode\"] = getComboLabelValue(response[0].data, response[1].data, \"nmappingsite\", \"ssitecode\");\n      selectedRecord[\"splantparentcode\"] = getComboLabelValue(response[0].data, response[2].data, \"nparentcode\", \"sparentsplantname\");\n      splantchildcode.push({\n        \"value\": response[0].data.nchildcode,\n        \"label\": response[0].data.schildsplantname\n      });\n      selectedRecord[\"splantchildcode\"] = splantchildcode[0]; // selectedRecord[\"splantchildcode\"] =[getComboLabelValue(response[0].data[0],response[3].data, \n      // \"schildcode\", \"childsplantcode\")];     \n      // ssitecode.push({\n      //     \"value\": response[0].data[\"ssitecode\"],\n      //     \"label\": response[0].data[\"ssitecode\"]\n      // });\n      //selectedRecord[\"ssitecode\"]=ssitecode;\n      // selectedRecord[\"splantparentcode\"]=selectedRecord [0].parentsplantcode;\n      // selectedRecord[\"splantchildcode\"]=selectedRecord [0].childsplantcode;\n      //const fusionplant = constructType.get(\"OptionList\");\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          fusionplantSite: fustionsite,\n          fusionparentplants: fusionparent,\n          fusionchildplants: fustionchild,\n          selectedRecord: selectedRecord,\n          ncontrolCode: editplantgroupId.ncontrolCode,\n          screenName: \"IDS_FUSIONPLANT\",\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getActivePlantGroupById(editplantgroupId,nplantgroupcode,userInfo) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"plantgroup/getActivePlantGroupById\",{editplantgroupId:editplantgroupId,nplantgroupcode:editplantgroupId.editRow.nplantgroupcode,userinfo: userInfo})\n//             .then(response => {\n//                 const constructType = constructOptionList(response.data || [], \"ssitecode\",\n//                 \"ssitecode\", undefined, undefined, false);\n//                 const fustionsite = constructType.get(\"OptionList\");\n//                 let selectedRecord =  {};\n//                 selectedRecord = response.data;    \n//                 selectedRecord[\"fusionplantSite\"] = getComboLabelValue(selectedRecord,selectedRecord [0].ssitecod, \n//                 \"ssitecod\", \"ssitecod\");      \n//                 selectedRecord[\"ssitecode\"]=selectedRecord [0].ssitecode;\n//                 selectedRecord[\"splantparentcode\"]=selectedRecord [0].parentsplantcode;\n//                 selectedRecord[\"splantchildcode\"]=selectedRecord [0].childsplantcode;\n//                 //const fusionplant = constructType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal:true, \n//                         fusionplantSite:fustionsite,\n//                         selectedRecord:selectedRecord,\n//                         screenName:\"IDS_FUSIONPLANT\"\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/PlantgroupAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","toast","Axios","initRequest","getComboLabelValue","plantgroupsite","nformcode","userInfo","dispatch","post","userinfo","then","response","constructType","data","undefined","fustionsite","get","type","payload","loading","openModal","fusionplantSite","screenName","operation","catch","error","status","message","warn","plantgroupdepartment","nsitecode","fusionplant","fusionparentplants","fusionplantchild","ssitecode","splantparentcode","update","fusionchildplants","getActivePlantGroupById","editplantgroupId","ncontrolCode","editRow","nmappingsite","nparentcode","nplantgroupcode","fusionparentplant","fusionchildplant","urlArray","all","splantchildcode","selectedRecord","fustionsiteconstruct","fustionplantconstruct","fustionchildconstruct","fusionparent","fustionchild","push","nchildcode","schildsplantname"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\nimport { getComboLabelValue } from \"../components/CommonScript\";\r\n\r\n \r\nexport function plantgroupsite(nformcode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"plantgroup/getPlantGroupSite\",{\"nformcode\":nformcode,userinfo: userInfo})\r\n            .then(response => {\r\n                const constructType = constructOptionList(response.data || [], \"nsitecode\",\r\n                \"ssitecode\", undefined, undefined, false);\r\n\r\n                const fustionsite = constructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        fusionplantSite:fustionsite,\r\n                        screenName:\"IDS_FUSIONPLANT\",\r\n                        operation: \"create\"\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function plantgroupdepartment(nsitecode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"plantgroup/getPlantGroupDepartment\",{\"nsitecode\":nsitecode,userinfo: userInfo})\r\n            .then(response => {\r\n                const constructType = constructOptionList(response.data || [], \"nplantcode\",\r\n                \"splantshortdesc\", undefined, undefined, false);\r\n\r\n                const fusionplant = constructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        fusionparentplants:fusionplant,\r\n                        screenName:\"IDS_FUSIONPLANT\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function fusionplantchild(ssitecode,splantparentcode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"plantgroup/getPlantGroupDepartmentchild\",{\"ssitecode\":ssitecode,\"splantparentcode\":splantparentcode,update:0,userinfo: userInfo})\r\n            .then(response => {\r\n                const constructType = constructOptionList(response.data || [], \"nplantcode\",\r\n                \"splantshortdesc\", undefined, undefined, false);\r\n\r\n                const fusionplant = constructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        fusionchildplants:fusionplant,\r\n                        screenName:\"IDS_FUSIONPLANT\",\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getActivePlantGroupById(editplantgroupId,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const nformcode=editplantgroupId.ncontrolCode;\r\n        const ssitecode=editplantgroupId.editRow.nmappingsite;\r\n        const splantparentcode=editplantgroupId.editRow.nparentcode;\r\n        const getActivePlantGroupById = rsapi.post(\"/plantgroup/getActivePlantGroupById\",{editplantgroupId:editplantgroupId,\r\n            nplantgroupcode:editplantgroupId.editRow.nplantgroupcode,userinfo: editplantgroupId.userInfo});\r\n        \r\n        const fustionsite = rsapi.post(\"/plantgroup/getPlantGroupSite\", {\"nformcode\":nformcode,\r\n            \"userinfo\": userInfo\r\n        });\r\n\r\n        const fusionparentplant = rsapi.post(\"/plantgroup/getPlantGroupDepartment\", {\"nsitecode\":ssitecode,\r\n            \"userinfo\": userInfo\r\n        });\r\n        const fusionchildplant = rsapi.post(\"/plantgroup/getPlantGroupDepartmentchild\", {\"ssitecode\":ssitecode,\r\n        \"splantparentcode\":splantparentcode,update:1,userinfo: userInfo});\r\n\r\n        let urlArray = [];\r\n        urlArray = [getActivePlantGroupById, fustionsite, fusionparentplant, fusionchildplant];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let splantchildcode=[];\r\n                let selectedRecord =  {};\r\n\r\n                const fustionsiteconstruct = constructOptionList(response[1].data || [], \"nmappingsite\",\r\n                \"ssitecode\", undefined, undefined, false);\r\n\r\n                const fustionplantconstruct = constructOptionList(response[2].data || [], \"nplantcode\",\r\n                \"splantshortdesc\", undefined, undefined, false);\r\n\r\n                const fustionchildconstruct = constructOptionList(response[3].data || [], \"nplantcode\",\r\n                \"splantshortdesc\", undefined, undefined, false);\r\n\r\n                const fustionsite = fustionsiteconstruct.get(\"OptionList\");\r\n                const fusionparent = fustionplantconstruct.get(\"OptionList\");\r\n                const fustionchild = fustionchildconstruct.get(\"OptionList\");\r\n\r\n                selectedRecord =response[0].data;    \r\n                selectedRecord[\"ssitecode\"] = getComboLabelValue(response[0].data,response[1].data, \r\n                \"nmappingsite\", \"ssitecode\");      \r\n                selectedRecord[\"splantparentcode\"] = getComboLabelValue(response[0].data,response[2].data, \r\n                \"nparentcode\", \"sparentsplantname\"); \r\n\r\n                splantchildcode.push({\r\n                        \r\n                    \"value\":response[0].data.nchildcode,\r\n                    \"label\":response[0].data.schildsplantname\r\n\r\n                });\r\n                selectedRecord[\"splantchildcode\"] = splantchildcode[0];\r\n\r\n                // selectedRecord[\"splantchildcode\"] =[getComboLabelValue(response[0].data[0],response[3].data, \r\n                // \"schildcode\", \"childsplantcode\")];     \r\n                \r\n                // ssitecode.push({\r\n                //     \"value\": response[0].data[\"ssitecode\"],\r\n                //     \"label\": response[0].data[\"ssitecode\"]\r\n                // });\r\n\r\n                 //selectedRecord[\"ssitecode\"]=ssitecode;\r\n                // selectedRecord[\"splantparentcode\"]=selectedRecord [0].parentsplantcode;\r\n                // selectedRecord[\"splantchildcode\"]=selectedRecord [0].childsplantcode;\r\n\r\n                //const fusionplant = constructType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true, \r\n                        fusionplantSite:fustionsite,\r\n                        fusionparentplants:fusionparent,\r\n                        fusionchildplants:fustionchild,\r\n                        selectedRecord:selectedRecord,\r\n                        ncontrolCode: editplantgroupId.ncontrolCode,\r\n                        screenName:\"IDS_FUSIONPLANT\",\r\n                        operation:\"update\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// export function getActivePlantGroupById(editplantgroupId,nplantgroupcode,userInfo) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"plantgroup/getActivePlantGroupById\",{editplantgroupId:editplantgroupId,nplantgroupcode:editplantgroupId.editRow.nplantgroupcode,userinfo: userInfo})\r\n//             .then(response => {\r\n//                 const constructType = constructOptionList(response.data || [], \"ssitecode\",\r\n//                 \"ssitecode\", undefined, undefined, false);\r\n\r\n//                 const fustionsite = constructType.get(\"OptionList\");\r\n//                 let selectedRecord =  {};\r\n\r\n//                 selectedRecord = response.data;    \r\n//                 selectedRecord[\"fusionplantSite\"] = getComboLabelValue(selectedRecord,selectedRecord [0].ssitecod, \r\n//                 \"ssitecod\", \"ssitecod\");      \r\n\r\n//                 selectedRecord[\"ssitecode\"]=selectedRecord [0].ssitecode;\r\n//                 selectedRecord[\"splantparentcode\"]=selectedRecord [0].parentsplantcode;\r\n//                 selectedRecord[\"splantchildcode\"]=selectedRecord [0].childsplantcode;\r\n\r\n//                 //const fusionplant = constructType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal:true, \r\n//                         fusionplantSite:fustionsite,\r\n//                         selectedRecord:selectedRecord,\r\n//                         screenName:\"IDS_FUSIONPLANT\"\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}