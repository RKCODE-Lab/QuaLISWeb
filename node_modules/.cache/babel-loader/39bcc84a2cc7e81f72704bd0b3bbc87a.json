{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getCityService(methodParam) {\n  return function (dispatch) {\n    const methodTypeService = rsapi.post(\"city/getCity\", {\n      userinfo: methodParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (methodParam.operation === \"create\") {\n      urlArray = [methodTypeService];\n    } else {\n      const url = methodParam.inputParam.classUrl + \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\"; //\"method/getActiveMethodById\"      \n\n      const methodById = rsapi.post(url, {\n        [methodParam.primaryKeyField]: methodParam.primaryKeyValue,\n        \"userinfo\": methodParam.userInfo\n      });\n      urlArray = [methodTypeService, methodById];\n      selectedId = methodParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const cityList = constructOptionList(response[0].data || [], \"ncitycode\", \"scityname\", undefined, undefined, undefined);\n      const cityList1 = cityList.get(\"OptionList\");\n      const citydefault = cityList.get(\"DefaultValue\");\n\n      if (methodParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n      } else {\n        selectedRecord[\"ncitycode\"] = citydefault;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          cityList: cityList1 || [],\n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: methodParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/CityAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","toast","Axios","initRequest","intl","getCityService","methodParam","dispatch","methodTypeService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","cityList","data","undefined","cityList1","get","citydefault","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getCityService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodTypeService = rsapi.post(\"city/getCity\", \r\n                                    {userinfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodTypeService];\r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodTypeService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n          \r\n            const cityList = constructOptionList(response[0].data  ||[],\"ncitycode\",\r\n            \"scityname\" , undefined, undefined, undefined);\r\n        const  cityList1  = cityList.get(\"OptionList\");\r\n        const  citydefault  = cityList.get(\"DefaultValue\");\r\n\r\n          \r\n        if (methodParam.operation === \"update\"){\r\n            selectedRecord = response[1].data;                            \r\n        }else{\r\n            selectedRecord[\"ncitycode\"] = citydefault; \r\n        }\r\n           \r\n            dispatch({type: DEFAULT_RETURN, payload:{cityList:cityList1 || [],                               \r\n                        operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:methodParam.ncontrolCode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(intl.formatMessage({id: error.message}));\r\n            } \r\n            else{               \r\n                toast.warn(intl.formatMessage({id: error.response.data}));\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}