{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, sortDataByParent } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\nimport { intl } from '../components/App';\nexport function getsubSampleDetail(inputData, isServiceRequired, isParentValue) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeTestTab,\n      activeSubSampleTab: inputData.activeTestTab,\n      userinfo: inputData.userinfo,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode ? inputData.ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.masterData.searchedSubSample ? inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation : 3 : inputData.checkBoxOperation,\n      noParameterget: inputData.checkBoxOperation == 1 ? 3 : 4,\n      nbatchmastercode: inputData.nbatchmastercode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalSubSample\", inputParamData).then(response => {\n        let responseData = { ...response.data,\n          APSelectedSample: inputData.APSelectedSample\n        };\n        responseData = sortData(responseData);\n        let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : [];\n        inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []; //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n\n        let skipInfo = {};\n        let masterData = {};\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n          let AP_TEST = inputData.masterData.AP_TEST;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n          if (isParentValue) {\n            inputData.masterData.AP_SUBSAMPLE = sortDataByParent(responseData['AP_SUBSAMPLE'], inputData.masterData.AP_SAMPLE, \"npreregno\");\n          }\n\n          masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            selectedPreregno: inputData.npreregno,\n            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n          };\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          }\n\n          if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n            inputData.searchSubSampleRef.current.value = \"\";\n            masterData['searchedSubSample'] = undefined;\n          }\n\n          if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 5) {\n            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                APSelectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const APSelectedTest = oldSelectedTest.length > 0 ? getSameRecordFromTwoArrays(oldSelectedTest, masterData.APSelectedSubSample, 'npreregno') : responseData.APSelectedTest;\n            masterData = { ...masterData,\n              APSelectedTest,\n              AP_TEST,\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter,\n              RegistrationSampleAttachment: responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0 ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment\n            };\n          }\n\n          if (inputData.checkBoxOperation === 7) {\n            masterData = { ...masterData,\n              APSelectedTest: responseData.APSelectedTest,\n              AP_TEST: responseData.AP_TEST,\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter,\n              RegistrationSampleAttachment: responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0 ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment\n            };\n          }\n\n          if (inputData.checkBoxOperation === 3) {\n            masterData = { ...masterData,\n              APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : [],\n              ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter,\n              RegistrationSampleAttachment: responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0 ? responseData.RegistrationSampleAttachment : [] : [],\n              RegistrationTestAttachment: responseData.RegistrationTestAttachment ? responseData.RegistrationTestAttachment.length > 0 ? responseData.RegistrationTestAttachment : [] : [],\n              RegistrationAttachment: responseData.RegistrationAttachment ? responseData.RegistrationAttachment.length > 0 ? responseData.RegistrationAttachment : [] : [],\n              RegistrationSampleComment: responseData.RegistrationSampleComment ? responseData.RegistrationSampleComment.length > 0 ? responseData.RegistrationSampleComment : [] : [],\n              RegistrationTestComment: responseData.RegistrationTestComment ? responseData.RegistrationTestComment.length > 0 ? responseData.RegistrationTestComment : [] : [],\n              RegistrationComment: responseData.RegistrationComment ? responseData.RegistrationComment.length > 0 ? responseData.RegistrationComment : [] : []\n            };\n          }\n\n          let {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          } = inputData; // let bool = false;\n          // Commented bool value because no need to check bool condition to update skipInfo value.\n          // if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\n\n          testskip = 0;\n          subSampleSkip = 0; //     bool = true\n          // }\n          // if (bool) {\n\n          skipInfo = {\n            testskip,\n            testtake,\n            subSampleSkip,\n            subSampleTake\n          }; // }\n        } else {\n          let oldApprovalParameter = inputData.masterData.ApprovalParameter;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          let APSelectedSubSamplenew = [];\n          APSelectedSubSamplenew = [...inputData.masterData.APSelectedSubSample, ...response.data.APSelectedSubSample];\n          masterData = { ...inputData.masterData,\n            APSelectedSample: inputData.APSelectedSample,\n            //APSelectedSubSample: inputData.masterData.APSelectedSubSample,\n            APSelectedSubSample: APSelectedSubSamplenew,\n            APSelectedTest: inputData.masterData.APSelectedTest || [],\n            selectedPreregno: inputData.npreregno\n          };\n\n          if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n            inputData.searchTestRef.current.value = \"\";\n            masterData['searchedTests'] = undefined;\n          } // if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          //     inputData.searchSubSampleRef.current.value = \"\";\n          //     masterData['searchedSubSample'] = undefined\n          // }\n          // if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          //     inputData.searchTestRef.current.value = \"\"\n          //     masterData['searchedTests'] = undefined\n          // }\n\n\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n\n          let ApprovalParameter = [];\n          let ResultUsedInstrument = [];\n          let ResultUsedTasks = [];\n          let RegistrationTestAttachment = [];\n          let ApprovalResultChangeHistory = [];\n          let RegistrationTestComment = [];\n          let ApprovalHistory = [];\n\n          if (inputData.checkBoxOperation === 1) {\n            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              inputData.masterData['ApprovalParameter'] = oldApprovalParameter;\n              masterData = { ...masterData,\n                //AP_TEST:responseData.AP_TEST,\n                ApprovalParameter: oldApprovalParameter,\n                APSelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode;\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            let dbData = [];\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                dbData = response.data.ResultUsedInstrument || [];\n                list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TASK\":\n                dbData = response.data.ResultUsedTasks || [];\n                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                dbData = response.data.RegistrationTestAttachment || [];\n                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                dbData = response.data.ApprovalResultChangeHistory || [];\n                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                dbData = response.data.RegistrationTestComment || [];\n                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                dbData = response.data.ApprovalHistory || [];\n                list = [...inputData.masterData.ApprovalHistory, ...dbData];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n\n              default:\n                dbData = response.data.ApprovalParameter || [];\n                list = [...inputData.masterData.ApprovalParameter, ...dbData];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 7) {\n            // masterData = {\n            //     ...masterData,\n            //     APSelectedTest:responseData.APSelectedTest,\n            //     AP_TEST:responseData.AP_TEST,\n            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n            // }\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                list = response.data.ApprovalParameter || [];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                list = response.data.ResultUsedInstrument || [];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                list = response.data.ResultUsedTasks || [];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                list = response.data.ApprovalResultChangeHistory || [];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                list = response.data.ApprovalHistory || [];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                list = response.data.ApprovalParameter ? [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter] : [...inputData.masterData.ApprovalParameter];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else {\n            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n            let list = [];\n            masterData = { ...masterData,\n              selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_RESULTS\":\n                list = response.data.ApprovalParameter || [];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_INSTRUMENT\":\n                list = response.data.ResultUsedInstrument || [];\n                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedInstrument\";\n                dataStateName = \"instrumentDataState\";\n                break;\n\n              case \"IDS_TASK\":\n                list = response.data.ResultUsedTasks || [];\n                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ResultUsedTasks\";\n                dataStateName = \"taskDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                list = response.data.RegistrationTestAttachment || [];\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                break;\n\n              case \"IDS_RESULTCHANGEHISTORY\":\n                list = response.data.ApprovalResultChangeHistory || [];\n                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalResultChangeHistory\";\n                dataStateName = \"resultChangeDataState\";\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                list = response.data.RegistrationTestComment || [];\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTAPPROVALHISTORY\":\n                list = response.data.ApprovalHistory || [];\n                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalHistory\";\n                dataStateName = \"historyDataState\";\n                break;\n\n              default:\n                list = response.data.ApprovalParameter ? [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter] : [...inputData.masterData.ApprovalParameter];\n                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n                activeName = \"ApprovalParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData = { ...masterData,\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            activeSampleTab: inputData.activeSampleTab,\n            activeSubSampleTab: inputData.activeSubSampleTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            activeTabIndex: inputData.activeTabIndex\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let skipInfo = {};\n      let bool = false;\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n      let TestSelected = [];\n      let subSampleSelected = [];\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      let isGrandChildGetRequired = false;\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno;\n        let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n          APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\n\n          if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          APSelectedSample,\n          APSelectedSubSample,\n          APSelectedTest\n        };\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: 3,\n          masterData,\n          ...skipInfo\n        };\n\n        if (subSample) {\n          if (APSelectedTest.length === 0) {\n            inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"AP_TEST\"];\n            dispatch(getTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetail(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetail(inputData, true));\n        } // dispatch(getTestChildTabDetail(inputData, true));\n\n      } else {\n        let masterData = { ...inputData.masterData,\n          APSelectedTest: TestSelected ? TestSelected : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\n          APSelectedSample: inputData.APSelectedSample,\n          APSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\n        };\n        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (subSample) {\n          if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_RESULTS\":\n            ApprovalParameter = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_INSTRUMENT\":\n            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TASK\":\n            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_RESULTCHANGEHISTORY\":\n            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTAPPROVALHISTORY\":\n            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ApprovalParameter,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              ApprovalResultChangeHistory,\n              RegistrationTestComment,\n              ApprovalHistory,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            activeSubSampleTab: inputData.activeSubSampleTab,\n            activeTabIndex: inputData.activeTabIndex\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalversioncode: inputData.napprovalversioncode,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      nsectioncode: inputData.nsectioncode,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      userinfo: inputData.userinfo,\n      ntransactionstatus: inputData.ntransactionstatus,\n      //  ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      nbatchmastercode: inputData.nbatchmastercode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let masterData = {};\n    let subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"approval/getApprovalTest\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData); //responseData = sortData(responseData,'descending', 'npreregno')\n\n        inputData.searchTestRef.current.null = \"\"; //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n\n        let oldSelectedTest = inputData.masterData.APSelectedTest;\n        let oldSelectedSubSample = inputData.masterData.APSelectedSubSample;\n        inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          APSelectedTest: inputData.masterData.APSelectedTest,\n          // APselectedSample: inputData.APSelectedSample,\n          APSelectedSubSample: inputData.APSelectedSubSample,\n          selectedPreregno: inputData.npreregno\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        } = inputData; // let bool = false;\n        // Commented bool value because no need to check bool condition to update skipInfo value.\n\n        if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subSampleSkip) {\n          subSampleSkip = 0;\n        } // if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n\n\n        testskip = 0; // bool = true\n        // }\n\n        let skipInfo = {}; // if (bool) {\n\n        skipInfo = {\n          testskip,\n          testtake,\n          subSampleSkip,\n          subSampleTake\n        }; // }\n\n        let ApprovalParameter = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ApprovalResultChangeHistory = [];\n        let RegistrationTestComment = [];\n        let ApprovalHistory = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n          ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode; // }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n\n          if (subSample) {\n            let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.map((test, index) => {\n              if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactionsamplecode;\n            ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode;\n\n            switch (inputData.activeSubSampleTab) {\n              case \"IDS_SUBSAMPLECOMMENTS\":\n                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n                activeName = \"RegistrationSampleComment\";\n                dataStateName = \"subSampleCommentDataState\";\n                break;\n\n              default:\n                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n                activeName = \"RegistrationSampleAttachment\";\n                dataStateName = \"subSampleAttachmentDataState\";\n                break;\n            }\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.ResultUsedInstrument || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...dbData];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ApprovalResultChangeHistory || [];\n              list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              dbData = response.data.ApprovalHistory || [];\n              list = [...inputData.masterData.ApprovalHistory, ...dbData];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.ApprovalParameter || [];\n              list = [...inputData.masterData.ApprovalParameter, ...dbData];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let testList = reArrangeArrays(inputData.masterData.AP_SUBSAMPLE, responseData.AP_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            APSelectedTest: [testList[0]],\n            AP_TEST: testList,\n            ApprovalParameter: responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0 ? responseData.ApprovalParameter : masterData.ApprovalParameter : masterData.ApprovalParameter\n          }; // let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\n\n          let keepOld = false; // let ntransactiontestcode;\n          // if (oldSelectedTest.length > 0) {\n          //     keepOld = true\n          //     masterData = {\n          //         ...masterData,\n          //         APSelectedTest: oldSelectedTest\n          //     }\n          // } else {\n          //     ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\"\n          // }\n\n          let ntransactiontestcode = testList.length > 0 ? testList[0].ntransactiontestcode : \"\";\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else {\n          masterData = { ...masterData,\n            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n          };\n          let ntransactiontestcode = response.data.APSelectedTest ? response.data.APSelectedTest.length > 0 ? response.data.APSelectedTest[0].ntransactiontestcode : inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : -1 : -1 : -1; //inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode: -1 : -1\n\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_RESULTS\":\n              list = response.data.ApprovalParameter || [];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument || [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks || [];\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment || [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ApprovalResultChangeHistory || [];\n              ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment || [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTAPPROVALHISTORY\":\n              list = response.data.ApprovalHistory || [];\n              ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalHistory\";\n              dataStateName = \"historyDataState\";\n              break;\n\n            default:\n              list = response.data.ApprovalParameter ? [...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter] : [...inputData.masterData.ApprovalParameter];\n              ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ApprovalParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true; // masterData = {\n            //     ...masterData,\n            //     //AP_TEST:responseData.AP_TEST,\n            //     ApprovalParameter:oldApprovalParameter,\n            //     APSelectedSubSample: oldSelectedSubSample\n            // }\n          } else {\n            ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode;\n          } // ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\n\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          ApprovalParameter,\n          ResultUsedInstrument,\n          ResultUsedTasks,\n          RegistrationTestAttachment,\n          ApprovalResultChangeHistory,\n          RegistrationTestComment,\n          ApprovalHistory,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        skipInfo = { ...skipInfo,\n          samplePrintHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        skipInfo = { ...skipInfo,\n          subSampleCommentDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          },\n          subSampleAttachmentDataState: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              APSelectedSubSample: inputData.APSelectedSubSample,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              activeTestTab: inputData.activeTestTab,\n              activeSampleTab: inputData.activeSampleTab,\n              skip: undefined,\n              take: undefined,\n              ...skipInfo\n            },\n            ...skipInfo,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.APSelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      let ApprovalParameter = [];\n      let ResultUsedInstrument = [];\n      let ResultUsedTasks = [];\n      let RegistrationTestAttachment = [];\n      let ApprovalResultChangeHistory = [];\n      let RegistrationTestComment = [];\n      let ApprovalHistory = [];\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\n        let APSelectedSample = inputData.masterData.APSelectedSample;\n        let selectedPreregno = inputData.npreregno; //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\n\n        let APSelectedSubSample = inputData.APSelectedSubSample; //let APSelectedSubSample = inputData.masterData.APSelectedSubSample\n\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\n        let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\n        let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          APSelectedSample,\n          selectedPreregno,\n          APSelectedTest,\n          APSelectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo\n        };\n        dispatch(getTestChildTabDetail(inputData, true));\n      } else {\n        let keepOld = false;\n        let ntransactiontestcode;\n        let masterData = { ...inputData.masterData,\n          APSelectedSubSample: inputData.APSelectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          APSelectedTest: TestSelected ? TestSelected : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\n        };\n        const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n\n        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        let skipInfo = {};\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            APSelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\n        }\n\n        switch (inputData.activeTestTab) {\n          case \"IDS_RESULTS\":\n            ApprovalParameter = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_INSTRUMENT\":\n            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TASK\":\n            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTATTACHMENTS\":\n            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_RESULTCHANGEHISTORY\":\n            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTCOMMENTS\":\n            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          case \"IDS_TESTAPPROVALHISTORY\":\n            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n\n          default:\n            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\");\n            break;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ApprovalParameter,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              ApprovalResultChangeHistory,\n              RegistrationTestComment,\n              ApprovalHistory\n            },\n            loading: false,\n            showFilter: false,\n            ...skipInfo,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab\n          }\n        });\n      }\n    } //}\n\n  };\n}\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              selectedTest: inputData.APselectedTest\n            }; //responseData = inputData.checkBoxOperation === 7 ?  sortData( response.data,\"descending\",\"npreregno\"):responseData;\n            //sortData( responseData,\"descending\",\"ntransactionsamplecode\")\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              APSelectedSample: inputData.APSelectedSample || inputData.masterData.APSelectedSample,\n              APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\n              APSelectedTest: inputData.APSelectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode ? inputData.ntransactionsamplecode : inputData.masterData.APSelectedSubSample[0].ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode,\n              activeTabIndex: inputData.activeTabIndex,\n              activeTabId: inputData.activeTabId\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                availableReleaseRecord: undefined,\n                activeTabIndex: inputData.activeTabIndex,\n                activeTabId: inputData.activeTabId,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            APSelectedTest: inputData.APSelectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              availableReleaseRecord: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            availableReleaseRecord: undefined,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo,\n        OrderCodeData: inputData.OrderCodeData ? inputData.OrderCodeData : -1\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          url = \"comments/getSampleComment\";\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          break;\n\n        case \"IDS_SOURCE\":\n          url = \"registration/getRegistrationSourceCountry\";\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          url = \"approval/getSampleApprovalHistory\";\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          url = \"approval/getPrintHistory\";\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          url = \"approval/getCOAHistory\";\n          break;\n\n        case \"IDS_EXTERNALORDERREPORTS\":\n          url = \"registration/getExternalOrderAttachment\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              activeTestTab: inputData.activeSampleTab,\n              screenName: inputData.screenName,\n              selectedId: null,\n              activeTabIndex: inputData.activeTabIndex\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n}\nexport function performAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/performAction\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\n        replaceUpdatedObject(response.data[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\n        let AP_SAMPLE = response.data[\"AP_SAMPLE\"];\n        let AP_SUBSAMPLE = response.data[\"AP_SUBSAMPLE\"];\n        let AP_TEST = response.data[\"AP_TEST\"];\n        delete response.data[\"AP_SAMPLE\"];\n        delete response.data[\"AP_SUBSAMPLE\"];\n        delete response.data[\"AP_TEST\"];\n        let masterData = { ...inputParam.masterData,\n          ...response.data,\n          APSelectedSample: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\n          APSelectedSubSample: replaceUpdatedObject(AP_SUBSAMPLE, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\"),\n          //APSelectedSubSample: getSameRecordFromTwoArrays(response.data.updatedSubSample, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\", undefined),\n          APSelectedTest: replaceUpdatedObject(AP_TEST, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\") //APSelectedTest: getSameRecordFromTwoArrays(response.data.updatedTest, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\", undefined),\n\n        }; // let masterData = {\n        //     ...inputParam.masterData,\n        //     ...response.data,\n        //     AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        //     AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        //     AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n        // }\n        // dispatch({type: DEFAULT_RETURN, payload:{\n        // masterData:{\n        //     ...inputParam.inputData.masterData,\n        //     ...response.data, \n        //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\n        //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n        //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\n        // },\n        //     loading:false ,\n        //     loadEsign:false,\n        //     openChildModal:false                     \n        // }}) \n\n        let respObject = {\n          masterData,\n          inputParam,\n          openChildModal: false,\n          operation: \"dynamic\",\n          masterStatus: \"\",\n          errorCode: undefined,\n          loadEsign: false,\n          showEsign: false,\n          selectedRecord: {},\n          loading: false,\n          availableReleaseRecord: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        }); //toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDecision(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateDecision\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData); // dispatch({type: DEFAULT_RETURN, payload:{\n      //     masterData:{\n      //         ...inputParam.masterData,\n      //         ...responseData, \n      //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\n      //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\n      //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\n      //     },\n      //     loading:false                      \n      // }}) \n\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\n        AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\n        AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"dynamic\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue,\n            realApprovalVersionList: inputData.realApprovalVersionList,\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList,\n            realRegTypeList: inputData.realRegTypeList,\n            realRegSubTypeList: inputData.realRegSubTypeList,\n            realFilterStatusList: inputData.realFilterStatusList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue,\n            realApprovalVersionList: inputData.realApprovalVersionList,\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList,\n            realRegTypeList: inputData.realRegTypeList,\n            realRegSubTypeList: inputData.realRegSubTypeList,\n            realFilterStatusList: inputData.realFilterStatusList\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApproveConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //toast.warn(\"Please Select All the Values in Filter\");\n      toast.warn(intl.FormattedMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; //  responseData = sortData(responseData)\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realApprovalVersionList: inputParam.inputData.realApprovalVersionList,\n            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList,\n            realRegTypeList: inputParam.inputData.realRegTypeList,\n            realRegSubTypeList: inputParam.inputData.realRegSubTypeList,\n            realFilterStatusList: inputParam.inputData.realFilterStatusList // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getApprovalSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getStatusCombo(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactionresultcode: inputParam.primaryKeyValue,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getStatusCombo\", inputData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\n      let Grade = GradeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            Grade,\n            selectedParamId: inputParam.primaryKeyValue\n          },\n          loading: false,\n          showFilter: false,\n          openChildModal: true,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord: {\n            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\n            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\n            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\n          },\n          operation: \"enforce\",\n          screenName: \"IDS_STATUS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterEdit(inputParam) {\n  return function (dispatch) {\n    let inputData = {\n      ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\n      userinfo: inputParam.userInfo\n    };\n\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"approval/getEditParameter\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...responseData,\n            loading: false,\n            openChildModal: true,\n            operation: \"update\",\n            screenName: \"IDS_APPROVALPARAMETER\" // ncontrolCode:inputParam.ncontrolCode,\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          multilingualMsg: \"IDS_SELECTTEST\"\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforApproval(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        if (inputParam.operation === 'dynamic') {\n          const methodUrl = \"performaction\";\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n        } else if (inputParam.operation === 'reportgeneration') {\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']));\n        } else if (inputParam.operation === 'decision') {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n          dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]));\n        } else if (inputParam.operation === 'enforce') {\n          const methodUrl = inputParam.screenData.inputParam.methodUrl;\n          inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          }\n\n          dispatch(updateEnforceStatus(inputParam[\"screenData\"].inputParam));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function previewSampleReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let ndecisionStatus = inputParam.sample.ndecisionstatus;\n\n    if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\n      ndecisionStatus = transactionStatus.PASS;\n    }\n\n    const inputData = {\n      ndecisionstatus: ndecisionStatus,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n      nreporttypecode: REPORTTYPE.SAMPLEREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.sample.nregtypecode,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      npreregno: inputParam.sample.npreregno\n    };\n    rsapi.post(\"approval/previewSampleReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateCOAReport(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.sample.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode\n    };\n    rsapi.post(\"approval/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo, idsName, dataField) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getEnforceCommentsHistory\", {\n      ntransactionresultcode: selectedParam.ntransactionresultcode,\n      userinfo: userInfo,\n      fetchField: dataField\n    }).then(response => {\n      if (response.data.length > 0) {\n        masterData = { ...masterData,\n          enforceCommentsHistory: response.data\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            masterData,\n            openChildModal: true,\n            operation: \"view\",\n            screenName: \"IDS_ENFORCECOMMENTHISTORY\",\n            idsName: idsName,\n            dataField: dataField\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function reportGenerate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      userinfo: inputParam.userinfo,\n      nregsubtypecode: inputParam.sample.nregsubtypecode,\n      reportName: \"RJ_Testwise_Report_QRCode\",\n      reportFormat: \"pdf\"\n    };\n    rsapi.post(\"reportjasper/generateCOAReport\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        if (response.data.filePath) {\n          // let user = response;\n          let elnURL = response.data.filePath;\n          window.open(elnURL, '_blank');\n        } else {\n          toast.info(intl.FormattedMessage({\n            id: \"IDS_ELNUIURLNOTAVAILABLE\"\n          }));\n        } // document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filePath);\n        // document.getElementById(\"download_data\").click();\n\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSubSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.ntransactionsamplecode.length > 0) {\n      let inputParamData = {\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"attachment/getSubSampleAttachment\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"comments/getSubSampleComment\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                APSelectedSubSample: inputData.APSelectedSubSample // selectedTestCode: inputData.ntransactiontestcode,\n\n              },\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeSubSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              APSelectedSample: inputData.APSelectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      //toast.warn(\"Please Select a Sample\");\n      toast.warn(intl.FormattedMessage({\n        id: \"IDS_PLSSELECTASAMPLE\"\n      }));\n    }\n  };\n}\nexport function ViewPatientDetails(masterData, screenName, userInfo, viewdetails) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const selectedRecord = {\n      ntestcode: viewdetails.test.ntestcode\n    };\n    rsapi.post(\"approval/getSampleViewDetails\", {\n      selectedRecord,\n      PatientId: viewdetails.test.spatientid,\n      npreregno: viewdetails.test.npreregno,\n      userinfo: userInfo\n    }).then(response => {\n      masterData['AuditModifiedComments'] = [];\n      masterData['AuditModifiedComments'] = response.data['AuditModifiedComments'];\n      masterData['CurrentResult'] = [];\n      masterData['CurrentResult'] = response.data['CurrentResult'];\n      masterData['viewdetails'] = [];\n      masterData['viewdetails'] = response.data['viewdetails'][0]; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_PREVIOUSRESULTVIEW\",\n          operation: \"\",\n          loading: false,\n          openChildModal: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestBasedCompletedBatch(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/getTestBasedOnCompletedBatch\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data // defaultTestvalues: inputData.defaultTestvalues //,\n            // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\n            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateEnforceStatus(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/updateEnforceStatus\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      replaceUpdatedObject(responseData[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\n      replaceUpdatedObject(responseData[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\n      replaceUpdatedObject(responseData[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\n      delete responseData[\"AP_SAMPLE\"];\n      delete responseData[\"AP_SUBSAMPLE\"];\n      delete responseData[\"AP_TEST\"];\n      let masterData = { ...inputParam.masterData,\n        ...responseData,\n        APSelectedSample: replaceUpdatedObject(responseData.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\n        APSelectedSubSample: replaceUpdatedObject(responseData.updatedSubSample, inputParam.masterData.APSelectedSubSample, 'ntransactionsamplecode'),\n        APSelectedTest: replaceUpdatedObject(responseData.updatedTest, inputParam.masterData.APSelectedTest, 'ntransactiontestcode')\n      };\n      let respObject = {\n        masterData,\n        inputParam,\n        openChildModal: false,\n        operation: \"update\",\n        masterStatus: \"\",\n        errorCode: undefined,\n        loadEsign: false,\n        showEsign: false,\n        selectedRecord: {},\n        loading: false\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkReleaseRecord(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approval/checkReleaseRecord\", inputParam.inputData).then(response => {\n      let availableReleaseRecord;\n\n      if (response.data.rtn == \"Success\") {\n        availableReleaseRecord = true;\n      } else {\n        availableReleaseRecord = false;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          availableReleaseRecord,\n          loading: false,\n          action: inputParam.action,\n          ncontrolCode: inputParam.inputData.performaction.ncontrolCode\n        }\n      }); // else{\n      //     dispatch(performAction(inputParam))\n      // } \n      // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ApprovalAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","replaceUpdatedObject","sortData","getSameRecordFromTwoArrays","getSameRecordFromTwoDifferentArrays","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","sortDataByParent","postCRUDOrganiseTransSearch","REPORTTYPE","reportCOAType","transactionStatus","intl","getsubSampleDetail","inputData","isServiceRequired","isParentValue","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntransactionstatus","nsectioncode","ntestcode","napprovalversioncode","napprovalconfigcode","activeTestTab","activeSampleTab","activeSubSampleTab","userinfo","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","checkBoxOperation","searchedSubSample","length","noParameterget","nbatchmastercode","activeName","dataStateName","subSample","post","then","response","responseData","data","APSelectedSample","oldSelectedTest","APSelectedTest","AP_TEST","skipInfo","oldSelectedSubSample","APSelectedSubSample","childTabsKey","removeElementFromArray","AP_SUBSAMPLE","AP_SAMPLE","selectedPreregno","searchTestRef","undefined","current","value","searchSubSampleRef","wholeSubSampleList","map","b","ntransactionsamplecode","forEach","subsample","index","includes","splice","ApprovalParameter","RegistrationSampleAttachment","RegistrationTestAttachment","RegistrationAttachment","RegistrationSampleComment","RegistrationTestComment","RegistrationComment","testskip","testtake","subSampleSkip","subSampleTake","oldApprovalParameter","APSelectedSubSamplenew","bool","ResultUsedInstrument","ResultUsedTasks","ApprovalResultChangeHistory","ApprovalHistory","wholeTestList","ntransactiontestcode","test","keepOld","list","dbData","selectedTest","skip","sort","filter","samplePrintHistoryDataState","sampleHistoryDataState","type","payload","loading","showFilter","take","activeTabIndex","catch","error","status","message","warn","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","x","join","getTestDetail","getTestChildTabDetail","null","wholeSubsampleList","testList","subSampleCommentDataState","subSampleAttachmentDataState","selectedSampleCode","filterTestSameOldSelectedTest","selectedTransactioncode","url","APselectedTest","selectedTestCode","activeTabId","availableReleaseRecord","screenName","getSampleChildTabDetail","OrderCodeData","selectedSample","selectedId","formatMessage","id","performAction","inputParam","rtn","updatedSample","respObject","openChildModal","operation","masterStatus","errorCode","loadEsign","showEsign","selectedRecord","postParamList","openModal","updateDecision","updatedSubSample","updatedTest","getRegistrationType","SampleTypeValue","realApprovalVersionList","realDesignTemplateMappingList","realRegTypeList","realRegSubTypeList","realFilterStatusList","getRegistrationSubType","RegTypeValue","getFilterStatus","RegSubTypeValue","getFilterBasedTest","DesignTemplateMappingValue","FormattedMessage","getApprovalVersion","getApprovalSample","searchSampleRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","getStatusCombo","ntransactionresultcode","primaryKeyValue","userInfo","GradeListMap","Grade","get","selectedParamId","ncontrolCode","senforcestatuscomment","parameterComment","getParameterEdit","item","multilingualMsg","validateEsignforApproval","methodUrl","toLowerCase","generateCOAReport","screenData","updateEnforceStatus","previewSampleReport","ndecisionStatus","sample","ndecisionstatus","DRAFT","PASS","nprimarykey","ncoareporttypecode","SAMPLECERTIFICATEPRIVIEW","nreporttypecode","SAMPLEREPORT","sprimarykeyname","ncontrolcode","document","getElementById","setAttribute","filepath","click","SAMPLEWISE","COAREPORT","getEnforceCommentsHistory","selectedParam","idsName","dataField","fetchField","enforceCommentsHistory","reportGenerate","reportName","reportFormat","filePath","elnURL","window","open","info","getSubSampleChildTabDetail","ViewPatientDetails","viewdetails","PatientId","spatientid","getTestBasedCompletedBatch","checkReleaseRecord","action","performaction"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, replaceUpdatedObject, sortData, getSameRecordFromTwoArrays, getSameRecordFromTwoDifferentArrays, filterRecordBasedOnPrimaryKeyName, reArrangeArrays,sortDataByParent } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport { REPORTTYPE, reportCOAType, transactionStatus } from '../components/Enumeration';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getsubSampleDetail(inputData, isServiceRequired,isParentValue) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeTestTab,\r\n            activeSubSampleTab: inputData.activeTestTab,\r\n            userinfo: inputData.userinfo,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode : inputData.ndesigntemplatemappingcode ? inputData.ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.masterData.searchedSubSample ?  \r\n                inputData.masterData.searchedSubSample.length > 0 ? inputData.checkBoxOperation:3:inputData.checkBoxOperation,\r\n            noParameterget:inputData.checkBoxOperation == 1 ? 3 : 4,\r\n            nbatchmastercode:inputData.nbatchmastercode\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalSubSample\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data, APSelectedSample: inputData.APSelectedSample }\r\n                    responseData = sortData(responseData);\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest ? inputData.masterData.APSelectedTest : []\r\n                    inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                    //inputData.masterData.APSelectedSubSample = responseData.APSelectedSubSample ? responseData.APSelectedSubSample : inputData.masterData.AP_SUBSAMPLE.length > 0 ? [inputData.masterData.AP_SUBSAMPLE[0]] : []\r\n                    let skipInfo = {}\r\n                    let masterData = {}\r\n                    \r\n                    \r\n                    if (subSample) {\r\n                        \r\n                        let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                        let AP_TEST = inputData.masterData.AP_TEST\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        if(isParentValue){\r\n                        inputData.masterData.AP_SUBSAMPLE= sortDataByParent(responseData['AP_SUBSAMPLE'],inputData.masterData.AP_SAMPLE, \"npreregno\");\r\n                    }\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            APSelectedSubSample: inputData.masterData.AP_SUBSAMPLE.length > 0 ?\r\n                                [inputData.masterData.AP_SUBSAMPLE[0]] : [],\r\n                        }\r\n                        \r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                            inputData.searchSubSampleRef.current.value = \"\";\r\n                            masterData['searchedSubSample'] = undefined\r\n                        }\r\n                        if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 5) {\r\n\r\n                            const wholeSubSampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    APSelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const APSelectedTest = oldSelectedTest.length >0 ? getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.APSelectedSubSample, 'npreregno') : responseData.APSelectedTest\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest,\r\n                                AP_TEST,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter,\r\n                                RegistrationSampleAttachment : responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0  ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment: masterData.RegistrationSampleAttachment\r\n                            }\r\n                        }\r\n                        if(inputData.checkBoxOperation === 7 )\r\n                        {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest:responseData.APSelectedTest,\r\n                                AP_TEST:responseData.AP_TEST,\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter,\r\n                                RegistrationSampleAttachment : responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0  ? responseData.RegistrationSampleAttachment : masterData.RegistrationSampleAttachment: masterData.RegistrationSampleAttachment\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                APSelectedTest: masterData.AP_TEST.length > 0 ? [masterData.AP_TEST[0]] : [],\r\n                                ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter :masterData.ApprovalParameter : masterData.ApprovalParameter,\r\n                                RegistrationSampleAttachment : responseData.RegistrationSampleAttachment ? responseData.RegistrationSampleAttachment.length > 0  ? responseData.RegistrationSampleAttachment : []: [],\r\n                                RegistrationTestAttachment : responseData.RegistrationTestAttachment ? responseData.RegistrationTestAttachment.length > 0  ? responseData.RegistrationTestAttachment : []: [],\r\n                                RegistrationAttachment : responseData.RegistrationAttachment ? responseData.RegistrationAttachment.length > 0  ? responseData.RegistrationAttachment : []: [],\r\n                                RegistrationSampleComment : responseData.RegistrationSampleComment ? responseData.RegistrationSampleComment.length > 0  ? responseData.RegistrationSampleComment : []: [],\r\n                                RegistrationTestComment : responseData.RegistrationTestComment ? responseData.RegistrationTestComment.length > 0  ? responseData.RegistrationTestComment : []: [],\r\n                                RegistrationComment : responseData.RegistrationComment ? responseData.RegistrationComment.length > 0  ? responseData.RegistrationComment : []: []\r\n                               \r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                        // let bool = false;\r\n                        // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                        // if (inputData.masterData.AP_SUBSAMPLE.length < inputData.subSampleSkip) {\r\n                            testskip = 0;\r\n                            subSampleSkip = 0;\r\n                        //     bool = true\r\n                        // }\r\n                        // if (bool) {\r\n                            skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                        // }\r\n                    }\r\n                    else {\r\n                        let oldApprovalParameter = inputData.masterData.ApprovalParameter;\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                        let APSelectedSubSamplenew = []\r\n                        APSelectedSubSamplenew=[\r\n                        ...inputData.masterData.APSelectedSubSample,\r\n                        ...response.data.APSelectedSubSample];\r\n\r\n\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample,\r\n                            //APSelectedSubSample: inputData.masterData.APSelectedSubSample,\r\n                            APSelectedSubSample:APSelectedSubSamplenew,\r\n                            APSelectedTest: inputData.masterData.APSelectedTest || [],\r\n                            selectedPreregno: inputData.npreregno,\r\n                        }\r\n                        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                            inputData.searchTestRef.current.value = \"\"\r\n                            masterData['searchedTests'] = undefined\r\n                        }\r\n                        // if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        //     inputData.searchSubSampleRef.current.value = \"\";\r\n                        //     masterData['searchedSubSample'] = undefined\r\n                        // }\r\n                        // if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        //     inputData.searchTestRef.current.value = \"\"\r\n                        //     masterData['searchedTests'] = undefined\r\n                        // }\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n                        if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                        let ApprovalParameter = [];\r\n                        let ResultUsedInstrument = [];\r\n                        let ResultUsedTasks = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let ApprovalResultChangeHistory = [];\r\n                        let RegistrationTestComment = [];\r\n                        let ApprovalHistory = [];\r\n\r\n                        if (inputData.checkBoxOperation === 1) {\r\n\r\n                            let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                inputData.masterData['ApprovalParameter'] = oldApprovalParameter\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    //AP_TEST:responseData.AP_TEST,\r\n                                    ApprovalParameter:oldApprovalParameter,\r\n                                    APSelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        } else if (inputData.checkBoxOperation === 5) {\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                            let list = [];\r\n                            let dbData = []\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                           \r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    dbData = response.data.ResultUsedInstrument || []\r\n                                    list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    dbData = response.data.ResultUsedTasks || []\r\n                                    list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestAttachment || []\r\n                                    list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    dbData = response.data.ApprovalResultChangeHistory || []\r\n                                    list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    dbData = response.data.ApprovalHistory || []\r\n                                    list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                                default:\r\n                                    dbData = response.data.ApprovalParameter || []\r\n                                    list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            }\r\n                        } \r\n                        else if(inputData.checkBoxOperation === 7 )\r\n                        {\r\n                            // masterData = {\r\n                            //     ...masterData,\r\n                            //     APSelectedTest:responseData.APSelectedTest,\r\n                            //     AP_TEST:responseData.AP_TEST,\r\n                            //     ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                            // }\r\n\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                          \r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    list = response.data.ApprovalParameter || []\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    list = response.data.ResultUsedInstrument || []\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    list = response.data.ResultUsedTasks || []\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    list = response.data.ApprovalResultChangeHistory || []\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    list = response.data.ApprovalHistory || []\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    list = response.data.ApprovalParameter?[...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]:\r\n                                    [...inputData.masterData.ApprovalParameter]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }else {\r\n                            let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0\r\n                            let list = [];\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                            }\r\n                          \r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_RESULTS\":\r\n                                    list = response.data.ApprovalParameter || []\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                case \"IDS_INSTRUMENT\":\r\n                                    list = response.data.ResultUsedInstrument || []\r\n                                    ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedInstrument\"\r\n                                    dataStateName = \"instrumentDataState\"\r\n                                    break;\r\n                                case \"IDS_TASK\":\r\n                                    list = response.data.ResultUsedTasks || []\r\n                                    ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ResultUsedTasks\"\r\n                                    dataStateName = \"taskDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    list = response.data.RegistrationTestAttachment || []\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    break;\r\n                                case \"IDS_RESULTCHANGEHISTORY\":\r\n                                    list = response.data.ApprovalResultChangeHistory || []\r\n                                    ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalResultChangeHistory\"\r\n                                    dataStateName = \"resultChangeDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    list = response.data.RegistrationTestComment || []\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                case \"IDS_TESTAPPROVALHISTORY\":\r\n                                    list = response.data.ApprovalHistory || []\r\n                                    ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalHistory\"\r\n                                    dataStateName = \"historyDataState\"\r\n                                    break;\r\n                                default:\r\n                                    list = response.data.ApprovalParameter?[...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]:\r\n                                    [...inputData.masterData.ApprovalParameter]\r\n                                    ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    activeName = \"ApprovalParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        masterData = {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeSubSampleTab:inputData.activeSubSampleTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let skipInfo = {};\r\n            let bool = false;\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n            let ApprovalHistory = [];\r\n            let isGrandChildGetRequired = false;\r\n            if(inputData[\"statusNone\"])\r\n            {\r\n             TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n             subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else\r\n            {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n          \r\n                if (TestSelected.length > 0) {\r\n                    isGrandChildGetRequired = false;\r\n                } else {\r\n                    isGrandChildGetRequired = true;\r\n                }\r\n\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n        \r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                let APSelectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.masterData.AP_SUBSAMPLE\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    APSelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.AP_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, APSelectedSample, APSelectedSubSample, APSelectedTest }\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: 3,masterData,...skipInfo\r\n                }\r\n\r\n                if (subSample) {\r\n                    if (APSelectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = APSelectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = APSelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"AP_TEST\"]\r\n                        dispatch(getTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetail(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetail(inputData, true));\r\n                }\r\n\r\n                // dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n              \r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    APSelectedTest: TestSelected ? TestSelected :inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [],\r\n                    APSelectedSample: inputData.APSelectedSample,\r\n                    APSelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.AP_SUBSAMPLE.length>0 ? [inputData.masterData.AP_SUBSAMPLE[0]]:[]\r\n                }\r\n                let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                });\r\n\r\n                if(subSample)\r\n                {\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n    \r\n                }\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\";\r\n                }\r\n                switch (inputData.activeTestTab) {\r\n                    case \"IDS_RESULTS\":\r\n                        ApprovalParameter = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName (inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].npreregno, \"npreregno\"): filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                        break;\r\n                    case \"IDS_INSTRUMENT\":\r\n                        ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TASK\":\r\n                        ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTATTACHMENTS\":\r\n                        RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_RESULTCHANGEHISTORY\":\r\n                        ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTCOMMENTS\":\r\n                        RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    case \"IDS_TESTAPPROVALHISTORY\":\r\n                        ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                    default:\r\n                        ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                        break;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ApprovalParameter,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            ApprovalResultChangeHistory,\r\n                            RegistrationTestComment,\r\n                            ApprovalHistory,\r\n                            ...skipInfo,\r\n                        },\r\n                        ...skipInfo,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        activeSubSampleTab:inputData.activeSubSampleTab,\r\n                        activeTabIndex: inputData.activeTabIndex\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function getTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            nsectioncode: inputData.nsectioncode,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ntransactionstatus:inputData.ntransactionstatus,\r\n          //  ndesigntemplatemappingcode : inputData.masterData.ndesigntemplatemappingcode,\r\n            ndesigntemplatemappingcode : inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            nbatchmastercode:inputData.nbatchmastercode\r\n\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let masterData = {};\r\n        let subSample = inputData.nneedsubsample;\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"approval/getApprovalTest\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    //responseData = sortData(responseData,'descending', 'npreregno')\r\n                    inputData.searchTestRef.current.null = \"\"\r\n                    //inputData.masterData.APSelectedTest = responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    let oldSelectedTest = inputData.masterData.APSelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n\r\n                    inputData.masterData.APSelectedTest = oldSelectedTest.length > 0 ? oldSelectedTest : responseData.APSelectedTest ? responseData.APSelectedTest : inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.masterData.APSelectedTest,\r\n                        // APselectedSample: inputData.APSelectedSample,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                    }\r\n\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n\r\n                    let { testskip, testtake, subSampleSkip, subSampleTake } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    if (inputData.masterData.AP_SUBSAMPLE.length <= inputData.subSampleSkip) {\r\n                        subSampleSkip = 0;\r\n                    }\r\n                    // if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    let skipInfo = {}\r\n                    // if (bool) {\r\n                        skipInfo = { testskip, testtake, subSampleSkip, subSampleTake }\r\n                    // }\r\n\r\n                    let ApprovalParameter = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ApprovalResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let ApprovalHistory = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                       \r\n                        ntransactiontestcode = masterData.APSelectedTest[0].ntransactiontestcode\r\n                        // }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        if(subSample)\r\n                        {\r\n                            let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.map((test, index) => {\r\n                                if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                       \r\n                        ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\r\n                            switch (inputData.activeSubSampleTab) {\r\n                                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                    RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleComment\"\r\n                                    dataStateName = \"subSampleCommentDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleAttachment\"\r\n                                    dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : 0;\r\n                        let list = [];\r\n                        let dbData = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(dbData, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.ResultUsedInstrument || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...dbData]\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData]\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData]\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ApprovalResultChangeHistory || []\r\n                                list = [...inputData.masterData.ApprovalResultChangeHistory, ...dbData]\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData]\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                dbData = response.data.ApprovalHistory || []\r\n                                list = [...inputData.masterData.ApprovalHistory, ...dbData]\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.ApprovalParameter || []\r\n                                list = [...inputData.masterData.ApprovalParameter, ...dbData]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let testList = reArrangeArrays( inputData.masterData.AP_SUBSAMPLE, responseData.AP_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest:[testList[0]],\r\n                            AP_TEST: testList,\r\n                            ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n                        // let wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                    \r\n                         let keepOld = false;\r\n                        // let ntransactiontestcode;\r\n                        // if (oldSelectedTest.length > 0) {\r\n                        //     keepOld = true\r\n                        //     masterData = {\r\n                        //         ...masterData,\r\n                        //         APSelectedTest: oldSelectedTest\r\n                        //     }\r\n                        // } else {\r\n                        //     ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\"\r\n                        // }\r\n                        let ntransactiontestcode = testList.length > 0 ? testList[0].ntransactiontestcode : \"\"\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                ApprovalParameter =  getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : []\r\n                        }\r\n                        let ntransactiontestcode = response.data.APSelectedTest ? response.data.APSelectedTest.length > 0 ? \r\n                                response.data.APSelectedTest[0].ntransactiontestcode : inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ?  inputData.masterData.AP_TEST[0].ntransactiontestcode :-1:-1:-1\r\n                                \r\n                                //inputData.masterData.AP_TEST ? inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode: -1 : -1\r\n                        let list = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.ApprovalParameter || []\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument || []\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks || []\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment || []\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ApprovalResultChangeHistory || []\r\n                                ApprovalResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment || []\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_TESTAPPROVALHISTORY\":\r\n                                list = response.data.ApprovalHistory || []\r\n                                ApprovalHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalHistory\"\r\n                                dataStateName = \"historyDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.ApprovalParameter?[...inputData.masterData.ApprovalParameter, ...response.data.ApprovalParameter]:\r\n                                [...inputData.masterData.ApprovalParameter]\r\n                                ApprovalParameter = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ApprovalParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if(subSample)\r\n                        {\r\n                            let wholeSubsampleList = masterData.AP_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.map((test, index) => {\r\n                                if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                            // masterData = {\r\n                            //     ...masterData,\r\n                            //     //AP_TEST:responseData.AP_TEST,\r\n                            //     ApprovalParameter:oldApprovalParameter,\r\n                            //     APSelectedSubSample: oldSelectedSubSample\r\n                            // }\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n                       \r\n                       // ntransactionsamplecode = masterData.APSelectedSubSample[0].ntransactionsamplecode\r\n                            switch (inputData.activeSubSampleTab) {\r\n                                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                    RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleComment\"\r\n                                    dataStateName = \"subSampleCommentDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(responseData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                    activeName = \"RegistrationSampleAttachment\"\r\n                                    dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        ApprovalParameter,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedTasks,\r\n                        RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory,\r\n                        RegistrationTestComment,\r\n                        ApprovalHistory,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        samplePrintHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        sampleHistoryDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    skipInfo = {\r\n                        ...skipInfo,\r\n                        subSampleCommentDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        },\r\n                        subSampleAttachmentDataState: {\r\n                            ...inputData[dataStateName],\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                activeTestTab: inputData.activeTestTab,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                skip: undefined,\r\n                                take: undefined,\r\n                                ...skipInfo\r\n                            },\r\n                            ...skipInfo,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake } = inputData;\r\n            let oldSelectedTest = inputData.masterData.APSelectedTest\r\n            let TestSelected = \r\n          inputData[\"statusNone\"] ?\r\n            getRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\"):\r\n            filterRecordBasedOnPrimaryKeyName(inputData.masterData.APSelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n\r\n            let ApprovalParameter = [];\r\n            let ResultUsedInstrument = [];\r\n            let ResultUsedTasks = [];\r\n            let RegistrationTestAttachment = [];\r\n            let ApprovalResultChangeHistory = [];\r\n            let RegistrationTestComment = [];\r\n\r\n            let ApprovalHistory = [];\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                //let ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ? inputData.masterData.AP_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let APSelectedSample = inputData.masterData.APSelectedSample;\r\n                let selectedPreregno = inputData.npreregno;\r\n                //let selectedTest = inputData.masterData.AP_TEST.length > 0 ? [inputData.masterData.AP_TEST[0]] : [];\r\n                let APSelectedSubSample = inputData.APSelectedSubSample\r\n                //let APSelectedSubSample = inputData.masterData.APSelectedSubSample\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoDifferentArrays(oldSelectedTest, inputData.masterData.AP_TEST, \"ntransactiontestcode\");\r\n                let APSelectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : [inputData.masterData.AP_TEST[0]];\r\n                let ntransactiontestcode = APSelectedTest.length > 0 ? APSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n                if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true;\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ResultUsedInstrument\",\r\n                        \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"], ntransactiontestcode, APSelectedSample, selectedPreregno, APSelectedTest,\r\n                    APSelectedSubSample, checkBoxOperation: 3, skipInfo\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true));\r\n            } \r\n            else {\r\n                    let keepOld = false;\r\n                    let ntransactiontestcode;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedSubSample: inputData.APSelectedSubSample,\r\n                        selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                        APSelectedTest: TestSelected ? TestSelected : inputData.masterData.AP_TEST.length > 0 ?\r\n                            [inputData.masterData.AP_TEST[0]] : [],\r\n                    }\r\n\r\n                    const wholeTestList = masterData.AP_TEST.map(b => b.ntransactiontestcode)\r\n                    oldSelectedTest.forEach((test, index) => {\r\n                        if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            oldSelectedTest.splice(index, 1)\r\n                        }\r\n                        return null;\r\n                    });\r\n                    if (inputData.masterData.AP_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    let skipInfo = {}\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n\r\n                    if (oldSelectedTest.length > 0) {\r\n                        keepOld = true\r\n                        masterData = {\r\n                            ...masterData,\r\n                            APSelectedTest: oldSelectedTest,\r\n                        }\r\n                    } else {\r\n                        ntransactiontestcode = inputData.masterData.AP_TEST.length > 0 ?\r\n                            inputData.masterData.AP_TEST[0].ntransactiontestcode : \"-1\"\r\n                    }\r\n\r\n\r\n                    switch (inputData.activeTestTab) {\r\n                        case \"IDS_RESULTS\":\r\n                            ApprovalParameter = keepOld ? \r\n                            inputData[\"statusNone\"] ?\r\n                            getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):\r\n                            filterRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_INSTRUMENT\":\r\n                            ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TASK\":\r\n                            ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTATTACHMENTS\":\r\n                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_RESULTCHANGEHISTORY\":\r\n                            ApprovalResultChangeHistory = keepOld ? inputData.masterData.ApprovalResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTCOMMENTS\":\r\n                            RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        case \"IDS_TESTAPPROVALHISTORY\":\r\n                            ApprovalHistory = keepOld ? inputData.masterData.ApprovalHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                        default:\r\n                            ApprovalParameter = keepOld ? inputData.masterData.ApprovalParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.ApprovalParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                            break;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ApprovalParameter,\r\n                                ResultUsedInstrument,\r\n                                ResultUsedTasks,\r\n                                RegistrationTestAttachment,\r\n                                ApprovalResultChangeHistory,\r\n                                RegistrationTestComment,\r\n                                ApprovalHistory\r\n                            },\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            ...skipInfo,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        //}\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestChildTabDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample, selectedTest: inputData.APselectedTest }\r\n                            //responseData = inputData.checkBoxOperation === 7 ?  sortData( response.data,\"descending\",\"npreregno\"):responseData;\r\n                            //sortData( responseData,\"descending\",\"ntransactionsamplecode\")\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                APSelectedSample: inputData.APSelectedSample || inputData.masterData.APSelectedSample,\r\n                                APSelectedSubSample: inputData.APSelectedSubSample || inputData.masterData.APSelectedSubSample,\r\n                                APSelectedTest: inputData.APSelectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode ? inputData.ntransactionsamplecode :inputData.masterData.APSelectedSubSample[0].ntransactionsamplecode ,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                                activeTabIndex:inputData.activeTabIndex,\r\n                                activeTabId:inputData.activeTabId\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    availableReleaseRecord:undefined,\r\n                                    activeTabIndex:inputData.activeTabIndex,\r\n                                    activeTabId:inputData.activeTabId,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.APSelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        APSelectedTest: inputData.APSelectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            availableReleaseRecord:undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        availableReleaseRecord:undefined,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function getSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo,\r\n                OrderCodeData: inputData.OrderCodeData ? inputData.OrderCodeData : -1\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    break;\r\n                case \"IDS_SOURCE\":\r\n                    url = \"registration/getRegistrationSourceCountry\"\r\n                    break;\r\n                case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                    url = \"approval/getSampleApprovalHistory\"\r\n                    break;\r\n\r\n                case \"IDS_PRINTHISTORY\":\r\n                    url = \"approval/getPrintHistory\"\r\n                    break;\r\n                case \"IDS_REPORTHISTORY\":\r\n                    url = \"approval/getCOAHistory\"\r\n                    break;\r\n                case \"IDS_EXTERNALORDERREPORTS\":\r\n                    url = \"registration/getExternalOrderAttachment\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                activeTestTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName,\r\n                                selectedId: null,\r\n                                activeTabIndex: inputData.activeTabIndex\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            \r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n}\r\nexport function performAction(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/performAction\", inputParam.inputData)\r\n            .then(response => {\r\n                if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                    replaceUpdatedObject(response.data[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\r\n\r\n                    let AP_SAMPLE = response.data[\"AP_SAMPLE\"];\r\n                    let AP_SUBSAMPLE = response.data[\"AP_SUBSAMPLE\"];\r\n                    let AP_TEST = response.data[\"AP_TEST\"];\r\n\r\n\r\n                    delete response.data[\"AP_SAMPLE\"];\r\n                    delete response.data[\"AP_SUBSAMPLE\"];\r\n                    delete response.data[\"AP_TEST\"];\r\n                    let masterData = {\r\n                        ...inputParam.masterData,\r\n                         ...response.data,\r\n                         APSelectedSample: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\r\n                          APSelectedSubSample: replaceUpdatedObject(AP_SUBSAMPLE, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\"),\r\n                         //APSelectedSubSample: getSameRecordFromTwoArrays(response.data.updatedSubSample, inputParam.masterData.APSelectedSubSample, \"ntransactionsamplecode\", undefined),\r\n                         APSelectedTest: replaceUpdatedObject(AP_TEST, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\"),\r\n                        //APSelectedTest: getSameRecordFromTwoArrays(response.data.updatedTest, inputParam.masterData.APSelectedTest, \"ntransactiontestcode\", undefined),\r\n                    }\r\n                // let masterData = {\r\n                //     ...inputParam.masterData,\r\n                //     ...response.data,\r\n                //     AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                //     AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                //     AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n                // }\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                // masterData:{\r\n                //     ...inputParam.inputData.masterData,\r\n                //     ...response.data, \r\n                //     AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam   .inputData.masterData.AP_SAMPLE,'npreregno'),\r\n                //     AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.inputData.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //     AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.inputData.masterData.AP_TEST,'ntransactiontestcode')\r\n                // },\r\n                //     loading:false ,\r\n                //     loadEsign:false,\r\n                //     openChildModal:false                     \r\n                // }}) \r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    availableReleaseRecord:undefined                }\r\n\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n\r\n                \r\n            }else{\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false\r\n                    }\r\n                });\r\n                //toast.warn(response.data.rtn);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function updateDecision(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateDecision\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                // dispatch({type: DEFAULT_RETURN, payload:{\r\n                //     masterData:{\r\n                //         ...inputParam.masterData,\r\n                //         ...responseData, \r\n                //         AP_SAMPLE:replaceUpdatedObject(response.data.updatedSample,inputParam.masterData.AP_SAMPLE,'npreregno'),\r\n                //         AP_SUBSAMPLE:replaceUpdatedObject(response.data.updatedSubSample,inputParam.masterData.AP_SUBSAMPLE,'ntransactionsamplecode'),\r\n                //         AP_TEST:replaceUpdatedObject(response.data.updatedTest,inputParam.masterData.AP_TEST,'ntransactiontestcode')\r\n\r\n                //     },\r\n                //     loading:false                      \r\n                // }}) \r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    AP_SAMPLE: replaceUpdatedObject(response.data.updatedSample, inputParam.masterData.AP_SAMPLE, 'npreregno'),\r\n                    AP_SUBSAMPLE: replaceUpdatedObject(response.data.updatedSubSample, inputParam.masterData.AP_SUBSAMPLE, 'ntransactionsamplecode'),\r\n                    AP_TEST: replaceUpdatedObject(response.data.updatedTest, inputParam.masterData.AP_TEST, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"dynamic\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue,\r\n                            realApprovalVersionList:inputData.realApprovalVersionList,\r\n                            realDesignTemplateMappingList:inputData.realDesignTemplateMappingList,\r\n                            realRegTypeList:inputData.realRegTypeList,\r\n                            realRegSubTypeList :inputData.realRegSubTypeList,\r\n                            realFilterStatusList:inputData.realFilterStatusList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue,\r\n                            realApprovalVersionList:inputData.realApprovalVersionList,\r\n                            realDesignTemplateMappingList:inputData.realDesignTemplateMappingList,\r\n                            realRegTypeList:inputData.realRegTypeList,\r\n                            realRegSubTypeList :inputData.realRegSubTypeList,\r\n                            realFilterStatusList:inputData.realFilterStatusList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApproveConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue:inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            //toast.warn(\"Please Select All the Values in Filter\");\r\n            toast.warn(intl.FormattedMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n              //  responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realApprovalVersionList:inputParam.inputData.realApprovalVersionList,\r\n                            realDesignTemplateMappingList:inputParam.inputData.realDesignTemplateMappingList,\r\n                            realRegTypeList:inputParam.inputData.realRegTypeList,\r\n                            realRegSubTypeList :inputParam.inputData.realRegSubTypeList,\r\n                            realFilterStatusList:inputParam.inputData.realFilterStatusList\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovalSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getApprovalSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getStatusCombo(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactionresultcode: inputParam.primaryKeyValue,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getStatusCombo\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                //responseData = sortData(responseData)\r\n                const GradeListMap = constructOptionList(response.data.Grade || [], \"ngradecode\", \"sgradename\", 'ascending', 'ngradecode', false);\r\n                let Grade = GradeListMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            Grade,\r\n                            selectedParamId: inputParam.primaryKeyValue\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openChildModal: true,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord: {\r\n                            senforcestatuscomment: response.data.parameterComment && response.data.parameterComment.senforcestatuscomment,\r\n                            ntransactionresultcode: response.data.parameterComment && response.data.parameterComment.ntransactionresultcode,\r\n                            ntransactiontestcode: response.data.parameterComment && response.data.parameterComment.ntransactiontestcode\r\n                        },\r\n                        operation: \"enforce\",\r\n                        screenName: \"IDS_STATUS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getParameterEdit(inputParam) {\r\n    return function (dispatch) {\r\n        let inputData = {\r\n            ntransactiontestcode: inputParam.selectedTest && inputParam.selectedTest.map(item => item.ntransactiontestcode).join(\",\"),\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approval/getEditParameter\", inputData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ...responseData,\r\n                            loading: false,\r\n                            openChildModal: true,\r\n                            operation: \"update\",\r\n                            screenName: \"IDS_APPROVALPARAMETER\"\r\n                            // ncontrolCode:inputParam.ncontrolCode,\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    multilingualMsg: \"IDS_SELECTTEST\",\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nexport function validateEsignforApproval(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    if (inputParam.operation === 'dynamic') {\r\n                        const methodUrl = \"performaction\"\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                        }\r\n                        dispatch(performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    } else if (inputParam.operation === 'reportgeneration') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"]['reporparam'][\"agree\"];\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"reporparam\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(generateCOAReport(inputParam[\"screenData\"][\"inputParam\"]['reporparam']))\r\n                    }\r\n                    else if (inputParam.operation === 'decision') {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]['updatedecision'][\"agree\"];\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n                        dispatch(updateDecision(inputParam[\"screenData\"][\"inputParam\"]))\r\n                    }\r\n                    else if (inputParam.operation === 'enforce') {\r\n                        const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n    \r\n                        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                        }\r\n                        dispatch(updateEnforceStatus(inputParam[\"screenData\"].inputParam))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function previewSampleReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        let ndecisionStatus = inputParam.sample.ndecisionstatus;\r\n        if (inputParam.sample.ndecisionstatus === undefined || inputParam.sample.ndecisionstatus === transactionStatus.DRAFT) {\r\n            ndecisionStatus = transactionStatus.PASS;\r\n        }\r\n        const inputData = {\r\n            ndecisionstatus: ndecisionStatus,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n            nreporttypecode: REPORTTYPE.SAMPLEREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.sample.nregtypecode,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            npreregno: inputParam.sample.npreregno\r\n        }\r\n        rsapi.post(\"approval/previewSampleReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateCOAReport(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.sample.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode\r\n        }\r\n        rsapi.post(\"approval/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getEnforceCommentsHistory(selectedParam, masterData, userInfo,idsName,dataField) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getEnforceCommentsHistory\", {\r\n            ntransactionresultcode: selectedParam.ntransactionresultcode,\r\n            userinfo: userInfo,\r\n            fetchField:dataField\r\n        })\r\n            .then(response => {\r\n                if (response.data.length > 0) {\r\n                    masterData = { ...masterData, enforceCommentsHistory: response.data }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            masterData,\r\n                            openChildModal: true,\r\n                            operation: \"view\",\r\n                            screenName: \"IDS_ENFORCECOMMENTHISTORY\",\r\n                            idsName:idsName,\r\n                            dataField:dataField\r\n                        }\r\n                    })\r\n                } else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, multilingualMsg: \"IDS_NOPREVIOUSCOMMENTSFOUND\" } })\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function reportGenerate(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            userinfo: inputParam.userinfo,\r\n            nregsubtypecode: inputParam.sample.nregsubtypecode,\r\n            reportName:\"RJ_Testwise_Report_QRCode\",\r\n            reportFormat:\"pdf\"\r\n           \r\n        }\r\n        rsapi.post(\"reportjasper/generateCOAReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n\r\n                    if (response.data.filePath) {\r\n                       // let user = response;\r\n                        let elnURL = response.data.filePath;\r\n                        window.open(elnURL, '_blank');\r\n                    } else {\r\n                        toast.info(intl.FormattedMessage({\r\n                            id: \"IDS_ELNUIURLNOTAVAILABLE\"\r\n                        }))\r\n                    }\r\n\r\n                    // document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filePath);\r\n                    // document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openChildModal: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSubSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactionsamplecode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSubSampleTab) {\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSubSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"comments/getSubSampleComment\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    APSelectedSubSample: inputData.APSelectedSubSample,\r\n                                   // selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeTestTab: inputData.activeSubSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            APSelectedSample: inputData.APSelectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            //toast.warn(\"Please Select a Sample\");\r\n            toast.warn(intl.FormattedMessage({\r\n                id: \"IDS_PLSSELECTASAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function ViewPatientDetails(masterData, screenName, userInfo, viewdetails) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const selectedRecord={\r\n            ntestcode:viewdetails.test.ntestcode\r\n        }\r\n        rsapi.post(\"approval/getSampleViewDetails\", { selectedRecord, PatientId:viewdetails.test.spatientid, npreregno: viewdetails.test.npreregno, userinfo: userInfo })\r\n            .then(response => {\r\n                masterData['AuditModifiedComments'] = [];\r\n                masterData['AuditModifiedComments'] = response.data['AuditModifiedComments']\r\n                masterData['CurrentResult'] = [];\r\n                masterData['CurrentResult'] = response.data['CurrentResult']\r\n                masterData['viewdetails'] = [];\r\n                masterData['viewdetails'] = response.data['viewdetails'][0]\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_PREVIOUSRESULTVIEW\",\r\n                        operation: \"\",\r\n                        loading: false,\r\n                        openChildModal: true,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function  getTestBasedCompletedBatch (inputData){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/getTestBasedOnCompletedBatch\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                           // defaultTestvalues: inputData.defaultTestvalues //,\r\n                            // defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            // ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            // DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateEnforceStatus(inputParam) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/updateEnforceStatus\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                replaceUpdatedObject(responseData[\"AP_SAMPLE\"], inputParam.masterData.AP_SAMPLE, \"npreregno\");\r\n                replaceUpdatedObject(responseData[\"AP_SUBSAMPLE\"], inputParam.masterData.AP_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(responseData[\"AP_TEST\"], inputParam.masterData.AP_TEST, \"ntransactiontestcode\");\r\n\r\n                delete responseData[\"AP_SAMPLE\"];\r\n                delete responseData[\"AP_SUBSAMPLE\"];\r\n                delete responseData[\"AP_TEST\"];\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                    APSelectedSample: replaceUpdatedObject(responseData.updatedSample, inputParam.masterData.APSelectedSample, \"npreregno\"),\r\n                    APSelectedSubSample: replaceUpdatedObject(responseData.updatedSubSample, inputParam.masterData.APSelectedSubSample, 'ntransactionsamplecode'),\r\n                    APSelectedTest: replaceUpdatedObject(responseData.updatedTest, inputParam.masterData.APSelectedTest, 'ntransactiontestcode')\r\n\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    inputParam,\r\n                    openChildModal: false,\r\n                    operation: \"update\",\r\n                    masterStatus: \"\",\r\n                    errorCode: undefined,\r\n                    loadEsign: false,\r\n                    showEsign: false,\r\n                    selectedRecord: {},\r\n                    loading: false\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function checkReleaseRecord(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approval/checkReleaseRecord\", inputParam.inputData)\r\n            .then(response => {\r\n                let availableReleaseRecord;\r\n                if(response.data.rtn==\"Success\"){\r\n                    availableReleaseRecord = true\r\n                }else{\r\n                    availableReleaseRecord = false\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        availableReleaseRecord,\r\n                        loading: false,\r\n                        action:inputParam.action,\r\n                        ncontrolCode:inputParam.inputData.performaction.ncontrolCode\r\n                    }\r\n                });\r\n                // else{\r\n                //     dispatch(performAction(inputParam))\r\n                // } \r\n\r\n               // dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n              \r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //toast.error(intl.formatMessage({ id: \"IDS_SERVICEERROR\" }));\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}