{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { crudMaster } from \"./ServiceAction\"; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n//     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\n            realReportTypeList: inputParam.inputData.realReportTypeList || [],\n            realRegTypeList: inputParam.inputData.realRegTypeList || [],\n            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || [] // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {};\n      let nsectioncode = {}; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (nsectioncode !== undefined) {\n        nsectioncode = inputParam.inputData.nsectioncode;\n      } // }\n      //     else {\n      //         responseData.ReleaseHistory = []\n      //         responseData.selectedReleaseHistory= []\n      //         masterData = {\n      //             ...inputParam.masterData,\n      //             ...responseData,\n      //         }\n      //     }\n\n\n      sortData(masterData, \"\", \"ncoaparentcode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          nsectioncode: nsectioncode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isAddPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n    const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n    const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n\n    if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      urlArray = [projectType];\n    } else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n      urlArray = [sectionType];\n    } else {\n      urlArray = [releaseSample //,reportType\n      ];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      let ProjectTypeList = [];\n      let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n      //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n      //      \"label\": response[1].data.ReportType[0].scoareporttypename\n      // }\n      // };\n\n      let masterData = {};\n      let openModal = true;\n      let selectedRecord = inputParam.inputData.selectedRecord;\n\n      if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n        ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        masterData = { ...inputParam.masterData,\n          ReleaseSubSample: [],\n          ReleaseTest: [],\n          ReleaseSample: []\n        };\n\n        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n          delete inputParam.inputData.selectedRecord.nprojecttypecode;\n        }\n\n        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n          delete inputParam.inputData.selectedRecord.nprojectmastercode;\n        }\n      } else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n        sectionList = sectionTypeMap.get(\"OptionList\");\n        masterData = { ...inputParam.masterData,\n          ReleaseSubSample: [],\n          ReleaseTest: [],\n          ReleaseSample: []\n        };\n\n        if (inputParam.inputData.selectedRecord.nsectioncode) {\n          delete inputParam.inputData.selectedRecord.nsectioncode;\n        }\n      } else {\n        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          openModal = false;\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NOSAMPLESAREAVAILABLE\"\n          }));\n        }\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          expandCheck: false,\n          ProjectTypeList,\n          ncontrolCode,\n          isDeletePopup: false,\n          isComboCheck: false,\n          isEditPopup: false,\n          screenName: inputParam.inputData.screenName,\n          sectionList,\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: true,\n          operation: \"save\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateReleasedReport(inputData, Data, preventtb) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = []; //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\n    //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\n\n    inputData['preventTbFlow'] = preventtb === true ? preventtb : false;\n\n    if (inputData.listStatus === transactionStatus.CORRECTION) {\n      const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\n      urlArray = [afterCorrection];\n    } else {\n      const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\n      urlArray = [releaseSample];\n    }\n\n    Axios.all(urlArray).then(response => {\n      if (response[0].data.rtn === \"MappingNeeded\") {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            modalShow: false,\n            // selectedRecord: {}, \n            loadEsign: false //openModal: false,\n            // preventTbCheck:true\n\n          }\n        });\n        inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({\n          id: \"IDS_SUBSAMPLEWASNOTMAPPED\"\n        }), intl.formatMessage({\n          id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\"\n        }), intl.formatMessage({\n          id: \"IDS_OK\"\n        }), intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => dispatch(generateReleasedReport(inputData, Data, true)), false, () => dispatch(cancelPopUp(inputData, Data)));\n      } else {\n        if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\n          dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\n        }\n\n        if (response[0].data[\"PreventTb\"]) {\n          toast.warn(response[0].data[\"PreventTb\"]);\n        }\n\n        let masterData = { ...Data,\n          ...response[0].data\n        };\n\n        if (response[0].data.rtn === \"Success\") {\n          document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\n          document.getElementById(\"download_data\").click();\n        } else {\n          toast.warn(response[0].data.rtn);\n        }\n\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            change: inputData.change,\n            masterData,\n            modalShow: false,\n            selectedRecord: {},\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data['rtn']);\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function cancelPopUp(inputData, Data) {\n  return function (dispatch) {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        loading: false,\n        modalShow: false,\n        selectedRecord: {},\n        loadEsign: false,\n        openModal: false\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, coahistory) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionForSectionWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getSection\", inputData.inputData).then(response => {\n      const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const sectionList = sectionMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response !== undefined && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function getApprovedRecordsAsDraft(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data,\n            searchedData: undefined\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function previewAndFinalReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n\n    rsapi.post(\"release/generateReleasedReport\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n    urlArray = [releaseSample, statusService //,reportType\n    ];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[1].data.Status === \"Success\") {\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        }; // responseData = sortData(responseData)\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            isDeletePopup: true,\n            isComboCheck: true,\n            isEditPopup: false,\n            ncontrolCode,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isAddPopup: false,\n            operation: \"delete\",\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            expandCheck: false,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDeleteApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //    masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData); // const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n    // if (inputParam.inputData.ncoareporttypecode === 7) {\n    //     urlArray = [ projectType,statusService];\n    // }\n    // else if (inputParam.inputData.ncoareporttypecode === 8) {\n    //     urlArray = [ releaseSample,statusService];\n    // }\n    // else {\n\n    urlArray = [releaseSample, statusService //,reportType\n    ]; // }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      if (response[1].data.Status === \"Success\") {\n        let ProjectTypeList = [];\n        let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let openModal = true;\n        let selectedRecord = inputParam.inputData.selectedRecord;\n\n        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          openModal = false;\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NOSAMPLESAREAVAILABLE\"\n          }));\n        } // responseData = sortData(responseData)\n\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            sectionList,\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: true,\n            isEditPopup: true,\n            ProjectTypeList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: false,\n            operation: \"append\",\n            expandCheck: false,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getreportcomments(inputData, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getreportcomments\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          openModal: true,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchReportInfoReleaseById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData).then(response => {\n      // const parameterResults = response.data.ReleaseParameter\n      let selectedId = editParam.editRow.nreportinforeleasecode;\n      const selectedComment = { ...response.data\n      };\n      const masterData = { ...editParam.masterData,\n        selectedComment\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"IDS_REPORTINFOCOMMENTS\",\n          selectedId,\n          masterData,\n          //isParameterInitialRender: true,\n          loading: false,\n          openModal: true,\n          // modalShow: true,\n          ReportmodalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_COMMENTS\"\n          })\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function UpdateReportComments(userInfo, Data1, inputData) {\n  let inputParamData = {\n    selectedComment: Data1.selectedComment,\n    userinfo: userInfo\n  };\n  return function (dispatch) {\n    //if (inputData !== undefined &&inputData.npreregno!==\"\") {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateReportComment\", inputParamData).then(response => {\n      let masterData = { ...Data1,\n        ...response.data,\n        selectedComment: {}\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          loading: false,\n          openModal: true,\n          expandCheck: false,\n          modalShow: false,\n          ReportmodalShow: false,\n          isComboCheck: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else {\n    //     toast.warn(intl.formatMessage({\n    //         id: \"IDS_SELECTANYONESAMPLE\"\n    //     }));\n    //}\n  };\n}\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n    urlArray = [resultCorrection, statusService //,reportType\n    ];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[1].data.Status === \"Success\") {\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            isDeletePopup: true,\n            isComboCheck: true,\n            isEditPopup: false,\n            loadEsign: false,\n            ncontrolCode,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isCorrectionNeed: true,\n            isAddPopup: false,\n            operation: \"delete\",\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            expandCheck: false,\n            hideSave: true,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            expandCheck: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchParameterById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      ntransactionresultcode: editParam.primaryKeyValue,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseResults\", inputParamData).then(response => {\n      let selectedResultGrade = [];\n      let paremterResultcode = [];\n      const parameterResults = response.data.ReleaseParameter;\n      let predefDefaultFlag = false;\n      parameterResults.map((param, index) => {\n        selectedResultGrade[index] = {\n          ngradecode: param.ngradecode\n        };\n        paremterResultcode[index] = param.ntransactionresultcode;\n        let jsondata = JSON.parse(param.jsondata['value']);\n\n        if (jsondata.hasOwnProperty('additionalInfo')) {\n          additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo'];\n        }\n\n        predefDefaultFlag = false;\n        response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n          // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n          //     if (!predefDefaultFlag) {\n          //         predefDefaultFlag = true;\n          //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n          //             undefined, undefined).get(\"OptionList\");\n          //     }\n          // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n          //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n          //         undefined, undefined).get(\"OptionList\");\n          //     if (response.data.ResultParameter[index].sresult === null) {\n          //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n          //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n          //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\n          //         response.data.ResultParameter[index].editable = true;\n          //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n          //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\n          //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\n          //             &&predefinedvalue.spredefinedcomments;\n          //         }\n          //     }\n          // }\n          //  else {\n          if (!predefDefaultFlag) {\n            predefDefaultFlag = true;\n            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n          } //   }\n          //return null;\n\n        });\n        param['editable'] = false; //return null;\n        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n        // undefined, undefined).get(\"OptionList\");\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...editParam.masterData,\n            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\n            ...response.data,\n            paremterResultcode,\n            //,\n            selectedResultGrade\n          },\n          selectedRecord: {\n            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n            selectedResultGrade: selectedResultGrade,\n            ReleaseParameter: response.data.ReleaseParameter\n          },\n          parameterResults: response.data.ReleaseParameter,\n          isParameterInitialRender: true,\n          loading: false,\n          // screenName: \"IDS_RESULTENTRY\",\n          openModal: true,\n          modalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_CHANGERESULT\"\n          }),\n          selectedId: editParam.primaryKeyValue,\n          //activeTestKey: \"IDS_RESULTS\",\n          ncontrolcode: editParam.editResultId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function updateCorrectionStatus(inputData, Data, screenname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateCorrectionStatus\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        let masterData = { ...Data,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false,\n            screenName: screenname\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            // masterData,\n            //  change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false //  screenName:screenname\n\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: response.data\n        }));\n      } // }\n\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforRelease(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"release\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let doAction = screenData.inputParam.inputData.doAction;\n\n    switch (doAction) {\n      case \"appendsample\":\n        dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"removesample\":\n        dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\n        break;\n\n      case \"generate\":\n        dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"download\":\n        dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"correction\":\n        dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\n        break;\n\n      case \"saveasdraft\":\n        dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"editresult\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function viewReportHistory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/viewReportHistory\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      let PatientReports = response.data.PatientReports;\n      masterData = { ...masterData,\n        PatientReports\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isPatientReports: true,\n          openModal: true,\n          hideSave: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseTestAttachment\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\n      const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\n      const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\n      const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\n      const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\n      const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\n      masterData = { ...masterData,\n        ReleaseTestAttachmentDetails,\n        RegistrationArno,\n        RegistrationSampleArno,\n        RegistrationTest\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isReleaseTestAttachment: true,\n          openModal: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n} // export function writeJSONTemplate(inputParam){ \n//     return function (dispatch) {    \n//         return rsapi.post(\"release/writeJSONTemplate\",\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \n//             \"userinfo\": inputParam.userInfo}\n//     )\n//         .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false,\n//                         openModal: false,\n//                         expandCheck: false,\n//                     }\n//                 });\n//         })\n//         .catch(error => {\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//             if (error.response.status === 500) {\n//                 toast.error(error.message);\n//             }\n//             else {\n//                 toast.warn(error.response.data);\n//             }\n//         })\n// }\n// }\n\nexport function versionHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getVersionHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          openModalTitle: \"IDS_VERSIONHISTORY\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadVersionReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadHistory(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","reportCOAType","REPORTTYPE","SampleType","transactionStatus","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","crudMaster","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","realSampleTypeList","realReportTypeList","realRegTypeList","realRegSubTypeList","realFilterStatusList","realApprovalVersionList","realDesignTemplateMappingList","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","nsectioncode","undefined","showFilter","getApprovedSample","ncontrolCode","urlArray","releaseSample","projectType","sectionType","ncoareporttypecode","PROJECTWISE","nsampletypecode","PROJECTSAMPLETYPE","SECTIONWISEMULTIPLESAMPLE","SECTIONWISE","all","ProjectTypeList","sectionList","openModal","selectedRecord","projectTypeMap","get","ReleaseSubSample","ReleaseTest","ReleaseSample","nprojecttypecode","nprojectmastercode","sectionTypeMap","length","expandCheck","isDeletePopup","isComboCheck","isEditPopup","screenName","isAddPopup","operation","generateReleasedReport","Data","preventtb","listStatus","CORRECTION","afterCorrection","modalShow","loadEsign","confirmMessage","confirm","cancelPopUp","UpdateExternalOrderStatus","document","getElementById","setAttribute","filepath","click","ReleaseHistory","change","getReleasedFilterStatus","getReleasedDataDetails","coahistory","inputParamData","dfrom","dto","nregtypecode","nregsubtypecode","ntransactionstatus","ntestcode","napprovalconfigcode","userinfo","nneedsubsample","ncoaparentcode","npreregno","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","ProjectTypeValue","getSectionForSectionWise","sectionMap","getReportForPortal","portallist","String","JSON","stringify","headers","getApprovedRecordsAsDraft","Data1","searchedData","previewAndFinalReport","getRemoveApprovedSample","statusService","Status","ValidationStatus","getDeleteApprovedSample","getEditApprovedSample","UpdateApprovedSample","getreportcomments","fetchReportInfoReleaseById","editParam","additionalInfo","nreportinforeleasecode","editRow","userInfo","selectedId","selectedComment","ReportmodalShow","modalTitle","UpdateReportComments","getResultCorrectionData","resultCorrection","isCorrectionNeed","hideSave","fetchParameterById","ntransactionresultcode","primaryKeyValue","selectedResultGrade","paremterResultcode","parameterResults","ReleaseParameter","predefDefaultFlag","map","param","index","ngradecode","jsondata","parse","hasOwnProperty","PredefinedValues","predefinedvalue","isParameterInitialRender","ncontrolcode","editResultId","updateCorrectionStatus","screenname","validateEsignforRelease","methodUrl","toLowerCase","dispatchMethods","info","screenData","doAction","viewReportHistory","PatientReports","isPatientReports","viewReleaseTestAttachment","ReleaseTestAttachmentDetails","lstRegistrationArno","RegistrationArno","lstRegistrationSampleArno","RegistrationSampleArno","lstRegistrationTest","RegistrationTest","isReleaseTestAttachment","versionHistory","openModalTitle","downloadVersionReport","FilePath","downloadHistory"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,EAAoDC,QAApD,QAAoE,4BAApE;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,EAAgDC,iBAAhD,QAAyE,2BAAzE;AACA,OAAOC,sBAAP,MAAmC,qEAAnC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,UAAT,QAA2B,iBAA3B,C,CAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,2BAAT,CAAqCC,SAArC,EAAgD;AACnD,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,6BAAX,EAA0CF,SAA1C,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIC,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB;AACAD,MAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAAU,EAAE,EACR,GAAGT,SAAS,CAACS,UADL;AAER,eAAGJ,YAFK;AAGRK,YAAAA,eAAe,EAAEV,SAAS,CAACU,eAHnB;AAIRC,YAAAA,kBAAkB,EAAEX,SAAS,CAACW,kBAAV,IAAgC,EAJ5C;AAKRC,YAAAA,kBAAkB,EAAEZ,SAAS,CAACY,kBAAV,IAAgC,EAL5C;AAMRC,YAAAA,eAAe,EAAEb,SAAS,CAACa,eAAV,IAA6B,EANtC;AAORC,YAAAA,kBAAkB,EAAEd,SAAS,CAACc,kBAAV,IAAgC,EAP5C;AAQRC,YAAAA,oBAAoB,EAAEf,SAAS,CAACe,oBAAV,IAAkC,EARhD;AASRC,YAAAA,uBAAuB,EAAEhB,SAAS,CAACgB,uBAAV,IAAqC,EATtD;AAURC,YAAAA,6BAA6B,EAAEjB,SAAS,CAACiB,6BAAV,IAA2C;AAVlE,WADe;AAa3BC,UAAAA,OAAO,EAAE;AAbkB;AAD1B,OAAD,CAAR;AAiBH,KArBL,EAsBKC,KAtBL,CAsBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA9BL;AA+BH,GAjCD;AAkCH;AACD,OAAO,SAASkB,8BAAT,CAAwCxB,SAAxC,EAAmD;AACtD,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,gCAAX,EAA6CF,SAA7C,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIC,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB;AACAD,MAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAAU,EAAE,EACR,GAAGT,SAAS,CAACS,UADL;AAER,eAAGJ,YAFK;AAGRoB,YAAAA,YAAY,EAAEzB,SAAS,CAACyB,YAHhB;AAIRd,YAAAA,kBAAkB,EAAEX,SAAS,CAACW,kBAAV,IAAgC,EAJ5C;AAKRC,YAAAA,kBAAkB,EAAEZ,SAAS,CAACY,kBAAV,IAAgC,EAL5C;AAMRC,YAAAA,eAAe,EAAEb,SAAS,CAACa,eAAV,IAA6B,EANtC;AAORC,YAAAA,kBAAkB,EAAEd,SAAS,CAACc,kBAAV,IAAgC,EAP5C;AAQRC,YAAAA,oBAAoB,EAAEf,SAAS,CAACe,oBAAV,IAAkC,EARhD;AASRC,YAAAA,uBAAuB,EAAEhB,SAAS,CAACgB,uBAAV,IAAqC,EATtD;AAURC,YAAAA,6BAA6B,EAAEjB,SAAS,CAACiB,6BAAV,IAA2C;AAVlE,WADe;AAa3BC,UAAAA,OAAO,EAAE;AAbkB;AAD1B,OAAD,CAAR;AAiBH,KArBL,EAsBKC,KAtBL,CAsBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA9BL;AA+BH,GAjCD;AAkCH;AAED,OAAO,SAASoB,0BAAT,CAAoC1B,SAApC,EAA+C;AAClD,SAAO,UAAUC,QAAV,EAAoB;AACvB,QAAID,SAAS,CAAC2B,oBAAd,EAAoC;AAChC1B,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,MAAAA,KAAK,CAACO,IAAN,CAAW,4BAAX,EAAyCF,SAAzC,EACKG,IADL,CACUC,QAAQ,IAAI;AAGd,YAAIC,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,SAAnB;AACAD,QAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3BC,YAAAA,UAAU,EAAE,EACR,GAAGT,SAAS,CAACS,UADL;AAER,iBAAGJ,YAFK;AAGRuB,cAAAA,eAAe,EAAE5B,SAAS,CAAC4B,eAHnB;AAIRC,cAAAA,0BAA0B,EAAE7B,SAAS,CAAC6B,0BAJ9B;AAKRC,cAAAA,0BAA0B,EAAE9B,SAAS,CAAC8B;AAL9B,aADe;AAQ3BZ,YAAAA,OAAO,EAAE;AARkB;AAD1B,SAAD,CAAR;;AAYA,YAAId,QAAQ,CAACE,IAAT,CAAcyB,GAAlB,EAAuB;AACnB9C,UAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AACH;AAEJ,OAtBL,EAuBKZ,KAvBL,CAuBWC,KAAK,IAAI;AACZnB,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAEV,cAAR;AAAwBW,UAAAA,OAAO,EAAE;AAAEU,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,UAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDrC,UAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,OA/BL;AAgCH,KAlCD,MAmCK;AACDrB,MAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GAzCD;AA2CH;AAED,OAAO,SAASC,0BAAT,CAAoCC,UAApC,EAAgD;AACnD,SAAO,UAAUlC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,4BAAX,EAAyCiC,UAAU,CAACnC,SAApD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIC,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB;AACAD,MAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAAU,EAAE,EACR,GAAG0B,UAAU,CAAC1B,UADN;AAER,eAAGJ,YAFK;AAGRM,YAAAA,kBAAkB,EAAEwB,UAAU,CAACnC,SAAX,CAAqBW,kBAArB,IAA2C,EAHvD;AAIRC,YAAAA,kBAAkB,EAAEuB,UAAU,CAACnC,SAAX,CAAqBY,kBAArB,IAA2C,EAJvD;AAKRC,YAAAA,eAAe,EAAEsB,UAAU,CAACnC,SAAX,CAAqBa,eAArB,IAAwC,EALjD;AAMRC,YAAAA,kBAAkB,EAAEqB,UAAU,CAACnC,SAAX,CAAqBc,kBAArB,IAA2C,EANvD;AAORC,YAAAA,oBAAoB,EAAEoB,UAAU,CAACnC,SAAX,CAAqBe,oBAArB,IAA6C,EAP3D;AAQRC,YAAAA,uBAAuB,EAAEmB,UAAU,CAACnC,SAAX,CAAqBgB,uBAArB,IAAgD,EARjE;AASRC,YAAAA,6BAA6B,EAAEkB,UAAU,CAACnC,SAAX,CAAqBiB,6BAArB,IAAsD,EAT7E,CAUR;AACA;;AAXQ,WADe;AAc3BC,UAAAA,OAAO,EAAE;AAdkB;AAD1B,OAAD,CAAR;AAkBH,KAtBL,EAuBKC,KAvBL,CAuBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA/BL;AAgCH,GAlCD;AAmCH;AACD,OAAO,SAAS8B,iBAAT,CAA2BD,UAA3B,EAAuC;AAC1C,SAAO,UAAUlC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,0BAAX,EAAuCiC,UAAU,CAACnC,SAAlD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIC,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB,CADc,CAEd;;AACA,UAAIG,UAAU,GAAG,EAAjB;AACA,UAAI4B,YAAY,GAAG,EAAnB,CAJc,CAMd;AACA;;AACA5B,MAAAA,UAAU,GAAG,EACT,GAAG0B,UAAU,CAAC1B,UADL;AAET,WAAGJ;AAFM,OAAb;;AAIA,UAAIgC,YAAY,KAAKC,SAArB,EAAgC;AAC5BD,QAAAA,YAAY,GAAGF,UAAU,CAACnC,SAAX,CAAqBqC,YAApC;AACH,OAda,CAed;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhD,MAAAA,QAAQ,CAACoB,UAAD,EAAa,EAAb,EAAiB,gBAAjB,CAAR;AACAR,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAD2B;AAE3BS,UAAAA,OAAO,EAAE,KAFkB;AAG3BqB,UAAAA,UAAU,EAAE,KAHe;AAI3BF,UAAAA,YAAY,EAAEA;AAJa;AAD1B,OAAD,CAAR;AASH,KApCL,EAqCKlB,KArCL,CAqCWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA7CL;AA8CH,GAhDD;AAiDH;AACD,OAAO,SAASkC,iBAAT,CAA2BL,UAA3B,EAAuCM,YAAvC,EAAqD;AACxD,SAAO,UAAUxC,QAAV,EAAoB;AACvB,QAAIyC,QAAQ,GAAG,EAAf;AACAP,IAAAA,UAAU,CAACnC,SAAX,CAAqB,YAArB,IAAqC,IAArC;AACA,UAAM2C,aAAa,GAAGhD,KAAK,CAACO,IAAN,CAAW,0BAAX,EAAuCiC,UAAU,CAACnC,SAAlD,CAAtB,CAHuB,CAIvB;;AACA,UAAM4C,WAAW,GAAGjD,KAAK,CAACO,IAAN,CAAW,gCAAX,EAA6CiC,UAAU,CAACnC,SAAxD,CAApB;AACA,UAAM6C,WAAW,GAAGlD,KAAK,CAACO,IAAN,CAAW,oBAAX,EAAiCiC,UAAU,CAACnC,SAA5C,CAApB;;AAEA,QAAImC,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAACyD,WAA1D,IACAZ,UAAU,CAACnC,SAAX,CAAqBgD,eAArB,KAAyCxD,UAAU,CAACyD,iBAApD,IAAyEd,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAAC4D,yBADvI,EACkK;AAE9JR,MAAAA,QAAQ,GAAG,CAACE,WAAD,CAAX;AACH,KAJD,MAKK,IAAIT,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAAC6D,WAA1D,IAAyEhB,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAAC4D,yBAAvI,EAAkK;AACnKR,MAAAA,QAAQ,GAAG,CAACG,WAAD,CAAX;AACH,KAFI,MAGA;AACDH,MAAAA,QAAQ,GAAG,CAACC,aAAD,CACP;AADO,OAAX;AAGH;;AACD1C,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAZ,IAAAA,KAAK,CAACoE,GAAN,CAAUV,QAAV,EAEKvC,IAFL,CAEUC,QAAQ,IAAI;AACd;AACA;AAEA;AACA,UAAIiD,eAAe,GAAG,EAAtB;AACA,UAAIC,WAAW,GAAG,EAAlB,CANc,CAQd;AACA;AACA;AACA;AACA;;AACA,UAAI7C,UAAU,GAAG,EAAjB;AACA,UAAI8C,SAAS,GAAG,IAAhB;AACA,UAAIC,cAAc,GAAGrB,UAAU,CAACnC,SAAX,CAAqBwD,cAA1C;;AACA,UAAIrB,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAACyD,WAA1D,IACAZ,UAAU,CAACnC,SAAX,CAAqBgD,eAArB,KAAyCxD,UAAU,CAACyD,iBAApD,IAAyEd,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAAC4D,yBADvI,EACkK;AAC9J,cAAMO,cAAc,GAAGtE,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoB,EAArB,EAAyB,kBAAzB,EACtC,kBADsC,EAClBgC,SADkB,EACPA,SADO,EACI,KADJ,CAA1C;AAGAe,QAAAA,eAAe,GAAGI,cAAc,CAACC,GAAf,CAAmB,YAAnB,CAAlB;AACAjD,QAAAA,UAAU,GAAG,EAAE,GAAG0B,UAAU,CAAC1B,UAAhB;AAA4BkD,UAAAA,gBAAgB,EAAE,EAA9C;AAAkDC,UAAAA,WAAW,EAAE,EAA/D;AAAmEC,UAAAA,aAAa,EAAE;AAAlF,SAAb;;AACA,YAAI1B,UAAU,CAACnC,SAAX,CAAqBwD,cAArB,CAAoCM,gBAAxC,EAA0D;AACtD,iBAAO3B,UAAU,CAACnC,SAAX,CAAqBwD,cAArB,CAAoCM,gBAA3C;AACH;;AACD,YAAI3B,UAAU,CAACnC,SAAX,CAAqBwD,cAArB,CAAoCO,kBAAxC,EAA4D;AACxD,iBAAO5B,UAAU,CAACnC,SAAX,CAAqBwD,cAArB,CAAoCO,kBAA3C;AACH;AACJ,OAbD,MAcK,IAAI5B,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAAC6D,WAA1D,IAAyEhB,UAAU,CAACnC,SAAX,CAAqB8C,kBAArB,KAA4CxD,aAAa,CAAC4D,yBAAvI,EAAkK;AACnK,cAAMc,cAAc,GAAG7E,mBAAmB,CAACiB,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBgD,WAAjB,IAAgC,EAAjC,EAAqC,cAArC,EACtC,cADsC,EACtBhB,SADsB,EACXA,SADW,EACA,KADA,CAA1C;AAGAgB,QAAAA,WAAW,GAAGU,cAAc,CAACN,GAAf,CAAmB,YAAnB,CAAd;AACAjD,QAAAA,UAAU,GAAG,EAAE,GAAG0B,UAAU,CAAC1B,UAAhB;AAA4BkD,UAAAA,gBAAgB,EAAE,EAA9C;AAAkDC,UAAAA,WAAW,EAAE,EAA/D;AAAmEC,UAAAA,aAAa,EAAE;AAAlF,SAAb;;AACA,YAAI1B,UAAU,CAACnC,SAAX,CAAqBwD,cAArB,CAAoCnB,YAAxC,EAAsD;AAClD,iBAAOF,UAAU,CAACnC,SAAX,CAAqBwD,cAArB,CAAoCnB,YAA3C;AACH;AAEJ,OAVI,MAWA;AACD,YAAIjC,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoBF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBuD,aAAjB,CAA+BI,MAA/B,KAA0C,CAAlE,EAAqE;AAEjE,cAAI5D,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAAjB,WAAnB;AACAG,UAAAA,UAAU,GAAG,EACT,GAAG0B,UAAU,CAAC1B,UADL;AACiB,eAAGJ;AADpB,WAAb;AAGH,SAND,MAOK;AACD,cAAIA,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAAjB,WAAnB;AACAG,UAAAA,UAAU,GAAG,EACT,GAAG0B,UAAU,CAAC1B,UADL;AACiB,eAAGJ;AADpB,WAAb;AAGAkD,UAAAA,SAAS,GAAG,KAAZ;AACAtE,UAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAAnB,CAAX;AACH;AAEJ;;AAGD5C,MAAAA,QAAQ,CAACoB,UAAD,CAAR;AACAR,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAD2B;AAE3ByD,UAAAA,WAAW,EAAE,KAFc;AAG3Bb,UAAAA,eAH2B;AAI3BZ,UAAAA,YAJ2B;AAK3B0B,UAAAA,aAAa,EAAE,KALY;AAM3BC,UAAAA,YAAY,EAAE,KANa;AAO3BC,UAAAA,WAAW,EAAE,KAPc;AAQ3BC,UAAAA,UAAU,EAAEnC,UAAU,CAACnC,SAAX,CAAqBsE,UARN;AAS3BhB,UAAAA,WAT2B;AAU3BpC,UAAAA,OAAO,EAAE,KAVkB;AAW3BqB,UAAAA,UAAU,EAAE,KAXe;AAY3BgB,UAAAA,SAAS,EAAEA,SAZgB;AAa3BgB,UAAAA,UAAU,EAAE,IAbe;AAc3BC,UAAAA,SAAS,EAAE;AAdgB;AAD1B,OAAD,CAAR;AAkBH,KAlFL,EAmFKrD,KAnFL,CAmFWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA3FL;AA4FH,GAlHD;AAmHH;AACD,OAAO,SAASmE,sBAAT,CAAgCzE,SAAhC,EAA2C0E,IAA3C,EAAgDC,SAAhD,EAA2D;AAC9D,SAAO,UAAU1E,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEA,QAAI8C,QAAQ,GAAG,EAAf,CAHuB,CAIvB;AACA;;AACA1C,IAAAA,SAAS,CAAC,eAAD,CAAT,GAA2B2E,SAAS,KAAG,IAAZ,GAAiBA,SAAjB,GAA2B,KAAtD;;AACA,QAAI3E,SAAS,CAAC4E,UAAV,KAAyBnF,iBAAiB,CAACoF,UAA/C,EAA2D;AAEvD,YAAMC,eAAe,GAAGnF,KAAK,CAACO,IAAN,CAAW,sCAAX,EAAmDF,SAAnD,CAAxB;AACA0C,MAAAA,QAAQ,GAAG,CAACoC,eAAD,CAAX;AACH,KAJD,MAMK;AACD,YAAMnC,aAAa,GAAGhD,KAAK,CAACO,IAAN,CAAW,uBAAX,EAAoCF,SAApC,CAAtB;AAEA0C,MAAAA,QAAQ,GAAG,CAACC,aAAD,CAAX;AACH;;AACD3D,IAAAA,KAAK,CAACoE,GAAN,CAAUV,QAAV,EACKvC,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiByB,GAAjB,KAAyB,eAA7B,EAA8C;AAG1C9B,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3BU,YAAAA,OAAO,EAAE,KADkB;AAE3B6D,YAAAA,SAAS,EAAE,KAFgB;AAG5B;AACCC,YAAAA,SAAS,EAAE,KAJgB,CAK3B;AACD;;AAN4B;AAD1B,SAAD,CAAR;AAWAhF,QAAAA,SAAS,CAACiF,cAAV,CAAyBC,OAAzB,CAAiC,eAAjC,EAAkDhG,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAnB,CAAlD,EAA2G/C,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAnB,CAA3G,EACA/C,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAnB,CADA,EACsC/C,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAAnB,CADtC,EAEC,MAAMhC,QAAQ,CAACwE,sBAAsB,CAACzE,SAAD,EAAY0E,IAAZ,EAAiB,IAAjB,CAAvB,CAFf,EAEgE,KAFhE,EAEsE,MAAIzE,QAAQ,CAACkF,WAAW,CAACnF,SAAD,EAAY0E,IAAZ,CAAZ,CAFlF;AAIH,OAlBD,MAkBO;AACH,YAAItE,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,cAAjB,KAAoCF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,cAAjB,CAApC,IAAwEF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,cAAjB,EAAiC2D,MAAjC,GAA0C,CAAtH,EAAyH;AACrHhE,UAAAA,QAAQ,CAACmF,yBAAyB,CAAChF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,cAAjB,CAAD,EAAmCN,SAAnC,CAA1B,CAAR;AACH;;AAED,YAAII,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,WAAjB,CAAJ,EAAmC;AAC/BrB,UAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,WAAjB,CAAX;AACH;;AAED,YAAIG,UAAU,GAAG,EACb,GAAGiE,IADU;AAEb,aAAGtE,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAFF,SAAjB;;AAKA,YAAIF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiByB,GAAjB,KAAyB,SAA7B,EAAwC;AACpCsD,UAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,YAAzC,CAAsD,MAAtD,EAA8DnF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBkF,QAA/E;AACAH,UAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCG,KAAzC;AACH,SAHD,MAIK;AACDxG,UAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiByB,GAA5B;AACH;;AACD1C,QAAAA,QAAQ,CAACoB,UAAU,CAACiF,cAAZ,EAA4B,EAA5B,EAAgC,gBAAhC,CAAR;AACAzF,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3BU,YAAAA,OAAO,EAAE,KADkB;AACXyE,YAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MADP;AACelF,YAAAA,UADf;AAE3BsE,YAAAA,SAAS,EAAE,KAFgB;AAETvB,YAAAA,cAAc,EAAE,EAFP;AAEWwB,YAAAA,SAAS,EAAE,KAFtB;AAE6BzB,YAAAA,SAAS,EAAE;AAFxC;AAD1B,SAAD,CAAR;AAMH;AAGJ,KAnDL,EAoDKpC,KApDL,CAoDWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD;AACArC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA7DL;AA8DH,GAhFD;AAiFH;AAED,OAAO,SAAS6E,WAAT,CAAqBnF,SAArB,EAA+B0E,IAA/B,EAAqC;AACxC,SAAO,UAAUzE,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEV,cADD;AACiBW,MAAAA,OAAO,EAAE;AAC3BU,QAAAA,OAAO,EAAE,KADkB;AAE3B6D,QAAAA,SAAS,EAAE,KAFgB;AAETvB,QAAAA,cAAc,EAAE,EAFP;AAEWwB,QAAAA,SAAS,EAAE,KAFtB;AAE6BzB,QAAAA,SAAS,EAAE;AAFxC;AAD1B,KAAD,CAAR;AAMH,GAPD;AAQH;AAED,OAAO,SAASqC,uBAAT,CAAiC5F,SAAjC,EAA4C;AAC/C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,kDAAX,EAA+DF,SAA/D,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIC,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB;AACAD,MAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAAU,EAAE,EACR,GAAGT,SAAS,CAACS,UADL;AAER,eAAGJ,YAFK;AAGRuB,YAAAA,eAAe,EAAE5B,SAAS,CAAC4B;AAHnB,WADe;AAM3BV,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAdL,EAeKC,KAfL,CAeWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAvBL;AAwBH,GA1BD;AA2BH;AACD,OAAO,SAASuF,sBAAT,CAAgC1D,UAAhC,EAA4C2D,UAA5C,EAAwD;AAC3D,SAAO,UAAU7F,QAAV,EAAoB;AACvB,QAAI8F,cAAc,GAAG;AACjBC,MAAAA,KAAK,EAAE7D,UAAU,CAACnC,SAAX,CAAqBgG,KADX;AAEjBC,MAAAA,GAAG,EAAE9D,UAAU,CAACnC,SAAX,CAAqBiG,GAFT;AAIjBjD,MAAAA,eAAe,EAAEb,UAAU,CAACnC,SAAX,CAAqBgD,eAJrB;AAKjBkD,MAAAA,YAAY,EAAE/D,UAAU,CAACnC,SAAX,CAAqBkG,YALlB;AAMjBC,MAAAA,eAAe,EAAEhE,UAAU,CAACnC,SAAX,CAAqBmG,eANrB;AAOjBC,MAAAA,kBAAkB,EAAEjE,UAAU,CAACnC,SAAX,CAAqBoG,kBAPxB;AAQjB/D,MAAAA,YAAY,EAAEF,UAAU,CAACnC,SAAX,CAAqBqC,YARlB;AASjBgE,MAAAA,SAAS,EAAElE,UAAU,CAACnC,SAAX,CAAqBqG,SATf;AAUjB1E,MAAAA,oBAAoB,EAAEQ,UAAU,CAACnC,SAAX,CAAqB2B,oBAV1B;AAWjB2E,MAAAA,mBAAmB,EAAEnE,UAAU,CAACnC,SAAX,CAAqBsG,mBAXzB;AAYjBC,MAAAA,QAAQ,EAAEpE,UAAU,CAACnC,SAAX,CAAqBuG,QAZd;AAajBC,MAAAA,cAAc,EAAErE,UAAU,CAACnC,SAAX,CAAqBwG,cAbpB;AAcjBC,MAAAA,cAAc,EAAEtE,UAAU,CAACsE,cAdV;AAejBC,MAAAA,SAAS,EAAEvE,UAAU,CAACuE,SAfL;AAgBjB5D,MAAAA,kBAAkB,EAAEX,UAAU,CAACnC,SAAX,CAAqB8C,kBAhBxB;AAiBjBjB,MAAAA,0BAA0B,EAAEM,UAAU,CAAC1B,UAAX,CAAsBoB,0BAjBjC;AAkBjB0C,MAAAA,UAAU,EAAE;AAlBK,KAArB;AAqBAtE,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,0BAAX,EAAuC6F,cAAvC,EACK5F,IADL,CACUC,QAAQ,IAAI;AACd,UAAIC,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB,CADc,CAEd;;AACA,UAAIG,UAAU,GAAG,EACb,GAAG0B,UAAU,CAAC1B,UADD;AAEb,WAAGJ;AAFU,OAAjB;AAKAhB,MAAAA,QAAQ,CAACoB,UAAD,CAAR;AACAR,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAD2B;AAE3BS,UAAAA,OAAO,EAAE,KAFkB;AAG3BqB,UAAAA,UAAU,EAAE,KAHe;AAI3B2B,UAAAA,WAAW,EAAE;AAJc;AAD1B,OAAD,CAAR;AASH,KAnBL,EAoBK/C,KApBL,CAoBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA5BL;AA6BH,GApDD;AAqDH;AACD,OAAO,SAASqG,+BAAT,CAAyC3G,SAAzC,EAAoD;AACvD,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,yCAAX,EAAsDF,SAAtD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,YAAMwG,gBAAgB,GAAGzH,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,CAAcuG,iBAAd,IAAmC,EAApC,EAAwC,oBAAxC,EACxC,cADwC,EACxBvE,SADwB,EACbA,SADa,EACF,KADE,CAA5C;AAGA,YAAMuE,iBAAiB,GAAGD,gBAAgB,CAAClD,GAAjB,CAAqB,YAArB,CAA1B;AACA,UAAIrD,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB;AACAD,MAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BqG,UAAAA,iBAD2B;AAE3BpG,UAAAA,UAAU,EAAE,EACR,GAAGT,SAAS,CAACS,UADL;AAER,eAAGJ;AAFK,WAFe;AAM3Ba,UAAAA,OAAO,EAAE,KANkB;AAO3BgD,UAAAA,WAAW,EAAE;AAPc;AAD1B,OAAD,CAAR;AAYH,KApBL,EAqBK/C,KArBL,CAqBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAhCD;AAiCH;AACD,OAAO,SAASwG,sBAAT,CAAgC9G,SAAhC,EAA2C;AAC9C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,gCAAX,EAA6CF,SAA7C,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,YAAMqD,cAAc,GAAGtE,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,IAAiB,EAAlB,EAAsB,kBAAtB,EACtC,kBADsC,EAClBgC,SADkB,EACPA,SADO,EACI,KADJ,CAA1C;AAGA,YAAMe,eAAe,GAAGI,cAAc,CAACC,GAAf,CAAmB,YAAnB,CAAxB,CAJc,CAMd;AACA;AAEA;;AACA,UAAIrD,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB;AACAD,MAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3B6C,UAAAA,eAD2B;AAE3B5C,UAAAA,UAAU,EAAE,EACR,GAAGT,SAAS,CAACS,UADL;AAER,eAAGJ,YAFK;AAGR0G,YAAAA,gBAAgB,EAAE/G,SAAS,CAAC+G;AAHpB,WAFe;AAO3B7F,UAAAA,OAAO,EAAE,KAPkB;AAQ3BgD,UAAAA,WAAW,EAAE;AARc;AAD1B,OAAD,CAAR;AAaH,KA1BL,EA2BK/C,KA3BL,CA2BWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAnCL;AAoCH,GAtCD;AAuCH;AACD,OAAO,SAAS0G,wBAAT,CAAkChH,SAAlC,EAA6C;AAChD,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,oBAAX,EAAiCF,SAAS,CAACA,SAA3C,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,YAAM6G,UAAU,GAAG9H,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,CAAcgD,WAAd,IAA6B,EAA9B,EAAkC,cAAlC,EAClC,cADkC,EAClBhB,SADkB,EACPA,SADO,EACI,KADJ,CAAtC;AAGA,YAAMgB,WAAW,GAAG2D,UAAU,CAACvD,GAAX,CAAe,YAAf,CAApB;AACA,UAAIrD,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAACE;AAAd,OAAnB;AACAD,MAAAA,YAAY,GAAGhB,QAAQ,CAACgB,YAAD,CAAvB;AACAJ,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3B8C,UAAAA,WAD2B;AAE3B7C,UAAAA,UAAU,EAAE,EACR,GAAGT,SAAS,CAACS,UADL;AAER,eAAGJ;AAFK,WAFe;AAM3Ba,UAAAA,OAAO,EAAE,KANkB;AAO3BgD,UAAAA,WAAW,EAAE;AAPc;AAD1B,OAAD,CAAR;AAYH,KApBL,EAqBK/C,KArBL,CAqBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAhCD;AAiCH;AACD,OAAO,SAAS4G,kBAAT,CAA4BlH,SAA5B,EAAuC;AAC1C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,4BAAX,EAAyCF,SAAzC,EACKG,IADL,CACUC,QAAQ,IAAI;AAEd,UAAIA,QAAQ,CAACE,IAAT,CAAc,KAAd,CAAJ,EAA0B;AACtBrB,QAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AACH;;AACD9B,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;AACH,KAPL,EAQKC,KARL,CAQWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAhBL;AAiBH,GAnBD;AAoBH;;AACD,SAAS8E,yBAAT,CAAmC+B,UAAnC,EAA+ChF,UAA/C,EAA2D;AACvD,SAAO,UAAUlC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAYkH,MAAD,CAASjF,UAAU,CAAC,KAAD,CAAnB,IAA8B,iCAAzC,EAA4EkF,IAAI,CAACC,SAAL,CAAeH,UAAf,CAA5E,EAAwG;AACpGI,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAD2F,KAAxG,EAKKpH,IALL,CAKUC,QAAQ,IAAI;AAEdH,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BU,UAAAA,OAAO,EAAE;AADkB;AAD1B,OAAD,CAAR;AAKH,KAZL,EAaKC,KAbL,CAaWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,KAAmBkC,SAAnB,IAAgClB,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9D,EAAmE;AAC/DpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK,IAAIF,KAAK,CAAChB,QAAN,KAAmBkC,SAAvB,EAAkC;AACnCrD,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFI,MAGA;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAxBL;AAyBH,GA3BD;AA4BH;;AACD,OAAO,SAASkH,yBAAT,CAAmCxH,SAAnC,EAA8CyH,KAA9C,EAAqD;AAGxD,SAAO,UAAUxH,QAAV,EAAoB;AACvB,QAAID,SAAS,KAAKsC,SAAd,IAA2BtC,SAAS,CAAC0G,SAAV,KAAwB,EAAvD,EAA2D;AAEvDzG,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,aAAOD,KAAK,CAACO,IAAN,CAAW,qBAAX,EAEHF,SAFG,EAIFG,IAJE,CAIGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACE,IAAT,CAAcyB,GAAd,KAAsB,SAA1B,EAAqC;AACjC,cAAItB,UAAU,GAAG,EAEb,GAAGgH,KAFU;AAEH,eAAGrH,QAAQ,CAACE,IAFT;AAEeoH,YAAAA,YAAY,EAAEpF;AAF7B,WAAjB;AAOAjD,UAAAA,QAAQ,CAACoB,UAAU,CAACiF,cAAZ,EAA4B,EAA5B,EAAgC,gBAAhC,CAAR;AAEAzF,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEV,cADD;AACiBW,YAAAA,OAAO,EAAE;AAC3BC,cAAAA,UAD2B;AAE3BkF,cAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MAFS;AAG3BzE,cAAAA,OAAO,EAAE,KAHkB;AAI3B8D,cAAAA,SAAS,EAAE,KAJgB;AAK3BzB,cAAAA,SAAS,EAAE,KALgB;AAM3BW,cAAAA,WAAW,EAAE;AANc;AAD1B,WAAD,CAAR;AAWH,SArBD,MAsBK;AACDjF,UAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AACA9B,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEV,cADD;AACiBW,YAAAA,OAAO,EAAE;AAC3B;AACAmF,cAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MAFS;AAG3BzE,cAAAA,OAAO,EAAE,KAHkB;AAI3B8D,cAAAA,SAAS,EAAE,KAJgB;AAK3BzB,cAAAA,SAAS,EAAE,KALgB;AAM3BW,cAAAA,WAAW,EAAE;AANc;AAD1B,WAAD,CAAR;AAWH;AACJ,OAzCE,EA2CF/C,KA3CE,CA2CIC,KAAK,IAAI;AACZnB,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAEV,cAAR;AAAwBW,UAAAA,OAAO,EAAE;AAAEU,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,UAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB,EAD+B,CAE/B;AAEH,SAJD,MAKK;AACDrC,UAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,OArDE,CAAP;AAwDH,KA3DD,MA4DK;AACDrB,MAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GAlED;AAmEH;AACD,OAAO,SAAS0F,qBAAT,CAA+BxF,UAA/B,EAA2CuC,IAA3C,EAAiDJ,UAAjD,EAA6D;AAChE,SAAO,UAAUrE,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR,CAFuB,CAGvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,gCAAX,EAA6CiC,UAAU,CAACnC,SAAxD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIK,UAAU,GAAG,EACb,GAAGiE,IADU;AAEb,WAAGtE,QAAQ,CAACE;AAFC,OAAjB;;AAIA,UAAIF,QAAQ,CAACE,IAAT,CAAcyB,GAAd,KAAsB,SAA1B,EAAqC;AACjCsD,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,YAAzC,CAAsD,MAAtD,EAA8DnF,QAAQ,CAACE,IAAT,CAAckF,QAA5E;AACAH,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCG,KAAzC;AACH,OAHD,MAGO;AACHxG,QAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AACH;;AAED9B,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAC7B;AACIU,UAAAA,OAAO,EAAE,KADb;AACoByE,UAAAA,MAAM,EAAExD,UAAU,CAACwD,MADvC;AAC+ClF,UAAAA,UAD/C;AAC2D6D,UAAAA,UAAU,EAAEA,UADvE;AAEIS,UAAAA,SAAS,EAAE,KAFf;AAEsBvB,UAAAA,cAAc,EAAE,EAFtC;AAE0CwB,UAAAA,SAAS,EAAE,KAFrD;AAE4DzB,UAAAA,SAAS,EAAEpB,UAAU,CAACnC,SAAX,CAAqBuD;AAF5F;AAFK,OAAD,CAAR;AAOH,KApBL,EAqBKpC,KArBL,CAqBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAAf,CAAoB,KAApB,CAAX;AACH;AACJ,KA7BL;AA8BH,GAhDD;AAiDH;AACD,OAAO,SAASsH,uBAAT,CAAiCzF,UAAjC,EAA6CM,YAA7C,EAA2D;AAC9D,SAAO,UAAUxC,QAAV,EAAoB;AACvB,QAAIyC,QAAQ,GAAG,EAAf;AACAP,IAAAA,UAAU,CAACnC,SAAX,CAAqB,SAArB,IAAkC,IAAlC;AACA,UAAM2C,aAAa,GAAGhD,KAAK,CAACO,IAAN,CAAW,0BAAX,EAAuCiC,UAAU,CAACnC,SAAlD,CAAtB,CAHuB,CAIvB;AACA;;AACA,UAAM6H,aAAa,GAAGlI,KAAK,CAACO,IAAN,CAAW,wBAAX,EAAqCiC,UAAU,CAACnC,SAAhD,CAAtB;AAEA0C,IAAAA,QAAQ,GAAG,CAACC,aAAD,EAAgBkF,aAAhB,CACP;AADO,KAAX;AAIA5H,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAZ,IAAAA,KAAK,CAACoE,GAAN,CAAUV,QAAV,EAEKvC,IAFL,CAEUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBwH,MAAjB,KAA4B,SAAhC,EAA2C;AAEvC,YAAIrH,UAAU,GAAG,EAAjB;AACA,YAAI+C,cAAc,GAAGrB,UAAU,CAACnC,SAAX,CAAqBwD,cAA1C;AAEA,YAAInD,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAAjB,SAAnB;AACAG,QAAAA,UAAU,GAAG,EACT,GAAG0B,UAAU,CAAC1B,UADL;AACiB,aAAGJ;AADpB,SAAb,CANuC,CAWvC;;AAGAhB,QAAAA,QAAQ,CAACoB,UAAD,CAAR;AACAR,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3BC,YAAAA,UAD2B;AAE3B;AACA0D,YAAAA,aAAa,EAAE,IAHY;AAI3BC,YAAAA,YAAY,EAAE,IAJa;AAK3BC,YAAAA,WAAW,EAAE,KALc;AAM3B5B,YAAAA,YAN2B;AAO3BvB,YAAAA,OAAO,EAAE,KAPkB;AAQ3BqB,YAAAA,UAAU,EAAE,KARe;AAS3BgB,YAAAA,SAAS,EAAE,IATgB;AAU3BgB,YAAAA,UAAU,EAAE,KAVe;AAW3BC,YAAAA,SAAS,EAAE,QAXgB;AAY3B/B,YAAAA,YAAY,EAAEN,UAAU,CAACnC,SAAX,CAAqByC,YAZR;AAa3ByB,YAAAA,WAAW,EAAE,KAbc;AAc3BI,YAAAA,UAAU,EAAEnC,UAAU,CAACnC,SAAX,CAAqBsE;AAdN;AAD1B,SAAD,CAAR;AAoBH,OAnCD,MAoCK;AACDrF,QAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAC1BC,UAAAA,EAAE,EAAE7B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiByH;AADK,SAAnB,CAAX;AAGA9H,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AAELW,UAAAA,OAAO,EAAE;AACLiC,YAAAA,YAAY,EAAEA,YADT;AAELvB,YAAAA,OAAO,EAAE;AAFJ;AAFJ,SAAD,CAAR;AAQH;AACJ,KApDL,EAqDKC,KArDL,CAqDWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA7DL;AA8DH,GA3ED;AA4EH;AACD,OAAO,SAAS0H,uBAAT,CAAiChI,SAAjC,EAA4CyH,KAA5C,EAAmD;AAGtD,SAAO,UAAUxH,QAAV,EAAoB;AACvB,QAAID,SAAS,KAAKsC,SAAd,IAA2BtC,SAAS,CAAC0G,SAAV,KAAwB,EAAvD,EAA2D;AAEvDzG,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,aAAOD,KAAK,CAACO,IAAN,CAAW,uBAAX,EAEHF,SAFG,EAIFG,IAJE,CAIGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACE,IAAT,CAAcyB,GAAd,KAAsB,SAA1B,EAAqC;AAEjC,cAAItB,UAAU,GAAG,EACb,GAAGgH,KADU;AACH,eAAGrH,QAAQ,CAACE;AADT,WAAjB;AAGAjB,UAAAA,QAAQ,CAACoB,UAAU,CAACiF,cAAZ,EAA4B,EAA5B,EAAgC,gBAAhC,CAAR;AACAzF,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEV,cADD;AACiBW,YAAAA,OAAO,EAAE;AAC3BC,cAAAA,UAD2B;AAE3BkF,cAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MAFS;AAG3BzE,cAAAA,OAAO,EAAE,KAHkB;AAI3B8D,cAAAA,SAAS,EAAE,KAJgB;AAK3BzB,cAAAA,SAAS,EAAE,KALgB;AAM3BW,cAAAA,WAAW,EAAE;AANc;AAD1B,WAAD,CAAR;AAYH,SAlBD,MAmBK;AACDjF,UAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AAEA9B,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEV,cADD;AACiBW,YAAAA,OAAO,EAAE;AAC3B;AACAmF,cAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MAFS;AAG3BzE,cAAAA,OAAO,EAAE,KAHkB;AAI3B8D,cAAAA,SAAS,EAAE,KAJgB;AAK3BzB,cAAAA,SAAS,EAAE,KALgB;AAM3BW,cAAAA,WAAW,EAAE;AANc;AAD1B,WAAD,CAAR;AAYH;AACJ,OAxCE,EAyCF/C,KAzCE,CAyCIC,KAAK,IAAI;AACZnB,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAEV,cAAR;AAAwBW,UAAAA,OAAO,EAAE;AAAEU,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,UAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB,EAD+B,CAE/B;AAEH,SAJD,MAKK;AACDrC,UAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,OAnDE,CAAP;AAoDH,KAvDD,MAwDK;AACDrB,MAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GA9DD;AA+DH;AACD,OAAO,SAASgG,qBAAT,CAA+B9F,UAA/B,EAA2CM,YAA3C,EAAyD;AAC5D,SAAO,UAAUxC,QAAV,EAAoB;AACvB,QAAIyC,QAAQ,GAAG,EAAf;AACAP,IAAAA,UAAU,CAACnC,SAAX,CAAqB,SAArB,IAAkC,IAAlC;AACA,UAAM2C,aAAa,GAAGhD,KAAK,CAACO,IAAN,CAAW,0BAAX,EAAuCiC,UAAU,CAACnC,SAAlD,CAAtB,CAHuB,CAIvB;AACA;;AACA,UAAM6H,aAAa,GAAGlI,KAAK,CAACO,IAAN,CAAW,wBAAX,EAAqCiC,UAAU,CAACnC,SAAhD,CAAtB,CANuB,CAOvB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA0C,IAAAA,QAAQ,GAAG,CAACC,aAAD,EAAgBkF,aAAhB,CACP;AADO,KAAX,CAjBuB,CAoBvB;;AACA5H,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAZ,IAAAA,KAAK,CAACoE,GAAN,CAAUV,QAAV,EAEKvC,IAFL,CAEUC,QAAQ,IAAI;AACd;AACA;AAEA;AACA,UAAIA,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBwH,MAAjB,KAA4B,SAAhC,EAA2C;AAEvC,YAAIzE,eAAe,GAAG,EAAtB;AACA,YAAIC,WAAW,GAAG,EAAlB,CAHuC,CAKvC;AACA;AACA;AACA;AACA;;AACA,YAAI7C,UAAU,GAAG,EAAjB;AACA,YAAI8C,SAAS,GAAG,IAAhB;AAEA,YAAIC,cAAc,GAAGrB,UAAU,CAACnC,SAAX,CAAqBwD,cAA1C;;AAEA,YAAIpD,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,IAAoBF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBuD,aAAjB,CAA+BI,MAA/B,KAA0C,CAAlE,EAAqE;AAEjE,cAAI5D,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAAjB,WAAnB;AACAG,UAAAA,UAAU,GAAG,EACT,GAAG0B,UAAU,CAAC1B,UADL;AACiB,eAAGJ;AADpB,WAAb;AAGH,SAND,MAOK;AACD,cAAIA,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAAjB,WAAnB;AACAG,UAAAA,UAAU,GAAG,EACT,GAAG0B,UAAU,CAAC1B,UADL;AACiB,eAAGJ;AADpB,WAAb;AAGAkD,UAAAA,SAAS,GAAG,KAAZ;AACAtE,UAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAAnB,CAAX;AACH,SA7BsC,CA8BvC;;;AAGA5C,QAAAA,QAAQ,CAACoB,UAAD,CAAR;AACAR,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3BC,YAAAA,UAD2B;AAE3B;AACA6C,YAAAA,WAH2B;AAI3Bb,YAAAA,YAAY,EAAEN,UAAU,CAACnC,SAAX,CAAqByC,YAJR;AAK3B0B,YAAAA,aAAa,EAAE,KALY;AAM3BC,YAAAA,YAAY,EAAE,IANa;AAO3BC,YAAAA,WAAW,EAAE,IAPc;AAQ3BhB,YAAAA,eAR2B;AAS3BnC,YAAAA,OAAO,EAAE,KATkB;AAU3BqB,YAAAA,UAAU,EAAE,KAVe;AAW3BgB,YAAAA,SAAS,EAAEA,SAXgB;AAY3BgB,YAAAA,UAAU,EAAE,KAZe;AAa3BC,YAAAA,SAAS,EAAE,QAbgB;AAc3BN,YAAAA,WAAW,EAAE,KAdc;AAe3BI,YAAAA,UAAU,EAAEnC,UAAU,CAACnC,SAAX,CAAqBsE;AAfN;AAD1B,SAAD,CAAR;AAqBH,OAvDD,MAwDK;AACDrF,QAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAC1BC,UAAAA,EAAE,EAAE7B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiByH;AADK,SAAnB,CAAX;AAGA9H,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AAELW,UAAAA,OAAO,EAAE;AACLiC,YAAAA,YAAY,EAAEA,YADT;AAELvB,YAAAA,OAAO,EAAE;AAFJ;AAFJ,SAAD,CAAR;AAQH;AACJ,KA5EL,EA6EKC,KA7EL,CA6EWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KArFL;AAsFH,GA5GD;AA6GH;AACD,OAAO,SAAS4H,oBAAT,CAA8BlI,SAA9B,EAAyCyH,KAAzC,EAAgD;AAGnD,SAAO,UAAUxH,QAAV,EAAoB;AACvB,QAAID,SAAS,KAAKsC,SAAd,IAA2BtC,SAAS,CAAC0G,SAAV,KAAwB,EAAvD,EAA2D;AAEvDzG,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,aAAOD,KAAK,CAACO,IAAN,CAAW,uBAAX,EAEHF,SAFG,EAIFG,IAJE,CAIGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACE,IAAT,CAAcyB,GAAd,KAAsB,SAA1B,EAAqC;AAEjC,cAAItB,UAAU,GAAG,EACb,GAAGgH,KADU;AACH,eAAGrH,QAAQ,CAACE;AADT,WAAjB;AAGAjB,UAAAA,QAAQ,CAACoB,UAAU,CAACiF,cAAZ,EAA4B,EAA5B,EAAgC,gBAAhC,CAAR;AACAzF,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEV,cADD;AACiBW,YAAAA,OAAO,EAAE;AAC3BC,cAAAA,UAD2B;AAE3BkF,cAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MAFS;AAG3BzE,cAAAA,OAAO,EAAE,KAHkB;AAI3B8D,cAAAA,SAAS,EAAE,KAJgB;AAK3BzB,cAAAA,SAAS,EAAE,KALgB;AAM3BW,cAAAA,WAAW,EAAE;AANc;AAD1B,WAAD,CAAR;AAWH,SAjBD,MAkBK;AACDjF,UAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AACA9B,UAAAA,QAAQ,CAAC;AACLM,YAAAA,IAAI,EAAEV,cADD;AACiBW,YAAAA,OAAO,EAAE;AAC3B;AACAmF,cAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MAFS;AAG3BzE,cAAAA,OAAO,EAAE,KAHkB;AAI3B8D,cAAAA,SAAS,EAAE,KAJgB;AAK3BzB,cAAAA,SAAS,EAAE,KALgB;AAM3BW,cAAAA,WAAW,EAAE;AANc;AAD1B,WAAD,CAAR;AAWH;AACJ,OArCE,EAsCF/C,KAtCE,CAsCIC,KAAK,IAAI;AACZnB,QAAAA,QAAQ,CAAC;AAAEM,UAAAA,IAAI,EAAEV,cAAR;AAAwBW,UAAAA,OAAO,EAAE;AAAEU,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,UAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB,EAD+B,CAE/B;AAEH,SAJD,MAKK;AACDrC,UAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,OAhDE,CAAP;AAiDH,KApDD,MAqDK;AACDrB,MAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GA3DD;AA4DH;AAID,OAAO,SAASkG,iBAAT,CAA2BnI,SAA3B,EAAsC0E,IAAtC,EAA4C;AAC/C,SAAO,UAAUzE,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AAEAD,IAAAA,KAAK,CAACO,IAAN,CAAW,2BAAX,EAAwCF,SAAxC,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIK,UAAU,GAAG,EACb,GAAGiE,IADU;AAEb,WAAGtE,QAAQ,CAACE;AAFC,OAAjB;AAMAL,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BU,UAAAA,OAAO,EAAE,KADkB;AACXyE,UAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MADP;AACelF,UAAAA,UADf;AAE3B6D,UAAAA,UAAU,EAAE,uBAFe;AAG3Bf,UAAAA,SAAS,EAAE,IAHgB;AAGVC,UAAAA,cAAc,EAAE,EAHN;AAGUwB,UAAAA,SAAS,EAAE;AAHrB;AAD1B,OAAD,CAAR;AAOH,KAfL,EAgBK7D,KAhBL,CAgBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAxBL;AAyBH,GA7BD;AA8BH;AAED,OAAO,SAAS8H,0BAAT,CAAoCC,SAApC,EAA+C;AAClD,SAAO,UAAUpI,QAAV,EAAoB;AACvB,QAAIqI,cAAc,GAAG,EAArB;AAEA,QAAIvC,cAAc,GAAG;AACjBwC,MAAAA,sBAAsB,EAAEF,SAAS,CAACG,OAAV,CAAkBD,sBADzB;AAEjBhC,MAAAA,QAAQ,EAAE8B,SAAS,CAACI;AAFH,KAArB;AAIAxI,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,wCAAX,EAAqD6F,cAArD,EACK5F,IADL,CACUC,QAAQ,IAAI;AAEd;AACA,UAAIsI,UAAU,GAAGL,SAAS,CAACG,OAAV,CAAkBD,sBAAnC;AACA,YAAMI,eAAe,GAAG,EAAE,GAAGvI,QAAQ,CAACE;AAAd,OAAxB;AACA,YAAMG,UAAU,GAAG,EACf,GAAG4H,SAAS,CAAC5H,UADE;AAEfkI,QAAAA;AAFe,OAAnB;AAKA1I,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AAGLW,QAAAA,OAAO,EAAE;AACL8D,UAAAA,UAAU,EAAE,wBADP;AAELoE,UAAAA,UAFK;AAGLjI,UAAAA,UAHK;AAIL;AACAS,UAAAA,OAAO,EAAE,KALJ;AAMLqC,UAAAA,SAAS,EAAE,IANN;AAOL;AACAqF,UAAAA,eAAe,EAAE,IARZ;AASLpE,UAAAA,SAAS,EAAE,QATN;AAULqE,UAAAA,UAAU,EAAE3J,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAAnB;AAVP;AAHJ,OAAD,CAAR;AAiBH,KA5BL,EA6BKd,KA7BL,CA6BWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AAELW,QAAAA,OAAO,EAAE;AACLU,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAzCL,EARuB,CAkDvB;AAGH,GArDD;AAsDH;AAGD,OAAO,SAASwI,oBAAT,CAA8BL,QAA9B,EAAwChB,KAAxC,EAA+CzH,SAA/C,EAA0D;AAC7D,MAAI+F,cAAc,GAAG;AACjB4C,IAAAA,eAAe,EAAElB,KAAK,CAACkB,eADN;AAEjBpC,IAAAA,QAAQ,EAAEkC;AAFO,GAArB;AAKA,SAAO,UAAUxI,QAAV,EAAoB;AACvB;AAEAA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACO,IAAN,CAAW,6BAAX,EAEH6F,cAFG,EAIF5F,IAJE,CAIGC,QAAQ,IAAI;AACd,UAAIK,UAAU,GAAG,EAEb,GAAGgH,KAFU;AAEH,WAAGrH,QAAQ,CAACE,IAFT;AAGbqI,QAAAA,eAAe,EAAE;AAHJ,OAAjB;AAMA1I,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AAELW,QAAAA,OAAO,EAAE;AACLC,UAAAA,UADK;AAEL6D,UAAAA,UAAU,EAAE,uBAFP;AAGLpD,UAAAA,OAAO,EAAE,KAHJ;AAILqC,UAAAA,SAAS,EAAE,IAJN;AAKLW,UAAAA,WAAW,EAAE,KALR;AAMLa,UAAAA,SAAS,EAAE,KANN;AAOL6D,UAAAA,eAAe,EAAE,KAPZ;AAQLxE,UAAAA,YAAY,EAAE;AART;AAFJ,OAAD,CAAR;AAcH,KAzBE,EA0BFjD,KA1BE,CA0BIC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB,EAD+B,CAE/B;AAEH,OAJD,MAKK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KApCE,CAAP,CAJuB,CAyCvB;AACA;AACA;AACA;AACA;AACA;AACH,GA/CD;AAgDH;AACD,OAAO,SAASyI,uBAAT,CAAiC5G,UAAjC,EAA6CM,YAA7C,EAA2D;AAC9D,SAAO,UAAUxC,QAAV,EAAoB;AACvB,QAAIyC,QAAQ,GAAG,EAAf;AACAP,IAAAA,UAAU,CAACnC,SAAX,CAAqB,SAArB,IAAkC,IAAlC;AACA,UAAMgJ,gBAAgB,GAAGrJ,KAAK,CAACO,IAAN,CAAW,6BAAX,EAA0CiC,UAAU,CAACnC,SAArD,CAAzB,CAHuB,CAIvB;AACA;;AACA,UAAM6H,aAAa,GAAGlI,KAAK,CAACO,IAAN,CAAW,wBAAX,EAAqCiC,UAAU,CAACnC,SAAhD,CAAtB;AAEA0C,IAAAA,QAAQ,GAAG,CAACsG,gBAAD,EAAmBnB,aAAnB,CACP;AADO,KAAX;AAIA5H,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAZ,IAAAA,KAAK,CAACoE,GAAN,CAAUV,QAAV,EAEKvC,IAFL,CAEUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBwH,MAAjB,KAA4B,SAAhC,EAA2C;AAEvC,YAAIrH,UAAU,GAAG,EAAjB;AACA,YAAI+C,cAAc,GAAGrB,UAAU,CAACnC,SAAX,CAAqBwD,cAA1C;AAEA,YAAInD,YAAY,GAAG,EAAE,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE;AAAjB,SAAnB;AACAG,QAAAA,UAAU,GAAG,EACT,GAAG0B,UAAU,CAAC1B,UADL;AACiB,aAAGJ;AADpB,SAAb;AAIAhB,QAAAA,QAAQ,CAACoB,UAAD,CAAR;AACAR,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3BC,YAAAA,UAD2B;AAE3B;AACA0D,YAAAA,aAAa,EAAE,IAHY;AAI3BC,YAAAA,YAAY,EAAE,IAJa;AAK3BC,YAAAA,WAAW,EAAE,KALc;AAM3BW,YAAAA,SAAS,EAAE,KANgB;AAO3BvC,YAAAA,YAP2B;AAQ3BvB,YAAAA,OAAO,EAAE,KARkB;AAS3BqB,YAAAA,UAAU,EAAE,KATe;AAU3BgB,YAAAA,SAAS,EAAE,IAVgB;AAW3B0F,YAAAA,gBAAgB,EAAE,IAXS;AAY3B1E,YAAAA,UAAU,EAAE,KAZe;AAa3BC,YAAAA,SAAS,EAAE,QAbgB;AAc3B/B,YAAAA,YAAY,EAAEN,UAAU,CAACnC,SAAX,CAAqByC,YAdR;AAe3ByB,YAAAA,WAAW,EAAE,KAfc;AAgB3BgF,YAAAA,QAAQ,EAAE,IAhBiB;AAiB3B5E,YAAAA,UAAU,EAAEnC,UAAU,CAACnC,SAAX,CAAqBsE;AAjBN;AAD1B,SAAD,CAAR;AAuBH,OAlCD,MAmCK;AACDrF,QAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAC1BC,UAAAA,EAAE,EAAE7B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiByH;AADK,SAAnB,CAAX;AAGA9H,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AAELW,UAAAA,OAAO,EAAE;AACLiC,YAAAA,YAAY,EAAEA,YADT;AAELvB,YAAAA,OAAO,EAAE,KAFJ;AAGLgD,YAAAA,WAAW,EAAE,KAHR;AAILc,YAAAA,SAAS,EAAE,KAJN;AAKLzB,YAAAA,SAAS,EAAE;AALN;AAFJ,SAAD,CAAR;AAWH;AACJ,KAtDL,EAuDKpC,KAvDL,CAuDWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA/DL;AAgEH,GA7ED;AA8EH;AACD,OAAO,SAAS6I,kBAAT,CAA4Bd,SAA5B,EAAuC;AAC1C,SAAO,UAAUpI,QAAV,EAAoB;AACvB,QAAIqI,cAAc,GAAG,EAArB;AAEA,QAAIvC,cAAc,GAAG;AACjBqD,MAAAA,sBAAsB,EAAEf,SAAS,CAACgB,eADjB;AAEjB9C,MAAAA,QAAQ,EAAE8B,SAAS,CAACI;AAFH,KAArB;AAIAxI,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,2BAAX,EAAwC6F,cAAxC,EACK5F,IADL,CACUC,QAAQ,IAAI;AACd,UAAIkJ,mBAAmB,GAAG,EAA1B;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AACA,YAAMC,gBAAgB,GAAGpJ,QAAQ,CAACE,IAAT,CAAcmJ,gBAAvC;AACA,UAAIC,iBAAiB,GAAG,KAAxB;AACAF,MAAAA,gBAAgB,CAACG,GAAjB,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACnCP,QAAAA,mBAAmB,CAACO,KAAD,CAAnB,GAA6B;AAAEC,UAAAA,UAAU,EAAEF,KAAK,CAACE;AAApB,SAA7B;AACAP,QAAAA,kBAAkB,CAACM,KAAD,CAAlB,GAA4BD,KAAK,CAACR,sBAAlC;AACA,YAAIW,QAAQ,GAAG1C,IAAI,CAAC2C,KAAL,CAAWJ,KAAK,CAACG,QAAN,CAAe,OAAf,CAAX,CAAf;;AACA,YAAIA,QAAQ,CAACE,cAAT,CAAwB,gBAAxB,CAAJ,EAA+C;AAC3C3B,UAAAA,cAAc,CAACsB,KAAK,CAACR,sBAAP,CAAd,GAA+CW,QAAQ,CAAC,gBAAD,CAAvD;AACH;;AACDL,QAAAA,iBAAiB,GAAG,KAApB;AACCtJ,QAAAA,QAAQ,CAACE,IAAT,CAAc4J,gBAAd,IAAkC9J,QAAQ,CAACE,IAAT,CAAc4J,gBAAd,CAA+BV,gBAAgB,CAACK,KAAD,CAAhB,CAAwBT,sBAAvD,CAAnC,IACIhJ,QAAQ,CAACE,IAAT,CAAc4J,gBAAd,CAA+BV,gBAAgB,CAACK,KAAD,CAAhB,CAAwBT,sBAAvD,EAA+EO,GAA/E,CAAmFQ,eAAe,IAAI;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAI,CAACT,iBAAL,EAAwB;AACpBA,YAAAA,iBAAiB,GAAG,IAApB;AACAtJ,YAAAA,QAAQ,CAACE,IAAT,CAAc4J,gBAAd,CAA+BV,gBAAgB,CAACK,KAAD,CAAhB,CAAwBT,sBAAvD,IAAiFjK,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,CAAc4J,gBAAd,CAA+BV,gBAAgB,CAACK,KAAD,CAAhB,CAAwBT,sBAAvD,KAAkF,EAAnF,EAAuF,uBAAvF,EAAgH,uBAAhH,EAAyI9G,SAAzI,EAChGA,SADgG,EACrFA,SADqF,CAAnB,CACvDoB,GADuD,CACnD,YADmD,CAAjF;AAEH,WA3BiG,CA6BlG;AACA;;AAEH,SAhCD,CADJ;AAkCAkG,QAAAA,KAAK,CAAC,UAAD,CAAL,GAAoB,KAApB,CA1CmC,CA2CnC;AACA;AACA;AACH,OA9CD;AAiDA3J,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AAELW,QAAAA,OAAO,EAAE;AACLC,UAAAA,UAAU,EAAE,EACR,GAAG4H,SAAS,CAAC5H,UADL;AAER;AACA,eAAGL,QAAQ,CAACE,IAHJ;AAIRiJ,YAAAA,kBAJQ;AAIW;AACnBD,YAAAA;AALQ,WADP;AASL9F,UAAAA,cAAc,EAAE;AACZ8E,YAAAA,cAAc,EAAEA,cAAc,CAACrE,MAAf,GAAwB,CAAxB,GAA4BqE,cAA5B,GAA6C,EADjD;AAEZgB,YAAAA,mBAAmB,EAAEA,mBAFT;AAGZG,YAAAA,gBAAgB,EAAErJ,QAAQ,CAACE,IAAT,CAAcmJ;AAHpB,WATX;AAeLD,UAAAA,gBAAgB,EAAEpJ,QAAQ,CAACE,IAAT,CAAcmJ,gBAf3B;AAgBLW,UAAAA,wBAAwB,EAAE,IAhBrB;AAiBLlJ,UAAAA,OAAO,EAAE,KAjBJ;AAkBL;AACAqC,UAAAA,SAAS,EAAE,IAnBN;AAoBLwB,UAAAA,SAAS,EAAE,IApBN;AAqBLP,UAAAA,SAAS,EAAE,QArBN;AAsBLqE,UAAAA,UAAU,EAAE3J,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAAnB,CAtBP;AAuBLyG,UAAAA,UAAU,EAAEL,SAAS,CAACgB,eAvBjB;AAwBL;AACAgB,UAAAA,YAAY,EAAEhC,SAAS,CAACiC;AAzBnB;AAFJ,OAAD,CAAR;AA8BH,KArFL,EAsFKnJ,KAtFL,CAsFWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AAELW,QAAAA,OAAO,EAAE;AACLU,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACHrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAlGL,EARuB,CA2GvB;AAGH,GA9GD;AAgHH;AACD,OAAO,SAASiK,sBAAT,CAAgCvK,SAAhC,EAA2C0E,IAA3C,EAAiD8F,UAAjD,EAA6D;AAGhE,SAAO,UAAUvK,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACO,IAAN,CAAW,gCAAX,EAEHF,SAFG,EAIFG,IAJE,CAIGC,QAAQ,IAAI;AAEd,UAAIA,QAAQ,CAACE,IAAT,CAAcyB,GAAd,KAAsB,SAA1B,EAAqC;AACjC,YAAItB,UAAU,GAAG,EAEb,GAAGiE,IAFU;AAEJ,aAAGtE,QAAQ,CAACE;AAFR,SAAjB;AAIAjB,QAAAA,QAAQ,CAACoB,UAAU,CAACiF,cAAZ,EAA4B,EAA5B,EAAgC,gBAAhC,CAAR;AACAzF,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3BC,YAAAA,UAD2B;AAE3BkF,YAAAA,MAAM,EAAE3F,SAAS,CAAC2F,MAFS;AAG3BpC,YAAAA,SAAS,EAAE,KAHgB;AAI3BrC,YAAAA,OAAO,EAAE,KAJkB;AAK3B8D,YAAAA,SAAS,EAAE,KALgB;AAM3BV,YAAAA,UAAU,EAAEkG;AANe;AAD1B,SAAD,CAAR;AAWH,OAjBD,MAkBK;AACDvK,QAAAA,QAAQ,CAAC;AACLM,UAAAA,IAAI,EAAEV,cADD;AACiBW,UAAAA,OAAO,EAAE;AAC3B;AACA;AACA+C,YAAAA,SAAS,EAAE,KAHgB;AAI3BrC,YAAAA,OAAO,EAAE,KAJkB;AAK3B8D,YAAAA,SAAS,EAAE,KALgB,CAO3B;;AAP2B;AAD1B,SAAD,CAAR;AAYA/F,QAAAA,KAAK,CAACsC,IAAN,CAAWrC,IAAI,CAAC8C,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAE7B,QAAQ,CAACE;AAAf,SAAnB,CAAX;AAEH,OAnCa,CAqCd;;AACH,KA1CE,EA4CFa,KA5CE,CA4CIC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB,EAD+B,CAE/B;AAEH,OAJD,MAKK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAtDE,CAAP;AA0DH,GA7DD;AA8DH;AACD,OAAO,SAASmK,uBAAT,CAAiCtI,UAAjC,EAA6C;AAChD,SAAQlC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACO,IAAN,CAAW,+BAAX,EAA4CiC,UAAU,CAACnC,SAAvD,EACFG,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACE,IAAT,KAAkB,SAAtB,EAAiC;AAE7B,cAAMoK,SAAS,GAAG,SAAlB;AACAvI,QAAAA,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoD,UAApD,IAAkEA,UAAU,CAACnC,SAAX,CAAqBuG,QAAvF;;AAEA,YAAIpE,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDuI,SAAS,CAACC,WAAV,EAApD,KACAxI,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDuI,SAAS,CAACC,WAAV,EAApD,EAA6E,eAA7E,CADJ,EACmG;AAC/F,iBAAOxI,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDuI,SAAS,CAACC,WAAV,EAApD,EAA6E,eAA7E,CAAP;AACA,iBAAOxI,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDuI,SAAS,CAACC,WAAV,EAApD,EAA6E,eAA7E,CAAP;AACA,iBAAOxI,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDuI,SAAS,CAACC,WAAV,EAApD,EAA6E,aAA7E,CAAP;AACA,iBAAOxI,UAAU,CAAC,YAAD,CAAV,CAAyB,YAAzB,EAAuC,WAAvC,EAAoDuI,SAAS,CAACC,WAAV,EAApD,EAA6E,OAA7E,CAAP;AACH,SAX4B,CAY7B;;;AACA1K,QAAAA,QAAQ,CAAC2K,eAAe,CAACzI,UAAU,CAAC,YAAD,CAAX,CAAhB,CAAR;AACH;AACJ,KAjBE,EAkBFhB,KAlBE,CAkBIC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAAC4L,IAAN,CAAWzJ,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA1BE,CAAP;AA2BH,GA7BD;AA8BH;;AACD,SAASsK,eAAT,CAAyBE,UAAzB,EAAqC;AACjC,SAAQ7K,QAAD,IAAc;AACjB,QAAI8K,QAAQ,GAAGD,UAAU,CAAC3I,UAAX,CAAsBnC,SAAtB,CAAgC+K,QAA/C;;AACA,YAAQA,QAAR;AACI,WAAK,cAAL;AACI9K,QAAAA,QAAQ,CAACiI,oBAAoB,CAAC4C,UAAU,CAAC3I,UAAX,CAAsBnC,SAAvB,EAAkC8K,UAAU,CAACrK,UAA7C,CAArB,CAAR;AACA;;AACJ,WAAK,cAAL;AACIR,QAAAA,QAAQ,CAAC+H,uBAAuB,CAAC8C,UAAU,CAAC3I,UAAX,CAAsBnC,SAAvB,EAAkC8K,UAAU,CAACrK,UAA7C,EAAyD,WAAzD,CAAxB,CAAR;AACA;;AACJ,WAAK,UAAL;AACIR,QAAAA,QAAQ,CAACwE,sBAAsB,CAACqG,UAAU,CAAC3I,UAAX,CAAsBnC,SAAvB,EAAkC8K,UAAU,CAACrK,UAA7C,CAAvB,CAAR;AACA;;AACJ,WAAK,UAAL;AACIR,QAAAA,QAAQ,CAAC0H,qBAAqB,CAACmD,UAAU,CAAC3I,UAAZ,EAAwB2I,UAAU,CAACrK,UAAnC,CAAtB,CAAR;AACA;;AACJ,WAAK,YAAL;AACIR,QAAAA,QAAQ,CAACsK,sBAAsB,CAACO,UAAU,CAAC3I,UAAX,CAAsBnC,SAAvB,EAAkC8K,UAAU,CAACrK,UAA7C,EAAyDqK,UAAU,CAAC3I,UAAX,CAAsBnC,SAAtB,CAAgCsE,UAAzF,CAAvB,CAAR;AACA;;AACJ,WAAK,aAAL;AACIrE,QAAAA,QAAQ,CAACuH,yBAAyB,CAACsD,UAAU,CAAC3I,UAAX,CAAsBnC,SAAvB,EAAkC8K,UAAU,CAACrK,UAA7C,CAA1B,CAAR;AACA;;AACJ,WAAK,YAAL;AACIR,QAAAA,QAAQ,CAACH,UAAU,CAACgL,UAAU,CAAC3I,UAAZ,EAAwB2I,UAAU,CAACrK,UAAnC,EAA+C,WAA/C,CAAX,CAAR;AACA;;AACJ;AACI;AAvBR;AAyBH,GA3BD;AA4BH;;AAED,OAAO,SAASuK,iBAAT,CAA2B7I,UAA3B,EAAuC;AAC1C,SAAO,UAAUlC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,2BAAX,EAAwCiC,UAAU,CAACnC,SAAnD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIK,UAAU,GAAG0B,UAAU,CAAC1B,UAA5B;AACA,UAAIwK,cAAc,GAAG7K,QAAQ,CAACE,IAAT,CAAc2K,cAAnC;AACAxK,MAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiBwK,QAAAA;AAAjB,OAAb;AACAhL,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3B0K,UAAAA,gBAAgB,EAAE,IADS;AAE3B3H,UAAAA,SAAS,EAAE,IAFgB;AAG3B2F,UAAAA,QAAQ,EAAE,IAHiB;AAI3B3E,UAAAA,UAAU,EAAE,KAJe;AAK3BF,UAAAA,WAAW,EAAE,KALc;AAM3BF,UAAAA,aAAa,EAAE,KANY;AAO3B1D,UAAAA,UAP2B;AAQ3BS,UAAAA,OAAO,EAAE;AARkB;AAD1B,OAAD,CAAR;AAYH,KAjBL,EAkBKC,KAlBL,CAkBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAAC4L,IAAN,CAAWzJ,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA1BL;AA2BH,GA7BD;AA8BH;AAED,OAAO,SAAS6K,yBAAT,CAAmChJ,UAAnC,EAA+C;AAClD,SAAO,UAAUlC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,kCAAX,EAA+CiC,UAAU,CAACnC,SAA1D,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIK,UAAU,GAAG0B,UAAU,CAAC1B,UAA5B;AACA,UAAI2K,4BAA4B,GAAGhL,QAAQ,CAACE,IAAT,CAAc8K,4BAAjD;AAEA,YAAMC,mBAAmB,GAAGlM,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,CAAcgL,gBAAd,IAAkC,EAAnC,EAAuC,WAAvC,EAAoD,OAApD,EAA6D,KAA7D,EAAoE,KAApE,EAA2E,IAA3E,CAA/C;AACA,YAAMA,gBAAgB,GAAGD,mBAAmB,CAAC3H,GAApB,CAAwB,YAAxB,CAAzB;AAEA,YAAM6H,yBAAyB,GAAGpM,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,CAAckL,sBAAd,IAAwC,EAAzC,EAA6C,wBAA7C,EAAuE,aAAvE,EAAsF,KAAtF,EAA6F,KAA7F,EAAoG,IAApG,CAArD;AACA,YAAMA,sBAAsB,GAAGD,yBAAyB,CAAC7H,GAA1B,CAA8B,YAA9B,CAA/B;AAEA,YAAM+H,mBAAmB,GAAGtM,mBAAmB,CAACiB,QAAQ,CAACE,IAAT,CAAcoL,gBAAd,IAAkC,EAAnC,EAAuC,sBAAvC,EAA+D,cAA/D,EAA+E,KAA/E,EAAsF,KAAtF,EAA6F,IAA7F,CAA/C;AACA,YAAMA,gBAAgB,GAAGD,mBAAmB,CAAC/H,GAApB,CAAwB,YAAxB,CAAzB;AAEAjD,MAAAA,UAAU,GAAG,EAAE,GAAGA,UAAL;AAAiB2K,QAAAA,4BAAjB;AAA+CE,QAAAA,gBAA/C;AAAiEE,QAAAA,sBAAjE;AAAyFE,QAAAA;AAAzF,OAAb;AACAzL,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BmL,UAAAA,uBAAuB,EAAE,IADE;AAE3BpI,UAAAA,SAAS,EAAE,IAFgB;AAG3BgB,UAAAA,UAAU,EAAE,KAHe;AAI3BF,UAAAA,WAAW,EAAE,KAJc;AAK3BF,UAAAA,aAAa,EAAE,KALY;AAM3B1D,UAAAA,UAN2B;AAO3BS,UAAAA,OAAO,EAAE;AAPkB;AAD1B,OAAD,CAAR;AAWH,KA1BL,EA2BKC,KA3BL,CA2BWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAAC4L,IAAN,CAAWzJ,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAnCL;AAoCH,GAtCD;AAuCH,C,CAED;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAGA,OAAO,SAASsL,cAAT,CAAwBzJ,UAAxB,EAAoC;AACvC,SAAQlC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACO,IAAN,CAAW,2BAAX,EAAwCiC,UAAxC,EACFhC,IADE,CACGC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,UAAU,EAAE,EACR,GAAG0B,UAAU,CAAC1B,UADN;AAER,eAAGL,QAAQ,CAACE;AAFJ,WADe;AAK3B;AACAiD,UAAAA,SAAS,EAAE,IANgB;AAO3BrC,UAAAA,OAAO,EAAE,KAPkB;AAQ3B8D,UAAAA,SAAS,EAAE,KARgB;AAS3B6G,UAAAA,cAAc,EAAE;AATW;AAD1B,OAAD,CAAR;AAaH,KAfE,EAiBF1K,KAjBE,CAiBIC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KAzBE,CAAP;AA0BH,GA5BD;AA6BH;AAGD,OAAO,SAASwL,qBAAT,CAA+B3J,UAA/B,EAA2CuC,IAA3C,EAAiDJ,UAAjD,EAA6D;AAChE,SAAO,UAAUrE,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,gCAAX,EAA6CiC,UAAU,CAACnC,SAAxD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIK,UAAU,GAAG,EACb,GAAGiE,IADU;AAEb,WAAGtE,QAAQ,CAACE;AAFC,OAAjB;;AAIA,UAAIF,QAAQ,CAACE,IAAT,CAAcyB,GAAd,KAAsB,SAA1B,EAAqC;AACjCsD,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,YAAzC,CAAsD,MAAtD,EAA8DnF,QAAQ,CAACE,IAAT,CAAcyL,QAA5E;AACA1G,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCG,KAAzC;AACH,OAHD,MAGO;AACHxG,QAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AACH;;AAED9B,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAC7B;AACIU,UAAAA,OAAO,EAAE,KADb;AACoByE,UAAAA,MAAM,EAAExD,UAAU,CAACwD,MADvC;AAC+ClF,UAAAA,UAD/C;AAC2D6D,UAAAA,UAAU,EAAEA,UADvE;AAEIS,UAAAA,SAAS,EAAE,KAFf;AAEsBvB,UAAAA,cAAc,EAAE,EAFtC;AAE0CwB,UAAAA,SAAS,EAAE,KAFrD;AAE4DzB,UAAAA,SAAS,EAAEpB,UAAU,CAACnC,SAAX,CAAqBuD;AAF5F;AAFK,OAAD,CAAR;AAOH,KApBL,EAqBKpC,KArBL,CAqBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAjCD;AAkCH;AAED,OAAO,SAAS0L,eAAT,CAAyB7J,UAAzB,EAAqCuC,IAArC,EAA2CJ,UAA3C,EAAuD;AAC1D,SAAO,UAAUrE,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACO,IAAN,CAAW,yBAAX,EAAsCiC,UAAU,CAACnC,SAAjD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,UAAIK,UAAU,GAAG,EACb,GAAGiE,IADU;AAEb,WAAGtE,QAAQ,CAACE;AAFC,OAAjB;;AAIA,UAAIF,QAAQ,CAACE,IAAT,CAAcyB,GAAd,KAAsB,SAA1B,EAAqC;AACjCsD,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,YAAzC,CAAsD,MAAtD,EAA8DnF,QAAQ,CAACE,IAAT,CAAcyL,QAA5E;AACA1G,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCG,KAAzC;AACH,OAHD,MAGO;AACHxG,QAAAA,KAAK,CAACsC,IAAN,CAAWnB,QAAQ,CAACE,IAAT,CAAcyB,GAAzB;AACH;;AAED9B,MAAAA,QAAQ,CAAC;AACLM,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAC7B;AACIU,UAAAA,OAAO,EAAE,KADb;AACoByE,UAAAA,MAAM,EAAExD,UAAU,CAACwD,MADvC;AAC+ClF,UAAAA,UAD/C;AAC2D6D,UAAAA,UAAU,EAAEA,UADvE;AAEIS,UAAAA,SAAS,EAAE,KAFf;AAEsBvB,UAAAA,cAAc,EAAE,EAFtC;AAE0CwB,UAAAA,SAAS,EAAE;AAFrD;AAFK,OAAD,CAAR;AAOH,KApBL,EAqBK7D,KArBL,CAqBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEM,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEU,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAAChB,QAAN,CAAeiB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BpC,QAAAA,KAAK,CAACmC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDrC,QAAAA,KAAK,CAACsC,IAAN,CAAWH,KAAK,CAAChB,QAAN,CAAeE,IAAf,CAAoB,KAApB,CAAX;AACH;AACJ,KA7BL;AA8BH,GAjCD;AAkCH","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { crudMaster } from \"./ServiceAction\";\r\n\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n\r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n\r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputParam.inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputParam.inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || []\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {}\r\n                let nsectioncode = {};\r\n\r\n                // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n                //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (nsectioncode !== undefined) {\r\n                    nsectioncode = inputParam.inputData.nsectioncode;\r\n                }\r\n                // }\r\n                //     else {\r\n                //         responseData.ReleaseHistory = []\r\n                //         responseData.selectedReleaseHistory= []\r\n                //         masterData = {\r\n                //             ...inputParam.masterData,\r\n                //             ...responseData,\r\n                //         }\r\n                //     }\r\n\r\n                sortData(masterData, \"\", \"ncoaparentcode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        nsectioncode: nsectioncode,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isAddPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n        if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n            inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n\r\n            urlArray = [projectType];\r\n        }\r\n        else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n            urlArray = [sectionType];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample\r\n                //,reportType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                let sectionList = [];\r\n\r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let openModal = true;\r\n                let selectedRecord = inputParam.inputData.selectedRecord;\r\n                if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n                    inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                    const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                        \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                    ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                        delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                    }\r\n                    if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                        delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                    }\r\n                }\r\n                else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                    const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, false);\r\n\r\n                    sectionList = sectionTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if (inputParam.inputData.selectedRecord.nsectioncode) {\r\n                        delete inputParam.inputData.selectedRecord.nsectioncode\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        openModal = false;\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        expandCheck: false,\r\n                        ProjectTypeList,\r\n                        ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isComboCheck: false,\r\n                        isEditPopup: false,\r\n                        screenName: inputParam.inputData.screenName,\r\n                        sectionList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: true,\r\n                        operation: \"save\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateReleasedReport(inputData, Data,preventtb) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        let urlArray = [];\r\n        //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\r\n        //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\r\n        inputData['preventTbFlow']=preventtb===true?preventtb:false\r\n        if (inputData.listStatus === transactionStatus.CORRECTION) {\r\n\r\n            const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\r\n            urlArray = [afterCorrection];\r\n        }\r\n\r\n        else {\r\n            const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\r\n\r\n            urlArray = [releaseSample];\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[0].data.rtn === \"MappingNeeded\") {\r\n                    \r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false,\r\n                            modalShow: false, \r\n                           // selectedRecord: {}, \r\n                            loadEsign: false,\r\n                            //openModal: false,\r\n                           // preventTbCheck:true\r\n                        }\r\n                    })\r\n\r\n                    inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({ id: \"IDS_SUBSAMPLEWASNOTMAPPED\" }), intl.formatMessage({ id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\" }),\r\n                    intl.formatMessage({ id: \"IDS_OK\" }), intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                     () => dispatch(generateReleasedReport(inputData, Data,true))  ,false,()=>dispatch(cancelPopUp(inputData, Data)) )\r\n\r\n                } else {\r\n                    if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\r\n                    }\r\n\r\n                    if (response[0].data[\"PreventTb\"]) {\r\n                        toast.warn(response[0].data[\"PreventTb\"])\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...Data,\r\n                        ...response[0].data,\r\n                    }\r\n\r\n                    if (response[0].data.rtn === \"Success\") {\r\n                        document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\r\n                        document.getElementById(\"download_data\").click();\r\n                    }\r\n                    else {\r\n                        toast.warn(response[0].data.rtn);\r\n                    }\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, change: inputData.change, masterData,\r\n                            modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    //toast.warn(error.response.data['rtn']);\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelPopUp(inputData,Data) {\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n                loading: false,\r\n                modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam, coahistory) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            ncoaparentcode: inputParam.ncoaparentcode,\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\r\n            ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup: false\r\n\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\",\r\n                    \"sprojectcode\", undefined, undefined, false);\r\n\r\n                const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n                //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                //     \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getSectionForSectionWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getSection\", inputData.inputData)\r\n            .then(response => {\r\n                const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const sectionList = sectionMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sectionList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response !== undefined && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/saveRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n                        let masterData = {\r\n\r\n                            ...Data1, ...response.data, searchedData: undefined\r\n\r\n\r\n                        };\r\n\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function previewAndFinalReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n        urlArray = [releaseSample, statusService\r\n            //,reportType\r\n        ];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n\r\n\r\n                    // responseData = sortData(responseData)\r\n\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isComboCheck: true,\r\n                            isEditPopup: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            expandCheck: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/deleteRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //    masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n        // const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n        // if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n        //     urlArray = [ projectType,statusService];\r\n        // }\r\n        // else if (inputParam.inputData.ncoareporttypecode === 8) {\r\n        //     urlArray = [ releaseSample,statusService];\r\n        // }\r\n        // else {\r\n        urlArray = [releaseSample, statusService\r\n            //,reportType\r\n        ];\r\n        // }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let ProjectTypeList = [];\r\n                    let sectionList = [];\r\n\r\n                    // let selectedRecord = {\"ncoareporttypecode\": {\r\n                    //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                    //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                    // }\r\n                    // };\r\n                    let masterData = {};\r\n                    let openModal = true;\r\n\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        openModal = false;\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                    }\r\n                    // responseData = sortData(responseData)\r\n\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            sectionList,\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            isDeletePopup: false,\r\n                            isComboCheck: true,\r\n                            isEditPopup: true,\r\n                            ProjectTypeList,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: openModal,\r\n                            isAddPopup: false,\r\n                            operation: \"append\",\r\n                            expandCheck: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/appendRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        // console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getreportcomments(inputData, Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/getreportcomments\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, change: inputData.change, masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        openModal: true, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchReportInfoReleaseById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData)\r\n            .then(response => {\r\n\r\n                // const parameterResults = response.data.ReleaseParameter\r\n                let selectedId = editParam.editRow.nreportinforeleasecode;\r\n                const selectedComment = { ...response.data };\r\n                const masterData = {\r\n                    ...editParam.masterData,\r\n                    selectedComment\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: {\r\n                        screenName: \"IDS_REPORTINFOCOMMENTS\",\r\n                        selectedId,\r\n                        masterData,\r\n                        //isParameterInitialRender: true,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        // modalShow: true,\r\n                        ReportmodalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_COMMENTS\" }),\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function UpdateReportComments(userInfo, Data1, inputData) {\r\n    let inputParamData = {\r\n        selectedComment: Data1.selectedComment,\r\n        userinfo: userInfo\r\n    }\r\n\r\n    return function (dispatch) {\r\n        //if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateReportComment\",\r\n\r\n            inputParamData\r\n        )\r\n            .then(response => {\r\n                let masterData = {\r\n\r\n                    ...Data1, ...response.data,\r\n                    selectedComment: {},\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        loading: false,\r\n                        openModal: true,\r\n                        expandCheck: false,\r\n                        modalShow: false,\r\n                        ReportmodalShow: false,\r\n                        isComboCheck: true,\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({\r\n        //         id: \"IDS_SELECTANYONESAMPLE\"\r\n        //     }));\r\n        //}\r\n    }\r\n}\r\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n        urlArray = [resultCorrection, statusService\r\n            //,reportType\r\n        ];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isComboCheck: true,\r\n                            isEditPopup: false,\r\n                            loadEsign: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isCorrectionNeed: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            expandCheck: false,\r\n                            hideSave: true,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            expandCheck: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function fetchParameterById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            ntransactionresultcode: editParam.primaryKeyValue,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseResults\", inputParamData)\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.ReleaseParameter\r\n                let predefDefaultFlag = false;\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                    paremterResultcode[index] = param.ntransactionresultcode;\r\n                    let jsondata = JSON.parse(param.jsondata['value'])\r\n                    if (jsondata.hasOwnProperty('additionalInfo')) {\r\n                        additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo']\r\n                    }\r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                            //     if (!predefDefaultFlag) {\r\n                            //         predefDefaultFlag = true;\r\n                            //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                            //             undefined, undefined).get(\"OptionList\");\r\n                            //     }\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                            //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            //         undefined, undefined).get(\"OptionList\");\r\n                            //     if (response.data.ResultParameter[index].sresult === null) {\r\n                            //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                            //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                            //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                            //         response.data.ResultParameter[index].editable = true;\r\n                            //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                            //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\r\n                            //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                            //             &&predefinedvalue.spredefinedcomments;\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            //  else {\r\n                            if (!predefDefaultFlag) {\r\n                                predefDefaultFlag = true;\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                    undefined, undefined).get(\"OptionList\");\r\n                            }\r\n\r\n                            //   }\r\n                            //return null;\r\n\r\n                        });\r\n                    param['editable'] = false;\r\n                    //return null;\r\n                    // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                    // undefined, undefined).get(\"OptionList\");\r\n                });\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...editParam.masterData,\r\n                            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                            ...response.data,\r\n                            paremterResultcode,//,\r\n                            selectedResultGrade,\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ReleaseParameter: response.data.ReleaseParameter\r\n\r\n                        },\r\n                        parameterResults: response.data.ReleaseParameter,\r\n                        isParameterInitialRender: true,\r\n                        loading: false,\r\n                        // screenName: \"IDS_RESULTENTRY\",\r\n                        openModal: true,\r\n                        modalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_CHANGERESULT\" }),\r\n                        selectedId: editParam.primaryKeyValue,\r\n                        //activeTestKey: \"IDS_RESULTS\",\r\n                        ncontrolcode: editParam.editResultId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n\r\n}\r\nexport function updateCorrectionStatus(inputData, Data, screenname) {\r\n\r\n\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateCorrectionStatus\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    let masterData = {\r\n\r\n                        ...Data, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            screenName: screenname\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            // masterData,\r\n                            //  change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n\r\n                            //  screenName:screenname\r\n\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({ id: response.data }));\r\n\r\n                }\r\n\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n\r\n    }\r\n}\r\nexport function validateEsignforRelease(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"release\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let doAction = screenData.inputParam.inputData.doAction\r\n        switch (doAction) {\r\n            case \"appendsample\":\r\n                dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"removesample\":\r\n                dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"generate\":\r\n                dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"download\":\r\n                dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"correction\":\r\n                dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\r\n                break;\r\n            case \"saveasdraft\":\r\n                dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"editresult\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewReportHistory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/viewReportHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                let PatientReports = response.data.PatientReports;\r\n                masterData = { ...masterData, PatientReports };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isPatientReports: true,\r\n                        openModal: true,\r\n                        hideSave: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseTestAttachment\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n\r\n                const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\r\n                const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\r\n                const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\r\n                const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\r\n\r\n                masterData = { ...masterData, ReleaseTestAttachmentDetails, RegistrationArno, RegistrationSampleArno, RegistrationTest };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isReleaseTestAttachment: true,\r\n                        openModal: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function writeJSONTemplate(inputParam){ \r\n//     return function (dispatch) {    \r\n\r\n//         return rsapi.post(\"release/writeJSONTemplate\",\r\n\r\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \r\n//             \"userinfo\": inputParam.userInfo}\r\n//     )\r\n//         .then(response => {\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false,\r\n//                         openModal: false,\r\n//                         expandCheck: false,\r\n\r\n\r\n//                     }\r\n//                 });\r\n//         })\r\n//         .catch(error => {\r\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//             if (error.response.status === 500) {\r\n//                 toast.error(error.message);\r\n\r\n\r\n//             }\r\n//             else {\r\n//                 toast.warn(error.response.data);\r\n//             }\r\n//         })\r\n\r\n// }\r\n// }\r\n\r\n\r\nexport function versionHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getVersionHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModalTitle: \"IDS_VERSIONHISTORY\"\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n\r\nexport function downloadVersionReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function downloadHistory(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}