{"ast":null,"code":"import React from'react';import{injectIntl}from'react-intl';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import{Col,Row}from'react-bootstrap';import FormInput from'../../components/form-input/form-input.component';import CustomSwitch from'../../components/custom-switch/custom-switch.component';import FormTextarea from'../../components/form-textarea/form-textarea.component';import FormNumericInput from'../../components/form-numeric-input/form-numeric-input.component';import AddTestMethod from'./AddTestMethod';import AddTestInstrumentCategory from'./AddTestInstrumentCategory';import AddTestSection from'./AddTestSection';import AddTestPackageTest from'./AddTestPackageTest';import{transactionStatus,formCode}from'../../components/Enumeration';var AddTest=function AddTest(props){var _props$parameterData=props.parameterData,period=_props$parameterData.period,interfacetype=_props$parameterData.interfacetype;return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_TESTCATEGORY\"}),isSearchable:true,name:\"ntestcategorycode\",placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,showOption:true,options:props.testData.testCategory||[],optionId:\"ntestcategorycode\",optionValue:\"stestcategoryname\",value:props.selectedRecord[\"ntestcategorycode\"],onChange:function onChange(value){return props.onComboChange(value,\"ntestcategorycode\",1);},alphabeticalSort:true}),/*#__PURE__*/React.createElement(FormInput,{name:\"stestname\",label:props.intl.formatMessage({id:\"IDS_TESTNAME\"}),type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,2);},placeholder:props.intl.formatMessage({id:\"IDS_TESTNAME\"}),value:props.selectedRecord?props.selectedRecord[\"stestname\"]:\"\",isMandatory:\"*\",required:true,maxLength:100}),/*#__PURE__*/React.createElement(FormInput,{name:\"stestsynonym\",label:props.intl.formatMessage({id:\"IDS_TESTSYNONYM\"}),type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,1);},placeholder:props.intl.formatMessage({id:\"IDS_TESTSYNONYM\"}),value:props.selectedRecord?props.selectedRecord[\"stestsynonym\"]:\"\",isMandatory:\"*\",required:true,maxLength:100}),/*#__PURE__*/React.createElement(FormInput,{name:\"sshortname\",label:props.intl.formatMessage({id:\"IDS_SHORTNAME\"}),type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,1);},placeholder:props.intl.formatMessage({id:\"IDS_SHORTNAME\"}),value:props.selectedRecord?props.selectedRecord[\"sshortname\"]:\"\"// isMandatory=\"*\"\n,required:false,maxLength:20}),props.needOtherTest&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(AddTestSection,{onComboChange:props.onComboChange,selectedRecord:props.selectedRecord,section:props.otherTestData.section,isMulti:false}),/*#__PURE__*/React.createElement(AddTestMethod,{onComboChange:props.onComboChange,selectedRecord:props.selectedRecord,method:props.otherTestData.method,isMulti:false}),/*#__PURE__*/React.createElement(AddTestInstrumentCategory,{onComboChange:props.onComboChange,selectedRecord:props.selectedRecord,instrumentcategory:props.otherTestData.instrumentcategory,isMulti:false})),/*#__PURE__*/React.createElement(FormNumericInput,{name:\"ncost\",label:props.intl.formatMessage({id:\"IDS_PRICE\"}),type:\"number\",value:props.selectedRecord[\"ncost\"],placeholder:props.intl.formatMessage({id:\"IDS_PRICE\"}),strict:true,min:0//max={9999999.99}\n,maxLength:10,onChange:function onChange(value){return props.onNumericInputChange(value,\"ncost\");},noStyle:true,precision:2,className:\"form-control\",errors:\"Please provide a valid number.\"}),/*#__PURE__*/React.createElement(FormTextarea,{name:\"sdescription\",label:props.intl.formatMessage({id:\"IDS_TESTPROCEDURE\"}),onChange:function onChange(event){return props.onInputOnChange(event,1);},placeholder:props.intl.formatMessage({id:\"IDS_TESTPROCEDURE\"}),value:props.selectedRecord?props.selectedRecord[\"sdescription\"]:\"\",rows:\"2\",required:false,maxLength:1000}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:4},/*#__PURE__*/React.createElement(CustomSwitch,{name:\"naccredited\",label:props.intl.formatMessage({id:\"IDS_ACCREDITED\"}),type:\"switch\",onChange:function onChange(event){return props.onInputOnChange(event,1,[transactionStatus.ACCREDITED,transactionStatus.NOTACCREDITED]);},placeholder:props.intl.formatMessage({id:\"IDS_ACCREDITED\"}),defaultValue:props.selectedRecord[\"naccredited\"]===transactionStatus.ACCREDITED?true:false,checked:props.selectedRecord[\"naccredited\"]===transactionStatus.ACCREDITED?true:false})),/*#__PURE__*/React.createElement(Col,{md:4},/*#__PURE__*/React.createElement(CustomSwitch,{name:\"ntransactionstatus\",label:props.intl.formatMessage({id:\"IDS_ACTIVE\"}),type:\"switch\",onChange:function onChange(event){return props.onInputOnChange(event,1,[1,2]);}//onChange={(event)=>props.onActiveStatusChange(event, [1, 2])}\n,placeholder:props.intl.formatMessage({id:\"IDS_ACTIVE\"}),defaultValue:props.selectedRecord[\"ntransactionstatus\"]===1?true:false,checked:props.selectedRecord[\"ntransactionstatus\"]===1?true:false})),/*#__PURE__*/React.createElement(Col,{md:4},/*#__PURE__*/React.createElement(CustomSwitch,{name:\"ntrainingneed\",label:props.intl.formatMessage({id:\"IDS_TRAININGNEEDED\"}),type:\"switch\",onChange:function onChange(event){return props.onInputOnChange(event,1,[transactionStatus.YES,transactionStatus.NO]);},placeholder:props.intl.formatMessage({id:\"IDS_TRAININGNEEDED\"}),defaultValue:props.selectedRecord[\"ntrainingneed\"]===transactionStatus.YES?true:false,checked:props.selectedRecord[\"ntrainingneed\"]===transactionStatus.YES?true:false}))),props.needOtherTest&&props.userRoleControlRights&&Object.keys(props.userRoleControlRights).indexOf(formCode.TESTPACKAGE)!==-1&&/*#__PURE__*/React.createElement(AddTestPackageTest,{onComboChange:props.onComboChange,selectedRecord:props.selectedRecord,package:props.otherTestData.package,isMulti:false}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(FormNumericInput,{name:\"ntat\",label:props.intl.formatMessage({id:\"IDS_TAT\"}),type:\"number\",value:props.selectedRecord[\"ntat\"],placeholder:props.intl.formatMessage({id:\"IDS_TAT\"}),strict:true,min:0//max={9999999.99}\n,maxLength:3,onChange:function onChange(value){return props.onNumericInputChange(value,\"ntat\");},noStyle:true,className:\"form-control\",errors:\"Please provide a valid number.\"})),/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_TATPERIOD\"}),isSearchable:true,isClearable:true,name:\"ntatperiodcode\",placeholder:props.intl.formatMessage({id:\"IDS_TATPERIOD\"}),options:period||[],value:props.selectedRecord?props.selectedRecord[\"ntatperiodcode\"]:\"\",onChange:function onChange(value){return props.onComboChange(value,\"ntatperiodcode\",1);},alphabeticalSort:true}))),/*#__PURE__*/React.createElement(FormInput,{name:\"stestplatform\",label:props.intl.formatMessage({id:\"IDS_TESTPLATFORM\"}),type:\"text\",onChange:function onChange(event){return props.onInputOnChange(event,1);},placeholder:props.intl.formatMessage({id:\"IDS_TESTPLATFORM\"}),value:props.selectedRecord?props.selectedRecord[\"stestplatform\"]:\"\",required:false,maxLength:100}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_INTERFACETYPE\"}),isSearchable:true,name:\"ninterfacetypecode\",isClearable:true,placeholder:props.intl.formatMessage({id:\"IDS_INTERFACETYPE\"}),options:interfacetype||[],optionId:\"ninterfacetypecode\",optionValue:\"sinterfacetypename\",value:props.selectedRecord?props.selectedRecord[\"ninterfacetypecode\"]:\"\",onChange:function onChange(value){return props.onComboChange(value,\"ninterfacetypecode\",1);},alphabeticalSort:true})));};export default injectIntl(AddTest);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/AddTest.jsx"],"names":["React","injectIntl","FormSelectSearch","Col","Row","FormInput","CustomSwitch","FormTextarea","FormNumericInput","AddTestMethod","AddTestInstrumentCategory","AddTestSection","AddTestPackageTest","transactionStatus","formCode","AddTest","props","parameterData","period","interfacetype","intl","formatMessage","id","testData","testCategory","selectedRecord","value","onComboChange","event","onInputOnChange","needOtherTest","otherTestData","section","method","instrumentcategory","onNumericInputChange","ACCREDITED","NOTACCREDITED","YES","NO","userRoleControlRights","Object","keys","indexOf","TESTPACKAGE","package"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport AddTestMethod from './AddTestMethod';\r\nimport AddTestInstrumentCategory from './AddTestInstrumentCategory';\r\nimport AddTestSection from './AddTestSection';\r\nimport AddTestPackageTest from './AddTestPackageTest';\r\nimport { transactionStatus, formCode } from '../../components/Enumeration';\r\n\r\n\r\nconst AddTest = (props) => {\r\n    const {period,interfacetype} = props.parameterData;\r\n    return (\r\n        <Row>\r\n              <Col md={12}>\r\n            \r\n                <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_TESTCATEGORY\" })}\r\n                    isSearchable={true}\r\n                    name={\"ntestcategorycode\"}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    isMandatory={true}\r\n                    showOption={true}\r\n                    options={props.testData.testCategory || []}\r\n                    optionId='ntestcategorycode'\r\n                    optionValue='stestcategoryname'\r\n                    value={props.selectedRecord[\"ntestcategorycode\"]}\r\n                    onChange={value => props.onComboChange(value, \"ntestcategorycode\", 1)}\r\n                    alphabeticalSort={true}\r\n                >\r\n                </FormSelectSearch>\r\n                <FormInput\r\n                    name={\"stestname\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 2)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTNAME\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestname\"]:\"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                <FormInput\r\n                    name={\"stestsynonym\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestsynonym\"]:\"\"}\r\n                    isMandatory=\"*\"\r\n                    required={true}\r\n                    maxLength={100}\r\n                />\r\n                 <FormInput\r\n                    name={\"sshortname\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_SHORTNAME\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SHORTNAME\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"sshortname\"]:\"\"}\r\n                   // isMandatory=\"*\"\r\n                    required={false}\r\n                    maxLength={20}\r\n                />\r\n             { props.needOtherTest && \r\n                <>\r\n                <AddTestSection\r\n                    onComboChange={props.onComboChange}\r\n                    selectedRecord={props.selectedRecord}\r\n                    section={props.otherTestData.section}\r\n                    isMulti={false}\r\n                />\r\n             \r\n                <AddTestMethod\r\n                    onComboChange={props.onComboChange}\r\n                    selectedRecord={props.selectedRecord}\r\n                    method={props.otherTestData.method}\r\n                    isMulti={false}\r\n                />\r\n                 <AddTestInstrumentCategory\r\n                    onComboChange={props.onComboChange}\r\n                    selectedRecord={props.selectedRecord}\r\n                    instrumentcategory={props.otherTestData.instrumentcategory}\r\n                    isMulti={false}\r\n                />\r\n                </>\r\n                }\r\n                <FormNumericInput\r\n                    name={\"ncost\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    type=\"number\"\r\n                    value={props.selectedRecord[\"ncost\"]}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_PRICE\" })}\r\n                    strict={true}\r\n                    min={0}\r\n                    //max={9999999.99}\r\n                    maxLength={10}\r\n                    onChange={(value) => props.onNumericInputChange(value, \"ncost\")}\r\n                    noStyle={true}\r\n                    precision={2}\r\n                    className=\"form-control\"\r\n                    errors=\"Please provide a valid number.\"\r\n                />\r\n\r\n                <FormTextarea\r\n                    name={\"sdescription\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTPROCEDURE\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"sdescription\"]:\"\"}\r\n                    rows=\"2\"\r\n                    required={false}\r\n                    maxLength={1000}\r\n                >\r\n                </FormTextarea>\r\n\r\n            <Row>\r\n                <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"naccredited\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.ACCREDITED, transactionStatus.NOTACCREDITED])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                        defaultValue={props.selectedRecord[\"naccredited\"] === transactionStatus.ACCREDITED ? true : false }\r\n                        checked={props.selectedRecord[\"naccredited\"] === transactionStatus.ACCREDITED ? true : false }\r\n                    />\r\n                </Col>\r\n                <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"ntransactionstatus\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_ACTIVE\"})}\r\n                        type=\"switch\"\r\n                        onChange={(event)=>props.onInputOnChange(event, 1, [1, 2])}\r\n                        //onChange={(event)=>props.onActiveStatusChange(event, [1, 2])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_ACTIVE\"})}\r\n                        defaultValue ={props.selectedRecord[\"ntransactionstatus\"] === 1 ? true :false}\r\n                        checked={props.selectedRecord[\"ntransactionstatus\"] === 1 ? true :false}\r\n                    />\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"ntrainingneed\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_TRAININGNEEDED\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_TRAININGNEEDED\" })}\r\n                        defaultValue={props.selectedRecord[\"ntrainingneed\"] === transactionStatus.YES ? true : false }\r\n                        checked={props.selectedRecord[\"ntrainingneed\"] === transactionStatus.YES ? true : false }\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            { props.needOtherTest && \r\n                  (props.userRoleControlRights && Object.keys(props.userRoleControlRights).indexOf(formCode.TESTPACKAGE) !==-1) &&\r\n                    <AddTestPackageTest\r\n                        onComboChange={props.onComboChange}\r\n                        selectedRecord={props.selectedRecord}\r\n                        package={props.otherTestData.package}\r\n                        isMulti={false}\r\n                    />\r\n                }\r\n \r\n            <Row>\r\n                <Col md={6}>\r\n                    <FormNumericInput\r\n                        name={\"ntat\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_TAT\" })}\r\n                        type=\"number\"\r\n                        value={props.selectedRecord[\"ntat\"]}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_TAT\" })}\r\n                        strict={true}\r\n                        min={0}\r\n                        //max={9999999.99}\r\n                        maxLength={3}\r\n                        onChange={(value) => props.onNumericInputChange(value, \"ntat\")}\r\n                        noStyle={true}\r\n                        className=\"form-control\"\r\n                        errors=\"Please provide a valid number.\"\r\n                    />\r\n                 </Col>\r\n                 <Col md={6}>\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_TATPERIOD\" })}\r\n                        isSearchable={true}\r\n                        isClearable={true}\r\n                        name={\"ntatperiodcode\"}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_TATPERIOD\" })}                   \r\n                        options={period || []}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"ntatperiodcode\"] : \"\"}\r\n                        onChange={value => props.onComboChange(value, \"ntatperiodcode\", 1)}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n                </Col>\r\n            </Row>\r\n            <FormInput\r\n                    name={\"stestplatform\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_TESTPLATFORM\" })}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event, 1)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_TESTPLATFORM\" })}\r\n                    value={props.selectedRecord?props.selectedRecord[\"stestplatform\"]:\"\"}\r\n                    required={false}\r\n                    maxLength={100}\r\n                />\r\n\r\n           <FormSelectSearch\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}\r\n                    isSearchable={true}\r\n                    name={\"ninterfacetypecode\"}\r\n                    isClearable={true}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_INTERFACETYPE\" })}                   \r\n                    options={interfacetype || []}\r\n                    optionId='ninterfacetypecode'\r\n                    optionValue='sinterfacetypename'\r\n                    value={props.selectedRecord ? props.selectedRecord[\"ninterfacetypecode\"] : \"\"}\r\n                    onChange={value => props.onComboChange(value, \"ninterfacetypecode\", 1)}\r\n                    alphabeticalSort={true}\r\n                >\r\n            </FormSelectSearch>     \r\n        </Col>   \r\n                   \r\n        </Row>\r\n     );\r\n}\r\n\r\nexport default injectIntl(AddTest);"]},"metadata":{},"sourceType":"module"}