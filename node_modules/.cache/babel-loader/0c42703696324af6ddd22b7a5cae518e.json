{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\AddReleaseTestAttachment.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\nimport { deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\nimport { viewAttachment } from '../../actions';\nimport { connect } from 'react-redux';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { toast } from 'react-toastify';\nimport { updateStore } from '../../actions';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass AddReleaseTestAttachment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\n      let lstRegistrationTest = this.props.masterData.RegistrationTest;\n      let RegistrationSampleArno = [];\n      let RegistrationTest = [];\n      let ntransactionsamplecode = \"\";\n      let ntransactiontestcode = \"\";\n      let ssamplearno = null;\n      let stestsynonym = null;\n      const needSubSample = this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample;\n\n      if (fieldName === \"npreregno\") {\n        lstRegistrationSampleArno.map(item => {\n          if (item.item.npreregno === comboData.value) {\n            RegistrationSampleArno.push(item);\n          }\n        });\n\n        if (!needSubSample) {\n          lstRegistrationTest.map(item => {\n            if (item.item.ntransactionsamplecode === RegistrationSampleArno[0].item.ntransactionsamplecode) {\n              RegistrationTest.push(item);\n            }\n          });\n          ntransactionsamplecode = {\n            item: RegistrationSampleArno[0],\n            label: RegistrationSampleArno[0].label,\n            value: RegistrationSampleArno[0].value\n          };\n          ssamplearno = RegistrationSampleArno[0].item.ssamplearno;\n        }\n\n        let npreregno = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        let sarno = comboData.item.sarno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationSampleArno,\n          RegistrationTest,\n          npreregno,\n          sarno,\n          ntransactionsamplecode,\n          ntransactiontestcode,\n          ssamplearno,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactionsamplecode\") {\n        lstRegistrationTest.map(item => {\n          if (item.item.ntransactionsamplecode === comboData.value) {\n            RegistrationTest.push(item);\n          }\n        });\n        ntransactionsamplecode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        ssamplearno = comboData.item.ssamplearno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationTest,\n          ntransactionsamplecode,\n          ssamplearno,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactiontestcode\") {\n        ntransactiontestcode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        stestsynonym = comboData.item.stestsynonym;\n        selectedRecord = { ...selectedRecord,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      }\n\n      this.props.childDataChange(selectedRecord);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"nneedreport\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\n        let fileFormat = false;\n        let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\n        let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\n        requiredFileFormat.map(item => {\n          if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\n            fileFormat = true;\n          }\n        });\n        selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\n        !fileFormat && toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\"\n        }));\n      }\n\n      this.setState({\n        selectedRecord\n      });\n      this.props.childDataChange(selectedRecord);\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n      this.props.childDataChange(selectedRecord);\n    };\n\n    this.onDrop = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord\n      });\n      this.props.childDataChange(selectedRecord);\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord\n      });\n      this.props.childDataChange(selectedRecord);\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      loading: false,\n      ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails,\n      dataState: dataState,\n      openModal: false,\n      inputParam: this.props.inputParam,\n      loadEsign: false,\n      operation: this.props.operation ? this.props.operation : \"\",\n      selectedRecord: this.props.selectedRecord,\n      isneedReport: this.props.isneedReport\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.ReleaseTestAttachmentDetails !== prevProps.ReleaseTestAttachmentDetails) {\n      this.setState({\n        ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails\n      });\n    }\n\n    if (this.props.inputParam !== prevProps.inputParam) {\n      this.setState({\n        inputParam: this.props.inputParam\n      });\n    }\n\n    if (this.props.selectedRecord !== prevProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    if (this.props.operation !== prevProps.operation) {\n      this.setState({\n        operation: this.props.operation\n      });\n    }\n  }\n\n  render() {\n    // const addReleaseTestAttachment =\n    //     this.props.controlMap.has(\"AddReleaseTestAttachment\") &&\n    //     this.props.controlMap.get(\"AddReleaseTestAttachment\").ncontrolcode;\n    const editReleaseTestAttachment = this.props.controlMap.has(\"EditReleaseTestAttachment\") && this.props.controlMap.get(\"EditReleaseTestAttachment\").ncontrolcode; // const editReleaseTestAttachmentParam = {\n    //     screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTATTACHMENT\" }),\n    //     operation: \"update\", primaryKeyField: \"nreleasetestattachmentcode\",\n    //     inputParam: this.state.inputParam,\n    //     userInfo: this.props.userInfo,\n    //     ncontrolCode: editReleaseTestAttachment\n    // };\n\n    this.fieldsForReleasedTestAttachmentGrid = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }];\n    {\n      this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample && this.fieldsForReleasedTestAttachmentGrid.push({\n        \"idsName\": \"IDS_SAMPLEARNO\",\n        \"dataField\": \"ssamplearno\",\n        \"width\": \"200px\"\n      });\n    }\n    this.fieldsForReleasedTestAttachmentGrid.push({\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INCULDEINREPORT\",\n      \"dataField\": \"sneedreport\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLENAME\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CREATEDDATE\",\n      \"dataField\": \"screateddate\",\n      \"width\": \"200px\"\n    });\n    const sdescrption = this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK ? \"slinkdescription\" : \"sdescription\";\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DropZone, {\n      name: \"AttachmentFile\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_FILE\"\n      }),\n      isMandatory: true,\n      accept: this.state.selectedRecord && this.state.selectedRecord.nneedreport === transactionStatus.YES ? this.props.settings && this.props.settings[32] : \"\",\n      maxFiles: 1,\n      minSize: 0,\n      maxSize: this.props.maxSize,\n      onDrop: event => this.onDrop(event, 'sfilename', 1),\n      deleteAttachment: this.deleteAttachment,\n      actionType: this.actionType,\n      fileNameLength: this.fileNameLength,\n      editFiles: this.state.selectedRecord ? this.state.selectedRecord : {},\n      attachmentTypeCode: this.state.selectedRecord && this.state.selectedRecord.selectedAttachmentFile && this.state.selectedRecord.selectedAttachmentFile.nattachmenttypecode,\n      fileSizeName: \"nfilesize\",\n      fileName: \"sfilename\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_ARNUMBER\"\n      }),\n      isSearchable: true,\n      name: \"npreregno\",\n      isDisabled: this.state.operation === \"create\" ? false : true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : [],\n      optionId: \"npreregno\",\n      optionValue: \"sarno\",\n      value: this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\",\n      onChange: event => this.onComboChange(event, 'npreregno'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    })), this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample && /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLEARNO\"\n      }),\n      isSearchable: true,\n      name: \"ntransactionsamplecode\",\n      isDisabled: this.state.operation === \"create\" ? false : true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : [],\n      optionId: \"ntransactionsamplecode\",\n      optionValue: \"ssamplearno\",\n      value: this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\",\n      onChange: event => this.onComboChange(event, 'ntransactionsamplecode'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TESTSYNONYM\"\n      }),\n      isSearchable: true,\n      name: \"ntransactiontestcode\",\n      isDisabled: this.state.operation === \"create\" ? false : true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : [],\n      optionId: \"ntransactiontestcode\",\n      optionValue: \"stestsynonym\",\n      value: this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\",\n      onChange: event => this.onComboChange(event, 'ntransactiontestcode'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"sheader\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_HEADER\"\n      }),\n      onChange: event => this.onInputOnChange(event, 1),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_HEADER\"\n      }),\n      value: this.state.selectedRecord && this.state.selectedRecord[\"sheader\"] ? this.state.selectedRecord[\"sheader\"] : \"\",\n      rows: \"2\",\n      required: false //isMandatory={true}\n      ,\n      maxLength: 255,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: \"nsortorder\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SORT\"\n      }),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SORT\"\n      }),\n      type: \"number\",\n      value: this.state.selectedRecord && this.state.selectedRecord[\"nsortorder\"] !== null ? this.state.selectedRecord[\"nsortorder\"] : null,\n      max: 99,\n      min: 0,\n      strict: true,\n      maxLength: 2,\n      onChange: event => this.onNumericInputOnChange(event, 'nsortorder'),\n      noStyle: true,\n      precision: 0,\n      className: \"form-control\",\n      isMandatory: false,\n      errors: \"Please provide a valid number.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: sdescrption,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DESCRIPTION\"\n      }),\n      onChange: event => this.onInputOnChange(event, 1),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_DESCRIPTION\"\n      }),\n      value: this.state.selectedRecord && this.state.selectedRecord[sdescrption] ? this.state.selectedRecord[sdescrption] : \"\",\n      rows: \"2\",\n      required: false,\n      maxLength: 255,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_INCULDEINREPORT\"\n      }),\n      type: \"switch\",\n      name: \"nneedreport\",\n      onChange: event => this.onInputOnChange(event, 1),\n      defaultValue: false,\n      isMandatory: false,\n      required: true,\n      checked: this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  viewAttachment,\n  updateStore\n})(injectIntl(AddReleaseTestAttachment));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/release/AddReleaseTestAttachment.jsx"],"names":["React","Col","Row","injectIntl","DropZone","attachmentType","transactionStatus","deleteAttachmentDropZone","onDropAttachFileList","viewAttachment","connect","CustomSwitch","FormTextarea","FormSelectSearch","toast","updateStore","FormNumericInput","mapStateToProps","state","Login","AddReleaseTestAttachment","Component","constructor","props","onComboChange","comboData","fieldName","selectedRecord","lstRegistrationSampleArno","masterData","RegistrationSampleArno","lstRegistrationTest","RegistrationTest","ntransactionsamplecode","ntransactiontestcode","ssamplearno","stestsynonym","needSubSample","realRegSubTypeValue","nneedsubsample","map","item","npreregno","value","push","label","sarno","setState","childDataChange","onInputOnChange","event","target","name","type","checked","YES","NO","undefined","length","fileFormat","requiredFileFormat","settings","split","fileNameSplit","Array","isArray","slice","warn","intl","formatMessage","id","onNumericInputOnChange","onDrop","attachedFiles","maxSize","deleteAttachment","file","dataState","skip","take","parseInt","loading","ReleaseTestAttachmentDetails","openModal","inputParam","loadEsign","operation","isneedReport","componentDidUpdate","prevProps","render","editReleaseTestAttachment","controlMap","has","get","ncontrolcode","fieldsForReleasedTestAttachmentGrid","sdescrption","nattachmenttypecode","LINK","nneedreport","actionType","fileNameLength","selectedAttachmentFile","RegistrationArno"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\r\nimport { deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\r\nimport { viewAttachment } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { toast } from 'react-toastify';\r\nimport { updateStore } from '../../actions';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass AddReleaseTestAttachment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            loading: false,\r\n            ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails,\r\n            dataState: dataState,\r\n            openModal: false,\r\n            inputParam: this.props.inputParam,\r\n            loadEsign: false,\r\n            operation: this.props.operation ? this.props.operation : \"\",\r\n            selectedRecord: this.props.selectedRecord,\r\n            isneedReport: this.props.isneedReport\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.ReleaseTestAttachmentDetails !== prevProps.ReleaseTestAttachmentDetails) {\r\n            this.setState({ ReleaseTestAttachmentDetails: this.props.ReleaseTestAttachmentDetails })\r\n        }\r\n        if (this.props.inputParam !== prevProps.inputParam) {\r\n            this.setState({ inputParam: this.props.inputParam })\r\n        }\r\n        if (this.props.selectedRecord !== prevProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord })\r\n        }\r\n        if (this.props.operation !== prevProps.operation) {\r\n            this.setState({ operation: this.props.operation })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // const addReleaseTestAttachment =\r\n        //     this.props.controlMap.has(\"AddReleaseTestAttachment\") &&\r\n        //     this.props.controlMap.get(\"AddReleaseTestAttachment\").ncontrolcode;\r\n\r\n        const editReleaseTestAttachment =\r\n            this.props.controlMap.has(\"EditReleaseTestAttachment\") &&\r\n            this.props.controlMap.get(\"EditReleaseTestAttachment\").ncontrolcode;\r\n\r\n        // const editReleaseTestAttachmentParam = {\r\n        //     screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTATTACHMENT\" }),\r\n        //     operation: \"update\", primaryKeyField: \"nreleasetestattachmentcode\",\r\n        //     inputParam: this.state.inputParam,\r\n        //     userInfo: this.props.userInfo,\r\n        //     ncontrolCode: editReleaseTestAttachment\r\n        // };\r\n\r\n        this.fieldsForReleasedTestAttachmentGrid =\r\n            [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n            ]\r\n        {\r\n            this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample &&\r\n                this.fieldsForReleasedTestAttachmentGrid.push(\r\n                    { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" }\r\n                )\r\n        }\r\n        this.fieldsForReleasedTestAttachmentGrid.push(\r\n            { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERROLENAME\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_CREATEDDATE\", \"dataField\": \"screateddate\", \"width\": \"200px\" }\r\n        );\r\n\r\n        const sdescrption = this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK ? \"slinkdescription\" : \"sdescription\";\r\n        return (\r\n            <>\r\n                <Row>\r\n                    {\r\n                        <Col md={12}>\r\n                            <DropZone\r\n                                name='AttachmentFile'\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_FILE\" })}\r\n                                isMandatory={true}\r\n                                accept={this.state.selectedRecord && this.state.selectedRecord.nneedreport === transactionStatus.YES ? this.props.settings && this.props.settings[32] : \"\"}\r\n                                maxFiles={1}\r\n                                minSize={0}\r\n                                maxSize={this.props.maxSize}\r\n                                onDrop={(event) => this.onDrop(event, 'sfilename', 1)}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                actionType={this.actionType}\r\n                                fileNameLength={this.fileNameLength}\r\n                                editFiles={this.state.selectedRecord ? this.state.selectedRecord : {}}\r\n                                attachmentTypeCode={this.state.selectedRecord && this.state.selectedRecord.selectedAttachmentFile && this.state.selectedRecord.selectedAttachmentFile.nattachmenttypecode}\r\n                                fileSizeName=\"nfilesize\"\r\n                                fileName=\"sfilename\"\r\n                            />\r\n                        </Col>\r\n                    }\r\n\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_ARNUMBER\" })}\r\n                            isSearchable={true}\r\n                            name={\"npreregno\"}\r\n                            isDisabled={this.state.operation === \"create\" ? false : true}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : []}\r\n                            optionId='npreregno'\r\n                            optionValue='sarno'\r\n                            value={this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\"}\r\n                            onChange={(event) => this.onComboChange(event, 'npreregno')}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    {this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample &&\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLEARNO\" })}\r\n                                isSearchable={true}\r\n                                name={\"ntransactionsamplecode\"}\r\n                                isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={true}\r\n                                options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : []}\r\n                                optionId='ntransactionsamplecode'\r\n                                optionValue='ssamplearno'\r\n                                value={this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\"}\r\n                                onChange={(event) => this.onComboChange(event, 'ntransactionsamplecode')}\r\n                                closeMenuOnSelect={true}\r\n                                alphabeticalSort={true}\r\n                            />\r\n                        </Col>\r\n                    }\r\n\r\n\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                            isSearchable={true}\r\n                            name={\"ntransactiontestcode\"}\r\n                            isDisabled={this.state.operation === \"create\" ? false : true}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : []}\r\n                            optionId='ntransactiontestcode'\r\n                            optionValue='stestsynonym'\r\n                            value={this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\"}\r\n                            onChange={(event) => this.onComboChange(event, 'ntransactiontestcode')}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md=\"12\" className=\"mt-4\">\r\n                        <FormTextarea\r\n                            name={\"sheader\"}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_HEADER\" })}\r\n                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_HEADER\" })}\r\n                            value={this.state.selectedRecord && this.state.selectedRecord[\"sheader\"] ? this.state.selectedRecord[\"sheader\"] : \"\"}\r\n                            rows=\"2\"\r\n                            required={false}\r\n                            //isMandatory={true}\r\n                            maxLength={255}\r\n                        >\r\n                        </FormTextarea>\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormNumericInput\r\n                            name={\"nsortorder\"}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_SORT\" })}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SORT\" })}\r\n                            type=\"number\"\r\n                            value={this.state.selectedRecord && this.state.selectedRecord[\"nsortorder\"] !== null ? this.state.selectedRecord[\"nsortorder\"] : null}\r\n                            max={99}\r\n                            min={0}\r\n                            strict={true}\r\n                            maxLength={2}\r\n                            onChange={(event) => this.onNumericInputOnChange(event, 'nsortorder')}\r\n                            noStyle={true}\r\n                            precision={0}\r\n                            className=\"form-control\"\r\n                            isMandatory={false}\r\n                            errors=\"Please provide a valid number.\"\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md=\"12\" className=\"mt-4\">\r\n                        <FormTextarea\r\n                            name={sdescrption}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                            value={this.state.selectedRecord && this.state.selectedRecord[sdescrption] ? this.state.selectedRecord[sdescrption] : \"\"}\r\n                            rows=\"2\"\r\n                            required={false}\r\n                            maxLength={255}\r\n                        >\r\n                        </FormTextarea>\r\n                    </Col>\r\n\r\n                    <Col md=\"12\" className=\"mt-4\">\r\n                        <CustomSwitch\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_INCULDEINREPORT\" })}\r\n                            type=\"switch\"\r\n                            name={\"nneedreport\"}\r\n                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                            defaultValue={false}\r\n                            isMandatory={false}\r\n                            required={true}\r\n                            checked={this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    };\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\r\n        let lstRegistrationTest = this.props.masterData.RegistrationTest;\r\n        let RegistrationSampleArno = [];\r\n        let RegistrationTest = [];\r\n        let ntransactionsamplecode = \"\";\r\n        let ntransactiontestcode = \"\";\r\n        let ssamplearno = null;\r\n        let stestsynonym = null;\r\n        const needSubSample = this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample;\r\n        if (fieldName === \"npreregno\") {\r\n            lstRegistrationSampleArno.map(item => {\r\n                if (item.item.npreregno === comboData.value) {\r\n                    RegistrationSampleArno.push(item);\r\n                }\r\n            });\r\n            if (!needSubSample) {\r\n                lstRegistrationTest.map(item => {\r\n                    if (item.item.ntransactionsamplecode === RegistrationSampleArno[0].item.ntransactionsamplecode) {\r\n                        RegistrationTest.push(item);\r\n                    }\r\n                });\r\n                ntransactionsamplecode = {\r\n                    item: RegistrationSampleArno[0],\r\n                    label: RegistrationSampleArno[0].label,\r\n                    value: RegistrationSampleArno[0].value\r\n                }\r\n                ssamplearno = RegistrationSampleArno[0].item.ssamplearno\r\n            }\r\n            let npreregno = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            };\r\n            let sarno = comboData.item.sarno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationSampleArno, RegistrationTest, npreregno\r\n                , sarno, ntransactionsamplecode, ntransactiontestcode, ssamplearno, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactionsamplecode\") {\r\n            lstRegistrationTest.map(item => {\r\n                if (item.item.ntransactionsamplecode === comboData.value) {\r\n                    RegistrationTest.push(item);\r\n                }\r\n            });\r\n            ntransactionsamplecode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            ssamplearno = comboData.item.ssamplearno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationTest, ntransactionsamplecode\r\n                , ssamplearno, ntransactiontestcode, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactiontestcode\") {\r\n            ntransactiontestcode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            stestsynonym = comboData.item.stestsynonym;\r\n            selectedRecord = {\r\n                ...selectedRecord, ntransactiontestcode\r\n                , stestsynonym\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        this.props.childDataChange(selectedRecord);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"nneedreport\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\r\n            let fileFormat = false;\r\n            let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\r\n            let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\r\n            requiredFileFormat.map(item => {\r\n                if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\r\n                    fileFormat = true;\r\n                }\r\n            });\r\n            selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\r\n            !fileFormat && toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\" }));\r\n        }\r\n        this.setState({ selectedRecord })\r\n        this.props.childDataChange(selectedRecord);\r\n    }\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n        this.props.childDataChange(selectedRecord);\r\n    }\r\n\r\n    onDrop = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord });\r\n        this.props.childDataChange(selectedRecord);\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        this.setState({\r\n            selectedRecord\r\n        });\r\n        this.props.childDataChange(selectedRecord);\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { viewAttachment, updateStore })(injectIntl(AddReleaseTestAttachment));"]},"metadata":{},"sourceType":"module"}