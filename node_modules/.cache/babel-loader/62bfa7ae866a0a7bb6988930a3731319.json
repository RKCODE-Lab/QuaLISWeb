{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\AddQuery.jsx\";\nimport React, { Component } from 'react'; //createRef\n\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords } from '@progress/kendo-react-grid';\nimport { Draggable, Droppable } from 'react-drag-and-drop';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail, getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName } from '../../actions';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { process } from '@progress/kendo-data-query';\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\nimport { tableType, queryTypeFilter } from '../../components/Enumeration';\nimport SqlBuilderTableGrid from './SqlBuilderTableGrid';\n\nclass AddQuery extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.tableDataStateChange = event => {\n      this.setState({\n        dataStateTable: event.dataState\n      });\n    };\n\n    this.expandChange = event => {\n      event.dataItem.expanded = !event.dataItem.expanded;\n      this.forceUpdate();\n    };\n\n    this.detailBand = props => {\n      const columnName = this.props.tableList.filter(p => p.stable === props.dataItem.tableName);\n      return /*#__PURE__*/React.createElement(Grid, {\n        data: columnName //resizable\n        //scrollable={\"scrollable\"}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(GridColumn, {\n        width: \"48px\",\n        cell: row => /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Draggable, {\n          type: 'dragcolumn',\n          data: this.props.selectedRecord[\"ssqlquery\"] ? this.props.selectedRecord[\"ssqlquery\"].includes('where') ? row.dataItem.isjsoncolumn ? row.dataItem.ismultilingual ? \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->'\" + row.dataItem.scolumn + \"'->><@\" + row.dataItem.parametername + \"@> \" : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->>'\" + row.dataItem.scolumn + \"' \" : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\\\"\" + row.dataItem.scolumn + \"\\\" \" : row.dataItem.isjsoncolumn ? row.dataItem.ismultilingual ? \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->'\" + row.dataItem.scolumn + \"'->><@\" + row.dataItem.parametername + \"@> \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\" : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->>'\" + row.dataItem.scolumn + \"' \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\" : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\\\"\" + row.dataItem.scolumn + \"\\\" \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\" : row.dataItem.isjsoncolumn ? row.dataItem.ismultilingual ? \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->'\" + row.dataItem.scolumn + \"'->><@\" + row.dataItem.parametername + \"@> \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\" : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->>'\" + row.dataItem.scolumn + \"' \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\" : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\\\"\" + row.dataItem.scolumn + \"\\\" \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faGripVertical,\n          className: \"dragicon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 33\n          }\n        }), console.log(this.props.selectedRecord[\"ssqlquery\"] && this.props.selectedRecord[\"ssqlquery\"].includes('where')))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(GridColumn, {\n        width: \"336px\",\n        field: \"scolumndisplayname\",\n        title: this.props.intl.formatMessage({\n          id: \"IDS_COLUMN_NAME\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    this.state = {\n      dataStateTable: {\n        skip: 0\n      }\n    };\n  }\n\n  // columnProps(field) {\n  //     if (!this.props.hideColumnFilter) {\n  //         return {\n  //             field: field,\n  //             columnMenu: ColumnMenu,\n  //             headerClassName: this.isColumnActive(field, this.state.dataStateTable) ? 'active' : ''\n  //         };\n  //     }\n  // }\n  // isColumnActive(field, dataState) {\n  //     return GridColumnMenuFilter.active(field, dataState.filter)\n  // }\n  render() {\n    let selectedRecordValue = { ...this.props.selectedRecord\n    };\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ntabletypecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TABLETYPE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      isMulti: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.props.tableType // optionId='ntabletypecode'\n      // optionValue='stabletype'\n      ,\n      defaultValue: this.props.selectedTableType[\"ntabletypecode\"],\n      showOption: true,\n      required: true,\n      value: this.props.selectedTableType[\"ntabletypecode\"] ? this.props.selectedTableType[\"ntabletypecode\"] : \"\",\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      onChange: event => this.props.onComboChange(event, 'ntabletypecode') //  sortField={\"ntabletypecode\"}\n      //  sortOrder={\"ascending\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }), this.props.tableTypeCode === tableType.ALL ? \"\" : /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nformcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: this.props.tableTypeCode === tableType.MODULES ? \"IDS_MODULENAME\" : this.props.tableTypeCode === tableType.FORMS ? \"IDS_FORMNAME\" : \"IDS_FORMNAME\"\n      }),\n      isSearchable: true,\n      isDisabled: this.props.tableTypeCode === tableType.ALL ? true : false,\n      isMulti: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.props.moduleFormName || [],\n      optionId: \"nformcode\",\n      optionValue: \"sformname\",\n      defaultValue: this.props.selectedRecord[\"nformcode\"],\n      showOption: true,\n      required: true,\n      value: this.props.selectedRecord[\"nformcode\"] ? this.props.selectedRecord[\"nformcode\"] : \"\",\n      closeMenuOnSelect: true //alphabeticalSort={true}\n      ,\n      onChange: event => this.props.onComboChange(event, 'nformcode') //sortField={\"nformcode\"}\n      //sortOrder={\"ascending\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SqlBuilderTableGrid, {\n      style: {\n        height: '600px'\n      },\n      data: process(this.props.tableName, this.state.dataStateTable),\n      onDataStateChange: this.tableDataStateChange,\n      dataState: this.state.dataStateTable,\n      detail: this.detailBand,\n      expandField: \"expanded\",\n      onExpandChange: this.expandChange,\n      selectedRecord: selectedRecordValue,\n      pageable: {\n        buttonCount: 4,\n        pageSizes: this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\n        previousNext: false\n      },\n      hideColumnFilter: this.props.hideColumnFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"ssqlqueryname\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERYNAME\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERYNAME\"\n      }),\n      value: this.props.selectedRecord[\"ssqlqueryname\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Droppable, {\n      types: ['dragcolumn', 'dragtable'],\n      onDrop: event => this.props.onDrop(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"ssqlquery\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERY\"\n      }),\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERY\"\n      }),\n      value: this.props.selectedRecord[\"ssqlquery\"],\n      rows: 15,\n      isMandatory: true,\n      required: true,\n      maxLength: 10000,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 33\n      }\n    })), this.props.queryTypeCode === queryTypeFilter.LIMSALERTQUERY && /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sscreenheader\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SCREENHEADER\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SCREENHEADER\"\n      }),\n      value: this.props.selectedRecord[\"sscreenheader\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      isDisabled: this.props.queryTypeCode === 2 ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 33\n      }\n    }), this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(FormInput, {\n      name: \"svaluemember\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SVALUEMEMBER\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SVALUEMEMBER\"\n      }),\n      value: this.props.selectedRecord[\"svaluemember\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 33\n      }\n    }), this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sdisplaymember\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SDISPLAYMEMBER\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SDISPLAYMEMBER\"\n      }),\n      value: this.props.selectedRecord[\"sdisplaymember\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 33\n      }\n    }), this.props.queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY && /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ncharttypecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_CHARTTYPE\"\n      }),\n      isSearchable: true,\n      placeholder: \"Please Select...\",\n      isMandatory: true,\n      options: this.props.chartList,\n      optionId: \"ncharttypecode\",\n      optionValue: \"schartname\",\n      value: this.props.selectedRecord[\"ncharttypecode\"],\n      defaultValue: this.props.selectedRecord[\"ncharttypecode\"],\n      onChange: event => this.props.onComboChange(event, 'ncharttypecode'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      isDisabled: this.props.queryTypeCode === 1 ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 33\n      }\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getSQLQueryDetail,\n  getSQLQueryComboService,\n  comboChangeQueryType,\n  executeUserQuery,\n  comboColumnValues,\n  getColumnNamesByTableName\n})(injectIntl(AddQuery));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboard/AddQuery.jsx"],"names":["React","Component","connect","injectIntl","Row","Col","Grid","GridColumn","GridColumnMenuFilter","GridNoRecords","Draggable","Droppable","FontAwesomeIcon","faGripVertical","FormInput","FormTextarea","FormSelectSearch","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","getColumnNamesByTableName","AtTableWrap","process","ColumnMenu","tableType","queryTypeFilter","SqlBuilderTableGrid","AddQuery","constructor","props","tableDataStateChange","event","setState","dataStateTable","dataState","expandChange","dataItem","expanded","forceUpdate","detailBand","columnName","tableList","filter","p","stable","tableName","row","selectedRecord","includes","isjsoncolumn","ismultilingual","stabledisplayname","jsoncolumnname","scolumn","parametername","scolumndisplayname","console","log","intl","formatMessage","id","state","skip","render","selectedRecordValue","selectedTableType","onComboChange","tableTypeCode","ALL","MODULES","FORMS","moduleFormName","height","buttonCount","pageSizes","Login","settings","split","map","setting","parseInt","previousNext","hideColumnFilter","onInputOnChange","onDrop","queryTypeCode","LIMSALERTQUERY","LIMSFILTERQUERY","LIMSDASHBOARDQUERY","chartList","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';//createRef\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { Grid, GridColumn, GridColumnMenuFilter,GridNoRecords} from '@progress/kendo-react-grid';\r\nimport { Draggable, Droppable } from 'react-drag-and-drop';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component'\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName\r\n} from '../../actions';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\r\nimport { tableType, queryTypeFilter } from '../../components/Enumeration';\r\nimport SqlBuilderTableGrid from './SqlBuilderTableGrid';\r\n\r\n\r\nclass AddQuery extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            dataStateTable: { skip: 0 },\r\n        });\r\n\r\n    }\r\n    tableDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateTable: event.dataState\r\n        });\r\n    }\r\n    expandChange = (event) => {\r\n        event.dataItem.expanded = !event.dataItem.expanded;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    detailBand = (props) => {\r\n        const columnName = this.props.tableList.filter(p => p.stable === props.dataItem.tableName)\r\n\r\n        return (\r\n            <Grid\r\n                data={columnName}\r\n            //resizable\r\n            //scrollable={\"scrollable\"}\r\n            >\r\n\r\n                <GridColumn\r\n                    width=\"48px\"\r\n                    cell={(row) => (\r\n                        <td>\r\n                            <Draggable type={'dragcolumn'} data={this.props.selectedRecord[\"ssqlquery\"] ?\r\n                                this.props.selectedRecord[\"ssqlquery\"].includes('where') ?\r\n\r\n                                    row.dataItem.isjsoncolumn ? row.dataItem.ismultilingual ?\r\n                                        \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->'\" + row.dataItem.scolumn + \"'->><@\" + row.dataItem.parametername + \"@> \"\r\n                                        : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->>'\" + row.dataItem.scolumn + \"' \"\r\n                                        : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\\\"\" + row.dataItem.scolumn + \"\\\" \"\r\n\r\n                                    : row.dataItem.isjsoncolumn ? row.dataItem.ismultilingual ?\r\n                                        \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->'\" + row.dataItem.scolumn + \"'->><@\" + row.dataItem.parametername + \"@> \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\"\r\n                                        : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->>'\" + row.dataItem.scolumn + \"' \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\"\r\n                                        : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\\\"\" + row.dataItem.scolumn + \"\\\" \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\"\r\n\r\n                                : row.dataItem.isjsoncolumn ? row.dataItem.ismultilingual ?\r\n                                    \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->'\" + row.dataItem.scolumn + \"'->><@\" + row.dataItem.parametername + \"@> \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\"\r\n                                    : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\" + row.dataItem.jsoncolumnname + \"->>'\" + row.dataItem.scolumn + \"' \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\"\r\n                                    : \"\\\"\" + row.dataItem.stabledisplayname + \"\\\".\\\"\" + row.dataItem.scolumn + \"\\\" \\\"\" + row.dataItem.scolumndisplayname + \"\\\"\"}>\r\n                                <FontAwesomeIcon icon={faGripVertical} className=\"dragicon\" />\r\n                                {console.log(this.props.selectedRecord[\"ssqlquery\"] && this.props.selectedRecord[\"ssqlquery\"].includes('where'))}\r\n                            </Draggable>\r\n                        </td>\r\n                    )}\r\n                />\r\n\r\n                <GridColumn\r\n                    width={\"336px\"}\r\n                    field=\"scolumndisplayname\"\r\n                    title={this.props.intl.formatMessage({ id: \"IDS_COLUMN_NAME\" })}\r\n                />\r\n\r\n            </Grid>\r\n        );\r\n    }\r\n    // columnProps(field) {\r\n    //     if (!this.props.hideColumnFilter) {\r\n    //         return {\r\n    //             field: field,\r\n    //             columnMenu: ColumnMenu,\r\n    //             headerClassName: this.isColumnActive(field, this.state.dataStateTable) ? 'active' : ''\r\n    //         };\r\n    //     }\r\n    // }\r\n\r\n    // isColumnActive(field, dataState) {\r\n    //     return GridColumnMenuFilter.active(field, dataState.filter)\r\n    // }\r\n\r\n    render() {\r\n        let selectedRecordValue={...this.props.selectedRecord};\r\n        return (\r\n            <Row>\r\n                <Col md={6}>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                name={\"ntabletypecode\"}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_TABLETYPE\" })}\r\n                                isSearchable={false}\r\n                                isDisabled={false}\r\n                                isMulti={false}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={true}\r\n                                options={this.props.tableType}\r\n                                // optionId='ntabletypecode'\r\n                                // optionValue='stabletype'\r\n                                defaultValue={this.props.selectedTableType[\"ntabletypecode\"]}\r\n                                showOption={true}\r\n                                required={true}\r\n                                value={this.props.selectedTableType[\"ntabletypecode\"] ? this.props.selectedTableType[\"ntabletypecode\"] : \"\"}\r\n                                closeMenuOnSelect={true}\r\n                                alphabeticalSort={true}\r\n                                onChange={(event) => this.props.onComboChange(event, 'ntabletypecode')}\r\n                            //  sortField={\"ntabletypecode\"}\r\n                            //  sortOrder={\"ascending\"}\r\n\r\n                            >\r\n                            </FormSelectSearch>\r\n                            {this.props.tableTypeCode === tableType.ALL ? \"\" :\r\n                                <FormSelectSearch\r\n                                    name={\"nformcode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: this.props.tableTypeCode === tableType.MODULES ? \"IDS_MODULENAME\" : this.props.tableTypeCode === tableType.FORMS ? \"IDS_FORMNAME\" : \"IDS_FORMNAME\" })}\r\n                                    isSearchable={true}\r\n                                    isDisabled={this.props.tableTypeCode === tableType.ALL ? true : false}\r\n                                    isMulti={false}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                    isMandatory={true}\r\n                                    options={this.props.moduleFormName || []}\r\n                                    optionId='nformcode'\r\n                                    optionValue='sformname'\r\n                                    defaultValue={this.props.selectedRecord[\"nformcode\"]}\r\n                                    showOption={true}\r\n                                    required={true}\r\n                                    value={this.props.selectedRecord[\"nformcode\"] ? this.props.selectedRecord[\"nformcode\"] : \"\"}\r\n                                    closeMenuOnSelect={true}\r\n                                    //alphabeticalSort={true}\r\n                                    onChange={(event) => this.props.onComboChange(event, 'nformcode')}\r\n                                //sortField={\"nformcode\"}\r\n                                //sortOrder={\"ascending\"}\r\n\r\n                                >\r\n                                </FormSelectSearch>\r\n                            }\r\n                            <SqlBuilderTableGrid\r\n                            style={{ height: '600px' }}\r\n                            data={process(this.props.tableName, this.state.dataStateTable)}\r\n                            onDataStateChange={this.tableDataStateChange}\r\n                            dataState={this.state.dataStateTable}\r\n                            detail={this.detailBand}\r\n                            expandField=\"expanded\"\r\n                            onExpandChange={this.expandChange}\r\n                            selectedRecord={selectedRecordValue}\r\n                            pageable={{ buttonCount: 4, pageSizes: this.props.Login.settings &&\r\n                                this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\r\n                                 previousNext: false}}\r\n                            hideColumnFilter={this.props.hideColumnFilter}\r\n                            />\r\n                        \r\n                            {/* <AtTableWrap className=\"at-list-table\">\r\n                                <Grid\r\n                                    style={{ height: '600px' }}\r\n                                    data={process(this.props.tableName, this.state.dataStateTable)}\r\n                                    //{...this.dataStateTable}\r\n                                    onDataStateChange={this.tableDataStateChange}\r\n                                    dataState={this.state.dataStateTable}\r\n                                    detail={this.detailBand}\r\n                                    expandField=\"expanded\"\r\n                                    onExpandChange={this.expandChange}\r\n                                    pageable={{ buttonCount: 4, pageSizes: this.props.Login.settings &&\r\n                                        this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting)),\r\n                                         previousNext: false}}\r\n                                //data={process(this.props.tableList, this.props.dataStateTable)}\r\n\r\n                                >\r\n                                      <GridNoRecords>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                                </GridNoRecords>\r\n                                    <GridColumn\r\n                                        width=\"48px\"\r\n                                        cell={(row) => (\r\n                                            <td >\r\n                                                <Draggable type=\"dragtable\" data={row.dataItem.tableName + \" \\\"\" + row.dataItem.stabledisplayname + \"\\\"\"}>\r\n                                                    <FontAwesomeIcon icon={faGripVertical} className=\"dragicon\"></FontAwesomeIcon>\r\n                                                </Draggable>\r\n                                            </td>\r\n                                        )}\r\n                                    />\r\n\r\n                                    <GridColumn\r\n                                        width={\"425px\"}\r\n                                        field=\"stabledisplayname\"\r\n                                        {...this.columnProps(\"stabledisplayname\")}\r\n                                        title={this.props.intl.formatMessage({ id: \"IDS_TABLE_NAME\" })}\r\n                                    />\r\n                                </Grid>\r\n                            </AtTableWrap> */}\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormInput\r\n                                name={\"ssqlqueryname\"}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_SQLQUERYNAME\" })}\r\n                                type=\"text\"\r\n                                onChange={(event) => this.props.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SQLQUERYNAME\" })}\r\n                                value={this.props.selectedRecord[\"ssqlqueryname\"]}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                maxLength={100}\r\n\r\n                            />\r\n\r\n                            <Droppable\r\n                                types={['dragcolumn', 'dragtable']}\r\n                                onDrop={event => this.props.onDrop(event)}\r\n                            >\r\n\r\n                                <FormTextarea\r\n                                    name={\"ssqlquery\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SQLQUERY\" })}\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SQLQUERY\" })}\r\n                                    value={this.props.selectedRecord[\"ssqlquery\"]}\r\n                                    rows={15}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={10000}\r\n                                />\r\n                            </Droppable>\r\n\r\n\r\n                            {/* {this.props.queryTypeCode === 12 &&\r\n                                <FormInput\r\n                                    name={\"sscreenrecordquery\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SCREENRECORDQUERY\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SCREENRECORDQUERY\" })}\r\n                                    value={this.props.selectedRecord[\"sscreenrecordquery\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n                                    isDisabled={this.props.queryTypeCode === 2 ? false : true}\r\n                                    isVisible={false}\r\n                                />\r\n                            } */}\r\n                            {this.props.queryTypeCode === queryTypeFilter.LIMSALERTQUERY &&\r\n                                <FormInput\r\n                                    name={\"sscreenheader\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SCREENHEADER\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SCREENHEADER\" })}\r\n                                    value={this.props.selectedRecord[\"sscreenheader\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n                                    isDisabled={this.props.queryTypeCode === 2 ? false : true}\r\n                                />\r\n                            }\r\n                            {this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                <FormInput\r\n                                    name={\"svaluemember\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SVALUEMEMBER\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SVALUEMEMBER\" })}\r\n                                    value={this.props.selectedRecord[\"svaluemember\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n\r\n                                />\r\n                            }\r\n                            {this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                <FormInput\r\n                                    name={\"sdisplaymember\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SDISPLAYMEMBER\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SDISPLAYMEMBER\" })}\r\n                                    value={this.props.selectedRecord[\"sdisplaymember\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n\r\n                                />\r\n                            }\r\n                            {this.props.queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY &&\r\n                                <FormSelectSearch\r\n                                    name={\"ncharttypecode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_CHARTTYPE\" })}\r\n                                    isSearchable={true}\r\n\r\n\r\n                                    placeholder=\"Please Select...\"\r\n                                    isMandatory={true}\r\n                                    options={this.props.chartList}\r\n                                    optionId='ncharttypecode'\r\n                                    optionValue='schartname'\r\n                                    value={this.props.selectedRecord[\"ncharttypecode\"]}\r\n                                    defaultValue={this.props.selectedRecord[\"ncharttypecode\"]}\r\n\r\n                                    onChange={(event) => this.props.onComboChange(event, 'ncharttypecode')}\r\n                                    closeMenuOnSelect={true}\r\n                                    alphabeticalSort={true}\r\n                                    isDisabled={this.props.queryTypeCode === 1 ? false : true}\r\n                                />\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData, validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName\r\n})(injectIntl(AddQuery));"]},"metadata":{},"sourceType":"module"}