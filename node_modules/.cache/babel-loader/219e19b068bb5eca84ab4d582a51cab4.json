{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus, reportTypeEnum } from '../components/Enumeration';\nimport { fileViewUrl, reportUrl } from '../rsapi';\nexport function getReportMasterComboService(inputParam) {\n  return function (dispatch) {\n    // if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus !== transactionStatus.APPROVED))\n    // {      \n    dispatch(initRequest(true));\n    let nreportcode = null;\n\n    if (inputParam.operation === \"update\") {\n      nreportcode = inputParam.mastertoedit[inputParam.primaryKeyName];\n    }\n\n    return rsapi.post(\"reportconfig/getReportMasterComboData\", {\n      nreportcode,\n      userinfo: inputParam.userInfo,\n      filterreporttype: inputParam.filterReportType\n    }).then(response => {\n      const reportTypeMap = constructOptionList(response.data[\"ReportType\"] || [], \"nreporttypecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportModuleMap = constructOptionList(response.data[\"ReportModule\"] || [], \"nreportmodulecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportSubTypeMap = constructOptionList(response.data[\"COAReportType\"] || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, true);\n      const approvaConfigVersionMap = constructOptionList(response.data[\"ApprovalConfigVersion\"] || [], \"napproveconfversioncode\", \"sversionname\", undefined, undefined, false);\n      const sectionMap = constructOptionList(response.data[\"SectionList\"] || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const decisionTypeMap = constructOptionList(response.data[\"ReportDecisionType\"] || [], \"nreportdecisiontypecode\", \"sdecisiontypename\", undefined, undefined, true);\n      const certificateTypeMap = constructOptionList(response.data[\"CertificateType\"] || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const controlScreenTypeMap = constructOptionList(response.data[\"ControlScreen\"] || [], \"nformcode\", \"sdisplayname\", undefined, undefined, true);\n      const reportTemplateMap = constructOptionList(response.data[\"ReportTemplate\"] || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", true);\n      const reportTypeList = reportTypeMap.get(\"OptionList\");\n      const reportModuleList = reportModuleMap.get(\"OptionList\");\n      const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n      const regTypeList = regTypeMap.get(\"OptionList\");\n      const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n      const sectionList = sectionMap.get(\"OptionList\");\n      const decisionTypeList = decisionTypeMap.get(\"OptionList\");\n      const certificateTypeList = certificateTypeMap.get(\"OptionList\");\n      const controlScreenTypeList = controlScreenTypeMap.get(\"OptionList\");\n      const ApproveConfigList = approvaConfigVersionMap.get(\"OptionList\");\n      const reportTemplateList = reportTemplateMap.get(\"OptionList\");\n      let selectedRecord = {\n        ntransactionstatus: transactionStatus.ACTIVE\n      };\n      let respObject = {\n        \"reportVersionStatus\": transactionStatus.DRAFT\n      };\n\n      if (inputParam.operation === \"update\") {\n        if (response.status === 202) {\n          respObject[\"reportVersionStatus\"] = transactionStatus.APPROVED;\n          respObject[\"ApprovedReportMaster\"] = response.data[\"SelectedReportDesigner\"];\n        }\n\n        selectedRecord = JSON.parse(JSON.stringify(response.data[\"SelectedReportDesigner\"]));\n\n        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE || selectedRecord.nreporttypecode === reportTypeEnum.COA || selectedRecord.nreporttypecode === reportTypeEnum.COAPREVIEW || selectedRecord.nreporttypecode === reportTypeEnum.COAPRELIMINARY) {\n          selectedRecord[\"nsampletypecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nsampletypecode,\n            label: response.data[\"SelectedReportDesigner\"].ssampletypename\n          }; // selectedRecord[\"nregtypecode\"] = {\n          //     value: response.data[\"SelectedReportDesigner\"].nregtypecode,\n          //     label: response.data[\"SelectedReportDesigner\"].sregtypename\n          // };\n\n          if (response.data[\"SelectedReportDesigner\"].nregtypecode !== -1) {\n            selectedRecord[\"nregtypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nregtypecode,\n              label: response.data[\"SelectedReportDesigner\"].sregtypename\n            };\n          } else {\n            selectedRecord[\"nregtypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\n            selectedRecord[\"nregsubtypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nregsubtypecode,\n              label: response.data[\"SelectedReportDesigner\"].sregsubtypename\n            };\n          } else {\n            selectedRecord[\"nregsubtypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\n            selectedRecord[\"napproveconfversioncode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].napproveconfversioncode,\n              label: response.data[\"SelectedReportDesigner\"].sapproveversionname\n            };\n          } else {\n            selectedRecord[\"nregsubtypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nsectioncode !== -1) {\n            selectedRecord[\"nsectioncode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nsectioncode,\n              label: response.data[\"SelectedReportDesigner\"].ssectionname\n            };\n          } else {\n            selectedRecord[\"nsectioncode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\n            selectedRecord[\"ncoareporttypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\n              label: response.data[\"SelectedReportDesigner\"].scoareporttypename\n            };\n          } else {\n            selectedRecord[\"ncoareporttypecode\"] = undefined;\n          }\n\n          if (response.data[\"SelectedReportDesigner\"].nreporttemplatecode !== -1) {\n            selectedRecord[\"nreporttemplatecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nreporttemplatecode,\n              label: response.data[\"SelectedReportDesigner\"].sreporttemplatename\n            };\n          }\n\n          if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE) {\n            selectedRecord[\"nreportdecisiontypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].nreportdecisiontypecode,\n              label: response.data[\"SelectedReportDesigner\"].sdecisiontypename\n            };\n          }\n        } else if (selectedRecord.nreporttypecode === reportTypeEnum.MIS) {\n          selectedRecord[\"nreportmodulecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nreportmodulecode,\n            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\n          };\n          selectedRecord[\"nreportmodule\"] = {\n            value: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\n            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\n          };\n        } else if (selectedRecord.nreporttypecode === reportTypeEnum.SCREENWISE) {\n          selectedRecord[\"ncontrolcode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].ncontrolcode,\n            label: response.data[\"SelectedReportDesigner\"].scontrolids\n          };\n          selectedRecord[\"nformcode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].nformcode,\n            label: response.data[\"SelectedReportDesigner\"].sdisplayname\n          };\n        }\n\n        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE || selectedRecord.nreporttypecode === reportTypeEnum.BATCH) {\n          if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\n            selectedRecord[\"ncoareporttypecode\"] = {\n              value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\n              label: response.data[\"SelectedReportDesigner\"].scoareporttypename\n            };\n          } else {\n            selectedRecord[\"ncoareporttypecode\"] = undefined;\n          }\n\n          selectedRecord[\"ncertificatetypecode\"] = {\n            value: response.data[\"SelectedReportDesigner\"].ncertificatetypecode,\n            label: response.data[\"SelectedReportDesigner\"].scertificatetype\n          };\n          selectedRecord[\"sbatchtypename\"] = response.data[\"SelectedReportDesigner\"].sbatchtypename;\n        }\n\n        selectedRecord[\"ntransactionstatus\"] = response.data[\"SelectedReportDesigner\"].ntransactionstatus;\n        selectedRecord[\"nreporttypecode\"] = {\n          item: response.data[\"SelectedReportDesigner\"],\n          value: response.data[\"SelectedReportDesigner\"].nreporttypecode,\n          label: response.data[\"SelectedReportDesigner\"].sreportdisplayname\n        };\n      }\n\n      respObject = { ...respObject,\n        reportSubTypeList,\n        //:response.data[\"COAReportType\"]  || [], \n        sampleTypeList,\n        regTypeList,\n        //:response.data[\"RegistrationType\"]  || [],                                                               \n        regSubTypeList,\n        //:response.data[\"RegistrationSubType\"]  || [],  \n        sectionList,\n        ApproveConfigList,\n        //:response.data[\"SectionList\"] || [],   \n        certificateTypeList,\n        reportDecisionTypeList: decisionTypeList,\n        controlScreen: controlScreenTypeList,\n        reportTemplateList //masterData:{...inputParam.masterData, SelectedFilterReportType:response.data[\"SelectedReportType\"] }                                                             \n\n      };\n\n      if (inputParam.operation === \"create\") {\n        selectedRecord[\"nreporttypecode\"] = {\n          item: response.data[\"SelectedReportType\"],\n          label: response.data[\"SelectedReportType\"].sdisplayname,\n          value: response.data[\"SelectedReportType\"].nreporttypecode\n        };\n\n        if (selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE && selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES) {\n          // selectedRecord[\"nregtypecode\"] = getComboLabelValue(response.data[\"SelectedRegType\"],\n          //     response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\n          selectedRecord[\"nsampletypecode\"] = getComboLabelValue(response.data[\"SelectedSampleType\"], response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\");\n\n          if (selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES) {\n            selectedRecord[\"nsectioncode\"] = sectionMap.get(\"DefaultValue\");\n          }\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          reportTypeList,\n          //:response.data[\"ReportType\"] || [], \n          reportModuleList,\n          //:response.data[\"ReportModule\"] || [] ,\n          ...respObject,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else{       \n    //     toast.warn(intl.formatMessage({id: \"IDS_CANNOTUPDATEAPPROVEDREPORT\"}));\n    // }\n  };\n}\nexport function getReportDetailComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.operation === \"create\" || inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.DRAFT) {\n      if (inputParam.masterData.SelectedReportMaster !== null) {\n        dispatch(initRequest(true));\n        let nreportdetailcode = null;\n\n        if (inputParam.operation === \"update\") {\n          nreportdetailcode = inputParam.detailtoedit[inputParam.primaryKeyName];\n        }\n\n        return rsapi.post(\"reportconfig/getReportDetailComboData\", {\n          nreportdetailcode,\n          reportmaster: inputParam.masterData.SelectedReportMaster,\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          // const reportType = response.data[\"SelectedReportType\"];\n          // const reportSubTypeMap  = constructOptionList(response.data[\"COAReportType\"] ||[], \"ncoareporttypecode\",\n          //                             \"scoareporttypename\" , undefined, undefined, true);    \n          // const sectionMap  = constructOptionList(response.data[\"SectionList\"] ||[], \"nsectioncode\",\n          //                             \"ssectionname\", undefined, undefined, true);\n          // const decisionTypeMap  = constructOptionList(response.data[\"ReportDecisionType\"] ||[], \"nreportdecisiontypecode\",\n          //                             \"sdecisiontypename\" , undefined, undefined, true);   \n          // const certificateTypeMap  = constructOptionList(response.data[\"CertificateType\"] ||[], \"ncertificatetypecode\",\n          //                             \"scertificatetype\" , undefined, undefined, true);\n          // const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n          // const  sectionList = sectionMap.get(\"OptionList\"); \n          // const  decisionTypeList = decisionTypeMap.get(\"OptionList\");\n          // const  certificateTypeList = certificateTypeMap.get(\"OptionList\");  \n          let selectedRecord = {};\n          let respObject = {};\n\n          if (inputParam.operation === \"update\") {\n            selectedRecord = response.data[\"SelectedReportDetail\"];\n          }\n\n          selectedRecord[\"ntransactionstatus\"] = transactionStatus.DRAFT; //    console.log(\"selected in action:\", selectedRecord);\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              operation: inputParam.operation,\n              screenName: inputParam.screenName,\n              selectedRecord,\n              openModal: true,\n              ncontrolCode: inputParam.ncontrolcode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_REPORTNOTFOUND\"\n        }));\n      }\n    } else if (inputParam.operation === \"create\" || inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.APPROVED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANNOTEDITAPPROVEDREPORT\"\n      }));\n    } else if (inputParam.operation === \"create\" || inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANNOTEDITRETIREDREPORT\"\n      }));\n    }\n  };\n}\nexport function getSelectedReportMasterDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportDesigner\", {\n      nreportcode: parseInt(inputParam.nreportcode),\n      nreporttypecode: inputParam.masterData && inputParam.masterData.SelectedFilterReportType ? inputParam.masterData.SelectedFilterReportType.nreporttypecode.toString() : null,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedReportDetail(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportDetail\", {\n      nreportdetailcode: parseInt(inputParam.nreportdetailcode),\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getConfigReportComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\n      if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        dispatch(initRequest(true));\n        return rsapi.post(\"reportconfig/getReportAddDesignComboData\", {\n          nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          const parameterMap = constructOptionList(response.data[\"ReportParameter\"] || [], \"nreportparametercode\", \"sreportparametername\", undefined, undefined, true);\n          const reportParameterList = parameterMap.get(\"OptionList\");\n          const designComponentMap = constructOptionList(response.data[\"DesignComponents\"] || [], \"ndesigncomponentcode\", \"sdesigncomponentname\", undefined, undefined, true);\n          const designComponentList = designComponentMap.get(\"OptionList\");\n          const sqlQueryMap = constructOptionList(response.data[\"SQLQuery\"] || [], \"nsqlquerycode\", \"ssqlqueryname\", undefined, undefined, true);\n          const sqlQueryList = sqlQueryMap.get(\"OptionList\");\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              reportParameterList,\n              //:response.data[\"ReportParameter\"] || [], \n              designComponentList,\n              //:response.data[\"DesignComponents\"] || [],\n              sqlQueryList,\n              //:response.data[\"SQLQuery\"] || [], \n              operation: inputParam.operation,\n              screenName: inputParam.screenName,\n              //selectedRecord:{nmandatory:transactionStatus.YES}, \n              selectedRecord: {},\n              openModal: true,\n              ncontrolCode: inputParam.ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTCONFIGUREAPPROVEDREPORT\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANCONFIGUREMISREPORT\"\n      }));\n    }\n  };\n}\nexport function getParameterMappingComboService(inputParam) {\n  return function (dispatch) {\n    if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\n      if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n        dispatch(initRequest(true));\n        return rsapi.post(\"reportconfig/getReportParameterMappingComboData\", {\n          nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\n          userinfo: inputParam.userInfo\n        }).then(response => {\n          if (response.data[\"ChildComponentList\"].length > 0) {\n            const parentComponentMap = constructOptionList(response.data[\"ParentComponentList\"] || [], \"nreportdesigncode\", \"sdisplayname\", undefined, undefined, true);\n            const parentComponentList = parentComponentMap.get(\"OptionList\");\n            const childComponentMap = constructOptionList(response.data[\"ChildComponentList\"] || [], \"nreportdesigncode\", \"sdisplayname\", undefined, undefined, true);\n            const childComponentList = childComponentMap.get(\"OptionList\");\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                parentComponentList,\n                //:response.data[\"ParentComponenList\"] || [],\n                childComponentList,\n                //:response.data[\"ChildComponentList\"] || [], \n                operation: inputParam.operation,\n                screenName: inputParam.screenName,\n                selectedRecord: {},\n                openModal: true,\n                ncontrolCode: inputParam.ncontrolCode,\n                loading: false\n              }\n            });\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOPARAMETERSTOMAP\"\n            }));\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTMAPAPPROVEDREPORT\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_CANMAPMISREPORT\"\n      }));\n    }\n  };\n}\nexport function viewReportDetail(reportmaster, userInfo, masterData) {\n  return function (dispatch) {\n    if (masterData[\"ViewReportMaster\"] !== undefined && Object.keys(masterData[\"ViewReportMaster\"]).length !== 0) {\n      dispatch(initRequest(true));\n      return rsapi.post(\"reportview/viewReport\", {\n        reportmaster,\n        userinfo: userInfo\n      }).then(response => {\n        // console.log(\"report action:\", response);\n        masterData = { ...masterData,\n          ...response.data\n        };\n\n        if (response.data[\"ViewReportDesignConfig\"] !== undefined) {\n          masterData[\"ReportPDFFile\"] = undefined;\n        } // else{\n        //     document.getElementById(\"download_data\").setAttribute(\"href\", masterData[\"ReportPDFFile\"]);\n        //     document.getElementById(\"download_data\").click();\n        // }\n\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_REPORTNOTFOUND\"\n      }));\n    }\n  };\n} // export function getActionMappingComboService(inputParam) {\n//     return function (dispatch) {   \n//     if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\n//             dispatch(initRequest(true));\n//             return rsapi.post(\"reportconfig/getActionMappingComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\n//                                         userinfo:inputParam.userInfo})\n//         .then(response=>{ \n//             if (response.data[\"ActionMappingChild\"].length > 0)\n//             {     \n//                     dispatch({type: DEFAULT_RETURN, payload:{actionMappingParentList:response.data[\"ActionMappingParent\"] || [],\n//                                                             actionMappingChildList:response.data[\"ActionMappingChild\"] || [], \n//                                                             operation:inputParam.operation, \n//                                                             screenName:inputParam.screenName,   \n//                                                             selectedRecord:{}, \n//                                                             openModal : true,\n//                                                             ncontrolCode:inputParam.ncontrolCode,\n//                                                             loading:false\n//                                                             }}); \n//             }\n//             else{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//                 toast.warn(intl.formatMessage({id:\"IDS_NOACTIONSTOMAP\"}))\n//             }\n//         })\n//         .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//             if (error.response.status === 500){\n//                 toast.error(error.message);\n//             } \n//             else{               \n//                 toast.warn(error.response.data);\n//             }  \n//         })\n//     }\n//     else{\n//         toast.warn(intl.formatMessage({id:\"IDS_CANNOTACTIONMAPAPPROVEDREPORT\"}))\n//     }\n// }}\n\nexport function getReportViewChildDataList(inputParam) {\n  return function (dispatch) {\n    // dispatch(initRequest(true));\n    return rsapi.post(\"reportview/getChildDataList\", { ...inputParam[\"inputData\"]\n    }).then(response => {\n      const controlList = inputParam.viewReportDesignConfigList;\n      const selectedRecord = inputParam.selectedRecord;\n      Object.keys(response.data).map(displayName => {\n        const index = controlList.findIndex(item => displayName === item.sdisplayname);\n        const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember, controlList[index].sdisplaymember, undefined, undefined, true);\n        const comboList = comboMap.get(\"OptionList\"); //selectedRecord[controlList[index].svaluemember] = undefined;\n\n        selectedRecord[controlList[index].sreportparametername] = undefined;\n        return controlList[index][\"dataList\"] = comboList; //response.data[displayName]\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          viewReportDesignConfigList: controlList,\n          loading: false,\n          inputFieldData: inputParam.inputData.inputfielddata,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReportDetailWithParameters(viewReportParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportview/viewReportWithParameters\", { ...viewReportParam\n    }).then(response => {\n      const masterData = { ...viewReportParam.masterData,\n        ...response.data,\n        ReportPDFFile: response.data[\"ReportPDFFile\"],\n        SelectedReportDetails: response.data[\"SelectedReportDetails\"],\n        ReportPDFPath: response.data[\"ReportPDFPath\"],\n        ViewReportDesignConfig: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false //openModal:false\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validationReportparameter(validationReportParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportValidation\", { ...validationReportParam\n    }).then(response => {\n      const reportType = constructOptionList(response.data || [], \"ntranscode\", \"stransstatus\", undefined, undefined, false);\n      const reportstatus = reportType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          reportTypeList: reportstatus,\n          screenName: \"IDS_REPORTVALIDATION\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function controlBasedReportparametre(validationReportParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"controlbasedreport/controlBasedReportParameter\", { ...validationReportParam\n    }).then(response => {\n      const reportType = constructOptionList(response.data.reportTemplateList || [], \"ncontrolbasedparameter\", \"scontrolbasedparameter\", undefined, undefined, false);\n      const reportTypecopy = constructOptionList(response.data.reportTemplateList || [], \"ncontrolbasedparameter\", \"scontrolbasedparameter\", undefined, undefined, false);\n      const reportstatus = reportType.get(\"OptionList\");\n      const reportstatuscopy = reportTypecopy.get(\"OptionList\");\n      let reportTypeListparameter = {};\n\n      if (response.data.ParameterMappingDatagrid.length !== 0) {\n        //reportTypeListparameter=reportstatus.splice(1,response.data.ParameterMappingDatagrid.map(function (el) { return el.nreportparametercode; }))\n        reportTypeListparameter = reportstatus.filter(item => response.data.ParameterMappingDatagrid.every(el => el.nreportparametercode != item.value));\n      } else {\n        reportTypeListparameter = reportstatus;\n      } // const reportTypeListparameter=reportstatus.splice(1,response.data.ParameterMappingDatagrid.map(function (el) { return el.nreportparametercode; }))\n\n\n      const reportstatus1 = response.data.ParameterMappingDatagrid;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          reportTypeListparameter: reportTypeListparameter,\n          reportTypeListparametercopy: reportstatuscopy,\n          reportTypeListName: [],\n          ParameterMappingDatagrid: reportstatus1,\n          screenName: \"IDS_REPORTPARAMETERMAPPING\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function controlBasedReportparametretable(nformcode, nreportdetailcode, userInfo, sdatatype) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"controlbasedreport/controlBasedReportparametretable\", {\n      \"nformcode\": nformcode,\n      \"nreportdetailcode\": nreportdetailcode,\n      \"sdatatype\": sdatatype,\n      userinfo: userInfo\n    }).then(response => {\n      const reportType = constructOptionList(response.data || [], \"ncolumnfield\", \"stablecolumn\", undefined, undefined, false);\n      const reportstatus = reportType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          reportTypeListName: reportstatus,\n          screenName: \"IDS_REPORTPARAMETERMAPPING\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function controlBasedReportparametretablecolumn(nformcode,nreportdetailcode,userInfo,sdatatype) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"controlbasedreport/controlBasedReportparametretablecolumn\",\n//          {\"nformcode\":nformcode,\"nreportdetailcode\": nreportdetailcode,\"reportdatatype\":sdatatype,userinfo: userInfo})\n//             .then(response => {\n//                 const reportType = constructOptionList(response.data || [], \"ncolumnfield\",\n//                 \"stablecolumn\", undefined, undefined, false);\n//                 const reportstatus = reportType.get(\"OptionList\");\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false, openModal:true,\n//                         reportTypeListColumn:reportstatus,\n//                         screenName:\"IDS_REPORTPARAMETERMAPPING\"\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function downloadControlBasedReportparametreInsert(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"controlbasedreport/downloadControlBasedReportparametreInsert\", {\n      inputParam\n    }).then(response => {\n      const reportType = constructOptionList(response.data || [], \"nquerybuildertablecodecolumn\", \"stablecolumn\", undefined, undefined, false);\n      const reportstatus = reportType.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          reportTypeListColumn: reportstatus,\n          screenName: \"IDS_REPORTPARAMETERMAPPING\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function viewReportDetailWithParametersReports(viewReportParam,inputParam) {\n//     return function (dispatch) {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"reportview/viewReportWithParameters\", { ...viewReportParam })\n//             .then(response => {\n//                 const masterData = {\n//                     ...viewReportParam.masterData, ...response.data,\n//                     ReportPDFFile: response.data[\"ReportPDFFile\"],\n//                     SelectedReportDetails: response.data[\"SelectedReportDetails\"],\n//                     ReportPDFPath: response.data[\"ReportPDFPath\"],\n//                     ViewReportDesignConfig: undefined\n//                 };\n//                 if(masterData.sourceparameter!=undefined\n//                     && masterData.sourceparameter!=\"\")//&&\n//                    //this.props.Login.masterData.sourceparameter !== previousProps.Login.masterData.sourceparameter )\n//                   {\n//                     let mrtfilePath = reportUrl()\n//                     + \"?name=\" + viewReportParam.userinfo.sreportingtoolfilename\n//                     + \"&slanguagetypecode=\" + viewReportParam.userinfo.sreportlanguagecode\n//                     + \"&foldername=\" + masterData.SelectedReportDetails.sreportname //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\n//                     + \"&filename=\" + masterData.SelectedReportDetails.ssystemfilename //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\n//                     + \"&sconnectionstring=\" + viewReportParam.userinfo.sconnectionString\n//                     + \"&sreportlink=\" + viewReportParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \n//                     + \"&smrttemplatelink=\" + viewReportParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\n//                     + \"&sourceparameter=\" + encodeURIComponent(masterData.sourceparameter);\n//                      window.open(mrtfilePath);\n//                      //this.setState({mrtfileflag:false});\n//                      //this.props.Login.masterData.sourceparameter=\"\";\n//                       }\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         masterData, loading: false //openModal:false\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function viewReportDetailWithParametersReports(viewReportParam, inputParam) {\n  if (viewReportParam.sourceparameter != undefined && viewReportParam.sourceparameter != \"\") {\n    let mrtfilePath = reportUrl() + \"?name=\" + inputParam.userinfo.sreportingtoolfilename //en-xml\n    + \"&slanguagetypecode=\" + inputParam.userinfo.sreportlanguagecode //en-us\n    + \"&foldername=\" + viewReportParam.SelectedReportDetails.sreportname //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\n    + \"&filename=\" + viewReportParam.SelectedReportDetails.ssystemfilename //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\n    + \"&sconnectionstring=\" + inputParam.userinfo.sconnectionString + \"&sreportlink=\" + inputParam.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \n    + \"&smrttemplatelink=\" + inputParam.smrttemplatelink //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\n    + \"&sourceparameter=\" + encodeURIComponent(viewReportParam.sourceparameter);\n    window.open(mrtfilePath); //return(viewReportParam.statusCodeValue);\n  }\n}\nexport function getReportsByModule(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportview/getReportView\", {\n      nreportmodulecode: inputParam.nreportmodulecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ViewReportDesignConfig: []\n      };\n      masterData = { ...masterData,\n        ...response.data\n      }; // const  reportModuleMap  = constructOptionList(masterData.ViewReportModuleList ||[], \"nreportmodulecode\",\n      //                          \"smoduledisplayname\" , undefined, undefined, true);\n      // const  reportModuleList  = reportModuleMap.get(\"OptionList\");\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          //viewReportModuleList:reportModuleList,\n          operation: null,\n          modalName: undefined,\n          loading: false,\n          selectedRecord: inputParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getControlButton(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getControlButton\", {\n      nformcode: inputParam.ControlScreen.nformcode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const controlButtonMap = constructOptionList(response.data || [], \"ncontrolcode\", \"scontrolids\", undefined, undefined, true);\n      const controlButtonList = controlButtonMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          controlButton: controlButtonList,\n          //: response.data,                                            \n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregsubtypecode: undefined //nregsubtypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportRegSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportRegistrationSubType\", {\n      nregtypecode: inputParam.registrationType.nregtypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const regSubTypeMap = constructOptionList(response.data || [], \"nregsubtypecode\", \"sregsubtypename\", undefined, undefined, true);\n      const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          regSubTypeList,\n          //: response.data,                                            \n          loading: false,\n          ApproveConfigList: [],\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregsubtypecode: undefined,\n            napproveconfversioncode: undefined //nregsubtypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportSubType\", {\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      // const reportSubTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, true);\n      // const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\n      const certificateTypeMap = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateTypeMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // reportSubTypeList,\n          certificateTypeList,\n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\" // ncoareporttypecode:{label:\"Please Select...\", value:-4}\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportSampletype(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportSampleType\", {\n      nsampletypecode: inputParam.nsampletypecode,\n      nreporttypecode: inputParam.reportType.nreporttypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\n      //                          \"sregtypename\" , undefined, undefined, true);   \n      // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\n      // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\n      // // \"sregsubtypename\" , undefined, undefined, true);   \n      // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\n      const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regTypeList = regTypeMap.get(\"OptionList\"); // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\n      //     \"sregsubtypename\", undefined, undefined, true);\n      // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n\n      const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\n      const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateType.get(\"OptionList\");\n      const nsampletypecode = getComboLabelValue(response.data[\"SelectedSampleType\"], response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sampleTypeList,\n          regTypeList,\n          //  regSubTypeList,\n          reportSubTypeList,\n          loading: false,\n          certificateTypeList,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nsampletypecode: nsampletypecode,\n            nregtypecode: undefined,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\"\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getregtype(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getRegistrationtypeForSample\", {\n      nsampletypecode: inputParam.sampleType.nsampletypecode,\n      nregtypecode: inputParam.nregtypecode,\n      //nreporttypecode: inputParam.selectedRecord.nreporttypecode.value,\n      nreporttypecode: inputParam.selectedRecord.nreporttypecode.value == reportTypeEnum.COAPREVIEW || inputParam.selectedRecord.nreporttypecode.value == reportTypeEnum.COAPRELIMINARY ? reportTypeEnum.COA : inputParam.selectedRecord.nreporttypecode.value,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\n      //                          \"sregtypename\" , undefined, undefined, true);   \n      // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\n      // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\n      // // \"sregsubtypename\" , undefined, undefined, true);   \n      // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\n      // const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\n      // \"ssampletypename\", undefined, undefined, true);\n      // const sampleTypeList = sampleTypeMap.get(\"OptionList\");\n      const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\", \"sregtypename\", undefined, undefined, true);\n      const regTypeList = regTypeMap.get(\"OptionList\"); // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\n      //     \"sregsubtypename\", undefined, undefined, true);\n      // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\n\n      const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\", \"scoareporttypename\", undefined, undefined, true);\n      const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\n      const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\", \"scertificatetype\", undefined, undefined, true);\n      const certificateTypeList = certificateType.get(\"OptionList\"); //    const nregtypecode = getComboLabelValue(response.data[\"SelectedRegType\"],\n      //      response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //   sampleTypeList,\n          regTypeList,\n          regSubTypeList: [],\n          ApproveConfigList: [],\n          reportSubTypeList,\n          loading: false,\n          certificateTypeList,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nregtypecode: undefined,\n            nregsubtypecode: undefined,\n            ncoareporttypecode: undefined,\n            ncertificatetypecode: \"\",\n            napproveconfversioncode: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportRegSubTypeApproveConfigVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportRegSubTypeApproveConfigVersion\", {\n      nregtypecode: inputParam.selectedRecord.nregtypecode.value,\n      nregsubtypecode: inputParam.registrationsubType.nregsubtypecode,\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const ApproveConfigVersionMap = constructOptionList(response.data || [], \"napproveconfversioncode\", \"sversionname\", undefined, undefined, false);\n      const ApproveConfigList = ApproveConfigVersionMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ApproveConfigList,\n          //: response.data,                                            \n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            napproveconfversioncode: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportTemplate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"reportconfig/getReportTemplate\", {\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      const reportTemplateMap = constructOptionList(response.data || [], \"nreporttemplatecode\", \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", true);\n      const reportTemplateList = reportTemplateMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          reportTemplateList,\n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            nreporttemplatecode: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReportDesignerAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","getComboLabelValue","constructOptionList","toast","initRequest","intl","transactionStatus","reportTypeEnum","fileViewUrl","reportUrl","getReportMasterComboService","inputParam","dispatch","nreportcode","operation","mastertoedit","primaryKeyName","post","userinfo","userInfo","filterreporttype","filterReportType","then","response","reportTypeMap","data","undefined","reportModuleMap","reportSubTypeMap","sampleTypeMap","regTypeMap","regSubTypeMap","approvaConfigVersionMap","sectionMap","decisionTypeMap","certificateTypeMap","controlScreenTypeMap","reportTemplateMap","reportTypeList","get","reportModuleList","reportSubTypeList","regTypeList","sampleTypeList","regSubTypeList","sectionList","decisionTypeList","certificateTypeList","controlScreenTypeList","ApproveConfigList","reportTemplateList","selectedRecord","ntransactionstatus","ACTIVE","respObject","DRAFT","status","APPROVED","JSON","parse","stringify","nreporttypecode","SAMPLE","COA","COAPREVIEW","COAPRELIMINARY","value","nsampletypecode","label","ssampletypename","nregtypecode","sregtypename","nregsubtypecode","sregsubtypename","napproveconfversioncode","sapproveversionname","nsectioncode","ssectionname","ncoareporttypecode","scoareporttypename","nreporttemplatecode","sreporttemplatename","nreportdecisiontypecode","sdecisiontypename","MIS","nreportmodulecode","smoduledisplayname","SCREENWISE","ncontrolcode","scontrolids","nformcode","sdisplayname","BATCH","ncertificatetypecode","scertificatetype","sbatchtypename","item","sreportdisplayname","reportDecisionTypeList","controlScreen","isneedregtype","YES","isneedsection","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","message","warn","getReportDetailComboService","detailtoedit","masterData","SelectedReportMaster","nreportdetailcode","reportmaster","formatMessage","id","RETIRED","getSelectedReportMasterDetail","parseInt","SelectedFilterReportType","toString","modalName","getSelectedReportDetail","getConfigReportComboService","reportMaster","reportDetail","parameterMap","reportParameterList","designComponentMap","designComponentList","sqlQueryMap","sqlQueryList","getParameterMappingComboService","length","parentComponentMap","parentComponentList","childComponentMap","childComponentList","viewReportDetail","Object","keys","getReportViewChildDataList","controlList","viewReportDesignConfigList","map","displayName","index","findIndex","comboMap","svaluemember","sdisplaymember","comboList","sreportparametername","inputFieldData","inputData","inputfielddata","viewReportDetailWithParameters","viewReportParam","ReportPDFFile","SelectedReportDetails","ReportPDFPath","ViewReportDesignConfig","validationReportparameter","validationReportParam","reportType","reportstatus","controlBasedReportparametre","reportTypecopy","reportstatuscopy","reportTypeListparameter","ParameterMappingDatagrid","filter","every","el","nreportparametercode","reportstatus1","reportTypeListparametercopy","reportTypeListName","controlBasedReportparametretable","sdatatype","downloadControlBasedReportparametreInsert","reportTypeListColumn","viewReportDetailWithParametersReports","sourceparameter","mrtfilePath","sreportingtoolfilename","sreportlanguagecode","sreportname","ssystemfilename","sconnectionString","sreportlink","smrttemplatelink","encodeURIComponent","window","open","getReportsByModule","getControlButton","ControlScreen","controlButtonMap","controlButtonList","controlButton","getReportRegSubType","registrationType","getReportSubType","CertificateType","getReportSampletype","coaReportTypeMap","COAReportType","certificateType","getregtype","sampleType","getReportRegSubTypeApproveConfigVersion","registrationsubType","ApproveConfigVersionMap","getReportTemplate"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, getComboLabelValue, constructOptionList } from '../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus, reportTypeEnum } from '../components/Enumeration';\r\nimport {fileViewUrl, reportUrl} from '../rsapi'\r\n\r\n\r\nexport function getReportMasterComboService(inputParam) {\r\n    return function (dispatch) {\r\n        // if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus !== transactionStatus.APPROVED))\r\n        // {      \r\n        dispatch(initRequest(true));\r\n        let nreportcode = null;\r\n        if (inputParam.operation === \"update\") {\r\n            nreportcode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        }\r\n        return rsapi.post(\"reportconfig/getReportMasterComboData\", {\r\n            nreportcode,\r\n            userinfo: inputParam.userInfo,\r\n            filterreporttype: inputParam.filterReportType\r\n        })\r\n            .then(response => {\r\n\r\n                const reportTypeMap = constructOptionList(response.data[\"ReportType\"] || [], \"nreporttypecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const reportModuleMap = constructOptionList(response.data[\"ReportModule\"] || [], \"nreportmodulecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const reportSubTypeMap = constructOptionList(response.data[\"COAReportType\"] || [], \"ncoareporttypecode\",\r\n                    \"scoareporttypename\", undefined, undefined, true);\r\n                const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", undefined, undefined, true);\r\n                const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, true);                \r\n                const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", undefined, undefined, true);\r\n                 const approvaConfigVersionMap = constructOptionList(response.data[\"ApprovalConfigVersion\"] || [], \"napproveconfversioncode\",\r\n                    \"sversionname\", undefined, undefined, false);\r\n                const sectionMap = constructOptionList(response.data[\"SectionList\"] || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, true);\r\n                const decisionTypeMap = constructOptionList(response.data[\"ReportDecisionType\"] || [], \"nreportdecisiontypecode\",\r\n                    \"sdecisiontypename\", undefined, undefined, true);\r\n                const certificateTypeMap = constructOptionList(response.data[\"CertificateType\"] || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const controlScreenTypeMap = constructOptionList(response.data[\"ControlScreen\"] || [], \"nformcode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n                const reportTemplateMap = constructOptionList(response.data[\"ReportTemplate\"] || [], \"nreporttemplatecode\",\r\n                    \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", true);\r\n\r\n                const reportTypeList = reportTypeMap.get(\"OptionList\");\r\n                const reportModuleList = reportModuleMap.get(\"OptionList\");\r\n                const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n                const regTypeList = regTypeMap.get(\"OptionList\");\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n                const sectionList = sectionMap.get(\"OptionList\");\r\n                const decisionTypeList = decisionTypeMap.get(\"OptionList\");\r\n                const certificateTypeList = certificateTypeMap.get(\"OptionList\");\r\n                const controlScreenTypeList = controlScreenTypeMap.get(\"OptionList\");\r\n               const  ApproveConfigList=approvaConfigVersionMap.get(\"OptionList\");\r\n                const reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n\r\n                let selectedRecord = { ntransactionstatus: transactionStatus.ACTIVE };\r\n                let respObject = { \"reportVersionStatus\": transactionStatus.DRAFT };\r\n\r\n                if (inputParam.operation === \"update\") {\r\n                    if (response.status === 202) {\r\n                        respObject[\"reportVersionStatus\"] = transactionStatus.APPROVED;\r\n                        respObject[\"ApprovedReportMaster\"] = response.data[\"SelectedReportDesigner\"];\r\n                    }\r\n                    selectedRecord = JSON.parse(JSON.stringify(response.data[\"SelectedReportDesigner\"]));\r\n                    if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE\r\n                        || selectedRecord.nreporttypecode === reportTypeEnum.COA || selectedRecord.nreporttypecode === reportTypeEnum.COAPREVIEW\r\n                        || selectedRecord.nreporttypecode === reportTypeEnum.COAPRELIMINARY) {\r\n                            selectedRecord[\"nsampletypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nsampletypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].ssampletypename\r\n                            };\r\n                        // selectedRecord[\"nregtypecode\"] = {\r\n                        //     value: response.data[\"SelectedReportDesigner\"].nregtypecode,\r\n                        //     label: response.data[\"SelectedReportDesigner\"].sregtypename\r\n                        // };\r\n                        if (response.data[\"SelectedReportDesigner\"].nregtypecode !== -1) {\r\n                            selectedRecord[\"nregtypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nregtypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sregtypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nregtypecode\"] = undefined;\r\n                        }\r\n                        if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\r\n                            selectedRecord[\"nregsubtypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nregsubtypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sregsubtypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nregsubtypecode\"] = undefined;\r\n                        }\r\n\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].nregsubtypecode !== -1) {\r\n                            selectedRecord[\"napproveconfversioncode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].napproveconfversioncode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sapproveversionname\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nregsubtypecode\"] = undefined;\r\n                        }\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].nsectioncode !== -1) {\r\n                            selectedRecord[\"nsectioncode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nsectioncode,\r\n                                label: response.data[\"SelectedReportDesigner\"].ssectionname\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"nsectioncode\"] = undefined;\r\n                        }\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\r\n                            selectedRecord[\"ncoareporttypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].scoareporttypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"ncoareporttypecode\"] = undefined;\r\n                        }\r\n\r\n                        if (response.data[\"SelectedReportDesigner\"].nreporttemplatecode !== -1) {\r\n                            selectedRecord[\"nreporttemplatecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nreporttemplatecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sreporttemplatename\r\n                            };\r\n                        }\r\n\r\n                        if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE) {\r\n                            selectedRecord[\"nreportdecisiontypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].nreportdecisiontypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].sdecisiontypename\r\n                            };\r\n                        }\r\n\r\n                    }\r\n                    else if (selectedRecord.nreporttypecode === reportTypeEnum.MIS) {\r\n                        selectedRecord[\"nreportmodulecode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].nreportmodulecode,\r\n                            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\r\n\r\n                        };\r\n\r\n                        selectedRecord[\"nreportmodule\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].smoduledisplayname,\r\n                            label: response.data[\"SelectedReportDesigner\"].smoduledisplayname\r\n                        }\r\n\r\n                    }\r\n\r\n                    else if (selectedRecord.nreporttypecode === reportTypeEnum.SCREENWISE) {\r\n                        selectedRecord[\"ncontrolcode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].ncontrolcode,\r\n                            label: response.data[\"SelectedReportDesigner\"].scontrolids\r\n                        };\r\n\r\n                        selectedRecord[\"nformcode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].nformcode,\r\n                            label: response.data[\"SelectedReportDesigner\"].sdisplayname\r\n                        };\r\n                    }\r\n\r\n                    if (selectedRecord.nreporttypecode === reportTypeEnum.SAMPLE\r\n                        || selectedRecord.nreporttypecode === reportTypeEnum.BATCH) {\r\n                        if (response.data[\"SelectedReportDesigner\"].ncoareporttypecode !== -1) {\r\n                            selectedRecord[\"ncoareporttypecode\"] = {\r\n                                value: response.data[\"SelectedReportDesigner\"].ncoareporttypecode,\r\n                                label: response.data[\"SelectedReportDesigner\"].scoareporttypename\r\n                            };\r\n                        }\r\n                        else {\r\n                            selectedRecord[\"ncoareporttypecode\"] = undefined;\r\n                        }\r\n                        selectedRecord[\"ncertificatetypecode\"] = {\r\n                            value: response.data[\"SelectedReportDesigner\"].ncertificatetypecode,\r\n                            label: response.data[\"SelectedReportDesigner\"].scertificatetype\r\n                        };\r\n\r\n                        selectedRecord[\"sbatchtypename\"] = response.data[\"SelectedReportDesigner\"].sbatchtypename\r\n                    }\r\n\r\n                    selectedRecord[\"ntransactionstatus\"] = response.data[\"SelectedReportDesigner\"].ntransactionstatus;\r\n\r\n                    selectedRecord[\"nreporttypecode\"] = {\r\n                        item: response.data[\"SelectedReportDesigner\"],\r\n                        value: response.data[\"SelectedReportDesigner\"].nreporttypecode,\r\n                        label: response.data[\"SelectedReportDesigner\"].sreportdisplayname\r\n                    };\r\n\r\n                }\r\n\r\n                respObject = {\r\n                    ...respObject, reportSubTypeList,//:response.data[\"COAReportType\"]  || [], \r\n                    sampleTypeList,\r\n                    regTypeList,//:response.data[\"RegistrationType\"]  || [],                                                               \r\n                    regSubTypeList,//:response.data[\"RegistrationSubType\"]  || [],  \r\n                    sectionList,\r\n                    ApproveConfigList,//:response.data[\"SectionList\"] || [],   \r\n                    certificateTypeList,\r\n                    reportDecisionTypeList: decisionTypeList,\r\n                    controlScreen: controlScreenTypeList,\r\n                    reportTemplateList\r\n                    //masterData:{...inputParam.masterData, SelectedFilterReportType:response.data[\"SelectedReportType\"] }                                                             \r\n                };\r\n\r\n                if (inputParam.operation === \"create\") {\r\n                    selectedRecord[\"nreporttypecode\"] = {\r\n                        item: response.data[\"SelectedReportType\"], label: response.data[\"SelectedReportType\"].sdisplayname,\r\n                        value: response.data[\"SelectedReportType\"].nreporttypecode\r\n                    }\r\n\r\n                    if (selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE\r\n                        && selectedRecord[\"nreporttypecode\"]['item'].isneedregtype === transactionStatus.YES) {\r\n                        // selectedRecord[\"nregtypecode\"] = getComboLabelValue(response.data[\"SelectedRegType\"],\r\n                        //     response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\r\n                        selectedRecord[\"nsampletypecode\"] = getComboLabelValue(response.data[\"SelectedSampleType\"],\r\n                            response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\")\r\n\r\n                        if (selectedRecord[\"nreporttypecode\"]['item'].isneedsection === transactionStatus.YES) {\r\n                            selectedRecord[\"nsectioncode\"] = sectionMap.get(\"DefaultValue\");\r\n                        }\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        reportTypeList,//:response.data[\"ReportType\"] || [], \r\n                        reportModuleList,//:response.data[\"ReportModule\"] || [] ,\r\n                        ...respObject,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolCode: inputParam.ncontrolcode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        // }\r\n        // else{       \r\n        //     toast.warn(intl.formatMessage({id: \"IDS_CANNOTUPDATEAPPROVEDREPORT\"}));\r\n        // }\r\n\r\n    }\r\n}\r\n\r\nexport function getReportDetailComboService(inputParam) {\r\n    return function (dispatch) {\r\n        if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.DRAFT)) {\r\n            if (inputParam.masterData.SelectedReportMaster !== null) {\r\n                dispatch(initRequest(true));\r\n                let nreportdetailcode = null;\r\n                if (inputParam.operation === \"update\") {\r\n                    nreportdetailcode = inputParam.detailtoedit[inputParam.primaryKeyName];\r\n                }\r\n                return rsapi.post(\"reportconfig/getReportDetailComboData\", {\r\n                    nreportdetailcode,\r\n                    reportmaster: inputParam.masterData.SelectedReportMaster,\r\n                    userinfo: inputParam.userInfo\r\n                })\r\n                    .then(response => {\r\n\r\n                        // const reportType = response.data[\"SelectedReportType\"];\r\n                        // const reportSubTypeMap  = constructOptionList(response.data[\"COAReportType\"] ||[], \"ncoareporttypecode\",\r\n                        //                             \"scoareporttypename\" , undefined, undefined, true);    \r\n                        // const sectionMap  = constructOptionList(response.data[\"SectionList\"] ||[], \"nsectioncode\",\r\n                        //                             \"ssectionname\", undefined, undefined, true);\r\n\r\n                        // const decisionTypeMap  = constructOptionList(response.data[\"ReportDecisionType\"] ||[], \"nreportdecisiontypecode\",\r\n                        //                             \"sdecisiontypename\" , undefined, undefined, true);   \r\n\r\n                        // const certificateTypeMap  = constructOptionList(response.data[\"CertificateType\"] ||[], \"ncertificatetypecode\",\r\n                        //                             \"scertificatetype\" , undefined, undefined, true);\r\n\r\n                        // const  reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n                        // const  sectionList = sectionMap.get(\"OptionList\"); \r\n                        // const  decisionTypeList = decisionTypeMap.get(\"OptionList\");\r\n                        // const  certificateTypeList = certificateTypeMap.get(\"OptionList\");  \r\n\r\n                        let selectedRecord = {};\r\n                        let respObject = {};\r\n                        if (inputParam.operation === \"update\") {\r\n                            selectedRecord = response.data[\"SelectedReportDetail\"];\r\n\r\n                        }\r\n                        selectedRecord[\"ntransactionstatus\"] = transactionStatus.DRAFT;\r\n\r\n                        //    console.log(\"selected in action:\", selectedRecord);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                ...respObject,\r\n                                operation: inputParam.operation,\r\n                                screenName: inputParam.screenName,\r\n                                selectedRecord,\r\n                                openModal: true,\r\n                                ncontrolCode: inputParam.ncontrolcode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_REPORTNOTFOUND\" }));\r\n            }\r\n        }\r\n        else if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.APPROVED)) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITAPPROVEDREPORT\" }));\r\n        }\r\n        else if (inputParam.operation === \"create\" || (inputParam.operation === \"update\" && inputParam.detailtoedit.ntransactionstatus === transactionStatus.RETIRED)) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITRETIREDREPORT\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getSelectedReportMasterDetail(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportDesigner\", {\r\n            nreportcode: parseInt(inputParam.nreportcode),\r\n            nreporttypecode: inputParam.masterData && inputParam.masterData.SelectedFilterReportType ? inputParam.masterData.SelectedFilterReportType.nreporttypecode.toString() : null,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const masterData = { ...inputParam.masterData, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSelectedReportDetail(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportDetail\", {\r\n            nreportdetailcode: parseInt(inputParam.nreportdetailcode),\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const masterData = { ...inputParam.masterData, ...response.data };\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, operation: null, modalName: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getConfigReportComboService(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\r\n            if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n                dispatch(initRequest(true));\r\n                return rsapi.post(\"reportconfig/getReportAddDesignComboData\", {\r\n                    nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\r\n                    userinfo: inputParam.userInfo\r\n                })\r\n                    .then(response => {\r\n\r\n                        const parameterMap = constructOptionList(response.data[\"ReportParameter\"] || [], \"nreportparametercode\",\r\n                            \"sreportparametername\", undefined, undefined, true);\r\n\r\n                        const reportParameterList = parameterMap.get(\"OptionList\");\r\n\r\n                        const designComponentMap = constructOptionList(response.data[\"DesignComponents\"] || [], \"ndesigncomponentcode\",\r\n                            \"sdesigncomponentname\", undefined, undefined, true);\r\n\r\n                        const designComponentList = designComponentMap.get(\"OptionList\");\r\n\r\n                        const sqlQueryMap = constructOptionList(response.data[\"SQLQuery\"] || [], \"nsqlquerycode\",\r\n                            \"ssqlqueryname\", undefined, undefined, true);\r\n\r\n                        const sqlQueryList = sqlQueryMap.get(\"OptionList\");\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                reportParameterList,//:response.data[\"ReportParameter\"] || [], \r\n                                designComponentList,//:response.data[\"DesignComponents\"] || [],\r\n                                sqlQueryList,//:response.data[\"SQLQuery\"] || [], \r\n                                operation: inputParam.operation,\r\n                                screenName: inputParam.screenName,\r\n                                //selectedRecord:{nmandatory:transactionStatus.YES}, \r\n                                selectedRecord: {},\r\n                                openModal: true,\r\n                                ncontrolCode: inputParam.ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_CANNOTCONFIGUREAPPROVEDREPORT\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANCONFIGUREMISREPORT\" }))\r\n        }\r\n    }\r\n}\r\n\r\nexport function getParameterMappingComboService(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        if (inputParam.reportMaster.nreporttypecode === reportTypeEnum.MIS) {\r\n            if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n                dispatch(initRequest(true));\r\n                return rsapi.post(\"reportconfig/getReportParameterMappingComboData\", {\r\n                    nreportdetailcode: parseInt(inputParam.reportDetail.nreportdetailcode),\r\n                    userinfo: inputParam.userInfo\r\n                })\r\n                    .then(response => {\r\n                        if (response.data[\"ChildComponentList\"].length > 0) {\r\n\r\n                            const parentComponentMap = constructOptionList(response.data[\"ParentComponentList\"] || [], \"nreportdesigncode\",\r\n                                \"sdisplayname\", undefined, undefined, true);\r\n                            const parentComponentList = parentComponentMap.get(\"OptionList\");\r\n\r\n                            const childComponentMap = constructOptionList(response.data[\"ChildComponentList\"] || [], \"nreportdesigncode\",\r\n                                \"sdisplayname\", undefined, undefined, true);\r\n                            const childComponentList = childComponentMap.get(\"OptionList\");\r\n\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    parentComponentList,//:response.data[\"ParentComponenList\"] || [],\r\n                                    childComponentList,//:response.data[\"ChildComponentList\"] || [], \r\n                                    operation: inputParam.operation,\r\n                                    screenName: inputParam.screenName,\r\n                                    selectedRecord: {},\r\n                                    openModal: true,\r\n                                    ncontrolCode: inputParam.ncontrolCode,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n                        }\r\n                        else {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_NOPARAMETERSTOMAP\" }))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_CANNOTMAPAPPROVEDREPORT\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_CANMAPMISREPORT\" }))\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewReportDetail(reportmaster, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        if (masterData[\"ViewReportMaster\"] !== undefined && Object.keys(masterData[\"ViewReportMaster\"]).length !== 0) {\r\n            dispatch(initRequest(true));\r\n\r\n            return rsapi.post(\"reportview/viewReport\", {reportmaster, userinfo: userInfo })\r\n                .then(response => {\r\n                    // console.log(\"report action:\", response);\r\n\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (response.data[\"ViewReportDesignConfig\"] !== undefined) {\r\n                        masterData[\"ReportPDFFile\"] = undefined;\r\n                    }\r\n                    // else{\r\n                    //     document.getElementById(\"download_data\").setAttribute(\"href\", masterData[\"ReportPDFFile\"]);\r\n                    //     document.getElementById(\"download_data\").click();\r\n                    // }\r\n\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_REPORTNOTFOUND\" }))\r\n        }\r\n    }\r\n}\r\n\r\n// export function getActionMappingComboService(inputParam) {\r\n//     return function (dispatch) {   \r\n\r\n//     if (inputParam.reportDetail.ntransactionstatus === transactionStatus.DRAFT){\r\n//             dispatch(initRequest(true));\r\n//             return rsapi.post(\"reportconfig/getActionMappingComboData\", {nreportdetailcode:parseInt(inputParam.reportDetail.nreportdetailcode),\r\n//                                         userinfo:inputParam.userInfo})\r\n//         .then(response=>{ \r\n//             if (response.data[\"ActionMappingChild\"].length > 0)\r\n//             {     \r\n//                     dispatch({type: DEFAULT_RETURN, payload:{actionMappingParentList:response.data[\"ActionMappingParent\"] || [],\r\n//                                                             actionMappingChildList:response.data[\"ActionMappingChild\"] || [], \r\n//                                                             operation:inputParam.operation, \r\n//                                                             screenName:inputParam.screenName,   \r\n//                                                             selectedRecord:{}, \r\n//                                                             openModal : true,\r\n//                                                             ncontrolCode:inputParam.ncontrolCode,\r\n//                                                             loading:false\r\n//                                                             }}); \r\n//             }\r\n//             else{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//                 toast.warn(intl.formatMessage({id:\"IDS_NOACTIONSTOMAP\"}))\r\n//             }\r\n//         })\r\n//         .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//             if (error.response.status === 500){\r\n//                 toast.error(error.message);\r\n//             } \r\n//             else{               \r\n//                 toast.warn(error.response.data);\r\n//             }  \r\n\r\n//         })\r\n//     }\r\n//     else{\r\n//         toast.warn(intl.formatMessage({id:\"IDS_CANNOTACTIONMAPAPPROVEDREPORT\"}))\r\n//     }\r\n// }}\r\n\r\nexport function getReportViewChildDataList(inputParam) {\r\n    return function (dispatch) {\r\n        // dispatch(initRequest(true));\r\n        return rsapi.post(\"reportview/getChildDataList\", { ...inputParam[\"inputData\"] })\r\n            .then(response => {\r\n                const controlList = inputParam.viewReportDesignConfigList;\r\n\r\n                const selectedRecord = inputParam.selectedRecord;\r\n\r\n                Object.keys(response.data).map(displayName => {\r\n                    const index = controlList.findIndex(item => displayName === item.sdisplayname);\r\n\r\n                    const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember,\r\n                        controlList[index].sdisplaymember, undefined, undefined, true);\r\n\r\n                    const comboList = comboMap.get(\"OptionList\");\r\n                    //selectedRecord[controlList[index].svaluemember] = undefined;\r\n                    selectedRecord[controlList[index].sreportparametername] = undefined;\r\n\r\n                    return controlList[index][\"dataList\"] = comboList;//response.data[displayName]\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        viewReportDesignConfigList: controlList,\r\n                        loading: false,\r\n                        inputFieldData: inputParam.inputData.inputfielddata,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReportDetailWithParameters(viewReportParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportview/viewReportWithParameters\", { ...viewReportParam })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...viewReportParam.masterData, ...response.data,\r\n                    ReportPDFFile: response.data[\"ReportPDFFile\"],\r\n                    SelectedReportDetails: response.data[\"SelectedReportDetails\"],\r\n                    ReportPDFPath: response.data[\"ReportPDFPath\"],\r\n                    ViewReportDesignConfig: undefined\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, //openModal:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function validationReportparameter(validationReportParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportValidation\", { ...validationReportParam })\r\n            .then(response => {\r\n                const reportType = constructOptionList(response.data || [], \"ntranscode\",\r\n                \"stransstatus\", undefined, undefined, false);\r\n\r\n                const reportstatus = reportType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        reportTypeList:reportstatus,\r\n                        screenName:\"IDS_REPORTVALIDATION\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function controlBasedReportparametre(validationReportParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"controlbasedreport/controlBasedReportParameter\", { ...validationReportParam })\r\n            .then(response => {\r\n                const reportType = constructOptionList(response.data.reportTemplateList || [], \"ncontrolbasedparameter\",\r\n                \"scontrolbasedparameter\", undefined, undefined, false);\r\n\r\n                const reportTypecopy = constructOptionList(response.data.reportTemplateList || [], \"ncontrolbasedparameter\",\r\n                \"scontrolbasedparameter\", undefined, undefined, false);\r\n\r\n                const reportstatus = reportType.get(\"OptionList\");\r\n                const reportstatuscopy = reportTypecopy.get(\"OptionList\");\r\n                let reportTypeListparameter={};\r\n                if(response.data.ParameterMappingDatagrid.length !== 0){\r\n                    //reportTypeListparameter=reportstatus.splice(1,response.data.ParameterMappingDatagrid.map(function (el) { return el.nreportparametercode; }))\r\n                    reportTypeListparameter= reportstatus.filter(item => response.data.ParameterMappingDatagrid.every(el => el.nreportparametercode != item.value) );\r\n\r\n                }else{\r\n                    reportTypeListparameter=reportstatus;\r\n                }\r\n               // const reportTypeListparameter=reportstatus.splice(1,response.data.ParameterMappingDatagrid.map(function (el) { return el.nreportparametercode; }))\r\n                const reportstatus1 = response.data.ParameterMappingDatagrid;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        reportTypeListparameter:reportTypeListparameter,\r\n                        reportTypeListparametercopy:reportstatuscopy,\r\n                        reportTypeListName:[],\r\n                        ParameterMappingDatagrid:reportstatus1,\r\n                        screenName:\"IDS_REPORTPARAMETERMAPPING\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function controlBasedReportparametretable(nformcode,nreportdetailcode,userInfo,sdatatype) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"controlbasedreport/controlBasedReportparametretable\",\r\n         {\"nformcode\":nformcode,\"nreportdetailcode\": nreportdetailcode,\"sdatatype\":sdatatype,userinfo: userInfo})\r\n            .then(response => {\r\n                const reportType = constructOptionList(response.data || [], \"ncolumnfield\",\r\n                \"stablecolumn\", undefined, undefined, false);\r\n\r\n                const reportstatus = reportType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        reportTypeListName:reportstatus,\r\n                        screenName:\"IDS_REPORTPARAMETERMAPPING\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n// export function controlBasedReportparametretablecolumn(nformcode,nreportdetailcode,userInfo,sdatatype) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"controlbasedreport/controlBasedReportparametretablecolumn\",\r\n//          {\"nformcode\":nformcode,\"nreportdetailcode\": nreportdetailcode,\"reportdatatype\":sdatatype,userinfo: userInfo})\r\n//             .then(response => {\r\n//                 const reportType = constructOptionList(response.data || [], \"ncolumnfield\",\r\n//                 \"stablecolumn\", undefined, undefined, false);\r\n\r\n//                 const reportstatus = reportType.get(\"OptionList\");\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false, openModal:true,\r\n//                         reportTypeListColumn:reportstatus,\r\n//                         screenName:\"IDS_REPORTPARAMETERMAPPING\"\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n\r\n//             })\r\n//     }\r\n// }\r\n\r\nexport function downloadControlBasedReportparametreInsert(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"controlbasedreport/downloadControlBasedReportparametreInsert\",{inputParam})\r\n            .then(response => {\r\n                const reportType = constructOptionList(response.data || [], \"nquerybuildertablecodecolumn\",\r\n                \"stablecolumn\", undefined, undefined, false);\r\n\r\n                const reportstatus = reportType.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal:true,\r\n                        reportTypeListColumn:reportstatus,\r\n                        screenName:\"IDS_REPORTPARAMETERMAPPING\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// export function viewReportDetailWithParametersReports(viewReportParam,inputParam) {\r\n//     return function (dispatch) {\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"reportview/viewReportWithParameters\", { ...viewReportParam })\r\n//             .then(response => {\r\n//                 const masterData = {\r\n//                     ...viewReportParam.masterData, ...response.data,\r\n//                     ReportPDFFile: response.data[\"ReportPDFFile\"],\r\n//                     SelectedReportDetails: response.data[\"SelectedReportDetails\"],\r\n//                     ReportPDFPath: response.data[\"ReportPDFPath\"],\r\n//                     ViewReportDesignConfig: undefined\r\n//                 };\r\n//                 if(masterData.sourceparameter!=undefined\r\n//                     && masterData.sourceparameter!=\"\")//&&\r\n//                    //this.props.Login.masterData.sourceparameter !== previousProps.Login.masterData.sourceparameter )\r\n//                   {\r\n                 \r\n//                     let mrtfilePath = reportUrl()\r\n//                     + \"?name=\" + viewReportParam.userinfo.sreportingtoolfilename\r\n//                     + \"&slanguagetypecode=\" + viewReportParam.userinfo.sreportlanguagecode\r\n//                     + \"&foldername=\" + masterData.SelectedReportDetails.sreportname //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\r\n//                     + \"&filename=\" + masterData.SelectedReportDetails.ssystemfilename //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\r\n//                     + \"&sconnectionstring=\" + viewReportParam.userinfo.sconnectionString\r\n//                     + \"&sreportlink=\" + viewReportParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \r\n//                     + \"&smrttemplatelink=\" + viewReportParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\r\n//                     + \"&sourceparameter=\" + encodeURIComponent(masterData.sourceparameter);\r\n               \r\n             \r\n                 \r\n             \r\n//                      window.open(mrtfilePath);\r\n             \r\n//                      //this.setState({mrtfileflag:false});\r\n             \r\n//                      //this.props.Login.masterData.sourceparameter=\"\";\r\n             \r\n             \r\n//                       }\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         masterData, loading: false //openModal:false\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n \r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\nexport function viewReportDetailWithParametersReports(viewReportParam,inputParam) {\r\n        \r\n         if(viewReportParam.sourceparameter!=undefined && viewReportParam.sourceparameter!=\"\")\r\n         {\r\n        let mrtfilePath = reportUrl()\r\n        + \"?name=\" + inputParam.userinfo.sreportingtoolfilename     //en-xml\r\n        + \"&slanguagetypecode=\" + inputParam.userinfo.sreportlanguagecode    //en-us\r\n        + \"&foldername=\" + viewReportParam.SelectedReportDetails.sreportname   //\"Quotation-002\"//this.props.Login.masterData.SelectedReportDetails.sreportname\r\n        + \"&filename=\" + viewReportParam.SelectedReportDetails.ssystemfilename  //\"a6008692-3e1a-422b-b4da-5e9ad9cf3be6.mrt\"//\"b701dbc4-d90e-4840-b8e1-942649d6ec25.mrt\"//this.props.Login.masterData.SelectedReportDetails.ssystemfilename\r\n        + \"&sconnectionstring=\" + inputParam.userinfo.sconnectionString\r\n        + \"&sreportlink=\" + inputParam.sreportlink //inputParam.sreportlink //\"//localhost:8090/SharedFolder/QuaLISjrxml\"//this.props.Login.reportSettings[15] //this.props.Login.userInfo.sreportLink  \r\n        + \"&smrttemplatelink=\" + inputParam.smrttemplatelink  //inputParam.smrttemplatelink //\"//localhost:8090//SharedFolder//ReportJSON//ReportTemplate.json\"//this.props.Login.reportSettings[16]//this.props.Login.userInfo.smrttemplateLink\r\n        + \"&sourceparameter=\" + encodeURIComponent(viewReportParam.sourceparameter);\r\n    \r\n         window.open(mrtfilePath);\r\n        //return(viewReportParam.statusCodeValue);\r\n\r\n        }    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function getReportsByModule(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportview/getReportView\", {\r\n            nreportmodulecode: inputParam.nreportmodulecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                let masterData={...inputParam.masterData,ViewReportDesignConfig:[]}\r\n                 masterData = { ...masterData, ...response.data };\r\n\r\n                // const  reportModuleMap  = constructOptionList(masterData.ViewReportModuleList ||[], \"nreportmodulecode\",\r\n                //                          \"smoduledisplayname\" , undefined, undefined, true);\r\n                // const  reportModuleList  = reportModuleMap.get(\"OptionList\");\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, //viewReportModuleList:reportModuleList,\r\n                        operation: null, modalName: undefined,\r\n                        loading: false, selectedRecord: inputParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getControlButton(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getControlButton\", {\r\n            nformcode: inputParam.ControlScreen.nformcode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const controlButtonMap = constructOptionList(response.data || [], \"ncontrolcode\",\r\n                    \"scontrolids\", undefined, undefined, true);\r\n                const controlButtonList = controlButtonMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        controlButton: controlButtonList,//: response.data,                                            \r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nregsubtypecode: undefined\r\n                            //nregsubtypecode:{label:\"Please Select...\", value:-4}\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportRegSubType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportRegistrationSubType\", {\r\n            nregtypecode: inputParam.registrationType.nregtypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const regSubTypeMap = constructOptionList(response.data || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", undefined, undefined, true);\r\n                const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        regSubTypeList,//: response.data,                                            \r\n                        loading: false,\r\n                        ApproveConfigList:[],                                           \r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nregsubtypecode: undefined,\r\n                            napproveconfversioncode: undefined\r\n\r\n                            //nregsubtypecode:{label:\"Please Select...\", value:-4}\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportSubType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportSubType\", {\r\n            nreporttypecode: inputParam.reportType.nreporttypecode,\r\n            nreporttypecode: inputParam.reportType.nreporttypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n               // const reportSubTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\r\n               //     \"scoareporttypename\", undefined, undefined, true);\r\n               // const reportSubTypeList = reportSubTypeMap.get(\"OptionList\");\r\n\r\n                const certificateTypeMap = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const certificateTypeList = certificateTypeMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                       // reportSubTypeList,\r\n                        certificateTypeList,\r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            ncoareporttypecode: undefined,\r\n                            ncertificatetypecode: \"\"\r\n                            // ncoareporttypecode:{label:\"Please Select...\", value:-4}\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport function getReportSampletype(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportSampleType\", {\r\n            nsampletypecode: inputParam.nsampletypecode, nreporttypecode: inputParam.reportType.nreporttypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\r\n                //                          \"sregtypename\" , undefined, undefined, true);   \r\n                // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\r\n\r\n                // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\r\n                // // \"sregsubtypename\" , undefined, undefined, true);   \r\n                // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\r\n                \r\n                const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\r\n                \"ssampletypename\", undefined, undefined, true);\r\n                const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                \r\n                const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, true);\r\n                const regTypeList = regTypeMap.get(\"OptionList\");\r\n\r\n                // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\r\n                //     \"sregsubtypename\", undefined, undefined, true);\r\n                // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n\r\n                const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\r\n                    \"scoareporttypename\", undefined, undefined, true);\r\n                const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\r\n\r\n                const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const certificateTypeList = certificateType.get(\"OptionList\");\r\n\r\n\r\n                const nsampletypecode = getComboLabelValue(response.data[\"SelectedSampleType\"],\r\n                    response.data[\"SampleType\"], \"nsampletypecode\", \"ssampletypename\")\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sampleTypeList,\r\n                        regTypeList,\r\n                      //  regSubTypeList,\r\n                        reportSubTypeList,\r\n                        loading: false,\r\n                        certificateTypeList,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nsampletypecode: nsampletypecode, nregtypecode: undefined,\r\n                            ncoareporttypecode: undefined,\r\n                            ncertificatetypecode: \"\"\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getregtype(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getRegistrationtypeForSample\", {\r\n            nsampletypecode: inputParam.sampleType.nsampletypecode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            //nreporttypecode: inputParam.selectedRecord.nreporttypecode.value,\r\n            nreporttypecode: (inputParam.selectedRecord.nreporttypecode.value == reportTypeEnum.COAPREVIEW)||\r\n            (inputParam.selectedRecord.nreporttypecode.value == reportTypeEnum.COAPRELIMINARY) ? reportTypeEnum.COA : inputParam.selectedRecord.nreporttypecode.value,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                // const reportRegTypeMap  = constructOptionList(response.data.Regtype ||[], \"nregtypecode\",\r\n                //                          \"sregtypename\" , undefined, undefined, true);   \r\n                // const  reportRegTypeList = reportRegTypeMap.get(\"OptionList\");\r\n\r\n                // // const reportRegSubTypeMap  = constructOptionList(response.data.RegSubtype ||[], \"nregsubtypecode\",\r\n                // // \"sregsubtypename\" , undefined, undefined, true);   \r\n                // //   const  reportRegSubTypeList = reportRegSubTypeMap.get(\"OptionList\");\r\n                // const sampleTypeMap = constructOptionList(response.data[\"SampleType\"] || [], \"nsampletypecode\",\r\n                // \"ssampletypename\", undefined, undefined, true);\r\n                // const sampleTypeList = sampleTypeMap.get(\"OptionList\");\r\n                \r\n                const regTypeMap = constructOptionList(response.data[\"RegistrationType\"] || [], \"nregtypecode\",\r\n                    \"sregtypename\", undefined, undefined, true);\r\n                const regTypeList = regTypeMap.get(\"OptionList\");\r\n\r\n                // const regSubTypeMap = constructOptionList(response.data[\"RegistrationSubType\"] || [], \"nregsubtypecode\",\r\n                //     \"sregsubtypename\", undefined, undefined, true);\r\n                // const regSubTypeList = regSubTypeMap.get(\"OptionList\");\r\n\r\n                const coaReportTypeMap = constructOptionList(response.data.COAReportType || [], \"ncoareporttypecode\",\r\n                    \"scoareporttypename\", undefined, undefined, true);\r\n                const reportSubTypeList = coaReportTypeMap.get(\"OptionList\");\r\n\r\n                const certificateType = constructOptionList(response.data.CertificateType || [], \"ncertificatetypecode\",\r\n                    \"scertificatetype\", undefined, undefined, true);\r\n                const certificateTypeList = certificateType.get(\"OptionList\");\r\n\r\n\r\n            //    const nregtypecode = getComboLabelValue(response.data[\"SelectedRegType\"],\r\n              //      response.data[\"RegistrationType\"], \"nregtypecode\", \"sregtypename\")\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                     //   sampleTypeList,\r\n                        regTypeList,\r\n                        regSubTypeList: [],\r\n                        ApproveConfigList:[],                                           \r\n                        reportSubTypeList,\r\n                        loading: false,\r\n                        certificateTypeList,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nregtypecode: undefined, nregsubtypecode: undefined,\r\n                            ncoareporttypecode: undefined,\r\n                            ncertificatetypecode: \"\",\r\n                            napproveconfversioncode: undefined\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportRegSubTypeApproveConfigVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportRegSubTypeApproveConfigVersion\", {\r\n            nregtypecode: inputParam.selectedRecord.nregtypecode.value,\r\n            nregsubtypecode: inputParam.registrationsubType.nregsubtypecode,\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const ApproveConfigVersionMap = constructOptionList(response.data || [], \"napproveconfversioncode\",\r\n                    \"sversionname\", undefined, undefined, false);\r\n                const ApproveConfigList = ApproveConfigVersionMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ApproveConfigList,//: response.data,                                            \r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            napproveconfversioncode: undefined\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReportTemplate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"reportconfig/getReportTemplate\", {\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n                const reportTemplateMap = constructOptionList(response.data || [], \"nreporttemplatecode\",\r\n                    \"sreporttemplatename\", \"nreporttemplatecode\", \"ascending\", true);\r\n                const reportTemplateList = reportTemplateMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        reportTemplateList,                                         \r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nreporttemplatecode:undefined\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}