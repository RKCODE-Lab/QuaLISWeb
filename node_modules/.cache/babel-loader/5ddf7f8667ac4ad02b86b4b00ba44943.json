{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport Axios from 'axios';\nimport { constructOptionList } from '../components/CommonScript';\nimport { initRequest } from './LoginAction';\nimport { toast } from 'react-toastify';\nimport { intl } from '../components/App';\nexport function fetchRecordComponent(fetchRecordParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n\n    if (fetchRecordParam.operation === \"update\") {\n      const component = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\", {\n        [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n        \"userinfo\": fetchRecordParam.userInfo\n      });\n      urlArray = [component];\n      selectedId = fetchRecordParam.primaryKeyValue;\n    } else {\n      urlArray = [];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread(function () {\n      let selectedRecord = {};\n\n      if (fetchRecordParam.operation === \"update\") {\n        for (var _len = arguments.length, response = new Array(_len), _key = 0; _key < _len; _key++) {\n          response[_key] = arguments[_key];\n        }\n\n        selectedRecord = response[0].data;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: fetchRecordParam.operation === \"update\" ? selectedRecord : selectedRecord,\n          operation: fetchRecordParam.operation,\n          screenName: \"IDS_COMPONENT\",\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      console.log(\"Error In Component : \", error);\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ComponentAction.js"],"names":["rsapi","DEFAULT_RETURN","Axios","constructOptionList","initRequest","toast","intl","fetchRecordComponent","fetchRecordParam","dispatch","urlArray","selectedId","operation","component","post","inputParam","classUrl","methodUrl","primaryKeyField","primaryKeyValue","userInfo","all","then","spread","selectedRecord","response","data","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","console","log","status","formatMessage","id","message","warn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,mBAAR,QAAkC,4BAAlC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AAEA,OAAO,SAASC,oBAAT,CAA8BC,gBAA9B,EAAgD;AACnD,SAAO,UAAUC,QAAV,EAAoB;AACvB,QAAIC,QAAQ,GAAG,EAAf;AAEA,QAAIC,UAAU,GAAG,IAAjB;;AACA,QAAIH,gBAAgB,CAACI,SAAjB,KAA+B,QAAnC,EAA6C;AACzC,YAAMC,SAAS,GAAGb,KAAK,CAACc,IAAN,CAAWN,gBAAgB,CAACO,UAAjB,CAA4BC,QAA5B,GAAuC,YAAvC,GAAsDR,gBAAgB,CAACO,UAAjB,CAA4BE,SAAlF,GAA8F,MAAzG,EAAiH;AAAE,SAACT,gBAAgB,CAACU,eAAlB,GAAoCV,gBAAgB,CAACW,eAAvD;AAAwE,oBAAYX,gBAAgB,CAACY;AAArG,OAAjH,CAAlB;AAEAV,MAAAA,QAAQ,GAAG,CAAEG,SAAF,CAAX;AACAF,MAAAA,UAAU,GAAGH,gBAAgB,CAACW,eAA9B;AACH,KALD,MAMK;AACDT,MAAAA,QAAQ,GAAG,EAAX;AACH;;AACDD,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAF,IAAAA,KAAK,CAACmB,GAAN,CAAUX,QAAV,EACKY,IADL,CACUpB,KAAK,CAACqB,MAAN,CAAa,YAAiB;AAEhC,UAAIC,cAAc,GAAG,EAArB;;AAEA,UAAIhB,gBAAgB,CAACI,SAAjB,KAA+B,QAAnC,EAA6C;AAAA,0CAJ1Ba,QAI0B;AAJ1BA,UAAAA,QAI0B;AAAA;;AACzCD,QAAAA,cAAc,GAAGC,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAA7B;AACH;;AACDjB,MAAAA,QAAQ,CAAC;AACLkB,QAAAA,IAAI,EAAE1B,cADD;AAEL2B,QAAAA,OAAO,EAAE;AACLJ,UAAAA,cAAc,EAAEhB,gBAAgB,CAACI,SAAjB,KAA+B,QAA/B,GAA0CY,cAA1C,GAA2DA,cADtE;AAELZ,UAAAA,SAAS,EAAEJ,gBAAgB,CAACI,SAFvB;AAGLiB,UAAAA,UAAU,EAAE,eAHP;AAILC,UAAAA,SAAS,EAAE,IAJN;AAIYC,UAAAA,YAAY,EAAEvB,gBAAgB,CAACuB,YAJ3C;AAKLC,UAAAA,OAAO,EAAE,KALJ;AAKWrB,UAAAA;AALX;AAFJ,OAAD,CAAR;AAUH,KAjBK,CADV,EAoBKsB,KApBL,CAoBWC,KAAK,IAAI;AACZzB,MAAAA,QAAQ,CAAC;AAAEkB,QAAAA,IAAI,EAAE1B,cAAR;AAAwB2B,QAAAA,OAAO,EAAE;AAAEI,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;;AACA,UAAIA,KAAK,CAACT,QAAN,CAAeY,MAAf,KAA0B,GAA9B,EAAmC;AAC/BhC,QAAAA,KAAK,CAAC6B,KAAN,CAAY5B,IAAI,CAACgC,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAEL,KAAK,CAACM;AAAZ,SAAnB,CAAZ;AACH,OAFD,MAGK;AACDnC,QAAAA,KAAK,CAACoC,IAAN,CAAWnC,IAAI,CAACgC,aAAL,CAAmB;AAAEC,UAAAA,EAAE,EAAEL,KAAK,CAACT,QAAN,CAAeC;AAArB,SAAnB,CAAX;AACH;AACJ,KA7BL;AA+BH,GA7CD;AA8CH","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport Axios from 'axios';\r\nimport {constructOptionList} from '../components/CommonScript';\r\nimport { initRequest } from './LoginAction';\r\nimport { toast } from 'react-toastify';\r\nimport { intl } from '../components/App';\r\n\r\nexport function fetchRecordComponent(fetchRecordParam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n\r\n        let selectedId = null;\r\n        if (fetchRecordParam.operation === \"update\") {\r\n            const component = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActive\" + fetchRecordParam.inputParam.methodUrl + \"ById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n            urlArray = [ component];\r\n            selectedId = fetchRecordParam.primaryKeyValue;\r\n        }\r\n        else {\r\n            urlArray = [];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                let selectedRecord = {};\r\n\r\n                if (fetchRecordParam.operation === \"update\") {\r\n                    selectedRecord = response[0].data;\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: fetchRecordParam.operation === \"update\" ? selectedRecord : selectedRecord,\r\n                        operation: fetchRecordParam.operation,\r\n                        screenName: \"IDS_COMPONENT\",\r\n                        openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                console.log(\"Error In Component : \", error);\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}