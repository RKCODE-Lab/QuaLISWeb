{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nexport function openModal(operation, napprovalconfigcode, napprovalsubtypecode, userInfo, ncontrolcode, ntreeversiontempcode) {\n  return function (dispatch) {\n    if (userInfo) {\n      const inputData = {\n        napprovalconfigcode: napprovalconfigcode,\n        napprovalsubtypecode: napprovalsubtypecode,\n        ntreeversiontempcode,\n        userinfo: userInfo\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"approvalconfig/getUserRoleApprovalConfig\", inputData).then(response => {\n        const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n        const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n        const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\n        const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n        const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\n        const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\n        const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\n        const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\n        const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\n        const checklistOptions = checklistOptionsMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation,\n            userRoleTree: response.data.userroletree,\n            filterStatusOptions,\n            validationStatusOptions,\n            approvalStatusOptions,\n            decisionStatusOptions,\n            checklistOptions,\n            approvalStatusValue: response.data.AvailableDecisionStatus ? response.data.AvailableDecisionStatus : [],\n            checklistValues: [],\n            checklistVersionValues: [],\n            actionStatus: response.data.actionStatus ? response.data.actionStatus : [],\n            roleConfig: response.data.roleConfig ? sortData(response.data.roleConfig, 'ascending', 'nsorter') : [],\n            versionConfig: response.data.versionConfig ? response.data.versionConfig : [],\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getApprovalConfigVersion(version, napprovalsubtypecode, userInfo, masterData) {\n  return function (dispatch) {\n    const inputData = {\n      \"napprovalconfigversioncode\": version.napproveconfversioncode,\n      napprovalsubtypecode: napprovalsubtypecode,\n      userinfo: userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigVersion\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedVersion: response.data.selectedVersion,\n            showAccordion: true,\n            approvalconfigRoleNames: response.data.approvalconfigRoleNames,\n            selectedRole: response.data.approvalconfigRoleNames ? response.data.approvalconfigRoleNames.length > 0 ? sortData(response.data.approvalconfigRoleNames, 'ascending', 'nlevelno')[0] : {} : {},\n            roleFilters: response.data.roleFilters,\n            roleValidations: response.data.roleValidations,\n            roleDecisions: response.data.roleDecisions,\n            roleActions: response.data.roleActions,\n            roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n            versionConfig: response.data.versionConfig\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRoleDetails(inputData) {\n  return function (dispatch) {\n    let {\n      role,\n      masterData,\n      napprovalsubtypecode,\n      userinfo\n    } = inputData;\n    let inputParamData = {\n      napprovalconfigrolecode: role.napprovalconfigrolecode,\n      napprovalsubtypecode,\n      userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigRoleDetails\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedRole: role,\n            showAccordion: true,\n            roleFilters: response.data.roleFilters,\n            roleValidations: response.data.roleValidations,\n            roleDecisions: response.data.roleDecisions,\n            roleActions: response.data.roleActions,\n            roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n            versionConfig: response.data.versionConfig\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalConfigEditData(napprovalconfigversioncode, napprovalsubtypecode, userInfo, masterData, ncontrolcode) {\n  return function (dispatch) {\n    if (masterData.selectedVersion[\"ntransactionstatus\"] === transactionStatus.APPROVED || masterData.selectedVersion[\"ntransactionstatus\"] === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORDTOEDIT\"\n      }));\n    } else {\n      if (userInfo) {\n        const inputData = {\n          napprovalconfigversioncode: napprovalconfigversioncode,\n          napprovalsubtypecode: napprovalsubtypecode,\n          userinfo: userInfo\n        };\n        dispatch(initRequest(true));\n        rsapi.post(\"approvalconfig/getApprovalConfigEditData\", inputData).then(response => {\n          console.log('fdsgfdg', response);\n          const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n          const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n          const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\n          const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\n          const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\n          const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\n          const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\n          const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\n          const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\n          const checklistOptions = checklistOptionsMap.get(\"OptionList\");\n          let selectedRecord = {};\n          response.data.userroletree.map(role => {\n            let filterStatus = [];\n            let validationStatus = [];\n            let decisionStatus = [];\n            let actionArray = [];\n            let filterStatusValues = [];\n            response.data[`filterstatus_${role.nuserrolecode}`].map(data => {\n              filterStatusValues.push({\n                value: data.ntranscode,\n                label: data.stransstatus,\n                item: data\n              });\n              filterStatus.push(data.ntranscode);\n              return null;\n            });\n            let validationStatusValues = [];\n            response.data[`validationstatus_${role.nuserrolecode}`].map(data => {\n              validationStatusValues.push({\n                value: data.ntranscode,\n                label: data.stransstatus,\n                item: data\n              });\n              validationStatus.push(data.ntranscode);\n              return null;\n            });\n            let decisionStatusValues = [];\n            response.data[`decisionstatus_${role.nuserrolecode}`].map(data => {\n              decisionStatusValues.push({\n                value: data.ntranscode,\n                label: data.stransstatus,\n                item: data\n              });\n              decisionStatus.push(data.ntranscode);\n              return null;\n            });\n            let checklistValues = [];\n            response.data[`checklist_${role.nuserrolecode}`].map(data => checklistValues.push({\n              value: data.nchecklistcode,\n              label: data.schecklistname,\n              item: data\n            }));\n            let checklistVersionValues = [];\n            response.data[`checklist_${role.nuserrolecode}`].map(data => checklistVersionValues.push({\n              value: data.nchecklistversioncode,\n              label: data.schecklistversionname,\n              item: data\n            }));\n            let nrecomretestneed = response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed;\n            let nrecomrecalcneed = response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed;\n            let nretestneed = response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed;\n            let nrecalcneed = response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed;\n            let ncorrectionneed = response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed;\n            nrecomretestneed === transactionStatus.YES ? actionArray.push(transactionStatus.RECOMMENDRETEST) : actionArray.push();\n            nrecomrecalcneed === transactionStatus.YES ? actionArray.push(transactionStatus.RECOMMENDRECALC) : actionArray.push();\n            nretestneed === transactionStatus.YES ? actionArray.push(transactionStatus.RETEST) : actionArray.push();\n            nrecalcneed === transactionStatus.YES ? actionArray.push(transactionStatus.RECALC) : actionArray.push();\n            ncorrectionneed === transactionStatus.YES ? actionArray.push(transactionStatus.CORRECTION) : actionArray.push();\n            selectedRecord[role.nuserrolecode] = {\n              'IDS_PARTIALAPPROVAL': response.data[`roledetails_${role.nuserrolecode}`][0].npartialapprovalneed,\n              'IDS_SECTIONWISEAPPROVE': response.data[`roledetails_${role.nuserrolecode}`][0].nsectionwiseapprovalneed,\n              'IDS_RECOMMENDRETEST': response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed,\n              'IDS_RECOMMENDRECALC': response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed,\n              'IDS_RETEST': response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed,\n              'IDS_RECALC': response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed,\n              'IDS_AUTOAPPROVAL': response.data[`roledetails_${role.nuserrolecode}`][0].nautoapproval,\n              'IDS_CORRECTION': response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed,\n              'IDS_ESIGN': response.data[`roledetails_${role.nuserrolecode}`][0].nesignneed,\n              'filterstatus': filterStatus,\n              'decisionstatus': decisionStatus,\n              'validationstatus': validationStatus,\n              'approvalstatus': response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\n              'checklist': response.data[`checklist_${role.nuserrolecode}`][0].nchecklistversioncode\n            };\n            selectedRecord['sversionname'] = response.data.versiondetails.sversionname;\n            response.data.versionConfig.map(action => {\n              if (action.ntranscode === 81) {\n                selectedRecord[action.stransdisplaystatus] = response.data.versiondetails.nneedautoapproval;\n              } else if (action.ntranscode === 85) {\n                selectedRecord[action.stransdisplaystatus] = response.data.versiondetails.nneedautocomplete;\n              }\n            });\n            selectedRecord['IDS_JOBALLOCATION'] = response.data.versiondetails.nneedjoballocation;\n            selectedRecord['IDS_AUTOALLOT'] = response.data.versiondetails.nautoallot;\n            selectedRecord[`approvalstatus_${role.nuserrolecode}`] = [{\n              value: response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\n              label: response.data[`roledetails_${role.nuserrolecode}`][0].sapprovalstatus\n            }];\n            selectedRecord[`filterstatus_${role.nuserrolecode}`] = filterStatusValues;\n            selectedRecord[`validationstatus_${role.nuserrolecode}`] = validationStatusValues;\n            selectedRecord[`decisionstatus_${role.nuserrolecode}`] = decisionStatusValues;\n            selectedRecord[`checklist_${role.nuserrolecode}`] = checklistValues;\n            selectedRecord[`checklistVersion_${role.nuserrolecode}`] = checklistVersionValues;\n            selectedRecord[`actionStatus_${role.nuserrolecode}`] = actionArray; //selectedRecord[role.nuserrolecode]=response.data[`roledetails_${role.nuserrolecode}`][0]\n\n            return null;\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: \"update\",\n              userRoleTree: sortData(response.data.userroletree, 'ascending', 'nlevelno'),\n              filterStatusOptions,\n              validationStatusOptions,\n              approvalStatusOptions,\n              decisionStatusOptions,\n              checklistOptions,\n              actionStatus: response.data.actionStatus ? response.data.actionStatus : [],\n              roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n              versionConfig: response.data.versionConfig,\n              selectedRecord,\n              masterData,\n              ncontrolcode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    }\n  };\n}\nexport function getFilterChange(inputParamData, oldState) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigFilter\", inputParamData.inputData).then(response => {\n      const RegistrationTypeListMap = constructOptionList(response.data.registrationtype || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\n      const RegistrationSubTypeListMap = constructOptionList(response.data.registrationsubtype || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\n      let RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      let RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParamData.masterData,\n            approvalsubtype: oldState.approvalsubtype,\n            approvalSubTypeValue: oldState.approvalSubTypeValue,\n            RegistrationTypeList: response.data.registrationtype ? RegistrationTypeList : oldState.RegistrationTypeList,\n            RegistrationSubTypeList: response.data.registrationsubtype ? RegistrationSubTypeList : oldState.RegistrationSubTypeList,\n            registrationType: response.data.registrationtype && response.data.registrationtype.length > 0 ? sortData(response.data.registrationtype, \"ascending\", \"nregtypecode\") : oldState.registrationtype,\n            registrationTypeValue: response.data.registrationtype ? response.data.registrationtype.length > 0 ? {\n              value: response.data.registrationtype[0].nregtypecode,\n              label: response.data.registrationtype[0].sregtypename\n            } : oldState.registrationTypeValue : oldState.registrationTypeValue,\n            registrationSubType: response.data.registrationsubtype && response.data.registrationsubtype.length > 0 ? sortData(response.data.registrationsubtype, \"descending\", \"nregsubtypecode\") : oldState.registrationsubtype,\n            registrationSubTypeValue: response.data.registrationsubtype ? response.data.registrationsubtype.length > 0 ? {\n              value: response.data.registrationsubtype[0].nregsubtypecode,\n              label: response.data.registrationsubtype[0].sregsubtypename\n            } : oldState.registrationSubTypeValue : oldState.registrationSubTypeValue,\n            approvalConfigCode: response.data.approvalConfigCode,\n            treeVersionTemplate: response.data.treeVersionTemplate,\n            userroleTemplateValue: response.data.userroleTemplateValue // versionData:sortData(response.data.versionData),\n            // selectedVersion:response.data.selectedVersion,\n            // approvalconfigRoleNames:response.data.approvalconfigRoleNames,\n            // showAccordion:true,\n            // roleFilters:response.data.roleFilters,\n            // roleValidations:response.data.roleValidations,\n            // roleDecisions:response.data.roleDecisions,\n            // roleActions:response.data.roleActions,\n            // roleConfig:response.data.roleConfig&&response.data.roleConfig.length>0&&sortData(response.data.roleConfig,'ascending','nsorter'),\n            // versionConfig:response.data.versionConfig,\n            // searchedData:undefined\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovalConfigurationVersion(inputParamData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"approvalconfig/getApprovalConfigVersion\", inputParamData.inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParamData.masterData,\n            versionData: sortData(response.data.versionData),\n            selectedVersion: response.data.selectedVersion,\n            approvalconfigRoleNames: response.data.approvalconfigRoleNames,\n            selectedRole: response.data.approvalconfigRoleNames ? response.data.approvalconfigRoleNames.length > 0 ? sortData(response.data.approvalconfigRoleNames, 'ascending', 'nlevelno')[0] : {} : {},\n            showAccordion: true,\n            roleFilters: response.data.roleFilters,\n            roleValidations: response.data.roleValidations,\n            roleDecisions: response.data.roleDecisions,\n            roleActions: response.data.roleActions,\n            roleConfig: response.data.roleConfig && response.data.roleConfig.length > 0 && sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n            versionConfig: response.data.versionConfig,\n            searchedData: undefined\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function copyVersion(napprovalsubtypecode, userInfo, masterData, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('approvalconfig/getCopyRegType', {\n      napprovalsubtypecode: napprovalsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      let selectedRecord = {};\n      const RegistrationTypeListMap = constructOptionList(response.data.CopyRegType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\n      const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\n      let optCopyRegType = RegistrationTypeListMap.get(\"OptionList\");\n      let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\n      selectedRecord['regtype'] = response.data.CopyRegType.length > 0 ? {\n        value: response.data.CopyRegType[0].nregtypecode,\n        label: response.data.CopyRegType[0].sregtypename\n      } : [];\n      selectedRecord['regsubtype'] = response.data.CopyRegSubType ? response.data.CopyRegSubType.length > 0 ? {\n        value: response.data.CopyRegSubType[0].nregsubtypecode,\n        label: response.data.CopyRegSubType[0].sregsubtypename\n      } : [] : [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"copy\",\n          openModal: true,\n          optCopyRegSubType,\n          optCopyRegType,\n          selectedRecord,\n          masterData,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getCopySubType(comboData, selectedRecord, userInfo, masterData, optCopyRegType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('approvalconfig/getCopyRegSubType', {\n      nregtypecode: comboData.value,\n      userinfo: userInfo\n    }).then(response => {\n      const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\n      let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\n      selectedRecord['regsubtype'] = response.data.CopyRegSubType.length > 0 ? {\n        value: response.data.CopyRegSubType[0].nregsubtypecode,\n        label: response.data.CopyRegSubType[0].sregsubtypename\n      } : [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"copy\",\n          openModal: true,\n          loading: false,\n          optCopyRegType,\n          optCopyRegSubType,\n          selectedRecord,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function setDefault(inputObj, event) {\n  let {\n    flag,\n    napprovalconfigrolecode,\n    napprovalsubtypecode,\n    userInfo,\n    masterData\n  } = inputObj;\n  let rowData = inputObj.selectedRecord;\n  return function (dispatch) {\n    if (event.target.checked) {\n      let inputData = {};\n      let url = '';\n\n      if (flag === 1) {\n        inputData = {\n          napprovalconfigrolecode: napprovalconfigrolecode,\n          napprovalfiltercode: rowData.napprovalfiltercode,\n          napprovalsubtypecode: napprovalsubtypecode,\n          ntransactionstatus: rowData.ntransactionstatus,\n          napprovalconfigversioncode: masterData.selectedVersion.napprovalconfigversioncode,\n          userinfo: userInfo\n        };\n        url = 'approvalconfig/setDefaultFilterStatus';\n      } else {\n        inputData = {\n          napprovalconfigrolecode: napprovalconfigrolecode,\n          napprovaldecisioncode: rowData.napprovaldecisioncode,\n          napprovalsubtypecode: napprovalsubtypecode,\n          ntransactionstatus: rowData.ntransactionstatus,\n          napprovalconfigversioncode: masterData.selectedVersion.napprovalconfigversioncode,\n          userinfo: userInfo\n        };\n        url = 'approvalconfig/setDefaultDecisionStatus';\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(url, inputData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              showAccordion: true,\n              roleFilters: response.data.roleFilters,\n              roleValidations: response.data.roleValidations,\n              roleDecisions: response.data.roleDecisions,\n              roleActions: response.data.roleActions,\n              roleConfig: sortData(response.data.roleConfig, 'ascending', 'nsorter'),\n              versionConfig: response.data.versionConfig\n            },\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ApprovalConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","initRequest","transactionStatus","intl","openModal","operation","napprovalconfigcode","napprovalsubtypecode","userInfo","ncontrolcode","ntreeversiontempcode","dispatch","inputData","userinfo","post","then","response","filterStatusOptionsMap","data","availableFilterStatus","undefined","validationStatusOptionsMap","availableValidStatus","approvalStatusOptionsMap","approvalStatus","decisionStatusOptionsMap","availableDecisionStatus","checklistOptionsMap","checklist","filterStatusOptions","get","validationStatusOptions","approvalStatusOptions","decisionStatusOptions","checklistOptions","type","payload","userRoleTree","userroletree","approvalStatusValue","AvailableDecisionStatus","checklistValues","checklistVersionValues","actionStatus","roleConfig","versionConfig","loading","catch","error","status","message","warn","getApprovalConfigVersion","version","masterData","napproveconfversioncode","selectedVersion","showAccordion","approvalconfigRoleNames","selectedRole","length","roleFilters","roleValidations","roleDecisions","roleActions","getRoleDetails","role","inputParamData","napprovalconfigrolecode","getApprovalConfigEditData","napprovalconfigversioncode","APPROVED","RETIRED","formatMessage","id","console","log","selectedRecord","map","filterStatus","validationStatus","decisionStatus","actionArray","filterStatusValues","nuserrolecode","push","value","ntranscode","label","stransstatus","item","validationStatusValues","decisionStatusValues","nchecklistcode","schecklistname","nchecklistversioncode","schecklistversionname","nrecomretestneed","nrecomrecalcneed","nretestneed","nrecalcneed","ncorrectionneed","YES","RECOMMENDRETEST","RECOMMENDRECALC","RETEST","RECALC","CORRECTION","npartialapprovalneed","nsectionwiseapprovalneed","nautoapproval","nesignneed","napprovalstatuscode","versiondetails","sversionname","action","stransdisplaystatus","nneedautoapproval","nneedautocomplete","nneedjoballocation","nautoallot","sapprovalstatus","getFilterChange","oldState","RegistrationTypeListMap","registrationtype","RegistrationSubTypeListMap","registrationsubtype","RegistrationTypeList","RegistrationSubTypeList","approvalsubtype","approvalSubTypeValue","registrationType","registrationTypeValue","nregtypecode","sregtypename","registrationSubType","registrationSubTypeValue","nregsubtypecode","sregsubtypename","approvalConfigCode","treeVersionTemplate","userroleTemplateValue","getApprovalConfigurationVersion","versionData","searchedData","copyVersion","CopyRegType","CopyRegSubType","optCopyRegType","optCopyRegSubType","getCopySubType","comboData","setDefault","inputObj","event","flag","rowData","target","checked","url","napprovalfiltercode","ntransactionstatus","napprovaldecisioncode"],"mappings":"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","sourcesContent":["\r\nimport rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {constructOptionList, sortData} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\";\r\n\r\n\r\nexport function openModal(operation,napprovalconfigcode,napprovalsubtypecode, userInfo, ncontrolcode,ntreeversiontempcode){\r\n    return function (dispatch) {  \r\n        if(userInfo){\r\n            const inputData={\r\n                napprovalconfigcode:napprovalconfigcode,\r\n                napprovalsubtypecode:napprovalsubtypecode,\r\n                ntreeversiontempcode,\r\n                userinfo:userInfo\r\n            };\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approvalconfig/getUserRoleApprovalConfig\",inputData)\r\n            .then(response=> { \r\n                const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\r\n                const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\r\n                const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\r\n                const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\r\n                const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\r\n                const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\r\n                const checklistOptions = checklistOptionsMap.get(\"OptionList\");\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    openModal:true,operation,userRoleTree:response.data.userroletree,\r\n                                filterStatusOptions,\r\n                                validationStatusOptions,\r\n                                approvalStatusOptions,\r\n                                decisionStatusOptions,\r\n                                checklistOptions,\r\n                                approvalStatusValue:response.data.AvailableDecisionStatus?response.data.AvailableDecisionStatus:[],\r\n                                checklistValues:[],\r\n                                checklistVersionValues:[],\r\n                                actionStatus:response.data.actionStatus?response.data.actionStatus:[],\r\n                                roleConfig:response.data.roleConfig?sortData(response.data.roleConfig,'ascending','nsorter'):[],\r\n                                versionConfig:response.data.versionConfig?response.data.versionConfig:[],                                \r\n                                ncontrolcode,loading:false\r\n                                }});\r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n            \r\n        }\r\n    }\r\n    \r\n}\r\nexport function getApprovalConfigVersion(version,napprovalsubtypecode,userInfo,masterData){\r\n    return function (dispatch) {  \r\n        const  inputData = {\"napprovalconfigversioncode\":version.napproveconfversioncode,\r\n                            napprovalsubtypecode:napprovalsubtypecode,\r\n                            userinfo:userInfo\r\n                        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigVersion\",inputData)\r\n        .then(response=> { \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                masterData:{\r\n                ...masterData,\r\n                selectedVersion:response.data.selectedVersion,\r\n                showAccordion:true,\r\n                approvalconfigRoleNames:response.data.approvalconfigRoleNames,\r\n                selectedRole:response.data.approvalconfigRoleNames?response.data.approvalconfigRoleNames.length>0?sortData(response.data.approvalconfigRoleNames,'ascending','nlevelno')[0]:{}:{},\r\n                roleFilters:response.data.roleFilters,\r\n                roleValidations:response.data.roleValidations,\r\n                roleDecisions:response.data.roleDecisions,\r\n                roleActions:response.data.roleActions,\r\n                roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                versionConfig:response.data.versionConfig\r\n                },loading:false  \r\n            }}) \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })     \r\n    }\r\n\r\n}\r\nexport function getRoleDetails(inputData){\r\n    return function (dispatch) {  \r\n        let {role,masterData,napprovalsubtypecode,userinfo}=inputData\r\n        let inputParamData={\r\n            napprovalconfigrolecode:role.napprovalconfigrolecode,\r\n            napprovalsubtypecode,\r\n            userinfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigRoleDetails\",inputParamData)\r\n        .then(response=> { \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                masterData:{\r\n                    ...masterData,\r\n                selectedRole:role,\r\n                showAccordion:true,\r\n                roleFilters:response.data.roleFilters,\r\n                roleValidations:response.data.roleValidations,\r\n                roleDecisions:response.data.roleDecisions,\r\n                roleActions:response.data.roleActions,\r\n                roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                versionConfig:response.data.versionConfig\r\n                },loading:false  \r\n\r\n                                    \r\n            }}) \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })\r\n    }\r\n    \r\n    \r\n}\r\nexport function getApprovalConfigEditData(napprovalconfigversioncode,napprovalsubtypecode,userInfo,masterData, ncontrolcode){\r\n    return function (dispatch) { \r\n        if(masterData.selectedVersion[\"ntransactionstatus\"]===transactionStatus.APPROVED || \r\n                 masterData.selectedVersion[\"ntransactionstatus\"] === transactionStatus.RETIRED){\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORDTOEDIT\" }));\r\n         }else{ \r\n           if(userInfo){\r\n            const inputData={\r\n                napprovalconfigversioncode:napprovalconfigversioncode,\r\n                napprovalsubtypecode:napprovalsubtypecode,\r\n                userinfo:userInfo\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"approvalconfig/getApprovalConfigEditData\",inputData)\r\n            .then(response=> { \r\n                console.log('fdsgfdg',response)\r\n                const filterStatusOptionsMap = constructOptionList(response.data.availableFilterStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const validationStatusOptionsMap = constructOptionList(response.data.availableValidStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const approvalStatusOptionsMap = constructOptionList(response.data.approvalStatus || [], \"ntranscode\", \"stransdisplaystatus\", undefined, undefined, true);\r\n                const decisionStatusOptionsMap = constructOptionList(response.data.availableDecisionStatus || [], \"ntranscode\", \"stransstatus\", undefined, undefined, true);\r\n                const checklistOptionsMap = constructOptionList(response.data.checklist || [], \"nchecklistcode\", \"schecklistname\", undefined, undefined, true);\r\n                const filterStatusOptions = filterStatusOptionsMap.get(\"OptionList\");\r\n                const validationStatusOptions = validationStatusOptionsMap.get(\"OptionList\");\r\n                const approvalStatusOptions = approvalStatusOptionsMap.get(\"OptionList\");\r\n                const decisionStatusOptions = decisionStatusOptionsMap.get(\"OptionList\");\r\n                const checklistOptions = checklistOptionsMap.get(\"OptionList\");\r\n                let selectedRecord={}\r\n                response.data.userroletree.map( role=>{\r\n                    let filterStatus=[];\r\n                    let validationStatus=[];\r\n                    let decisionStatus=[];\r\n                    let actionArray=[];\r\n                    let filterStatusValues=[];\r\n                    \r\n                    response.data[`filterstatus_${role.nuserrolecode}`].map(data=>\r\n                        {\r\n                        filterStatusValues.push({value:data.ntranscode,label:data.stransstatus,item:data})\r\n                        filterStatus.push(data.ntranscode)\r\n                        return null;\r\n                        }\r\n                    )\r\n                    let validationStatusValues=[];\r\n                    response.data[`validationstatus_${role.nuserrolecode}`].map(data=>{\r\n                        validationStatusValues.push({value:data.ntranscode,label:data.stransstatus,item:data})\r\n                        validationStatus.push(data.ntranscode)\r\n                        return null;\r\n                    }\r\n                        \r\n                    )\r\n                    let decisionStatusValues=[];\r\n                    response.data[`decisionstatus_${role.nuserrolecode}`].map(data=>\r\n                        {\r\n                        decisionStatusValues.push({value:data.ntranscode,label:data.stransstatus,item:data});\r\n                        decisionStatus.push(data.ntranscode);\r\n                        return null;\r\n                        }\r\n                    )\r\n                    let checklistValues=[];\r\n                    response.data[`checklist_${role.nuserrolecode}`].map(data=>\r\n                        checklistValues.push({value:data.nchecklistcode,label:data.schecklistname,item:data})\r\n                        \r\n                    )\r\n                    let checklistVersionValues=[];\r\n                    response.data[`checklist_${role.nuserrolecode}`].map(data=>\r\n                        checklistVersionValues.push({value:data.nchecklistversioncode,label:data.schecklistversionname,item:data})\r\n                        \r\n                    )\r\n                    let nrecomretestneed=response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed\r\n                    let nrecomrecalcneed=response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed\r\n                    let nretestneed=response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed\r\n                    let nrecalcneed=response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed\r\n                    let ncorrectionneed=response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed\r\n\r\n                    nrecomretestneed===transactionStatus.YES?actionArray.push(transactionStatus.RECOMMENDRETEST):actionArray.push()\r\n                    nrecomrecalcneed===transactionStatus.YES?actionArray.push(transactionStatus.RECOMMENDRECALC):actionArray.push()\r\n                    nretestneed===transactionStatus.YES?actionArray.push(transactionStatus.RETEST):actionArray.push()\r\n                    nrecalcneed===transactionStatus.YES?actionArray.push(transactionStatus.RECALC):actionArray.push()\r\n                    ncorrectionneed===transactionStatus.YES?actionArray.push(transactionStatus.CORRECTION):actionArray.push()\r\n\r\n                    selectedRecord[role.nuserrolecode]={\r\n                        'IDS_PARTIALAPPROVAL':response.data[`roledetails_${role.nuserrolecode}`][0].npartialapprovalneed,\r\n                        'IDS_SECTIONWISEAPPROVE':response.data[`roledetails_${role.nuserrolecode}`][0].nsectionwiseapprovalneed,\r\n                        'IDS_RECOMMENDRETEST':response.data[`roledetails_${role.nuserrolecode}`][0].nrecomretestneed,\r\n                        'IDS_RECOMMENDRECALC':response.data[`roledetails_${role.nuserrolecode}`][0].nrecomrecalcneed,\r\n                        'IDS_RETEST':response.data[`roledetails_${role.nuserrolecode}`][0].nretestneed,\r\n                        'IDS_RECALC':response.data[`roledetails_${role.nuserrolecode}`][0].nrecalcneed,\r\n                        'IDS_AUTOAPPROVAL':response.data[`roledetails_${role.nuserrolecode}`][0].nautoapproval,\r\n                        'IDS_CORRECTION':response.data[`roledetails_${role.nuserrolecode}`][0].ncorrectionneed,\r\n                        'IDS_ESIGN':response.data[`roledetails_${role.nuserrolecode}`][0].nesignneed,\r\n                        'filterstatus':filterStatus,\r\n                        'decisionstatus':decisionStatus,\r\n                        'validationstatus':validationStatus,\r\n                        'approvalstatus':response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,\r\n                        'checklist':response.data[`checklist_${role.nuserrolecode}`][0].nchecklistversioncode\r\n                    }\r\n                    selectedRecord['sversionname']=response.data.versiondetails.sversionname\r\n                    response.data.versionConfig.map(action =>{\r\nif(action.ntranscode===81)\r\n{\r\n    selectedRecord[action.stransdisplaystatus]=response.data.versiondetails.nneedautoapproval\r\n}\r\nelse if(action.ntranscode===85)\r\n{\r\n    selectedRecord[action.stransdisplaystatus]=response.data.versiondetails.nneedautocomplete\r\n}\r\n\r\n                    })\r\n                   \r\n                  \r\n                    selectedRecord['IDS_JOBALLOCATION']=response.data.versiondetails.nneedjoballocation\r\n                    selectedRecord['IDS_AUTOALLOT']=response.data.versiondetails.nautoallot\r\n                    selectedRecord[`approvalstatus_${role.nuserrolecode}`]=[{value:response.data[`roledetails_${role.nuserrolecode}`][0].napprovalstatuscode,label:response.data[`roledetails_${role.nuserrolecode}`][0].sapprovalstatus}]\r\n                    selectedRecord[`filterstatus_${role.nuserrolecode}`]=filterStatusValues\r\n                    selectedRecord[`validationstatus_${role.nuserrolecode}`]=validationStatusValues\r\n                    selectedRecord[`decisionstatus_${role.nuserrolecode}`]=decisionStatusValues\r\n                    selectedRecord[`checklist_${role.nuserrolecode}`]=checklistValues\r\n                    selectedRecord[`checklistVersion_${role.nuserrolecode}`]=checklistVersionValues\r\n                    selectedRecord[`actionStatus_${role.nuserrolecode}`]=actionArray\r\n                    //selectedRecord[role.nuserrolecode]=response.data[`roledetails_${role.nuserrolecode}`][0]\r\n\r\n                    return null;\r\n                });\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    openModal:true,operation:\"update\",\r\n                    userRoleTree:sortData(response.data.userroletree,'ascending','nlevelno'),\r\n                    filterStatusOptions,\r\n                    validationStatusOptions,\r\n                    approvalStatusOptions,\r\n                    decisionStatusOptions,\r\n                    checklistOptions,\r\n                    actionStatus:response.data.actionStatus?response.data.actionStatus:[],\r\n                    roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                    versionConfig:response.data.versionConfig,\r\n                    selectedRecord,masterData,ncontrolcode,loading:false  \r\n\r\n                }})\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        } \r\n      }\r\n    }\r\n}\r\nexport function getFilterChange(inputParamData,oldState){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigFilter\",inputParamData.inputData)\r\n            .then(response =>{\r\n                \r\n                const RegistrationTypeListMap = constructOptionList( response.data.registrationtype || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\r\n                const RegistrationSubTypeListMap = constructOptionList( response.data.registrationsubtype || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\r\n                let RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n                let RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    masterData:{\r\n                        ...inputParamData.masterData,\r\n                        approvalsubtype:oldState.approvalsubtype,\r\n                        approvalSubTypeValue:oldState.approvalSubTypeValue,\r\n                        RegistrationTypeList:response.data.registrationtype?RegistrationTypeList:oldState.RegistrationTypeList,\r\n                        RegistrationSubTypeList:response.data.registrationsubtype?RegistrationSubTypeList:oldState.RegistrationSubTypeList,\r\n                        registrationType:response.data.registrationtype&&response.data.registrationtype.length>0?sortData(response.data.registrationtype,\"ascending\",\"nregtypecode\"):oldState.registrationtype,\r\n                        registrationTypeValue:response.data.registrationtype?response.data.registrationtype.length>0?{value:response.data.registrationtype[0].nregtypecode,label:response.data.registrationtype[0].sregtypename}:oldState.registrationTypeValue:oldState.registrationTypeValue,\r\n                        registrationSubType:response.data.registrationsubtype&&response.data.registrationsubtype.length>0?sortData(response.data.registrationsubtype,\"descending\",\"nregsubtypecode\"):oldState.registrationsubtype,\r\n                        registrationSubTypeValue:response.data.registrationsubtype?response.data.registrationsubtype.length>0?{value:response.data.registrationsubtype[0].nregsubtypecode,label:response.data.registrationsubtype[0].sregsubtypename}:oldState.registrationSubTypeValue:oldState.registrationSubTypeValue,\r\n                        approvalConfigCode:response.data.approvalConfigCode,\r\n                        treeVersionTemplate:response.data.treeVersionTemplate,\r\n                        userroleTemplateValue: response.data.userroleTemplateValue,\r\n\r\n                        // versionData:sortData(response.data.versionData),\r\n                        // selectedVersion:response.data.selectedVersion,\r\n                        // approvalconfigRoleNames:response.data.approvalconfigRoleNames,\r\n                        // showAccordion:true,\r\n                        // roleFilters:response.data.roleFilters,\r\n                        // roleValidations:response.data.roleValidations,\r\n                        // roleDecisions:response.data.roleDecisions,\r\n                        // roleActions:response.data.roleActions,\r\n                        // roleConfig:response.data.roleConfig&&response.data.roleConfig.length>0&&sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                        // versionConfig:response.data.versionConfig,\r\n                        // searchedData:undefined\r\n                    },loading:false\r\n                    \r\n\r\n                }})\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovalConfigurationVersion(inputParamData){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"approvalconfig/getApprovalConfigVersion\",inputParamData.inputData)\r\n            .then(response =>{\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                    masterData:{\r\n                        ...inputParamData.masterData,\r\n                        versionData:sortData(response.data.versionData),\r\n                        selectedVersion:response.data.selectedVersion,\r\n                        approvalconfigRoleNames:response.data.approvalconfigRoleNames,\r\n                        selectedRole:response.data.approvalconfigRoleNames?response.data.approvalconfigRoleNames.length>0?sortData(response.data.approvalconfigRoleNames,'ascending','nlevelno')[0]:{}:{},\r\n                        showAccordion:true,\r\n                        roleFilters:response.data.roleFilters,\r\n                        roleValidations:response.data.roleValidations,\r\n                        roleDecisions:response.data.roleDecisions,\r\n                        roleActions:response.data.roleActions,\r\n                        roleConfig:response.data.roleConfig&&response.data.roleConfig.length>0&&sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                        versionConfig:response.data.versionConfig,\r\n                        searchedData:undefined\r\n                    },loading:false\r\n                    \r\n\r\n                }})\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function copyVersion(napprovalsubtypecode,userInfo,masterData,ncontrolcode){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post('approvalconfig/getCopyRegType',{napprovalsubtypecode:napprovalsubtypecode,userinfo:userInfo})\r\n                .then(response =>{\r\n                    let selectedRecord={};\r\n                    const RegistrationTypeListMap = constructOptionList(response.data.CopyRegType || [], \"nregtypecode\", \"sregtypename\", 'ascending', 'nsorter', false);\r\n                    const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\r\n                    let optCopyRegType = RegistrationTypeListMap.get(\"OptionList\");\r\n                    let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\r\n                    selectedRecord['regtype']=response.data.CopyRegType.length>0?{value:response.data.CopyRegType[0].nregtypecode,label:response.data.CopyRegType[0].sregtypename}:[]\r\n                    selectedRecord['regsubtype']=response.data.CopyRegSubType?response.data.CopyRegSubType.length>0?{value:response.data.CopyRegSubType[0].nregsubtypecode,label:response.data.CopyRegSubType[0].sregsubtypename}:[]:[]\r\n                    dispatch({type: DEFAULT_RETURN, payload:{\r\n                        operation:\"copy\",openModal:true,\r\n                        optCopyRegSubType,\r\n                        optCopyRegType,\r\n                        selectedRecord,\r\n                        masterData,ncontrolcode,loading:false  \r\n                    }})\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n\r\n}\r\nexport function getCopySubType(comboData,selectedRecord,userInfo,masterData,optCopyRegType){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post('approvalconfig/getCopyRegSubType',{nregtypecode:comboData.value,userinfo:userInfo})\r\n        .then(response =>{\r\n            const RegistrationSubTypeListMap = constructOptionList(response.data.CopyRegSubType || [], \"nregsubtypecode\", \"sregsubtypename\", 'ascending', 'nsorter', false);\r\n            let optCopyRegSubType = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            selectedRecord['regsubtype']=response.data.CopyRegSubType.length>0?{value:response.data.CopyRegSubType[0].nregsubtypecode,label:response.data.CopyRegSubType[0].sregsubtypename}:[]\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                operation:\"copy\",openModal:true,loading:false  ,\r\n                optCopyRegType,\r\n                optCopyRegSubType,\r\n                selectedRecord,\r\n                masterData\r\n            }})\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500) {\r\n                toast.error(error.message);\r\n            }\r\n            else {\r\n                toast.warn(error.response.data);\r\n            }\r\n        })\r\n    }\r\n}\r\nexport function setDefault(inputObj,event){\r\n    let {flag,napprovalconfigrolecode,napprovalsubtypecode,userInfo,masterData}=inputObj;\r\n    let rowData=inputObj.selectedRecord\r\n    return function(dispatch){\r\n        if(event.target.checked){\r\n            let inputData={}\r\n            let url='';\r\n            if(flag===1){\r\n                inputData={\r\n                    napprovalconfigrolecode:napprovalconfigrolecode,\r\n                    napprovalfiltercode:rowData.napprovalfiltercode,\r\n                    napprovalsubtypecode:napprovalsubtypecode,\r\n                    ntransactionstatus:rowData.ntransactionstatus,\r\n                    napprovalconfigversioncode:masterData.selectedVersion.napprovalconfigversioncode,\r\n                    userinfo:userInfo\r\n                }\r\n                url='approvalconfig/setDefaultFilterStatus'\r\n            }else{\r\n                inputData={\r\n                    napprovalconfigrolecode:napprovalconfigrolecode,\r\n                    napprovaldecisioncode:rowData.napprovaldecisioncode,\r\n                    napprovalsubtypecode:napprovalsubtypecode,\r\n                    ntransactionstatus:rowData.ntransactionstatus,\r\n                    napprovalconfigversioncode:masterData.selectedVersion.napprovalconfigversioncode,\r\n                    userinfo:userInfo\r\n                }\r\n                url='approvalconfig/setDefaultDecisionStatus'\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(url,inputData)\r\n            .then(response =>{\r\n                dispatch({type: DEFAULT_RETURN, payload:{\r\n                \r\n                    masterData:{\r\n                        ...masterData,\r\n                        showAccordion:true,\r\n                        roleFilters:response.data.roleFilters,\r\n                        roleValidations:response.data.roleValidations,\r\n                        roleDecisions:response.data.roleDecisions,\r\n                        roleActions:response.data.roleActions,\r\n                        roleConfig:sortData(response.data.roleConfig,'ascending','nsorter'),\r\n                        versionConfig:response.data.versionConfig\r\n                    },loading:false  \r\n                }})\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}