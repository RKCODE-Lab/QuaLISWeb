{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\HolidayPlanner.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getHoildaysYear, selectCheckBoxYear, getCommonHolidays, filterColumnData, getPublicHolidays, sendApproveYearVersion, getCommonAndPublicHolidays, getUserBasedHolidays } from '../../actions';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { ContentPanel } from '../../pages/product/product.styled';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport HolidayPlannerTab from '../../pages/configurationmaster/HolidayPlannerTab';\nimport AddYear from '../../pages/configurationmaster/AddYear';\nimport { transactionStatus } from '../../components/Enumeration'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n// import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass HolidayPlanner extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteHolidaysYear(\"delete\", deleteId));\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.editHolidayYear = editId => {\n      // let checkApproved = 0;\n      // this.props.Login.masterData.YearVersion.forEach(item => {\n      //     if (item.ntransactionstatus === transactionStatus.APPROVED) {\n      //         checkApproved = 1;\n      //     }\n      // }\n      // )\n      // if (checkApproved === 0) {\n      this.props.getHoildaysYear(\"IDS_HOLIDAYPLANNER\", \"update\", \"nyearcode\", this.props.Login.masterData, this.props.Login.userInfo, editId); // }\n      // else {\n      //     toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITONEOFTHEVERSIONISAPPROVED\" }));\n      // }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"holidayplanner\",\n        methodUrl: \"HolidayPlanner\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"IDS_HOLIDAYPLANNER\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // if (this.state.selectedRecord[\"syear\"] === 0 || this.state.selectedRecord[\"syear\"].toString().length < 4) {\n      //     toast.warn(intl.formatMessage({ id: \"IDS_INVALIDYEAR\" }));\n      // }\n      // else {\n      let inputData = [];\n      let postParam = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let fieldList = [\"nyearcode\", \"sdescription\"];\n      const holidayYear = this.state.selectedRecord[\"syear\"];\n\n      if (this.props.Login.operation === \"update\") {\n        postParam = {\n          inputListName: \"HolidayYear\",\n          selectedObject: \"selectedYear\",\n          primaryKeyField: \"nyearcode\"\n        };\n        inputData[\"holidaysyear\"] = {};\n        fieldList.map(item => {\n          return inputData[\"holidaysyear\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n        inputData[\"holidaysyear\"][\"syear\"] = holidayYear.getFullYear();\n      } else {\n        inputData[\"holidaysyear\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        fieldList.map(item => {\n          return inputData[\"holidaysyear\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n        inputData[\"holidaysyear\"][\"syear\"] = holidayYear.getFullYear();\n      }\n\n      const inputParam = {\n        classUrl: \"holidayplanner\",\n        methodUrl: \"HolidaysYear\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.DeleteHolidaysYear = (operation, ncontrolCode) => {\n      let inputData = [];\n      inputData[\"holidaysyear\"] = this.props.Login.masterData.selectedYear;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"HolidaysYear\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\"\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"HolidayPlanner\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      masterStatus: \"\",\n      error: \"\",\n      HolidayYear: [],\n      operation: \"\",\n      selectedYear: undefined,\n      screenName: \"HolidayPlanner\",\n      CurrentYearVersion: 0,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    // let userStatusCSS = \"\";\n    // if (this.props.Login.masterData.selectedYear && this.props.Login.masterData.selectedYear.ntransactionstatus === 8) {\n    //     userStatusCSS = \"outline-secondary\";\n    // }\n    // else if (this.props.Login.masterData.selectedYear && this.props.Login.masterData.selectedYear.ntransactionstatus === 22) {\n    //     userStatusCSS = \"outline-success\";\n    // }\n    // else if (this.props.Login.masterData.selectedYear && this.props.Login.masterData.selectedYear.ntransactionstatus === 53) {\n    //     userStatusCSS = \"outline-correction\";\n    // } else {\n    //     userStatusCSS = \"outline-Final\";\n    // }\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_YEAR\",\n      \"mandatory\": true,\n      \"dataField\": \"syear\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const addId = this.state.controlMap.has(\"AddHolidaysYear\") && this.state.controlMap.get(\"AddHolidaysYear\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditHolidaysYear\") && this.state.controlMap.get(\"EditHolidaysYear\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteHolidaysYear\") && this.state.controlMap.get(\"DeleteHolidaysYear\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"HolidayYear\",\n      selectedObject: \"selectedYear\",\n      primaryKeyField: \"nyearcode\",\n      fetchUrl: \"holidayplanner/getSelectionAllHolidayPlanner\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"syear\", \"sdescription\"]\n    };\n    const mandatoryFields = [];\n    this.extractedColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\n    , {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_HOLIDAYPLANNER\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.HolidayYear,\n      getMasterDetail: HolidayYear => this.props.selectCheckBoxYear(HolidayYear, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.selectedYear,\n      primaryKeyField: \"nyearcode\",\n      mainField: \"syear\" // firstField=\"sdescription\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.getHoildaysYear(\"IDS_HOLIDAYPLANNER\", \"create\", \"nyearcode\", this.props.Login.masterData, this.props.Login.userInfo, 779),\n      isMultiSelecct: false,\n      hideCheckLabel: true,\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 34\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.HolidayYear && this.props.Login.masterData.HolidayYear.length > 0 && this.props.Login.masterData.selectedYear ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.selectedYear.syear), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip-list-wrap\"\n      ,\n      onClick: e => this.editHolidayYear(editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      className: \"ActionIconColor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip-list-wrap\"\n      ,\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 65\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: 'IDS_DESCRIPTION',\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.selectedYear.sdescription && this.props.Login.masterData.selectedYear.sdescription)))), /*#__PURE__*/React.createElement(HolidayPlannerTab, {\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData,\n      crudMaster: this.props.crudMaster,\n      errorCode: this.props.Login.errorCode,\n      masterStatus: this.props.Login.masterStatus,\n      openChildModal: this.props.Login.openChildModal,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.selectedRecord,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      validateEsignCredential: this.props.validateEsignCredential,\n      loadEsign: this.props.Login.loadEsign,\n      controlMap: this.state.controlMap,\n      CurrentYearVersion: this.props.Login.CurrentYearVersion,\n      getCommonHolidays: this.props.getCommonHolidays,\n      getPublicHolidays: this.props.getPublicHolidays,\n      getUserBasedHolidays: this.props.getUserBasedHolidays,\n      sendApproveYearVersion: this.props.sendApproveYearVersion,\n      getCommonAndPublicHolidays: this.props.getCommonAndPublicHolidays,\n      selectedId: this.props.Login.selectedId,\n      timeZoneList: this.props.Login.timeZoneList || [],\n      setting: this.props.Login.settings,\n      Users: this.props.Login.Users,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 49\n      }\n    }))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddYear, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleFilterDateChange: this.handleFilterDateChange,\n        operation: this.props.operation,\n        inputParam: this.props.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getHoildaysYear,\n  selectCheckBoxYear,\n  getCommonHolidays,\n  filterColumnData,\n  getPublicHolidays,\n  sendApproveYearVersion,\n  getCommonAndPublicHolidays,\n  getUserBasedHolidays\n})(injectIntl(HolidayPlanner));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/configurationmaster/HolidayPlanner.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","toast","FormattedMessage","FontAwesomeIcon","faPencilAlt","faTrashAlt","ReadOnlyText","SlideOutModal","connect","injectIntl","callService","crudMaster","validateEsignCredential","updateStore","getHoildaysYear","selectCheckBoxYear","getCommonHolidays","filterColumnData","getPublicHolidays","sendApproveYearVersion","getCommonAndPublicHolidays","getUserBasedHolidays","ListMaster","ContentPanel","showEsign","getControlMap","Esign","DEFAULT_RETURN","HolidayPlannerTab","AddYear","transactionStatus","ConfirmMessage","mapStateToProps","state","Login","HolidayPlanner","constructor","props","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","ConfirmDelete","deleteId","confirmMessage","confirm","intl","formatMessage","id","DeleteHolidaysYear","handleFilterDateChange","dateName","dateValue","Date","setState","editHolidayYear","editId","masterData","userInfo","reloadData","searchRef","current","value","inputParam","inputData","classUrl","methodUrl","displayName","onSaveClick","saveType","formRef","postParam","undefined","fieldList","holidayYear","inputListName","selectedObject","primaryKeyField","map","item","getFullYear","nmastersitecode","userRoleControlRights","nformcode","ncontrolCode","screenData","selectedYear","screenName","onNumericInputOnChange","name","onInputOnChange","event","target","type","checked","YES","NO","ACTIVE","DEACTIVE","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","dataState","skip","take","dataResult","masterStatus","error","HolidayYear","CurrentYearVersion","controlMap","Map","createRef","getDerivedStateFromProps","warn","render","extractedColumnList","addId","has","get","ncontrolcode","filterParam","fetchUrl","fecthInputObject","userinfo","searchFieldList","mandatoryFields","forEach","mandatory","push","searchedData","length","syear","indexOf","e","sdescription","errorCode","openChildModal","timeZoneList","settings","Users","componentDidUpdate","previousProps","Object","values","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getHoildaysYear, selectCheckBoxYear,\r\n    getCommonHolidays, filterColumnData,\r\n    getPublicHolidays, sendApproveYearVersion, getCommonAndPublicHolidays,getUserBasedHolidays\r\n} from '../../actions';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { ContentPanel } from '../../pages/product/product.styled';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport HolidayPlannerTab from '../../pages/configurationmaster/HolidayPlannerTab';\r\nimport AddYear from '../../pages/configurationmaster/AddYear';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass HolidayPlanner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        this.state = {\r\n            selectedRecord: {}, dataResult: [],\r\n            dataState: dataState,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            HolidayYear: [],\r\n            operation: \"\",\r\n            selectedYear: undefined,\r\n            screenName: \"HolidayPlanner\",\r\n            CurrentYearVersion: 0,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n\r\n        };\r\n\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    render() {\r\n\r\n        // let userStatusCSS = \"\";\r\n        // if (this.props.Login.masterData.selectedYear && this.props.Login.masterData.selectedYear.ntransactionstatus === 8) {\r\n        //     userStatusCSS = \"outline-secondary\";\r\n        // }\r\n        // else if (this.props.Login.masterData.selectedYear && this.props.Login.masterData.selectedYear.ntransactionstatus === 22) {\r\n        //     userStatusCSS = \"outline-success\";\r\n        // }\r\n        // else if (this.props.Login.masterData.selectedYear && this.props.Login.masterData.selectedYear.ntransactionstatus === 53) {\r\n        //     userStatusCSS = \"outline-correction\";\r\n        // } else {\r\n        //     userStatusCSS = \"outline-Final\";\r\n        // }\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_YEAR\", \"mandatory\": true, \"dataField\": \"syear\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n        ];\r\n\r\n        const addId = this.state.controlMap.has(\"AddHolidaysYear\") && this.state.controlMap.get(\"AddHolidaysYear\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditHolidaysYear\") && this.state.controlMap.get(\"EditHolidaysYear\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteHolidaysYear\") && this.state.controlMap.get(\"DeleteHolidaysYear\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"HolidayYear\", selectedObject: \"selectedYear\", primaryKeyField: \"nyearcode\",\r\n            fetchUrl: \"holidayplanner/getSelectionAllHolidayPlanner\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"syear\", \"sdescription\"]\r\n        };\r\n\r\n        const mandatoryFields = [];\r\n        this.extractedColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb\">\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_HOLIDAYPLANNER\" })}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.HolidayYear}\r\n                                getMasterDetail={(HolidayYear) => this.props.selectCheckBoxYear(HolidayYear, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.selectedYear}\r\n                                primaryKeyField=\"nyearcode\"\r\n                                mainField=\"syear\"\r\n                                // firstField=\"sdescription\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.props.getHoildaysYear(\"IDS_HOLIDAYPLANNER\", \"create\", \"nyearcode\", this.props.Login.masterData, this.props.Login.userInfo, 779)}\r\n                                isMultiSelecct={false}\r\n                                hideCheckLabel={true}\r\n                                hidePaging={true}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            <Row><Col md={12}>\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    {this.props.Login.masterData.HolidayYear && this.props.Login.masterData.HolidayYear.length > 0 && this.props.Login.masterData.selectedYear ?\r\n                                        <Card className=\"border-0\">\r\n                                            <Card.Header>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-list-wrap\" /> */}\r\n                                                <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedYear.syear}</Card.Title>\r\n                                                <Card.Subtitle>\r\n\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        </h2>\r\n                                                        {/* <Col md='6'> */}\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n\r\n                                                        <div className=\"d-inline \">\r\n\r\n                                                            {/* <ProductList className=\"d-inline dropdown badget_menu\"> */}\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                              //  data-for=\"tooltip-list-wrap\"\r\n                                                                onClick={(e) => this.editHolidayYear(editId)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\"\r\n                                                                />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                             //   data-for=\"tooltip-list-wrap\"\r\n                                                                onClick={() => this.ConfirmDelete(deleteId)}>\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    handleClickDelete={() => this.DeleteHolidaysYear(\"delete\", deleteId)}\r\n                                                                /> */}\r\n                                                            </Nav.Link>\r\n                                                            {/* </ProductList> */}\r\n\r\n                                                        </div>\r\n                                                        {/* </Tooltip> */}\r\n                                                        {/* </Col> */}\r\n                                                    </div>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id={'IDS_DESCRIPTION'} message=\"Description\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.selectedYear.sdescription && this.props.Login.masterData.selectedYear.sdescription}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                {/* </Card.Body>\r\n                                            <Card.Body> */}\r\n                                                <HolidayPlannerTab\r\n                                                    operation={this.props.Login.operation}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    screenName={this.props.Login.screenName}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    masterData={this.props.Login.masterData}\r\n                                                    crudMaster={this.props.crudMaster}\r\n                                                    errorCode={this.props.Login.errorCode}\r\n                                                    masterStatus={this.props.Login.masterStatus}\r\n                                                    openChildModal={this.props.Login.openChildModal}\r\n                                                    updateStore={this.props.updateStore}\r\n                                                    selectedRecord={this.props.Login.selectedRecord}\r\n                                                    ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    esignRights={this.props.Login.userRoleControlRights}\r\n                                                    screenData={this.props.Login.screenData}\r\n                                                    validateEsignCredential={this.props.validateEsignCredential}\r\n                                                    loadEsign={this.props.Login.loadEsign}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    CurrentYearVersion={this.props.Login.CurrentYearVersion}\r\n                                                    getCommonHolidays={this.props.getCommonHolidays}\r\n                                                    getPublicHolidays={this.props.getPublicHolidays}\r\n                                                    getUserBasedHolidays={this.props.getUserBasedHolidays}\r\n                                                    sendApproveYearVersion={this.props.sendApproveYearVersion}\r\n                                                    getCommonAndPublicHolidays={this.props.getCommonAndPublicHolidays}\r\n                                                    selectedId={this.props.Login.selectedId}\r\n                                                    timeZoneList={this.props.Login.timeZoneList || []}\r\n                                                    setting = {this.props.Login.settings}\r\n                                                    Users={this.props.Login.Users}\r\n                                                />\r\n                                            </Card.Body>\r\n                                        </Card> : \"\"}\r\n                                </ContentPanel>\r\n                            </Col></Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddYear\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                operation={this.props.operation}\r\n                                inputParam={this.props.inputParam}\r\n                            />}\r\n                    />}\r\n            </>\r\n\r\n        );\r\n    }\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }), () => this.DeleteHolidaysYear(\"delete\", deleteId));\r\n    }\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    editHolidayYear = (editId) => {\r\n\r\n        // let checkApproved = 0;\r\n        // this.props.Login.masterData.YearVersion.forEach(item => {\r\n        //     if (item.ntransactionstatus === transactionStatus.APPROVED) {\r\n        //         checkApproved = 1;\r\n        //     }\r\n        // }\r\n        // )\r\n        // if (checkApproved === 0) {\r\n        this.props.getHoildaysYear(\"IDS_HOLIDAYPLANNER\", \"update\", \"nyearcode\", this.props.Login.masterData, this.props.Login.userInfo, editId)\r\n        // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITONEOFTHEVERSIONISAPPROVED\" }));\r\n        // }\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"holidayplanner\",\r\n            methodUrl: \"HolidayPlanner\",\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: \"IDS_HOLIDAYPLANNER\"\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        // if (this.state.selectedRecord[\"syear\"] === 0 || this.state.selectedRecord[\"syear\"].toString().length < 4) {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_INVALIDYEAR\" }));\r\n        // }\r\n        // else {\r\n        let inputData = [];\r\n\r\n        let postParam = undefined;\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let fieldList = [\"nyearcode\", \"sdescription\"];\r\n        const holidayYear = this.state.selectedRecord[\"syear\"]\r\n        if (this.props.Login.operation === \"update\") {\r\n\r\n            postParam = { inputListName: \"HolidayYear\", selectedObject: \"selectedYear\", primaryKeyField: \"nyearcode\" };\r\n\r\n            inputData[\"holidaysyear\"] = {};\r\n            fieldList.map(item => {\r\n                return inputData[\"holidaysyear\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"holidaysyear\"][\"syear\"] = holidayYear.getFullYear();\r\n        }\r\n        else {\r\n            inputData[\"holidaysyear\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"holidaysyear\"][item] = this.state.selectedRecord[item]?this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"holidaysyear\"][\"syear\"] = holidayYear.getFullYear();\r\n        }\r\n        const inputParam = {\r\n            classUrl: \"holidayplanner\",\r\n            methodUrl: \"HolidaysYear\",\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation, saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    DeleteHolidaysYear = (operation, ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        inputData[\"holidaysyear\"] = this.props.Login.masterData.selectedYear;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        const inputParam = {\r\n            methodUrl: \"HolidaysYear\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\"\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"HolidayPlanner\", operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getHoildaysYear, selectCheckBoxYear,\r\n    getCommonHolidays, filterColumnData,\r\n    getPublicHolidays, sendApproveYearVersion, getCommonAndPublicHolidays,getUserBasedHolidays\r\n})(injectIntl(HolidayPlanner));"]},"metadata":{},"sourceType":"module"}