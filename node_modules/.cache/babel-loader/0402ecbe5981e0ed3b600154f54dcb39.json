{"ast":null,"code":"import React from'react';import{Row,Col,Form}from'react-bootstrap';import{injectIntl}from'react-intl';import{transactionStatus,attachmentType,REPORTTYPE}from'../../../components/Enumeration';import CustomSwitch from'../../../components/custom-switch/custom-switch.component';import DropZone from'../../../components/dropzone/dropzone.component';var AddReportDetail=function AddReportDetail(props){var _props$selectedRecord=props.selectedRecord,sreportformatdetail=_props$selectedRecord.sreportformatdetail,disabled=_props$selectedRecord.disabled;return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(CustomSwitch,{name:\"nisplsqlquery\",type:\"switch\",label:props.intl.formatMessage({id:\"IDS_ISPLSQLQUERY\"}),placeholder:props.intl.formatMessage({id:\"IDS_ISPLSQLQUERY\"}),value:props.selectedRecord[\"nisplsqlquery\"]===transactionStatus.YES?true:false,isMandatory:false,required:false,checked:props.selectedRecord[\"nisplsqlquery\"]===transactionStatus.YES?true:false,onChange:function onChange(event){return props.onInputOnChange(event);}}),props.reportMaster.nreporttypecode&&props.reportMaster.nreporttypecode===REPORTTYPE.CONTROLBASED//||  props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\n?/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(Form.Check,{name:\"sreportformatdetail\",type:\"radio\",id:\"Addviewer\",label:props.intl.formatMessage({id:\"IDS_VIEWER\"}),inline:true,value:\"viewer\",onChange:function onChange(event){return props.onInputOnChange(event);},checked:sreportformatdetail===\"viewer\"?true:false//disabled={props.operation == \"update\" ? ' ' : disabled}\n,disabled:disabled}),/*#__PURE__*/React.createElement(Form.Check,{name:\"sreportformatdetail\",type:\"radio\",id:\"AddPDF\",label:props.intl.formatMessage({id:\"IDS_PDF\"}),inline:true,value:\"pdf\",defaultChecked:true,onChange:function onChange(event){return props.onInputOnChange(event);}//checked={sreportformat === \"pdf\" ? true : false}\n,checked:sreportformatdetail===\"pdf\"?true:sreportformatdetail===undefined?true:false,disabled:disabled}),/*#__PURE__*/React.createElement(Form.Check,{name:\"sreportformatdetail\",type:\"radio\",id:\"Addhtml\",label:props.intl.formatMessage({id:\"IDS_HTML\"}),inline:true,value:\"html\",onChange:function onChange(event){return props.onInputOnChange(event);},checked:sreportformatdetail===\"html\"?true:false,disabled:disabled}),/*#__PURE__*/React.createElement(Form.Check,{name:\"sreportformatdetail\",type:\"radio\",id:\"AddXLS\",label:props.intl.formatMessage({id:\"IDS_XLS\"}),inline:true,value:\"xls\",onChange:function onChange(event){return props.onInputOnChange(event);},checked:sreportformatdetail===\"xls\"?true:false,disabled:disabled}),/*#__PURE__*/React.createElement(Form.Check,{name:\"sreportformatdetail\",type:\"radio\",id:\"AddDOC\",label:props.intl.formatMessage({id:\"IDS_DOC\"}),inline:true,value:\"doc\",onChange:function onChange(event){return props.onInputOnChange(event);},checked:sreportformatdetail===\"doc\"?true:false,disabled:disabled})):\"\",/*#__PURE__*/React.createElement(React.Fragment,null),Object.keys(props.selectedRecord).length>0&&/*#__PURE__*/React.createElement(DropZone,{label:props.intl.formatMessage({id:\"IDS_FILE\"}),maxFiles:1,accept:\".jrxml,.mrt\",minSize:0,maxSize:10,fileNameLength:150,onDrop:function onDrop(event){return props.onDropImage(event,\"sfilename\");},multiple:false,isMandatory:true,editFiles:props.selectedRecord?props.selectedRecord:{},attachmentTypeCode:props.operation===\"update\"?attachmentType.OTHERS:\"\",fileName:\"sfilename\",deleteAttachment:function deleteAttachment(){return props.deleteFile(\"sfilename\");},actionType:props.actionType})));};export default injectIntl(AddReportDetail);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/reports/reportsconfig/AddReportDetail.js"],"names":["React","Row","Col","Form","injectIntl","transactionStatus","attachmentType","REPORTTYPE","CustomSwitch","DropZone","AddReportDetail","props","selectedRecord","sreportformatdetail","disabled","intl","formatMessage","id","YES","event","onInputOnChange","reportMaster","nreporttypecode","CONTROLBASED","undefined","Object","keys","length","onDropImage","operation","OTHERS","deleteFile","actionType"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus, attachmentType ,REPORTTYPE} from '../../../components/Enumeration';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport DropZone from '../../../components/dropzone/dropzone.component';\r\n\r\nconst AddReportDetail = (props) => {\r\n\r\n        const { sreportformatdetail, disabled } = props.selectedRecord;\r\n        return (\r\n                <Row>\r\n                        <Col md={12}>\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS && props.reportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE ? <>             \r\n                                            \r\n                            <FormSelectSearch\r\n                                        name={\"ncoareporttypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_COAREPORTTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.coaReportTypeList || []}\r\n                                        optionId={\"ncoareporttypecode\"}\r\n                                        optionValue={\"scoareporttypename\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"ncoareporttypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"ncoareporttypecode\")}                               \r\n                                />                             */}\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?<>\r\n                                <FormSelectSearch\r\n                                        name={\"nreportdecisiontypecode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_DECISIONTYPE\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                              \r\n                                        options={ props.decisionTypeList || []}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nreportdecisiontypecode\"]:\"\"}\r\n                                        isMandatory={true}\r\n                                        isMulti={false}\r\n                                        isClearable={false}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nreportdecisiontypecode\")}                               \r\n                                />   */}\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"].isneedsection === transactionStatus.YES ? \r\n                                <FormSelectSearch\r\n                                        name={\"nsectioncode\"}\r\n                                        formLabel={ props.intl.formatMessage({ id:\"IDS_LAB\"})}                              \r\n                                        placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                        options={ props.sectionList || []}\r\n                                        optionId={\"nsectioncode\"}\r\n                                        optionValue={\"ssectionname\"}\r\n                                        value = { props.selectedRecord ? props.selectedRecord[\"nsectioncode\"]:\"\"}\r\n                                        isMandatory={false}\r\n                                        isMulti={false}\r\n                                        isClearable={true}\r\n                                        isSearchable={true}                                \r\n                                        isDisabled={false}\r\n                                        closeMenuOnSelect={true}\r\n                                        alphabeticalSort={true}\r\n                                        onChange = {(event)=> props.onComboChange(event, \"nsectioncode\")}                               \r\n                                />  \r\n                                : \"\"}  */}\r\n                                {/* </> \r\n                                 :\"\"}      */}\r\n\r\n                                {/* {props.reportMaster[\"nreporttypecode\"] &&\r\n                            props.reportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ? \r\n                            <><FormSelectSearch\r\n                                                name={\"ncertificatetypecode\"}\r\n                                                formLabel={ props.intl.formatMessage({ id:\"IDS_CERTIFICATETYPE\"})}                              \r\n                                                placeholder={ props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                               \r\n                                                options={ props.certificateTypeList || []}\r\n                                                value = { props.selectedRecord ? props.selectedRecord[\"ncertificatetypecode\"]:\"\"}\r\n                                                isMandatory={true}\r\n                                                isMulti={false}\r\n                                                isClearable={false}\r\n                                                isSearchable={true}                                \r\n                                                isDisabled={false}\r\n                                                closeMenuOnSelect={true}\r\n                                                onChange = {(event)=> props.onComboChange(event, \"ncertificatetypecode\")}                               \r\n                                        /> \r\n                                <FormInput\r\n                                        label={props.intl.formatMessage({ id:\"IDS_REPORTBATCHTYPE\"})}\r\n                                        name={\"sbatchdisplayname\"}\r\n                                        type=\"text\"\r\n                                        placeholder={props.intl.formatMessage({ id:\"sbatchdisplayname\"})}\r\n                                        value ={props.selectedRecord ? props.selectedRecord[\"sbatchdisplayname\"] : \"\"}\r\n                                        isMandatory = {false}\r\n                                        required={false}\r\n                                        readOnly={true}\r\n                                        onChange={(event)=> props.onInputOnChange(event)}\r\n                                />  </>  \r\n                                         :\"\"}                   \r\n                       \r\n                       </>\r\n                    :\"\"} */}\r\n\r\n\r\n                                <CustomSwitch\r\n                                        name={\"nisplsqlquery\"}\r\n                                        type=\"switch\"\r\n                                        label={props.intl.formatMessage({ id: \"IDS_ISPLSQLQUERY\" })}\r\n                                        placeholder={props.intl.formatMessage({ id: \"IDS_ISPLSQLQUERY\" })}\r\n                                        value={props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false}\r\n                                        isMandatory={false}\r\n                                        required={false}\r\n                                        checked={props.selectedRecord[\"nisplsqlquery\"] === transactionStatus.YES ? true : false}\r\n                                        onChange={(event) => props.onInputOnChange(event)}\r\n                                />\r\n                                 {props.reportMaster.nreporttypecode &&\r\n                                        (props.reportMaster.nreporttypecode === REPORTTYPE.CONTROLBASED\r\n                                                //||  props.selectedRecord[\"nreporttypecode\"].value === REPORTTYPE.COAPREVIEW\r\n                                        ) ?\r\n\r\n                                <Col md={12}>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"Addviewer\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_VIEWER\" })}\r\n                                                inline={true}\r\n                                                value='viewer'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"viewer\" ? true : false}\r\n                                                //disabled={props.operation == \"update\" ? ' ' : disabled}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"AddPDF\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_PDF\" })}\r\n                                                inline={true}\r\n                                                value='pdf'\r\n                                                defaultChecked\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                //checked={sreportformat === \"pdf\" ? true : false}\r\n                                                checked={sreportformatdetail === \"pdf\" ? true : sreportformatdetail === undefined ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"Addhtml\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_HTML\" })}\r\n                                                inline={true}\r\n                                                value='html'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"html\" ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"AddXLS\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_XLS\" })}\r\n                                                inline={true}\r\n                                                value='xls'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"xls\" ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                        <Form.Check\r\n                                                name=\"sreportformatdetail\"\r\n                                                type=\"radio\"\r\n                                                id=\"AddDOC\"\r\n                                                label={props.intl.formatMessage({ id: \"IDS_DOC\" })}\r\n                                                inline={true}\r\n                                                value='doc'\r\n                                                onChange={(event) => props.onInputOnChange(event)}\r\n                                                checked={sreportformatdetail === \"doc\" ? true : false}\r\n                                                disabled={disabled}\r\n                                        >\r\n                                        </Form.Check>\r\n\r\n                                </Col>\r\n                                : \"\"}\r\n\r\n                                <></>\r\n                                {Object.keys(props.selectedRecord).length > 0 &&\r\n                                        <DropZone\r\n                                                label={props.intl.formatMessage({ id: \"IDS_FILE\" })}\r\n                                                maxFiles={1}\r\n                                                accept=\".jrxml,.mrt\"\r\n                                                minSize={0}\r\n                                                maxSize={10}\r\n                                                fileNameLength={150}\r\n                                                onDrop={(event) => props.onDropImage(event, \"sfilename\")}\r\n                                                multiple={false}\r\n                                                isMandatory={true}\r\n                                                editFiles={props.selectedRecord ? props.selectedRecord : {}}\r\n                                                attachmentTypeCode={props.operation === \"update\" ? attachmentType.OTHERS : \"\"}\r\n                                                fileName=\"sfilename\"\r\n                                                deleteAttachment={() => props.deleteFile(\"sfilename\")}\r\n                                                actionType={props.actionType}\r\n                                        />\r\n\r\n                                }\r\n                        </Col>\r\n\r\n\r\n                </Row>\r\n        )\r\n}\r\n\r\nexport default injectIntl(AddReportDetail);"]},"metadata":{},"sourceType":"module"}