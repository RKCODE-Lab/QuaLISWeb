{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\quotation\\\\QuotationTab.jsx\";\nimport React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl'; //FormattedMessage,\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { toast } from 'react-toastify';\nimport Esign from '../audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { constructOptionList, showEsign, create_UUID, deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript'; // import TestTab from './TestTab';\n\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport TestTab from \"../../pages/quotation/TestTab\"; // import AddQuotationTest from \"../../pages/quotation/AddQuotationTest\";\n// import EditQuotationTestPricing from \"../../pages/quotation/EditQuotationTestPricing\";\n\nimport AddQuotationTest from './AddQuotationTest';\nimport EditQuotationTestPricing from './EditQuotationTestPricing';\n\nclass QuotationTab extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = (event, primaryFieldKey) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        if (primaryFieldKey && event.target.name === \"ncost\") {\n          const index = selectedRecord.findIndex(item => item.ntestpricecode === primaryFieldKey);\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)) {\n            selectedRecord[index][\"ncost\"] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.tabDetail = () => {\n      const addquotationId = this.props.controlMap.has(\"AddQuotationTest\") && this.props.controlMap.get(\"AddQuotationTest\").ncontrolcode;\n      const deletequotationId = this.props.controlMap.has(\"DeleteQuotationTest\") && this.props.controlMap.get(\"DeleteQuotationTest\").ncontrolcode;\n      const quotationAddParam = {\n        screenName: \"IDS_TEST\",\n        operation: \"create\",\n        primaryKeyField: \"nquotationtestcode\",\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo,\n        ncontrolCode: addquotationId\n      };\n      const quotationDeleteParam = {\n        //    screenName: \"IDS_TEST\", methodUrl: \"ProjectMember\", operation: \"delete\", ncontrolCode: deletequotationId \n        screenName: \"IDS_TEST\",\n        operation: \"delete\",\n        primaryKeyField: \"nquotationtestcode\",\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo,\n        ncontrolCode: deletequotationId\n      };\n      const tabMap = new Map();\n      tabMap.set(\"IDS_TEST\", /*#__PURE__*/React.createElement(TestTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        addId: addquotationId,\n        addParam: quotationAddParam,\n        comboDataService: this.props.getQuotationAddTestService,\n        addTitleIDS: \"IDS_TEST\",\n        addTitleDefaultMsg: 'QuotationTest',\n        primaryKeyField: \"nquotationtestcode\",\n        masterData: this.props.masterData,\n        primaryList: \"QuotationTest\",\n        dataResult: this.props.dataResult,\n        dataState: this.props.dataState,\n        dataStateChange: this.props.dataStateChange,\n        columnList: this.quotationColumnList,\n        methodUrl: this.props.methodUrl,\n        deleteRecord: this.props.deleteRecord,\n        deleteParam: quotationDeleteParam // deleteParam={deletequotationId}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 32\n        }\n      }));\n      return tabMap;\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal; // let selectedRecord = this.props.selectedRecord;\n\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = '';\n          selectedRecord['esigncomments'] = '';\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let QuotationData = [];\n      let inputParam = {};\n      QuotationData[\"userinfo\"] = this.props.userInfo;\n      let postParam = {\n        inputListName: \"QuotationList\",\n        selectedObject: \"SelectedQuotation\",\n        primaryKeyField: \"nquotationtestcode\"\n      };\n\n      if (this.props.operation === \"create\" && this.props.screenName === \"IDS_TEST\") {\n        inputParam = this.onSaveQuotationTest(saveType, formRef);\n      }\n\n      if ((this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.screenName === \"IDS_ADDPROJECTMASTER\") {\n        inputParam = {\n          classUrl: \"quotation\",\n          methodUrl: \"Quotation\",\n          inputData: QuotationData,\n          operation: this.props.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          isClearSearch: this.props.isClearSearch\n        };\n      }\n\n      const masterData = this.props.masterData;\n\n      if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.deleteRecord = projectmasterfileparam => {\n      if (this.props.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\n        let inputParam = {};\n        let inputData = {}; // if (this.props.screenName === 'ProjectMaster File') { \n\n        let selectedRecord = projectmasterfileparam.selectedRecord;\n        selectedRecord = { ...selectedRecord,\n          ntransactionstatus: this.props.masterData.SelectedQuotation.ntransactionstatus\n        }; // inputData[\"projectmasterfile\"]={\n        //     selectedRecord                    \n        //     };\n\n        if (this.props.screenName === 'IDS_FILE') {\n          inputParam = {\n            classUrl: \"projectmaster\",\n            methodUrl: projectmasterfileparam.methodUrl,\n            inputData: {\n              \"projectmasterfile\": selectedRecord,\n              \"userinfo\": this.props.userInfo\n            },\n            operation: projectmasterfileparam.operation,\n            //dataState: this.state.dataState,\n            //dataStateMaterial: this.state.dataStateMaterial\n            dataState: this.state.dataState\n          };\n        }\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, projectmasterfileparam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: projectmasterfileparam.screenName,\n              operation: projectmasterfileparam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTRECORD\"\n        }));\n      }\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isOpen: false,\n      selectedRecord: {},\n      dataResult: [],\n      activeTab: 'ProjectMembers-tab',\n      dataState: dataState\n    };\n    this.quotationColumnList = [{\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TESTDESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TESTCOST\",\n      \"dataField\": \"ncost\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_NUMBEROFSAMPLES\",\n      \"dataField\": \"nnoofsamples\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  render() {\n    // const mandatoryFields = [];\n    let mandatoryFields = [];\n\n    if (this.props.screenName === 'IDS_FILE') {\n      if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      }\n    } else if (this.props.screenName === 'IDS_TEST') {\n      mandatoryFields = [{\n        \"idsName\": \"IDS_USER\",\n        \"dataField\": \"nusercode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n  onSaveQuotationTest(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo; // inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\n    //  inputData[\"Quotation\"] = {};\n\n    let testArray = [];\n    testArray = this.props.selectedRecord.ntestcode.map(item => {\n      let QuotationData = {};\n      QuotationData[\"ntestcode\"] = item.value;\n      QuotationData[\"nquotationcode\"] = this.props.masterData.SelectedQuotation.nquotationcode;\n      return QuotationData;\n    });\n    inputData['QuotationTest'] = testArray;\n    const inputParam = {\n      classUrl: \"quotation\",\n      methodUrl: \"QuotationTest\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef\n    };\n    return inputParam;\n  }\n\n}\n\nexport default injectIntl(QuotationTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/quotation/QuotationTab.jsx"],"names":["React","Row","Col","Card","injectIntl","SlideOutModal","toast","Esign","DEFAULT_RETURN","constructOptionList","showEsign","create_UUID","deleteAttachmentDropZone","onDropAttachFileList","transactionStatus","attachmentType","CustomTabs","TestTab","AddQuotationTest","EditQuotationTestPricing","QuotationTab","Component","constructor","props","onTabChange","tabProps","screenName","updateInfo","typeName","data","updateStore","onInputOnChange","event","primaryFieldKey","selectedRecord","state","target","type","name","checked","ACTIVE","DEACTIVE","YES","NO","index","findIndex","item","ntestpricecode","test","value","setState","onComboChange","comboData","fieldName","tabDetail","addquotationId","controlMap","has","get","ncontrolcode","deletequotationId","quotationAddParam","operation","primaryKeyField","masterData","userInfo","ncontrolCode","quotationDeleteParam","tabMap","Map","set","userRoleControlRights","inputParam","getQuotationAddTestService","dataResult","dataState","dataStateChange","quotationColumnList","methodUrl","deleteRecord","closeModal","loadEsign","openChildModal","onSaveClick","saveType","formRef","QuotationData","postParam","inputListName","selectedObject","onSaveQuotationTest","classUrl","inputData","searchRef","isClearSearch","nformcode","screenData","crudMaster","projectmasterfileparam","SelectedQuotation","ntransactionstatus","DRAFT","esignRights","warn","intl","formatMessage","id","deleteAttachment","file","actionType","validateEsign","sreason","password","validateEsignCredential","skip","take","settings","parseInt","isOpen","activeTab","render","mandatoryFields","nattachmenttypecode","LINK","testArray","ntestcode","map","nquotationcode"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';  //FormattedMessage,\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { toast } from 'react-toastify';\r\nimport Esign from '../audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { constructOptionList, showEsign, create_UUID, deleteAttachmentDropZone, onDropAttachFileList } from '../../components/CommonScript';\r\n// import TestTab from './TestTab';\r\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport TestTab from \"../../pages/quotation/TestTab\";\r\n// import AddQuotationTest from \"../../pages/quotation/AddQuotationTest\";\r\n// import EditQuotationTestPricing from \"../../pages/quotation/EditQuotationTestPricing\";\r\nimport AddQuotationTest from './AddQuotationTest';\r\nimport EditQuotationTestPricing from './EditQuotationTestPricing';\r\n\r\nclass QuotationTab extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n\r\n        this.state = {\r\n            isOpen: false, selectedRecord: {}, dataResult: [],\r\n            activeTab: 'ProjectMembers-tab',\r\n            dataState: dataState\r\n\r\n        };\r\n\r\n        this.quotationColumnList = [\r\n\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_TESTDESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_TESTCOST\", \"dataField\": \"ncost\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_NUMBEROFSAMPLES\", \"dataField\": \"nnoofsamples\", \"width\": \"200px\" }\r\n\r\n        ]\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        // const mandatoryFields = [];\r\n        let mandatoryFields = [];\r\n\r\n        if (this.props.screenName === 'IDS_FILE') {\r\n\r\n            if (this.state.selectedRecord && this.state.selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandatoryFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n\r\n                mandatoryFields = [{ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }];\r\n\r\n            }\r\n        } else if (this.props.screenName === 'IDS_TEST') {\r\n\r\n            mandatoryFields = [{ \"idsName\": \"IDS_USER\", \"dataField\": \"nusercode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }];\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Row className=\"no-gutters\">\r\n                    <Col md={12}>\r\n                        <Card className=\"at-tabs\">\r\n                            <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n\r\n               \r\n            </> \r\n\r\n        ) \r\n\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event, primaryFieldKey) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {   \r\n            if(primaryFieldKey && event.target.name === \"ncost\"){\r\n                const index = selectedRecord.findIndex(item=>item.ntestpricecode === primaryFieldKey);\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)){\r\n                    selectedRecord[index][\"ncost\"] = event.target.value;\r\n                }\r\n            }\r\n            else{      \r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }           \r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    tabDetail = () => {\r\n\r\n        const addquotationId = this.props.controlMap.has(\"AddQuotationTest\") && this.props.controlMap.get(\"AddQuotationTest\").ncontrolcode;\r\n        const deletequotationId = this.props.controlMap.has(\"DeleteQuotationTest\") && this.props.controlMap.get(\"DeleteQuotationTest\").ncontrolcode;\r\n\r\n        const quotationAddParam = {\r\n            screenName: \"IDS_TEST\", operation: \"create\", primaryKeyField: \"nquotationtestcode\",\r\n            masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: addquotationId\r\n        };\r\n\r\n        const quotationDeleteParam = {\r\n\r\n            //    screenName: \"IDS_TEST\", methodUrl: \"ProjectMember\", operation: \"delete\", ncontrolCode: deletequotationId \r\n\r\n            screenName: \"IDS_TEST\", operation: \"delete\", primaryKeyField: \"nquotationtestcode\",\r\n            masterData: this.props.masterData, userInfo: this.props.userInfo, ncontrolCode: deletequotationId\r\n        };\r\n\r\n\r\n\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_TEST\", <TestTab\r\n            userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            addId={addquotationId}\r\n            addParam={quotationAddParam}\r\n            comboDataService={this.props.getQuotationAddTestService}\r\n            addTitleIDS={\"IDS_TEST\"}\r\n            addTitleDefaultMsg={'QuotationTest'}\r\n            primaryKeyField={\"nquotationtestcode\"}\r\n            masterData={this.props.masterData}\r\n            primaryList={\"QuotationTest\"}\r\n            dataResult={this.props.dataResult}\r\n            dataState={this.props.dataState}\r\n            dataStateChange={this.props.dataStateChange}\r\n            columnList={this.quotationColumnList}\r\n            methodUrl={this.props.methodUrl}\r\n            deleteRecord={this.props.deleteRecord}\r\n            deleteParam={quotationDeleteParam}\r\n        // deleteParam={deletequotationId}\r\n        />)\r\n\r\n\r\n       \r\n        return tabMap;\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        // let selectedRecord = this.props.selectedRecord;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = '';\r\n                selectedRecord['esigncomments'] = '';\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let QuotationData = [];\r\n        let inputParam = {};\r\n        QuotationData[\"userinfo\"] = this.props.userInfo;\r\n\r\n        let postParam = {\r\n            inputListName: \"QuotationList\",\r\n            selectedObject: \"SelectedQuotation\",\r\n            primaryKeyField: \"nquotationtestcode\",\r\n        };\r\n\r\n\r\n        if ((this.props.operation === \"create\") && (this.props.screenName === \"IDS_TEST\")) {\r\n\r\n           \r\n            inputParam = this.onSaveQuotationTest(saveType, formRef);\r\n        }\r\n\r\n        if (((this.props.operation === \"create\") || (this.props.operation === \"update\")) && (this.props.screenName === \"IDS_ADDPROJECTMASTER\")) {\r\n\r\n            inputParam = {\r\n                classUrl: \"quotation\",\r\n                methodUrl: \"Quotation\",\r\n                inputData: QuotationData,\r\n                operation: this.props.operation,\r\n                saveType,\r\n                formRef,\r\n                postParam,\r\n                searchRef: this.searchRef,\r\n                isClearSearch: this.props.isClearSearch,\r\n            };\r\n        }\r\n\r\n\r\n        const masterData = this.props.masterData;\r\n\r\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    saveType,\r\n                },\r\n            };\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n        }\r\n\r\n    };\r\n\r\n\r\n    onSaveQuotationTest(saveType, formRef) {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        // inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\r\n      //  inputData[\"Quotation\"] = {};\r\n\r\n\r\n        let testArray = []\r\n        testArray = this.props.selectedRecord.ntestcode.map(item => {\r\n            let QuotationData = {}\r\n\r\n            QuotationData[\"ntestcode\"] = item.value\r\n            QuotationData[\"nquotationcode\"] = this.props.masterData.SelectedQuotation.nquotationcode;\r\n\r\n\r\n            return QuotationData;\r\n        });\r\n        inputData['QuotationTest'] = testArray;\r\n\r\n        const inputParam = {\r\n            classUrl: \"quotation\",\r\n            methodUrl: \"QuotationTest\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteRecord = (projectmasterfileparam) => {\r\n\r\n        if (this.props.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\r\n\r\n            let inputParam = {};\r\n            let inputData = {};\r\n            // if (this.props.screenName === 'ProjectMaster File') { \r\n            let selectedRecord = projectmasterfileparam.selectedRecord\r\n\r\n            selectedRecord = { ...selectedRecord, ntransactionstatus: this.props.masterData.SelectedQuotation.ntransactionstatus }\r\n\r\n            // inputData[\"projectmasterfile\"]={\r\n            //     selectedRecord                    \r\n            //     };\r\n\r\n            if (this.props.screenName === 'IDS_FILE') {\r\n                inputParam = {\r\n                    classUrl: \"projectmaster\",\r\n                    methodUrl: projectmasterfileparam.methodUrl,\r\n                    inputData: {\r\n\r\n                        \"projectmasterfile\": selectedRecord,\r\n                        \"userinfo\": this.props.userInfo\r\n                    },\r\n\r\n                    operation: projectmasterfileparam.operation,\r\n                    //dataState: this.state.dataState,\r\n                    //dataStateMaterial: this.state.dataStateMaterial\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, projectmasterfileparam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: projectmasterfileparam.screenName, operation: projectmasterfileparam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n        }\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\n\r\nexport default injectIntl(QuotationTab);\r\n\r\n"]},"metadata":{},"sourceType":"module"}