{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\Method.jsx\";\nimport React, { Component } from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport rsapi from '../../rsapi';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component'; // import {\n//     callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\n//     addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,\n//     changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById\n// } from '../../actions'\n\nimport { callService, crudMaster, getMethodComboService, getMethodDetail, updateStore, validateEsignCredential } from '../../actions'; //import TestView from './TestView';\n\nimport { injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify'; //import AddParameter from './AddParameter'\n//import AddTest from '../../pages/testmanagement/AddTest'\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript'; //import TestCategoryFilter from './TestCategoryFilter';\n\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\nimport 'react-perfect-scrollbar/dist/css/styles.css'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport AddMethod from './AddMethod';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport ReactTooltip from 'react-tooltip';\n\nclass Method extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit            \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.nmethodcode;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n      }\n\n      inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\n      inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"] ? this.state.selectedRecord[\"nmethodcatcode\"].value : \"\";\n      inputData[\"method\"][\"smethodname\"] = this.state.selectedRecord[\"smethodname\"] ? this.state.selectedRecord[\"smethodname\"] : \"\";\n      inputData[\"method\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.ConfirmDelete = (deleteParam, deleteID) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(deleteParam, deleteID));\n    };\n\n    this.deleteRecord = (deleteParam, nControlcode) => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: this.props.Login.masterData.SelectedMethod,\n          //deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, nControlcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = transactionStatus.NO;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"smethodname\", \"sdescription\", \"smethodcategoryname\", \"stransactionstatus\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //     const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\n    //     && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    //    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\n    //     && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addId = this.state.controlMap.has(\"AddMethod\") && this.state.controlMap.get(\"AddMethod\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditMethod\") && this.state.controlMap.get(\"EditMethod\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteMethod\") && this.state.controlMap.get(\"DeleteMethod\").ncontrolcode; // const addParam = {screenName:\"Method\", primaryeyField: \"nmethodcode\", primaryKeyValue:undefined,  \n    //     operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\n    //   const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\", \n    //    primaryKeyField:\"nmethodcode\", inputParam:this.props.Login.inputParam,  userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\n\n    const addParam = {\n      screenName: \"IDS_METHOD\",\n      operation: \"create\",\n      primaryKeyName: \"nmethodcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId\n    };\n    const editParam = {\n      screenName: \"IDS_METHOD\",\n      operation: \"update\",\n      primaryKeyName: \"nmethodcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      inputListName: \"Method\",\n      selectedObject: \"SelectedMethod\"\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_METHODCATEGORY\",\n      \"dataField\": \"nmethodcatcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_METHODNAME\",\n      \"dataField\": \"smethodname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: this.props.Login.masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_METHOD\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Method,\n      getMasterDetail: method => this.props.getMethodDetail(method, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedMethod,\n      primaryKeyField: \"nmethodcode\",\n      mainField: \"smethodname\",\n      firstField: \"smethodcatname\",\n      secondField: \"sdisplaystatus\" //openModal={() => this.props.getMethodComboService(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory)}\n      ,\n      openModal: () => this.props.getMethodComboService(addParam) //filterColumnData={this.props.filterColumnData}\n      //filterParam={filterParam}\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData //needAccordianFilter={false}\n      //skip={this.state.skip}\n      //take={this.state.take}\n      //handlePageChange={this.handlePageChange}\n      //openFilter={this.openFilter}\n      //closeFilter={this.closeFilter}\n      //onFilterSubmit={this.onFilterSubmit}\n      //showFilterIcon={true}\n      //showFilter={this.props.Login.showFilter}\n      // filterComponent={[\n      //     {\n      //         \"IDS_TESTFILTER\":\n      //             <TestCategoryFilter\n      //                 filterTestCategory={this.state.filterTestCategory || []}\n      //                 nfilterTestCategory={this.state.nfilterTestCategory || {}}\n      //                 onComboChange={this.onComboChange}\n      //             />\n      //     }\n      // ]}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.Method && this.props.Login.masterData.Method.length > 0 && this.props.Login.masterData.SelectedMethod && Object.values(this.props.Login.masterData.SelectedMethod).length > 0 ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.SelectedMethod.smethodname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.SelectedMethod.nstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedMethod.nstatus === 1 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 122\n      }\n    }), this.props.Login.masterData.SelectedMethod.sdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"editmethodname\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.props.getMethodComboService(editParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletemethodname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteParam, deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedMethod.sdescription))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_DISPLAYSTATUS\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedMethod.sdisplaystatus))))))) : \"\"))), this.props.Login.openModal && this.props.Login.operation && this.props.Login.inputParam && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddMethod, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        methodCategoryList: this.props.Login.methodCategoryList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false; // if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n    //     this.setState({\n    //         regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n    //         regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n    //         regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n    //     });\n    // }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  } // generateBreadCrumData() {\n  //     const breadCrumbData = [];\n  //     if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\n  //         breadCrumbData.push(\n  //             {\n  //                 \"label\": \"IDS_TESTCATEGORY\",\n  //                 \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\n  //             }\n  //         );\n  //     }\n  //     return breadCrumbData;\n  // }\n\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getMethodComboService,\n  getMethodDetail,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Method));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/Method.jsx"],"names":["React","Component","ListWrapper","Row","Col","Card","Nav","FormGroup","FormLabel","connect","rsapi","process","DataGrid","callService","crudMaster","getMethodComboService","getMethodDetail","updateStore","validateEsignCredential","injectIntl","toast","SlideOutModal","getControlMap","showEsign","constructOptionList","ListMaster","faTrashAlt","faPencilAlt","faCopy","faCheck","FontAwesomeIcon","ReadOnlyText","ContentPanel","MediaLabel","DEFAULT_RETURN","Esign","parameterType","transactionStatus","AddMethod","ConfirmMessage","BreadcrumbComponent","Affix","ReactTooltip","Method","constructor","props","onSaveClick","saveType","formRef","inputData","Login","userInfo","dataState","undefined","selectedId","operation","state","inputParam","methodUrl","toLowerCase","JSON","parse","stringify","selectedRecord","nmethodcode","nmastersitecode","NO","value","classUrl","displayName","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","masterData","openModal","screenName","intl","formatMessage","id","ConfirmDelete","deleteParam","deleteID","confirmMessage","confirm","deleteRecord","nControlcode","SelectedMethod","onEsignInputOnChange","event","target","type","name","checked","YES","setState","onInputOnChange","onComboChange","comboData","fieldName","closeModal","validateEsign","sreason","password","reloadData","error","controlMap","Map","skip","take","settings","searchRef","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","warn","render","addId","has","get","ncontrolcode","editId","deleteId","addParam","primaryKeyName","editParam","inputListName","selectedObject","mandatoryFields","searchedData","method","length","Object","values","smethodname","nstatus","sdisplaystatus","indexOf","sdescription","methodCategoryList","componentDidUpdate","previousProps","isComponentUpdated","showSaveContinue","PrevoiusLoginData","map","item","push","componentWillUnmount","modalName","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {ListWrapper} from '../../components/client-group.styles';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport rsapi from '../../rsapi';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n// import {\r\n//     callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\r\n//     addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,\r\n//     changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById\r\n// } from '../../actions'\r\nimport { callService, crudMaster,getMethodComboService,getMethodDetail,updateStore, validateEsignCredential } from '../../actions';\r\n//import TestView from './TestView';\r\nimport { injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\n//import AddParameter from './AddParameter'\r\n//import AddTest from '../../pages/testmanagement/AddTest'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { getControlMap, showEsign, constructOptionList } from '../../components/CommonScript';\r\n//import TestCategoryFilter from './TestCategoryFilter';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport AddMethod from './AddMethod';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n\r\nclass Method extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 25\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList = [\"smethodname\", \"sdescription\",  \"smethodcategoryname\", \"stransactionstatus\"];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n    //     const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n    //     && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n    //    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n    //     && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    const addId = this.state.controlMap.has(\"AddMethod\") && this.state.controlMap.get(\"AddMethod\").ncontrolcode;\r\n    const editId = this.state.controlMap.has(\"EditMethod\") && this.state.controlMap.get(\"EditMethod\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteMethod\") && this.state.controlMap.get(\"DeleteMethod\").ncontrolcode;\r\n        \r\n        // const addParam = {screenName:\"Method\", primaryeyField: \"nmethodcode\", primaryKeyValue:undefined,  \r\n        //     operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\r\n\r\n        //   const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\", \r\n        //    primaryKeyField:\"nmethodcode\", inputParam:this.props.Login.inputParam,  userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n        const addParam = {\r\n            screenName: \"IDS_METHOD\", operation: \"create\", primaryKeyName: \"nmethodcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId\r\n        }\r\n\r\n        const editParam = {\r\n            screenName: \"IDS_METHOD\", operation: \"update\", primaryKeyName: \"nmethodcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId, inputListName: \"Method\", selectedObject: \"SelectedMethod\"\r\n        };\r\n        const mandatoryFields = [{\"idsName\":\"IDS_METHODCATEGORY\",\"dataField\":\"nmethodcatcode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        {\"idsName\":\"IDS_METHODNAME\",\"dataField\":\"smethodname\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        \r\n        ];\r\n          const deleteParam ={operation:\"delete\"};\r\n        return (\r\n            <>\r\n                {/* Start of get display */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    } */}\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_METHOD\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.Method}\r\n                                getMasterDetail={(method) => this.props.getMethodDetail(method, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedMethod}\r\n                                primaryKeyField=\"nmethodcode\"\r\n                                mainField=\"smethodname\"\r\n                                firstField=\"smethodcatname\"\r\n                                secondField=\"sdisplaystatus\"\r\n                                //openModal={() => this.props.getMethodComboService(\"create\", SelectedTest, userInfo, addId, this.state.nfilterTestCategory)}\r\n                                openModal={() => this.props.getMethodComboService(addParam)}\r\n                                //filterColumnData={this.props.filterColumnData}\r\n                                //filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                \r\n                                //needAccordianFilter={false}\r\n                                //skip={this.state.skip}\r\n                                //take={this.state.take}\r\n                                //handlePageChange={this.handlePageChange}\r\n                                //openFilter={this.openFilter}\r\n                                //closeFilter={this.closeFilter}\r\n                                //onFilterSubmit={this.onFilterSubmit}\r\n                                //showFilterIcon={true}\r\n                                //showFilter={this.props.Login.showFilter}\r\n                                // filterComponent={[\r\n                                //     {\r\n                                //         \"IDS_TESTFILTER\":\r\n                                //             <TestCategoryFilter\r\n                                //                 filterTestCategory={this.state.filterTestCategory || []}\r\n                                //                 nfilterTestCategory={this.state.nfilterTestCategory || {}}\r\n                                //                 onComboChange={this.onComboChange}\r\n                                //             />\r\n                                //     }\r\n                                // ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            {this.props.Login.masterData.Method && this.props.Login.masterData.Method.length > 0 && this.props.Login.masterData.SelectedMethod && Object.values(this.props.Login.masterData.SelectedMethod).length > 0 ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.SelectedMethod.smethodname}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                {/* <Row>\r\n                                                <Col md={8}> */}\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.SelectedMethod.nstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                            {this.props.Login.masterData.SelectedMethod.nstatus === 1 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                                            {this.props.Login.masterData.SelectedMethod.sdisplaystatus}\r\n                                                        </MediaLabel>\r\n                                                        {/* <MediaLabel className={`btn-normal ${SelectedTest.naccredited === 70 ? \"outline-success\" : \"normal-danger\"} btn-sm mr-3`}>\r\n                                                            {SelectedTest.saccredited}\r\n                                                        </MediaLabel> */}\r\n                                                    </h2>\r\n                                                    {/* </Col>\r\n                                                <Col md=\"4\"> */}\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <div className=\"d-inline\">\r\n                                                        {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                        {/* Start Here */}\r\n                                                        {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\" >  \r\n                                                            <FontAwesomeIcon icon={faEye} className=\"ActionIconColor\" onClick={(e)=>this.viewAdditionalInfo(e)} />\r\n                                                        </Nav.Link> */}\r\n                                                        {/* End Here */}\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"editmethodname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.getMethodComboService(editParam)}>\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletemethodname\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(deleteParam,deleteId)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    handleClickDelete={() => this.deleteAction(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                                /> */}\r\n                                                        </Nav.Link>\r\n                                                        {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" name=\"copytestname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                            data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.addTest(\"copy\", SelectedTest, userInfo, copyId, this.state.nfilterTestCategory)}>\r\n                                                            <FontAwesomeIcon icon={faCopy} />\r\n                                                        </Nav.Link> */}\r\n                                                    </div>\r\n                                                    {/* </Tooltip> */}\r\n                                                </div>\r\n                                                {/* </Col>\r\n                                            </Row> */}\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedMethod.sdescription}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_DISPLAYSTATUS\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedMethod.sdisplaystatus}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                                {/* {this.props.Login.masterData.TestParameter && this.props.Login.masterData.TestParameter.length > 0 && this.props.Login.masterData.TestParameter[0].nparametertypecode === 1 &&\r\n                                                    <Col md=\"6\">\r\n                                                        <FormGroup>\r\n                                                            <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_PRICE\" })}</FormLabel>\r\n                                                            <ReadOnlyText>{SelectedTest.ncost}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                } */}\r\n                                                {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                                                {/* Start Here */}\r\n                                                {/* <Col md=\"6\">\r\n                                                <FormGroup>\r\n                                                    <FormLabel>{ this.props.intl.formatMessage({id: \"IDS_ADDITIONALINFO\"}) }</FormLabel>\r\n                                                    <ReadOnlyText>{ selectedTest.schecklistname }</ReadOnlyText>\r\n                                                </FormGroup>\r\n                                            </Col> */}\r\n                                                {/* End Here */}\r\n                                            </Row>\r\n                                            {/* <TestView\r\n                                                isFormulaOpen={this.props.Login.isFormulaOpen}\r\n                                                linkMaster={linkMaster}\r\n                                                editFiles={editFiles}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                parameterData={parameterData || []}\r\n                                                otherTestData={otherTestData || []}\r\n                                                formulaData={this.props.Login.formulaData || {}}\r\n                                                dataState={this.props.Login.dataState}\r\n                                                masterData={masterData}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                showSaveContinue={this.props.Login.showSaveContinue}\r\n                                                operation={this.props.Login.operation}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                addParameterSpecification={this.props.addParameterSpecification}\r\n                                                getAvailableData={this.props.getAvailableData}\r\n                                                addCodedResult={this.props.addCodedResult}\r\n                                                addFormula={this.props.addFormula}\r\n                                                formulaChangeFunction={this.props.formulaChangeFunction}\r\n                                                addParameter={this.props.addParameter}\r\n                                                deleteAction={this.deleteAction}\r\n                                                getTestDetails={this.props.getTestDetails}\r\n                                                updateStore={this.props.updateStore}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                addTestFile={this.props.addTestFile}\r\n                                                viewAttachment={this.props.viewAttachment}\r\n                                                settings = {this.props.Login.settings}\r\n                                                getActiveTestContainerTypeById={this.props.getActiveTestContainerTypeById}\r\n\r\n                                            ></TestView> */}\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* End of get display */}\r\n\r\n                {/* Start of Modal Sideout for Test Creation */}\r\n                {this.props.Login.openModal && this.props.Login.operation && this.props.Login.inputParam &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields || []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddMethod  \r\n                            selectedRecord={this.state.selectedRecord ||{}}                                  \r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange} \r\n                            methodCategoryList={this.props.Login.methodCategoryList ||[]}\r\n                            operation={this.props.Login.operation}\r\n                            inputParam={this.props.Login.inputParam}  \r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n                {/* End of Modal Sideout for Test Creation */}\r\n            </>\r\n        );\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n        //add / edit            \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        if ( this.props.Login.operation === \"update\"){\r\n            // edit\r\n            dataState = this.state.dataState;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            selectedId = this.props.Login.selectedRecord.nmethodcode;              \r\n        }\r\n        else{\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\"nsitecode\":this.props.Login.userInfo.nmastersitecode};      \r\n           \r\n        }   \r\n\r\n        inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"]? this.state.selectedRecord[\"ndefaultstatus\"]:transactionStatus.NO;\r\n        inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"]? this.state.selectedRecord[\"nmethodcatcode\"].value:\"\";\r\n        inputData[\"method\"][\"smethodname\"] = this.state.selectedRecord[\"smethodname\"]? this.state.selectedRecord[\"smethodname\"]:\"\";\r\n        inputData[\"method\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"]? this.state.selectedRecord[\"sdescription\"]:\"\";\r\n               \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName:this.props.Login.inputParam.displayName,  \r\n            inputData: inputData, selectedId, dataState,\r\n            operation: this.props.Login.operation, saveType, formRef          \r\n        }\r\n       \r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                    openModal:true, screenName:this.props.intl.formatMessage({ id:this.props.Login.inputParam.displayName}),\r\n                    operation:this.props.Login.operation\r\n                    }\r\n                }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n       \r\n}\r\n\r\n    ConfirmDelete = (deleteParam,deleteID) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(deleteParam,deleteID));\r\n    }\r\n    deleteRecord =(deleteParam,nControlcode) =>{\r\n        const inputParam = {\r\n                                classUrl: this.props.Login.inputParam.classUrl,\r\n                                methodUrl: this.props.Login.inputParam.methodUrl,                        \r\n                                displayName:this.props.Login.inputParam.displayName,\r\n                                inputData: {[this.props.Login.inputParam.methodUrl.toLowerCase()] :this.props.Login.masterData.SelectedMethod,   //deleteParam.selectedRecord,\r\n                                            \"userinfo\": this.props.Login.userInfo},\r\n                                operation:deleteParam.operation,\r\n                                dataState:this.state.dataState    \r\n                            }       \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, nControlcode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                    openModal:true, screenName:this.props.intl.formatMessage({ id:this.props.Login.inputParam.displayName}),\r\n                    operation:deleteParam.operation\r\n                    }\r\n                }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onInputOnChange=(event) => {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        \r\n        this.setState({selectedRecord});\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {      \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;   \r\n     \r\n        this.setState({selectedRecord});        \r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = transactionStatus.NO;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () =>{\r\n        const inputParam = {\r\n                        inputData : {\"userinfo\":this.props.Login.userInfo},                        \r\n                        classUrl: this.props.Login.inputParam.classUrl,\r\n                        methodUrl: this.props.Login.inputParam.methodUrl,\r\n                        displayName:this.props.Login.inputParam.displayName,\r\n                        userInfo: this.props.Login.userInfo\r\n                    };     \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n\r\n       \r\n\r\n        // if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n        //     this.setState({\r\n        //         regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n        //         regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n        //         regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n        //     });\r\n\r\n        // }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n        \r\n\r\n        \r\n       \r\n        \r\n    }\r\n\r\n    // generateBreadCrumData() {\r\n    //     const breadCrumbData = [];\r\n    //     if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\r\n\r\n    //         breadCrumbData.push(\r\n    //             {\r\n    //                 \"label\": \"IDS_TESTCATEGORY\",\r\n    //                 \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\r\n    //             }\r\n    //         );\r\n    //     }\r\n    //     return breadCrumbData;\r\n    // }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n                \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,getMethodComboService,getMethodDetail,updateStore, validateEsignCredential\r\n})(injectIntl(Method));"]},"metadata":{},"sourceType":"module"}