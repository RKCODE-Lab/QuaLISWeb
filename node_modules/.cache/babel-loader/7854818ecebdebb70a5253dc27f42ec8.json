{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { queryTypeFilter } from '../components/Enumeration';\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getSQLQuery\", {\n      nsqlquerycode: sqlQuery.nsqlquerycode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          queryResult: [],\n          queryList: [],\n          param: [],\n          Dparam: [],\n          TBLName: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      let selectedRecord = {};\n      const chartService = rsapi.post(\"sqlquery/getChartType\", {\n        userinfo: userInfo\n      });\n      const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\n        \"tabletypecode\": -1,\n        \"moduleformcode\": 0,\n        userinfo: userInfo\n      });\n      const tableType = rsapi.post(\"sqlquery/getQueryTableType\", {\n        userinfo: userInfo\n      });\n      let urlArray = [];\n\n      if (operation === \"create\") {\n        urlArray = [chartService, tableService, tableType];\n      } else {\n        const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        });\n        urlArray = [chartService, tableService, tableType, queryById];\n      }\n\n      if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSDASHBOARDQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSALERTQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSBARCODEQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSGENERALQUERY\"\n        });\n      } else {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSFILTERQUERY\"\n        });\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let chart = [];\n\n        if (operation === \"update\") {\n          selectedRecord = response[3].data;\n          chart.push({\n            \"value\": response[3].data[\"ncharttypecode\"],\n            \"label\": response[3].data[\"schartname\"]\n          });\n          selectedRecord[\"ncharttypecode\"] = chart[0];\n        }\n\n        let tableName = undefined;\n        let tableNameOnly = [];\n        Object.values(response[1].data[0]).forEach(p => {\n          if (p.stable !== tableName) {\n            tableName = p.stable;\n            tableNameOnly.push({\n              tableName\n            });\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            chartList: response[0].data || [],\n            tableList: response[1].data[0] || [],\n            tableType: response[2].data || [],\n            tableName: tableNameOnly || [],\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loading: false,\n            showExecute: true,\n            showParam: false,\n            showValidate: true,\n            showSave: false,\n            slideResult: [],\n            slideList: [],\n            resultStatus: '',\n            param: [],\n            Dparam: [],\n            TBLName: [],\n            parentPopUpSize: \"xl\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } // else {\n    // }\n\n  };\n}\nexport function getTablesName(TableTypeCode, FormCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getTablesFromSchema\", {\n      //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"moduleformcode\": parseInt(FormCode)\n    }).then(response => {\n      let tableName = undefined;\n      let tableNameOnly = [];\n      Object.values(response.data[0]).forEach(p => {\n        if (p.stable !== tableName) {\n          tableName = p.stable;\n          tableNameOnly.push({\n            tableName\n          });\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          tableList: response.data[0] || [],\n          tableName: tableNameOnly || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getModuleFormName(TableTypeCode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getModuleFormName\", {\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          moduleFormName: response.data[0] || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function executeUserQuery(inputParam) {\n  return function (dispatch) {\n    const Query = inputParam.query;\n    const screenFlag = inputParam.screenFlag;\n    const slideOperation = inputParam.slideOperation;\n    const userInfo = inputParam.userInfo;\n    const screenName = inputParam.screenName;\n    const data = inputParam.data;\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\n      \"query\": Query,\n      userinfo: userInfo,\n      \"returnoption\": \"LIST\"\n    }).then(response => {\n      const querycol = response.data[1];\n      let keyarray = [];\n      let temparray = [];\n      let validColumns = true;\n\n      if (querycol.length > 0) {\n        keyarray = Object.keys(querycol[0]);\n        let width = \"200px\";\n\n        if (keyarray.length === 2) {\n          width = \"300px\";\n        }\n\n        for (let i = 0; i < keyarray.length; i++) {\n          if (keyarray[i] !== null && keyarray[i] !== '') {\n            temparray.push({\n              \"idsName\": keyarray[i],\n              \"dataField\": keyarray[i],\n              \"width\": width\n            });\n          } else {\n            validColumns = false;\n          }\n        }\n      }\n\n      let respObject = {\n        loading: false,\n        slideResult: response.data[1] || [],\n        slideList: temparray || [],\n        resultStatus: response.data[0] || '',\n        openModal: true,\n        showParam: true,\n        screenFlag\n      };\n\n      if (screenFlag === \"showQuery\") {\n        if (screenName === \"Results\") {\n          respObject = { ...respObject,\n            showExecute: false,\n            operation: \"view\",\n            screenName: screenName,\n            ...data\n          };\n        } else {\n          respObject = { ...respObject,\n            showExecute: true,\n            operation: slideOperation\n          };\n        }\n      } else {\n        if (screenFlag === \"NoParam\") {\n          respObject = { ...respObject,\n            screenName: \"Results\",\n            operation: \"view\",\n            queryResult: response.data[1] || [],\n            queryList: temparray || [],\n            showExecute: inputParam.showExecute,\n            showValidate: inputParam.showValidate,\n            showSave: inputParam.showSave,\n            noSave: inputParam.noSave\n          };\n        } else {\n          respObject = { ...respObject,\n            queryResult: response.data[1] || [],\n            showExecute: true,\n            showValidate: false,\n            operation: \"create\",\n            screenName: \"Parameter for Results\",\n            queryList: temparray || []\n          };\n        }\n      }\n\n      if (validColumns) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...respObject\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); //toast.error(intl.formatMessage({ id: error.message }));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function executeAlertUserQuery(Query, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\n      \"query\": Query,\n      userinfo: userInfo\n    }).then(response => {\n      const resultCount = response.data[1];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          resultCount: resultCount\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", {\n      nquerytypecode: querytypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          queryList: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getColumnNamesByTableName(tableName, columnList) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getColumnsFromTable\", {\n      \"tablename\": tableName\n    }).then(response => {\n      columnList = columnList || new Map();\n      columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          columnList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function comboColumnValues(tableName, fieldName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getColumnValues\", {\n      \"tablename\": tableName,\n      \"fieldname\": fieldName\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          fieldResult: response.data[1] || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/SQLBuilderAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","toast","Axios","initRequest","intl","queryTypeFilter","getSQLQueryDetail","sqlQuery","userInfo","masterData","dispatch","post","nsqlquerycode","then","response","data","type","payload","loading","queryResult","queryList","param","Dparam","TBLName","catch","error","status","formatMessage","id","message","warn","getSQLQueryComboService","screenName","operation","primaryKeyName","primaryKeyValue","queryTypeCode","ncontrolCode","selectedRecord","chartService","userinfo","tableService","tableType","urlArray","queryById","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","all","chart","push","tableName","undefined","tableNameOnly","Object","values","forEach","p","stable","chartList","tableList","openModal","showExecute","showParam","showValidate","showSave","slideResult","slideList","resultStatus","parentPopUpSize","getTablesName","TableTypeCode","FormCode","parseInt","getModuleFormName","moduleFormName","executeUserQuery","inputParam","Query","query","screenFlag","slideOperation","querycol","keyarray","temparray","validColumns","length","keys","width","i","respObject","noSave","executeAlertUserQuery","resultCount","comboChangeQueryType","querytypecode","nquerytypecode","searchedData","getColumnNamesByTableName","columnList","Map","set","comboColumnValues","fieldName","fieldResult"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData } from '../components/CommonScript'//getComboLabelValue,, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport {queryTypeFilter} from '../components/Enumeration';\r\n\r\n\r\n\r\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getSQLQuery\", {\r\n            nsqlquerycode: sqlQuery.nsqlquerycode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, queryResult: [], queryList: [], param: [], Dparam: [], TBLName: [] } });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if (operation === \"create\" || operation === \"update\") {\r\n\r\n            let selectedRecord = {};\r\n            const chartService = rsapi.post(\"sqlquery/getChartType\", { userinfo: userInfo });\r\n            const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\"tabletypecode\": -1,\"moduleformcode\": 0, userinfo: userInfo });\r\n            const tableType = rsapi.post(\"sqlquery/getQueryTableType\", { userinfo: userInfo });\r\n            let urlArray = [];\r\n            if (operation === \"create\") {\r\n\r\n                urlArray = [chartService, tableService,tableType];\r\n            }\r\n            else {\r\n                const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });\r\n\r\n                urlArray = [chartService, tableService,tableType, queryById];\r\n            }\r\n\r\n            if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSDASHBOARDQUERY\" });\r\n            }\r\n            else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSALERTQUERY\" });\r\n            }\r\n            else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSBARCODEQUERY\" });\r\n            }\r\n            else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSGENERALQUERY\" });\r\n            }\r\n            else {\r\n                screenName = intl.formatMessage({ id: \"IDS_LIMSFILTERQUERY\" });\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    let chart = [];\r\n                    if (operation === \"update\") {\r\n                        selectedRecord = response[3].data;\r\n                        chart.push({ \"value\": response[3].data[\"ncharttypecode\"], \"label\": response[3].data[\"schartname\"] });\r\n                        selectedRecord[\"ncharttypecode\"] = chart[0];\r\n                    }\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({ tableName });\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            chartList: response[0].data || [],\r\n                            tableList: response[1].data[0] || [],\r\n                            tableType: response[2].data || [],\r\n                            tableName: tableNameOnly || [],\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false, showExecute: true, showParam: false, showValidate: true, showSave: false,\r\n                            slideResult: [], slideList: [],\r\n                            resultStatus: '', param: [], Dparam: [], TBLName: [], parentPopUpSize: \"xl\"\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n\r\n\r\n\r\n        }\r\n        // else {\r\n        // }\r\n    }\r\n}\r\n\r\nexport function getTablesName(TableTypeCode,FormCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n            //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\r\n            \"tabletypecode\": parseInt(TableTypeCode),\"moduleformcode\": parseInt(FormCode)\r\n            \r\n        })\r\n            .then(response => {\r\n\r\n                let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response.data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({ tableName });\r\n                        }\r\n                    })\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: {  tableList: response.data[0] || [],\r\n                    tableName: tableNameOnly || [],loading: false } });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getModuleFormName(TableTypeCode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getModuleFormName\", {\r\n            \"tabletypecode\": parseInt(TableTypeCode), \"userinfo\": userInfo\r\n            \r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: {  moduleFormName: response.data[0] || [],loading: false} });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function executeUserQuery(inputParam) {\r\n    return function (dispatch) {\r\n        const Query = inputParam.query;\r\n        const screenFlag = inputParam.screenFlag;\r\n        const slideOperation = inputParam.slideOperation;\r\n        const userInfo = inputParam.userInfo;\r\n        const screenName = inputParam.screenName\r\n        const data = inputParam.data;\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", { \"query\": Query, userinfo: userInfo, \"returnoption\": \"LIST\" })\r\n            .then(response => {\r\n                const querycol = response.data[1];\r\n                let keyarray = [];\r\n                let temparray = [];\r\n                let validColumns = true;\r\n                if (querycol.length > 0) {\r\n                    keyarray = Object.keys(querycol[0]);\r\n                    let width=\"200px\"\r\n                    if(keyarray.length === 2){\r\n                        width=\"300px\"\r\n                    }\r\n                    for (let i = 0; i < keyarray.length; i++) {\r\n                        if( keyarray[i]!==null && keyarray[i]!==''){\r\n                            temparray.push({ \"idsName\": keyarray[i], \"dataField\": keyarray[i], \"width\": width\r\n                            });\r\n                        }else{\r\n                            validColumns = false;\r\n                        }\r\n                    }\r\n                }\r\n                let respObject = {loading: false,\r\n                                slideResult: response.data[1] || [],\r\n                                slideList: temparray || [],\r\n                                resultStatus: response.data[0] || '',\r\n                                openModal: true,\r\n                                showParam: true,\r\n                                screenFlag\r\n                                }\r\n\r\n                if (screenFlag === \"showQuery\") \r\n                {\r\n                    if (screenName === \"Results\") {\r\n                        respObject = {...respObject,\r\n                                        showExecute: false,                                       \r\n                                        operation: \"view\",\r\n                                        screenName: screenName,                                                               \r\n                                        ...data\r\n                                    }                         \r\n                    }\r\n                    else {\r\n                        respObject = {...respObject, \r\n                                        showExecute: true,                                   \r\n                                         operation: slideOperation,                           \r\n                                    }\r\n                    }\r\n                }\r\n                else \r\n                {\r\n                    if (screenFlag === \"NoParam\") \r\n                    {\r\n                        respObject = {...respObject,\r\n                                            screenName: \"Results\",\r\n                                            operation: \"view\",                                          \r\n                                            queryResult: response.data[1] || [],\r\n                                            queryList: temparray || [],  \r\n                                            showExecute: inputParam.showExecute,\r\n                                            showValidate:  inputParam.showValidate,\r\n                                            showSave:  inputParam.showSave,\r\n                                            noSave:  inputParam.noSave,                                          \r\n                                        }                               \r\n                    }\r\n                    else {\r\n                        respObject = {...respObject, queryResult: response.data[1] || [],\r\n                                                    showExecute: true,                                                 \r\n                                                    showValidate: false,\r\n                                                    operation: \"create\",\r\n                                                    screenName: \"Parameter for Results\",                                                                   \r\n                                                    queryList: temparray || [],                                                    \r\n                                                }                     \r\n                    }                   \r\n                }\r\n                if(validColumns){\r\n                    dispatch({ type: DEFAULT_RETURN, payload: {...respObject}});\r\n                }else{\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    toast.warn(intl.formatMessage({ id:\"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"})) \r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                   \r\n                //toast.error(intl.formatMessage({ id: error.message }));\r\n                if (error.response.status === 500) {                   \r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeAlertUserQuery(Query, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", { \"query\": Query, userinfo: userInfo })\r\n            .then(response => {\r\n\r\n\r\n                const resultCount = response.data[1];\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false,\r\n                        resultCount: resultCount\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", { nquerytypecode: querytypecode, \"userinfo\": userInfo })\r\n            .then(response => {\r\n\r\n                const masterData = { ...data, ...response.data, searchedData: undefined }\r\n\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, queryList: []\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getColumnNamesByTableName(tableName, columnList) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnsFromTable\", { \"tablename\": tableName })\r\n            .then(response => {\r\n\r\n                columnList = columnList || new Map();\r\n                columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        columnList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function comboColumnValues(tableName, fieldName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnValues\", { \"tablename\": tableName, \"fieldname\": fieldName })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        fieldResult: response.data[1] || [], loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}