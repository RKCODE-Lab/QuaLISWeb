{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\submitter\\\\city\\\\City.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport AddCity from './AddCity';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { callService, getCityService, updateStore, crudMaster, validateEsignCredential, viewAttachment } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { getControlMap, showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone } from '../../../components/CommonScript';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport { ListWrapper } from '../../../components/client-group.styles';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass City extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          //.dataItem,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let inputData = [];\n      let dataState = undefined;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\n        this.extractedColumnList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add                          \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.extractedColumnList.map(item => {\n          return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\n        });\n      }\n\n      inputData[\"city\"][\"ndistrictcode\"] = this.state.selectedRecord[\"ndistrictcode\"] ? this.state.selectedRecord[\"ndistrictcode\"].value : transactionStatus.NA;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        selectedId,\n        dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"selectbox\",\n        \"idsName\": \"IDS_DISTRICTCODE\",\n        \"dataField\": \"sdistrictname\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"textarea\",\n        \"idsName\": \"IDS_CITY\",\n        \"dataField\": \"scityname\",\n        \"width\": \"150px\"\n      }, {\n        \"controlType\": \"textarea\",\n        \"idsName\": \"IDS_CITYCODE\",\n        \"dataField\": \"scitycode\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"ncitycode\";\n    }\n\n    let mandatoryFields = [];\n    mandatoryFields.push({\n      \"mandatory\": true,\n      \"idsName\": \"IDS_DISTRICTCODE\",\n      \"dataField\": \"ndistrictcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_CITY\",\n      \"dataField\": \"scityname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_CITYCODE\",\n      \"dataField\": \"scitycode\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    });\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: \"City\",\n      primaryeyField: \"ncitycode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"ncitycode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const downloadPram = {\n      operation: \"download\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      selectedId: this.props.Login.selectedId,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.getCityService,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      addRecord: () => this.props.getCityService(addParam),\n      deleteParam: deleteParam,\n      downloadPram: downloadPram,\n      scrollable: \"scrollable\",\n      gridHeight: \"600px\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 37\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {},\n      updateStore: this.props.updateStore,\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddCity, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        operation: this.props.Login.operation,\n        districtList: this.props.Login.districtList || [],\n        inputParam: this.props.Login.inputParam,\n        actionType: this.state.actionType,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 30\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getCityService,\n  updateStore,\n  crudMaster,\n  validateEsignCredential,\n  viewAttachment\n})(injectIntl(City));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/submitter/city/City.jsx"],"names":["React","connect","injectIntl","Row","Col","process","toast","AddCity","SlideOutModal","Esign","DataGrid","callService","getCityService","updateStore","crudMaster","validateEsignCredential","viewAttachment","DEFAULT_RETURN","getControlMap","showEsign","create_UUID","onDropAttachFileList","deleteAttachmentDropZone","transactionStatus","ListWrapper","mapStateToProps","state","Login","City","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","deleteRecord","deleteParam","inputParam","classUrl","methodUrl","displayName","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","validateEsign","sreason","nreasoncode","value","spredefinedreason","label","password","onSaveClick","saveType","formRef","undefined","selectedId","extractedColumnList","map","item","dataField","nmastersitecode","NA","esignNeeded","reloadData","onComboChange","comboData","fieldName","onInputOnChange","target","type","name","checked","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","mandatoryFields","push","addId","has","concat","get","ncontrolcode","editID","addParam","primaryeyField","primaryKeyValue","editParam","downloadPram","districtList","actionType","componentDidUpdate","previousProps","Object","values","isOpen"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport AddCity from './AddCity';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport { callService,getCityService,updateStore,crudMaster,validateEsignCredential,viewAttachment} from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { getControlMap, showEsign, create_UUID, onDropAttachFileList, deleteAttachmentDropZone } from '../../../components/CommonScript';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass City extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.formRef=React.createRef();\r\n        this.extractedColumnList = [];\r\n    \r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n}\r\n\r\nstatic getDerivedStateFromProps(props, state) {\r\n\r\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n    }\r\n\r\n    if (props.Login.error !== state.error) {\r\n        toast.error(props.Login.error)\r\n        props.Login.error = \"\";\r\n    }\r\n    return null;\r\n}\r\n\r\n\r\ndataStateChange = (event) => {\r\n    this.setState({\r\n        dataResult: process(this.state.data, event.dataState),\r\n        dataState: event.dataState\r\n    });\r\n}\r\n\r\n\r\ncloseModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n    let openModal = this.props.Login.openModal;\r\n    let selectedRecord = this.props.Login.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n        if (this.props.Login.operation === \"delete\") {\r\n            loadEsign = false;\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        } else {\r\n            loadEsign = false;\r\n            selectedRecord['esignpassword'] = \"\"\r\n            selectedRecord['esigncomments'] = \"\"\r\n        }\r\n    } else {\r\n        openModal = false;\r\n        selectedRecord = {};\r\n    }\r\n    const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { openModal, loadEsign, selectedRecord }\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n}\r\n\r\ndeleteRecord = (deleteParam) =>{\r\n    const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: this.props.Login.inputParam.methodUrl,\r\n        displayName: this.props.Login.inputParam.displayName,\r\n        inputData: {\r\n            [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,//.dataItem,\r\n            \"userinfo\": this.props.Login.userInfo\r\n        },\r\n        operation:deleteParam.operation,\r\n        dataState:this.state.dataState\r\n    }\r\n\r\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                operation:deleteParam.operation\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n}\r\n\r\nvalidateEsign = () => {\r\n    const inputParam = {\r\n        inputData: {\r\n            \"userinfo\": {\r\n                ...this.props.Login.userInfo,\r\n                sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n           \r\n            },\r\n            password: this.state.selectedRecord[\"esignpassword\"]\r\n        },\r\n        screenData: this.props.Login.screenData\r\n    }\r\n    this.props.validateEsignCredential(inputParam, \"openModal\");\r\n}\r\n\r\nonSaveClick = (saveType, formRef) => {\r\n    //add / edit  \r\n    let inputData = [];\r\n    let dataState =undefined;\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    let selectedId = null;\r\n    if (this.props.Login.operation === \"update\") {    // edit\r\n        dataState=this.state.dataState\r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = this.state.selectedRecord;\r\n        this.extractedColumnList.map(item => {\r\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField] : \"\";\r\n        })\r\n        selectedId = this.props.Login.selectedId; \r\n    }\r\n    else {\r\n        //add                          \r\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        this.extractedColumnList.map(item => {\r\n            return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item.dataField] = this.state.selectedRecord[item.dataField] ? this.state.selectedRecord[item.dataField]:\"\"\r\n        })\r\n    }\r\n    inputData[\"city\"][\"ndistrictcode\"] = this.state.selectedRecord[\"ndistrictcode\"] ? this.state.selectedRecord[\"ndistrictcode\"].value\r\n    : transactionStatus.NA;\r\n\r\n    const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: this.props.Login.inputParam.methodUrl,\r\n        displayName: this.props.Login.inputParam.displayName,\r\n        inputData: inputData, operation: this.props.Login.operation,\r\n        saveType, formRef,  selectedId,dataState\r\n\r\n    }\r\n    const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n    if (esignNeeded) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                operation: this.props.Login.operation\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n}\r\n\r\nreloadData = () => {\r\n    const inputParam = {\r\n        inputData: { \"userinfo\": this.props.Login.userInfo },\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl: this.props.Login.inputParam.methodUrl,\r\n        userInfo: this.props.Login.userInfo,\r\n        displayName: this.props.Login.inputParam.displayName\r\n    };\r\n\r\n    this.props.callService(inputParam);\r\n}\r\n\r\nrender() {\r\n    let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [ \r\n                { \"controlType\": \"selectbox\", \"idsName\": \"IDS_DISTRICTCODE\",\"dataField\": \"sdistrictname\", \"width\": \"150px\" },             \r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_CITY\",\"dataField\": \"scityname\", \"width\": \"150px\" },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_CITYCODE\",\"dataField\": \"scitycode\", \"width\": \"150px\" },\r\n            ]\r\n            \r\n            primaryKeyField = \"ncitycode\";\r\n        }\r\n        let mandatoryFields=[];\r\n        mandatoryFields.push( \r\n            {  \"mandatory\": true,  \"idsName\":  \"IDS_DISTRICTCODE\", \"dataField\": \"ndistrictcode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            {  \"mandatory\": true,  \"idsName\":  \"IDS_CITY\", \"dataField\": \"scityname\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            {  \"mandatory\": true,  \"idsName\":  \"IDS_CITYCODE\", \"dataField\": \"scitycode\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},          \r\n        )\r\n\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n         && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    \r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n          && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const addParam = {screenName:\"City\", primaryeyField: \"ncitycode\", primaryKeyValue:undefined,  \r\n        operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\r\n\r\n        const editParam = {\r\n        screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"ncitycode\", operation: \"update\",\r\n        inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n        const downloadPram = { operation: \"download\"};\r\n            \r\n\r\n        return(<>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n    \r\n                            {this.state.data ?\r\n                                    <DataGrid\r\n                                        primaryKeyField={primaryKeyField}\r\n                                        selectedId={this.props.Login.selectedId}\r\n                                        data={this.state.data}\r\n                                        dataResult={this.state.dataResult}\r\n                                        dataState={this.state.dataState}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        fetchRecord={this.props.getCityService}\r\n                                        deleteRecord={this.deleteRecord}\r\n                                        reloadData={this.reloadData}\r\n                                        editParam={editParam}\r\n                                        addRecord = {() => this.props.getCityService(addParam)}\r\n                                        deleteParam={deleteParam}\r\n                                        downloadPram={downloadPram}\r\n                                        scrollable={\"scrollable\"}\r\n                                        gridHeight = {\"600px\"}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        pageable={true}\r\n                                    />\r\n                                    : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        updateStore={this.props.updateStore}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :<AddCity\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            operation={this.props.Login.operation}\r\n                            districtList={this.props.Login.districtList || []}\r\n                            inputParam={this.props.Login.inputParam} \r\n                            actionType={this.state.actionType}\r\n                            onComboChange={this.onComboChange}\r\n\r\n                        />}\r\n                    />\r\n                }\r\n                            \r\n        </>);\r\n}\r\n\r\ncomponentDidUpdate(previousProps) {\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n            });\r\n        }\r\n        else {\r\n            let { dataState } = this.state;\r\n            if (this.props.Login.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n            }\r\n\r\n            this.setState({\r\n                data: this.props.Login.masterData,\r\n                isOpen: false,\r\n                selectedRecord: this.props.Login.selectedRecord,\r\n                dataResult: process(this.props.Login.masterData, dataState),\r\n                dataState\r\n            });\r\n        }\r\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n        this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n    }\r\n}\r\nonComboChange = (comboData, fieldName) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    selectedRecord[fieldName] = comboData;;\r\n\r\n    this.setState({ selectedRecord });\r\n}\r\n\r\nonInputOnChange = (event) => {\r\n\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === 'checkbox') {\r\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    }\r\n    else {\r\n        selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n\r\n    this.setState({ selectedRecord });\r\n }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService,getCityService,updateStore,crudMaster,validateEsignCredential,viewAttachment})(injectIntl(City));\r\n"]},"metadata":{},"sourceType":"module"}