{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { sortData } from \"../components/CommonScript\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getSubSampleBySample(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getSubSampleBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n      let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();\n      releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseSubSample,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseSubSample,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {\n  let npreregno = \"\";\n  selectedSampleData.map((item, i) => {\n    let s = \"\";\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSampleData.length) {\n      if (i < selectedSampleData.length - 1) {\n        s = \",\";\n      }\n\n      npreregno = npreregno + s;\n    } else {\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSample\", {\n      npreregno: npreregno,\n      nregtypecode: selectedSampleData[0].nregtypecode,\n      nregsubtypecode: selectedSampleData[0].nregsubtypecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  selectedSubSampleData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n\n    if (i < selectedSubSampleData.length) {\n      if (i < selectedSubSampleData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedSubSample\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestBySample(methodParam, kjkj) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getTestBySample\", {\n      nsitecode: methodParam.nsitecode,\n      npreregno: methodParam.viewRow.npreregno,\n      ntransactionsamplecode: methodParam.viewRow.ntransactionsamplecode,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let releaseTest = methodParam.masterData.releaseTest || new Map();\n      releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\n      let masterData = { ...methodParam.masterData,\n        releaseTest,\n        ...response.data\n      }; //  sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseTest,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {\n  let ntransactionsamplecode = \"\";\n  let npreregno = \"\";\n  let ntransactiontestcode = \"\";\n  selectedTestData.map((item, i) => {\n    let s = \"\";\n    ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\n    npreregno = npreregno + item.npreregno;\n    ntransactiontestcode = ntransactiontestcode + item.ntransactiontestcode;\n\n    if (i < selectedTestData.length) {\n      if (i < selectedTestData.length - 1) {\n        s = \",\";\n      }\n\n      ntransactionsamplecode = ntransactionsamplecode + s;\n      npreregno = npreregno + s;\n      ntransactiontestcode = ntransactiontestcode + s;\n    } else {\n      ntransactionsamplecode = item.ntransactionsamplecode;\n      npreregno = item.npreregno;\n      ntransactiontestcode = item.ntransactiontestcode;\n    }\n  });\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateReleasedTest\", {\n      npreregno: npreregno,\n      ntransactionsamplecode: ntransactionsamplecode,\n      ntransactiontestcode: ntransactiontestcode,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample =response.data[\"ReleaseSample\"];           \n      let masterData = { ...data,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      console.log(\"errordot\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \n//    let ntransactionsamplecode = \"\"\n//    let npreregno = \"\"\n//     let ntransactiontestcode = \"\" \n//     let bFlag = \"\" \n//     if (TestArray !== undefined) {\n//         TestArray.map(test => {\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\n//             npreregno += test.npreregno + ',';\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\n//         })\n//         TestArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"3\"\n//         }\n//     }   \n//     if (SubSampleArray !== undefined) {\n//         SubSampleArray.map(SubSample => {\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\n//             npreregno += SubSample.npreregno + ',';\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\n//             SubSampleArray = {\n//                 ntransactionsamplecode: ntransactionsamplecode,\n//                 npreregno: npreregno,\n//                 ntransactiontestcode: ntransactiontestcode,\n//                 bFlag:\"2\"\n//             }\n//         })\n//     }\n//     if (SampleArray !== undefined) {\n//         SampleArray.map(Sample => {\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\n//             npreregno += Sample.npreregno + ',';\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\n//         })\n//         SampleArray = {\n//             ntransactionsamplecode: ntransactionsamplecode,\n//             npreregno: npreregno,\n//             ntransactiontestcode: ntransactiontestcode,\n//             bFlag:\"1\"\n//         }\n//     }\n//     let allNpreregno = []\n//     if (SampleArray1 !== undefined) {\n//         SampleArray1.map(temp => {\n//             allNpreregno += temp + ','\n//         })\n//     }\n//     let allNtransactionsamplecode = []\n//     if (SubSampleArray1 !== undefined) {\n//         SubSampleArray1.map(temp => {\n//             allNtransactionsamplecode += temp + ','\n//         })\n//     }\n//     let allNtransactiontestcode = []\n//     if (TestArray1 !== undefined) {\n//         TestArray1.map(temp => {\n//             allNtransactiontestcode += temp + ','\n//         })\n//     }\n//     return function (dispatch) {  \n//     dispatch(initRequest(true));\n//     return rsapi.post(\"coarelease/updateStatus\", \n//         {\n//             SampleArray:SampleArray,\n//             SubSampleArray:SubSampleArray,\n//             TestArray: TestArray,\n//             userinfo: userInfo,\n//             allNtransactionsamplecode: allNtransactionsamplecode,\n//             allNtransactiontestcode: allNtransactiontestcode,\n//             allNpreregno:allNpreregno\n//         })\n//     .then(response=>{ \n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \n//        let releaseTest = Data1.releaseTest || new Map();           \n//        releaseSubSample = Data1.releaseSubSample || new Map();           \n//              releaseTest = Data1.releaseTest || new Map();\n// if(response.data.body[\"cFlag\"]===\"3\"){\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\n//        }\n//       //  else {\n//         if(response.data.body[\"cFlag\"]===\"2\"){\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\n//         }\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\n//             sortData(masterData);\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\n//                 data:releaseSubSample,releaseTest,\n//                       //  dataState:dataState,\n//                         loading:false\n//                     }});\n//         })\n//         .catch(error=>{\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//             if (error.response.status === 500){\n//                 toast.error(error.message);\n//             } \n//             else{               \n//                 toast.warn(error.response.data);\n//             }  \n//         })        \n//     }\n// }\n\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1, SampleArray, SubSampleArray, TestArray, Data1, k) {\n  let ntransactionsamplecode = \"\";\n  let ntransactiontestcode = \"\";\n  let npreregno = \"\";\n  let bFlag = \"\";\n\n  if (TestArray !== undefined) {\n    let sample = SampleArray1.filter((c, index) => {\n      return SampleArray1.indexOf(c) === index;\n    });\n    let subsample = SubSampleArray1.filter((c, index) => {\n      return SubSampleArray1.indexOf(c) === index;\n    });\n    let test = TestArray1.filter((c, index) => {\n      return TestArray1.indexOf(c) === index;\n    });\n    npreregno = sample.map(x => x).join(\",\");\n    ntransactionsamplecode = subsample.map(x => x).join(\",\");\n    ntransactiontestcode = test.map(x => x).join(\",\");\n    TestArray = {\n      ntransactionsamplecode: ntransactionsamplecode,\n      npreregno: npreregno,\n      ntransactiontestcode: ntransactiontestcode,\n      bFlag: \"3\"\n    };\n  }\n\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/updateStatus\", {\n      TestArray: TestArray,\n      userinfo: userInfo\n    }).then(response => {\n      // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \n      let releaseSubSample = Data1.releaseSubSample || new Map();\n      let releaseTest = Data1.releaseTest || new Map();\n      releaseSubSample = Data1.releaseSubSample || new Map();\n      releaseTest = Data1.releaseTest || new Map();\n      releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\n      releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\n      let masterData = { ...Data1,\n        releaseSubSample,\n        releaseTest,\n        ...response.data.body\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: releaseSubSample,\n          releaseTest,\n          //  dataState:dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/COAReleaseAction.js"],"names":["toast","sortData","rsapi","initRequest","DEFAULT_RETURN","getSubSampleBySample","methodParam","dispatch","post","nsitecode","npreregno","primaryKeyValue","userinfo","userInfo","then","response","releaseSubSample","masterData","Map","set","parseInt","Object","keys","data","values","type","payload","dataState","loading","catch","error","status","message","warn","getReleaseSelectedSamples","controlId","selectedSampleData","flag","map","item","i","s","length","nregtypecode","nregsubtypecode","console","log","getReleaseSelectedSubSamples","selectedSubSampleData","ntransactionsamplecode","getTestBySample","kjkj","viewRow","releaseTest","getReleaseSelectedTest","selectedTestData","ntransactiontestcode","getReleaseSelectedSampleSubSampleTest","control","SampleArray1","SubSampleArray1","TestArray1","SampleArray","SubSampleArray","TestArray","Data1","k","bFlag","undefined","sample","filter","c","index","indexOf","subsample","test","x","join","body"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,SAASC,oBAAT,CAA+BC,WAA/B,EAA4C;AAC/C,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,iCAAX,EACyB;AAACC,MAAAA,SAAS,EAACH,WAAW,CAACG,SAAvB;AAAkCC,MAAAA,SAAS,EAACJ,WAAW,CAACK,eAAxD;AACAC,MAAAA,QAAQ,EAACN,WAAW,CAACO;AADrB,KADzB,EAGNC,IAHM,CAGDC,QAAQ,IAAE;AACb;AACC,UAAIC,gBAAgB,GAAGV,WAAW,CAACW,UAAZ,CAAuBD,gBAAvB,IAA2C,IAAIE,GAAJ,EAAlE;AAEIF,MAAAA,gBAAgB,CAACG,GAAjB,CAAqBC,QAAQ,CAACC,MAAM,CAACC,IAAP,CAAYP,QAAQ,CAACQ,IAAT,CAAc,kBAAd,CAAZ,EAA+C,CAA/C,CAAD,CAA7B,EAAkFF,MAAM,CAACG,MAAP,CAAcT,QAAQ,CAACQ,IAAT,CAAc,kBAAd,CAAd,EAAiD,CAAjD,CAAlF;AACJ,UAAIN,UAAU,GAAG,EAAE,GAAGX,WAAW,CAACW,UAAjB;AAA6BD,QAAAA,gBAA7B;AAA8C,WAAGD,QAAQ,CAACQ;AAA1D,OAAjB,CALY,CAOV;;AACEhB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAC;AAACT,UAAAA,UAAD;AAC5BM,UAAAA,IAAI,EAAEjB,WAAW,CAACiB,IADU;AACLP,UAAAA,gBADK;AAE5BW,UAAAA,SAAS,EAACrB,WAAW,CAACqB,SAFM;AAG5BC,UAAAA,OAAO,EAAC;AAHoB;AAA/B,OAAD,CAAR;AAKH,KAhBE,EAiBFC,KAjBE,CAiBIC,KAAK,IAAE;AACVvB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/B,QAAAA,KAAK,CAAC8B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAhC,QAAAA,KAAK,CAACiC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KAzBE,CAAP;AA0BC,GA5BD;AA6BH;AAED,OAAO,SAASW,yBAAT,CAAmCrB,QAAnC,EAA6CsB,SAA7C,EAAwDC,kBAAxD,EAA4Eb,IAA5E,EAAkFc,IAAlF,EAAwF;AAC3F,MAAI3B,SAAS,GAAC,EAAd;AACA0B,EAAAA,kBAAkB,CAACE,GAAnB,CAAuB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChC,QAAIC,CAAC,GAAG,EAAR;AACA/B,IAAAA,SAAS,GAAGA,SAAS,GAAC6B,IAAI,CAAC7B,SAA3B;;AACA,QAAI8B,CAAC,GAACJ,kBAAkB,CAACM,MAAzB,EAAiC;AAC7B,UAAIF,CAAC,GAAGJ,kBAAkB,CAACM,MAAnB,GAA4B,CAApC,EAAuC;AAClCD,QAAAA,CAAC,GAAC,GAAF;AACJ;;AACD/B,MAAAA,SAAS,GAAEA,SAAS,GAAC+B,CAArB;AACH,KALD,MAMK;AACD/B,MAAAA,SAAS,GAAG6B,IAAI,CAAC7B,SAAjB;AACH;AACJ,GAZD;AAaA,SAAO,UAAUH,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,iCAAX,EACH;AACIE,MAAAA,SAAS,EAAEA,SADf;AAEIiC,MAAAA,YAAY,EAAEP,kBAAkB,CAAC,CAAD,CAAlB,CAAsBO,YAFxC;AAGIC,MAAAA,eAAe,EAACR,kBAAkB,CAAC,CAAD,CAAlB,CAAsBQ,eAH1C;AAK4BhC,MAAAA,QAAQ,EAACC;AALrC,KADG,EAONC,IAPM,CAODC,QAAQ,IAAE;AACT;AACH,UAAIE,UAAU,GAAG,EAAE,GAAGM,IAAL;AAAW,WAAGR,QAAQ,CAACQ;AAAvB,OAAjB;AAEGtB,MAAAA,QAAQ,CAACgB,UAAD,CAAR;AACCV,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAC;AACpCT,UAAAA,UADoC;AAE5BM,UAAAA,IAAI,EAACR,QAAQ,CAACQ,IAFc;AAG5BK,UAAAA,OAAO,EAAC;AAHoB;AAA/B,OAAD,CAAR;AAKH,KAjBE,EAkBFC,KAlBE,CAkBIC,KAAK,IAAI;AACZe,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBhB,KAAvB;AACAvB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/B,QAAAA,KAAK,CAAC8B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAhC,QAAAA,KAAK,CAACiC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA3BE,CAAP;AA4BC,GA9BD;AA+BH;AACD,OAAO,SAASwB,4BAAT,CAAsClC,QAAtC,EAAgDsB,SAAhD,EAA2Da,qBAA3D,EAAkFzB,IAAlF,EAAwFc,IAAxF,EAA8F;AACjG,MAAIY,sBAAsB,GAAG,EAA7B;AACA,MAAIvC,SAAS,GAAC,EAAd;AAEAsC,EAAAA,qBAAqB,CAACV,GAAtB,CAA0B,CAACC,IAAD,EAAOC,CAAP,KAAa;AACnC,QAAIC,CAAC,GAAG,EAAR;AACAQ,IAAAA,sBAAsB,GAAGA,sBAAsB,GAAGV,IAAI,CAACU,sBAAvD;AACAvC,IAAAA,SAAS,GAAGA,SAAS,GAAC6B,IAAI,CAAC7B,SAA3B;;AAEA,QAAI8B,CAAC,GAACQ,qBAAqB,CAACN,MAA5B,EAAoC;AAChC,UAAIF,CAAC,GAAGQ,qBAAqB,CAACN,MAAtB,GAA+B,CAAvC,EAA0C;AACrCD,QAAAA,CAAC,GAAC,GAAF;AACJ;;AACDQ,MAAAA,sBAAsB,GAAGA,sBAAsB,GAAGR,CAAlD;AACA/B,MAAAA,SAAS,GAAEA,SAAS,GAAC+B,CAArB;AAEH,KAPD,MAQK;AACDQ,MAAAA,sBAAsB,GAAGV,IAAI,CAACU,sBAA9B;AACAvC,MAAAA,SAAS,GAAG6B,IAAI,CAAC7B,SAAjB;AAEH;AACJ,GAlBD;AAmBA,SAAO,UAAUH,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,oCAAX,EACH;AAEIE,MAAAA,SAAS,EAAEA,SAFf;AAGIuC,MAAAA,sBAAsB,EAAEA,sBAH5B;AAKIrC,MAAAA,QAAQ,EAAEC;AALd,KADG,EASNC,IATM,CASDC,QAAQ,IAAE;AACT;AACH,UAAIE,UAAU,GAAG,EAAE,GAAGM,IAAL;AAAW,WAAGR,QAAQ,CAACQ;AAAvB,OAAjB;AAEGtB,MAAAA,QAAQ,CAACgB,UAAD,CAAR;AACCV,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAC;AACpCT,UAAAA,UADoC;AAE5BM,UAAAA,IAAI,EAACR,QAAQ,CAACQ,IAFc;AAG5BK,UAAAA,OAAO,EAAC;AAHoB;AAA/B,OAAD,CAAR;AAKH,KAnBE,EAoBFC,KApBE,CAoBIC,KAAK,IAAI;AACZe,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBhB,KAAvB;AACAvB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/B,QAAAA,KAAK,CAAC8B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAhC,QAAAA,KAAK,CAACiC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA7BE,CAAP;AA8BC,GAhCD;AAiCH;AACD,OAAO,SAAS2B,eAAT,CAAyB5C,WAAzB,EAAsC6C,IAAtC,EAA4C;AAE/C,SAAO,UAAU5C,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,4BAAX,EACH;AACIC,MAAAA,SAAS,EAAEH,WAAW,CAACG,SAD3B;AACsCC,MAAAA,SAAS,EAAEJ,WAAW,CAAC8C,OAAZ,CAAoB1C,SADrE;AAEgCuC,MAAAA,sBAAsB,EAAC3C,WAAW,CAAC8C,OAAZ,CAAoBH,sBAF3E;AAG4BrC,MAAAA,QAAQ,EAACN,WAAW,CAACO;AAHjD,KADG,EAKNC,IALM,CAKDC,QAAQ,IAAE;AACZ,UAAIsC,WAAW,GAAG/C,WAAW,CAACW,UAAZ,CAAuBoC,WAAvB,IAAsC,IAAInC,GAAJ,EAAxD;AACImC,MAAAA,WAAW,CAAClC,GAAZ,CAAgBC,QAAQ,CAACC,MAAM,CAACC,IAAP,CAAYP,QAAQ,CAACQ,IAAT,CAAc,aAAd,CAAZ,EAA0C,CAA1C,CAAD,CAAxB,EAAwEF,MAAM,CAACG,MAAP,CAAcT,QAAQ,CAACQ,IAAT,CAAc,aAAd,CAAd,EAA4C,CAA5C,CAAxE;AACJ,UAAIN,UAAU,GAAG,EAAE,GAAGX,WAAW,CAACW,UAAjB;AAA4BoC,QAAAA,WAA5B;AAAwC,WAAGtC,QAAQ,CAACQ;AAApD,OAAjB,CAHY,CAKV;;AACEhB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAC;AAACT,UAAAA,UAAD;AACpCM,UAAAA,IAAI,EAAEjB,WAAW,CAACiB,IADkB;AAEpC8B,UAAAA,WAFoC;AAG5B1B,UAAAA,SAAS,EAACrB,WAAW,CAACqB,SAHM;AAI5BC,UAAAA,OAAO,EAAC;AAJoB;AAA/B,OAAD,CAAR;AAMH,KAjBE,EAkBFC,KAlBE,CAkBIC,KAAK,IAAE;AACVvB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/B,QAAAA,KAAK,CAAC8B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAhC,QAAAA,KAAK,CAACiC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA1BE,CAAP;AA2BC,GA7BD;AA8BH;AACD,OAAO,SAAS+B,sBAAT,CAAgCzC,QAAhC,EAA0CsB,SAA1C,EAAqDoB,gBAArD,EAAuEhC,IAAvE,EAA6Ec,IAA7E,EAAmF;AACtF,MAAIY,sBAAsB,GAAG,EAA7B;AACA,MAAIvC,SAAS,GAAG,EAAhB;AACA,MAAI8C,oBAAoB,GAAC,EAAzB;AAEAD,EAAAA,gBAAgB,CAACjB,GAAjB,CAAqB,CAACC,IAAD,EAAOC,CAAP,KAAa;AAC9B,QAAIC,CAAC,GAAG,EAAR;AACAQ,IAAAA,sBAAsB,GAAGA,sBAAsB,GAAGV,IAAI,CAACU,sBAAvD;AACAvC,IAAAA,SAAS,GAAGA,SAAS,GAAC6B,IAAI,CAAC7B,SAA3B;AACA8C,IAAAA,oBAAoB,GAAGA,oBAAoB,GAACjB,IAAI,CAACiB,oBAAjD;;AAEA,QAAIhB,CAAC,GAACe,gBAAgB,CAACb,MAAvB,EAA+B;AAC3B,UAAIF,CAAC,GAAGe,gBAAgB,CAACb,MAAjB,GAA0B,CAAlC,EAAqC;AAChCD,QAAAA,CAAC,GAAC,GAAF;AACJ;;AACDQ,MAAAA,sBAAsB,GAAGA,sBAAsB,GAAGR,CAAlD;AACA/B,MAAAA,SAAS,GAAEA,SAAS,GAAC+B,CAArB;AACAe,MAAAA,oBAAoB,GAAGA,oBAAoB,GAACf,CAA5C;AAEH,KARD,MASK;AACDQ,MAAAA,sBAAsB,GAAGV,IAAI,CAACU,sBAA9B;AACAvC,MAAAA,SAAS,GAAG6B,IAAI,CAAC7B,SAAjB;AACA8C,MAAAA,oBAAoB,GAAGjB,IAAI,CAACiB,oBAA5B;AAEH;AACJ,GArBD;AAsBA,SAAO,UAAUjD,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,+BAAX,EACH;AAEIE,MAAAA,SAAS,EAAEA,SAFf;AAGIuC,MAAAA,sBAAsB,EAAEA,sBAH5B;AAIIO,MAAAA,oBAAoB,EAAEA,oBAJ1B;AAMI5C,MAAAA,QAAQ,EAAEC;AANd,KADG,EAUNC,IAVM,CAUDC,QAAQ,IAAE;AACT;AACH,UAAIE,UAAU,GAAG,EAAE,GAAGM,IAAL;AAAW,WAAGR,QAAQ,CAACQ;AAAvB,OAAjB;AAEGtB,MAAAA,QAAQ,CAACgB,UAAD,CAAR;AACCV,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAC;AACpCT,UAAAA,UADoC;AAE5BM,UAAAA,IAAI,EAACR,QAAQ,CAACQ,IAFc;AAG5BK,UAAAA,OAAO,EAAC;AAHoB;AAA/B,OAAD,CAAR;AAKH,KApBE,EAqBFC,KArBE,CAqBIC,KAAK,IAAI;AACZe,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBhB,KAAvB;AACAvB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/B,QAAAA,KAAK,CAAC8B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAhC,QAAAA,KAAK,CAACiC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KA9BE,CAAP;AA+BC,GAjCD;AAkkC,qCAAT,CAA+C5C,QAA/C,EAAyD6C,OAAzD,EAAkEC,YAAlE,EAAgFC,eAAhF,EAAiGC,UAAjG,EAA6GC,WAA7G,EAA0HC,cAA1H,EAA0IC,SAA1I,EAAqJC,KAArJ,EAA4JC,CAA5J,EAA+J;AAClK,MAAIjB,sBAAsB,GAAG,EAA7B;AACA,MAAIO,oBAAoB,GAAG,EAA3B;AACA,MAAI9C,SAAS,GAAG,EAAhB;AAEA,MAAIyD,KAAK,GAAG,EAAZ;;AACA,MAAIH,SAAS,KAAKI,SAAlB,EAA6B;AACzB,QAAIC,MAAM,GAAGV,YAAY,CAACW,MAAb,CAAoB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC3C,aAAOb,YAAY,CAACc,OAAb,CAAqBF,CAArB,MAA4BC,KAAnC;AACH,KAFY,CAAb;AAGA,QAAIE,SAAS,GAAGd,eAAe,CAACU,MAAhB,CAAuB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACjD,aAAOZ,eAAe,CAACa,OAAhB,CAAwBF,CAAxB,MAA+BC,KAAtC;AACH,KAFe,CAAhB;AAGA,QAAIG,IAAI,GAAGd,UAAU,CAACS,MAAX,CAAkB,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACvC,aAAOX,UAAU,CAACY,OAAX,CAAmBF,CAAnB,MAA0BC,KAAjC;AACH,KAFU,CAAX;AAGA9D,IAAAA,SAAS,GAAG2D,MAAM,CAAC/B,GAAP,CAAWsC,CAAC,IAAIA,CAAhB,EAAmBC,IAAnB,CAAwB,GAAxB,CAAZ;AACA5B,IAAAA,sBAAsB,GAACyB,SAAS,CAACpC,GAAV,CAAcsC,CAAC,IAAIA,CAAnB,EAAsBC,IAAtB,CAA2B,GAA3B,CAAvB;AACArB,IAAAA,oBAAoB,GAACmB,IAAI,CAACrC,GAAL,CAASsC,CAAC,IAAIA,CAAd,EAAiBC,IAAjB,CAAsB,GAAtB,CAArB;AAECb,IAAAA,SAAS,GAAG;AACRf,MAAAA,sBAAsB,EAAEA,sBADhB;AAERvC,MAAAA,SAAS,EAAEA,SAFH;AAGR8C,MAAAA,oBAAoB,EAAEA,oBAHd;AAIRW,MAAAA,KAAK,EAAC;AAJE,KAAZ;AAOH;;AAED,SAAO,UAAU5D,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,yBAAX,EACH;AACIwD,MAAAA,SAAS,EAAEA,SADf;AAEIpD,MAAAA,QAAQ,EAAEC;AAFd,KADG,EAKNC,IALM,CAKDC,QAAQ,IAAE;AACb;AACA,UAAIC,gBAAgB,GAAGiD,KAAK,CAACjD,gBAAN,IAA0B,IAAIE,GAAJ,EAAjD;AACA,UAAImC,WAAW,GAAGY,KAAK,CAACZ,WAAN,IAAqB,IAAInC,GAAJ,EAAvC;AACAF,MAAAA,gBAAgB,GAAGiD,KAAK,CAACjD,gBAAN,IAA0B,IAAIE,GAAJ,EAA7C;AAEMmC,MAAAA,WAAW,GAAGY,KAAK,CAACZ,WAAN,IAAqB,IAAInC,GAAJ,EAAnC;AACDmC,MAAAA,WAAW,CAAClC,GAAZ,CAAgBC,QAAQ,CAACC,MAAM,CAACC,IAAP,CAAYP,QAAQ,CAACQ,IAAT,CAAcuD,IAAd,CAAmB,aAAnB,CAAZ,EAA+C,CAA/C,CAAD,CAAxB,EAA6EzD,MAAM,CAACG,MAAP,CAAcT,QAAQ,CAACQ,IAAT,CAAcuD,IAAd,CAAmB,aAAnB,CAAd,EAAiD,CAAjD,CAA7E;AAIA9D,MAAAA,gBAAgB,CAACG,GAAjB,CAAqBC,QAAQ,CAACC,MAAM,CAACC,IAAP,CAAYP,QAAQ,CAACQ,IAAT,CAAcuD,IAAd,CAAmB,kBAAnB,CAAZ,EAAoD,CAApD,CAAD,CAA7B,EAAuFzD,MAAM,CAACG,MAAP,CAAcT,QAAQ,CAACQ,IAAT,CAAcuD,IAAd,CAAmB,kBAAnB,CAAd,EAAsD,CAAtD,CAAvF;AAGJ,UAAI7D,UAAU,GAAG,EAAE,GAAGgD,KAAL;AAAYjD,QAAAA,gBAAZ;AAA6BqC,QAAAA,WAA7B;AAAyC,WAAGtC,QAAQ,CAACQ,IAAT,CAAcuD;AAA1D,OAAjB;AAEI7E,MAAAA,QAAQ,CAACgB,UAAD,CAAR;AACAV,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAC;AAACT,UAAAA,UAAD;AACpCM,UAAAA,IAAI,EAACP,gBAD+B;AACdqC,UAAAA,WADc;AAE9B;AACEzB,UAAAA,OAAO,EAAC;AAHoB;AAA/B,OAAD,CAAR;AAKH,KA3BE,EA4BFC,KA5BE,CA4BIC,KAAK,IAAE;AACVvB,MAAAA,QAAQ,CAAC;AAACkB,QAAAA,IAAI,EAAErB,cAAP;AAAuBsB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACf,QAAN,CAAegB,MAAf,KAA0B,GAA9B,EAAkC;AAC9B/B,QAAAA,KAAK,CAAC8B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACAhC,QAAAA,KAAK,CAACiC,IAAN,CAAWH,KAAK,CAACf,QAAN,CAAeQ,IAA1B;AACH;AACJ,KApCE,CAAP;AAqCC,GAvCD;AAwCH","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { sortData } from \"../components/CommonScript\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getSubSampleBySample (methodParam) {            \r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"coarelease/getSubSampleBySample\", \r\n                                    {nsitecode:methodParam.nsitecode, npreregno:methodParam.primaryKeyValue,\r\n                                    userinfo:methodParam.userInfo})\r\n    .then(response=>{ \r\n       // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n        let releaseSubSample = methodParam.masterData.releaseSubSample || new Map();           \r\n\r\n            releaseSubSample.set(parseInt(Object.keys(response.data[\"ReleaseSubSample\"])[0]), Object.values(response.data[\"ReleaseSubSample\"])[0]);\r\n        let masterData = { ...methodParam.masterData, releaseSubSample,...response.data};\r\n\r\n          //  sortData(masterData);\r\n            dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n                        data: methodParam.data,releaseSubSample,\r\n                        dataState:methodParam.dataState,\r\n                        loading:false\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n\r\nexport function getReleaseSelectedSamples(userInfo, controlId, selectedSampleData, data, flag) {  \r\n    let npreregno=\"\"\r\n    selectedSampleData.map((item, i) => {\r\n        let s = \"\"\r\n        npreregno = npreregno+item.npreregno;\r\n        if (i<selectedSampleData.length) {\r\n            if (i < selectedSampleData.length - 1) {\r\n                 s=\",\"\r\n            }\r\n            npreregno =npreregno+s;\r\n        }\r\n        else {\r\n            npreregno = item.npreregno;\r\n        }\r\n    })\r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"coarelease/updateReleasedSample\", \r\n        {\r\n            npreregno: npreregno,\r\n            nregtypecode: selectedSampleData[0].nregtypecode,\r\n            nregsubtypecode:selectedSampleData[0].nregsubtypecode,\r\n\r\n                                    userinfo:userInfo})\r\n    .then(response=>{ \r\n           // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n        let masterData = { ...data, ...response.data};\r\n           \r\n           sortData(masterData);\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                masterData,\r\n                        data:response.data,\r\n                        loading:false\r\n                    }});\r\n        })\r\n        .catch(error => {\r\n            console.log(\"errordot\",error)\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\nexport function getReleaseSelectedSubSamples(userInfo, controlId, selectedSubSampleData, data, flag) {      \r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno=\"\"\r\n\r\n    selectedSubSampleData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno+item.npreregno;\r\n\r\n        if (i<selectedSubSampleData.length) {\r\n            if (i < selectedSubSampleData.length - 1) {\r\n                 s=\",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno =npreregno+s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"coarelease/updateReleasedSubSample\", \r\n        {\r\n             \r\n            npreregno: npreregno,\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n\r\n            userinfo: userInfo\r\n        })\r\n      \r\n    .then(response=>{ \r\n           // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n        let masterData = { ...data, ...response.data};\r\n           \r\n           sortData(masterData);\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                masterData,\r\n                        data:response.data,\r\n                        loading:false\r\n                    }});\r\n        })\r\n        .catch(error => {\r\n            console.log(\"errordot\",error)\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\nexport function getTestBySample(methodParam, kjkj) {   \r\n    \r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"coarelease/getTestBySample\", \r\n        {\r\n            nsitecode: methodParam.nsitecode, npreregno: methodParam.viewRow.npreregno,\r\n                                        ntransactionsamplecode:methodParam.viewRow.ntransactionsamplecode,\r\n                                    userinfo:methodParam.userInfo})\r\n    .then(response=>{ \r\n        let releaseTest = methodParam.masterData.releaseTest || new Map();           \r\n            releaseTest.set(parseInt(Object.keys(response.data[\"ReleaseTest\"])[0]), Object.values(response.data[\"ReleaseTest\"])[0]);\r\n        let masterData = { ...methodParam.masterData,releaseTest,...response.data};\r\n\r\n          //  sortData(masterData);\r\n            dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n                data: methodParam.data,\r\n                releaseTest,\r\n                        dataState:methodParam.dataState,\r\n                        loading:false\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\nexport function getReleaseSelectedTest(userInfo, controlId, selectedTestData, data, flag) {   \r\n    let ntransactionsamplecode = \"\"\r\n    let npreregno = \"\"\r\n    let ntransactiontestcode=\"\"\r\n\r\n    selectedTestData.map((item, i) => {\r\n        let s = \"\"\r\n        ntransactionsamplecode = ntransactionsamplecode + item.ntransactionsamplecode;\r\n        npreregno = npreregno+item.npreregno;\r\n        ntransactiontestcode = ntransactiontestcode+item.ntransactiontestcode;\r\n\r\n        if (i<selectedTestData.length) {\r\n            if (i < selectedTestData.length - 1) {\r\n                 s=\",\"\r\n            }\r\n            ntransactionsamplecode = ntransactionsamplecode + s;\r\n            npreregno =npreregno+s;\r\n            ntransactiontestcode = ntransactiontestcode+s;\r\n\r\n        }\r\n        else {\r\n            ntransactionsamplecode = item.ntransactionsamplecode;\r\n            npreregno = item.npreregno;\r\n            ntransactiontestcode = item.ntransactiontestcode;\r\n\r\n        }\r\n    })\r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"coarelease/updateReleasedTest\", \r\n        {\r\n             \r\n            npreregno: npreregno,\r\n            ntransactionsamplecode: ntransactionsamplecode,  \r\n            ntransactiontestcode: ntransactiontestcode,\r\n\r\n            userinfo: userInfo\r\n        })\r\n      \r\n    .then(response=>{ \r\n           // let releaseSubSample =response.data[\"ReleaseSample\"];           \r\n        let masterData = { ...data, ...response.data};\r\n           \r\n           sortData(masterData);\r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                masterData,\r\n                        data:response.data,\r\n                        loading:false\r\n                    }});\r\n        })\r\n        .catch(error => {\r\n            console.log(\"errordot\",error)\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n// export function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1,SampleArray,SubSampleArray,TestArray,Data1,k) {    \r\n//    let ntransactionsamplecode = \"\"\r\n//    let npreregno = \"\"\r\n//     let ntransactiontestcode = \"\" \r\n//     let bFlag = \"\" \r\n//     if (TestArray !== undefined) {\r\n//         TestArray.map(test => {\r\n//             ntransactionsamplecode += test.ntransactionsamplecode + ',';\r\n//             npreregno += test.npreregno + ',';\r\n//             ntransactiontestcode += test.ntransactiontestcode + ',';\r\n//         })\r\n//         TestArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"3\"\r\n\r\n//         }\r\n//     }   \r\n//     if (SubSampleArray !== undefined) {\r\n//         SubSampleArray.map(SubSample => {\r\n//             ntransactionsamplecode += SubSample.ntransactionsamplecode + ',';\r\n//             npreregno += SubSample.npreregno + ',';\r\n//             ntransactiontestcode += SubSample.ntransactiontestcode + ',';\r\n//             SubSampleArray = {\r\n//                 ntransactionsamplecode: ntransactionsamplecode,\r\n//                 npreregno: npreregno,\r\n//                 ntransactiontestcode: ntransactiontestcode,\r\n//                 bFlag:\"2\"\r\n\r\n//             }\r\n//         })\r\n//     }\r\n//     if (SampleArray !== undefined) {\r\n\r\n//         SampleArray.map(Sample => {\r\n//             ntransactionsamplecode += Sample.ntransactionsamplecode + ',';\r\n//             npreregno += Sample.npreregno + ',';\r\n//             ntransactiontestcode += Sample.ntransactiontestcode + ',';\r\n\r\n//         })\r\n//         SampleArray = {\r\n//             ntransactionsamplecode: ntransactionsamplecode,\r\n//             npreregno: npreregno,\r\n//             ntransactiontestcode: ntransactiontestcode,\r\n//             bFlag:\"1\"\r\n\r\n//         }\r\n//     }\r\n//     let allNpreregno = []\r\n//     if (SampleArray1 !== undefined) {\r\n\r\n//         SampleArray1.map(temp => {\r\n//             allNpreregno += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactionsamplecode = []\r\n//     if (SubSampleArray1 !== undefined) {\r\n\r\n//         SubSampleArray1.map(temp => {\r\n//             allNtransactionsamplecode += temp + ','\r\n//         })\r\n//     }\r\n//     let allNtransactiontestcode = []\r\n//     if (TestArray1 !== undefined) {\r\n\r\n//         TestArray1.map(temp => {\r\n//             allNtransactiontestcode += temp + ','\r\n//         })\r\n//     }\r\n\r\n//     return function (dispatch) {  \r\n//     dispatch(initRequest(true));\r\n//     return rsapi.post(\"coarelease/updateStatus\", \r\n//         {\r\n//             SampleArray:SampleArray,\r\n//             SubSampleArray:SubSampleArray,\r\n//             TestArray: TestArray,\r\n//             userinfo: userInfo,\r\n//             allNtransactionsamplecode: allNtransactionsamplecode,\r\n//             allNtransactiontestcode: allNtransactiontestcode,\r\n//             allNpreregno:allNpreregno\r\n//         })\r\n//     .then(response=>{ \r\n//        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n//        let releaseSubSample = Data1.releaseSubSample || new Map();           \r\n//        let releaseTest = Data1.releaseTest || new Map();           \r\n//        releaseSubSample = Data1.releaseSubSample || new Map();           \r\n\r\n//              releaseTest = Data1.releaseTest || new Map();\r\n// if(response.data.body[\"cFlag\"]===\"3\"){\r\n//             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\r\n//        }\r\n//       //  else {\r\n//         if(response.data.body[\"cFlag\"]===\"2\"){\r\n\r\n\r\n//             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\r\n\r\n//         }\r\n//         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\r\n\r\n//             sortData(masterData);\r\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n//                 data:releaseSubSample,releaseTest,\r\n//                       //  dataState:dataState,\r\n//                         loading:false\r\n//                     }});\r\n//         })\r\n//         .catch(error=>{\r\n//             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//             if (error.response.status === 500){\r\n//                 toast.error(error.message);\r\n//             } \r\n//             else{               \r\n//                 toast.warn(error.response.data);\r\n//             }  \r\n//         })        \r\n//     }\r\n// }\r\nexport function getReleaseSelectedSampleSubSampleTest(userInfo, control, SampleArray1, SubSampleArray1, TestArray1, SampleArray, SubSampleArray, TestArray, Data1, k) {\r\n    let ntransactionsamplecode = \"\"\r\n    let ntransactiontestcode = \"\"\r\n    let npreregno = \"\"\r\n\r\n    let bFlag = \"\"\r\n    if (TestArray !== undefined) {\r\n        let sample = SampleArray1.filter((c, index) => {\r\n            return SampleArray1.indexOf(c) === index;\r\n        });\r\n        let subsample = SubSampleArray1.filter((c, index) => {\r\n            return SubSampleArray1.indexOf(c) === index;\r\n        });\r\n        let test = TestArray1.filter((c, index) => {\r\n            return TestArray1.indexOf(c) === index;\r\n        });\r\n        npreregno = sample.map(x => x).join(\",\")\r\n        ntransactionsamplecode=subsample.map(x => x).join(\",\")\r\n        ntransactiontestcode=test.map(x => x).join(\",\")\r\n        \r\n         TestArray = {\r\n             ntransactionsamplecode: ntransactionsamplecode,\r\n             npreregno: npreregno,\r\n             ntransactiontestcode: ntransactiontestcode,\r\n             bFlag:\"3\"\r\n \r\n         }\r\n     }   \r\n     \r\n     return function (dispatch) {  \r\n     dispatch(initRequest(true));\r\n     return rsapi.post(\"coarelease/updateStatus\", \r\n         {\r\n             TestArray: TestArray,\r\n             userinfo: userInfo,\r\n         })\r\n     .then(response=>{ \r\n        // let releaseSubSample = response.data[\"ReleaseSubSample\"];  \r\n        let releaseSubSample = Data1.releaseSubSample || new Map();           \r\n        let releaseTest = Data1.releaseTest || new Map();           \r\n        releaseSubSample = Data1.releaseSubSample || new Map();           \r\n \r\n              releaseTest = Data1.releaseTest || new Map();\r\n             releaseTest.set(parseInt(Object.keys(response.data.body[\"ReleaseTest\"])[0]), Object.values(response.data.body[\"ReleaseTest\"])[0]);\r\n     \r\n \r\n \r\n             releaseSubSample.set(parseInt(Object.keys(response.data.body[\"ReleaseSubSample\"])[0]), Object.values(response.data.body[\"ReleaseSubSample\"])[0]);\r\n \r\n         \r\n         let masterData = { ...Data1, releaseSubSample,releaseTest,...response.data.body};\r\n \r\n             sortData(masterData);\r\n             dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n                 data:releaseSubSample,releaseTest,\r\n                       //  dataState:dataState,\r\n                         loading:false\r\n                     }});\r\n         })\r\n         .catch(error=>{\r\n             dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n             if (error.response.status === 500){\r\n                 toast.error(error.message);\r\n             } \r\n             else{               \r\n                 toast.warn(error.response.data);\r\n             }  \r\n         })        \r\n     }\r\n }\r\n "]},"metadata":{},"sourceType":"module"}