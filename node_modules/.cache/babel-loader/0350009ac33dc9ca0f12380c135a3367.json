{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport Immutable, { fromJS, Map } from \"immutable\";\nimport { validateTree } from \"../utils/validation\";\nimport { extendConfig } from \"../utils/configUtils\";\nimport { getTreeBadFields, getLightTree } from \"../utils/treeUtils\";\nimport { isJsonLogic } from \"../utils/stuff\";\nexport var getTree = function getTree(immutableTree) {\n  var light = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var children1AsArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!immutableTree) return undefined;\n  var tree = immutableTree;\n  tree = tree.toJS();\n  if (light) tree = getLightTree(tree, children1AsArray);\n  return tree;\n};\nexport var loadTree = function loadTree(serTree) {\n  if (isImmutableTree(serTree)) {\n    return serTree;\n  } else if (isTree(serTree)) {\n    return jsTreeToImmutable(serTree);\n  } else if (typeof serTree == \"string\" && serTree.startsWith('[\"~#iM\"')) {\n    //tip: old versions of RAQB were saving tree with `transit.toJSON()`\n    // https://github.com/ukrbublik/react-awesome-query-builder/issues/69\n    throw \"You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17\";\n  } else if (typeof serTree == \"string\") {\n    return jsTreeToImmutable(JSON.parse(serTree));\n  } else throw \"Can't load tree!\";\n};\nexport var checkTree = function checkTree(tree, config) {\n  if (!tree) return undefined;\n  var extendedConfig = extendConfig(config);\n  return validateTree(tree, null, extendedConfig, extendedConfig);\n};\nexport var isValidTree = function isValidTree(tree) {\n  return getTreeBadFields(tree).length == 0;\n};\nexport var isImmutableTree = function isImmutableTree(tree) {\n  return Map.isMap(tree);\n};\nexport var isTree = function isTree(tree) {\n  return _typeof(tree) == \"object\" && (tree.type == \"group\" || tree.type == \"switch_group\");\n};\nexport { isJsonLogic };\n\nfunction jsTreeToImmutable(tree) {\n  return fromJS(tree, function (key, value) {\n    var outValue;\n\n    if (key == \"properties\") {\n      outValue = value.toOrderedMap(); // `value` should be undefined instead of null\n      // JSON doesn't support undefined and replaces undefined -> null\n      // So fix: null -> undefined\n\n      for (var i = 0; i < 2; i++) {\n        var _outValue$get;\n\n        if (((_outValue$get = outValue.get(\"value\")) === null || _outValue$get === void 0 ? void 0 : _outValue$get.get(i)) === null) {\n          outValue = outValue.setIn([\"value\", i], undefined);\n        }\n      }\n    } else if (key == \"value\" && value.get(0) && value.get(0).toJS !== undefined) {\n      var valueJs = value.get(0).toJS();\n\n      if (valueJs.func) {\n        outValue = value.toOrderedMap();\n      } else {\n        // only for raw values keep JS representation\n        outValue = Immutable.List.of(valueJs);\n      }\n    } else if (key == \"asyncListValues\") {\n      // keep in JS format\n      outValue = value.toJS();\n    } else if (key == \"children1\" && Immutable.Iterable.isIndexed(value)) {\n      outValue = new Immutable.OrderedMap(value.map(function (child) {\n        return [child.get(\"id\"), child];\n      }));\n    } else {\n      outValue = Immutable.Iterable.isIndexed(value) ? value.toList() : value.toOrderedMap();\n    }\n\n    return outValue;\n  });\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/import/tree.js"],"names":["_typeof","Immutable","fromJS","Map","validateTree","extendConfig","getTreeBadFields","getLightTree","isJsonLogic","getTree","immutableTree","light","arguments","length","undefined","children1AsArray","tree","toJS","loadTree","serTree","isImmutableTree","isTree","jsTreeToImmutable","startsWith","JSON","parse","checkTree","config","extendedConfig","isValidTree","isMap","type","key","value","outValue","toOrderedMap","i","_outValue$get","get","setIn","valueJs","func","List","of","Iterable","isIndexed","OrderedMap","map","child","toList"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/typeof\";\nimport Immutable, { fromJS, Map } from \"immutable\";\nimport { validateTree } from \"../utils/validation\";\nimport { extendConfig } from \"../utils/configUtils\";\nimport { getTreeBadFields, getLightTree } from \"../utils/treeUtils\";\nimport { isJsonLogic } from \"../utils/stuff\";\nexport var getTree = function getTree(immutableTree) {\n  var light = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var children1AsArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (!immutableTree) return undefined;\n  var tree = immutableTree;\n  tree = tree.toJS();\n  if (light) tree = getLightTree(tree, children1AsArray);\n  return tree;\n};\nexport var loadTree = function loadTree(serTree) {\n  if (isImmutableTree(serTree)) {\n    return serTree;\n  } else if (isTree(serTree)) {\n    return jsTreeToImmutable(serTree);\n  } else if (typeof serTree == \"string\" && serTree.startsWith('[\"~#iM\"')) {\n    //tip: old versions of RAQB were saving tree with `transit.toJSON()`\n    // https://github.com/ukrbublik/react-awesome-query-builder/issues/69\n    throw \"You are trying to load query in obsolete serialization format (Immutable string) which is not supported in versions starting from 2.1.17\";\n  } else if (typeof serTree == \"string\") {\n    return jsTreeToImmutable(JSON.parse(serTree));\n  } else throw \"Can't load tree!\";\n};\nexport var checkTree = function checkTree(tree, config) {\n  if (!tree) return undefined;\n  var extendedConfig = extendConfig(config);\n  return validateTree(tree, null, extendedConfig, extendedConfig);\n};\nexport var isValidTree = function isValidTree(tree) {\n  return getTreeBadFields(tree).length == 0;\n};\nexport var isImmutableTree = function isImmutableTree(tree) {\n  return Map.isMap(tree);\n};\nexport var isTree = function isTree(tree) {\n  return _typeof(tree) == \"object\" && (tree.type == \"group\" || tree.type == \"switch_group\");\n};\nexport { isJsonLogic };\nfunction jsTreeToImmutable(tree) {\n  return fromJS(tree, function (key, value) {\n    var outValue;\n    if (key == \"properties\") {\n      outValue = value.toOrderedMap();\n\n      // `value` should be undefined instead of null\n      // JSON doesn't support undefined and replaces undefined -> null\n      // So fix: null -> undefined\n      for (var i = 0; i < 2; i++) {\n        var _outValue$get;\n        if (((_outValue$get = outValue.get(\"value\")) === null || _outValue$get === void 0 ? void 0 : _outValue$get.get(i)) === null) {\n          outValue = outValue.setIn([\"value\", i], undefined);\n        }\n      }\n    } else if (key == \"value\" && value.get(0) && value.get(0).toJS !== undefined) {\n      var valueJs = value.get(0).toJS();\n      if (valueJs.func) {\n        outValue = value.toOrderedMap();\n      } else {\n        // only for raw values keep JS representation\n        outValue = Immutable.List.of(valueJs);\n      }\n    } else if (key == \"asyncListValues\") {\n      // keep in JS format\n      outValue = value.toJS();\n    } else if (key == \"children1\" && Immutable.Iterable.isIndexed(value)) {\n      outValue = new Immutable.OrderedMap(value.map(function (child) {\n        return [child.get(\"id\"), child];\n      }));\n    } else {\n      outValue = Immutable.Iterable.isIndexed(value) ? value.toList() : value.toOrderedMap();\n    }\n    return outValue;\n  });\n}"]},"metadata":{},"sourceType":"module"}