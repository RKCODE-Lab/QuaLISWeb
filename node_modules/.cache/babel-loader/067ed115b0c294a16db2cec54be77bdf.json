{"ast":null,"code":"import { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport rsapi from '../rsapi';\nimport { initRequest } from './LoginAction';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, rearrangeDateFormat, ageCalculate } from '../components/CommonScript';\nimport { intl } from '../components/App';\nexport function getPatientDetail(patient, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/getPatient\", {\n      npatientcode: patient.npatientcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientComboService(inputParam) {\n  return function (dispatch) {\n    const genderService = rsapi.post(\"patient/getGender\", {\n      userinfo: inputParam.userInfo\n    });\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputParam.userInfo\n    });\n    let urlArray = [];\n\n    if (inputParam.operation === \"create\") {\n      urlArray = [genderService, UTCtimeZoneService];\n    } else {\n      const patientById = rsapi.post(\"patient/getActivePatientById\", {\n        [inputParam.primaryKeyName]: inputParam.masterData.SelectedPatient[inputParam.primaryKeyName],\n        \"userinfo\": inputParam.userInfo\n      });\n      urlArray = [genderService, patientById];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let gender = [];\n      const genderMap = constructOptionList(response[0].data['Gender'] || [], \"ngendercode\", \"sgendername\", undefined, undefined, false);\n      const genderList = genderMap.get(\"OptionList\");\n      let selectedRecord = {};\n      const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\n\n      if (inputParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n        gender.push({\n          \"value\": response[1].data[\"ngendercode\"],\n          \"label\": response[1].data[\"sgendername\"]\n        });\n        selectedRecord[\"ngendercode\"] = gender[0];\n\n        if (selectedRecord[\"ddob\"] !== null) {\n          selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\n        }\n      } else {\n        selectedRecord[\"ngendercode\"] = genderMap.get(\"DefaultValue\");\n        selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\n        selectedRecord[\"sage\"] = ageCalculate(selectedRecord[\"ddob\"]);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          genderList,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: inputParam.ncontrolcode,\n          loading: false,\n          currentTime\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientReport(patient, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"patient/patientReportGenerate\", {\n      patient,\n      userinfo: userInfo,\n      ncontrolcode: ncontrolCode\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPatientDetailsByFilterQuery(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/patient/filterByPatient\", {\n      \"filterquery\": inputParam.inputData.filterquery,\n      \"userinfo\": inputParam.inputData.userinfo\n    }).then(response => {\n      let slideResult = response.data.PatientList;\n      let selectedRecord = response.data.PatientList;\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          skip: 0,\n          take: 20,\n          slideResult: false,\n          openModal: false,\n          openAdvFilter: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/PatientAction.js"],"names":["toast","Axios","rsapi","initRequest","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","ageCalculate","intl","getPatientDetail","patient","userInfo","masterData","dispatch","post","npatientcode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getPatientComboService","inputParam","genderService","UTCtimeZoneService","urlArray","patientById","primaryKeyName","SelectedPatient","all","gender","genderMap","genderList","get","selectedRecord","currentTime","push","screenName","openModal","ncontrolCode","ncontrolcode","getPatientReport","loadEsign","document","getElementById","setAttribute","filepath","click","getPatientDetailsByFilterQuery","inputData","filterquery","slideResult","PatientList","searchedData","skip","take","openAdvFilter","formatMessage","id"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest } from './LoginAction';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {sortData, constructOptionList, rearrangeDateFormat, ageCalculate} from '../components/CommonScript';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nexport function getPatientDetail (patient, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"patient/getPatient\", {npatientcode:patient.npatientcode, userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\n\r\nexport function getPatientComboService(inputParam){ \r\n    return function (dispatch) {    \r\n  \r\n            const genderService = rsapi.post(\"patient/getGender\", {userinfo:inputParam.userInfo});\r\n            const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userInfo });\r\n                    \r\n            let urlArray = [];\r\n            if (inputParam.operation === \"create\"){\r\n               urlArray = [genderService, UTCtimeZoneService];\r\n            }\r\n            else{                    \r\n                const patientById =  rsapi.post(\"patient/getActivePatientById\", \r\n                                { [inputParam.primaryKeyName] :inputParam.masterData.SelectedPatient[inputParam.primaryKeyName] , \r\n                                    \"userinfo\": inputParam.userInfo} );\r\n                urlArray = [genderService, patientById];\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response=>{                   \r\n                    let gender =[];\r\n                 \r\n                    const genderMap = constructOptionList(response[0].data['Gender'] || [], \"ngendercode\",\r\n                                          \"sgendername\", undefined, undefined, false);               \r\n\r\n                    const genderList = genderMap.get(\"OptionList\");                   \r\n                    \r\n                    let selectedRecord =  {};\r\n                    const currentTime = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n                   \r\n                    if (inputParam.operation === \"update\"){\r\n                        selectedRecord = response[1].data;\r\n                       \r\n                        gender.push({\"value\" : response[1].data[\"ngendercode\"], \"label\" : response[1].data[\"sgendername\"]});\r\n                                             \r\n                        selectedRecord[\"ngendercode\"] = gender[0];\r\n\r\n                        if (selectedRecord[\"ddob\"] !== null){\r\n                            selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, selectedRecord[\"sdob\"]);\r\n                        }                                          \r\n                    }\r\n                    else{        \r\n                      \r\n                        selectedRecord[\"ngendercode\"] = genderMap.get(\"DefaultValue\");  \r\n                        selectedRecord[\"ddob\"] = rearrangeDateFormat(inputParam.userInfo, response[1].data);\r\n                        selectedRecord[\"sage\"]  = ageCalculate(selectedRecord[\"ddob\"])\r\n                    }\r\n                  \r\n                    dispatch({type: DEFAULT_RETURN, payload:{genderList,                            \r\n                                                            operation:inputParam.operation, \r\n                                                            screenName:inputParam.screenName,   \r\n                                                            selectedRecord,\r\n                                                            openModal : true,\r\n                                                            ncontrolCode:inputParam.ncontrolcode,\r\n                                                            loading:false,\r\n                                                            currentTime\r\n                                                            }});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }  \r\n                }) \r\n  \r\n}}\r\n\r\n\r\nexport function getPatientReport (patient, userInfo, ncontrolCode) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"patient/patientReportGenerate\", {patient, userinfo:userInfo, \r\n                                                        ncontrolcode:ncontrolCode})\r\n    .then(response => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false, \r\n            loadEsign: false, openModal: false } })\r\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n        document.getElementById(\"download_data\").click();\r\n    })\r\n    .catch(error => {\r\n        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n        if (error.response.status === 500) {\r\n            toast.error(error.message);\r\n        }\r\n        else {\r\n            toast.warn(error.response.data);\r\n        }\r\n    }) \r\n}}\r\n  \r\nexport function getPatientDetailsByFilterQuery(inputParam,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/patient/filterByPatient\",{\"filterquery\":inputParam.inputData.filterquery \r\n\r\n            , \"userinfo\": inputParam.inputData.userinfo})\r\n            .then(response => {\r\n               let slideResult=response.data.PatientList;\r\n               let selectedRecord=response.data.PatientList;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,searchedData: undefined \r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false, skip: 0, take: 20,slideResult:false,\r\n                        openModal:false,openAdvFilter:false,selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                toast.error(intl.formatMessage({ id: error.message }));\r\n            });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}