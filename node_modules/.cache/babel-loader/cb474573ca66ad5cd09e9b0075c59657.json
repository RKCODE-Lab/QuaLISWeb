{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\Method.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, getMethodComboService, updateStore, validateEsignCredential } from '../../actions';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddMethod from './AddMethod';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Method extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit            \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.nmethodcode;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n      }\n\n      inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\n      inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"] ? this.state.selectedRecord[\"nmethodcatcode\"].value : \"\";\n      inputData[\"method\"][\"smethodname\"] = this.state.selectedRecord[\"smethodname\"] ? this.state.selectedRecord[\"smethodname\"] : \"\";\n      inputData[\"method\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_METHODCATEGORY\",\n      \"dataField\": \"smethodcatname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_METHODNAME\",\n      \"dataField\": \"smethodname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYSTATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: \"Method\",\n      primaryeyField: \"nmethodcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField: \"nmethodcode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nmethodcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.getMethodComboService,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getMethodComboService(addParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: [{\n        \"idsName\": \"IDS_METHODCATEGORY\",\n        \"dataField\": \"nmethodcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_METHODNAME\",\n        \"dataField\": \"smethodname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(AddMethod, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        methodCategoryList: this.props.Login.methodCategoryList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getMethodComboService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(Method));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/Method.jsx"],"names":["React","ListWrapper","Row","Col","toast","process","connect","injectIntl","callService","crudMaster","getMethodComboService","updateStore","validateEsignCredential","DataGrid","Esign","DEFAULT_RETURN","SlideOutModal","AddMethod","showEsign","getControlMap","transactionStatus","mapStateToProps","state","Login","Method","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","deleteRecord","deleteParam","inputParam","classUrl","methodUrl","displayName","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","undefined","JSON","parse","stringify","nmethodcode","nmastersitecode","esignNeeded","validateEsign","sreason","password","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","extractedColumnList","getDerivedStateFromProps","warn","render","addId","has","concat","get","ncontrolcode","editId","addParam","primaryeyField","primaryKeyValue","editParam","primaryKeyField","methodCategoryList","componentDidUpdate","previousProps","Object","values","map","item","push"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {ListWrapper} from '../../components/client-group.styles';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster,getMethodComboService,updateStore, validateEsignCredential, } from '../../actions';\r\n\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddMethod from './AddMethod';\r\n\r\nimport {showEsign, getControlMap} from '../../components/CommonScript';\r\nimport {transactionStatus} from '../../components/Enumeration';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass Method extends React.Component\r\n{\r\n    constructor(props){\r\n        super(props);        \r\n        this.formRef = React.createRef();\r\n     \r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {        \r\n            data:[], masterStatus:\"\", error:\"\", selectedRecord:{},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights:[],\r\n            controlMap :new Map()\r\n        };\r\n\r\n        this.extractedColumnList =[{\"idsName\":\"IDS_METHODCATEGORY\",\"dataField\":\"smethodcatname\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_METHODNAME\",\"dataField\":\"smethodname\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\",\"width\":\"200px\"},\r\n                                    {\"idsName\":\"IDS_DISPLAYSTATUS\",\"dataField\":\"sdisplaystatus\",\"width\":\"200px\"}\r\n                                    ];\r\n\r\n\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign){          \r\n            if (this.props.Login.operation === \"delete\"){\r\n                loadEsign = false;\r\n                openModal =  false;\r\n                selectedRecord = {};\r\n            }\r\n            else{\r\n                loadEsign = false;                \r\n            }\r\n        }\r\n        else{\r\n            openModal =  false;\r\n            selectedRecord ={};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {openModal, loadEsign, selectedRecord, selectedId:null}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        \r\n    }\r\n    \r\n    static getDerivedStateFromProps(props, state){\r\n    \r\n        if (props.Login.masterStatus !== \"\"  && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";           \r\n        } \r\n         \r\n        if (props.Login.error !== state.error){\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }   \r\n        return null;\r\n     }    \r\n\r\n\r\n    render(){\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n                        && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n         \r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n                        && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n            \r\n         const addParam = {screenName:\"Method\", primaryeyField: \"nmethodcode\", primaryKeyValue:undefined,  \r\n                            operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\r\n\r\n        const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\", \r\n                           primaryKeyField:\"nmethodcode\", inputParam:this.props.Login.inputParam,  userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n\r\n        const deleteParam ={operation:\"delete\"};\r\n\r\n    return (\r\n        <>\r\n        <Row>\r\n            <Col>\r\n                <ListWrapper className=\"client-list-content\">\r\n                    {/* <PrimaryHeader className=\"d-flex justify-content-between mb-3\">\r\n                        <HeaderName className=\"header-primary-md\">\r\n                           {this.props.Login.inputParam ? \r\n                            <FormattedMessage id={this.props.Login.inputParam.methodUrl} /> :\"\"}\r\n                        </HeaderName>\r\n                        <Button name=\"addMethod\" className=\"btn btn-user btn-primary-blue\"  \r\n                                hidden ={this.props.Login.inputParam && this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                onClick={()=>this.props.getMethodComboService(addParam) } \r\n                                role=\"button\">\r\n                            <FontAwesomeIcon icon={faPlus} /> { }                          \r\n                            <FormattedMessage id=\"IDS_ADD\" defaultMessage='Add'/> \r\n                        </Button>\r\n                    </PrimaryHeader> */}\r\n                   \r\n                    {this.state.data ? \r\n                        <DataGrid\r\n                            primaryKeyField = {\"nmethodcode\"}\r\n                            data = {this.state.data}\r\n                            dataResult = {this.state.dataResult}\r\n                            dataState = {this.state.dataState}\r\n                            dataStateChange = {this.dataStateChange}\r\n                            extractedColumnList = {this.extractedColumnList}\r\n                            fetchRecord = {this.props.getMethodComboService}\r\n                            editParam={editParam}\r\n                            deleteRecord = {this.deleteRecord}\r\n                            deleteParam={deleteParam}\r\n                            reloadData = {this.reloadData}\r\n                            controlMap = {this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo = {this.props.Login.userInfo}\r\n                            pageable={true}\r\n                            scrollable={'scrollable'}\r\n                            gridHeight = {'600px'}\r\n                            isActionRequired={true}\r\n                            isToolBarRequired={true} \r\n                            selectedId={this.props.Login.selectedId} \r\n                            addRecord={()=>this.props.getMethodComboService(addParam)}                      \r\n                        />\r\n                    :\"\"}    \r\n                </ListWrapper>\r\n            </Col>\r\n        </Row>\r\n        {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n        {this.props.Login.openModal ? \r\n            <SlideOutModal  show={this.props.Login.openModal} \r\n                                closeModal={this.closeModal}  \r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}  \r\n                                screenName={this.props.Login.screenName}   \r\n                                onSaveClick={this.onSaveClick}    \r\n                                esign={this.props.Login.loadEsign}\r\n                                validateEsign={this.validateEsign}\r\n                                masterStatus={this.props.Login.masterStatus}\r\n                                updateStore={this.props.updateStore}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                mandatoryFields={[{\"idsName\":\"IDS_METHODCATEGORY\",\"dataField\":\"nmethodcatcode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                                                  {\"idsName\":\"IDS_METHODNAME\",\"dataField\":\"smethodname\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}]}\r\n                                addComponent ={this.props.Login.loadEsign ? \r\n                                        <Esign  operation={this.props.Login.operation}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                inputParam={this.props.Login.inputParam}                                               \r\n                                                selectedRecord={this.state.selectedRecord ||{}}\r\n                                                />\r\n                                      : <AddMethod  \r\n                                            selectedRecord={this.state.selectedRecord ||{}}                                  \r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onComboChange={this.onComboChange} \r\n                                            methodCategoryList={this.props.Login.methodCategoryList ||[]}\r\n                                            operation={this.props.Login.operation}\r\n                                            inputParam={this.props.Login.inputParam}  \r\n                                            />}  \r\n                />\r\n            :\"\"}\r\n        </>\r\n      );\r\n    }\r\n\r\n    componentDidUpdate(previousProps){\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData){            \r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode){\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights){\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item=>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({userRoleControlRights, controlMap, data:this.props.Login.masterData, \r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),});\r\n            }\r\n            else {        \r\n                let {dataState} = this.state;\r\n                if(this.props.Login.dataState === undefined){\r\n                    dataState = {skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }         \r\n                this.setState({data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData,dataState), dataState\r\n                });\r\n            } \r\n         }\r\n         else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord ){    \r\n            this.setState({selectedRecord:this.props.Login.selectedRecord});\r\n         }       \r\n    }    \r\n\r\n    onInputOnChange=(event) => {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        \r\n        this.setState({selectedRecord});\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {      \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;   \r\n     \r\n        this.setState({selectedRecord});        \r\n    }\r\n\r\n    deleteRecord =(deleteParam) =>{\r\n        const inputParam = {\r\n                                classUrl: this.props.Login.inputParam.classUrl,\r\n                                methodUrl: this.props.Login.inputParam.methodUrl,                        \r\n                                displayName:this.props.Login.inputParam.displayName,\r\n                                inputData: {[this.props.Login.inputParam.methodUrl.toLowerCase()] :deleteParam.selectedRecord,\r\n                                            \"userinfo\": this.props.Login.userInfo},\r\n                                operation:deleteParam.operation,\r\n                                dataState:this.state.dataState    \r\n                            }       \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                    openModal:true, screenName:this.props.intl.formatMessage({ id:this.props.Login.inputParam.displayName}),\r\n                    operation:deleteParam.operation\r\n                    }\r\n                }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () =>{\r\n        const inputParam = {\r\n                        inputData : {\"userinfo\":this.props.Login.userInfo},                        \r\n                        classUrl: this.props.Login.inputParam.classUrl,\r\n                        methodUrl: this.props.Login.inputParam.methodUrl,\r\n                        displayName:this.props.Login.inputParam.displayName,\r\n                        userInfo: this.props.Login.userInfo\r\n                    };     \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n       \r\n            //add / edit            \r\n            let inputData = [];\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            let selectedId = null;\r\n            if ( this.props.Login.operation === \"update\"){\r\n                // edit\r\n                dataState = this.state.dataState;\r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n                selectedId = this.props.Login.selectedRecord.nmethodcode;              \r\n            }\r\n            else{\r\n                //add               \r\n                inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\"nsitecode\":this.props.Login.userInfo.nmastersitecode};      \r\n               \r\n            }   \r\n\r\n            inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"]? this.state.selectedRecord[\"ndefaultstatus\"]:transactionStatus.NO;\r\n            inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"]? this.state.selectedRecord[\"nmethodcatcode\"].value:\"\";\r\n            inputData[\"method\"][\"smethodname\"] = this.state.selectedRecord[\"smethodname\"]? this.state.selectedRecord[\"smethodname\"]:\"\";\r\n            inputData[\"method\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"]? this.state.selectedRecord[\"sdescription\"]:\"\";\r\n                   \r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: this.props.Login.inputParam.methodUrl,\r\n                displayName:this.props.Login.inputParam.displayName,  \r\n                inputData: inputData, selectedId, dataState,\r\n                operation: this.props.Login.operation, saveType, formRef          \r\n            }\r\n           \r\n            const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n            if (esignNeeded){\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                        openModal:true, screenName:this.props.intl.formatMessage({ id:this.props.Login.inputParam.displayName}),\r\n                        operation:this.props.Login.operation\r\n                        }\r\n                    }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else{\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n           \r\n    } \r\n    validateEsign = () =>{\r\n        const inputParam = {\r\n                                inputData: {\"userinfo\": {...this.props.Login.userInfo, \r\n                                                        sreason: this.state.selectedRecord[\"esigncomments\"] },\r\n                                             password : this.state.selectedRecord[\"esignpassword\"]\r\n                                            },\r\n                                screenData : this.props.Login.screenData\r\n                            }        \r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }    \r\n   \r\n }\r\n export default connect(mapStateToProps, {callService, crudMaster, getMethodComboService, updateStore, validateEsignCredential})(injectIntl(Method));"]},"metadata":{},"sourceType":"module"}