{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5294\\\\QuaLISWeb\\\\src\\\\pages\\\\Scheduler\\\\GraphicalScheduler.jsx\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom'; //import { displayDate, sampleData } from './events-utc';\n\nimport { Scheduler, TimelineView, DayView, WeekView, MonthView } from '@progress/kendo-react-scheduler';\nimport { guid } from '@progress/kendo-react-common';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getGrapicalSchedulerDetail, filterColumnData } from '../../actions';\nimport './scheduler.css';\nimport '@progress/kendo-date-math/tz/Asia/Kolkata';\nimport '@progress/kendo-date-math/tz/Europe/Amsterdam';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass GraphicalScheduler extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDataChange = ({\n      created,\n      updated,\n      deleted\n    }) => {\n      let scheduleData = {};\n      let postParam = undefined; //this.state.data= this.props.Login.masterData.ScheduleData!==undefined?this.props.Login.masterData.ScheduleData:\"\";\n      //   const aa= (old => (old) .concat(created.map(item => Object.assign({}, item, {\n      //     id: guid()\n      //   })))\n      // )\n\n      const aa = created.concat(created.map(item => Object.assign({}, item, {\n        id: guid()\n      })));\n      let aa1 = aa[0]; //let data1=this.state.data;\n      // if(updated.length>0)\n      // {\n      // const bb=updated.map(item => updated.find(current => current.id === item.id) || item);\n      // let id=bb[0].TaskID;\n      // }\n\n      const cc = deleted.filter(item => deleted.find(current => current.id === item.id) || item.id);\n\n      if (aa.length > 1) {\n        //scheduleData[\"grapicalschedulermaster\"][\"jsondata\"]=\"\";\n        //scheduleData[\"grapicalschedulermaster\"][\"jsondata\"]=aa[1];\n        scheduleData[\"graphicalschedulermaster\"] = {\n          \"jsondata\": aa[1]\n        };\n        let formRef = {\n          \"current\": \"form\"\n        };\n        let stitle = aa[1].title;\n        let srule = aa[1].recurrenceRule;\n        let stype = \"\";\n\n        if (srule !== undefined && srule !== null) {\n          stype = srule.substring(5, srule.indexOf(';'));\n        } else {\n          stype = \"NEVER\";\n        }\n\n        let saveType = 1;\n        const inputParam = {\n          classUrl: \"graphicalscheduler\",\n          //this.props.Login.inputParam.classUrl,\n          methodUrl: \"GraphicalScheduler\",\n          inputData: {\n            scheduleData,\n            stitle: stitle,\n            sscheduletype: stype,\n            userinfo: this.props.Login.userInfo\n          },\n          //formData: formData,\n          //isFileupload: true,\n          operation: \"create\",\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n        const masterData = this.props.Login.masterData;\n        this.props.crudMaster(inputParam, masterData, \"openModal\"); //this.props.crudMaster(inputParam, masterData);\n      }\n\n      if (updated.length > 0) {\n        const bb = updated.map(item => updated.find(current => current.id === item.id) || item);\n        scheduleData[\"graphicalschedulermaster\"] = {\n          \"jsondata\": bb[0]\n        };\n        let formRef = {\n          \"current\": \"form\"\n        };\n        let id = bb[0].taskID;\n        let stitle = bb[0].title;\n        let srule = bb[0].recurrenceRule;\n        let stype = \"\";\n\n        if (srule !== undefined && srule !== null) {\n          stype = srule.substring(5, srule.indexOf(';'));\n        } else {\n          stype = \"NEVER\";\n        }\n\n        let saveType = 2;\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"GraphicalScheduler\",\n          inputData: {\n            scheduleData,\n            stitle: stitle,\n            sscheduletype: stype,\n            ntaskid: id,\n            userinfo: this.props.Login.userInfo\n          },\n          //formData: formData,\n          //isFileupload: true,\n          operation: \"update\",\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n        const masterData = this.props.Login.masterData;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        }; //this.props.updateStore(updateInfo);\n\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n\n      if (deleted.length > 0) {\n        const cc = deleted.filter(item => deleted.find(current => current.id === item.id) || item.id); //   scheduleData[\"grapicalschedulermaster\"] = {\n        //     \"jsondata\": bb[0] \n        // }\n\n        let formRef = {\n          \"current\": \"form\"\n        };\n        let id = cc[0].taskID; //let stitle=bb[0].title;\n        //let srule=bb[0].recurrenceRule;\n        //let stype=\"\";\n        // if(srule!==undefined && srule!==null)\n        // {\n        // stype=srule.substring(5,srule.indexOf(';'));\n        // }\n        // else\n        // {\n        //   stype=\"NEVER\";\n        // }\n\n        let saveType = 2;\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"GraphicalScheduler\",\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            ntaskid: id\n          },\n          //formData: formData,\n          //isFileupload: true,\n          operation: \"delete\",\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n        const masterData = this.props.Login.masterData;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        }; //this.props.updateStore(updateInfo);\n\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n\n      this.setState(old => ({\n        data: old.data // Filter the deleted items\n        .filter(item => deleted.find(current => current.id === item.id) === undefined) // Find and replace the updated items\n        .map(item => updated.find(current => current.id === item.id) || item) // Add the newly created items and assign an `id`.\n        .concat(created.map(item => Object.assign({}, item, {\n          id: guid()\n        })))\n      })); //   this.props.Login.masterData.ScheduleData=this.state.data ;\n      //   let datao=this.state.data;\n    };\n\n    this.state = {\n      data: this.props.Login.masterData.ScheduleData !== undefined ? this.props.Login.masterData.ScheduleData : \"\"\n    }; //     const currentYear = new Date().getFullYear();\n    //   const parseAdjust = eventDate => {\n    //     const date = new Date(eventDate);\n    //     date.setFullYear(currentYear);\n    //     return date;\n    //   };\n\n    var displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));\n  }\n\n  componentDidUpdate(previousProps) {\n    let data = [];\n\n    if (this.props.Login.masterData.ScheduleData !== undefined) {\n      if (this.props.Login.masterData.ScheduleData !== previousProps.Login.masterData.ScheduleData) {\n        for (let i = 0; i < this.props.Login.masterData.ScheduleData.length; i++) {\n          data.push(this.props.Login.masterData.ScheduleData[i].jsondata);\n        }\n\n        data = data.map(dataItem => ({\n          id: dataItem.id,\n          start: parseAdjust(dataItem.start),\n          startTimezone: dataItem.startTimezone,\n          end: parseAdjust(dataItem.end),\n          endTimezone: dataItem.endTimezone,\n          isAllDay: dataItem.isAllDay,\n          title: dataItem.title,\n          description: dataItem.description,\n          recurrenceRule: dataItem.recurrenceRule,\n          recurrenceId: dataItem.recurrenceID,\n          recurrenceExceptions: dataItem.recurrenceException,\n          roomId: dataItem.roomID,\n          ownerID: dataItem.TaskId,\n          personId: dataItem.TaskId,\n          taskID: dataItem.TaskId\n        }));\n        this.setState({\n          data\n        });\n      }\n    }\n  }\n\n  render() {\n    var displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate())); //return <Scheduler data={this.state.data} onDataChange={this.handleDataChange} editable={{\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Scheduler, {\n      data: this.state.data,\n      onDataChange: this.handleDataChange,\n      editable: {\n        add: true,\n        remove: true,\n        drag: true,\n        resize: true,\n        select: true,\n        edit: true\n      },\n      defaultDate: displayDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(DayView, {\n      numberOfDays: 3,\n      style: {\n        zorder: 25000\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(WeekView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(MonthView, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    })), \";\");\n  }\n\n} //export default (GrapicalScheduler)\n\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  getGrapicalSchedulerDetail,\n  filterColumnData\n})(injectIntl(GraphicalScheduler));\nexport const currentYear = new Date().getFullYear();\nexport const parseAdjust = eventDate => {\n  const date = new Date(eventDate);\n  date.setFullYear(currentYear);\n  return date;\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/pages/Scheduler/GraphicalScheduler.jsx"],"names":["React","ReactDOM","Scheduler","TimelineView","DayView","WeekView","MonthView","guid","connect","toast","injectIntl","FormattedMessage","DEFAULT_RETURN","callService","crudMaster","validateEsignCredential","updateStore","getGrapicalSchedulerDetail","filterColumnData","mapStateToProps","state","Login","GraphicalScheduler","Component","constructor","props","handleDataChange","created","updated","deleted","scheduleData","postParam","undefined","aa","concat","map","item","Object","assign","id","aa1","cc","filter","find","current","length","formRef","stitle","title","srule","recurrenceRule","stype","substring","indexOf","saveType","inputParam","classUrl","methodUrl","inputData","sscheduletype","userinfo","userInfo","operation","searchRef","isClearSearch","masterData","bb","taskID","ntaskid","updateInfo","typeName","data","loadEsign","screenData","setState","old","ScheduleData","displayDate","Date","UTC","currentYear","getMonth","getDate","componentDidUpdate","previousProps","i","push","jsondata","dataItem","start","parseAdjust","startTimezone","end","endTimezone","isAllDay","description","recurrenceId","recurrenceID","recurrenceExceptions","recurrenceException","roomId","roomID","ownerID","TaskId","personId","render","add","remove","drag","resize","select","edit","zorder","getFullYear","eventDate","date","setFullYear"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n//import { displayDate, sampleData } from './events-utc';\r\nimport { Scheduler, TimelineView, DayView,WeekView, MonthView } from '@progress/kendo-react-scheduler';\r\nimport { guid } from '@progress/kendo-react-common';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n  callService, crudMaster, validateEsignCredential, updateStore, getGrapicalSchedulerDetail,filterColumnData\r\n} from '../../actions';\r\nimport './scheduler.css';\r\nimport '@progress/kendo-date-math/tz/Asia/Kolkata';\r\nimport '@progress/kendo-date-math/tz/Europe/Amsterdam';\r\nconst mapStateToProps = state => {\r\n  return ({ Login: state.Login })\r\n}\r\n\r\nclass GraphicalScheduler extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: this.props.Login.masterData.ScheduleData!==undefined?this.props.Login.masterData.ScheduleData:\"\"\r\n    };\r\n    \r\n//     const currentYear = new Date().getFullYear();\r\n  \r\n\r\n//   const parseAdjust = eventDate => {\r\n//     const date = new Date(eventDate);\r\n//     date.setFullYear(currentYear);\r\n//     return date;\r\n//   };\r\n    var displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));\r\n\r\n  }\r\n\r\n  \r\n\r\n  componentDidUpdate(previousProps) {\r\n    let data=[];\r\n   \r\n    if(this.props.Login.masterData.ScheduleData!==undefined)\r\n    {\r\n      if (this.props.Login.masterData.ScheduleData !== previousProps.Login.masterData.ScheduleData) {\r\n    for(let i =0;i<this.props.Login.masterData.ScheduleData.length;i++)\r\n    {\r\n      data.push(this.props.Login.masterData.ScheduleData[i].jsondata);\r\n    }\r\n    \r\n  \r\n\r\n   data = data.map(dataItem => ({\r\n    id: dataItem.id,\r\n    start: parseAdjust(dataItem.start),\r\n    startTimezone: dataItem.startTimezone,\r\n    end: parseAdjust(dataItem.end),\r\n    endTimezone: dataItem.endTimezone,\r\n    isAllDay: dataItem.isAllDay,\r\n    title: dataItem.title,\r\n    description: dataItem.description,\r\n    recurrenceRule: dataItem.recurrenceRule,\r\n    recurrenceId: dataItem.recurrenceID,\r\n    recurrenceExceptions: dataItem.recurrenceException,\r\n    roomId: dataItem.roomID,\r\n    ownerID: dataItem.TaskId,\r\n    personId: dataItem.TaskId,\r\n    taskID:dataItem.TaskId\r\n  }))\r\n  this.setState({data});\r\n    }\r\n  }\r\n    \r\n  }\r\n  \r\n  handleDataChange = ({\r\n    created,\r\n    updated,\r\n    deleted\r\n  }) => {\r\n    let scheduleData = {};\r\n    let postParam = undefined;\r\n   //this.state.data= this.props.Login.masterData.ScheduleData!==undefined?this.props.Login.masterData.ScheduleData:\"\";\r\n  //   const aa= (old => (old) .concat(created.map(item => Object.assign({}, item, {\r\n  //     id: guid()\r\n  //   })))\r\n  // )\r\n   const aa= created.concat(created.map(item => Object.assign({}, item, {\r\n     id: guid()\r\n   })));\r\n   let aa1=aa[0];\r\n//let data1=this.state.data;\r\n// if(updated.length>0)\r\n// {\r\n// const bb=updated.map(item => updated.find(current => current.id === item.id) || item);\r\n// let id=bb[0].TaskID;\r\n// }\r\n  const cc=deleted.filter(item => deleted.find(current => current.id === item.id) ||item.id);\r\nif(aa.length>1)\r\n{\r\n  //scheduleData[\"grapicalschedulermaster\"][\"jsondata\"]=\"\";\r\n  //scheduleData[\"grapicalschedulermaster\"][\"jsondata\"]=aa[1];\r\n  scheduleData[\"graphicalschedulermaster\"] = {\r\n    \"jsondata\": aa[1] \r\n}\r\nlet formRef = {\r\n  \"current\": \"form\" \r\n}\r\nlet stitle=aa[1].title;\r\nlet srule=aa[1].recurrenceRule;\r\nlet stype=\"\";\r\nif(srule!==undefined && srule!==null)\r\n{\r\nstype=srule.substring(5,srule.indexOf(';'));\r\n}\r\nelse\r\n{\r\n  stype=\"NEVER\";\r\n}\r\nlet saveType=1;\r\n  const inputParam = {\r\n    classUrl: \"graphicalscheduler\",//this.props.Login.inputParam.classUrl,\r\n    methodUrl: \"GraphicalScheduler\",\r\n    inputData: {scheduleData,stitle:stitle,sscheduletype:stype, userinfo: this.props.Login.userInfo },\r\n    //formData: formData,\r\n    //isFileupload: true,\r\n    operation: \"create\",\r\n    saveType,formRef,postParam, searchRef: this.searchRef,\r\n    isClearSearch: this.props.Login.isClearSearch\r\n}\r\nconst masterData = this.props.Login.masterData;\r\nthis.props.crudMaster(inputParam, masterData, \"openModal\");\r\n//this.props.crudMaster(inputParam, masterData);\r\n\r\n}\r\nif(updated.length>0)\r\n{\r\n  const bb=updated.map(item => updated.find(current => current.id === item.id) || item);\r\n  scheduleData[\"graphicalschedulermaster\"] = {\r\n    \"jsondata\": bb[0] \r\n}\r\nlet formRef = {\r\n  \"current\": \"form\" \r\n}\r\nlet id=bb[0].taskID;\r\nlet stitle=bb[0].title;\r\nlet srule=bb[0].recurrenceRule;\r\nlet stype=\"\";\r\nif(srule!==undefined && srule!==null)\r\n{\r\nstype=srule.substring(5,srule.indexOf(';'));\r\n}\r\nelse\r\n{\r\n  stype=\"NEVER\";\r\n}\r\n  let saveType=2;\r\n  const inputParam = {\r\n    classUrl: this.props.Login.inputParam.classUrl,\r\n    methodUrl: \"GraphicalScheduler\",\r\n    inputData: {scheduleData,stitle:stitle,sscheduletype:stype,ntaskid:id, userinfo: this.props.Login.userInfo },\r\n    //formData: formData,\r\n    //isFileupload: true,\r\n    operation: \"update\",\r\n    saveType,formRef,postParam, searchRef: this.searchRef,\r\n    isClearSearch: this.props.Login.isClearSearch\r\n}\r\nconst masterData = this.props.Login.masterData;\r\n  const updateInfo = {\r\n    typeName: DEFAULT_RETURN,\r\n    data: {\r\n        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n    }\r\n}\r\n//this.props.updateStore(updateInfo);\r\nthis.props.crudMaster(inputParam, masterData, \"openModal\");\r\n}\r\n\r\nif(deleted.length>0)\r\n{\r\n  const cc=deleted.filter(item => deleted.find(current => current.id === item.id) ||item.id);\r\n//   scheduleData[\"grapicalschedulermaster\"] = {\r\n//     \"jsondata\": bb[0] \r\n// }\r\nlet formRef = {\r\n  \"current\": \"form\" \r\n}\r\nlet id=cc[0].taskID;\r\n//let stitle=bb[0].title;\r\n//let srule=bb[0].recurrenceRule;\r\n//let stype=\"\";\r\n// if(srule!==undefined && srule!==null)\r\n// {\r\n// stype=srule.substring(5,srule.indexOf(';'));\r\n// }\r\n// else\r\n// {\r\n//   stype=\"NEVER\";\r\n// }\r\n  let saveType=2;\r\n  const inputParam = {\r\n    classUrl: this.props.Login.inputParam.classUrl,\r\n    methodUrl: \"GraphicalScheduler\",\r\n    inputData: {userinfo: this.props.Login.userInfo,ntaskid:id },\r\n    //formData: formData,\r\n    //isFileupload: true,\r\n    operation: \"delete\",\r\n    saveType,formRef,postParam, searchRef: this.searchRef,\r\n    isClearSearch: this.props.Login.isClearSearch\r\n}\r\nconst masterData = this.props.Login.masterData;\r\n  const updateInfo = {\r\n    typeName: DEFAULT_RETURN,\r\n    data: {\r\n        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n    }\r\n}\r\n//this.props.updateStore(updateInfo);\r\nthis.props.crudMaster(inputParam, masterData, \"openModal\");\r\n}\r\n    this.setState(old => ({\r\n      data: old.data     // Filter the deleted items\r\n      .filter(item => deleted.find(current => current.id === item.id) === undefined) // Find and replace the updated items\r\n      .map(item => updated.find(current => current.id === item.id) || item) // Add the newly created items and assign an `id`.\r\n      .concat(created.map(item => Object.assign({}, item, {\r\n        id: guid()\r\n      })))\r\n    }));\r\n   \r\n      \r\n    //   this.props.Login.masterData.ScheduleData=this.state.data ;\r\n    //   let datao=this.state.data;\r\n  };\r\n\r\n  render() {\r\n    var displayDate = new Date(Date.UTC(currentYear, new Date().getMonth(), new Date().getDate()));\r\n    //return <Scheduler data={this.state.data} onDataChange={this.handleDataChange} editable={{\r\n      return (\r\n      \r\n      <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\">\r\n      \r\n      <Scheduler  data={this.state.data} onDataChange={this.handleDataChange} editable={{\r\n      add: true,\r\n      remove: true,\r\n      drag: true,\r\n      resize: true,\r\n      select: true,\r\n      edit: true\r\n    }} defaultDate={displayDate}>\r\n          {/* <TimelineView /> */}\r\n          <DayView numberOfDays={3} style={{zorder:25000}}/>\r\n          <WeekView />\r\n          <MonthView />\r\n        </Scheduler>;\r\n        </div>\r\n        \r\n      )\r\n  }\r\n\r\n}\r\n//export default (GrapicalScheduler)\r\nexport default connect(mapStateToProps, {\r\n  callService, crudMaster, validateEsignCredential,\r\n  updateStore, getGrapicalSchedulerDetail, filterColumnData\r\n})(injectIntl(GraphicalScheduler));\r\nexport const currentYear = new Date().getFullYear();\r\nexport const parseAdjust = eventDate => {\r\n  const date = new Date(eventDate);\r\n  date.setFullYear(currentYear);\r\n  return date;\r\n};"]},"metadata":{},"sourceType":"module"}