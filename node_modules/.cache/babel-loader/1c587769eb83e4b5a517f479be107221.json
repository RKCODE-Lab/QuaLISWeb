{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{constructOptionList,replaceUpdatedObject,sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat}from'../components/CommonScript';import{postCRUDOrganiseTransSearch}from'./ServiceAction';import Axios from'axios';import{transactionStatus}from'../components/Enumeration';export function getRegTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationTypeBySampleType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultSampleTypeValue:inputData.defaultSampleTypeValue,realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputData.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRegSubTypeJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultRegTypeValue:inputData.defaultRegTypeValue,realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputData.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAppConfigVersionJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultRegSubTypeValue:inputParam.masterData.defaultRegSubTypeValue,RegSubTypeValue:inputParam.masterData.realRegSubTypeValue,realDesignTemplateMappingValue:inputParam.inputData.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputParam.inputData.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSectionJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultUserSectionValue:inputData.masterData.defaultUserSectionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getTestComboBySection\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultFilterStatusValue:inputData.masterData.defaultFilterStatusValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getFilterStatusSectionJobAllocation(inputData){return function(dispatch){var testStatusService=rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData);var sectionService=rsapi.post(\"joballocation/getSectionByApproveVersion\",inputData);var urlArray=[];urlArray=[testStatusService,sectionService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{defaultApprovalVersionValue:inputData.masterData.defaultApprovalVersionValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getDesignTemplateJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\",inputParam).then(function(response){if(response.data[\"Success\"]){toast.warn(response.data.Success);}var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),responseData),{},{defaultApprovalVersionValue:inputParam.masterData.defaultApprovalVersionValue,ApprovalVersionValue:inputParam.masterData.realApprovalVersionValue,realDesignTemplateMappingValue:inputParam.realDesignTemplateMappingValue,realDynamicDesignMappingList:inputParam.realDynamicDesignMappingList}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestStatusJobAllocation(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getFilterStatusByApproveVersion\",inputData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RegSubTypeValue:inputData.RegSubTypeValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getJobAllcationFilterSubmit(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationDetails\",inputParam.inputData).then(function(response){var responseData=_objectSpread({},response.data);var masterData=_objectSpread(_objectSpread({},inputParam.masterData),responseData);if(inputParam.searchSampleRef!==undefined&&inputParam.searchSampleRef.current!==null){inputParam.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParam.searchSubSampleRef!==undefined&&inputParam.searchSubSampleRef.current!==null){inputParam.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParam.searchTestRef!==undefined&&inputParam.searchTestRef.current!==null){inputParam.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,showTest:inputParam.inputData.showTest,activeTestTab:inputParam.inputData.activeTestTab,showFilter:false,sampleskip:0,sampletake:inputParam.sampletake,subsampleskip:0,subsampletake:inputParam.subsampletake,testskip:0,testtake:inputParam.testtake,documentDataState:_objectSpread(_objectSpread({},inputParam.documentDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParam.testCommentDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ReceiveinLabStatusWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_SAMPLE\"],inputParam.inputData.masterData.JA_SAMPLE,\"nregistrationsectioncode\");replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"],inputParam.inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_SAMPLE\"];delete response.data[\"JA_SUBSAMPLE\"];delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedSample:replaceUpdatedObject(response.data[\"JASelectedSample\"],inputParam.inputData.masterData.JASelectedSample,\"nregistrationsectioncode\"),JASelectedSubSample:replaceUpdatedObject(response.data[\"JASelectedSubSample\"],inputParam.inputData.masterData.JASelectedSubSample,\"ntransactionsamplecode\"),JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){//toast.error(error.message); \ndispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAllottedTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData).then(function(response){var TechniqueMap=constructOptionList(response.data.Technique||[],\"ntechniquecode\",\"stechniquename\",undefined,undefined,false);var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var InstrumentCategoryMap=constructOptionList(response.data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,false);var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);var InstrumentPeriodMap=constructOptionList(response.data.Period||[],\"ninstrumentperiodcode\",\"speriodname\",undefined,undefined,false);var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var Technique=TechniqueMap.get(\"OptionList\");var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var InstrumentCategory=InstrumentCategoryMap.get(\"OptionList\");var Instrument=InstrumentMap.get(\"OptionList\");var InstrumentPeriod=InstrumentPeriodMap.get(\"OptionList\");var selectedRecord={};selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();//selectedRecord [\"dinstblockfromdatetime\"] = new Date();\ndispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,InstrumentCategory:InstrumentCategory,Instrument:Instrument,InstrumentPeriod:InstrumentPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAllotAnotherUserTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData).then(function(response){var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var Technique=response.data.Technique&&response.data.Technique[0].stechniquename;var TechniqueCode=response.data.Technique&&response.data.Technique[0].ntechniquecode;var selectedRecord={};selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();dispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,TechniqueCode:TechniqueCode,Users:Users,UsersPeriod:UsersPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRescheduleTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData).then(function(response){var TechniqueMap=constructOptionList(response.data.Technique||[],\"ntechniquecode\",\"stechniquename\",undefined,undefined,false);var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);var UsersPeriodMap=constructOptionList(response.data.Period||[],\"nuserperiodcode\",\"speriodname\",undefined,undefined,false);var InstrumentCategoryMap=constructOptionList(response.data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,false);var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);var InstrumentPeriodMap=constructOptionList(response.data.Period||[],\"ninstrumentperiodcode\",\"speriodname\",undefined,undefined,false);var currentTime=rearrangeDateFormat(inputParam.inputData.userinfo,response.data.CurrentTime.body);var selectedRecord={};selectedRecord[\"scomments\"]=\"\";selectedRecord[\"suserholdduration\"]=\"\";selectedRecord[\"sinstrumentholdduration\"]=\"\";selectedRecord[\"duserblockfromdatetime\"]=new Date();var Technique=TechniqueMap.get(\"OptionList\");var Users=UsersMap.get(\"OptionList\");var UsersPeriod=UsersPeriodMap.get(\"OptionList\");var InstrumentCategory=InstrumentCategoryMap.get(\"OptionList\");var Instrument=InstrumentMap.get(\"OptionList\");var InstrumentPeriod=InstrumentPeriodMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Technique:Technique,Users:Users,UsersPeriod:UsersPeriod,InstrumentCategory:InstrumentCategory,Instrument:Instrument,InstrumentPeriod:InstrumentPeriod,currentTime:currentTime,selectedRecord:selectedRecord,isOpen:true,operation:inputParam.inputData.operation,screenName:inputParam.inputData.screenName,openModal:true,ncontrolCode:inputParam.inputData.ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentBasedCategory\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo}).then(function(response){var Instrument=[];var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);Instrument=InstrumentMap.get(\"OptionList\");if(ninstrumentcatcode!==transactionStatus.NA){selectedRecord[\"dinstblockfromdatetime\"]=new Date();}else{selectedRecord[\"dinstblockfromdatetime\"]=\"\";}dispatch({type:DEFAULT_RETURN,payload:{Instrument:Instrument,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getUsers(ntechniquecode,JASelectedTest,userInfo,selectedRecord,masterData){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getUsersBasedTechnique\",{\"ntechniquecode\":ntechniquecode,\"ssectioncode\":JASelectedTest.JASelectedSample?JASelectedTest.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(\",\"):\"\",\"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\"userinfo\":userInfo}).then(function(response){var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");selectedRecord[\"nusercode\"]=\"\";dispatch({type:DEFAULT_RETURN,payload:{// masterData:{...masterData},\nUsers:Users,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function ViewAnalystCalendar(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/viewAnalystCalendar\",inputParam.inputData).then(function(response){var masterData=_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data);var Users=[];var UsersMap=constructOptionList(response.data.Users||[],\"nusercode\",\"susername\",undefined,undefined,false);Users=UsersMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Users:Users,screenName:inputParam.inputData.screenName,loading:false,openModal:true,masterData:masterData}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function CancelTestWise(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/cancelTest\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function AllotJobAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotJobCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:replaceUpdatedObject(response.data[\"TestView\"],inputParam.inputData.masterData.TestView,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({},inputParam.inputData),{},{masterData:masterData,loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function AllotAnotherUserAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotAnotherUserCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function RescheduleJobAction(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/RescheduleCreate\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData,response.data,[\"TestView\"],3,\"ntransactiontestcode\",[]);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:inputParam.inputData.masterData.TestView});var respObject=_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData),{},{loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}export function getJobAllocationSubSampleDetail(inputData,isServiceRequired){return function(dispatch){//console.log(\"response :\");\nvar arr=[];// const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n// (item,index) => \n// item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n// );\ninputData.JASelectedSample&&inputData.JASelectedSample.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var inputParamData={nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(\",\"),nregistrationsectioncode:inputData.nregistrationsectioncode,// ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\nnsectioncode:arr.map(function(item){return item;}).join(\",\"),ntransactionstatus:String(inputData.ntransactionstatus),ntransactiontestcode:\"0\",userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestTab:inputData.activeTestTab,activeSampleTab:inputData.activeSampleTab,activeSubSampleTab:inputData.activeSubSampleTab,nneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,nneedtemplatebasedflow:inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,checkBoxOperation:inputData.checkBoxOperation};var activeName=\"\";var dataStateName=\"\";dispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','ntransactionsamplecode');// sortData(response.data);\nvar oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"nregistrationsectioncode\",inputData.removeElementFromArray);// inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \n// inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\n// inputData.masterData.JA_TEST = response.data.JA_TEST;  \n// inputData.masterData.JASelectedTest=response.data.JASelectedTest;\n// inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\n// inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\n// inputData.masterData.RegistrationComment =response.data.RegistrationComment;\n// inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample});if(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake,subsampleskip=_inputData.subsampleskip,subsampletake=_inputData.subsampletake,sampleskip=_inputData.sampleskip,sampletake=_inputData.sampletake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\nvar skipInfo={};// if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\ntestskip=0;//     bool = true\n// }\nsubsampleskip=0;// bool = true\n// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake,subsampleskip:subsampleskip,subsampletake:subsampletake,sampleskip:sampleskip,sampletake:sampletake};// }\nvar RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){var wholeSubSampleList=masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubSampleList.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.forEach((subsample, index) => {\n//     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n// })\nif(oldSelectedSubSample.length>0){masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedSubSample:oldSelectedSubSample});}var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var ntransactiontestcode;var npreregno;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;npreregno=masterData.JASelectedSample[0].npreregno;}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationComment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"npreregno\");activeName=\"RegistrationTestAttachment\";dataStateName=\" testAttachmentDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_SAMPLECOMMENTS\":dbData=response.data.RegistrationComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationComment),_toConsumableArray(dbData));RegistrationComment=getRecordBasedOnPrimaryKeyName(list,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":RegistrationComment=response.data.RegistrationComment?_toConsumableArray(response.data.RegistrationComment):[];activeName=\"RegistrationComment\";dataStateName=\"sampleCommentsDataState\";break;default:_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}else{var _list2=[];if(!inputData.masterData.realRegSubTypeValue.nneedsubsample){var _wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return _wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar _keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){_keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list2=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SAMPLECOMMENTS\":_list2=response.data.RegistrationComment?sortData(response.data.RegistrationComment,'descending','nregcommentcode'):[];RegistrationComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.JASelectedSample.length>0?inputData.JASelectedSample[0].npreregno:\"\",\"npreregno\");activeName=\"RegistrationComment\";dataStateName=\"sampleChangeDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list2=response.data.RegistrationSampleAttachment?sortData(response.data.RegistrationSampleAttachment,'descending','nsampleattachmentcode'):[];RegistrationSampleAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JASelectedSubSample.length>0?inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subsampleAttachmentDataState\";break;default:_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationComment:RegistrationComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:masterData,secondarySelection:inputData[\"secondarySelection\"],loading:false},skipInfo),{},{activeTabIndex:inputData.activeTabIndex})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample;var _inputData2=inputData,subsampletake=_inputData2.subsampletake,subsampleskip=_inputData2.subsampleskip;var skipInfo={};var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].nregistrationsectioncode,\"nregistrationsectioncode\");}var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"nregistrationsectioncode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var JASelectedSample=inputData.JASelectedSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];var JASelectedSubSample=inputData.masterData.JA_SUBSAMPLE;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");JASelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.JA_SUBSAMPLE[0]];if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var ntransactionsamplecode=JASelectedSubSample.map(function(subsample){return subsample.ntransactionsamplecode;}).join(',');var npreregno=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.npreregno;}).join(',');var nsectioncode=inputData.JASelectedSample&&inputData.JASelectedSample.map(function(sample){return sample.nsectioncode;}).join(',');var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedSample:JASelectedSample,JASelectedSubSample:JASelectedSubSample,JASelectedTest:JASelectedTest});inputData=_objectSpread(_objectSpread({},inputData),{},{ntransactiontestcode:ntransactiontestcode,npreregno:npreregno,nsectioncode:nsectioncode,ntransactionsamplecode:ntransactionsamplecode,JASelectedSample:JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:JASelectedSubSample,checkBoxOperation:3,activeTestTab:inputData.activeTestTab,masterData:masterData});if(JASelectedTest.length>0){inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{inputData=_objectSpread(_objectSpread({},inputData),{},{masterData:masterData,childTabsKey:[\"JA_TEST\"]});dispatch(getJobAllocationTestDetail(inputData,true));}}else{var _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:TestSelected?TestSelected:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.JASelectedSample,JASelectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.JA_SUBSAMPLE.length>0?[inputData.masterData.JA_SUBSAMPLE[0]]:[]});var subsamplecheck=true;if(inputData.masterData.realRegSubTypeValue.nneedsubsample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.JA_SUBSAMPLE,\"ntransactionsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubSample.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.forEach((test, index) => {\n//     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\nif(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&_masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.JA_SUBSAMPLE[0]];_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),_masterData);inputData[\"npreregno\"]=selectedSubSample1.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=selectedSubSample1.map(function(x){return x.ntransactionsamplecode;}).join(\",\");inputData[\"checkBoxOperation\"]=3;inputData[\"childTabsKey\"]=[\"JA_TEST\"];subsamplecheck=false;dispatch(getJobAllocationTestDetail(inputData,true));}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=_masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return _wholeSubSample.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.forEach((test, index) => {\n//     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\n}if(subsamplecheck){_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedSubSample:oldSelectedSubSample});}if(inputData.masterData.JA_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=_masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398         \n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=inputData.masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var _skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},_masterData),{},{JASelectedSample:inputData.JASelectedSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},_skipInfo)});}}};}export function getJobAllocationTestDetail(inputData,isServiceRequired){return function(dispatch){//console.log(\"response :\");\nvar arr=[];var arr1=[];// const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n// (item,index) => \n// item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n// );\n//   const myArray = inputData.nsectioncode.split(\",\");\n//   myArray.map((item) => {\n//         if(!arr.includes(item)) {\n//             arr.push(item)\n//           }\n//         }\n//     )\nvar JASelectedSubSample=inputData.JASelectedSubSample;JASelectedSubSample&&JASelectedSubSample.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,nsectioncode:arr.map(function(nsectioncode){return nsectioncode;}).join(\",\"),ntransactiontestcode:\"0\",ntransactionstatus:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestTab:inputData.activeTestTab,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation,nneedsubsample:inputData.nneedsubsample};var subSample=inputData.nneedsubsample;if(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"joballocation/getJobAllocationTestDetails\",inputParamData).then(function(response){var responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','ntransactionsamplecode');var oldSelectedTest=inputData.masterData.JASelectedTest;var oldSelectedSubSample=inputData.masterData.JASelectedSubSample||[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);//inputData.masterData.JA_TEST = response.data.JA_TEST;\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSample:inputData.masterData.JASelectedSample,JASelectedSubSample:inputData.JASelectedSubSample||inputData.masterData.JASelectedSubSample});if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;// let bool = false;\n// Commented bool value because no need to check bool condition to update skipInfo value.\nvar skipInfo={};// if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\ntestskip=0;// bool = true\n// }\n// if (bool) {\nskipInfo={testskip:testskip,testtake:testtake};// }\nvar RegistrationTestAttachment=[];var RegistrationTestComment=[];var TestView=[];var RegistrationSampleComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.JASelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":dbData=response.data.TestView||[];list=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(dbData));TestView=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list3=[];var _dbData=[];var testList=reArrangeArrays(inputData.masterData.JA_SUBSAMPLE,responseData.JA_TEST,\"ntransactionsamplecode\");masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:[testList[0]],JA_TEST:testList});switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTVIEW\":_dbData=response.data.TestView||[];_list3=[].concat(_toConsumableArray(inputData.masterData.TestView),_toConsumableArray(_dbData));TestView=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list4=[];switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;case\"IDS_TESTCOMMENTS\":_list4=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_TESTVIEW\":_list4=response.data.TestView?sortData(response.data.TestView,'descending','ntransactiontestcode'):[];TestView=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestView\";dataStateName=\"testViewDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list4=response.data.RegistrationSampleComment?sortData(response.data.RegistrationSampleComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_SUBSAMPLE.length>0?inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"testCommentDataState\";break;default:_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentState\";break;}}if(subSample){var wholeSubsampleList=masterData.JA_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample=oldSelectedSubSample.filter(function(item){return wholeSubsampleList.includes(item.ntransactionsamplecode);});//ALPD-3398\n// oldSelectedSubSample.map((test, index) => {\n//     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n//         oldSelectedSubSample.splice(index, 1)\n//     }\n//     return null;\n// })\nvar _keepOld2=false;var ntransactionsamplecode;if(oldSelectedSubSample.length>0){_keepOld2=true;}else{ntransactionsamplecode=masterData.selectedSubSample[0].ntransactionsamplecode;}switch(inputData.activeSubSampleTab){case\"IDS_SUBSAMPLECOMMENTS\":RegistrationSampleComment=_keepOld2?inputData.masterData.RegistrationSampleComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"subSampleCommentDataState\";break;default:RegistrationSampleAttachment=_keepOld2?inputData.masterData.RegistrationSampleAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subSampleAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView,RegistrationSampleComment:RegistrationSampleComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,// activeTestTab: inputData.activeTestTab,\nscreenName:inputData.activeTestTab,subsampleskip:undefined,subsampletake:undefined},skipInfo)});}).catch(function(error){//console.log(\"error:\", error);\ndispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.JASelectedTest;var TestSelected=inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.JA_TEST.length>0?inputData.masterData.JA_TEST[0].ntransactiontestcode.toString():\"\";var _JASelectedSubSample=inputData.RESelectedSubSample;var JASelectedTest=inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[];inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestView\",\"RegistrationTestAttachment\",\"RegistrationTestComment\"],ntransactiontestcode:ntransactiontestcode,JASelectedSample:inputData.masterData.JASelectedSample,JASelectedTest:JASelectedTest,JASelectedSubSample:_JASelectedSubSample,checkBoxOperation:3,activeTestTab:inputData.activeTestTab});dispatch(getTestChildTabDetailJobAllocation(inputData,true));}else{var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.masterData.JA_TEST.length>0?[inputData.masterData.JA_TEST[0]]:[],JASelectedSubSample:inputData.JASelectedSubSample});var wholeTestList=masterData.JA_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest=oldSelectedTest.filter(function(item){return wholeTestList.includes(item.ntransactiontestcode);});//ALPD-3398\n// oldSelectedTest.map((test, index) => {\n//     if (!wholeTestList.includes(test.ntransactiontestcode)) {\n//         oldSelectedTest.splice(index, 1)\n//     }\n//     return null;\n// })\nvar keepOld=false;var _ntransactiontestcode3;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{JASelectedTest:oldSelectedTest});}else{_ntransactiontestcode3=masterData.JA_TEST[0].ntransactiontestcode;}var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var TestView=keepOld?inputData.masterData.TestView:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView||[],_ntransactiontestcode3,\"ntransactiontestcode\");var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var bool=false;var skipInfo={};if(inputData.masterData.JA_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{JASelectedSubSample:inputData.JASelectedSubSample,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,TestView:TestView}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestTab:inputData.activeTestTab},skipInfo)});}}};}export function getTestChildTabDetailJobAllocation(inputData,isServiceRequired){return function(dispatch){var arr=[];inputData.JASelectedTest&&inputData.JASelectedTest.map(function(item){if(!arr.includes(item.nsectioncode)){arr.push(item.nsectioncode);}});var inputParamData={ntransactiontestcode:inputData.JASelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,nsectioncode:arr.map(function(nsectioncode){return nsectioncode;}).join(\",\"),//ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\nntransactionsamplecode:inputData.JASelectedTest.map(function(test){return test.ntransactionsamplecode;}).join(\",\"),ndesigntemplatemappingcode:inputData.masterData.realDesignTemplateMappingValue&&inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";var url=\"\";switch(inputData.activeTestTab){case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"RegistrationSampleAttachment\";dataStateName=\"sampleAttachmentDataState\";break;case\"IDS_TESTVIEW\":url=\"joballocation/getTestView\";activeName=\"TestView\";dataStateName=\"testViewDataState\";break;default:url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";dataStateName=\"testAttachmentDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){var _objectSpread7;var responseData=_objectSpread(_objectSpread({},response.data),{},{JASelectedSample:inputData.JASelectedSample||inputData.masterData.JASelectedSample,JASelectedTest:inputData.JASelectedTest,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId});var skipInfo={};fillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{JASelectedTest:inputData.JASelectedTest});if(inputData[dataStateName]&&masterData[activeName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread((_objectSpread7={masterData:masterData,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId,activeTestTab:inputData.activeTestTab,loading:false},_defineProperty(_objectSpread7,\"activeTestTab\",inputData.activeTestTab),_defineProperty(_objectSpread7,\"screenName\",inputData.activeTestTab),_defineProperty(_objectSpread7,\"testskip\",undefined),_defineProperty(_objectSpread7,\"testtake\",undefined),_objectSpread7),skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.JASelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{JASelectedTest:inputData.JASelectedTest});if(masterData[activeName].length<=inputData.skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestTab:inputData.activeTestTab,screenName:inputData.screenName},skipInfo)});}};}export function validateEsignforJobAllocation(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=inputParam.screenData.inputParam.methodUrl;inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}dispatch(dispatchMethods(inputParam[\"screenData\"]));}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}function dispatchMethods(screenData){return function(dispatch){var action=screenData.inputParam.action;switch(action){case\"receiveinlab\":dispatch(ReceiveinLabStatusWise(screenData.inputParam,screenData.masterData));break;case\"allotjob\":dispatch(AllotJobAction(screenData.inputParam,screenData.masterData));break;case\"allotanotheruser\":dispatch(AllotAnotherUserAction(screenData.inputParam,screenData.masterData));break;case\"reschedule\":dispatch(RescheduleJobAction(screenData.inputParam,screenData.masterData));break;case\"canceltest\":dispatch(CancelTestWise(screenData.inputParam,screenData.masterData));break;default:break;}};}export function updatedObjectWithNewElement1(oldList,newList){oldList=[].concat(_toConsumableArray(newList),_toConsumableArray(oldList));return oldList;}export function getAnalystCalenderBasedOnUser(nusercode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\",{\"nusercode\":nusercode,\"userinfo\":userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{analystCalenderData:response.data.UserData}),loading:false,selectedRecord:selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getInstrumentForSchedule(ninstrumentcatcode,userInfo){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\",{\"ninstrumentcatcode\":ninstrumentcatcode,\"userinfo\":userInfo}).then(function(response){var Instrument=[];var InstrumentMap=constructOptionList(response.data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,false);Instrument=InstrumentMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{Instrument:Instrument,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function AllotJobActionCalendar(inputParam){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"joballocation/AllotJobCreateCalendar\",inputParam.inputData).then(function(response){if(response.data.rtn===undefined||response.data.rtn===\"Success\"){replaceUpdatedObject(response.data[\"JA_TEST\"],inputParam.inputData.masterData.JA_TEST,\"ntransactiontestcode\");delete response.data[\"JA_TEST\"];var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.inputData.masterData),response.data),{},{JASelectedTest:replaceUpdatedObject(response.data[\"JASelectedTest\"],inputParam.inputData.masterData.JASelectedTest,\"ntransactiontestcode\"),TestView:replaceUpdatedObject(response.data[\"TestView\"],inputParam.inputData.masterData.TestView,\"ntransactiontestcode\")});var respObject=_objectSpread(_objectSpread({},inputParam.inputData),{},{masterData:masterData,loading:false,loadEsign:false,openModal:false,showSample:undefined});dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList,respObject));}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false,openModal:false}});toast.warn(response.data.rtn);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.info(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","postCRUDOrganiseTransSearch","Axios","transactionStatus","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","realDesignTemplateMappingValue","realDynamicDesignMappingList","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getDesignTemplateJobAllocation","Success","ApprovalVersionValue","realApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","TechniqueMap","Technique","UsersMap","Users","UsersPeriodMap","Period","InstrumentCategoryMap","InstrumentCategory","InstrumentMap","Instrument","InstrumentPeriodMap","currentTime","userinfo","CurrentTime","body","get","UsersPeriod","InstrumentPeriod","selectedRecord","Date","isOpen","operation","screenName","ncontrolCode","ncontrolcode","getAllotAnotherUserTestWise","stechniquename","TechniqueCode","ntechniquecode","getRescheduleTestWise","getInstrument","ninstrumentcatcode","ncalibrationreq","userInfo","NA","getUsers","map","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","TestView","info","AllotJobAction","AllotAnotherUserAction","RescheduleJobAction","getJobAllocationSubSampleDetail","isServiceRequired","arr","item","includes","push","inputParamData","nsampletypecode","npreregno","nregistrationsectioncode","ntransactionstatus","String","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeSampleTab","activeSubSampleTab","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","checkBoxOperation","activeName","dataStateName","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","length","skipInfo","RegistrationTestAttachment","RegistrationTestComment","RegistrationComment","RegistrationSampleAttachment","wholeSubSampleList","b","ntransactionsamplecode","wholeTestList","keepOld","list","dbData","skip","secondarySelection","activeTabIndex","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","subsample","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedTest","selectedSubSample1","x","bool","arr1","nflag","ntype","subSample","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","RESelectedSubSample","test","url","activeTabId","validateEsignforJobAllocation","methodUrl","screenData","toLowerCase","dispatchMethods","action","updatedObjectWithNewElement1","oldList","newList","getAnalystCalenderBasedOnUser","nusercode","analystCalenderData","UserData","getInstrumentForSchedule","AllotJobActionCalendar"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, replaceUpdatedObject, sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue,\r\n                            realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue,\r\n                            realDesignTemplateMappingValue:inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue,\r\n                            realDesignTemplateMappingValue: inputParam.inputData.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputParam.inputData.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam)\r\n            .then(response => {\r\n\r\n                if(response.data[\"Success\"]){\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\r\n                            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue,\r\n                            realDesignTemplateMappingValue:inputParam.realDesignTemplateMappingValue,\r\n                            realDynamicDesignMappingList:inputParam.realDynamicDesignMappingList\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip :0,\r\n                        subsampletake :inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\r\n                        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                        delete response.data[\"JA_SAMPLE\"];\r\n                        delete response.data[\"JA_SUBSAMPLE\"];\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\r\n                            JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        //toast.error(error.message); \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }                  \r\n                })\r\n    }\r\n} \r\n\r\nexport function getAllottedTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n                 \r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n                //selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation:inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData)\r\n                .then(response => {\r\n                \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);  \r\n                                \r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n                const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\r\n                const TechniqueCode = response.data.Technique && response.data.Technique[0].ntechniquecode;\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,    \r\n                            TechniqueCode,                      \r\n                            Users,\r\n                            UsersPeriod, \r\n                            currentTime,  \r\n                            selectedRecord,                         \r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getRescheduleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);   \r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n\r\n                if(ninstrumentcatcode !== transactionStatus.NA){\r\n                    selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n                }else{\r\n                    selectedRecord [\"dinstblockfromdatetime\"] =\"\";\r\n                }\r\n                \r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode,JASelectedTest, userInfo, selectedRecord,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\"ntechniquecode\": ntechniquecode,\r\n                          \"ssectioncode\":JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample=>sample.nsectioncode).join(\",\"):\"\", \r\n                          \"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\r\n                          \"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                selectedRecord[\"nusercode\"] =\"\";\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData:{...masterData},\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }  \r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {                       \r\n                        Users,                        \r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal:true,\r\n                        masterData,\r\n                        \r\n                        \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/cancelTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotJobCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\" )\r\n                        }\r\n                        let respObject = {\r\n                            ...inputParam.inputData,\r\n                            masterData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotAnotherUserAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotAnotherUserCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function RescheduleJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/RescheduleCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        fillRecordBasedOnCheckBoxSelection(inputParam.inputData.masterData, response.data, [\"TestView\"], 3, \"ntransactiontestcode\", []);\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: inputParam.inputData.masterData.TestView\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n\r\n        inputData.JASelectedSample && inputData.JASelectedSample.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            nregistrationsectioncode: inputData.nregistrationsectioncode,\r\n           // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            nsectioncode : arr.map(item => item).join(\",\"),\r\n            ntransactionstatus: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: \"0\",\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    // sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;    \r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\r\n                    \r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\",inputData.removeElementFromArray);\r\n\r\n                    // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    // inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                    }\r\n                    \r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake,\r\n                        subsampleskip, subsampletake,\r\n                        sampleskip, sampletake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                    //     bool = true\r\n                    // }\r\n                    subsampleskip = 0;\r\n                    // bool = true\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake,\r\n                            subsampleskip, subsampletake,\r\n                            sampleskip, sampletake\r\n                        }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n\r\n                        let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSampleList.includes(item.ntransactionsamplecode)\r\n                                    );\r\n                            //ALPD-3398\r\n                            // oldSelectedSubSample.forEach((subsample, index) => {\r\n                            //     if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n\r\n                            // })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n\r\n\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                            );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                             case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {                  \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                                \r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest = oldSelectedTest.filter(item =>\r\n                                wholeTestList.includes(item.ntransactiontestcode)\r\n                                );\r\n                            //ALPD-3398\r\n                            // oldSelectedTest.map((test, index) => {\r\n                            //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                            //         oldSelectedTest.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestTab) {                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;    \r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleAttachment ? sortData(response.data.RegistrationSampleAttachment, 'descending', 'nsampleattachmentcode') : [];\r\n                                RegistrationSampleAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JASelectedSubSample.length >0 ? inputData.masterData.JASelectedSubSample[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subsampleAttachmentDataState\"\r\n                                break;\r\n\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            secondarySelection :inputData[\"secondarySelection\"], \r\n                            loading: false,\r\n                            // sampleskip: undefined,\r\n                            // sampletake: undefined,\r\n                            ...skipInfo,\r\n                            activeTabIndex: inputData.activeTabIndex\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\r\n                let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    npreregno,\r\n                    nsectioncode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                                wholeSubSample.includes(item.ntransactionsamplecode)\r\n                                );\r\n                            //ALPD-3398\r\n                            // oldSelectedSubSample.forEach((test, index) => {\r\n                            //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                            //         oldSelectedSubSample.splice(index, 1)\r\n                            //     }\r\n                            //     return null;\r\n                            // })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubSample.includes(item.ntransactionsamplecode)\r\n                            );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.forEach((test, index) => {\r\n                        //     if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                    );       \r\n                //ALPD-3398         \r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }                \r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                        ntransactiontestcode, \"ntransactiontestcode\");    \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        let arr1=[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n    //   const myArray = inputData.nsectioncode.split(\",\");\r\n    //   myArray.map((item) => {\r\n    //         if(!arr.includes(item)) {\r\n    //             arr.push(item)\r\n    //           }\r\n    //         }\r\n    //     )\r\n\r\n    let JASelectedSubSample = inputData.JASelectedSubSample;\r\n    JASelectedSubSample && JASelectedSubSample.map((item) => {\r\n        if (!arr.includes(item.nsectioncode)) {\r\n            arr.push(item.nsectioncode)\r\n        }\r\n    }\r\n    )    \r\n        \r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            ntransactiontestcode: \"0\",\r\n            ntransactionstatus: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                    //inputData.masterData.JA_TEST = response.data.JA_TEST;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    // let bool = false;\r\n                    // Commented bool value because no need to check bool condition to update skipInfo value.\r\n                    let skipInfo = {}\r\n                    // if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        // bool = true\r\n                    // }\r\n                    // if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    // }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest = oldSelectedTest.filter(item =>\r\n                            wholeTestList.includes(item.ntransactiontestcode)\r\n                                );\r\n                        //ALPD-3398\r\n                        // oldSelectedTest.map((test, index) => {\r\n                        //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        //         oldSelectedTest.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;   \r\n                           \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break; \r\n                          \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n                                \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample = oldSelectedSubSample.filter(item =>\r\n                            wholeSubsampleList.includes(item.ntransactionsamplecode)\r\n                                );\r\n                        //ALPD-3398\r\n                        // oldSelectedSubSample.map((test, index) => {\r\n                        //     if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                        //         oldSelectedSubSample.splice(index, 1)\r\n                        //     }\r\n                        //     return null;\r\n                        // })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,                      \r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            // activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            subsampleskip:undefined,\r\n                            subsampletake:undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestView\",\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest = oldSelectedTest.filter(item =>\r\n                    wholeTestList.includes(item.ntransactiontestcode)\r\n                        );\r\n                //ALPD-3398\r\n                // oldSelectedTest.map((test, index) => {\r\n                //     if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                //         oldSelectedTest.splice(index, 1)\r\n                //     }\r\n                //     return null;\r\n                // })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                 const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let arr = [];\r\n        inputData.JASelectedTest && inputData.JASelectedTest.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode :arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntransactionsamplecode :inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\r\n            ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url=\"\";\r\n       \r\n        switch (inputData.activeTestTab) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;           \r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTVIEW\":\r\n                url = \"joballocation/getTestView\"\r\n                activeName = \"TestView\"\r\n                dataStateName = \"testViewDataState\"\r\n                break;    \r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            loading: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestTab: inputData.activeTestTab,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateEsignforJobAllocation(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"receiveinlab\":\r\n                dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotjob\":\r\n                dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\r\n                break;  \r\n            case \"allotanotheruser\":\r\n                dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"reschedule\":\r\n                dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"canceltest\":\r\n                dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\r\n                break;                      \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n  }\r\n\r\n\r\n\r\n  export function getAnalystCalenderBasedOnUser(nusercode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\"nusercode\": nusercode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {          \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData:{...masterData,analystCalenderData: response.data.UserData},\r\n                        loading:false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentForSchedule(ninstrumentcatcode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function AllotJobActionCalendar(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotJobCreateCalendar\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                            TestView: replaceUpdatedObject(response.data[\"TestView\"], inputParam.inputData.masterData.TestView, \"ntransactiontestcode\" )\r\n                        }\r\n                        let respObject = {\r\n                            ...inputParam.inputData,\r\n                            masterData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}