{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { fillRecordBasedOnCheckBoxSelection, checkCancelAndReject, filterRecordBasedOnTwoArrays, getRecordBasedOnPrimaryKeyName, getSameRecordFromTwoArrays, replaceUpdatedObject, sortData, updatedObjectWithNewElement, rearrangeDateFormat, convertDateTimetoString } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction';\nimport { getTestChildTabDetail } from './index.js';\nimport { constructOptionList } from '../components/CommonScript';\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      // const RegistrationSubType = response.data[\"RegistrationSubType\"];\n      //  console.log(response.data);\n      // RegistrationSubType.length > 0 ?\n      //     selectedRecord[\"nregsubtypecode\"] = {\n      //         \"value\": RegistrationSubType[0].nregsubtypecode,\n      //         \"label\": RegistrationSubType[0].sregsubtypename\n      //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\n      // const [labelname] = event.item;\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegistrationComboService(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.RealRegTypeValue !== undefined && masterData.RealRegSubTypeValue !== undefined && operation === \"create\" || operation === \"update\" && (masterData.selectedProduct.ntransactionstatus === transactionStatus.DRAFT || masterData.selectedProduct.ntransactionstatus === transactionStatus.CORRECTION)) {\n      dispatch(initRequest(true));\n      let urlArray = [];\n      const ProductCategoryService = rsapi.post(\"/productcategory/getProductCategory\", {\n        \"userinfo\": userInfo\n      });\n      const Goodsin = rsapi.post(\"/registration/getGoodsinReceive\", {\n        \"userinfo\": userInfo\n      });\n      const EprotocolService = rsapi.post(\"/eprotocol/getEProtocol\", {\n        \"userinfo\": userInfo\n      });\n\n      if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH) {\n        const ClientService = rsapi.post(\"/client/getActiveClient\", {\n          \"userinfo\": userInfo\n        });\n        urlArray = [ClientService];\n      } //ROUTINE\n\n\n      if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n        const ClientService = rsapi.post(\"/client/getActiveClient\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(ClientService);\n        const supplierService = rsapi.post(\"/supplier/getApprovedSupplier\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(supplierService);\n        const containerTypeService = rsapi.post(\"/containertype/getContainerType\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(containerTypeService);\n        const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(StorageConditionbySite);\n        const timezoneService = rsapi.post(\"timezone/getTimeZone\");\n        urlArray.push(timezoneService);\n        const DispositionService = rsapi.post(\"/registration/getDisposition\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(DispositionService);\n        const unitService = rsapi.post(\"/unit/getUnit\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(unitService);\n        const PriorityService = rsapi.post(\"/registration/getPriority\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(PriorityService);\n        const periodService = rsapi.post(\"/registration/getPeriodConfig\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(periodService);\n        const manufacturerService = rsapi.post(\"/manufacturer/getManufacturersCombo\", {\n          \"userinfo\": userInfo\n        });\n        urlArray.push(manufacturerService);\n      }\n\n      if (operation === \"create\") {\n        urlArray = [ProductCategoryService, Goodsin, EprotocolService, ...urlArray];\n      } else {}\n\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {\n          \"ntransactionstatus\": 3\n        };\n        let PopUpLabel = masterData.RealRegTypeValue.sregtypename + \"(\" + masterData.RealRegSubTypeValue.sregsubtypename + \" )\";\n        const ProductCategory = constructOptionList(response[0].data || [], \"nproductcatcode\", \"sproductcatname\", undefined, undefined, true).get(\"OptionList\");\n        const Goodsin = constructOptionList(response[1].data || [], \"nrmsno\", \"nrmsno\", \"nrmsno\", \"descending\", false).get(\"OptionList\");\n        const EProtocol = constructOptionList(response[2].data || [], \"neprotocolcode\", \"seprotocolname\", undefined, undefined, true).get(\"OptionList\");\n        let Client = masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH ? constructOptionList(response[3].data || [], \"nclientcode\", \"sclientname\", undefined, undefined, true).get(\"OptionList\") : [];\n        let {\n          Supplier,\n          ContainerType,\n          StorageCondition,\n          timezone,\n          Disposition,\n          Unit,\n          Period,\n          Priority,\n          Manufacturer\n        } = []; //ROUTINE\n\n        if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n          Client = constructOptionList(response[3].data || [], \"nclientcode\", \"sclientname\", undefined, undefined, true).get(\"OptionList\");\n          Supplier = constructOptionList(response[4].data || [], \"nsuppliercode\", \"ssuppliername\", undefined, undefined, true).get(\"OptionList\");\n          ContainerType = constructOptionList(response[5].data || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true).get(\"OptionList\");\n          StorageCondition = constructOptionList(response[6].data || [], \"nstorageconditioncode\", \"sstorageconditionname\", undefined, undefined, true).get(\"OptionList\");\n          timezone = constructOptionList(response[7].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true).get(\"OptionList\");\n          let ntzdreceivedate = {\n            \"label\": userInfo.stimezoneid,\n            \"value\": userInfo.ntimezonecode\n          };\n          selectedRecord = { ...selectedRecord,\n            ntzdreceivedate\n          };\n          Disposition = constructOptionList(response[8].data || [], \"ndispositioncode\", \"sdispositionname\", undefined, undefined, true).get(\"OptionList\");\n          Unit = constructOptionList(response[9].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true).get(\"OptionList\");\n          Priority = constructOptionList(response[10].data || [], \"nprioritycode\", \"spriorityname\", undefined, undefined, true).get(\"OptionList\");\n          Period = constructOptionList(response[11].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, true).get(\"OptionList\");\n          Manufacturer = constructOptionList(response[12].data || [], \"nmanufcode\", \"smanufname\", undefined, undefined, true).get(\"OptionList\");\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ProductCategory,\n            Goodsin,\n            EProtocol,\n            Client,\n            Product: [],\n            Specification: [],\n            AgaramTree: [],\n            Component: [],\n            Test: [],\n            SelectedTest: [],\n            selectedComponent: [],\n            // Sources: [],\n            Source: [],\n            SelectedSource: [],\n            operation,\n            screenName: PopUpLabel,\n            PopUpLabel: PopUpLabel,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loadPreregister: true,\n            loadTest: false,\n            loadComponent: false,\n            loadPoolSource: false,\n            loadPrinter: false,\n            loadFile: false,\n            loadChildTest: false,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            Supplier,\n            ContainerType,\n            StorageCondition,\n            timezone,\n            Disposition,\n            Unit,\n            Period,\n            Priority,\n            Manufacturer\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {// const alertstatus=masterData.selectedProduct.stransdisplaystatus+\"CANNOTBEEEDITED\";\n      // toast.warn(masterData.selectedProduct.sproductname +\" : \" +this.props.formatMessage({id:alertstatus}));\n    }\n  };\n}\nexport function getProductCategoryChange(Map, selectedRecord, masterData, ncategorybasedFlow) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getProductByProductCategory\", Map).then(response => {\n      selectedRecord[\"nproductcatcode\"] = Map[\"event\"];\n      let {\n        Product,\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes,\n        Manufacturer\n      } = response.data;\n\n      if (ncategorybasedFlow === 3) {\n        if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          selectedRecord[\"ntemplatemanipulationcode\"] = -1;\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n            \"value\": Specification[0].nallottedspeccode,\n            \"label\": Specification[0].sspecname\n          } : \"\";\n          selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].sversion : \"\";\n          selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].ntemplatemanipulationcode : -1;\n        }\n\n        selectedRecord[\"nproductcode\"] = Product.length > 0 ? {\n          \"value\": Product[0].nproductcode,\n          \"label\": Product[0].sproductname\n        } : selectedRecord[\"nproductcode\"];\n      } else {\n        selectedRecord[\"nallottedspeccode\"] = \"\";\n        selectedRecord[\"sversion\"] = \"\";\n        selectedRecord[\"nproductcode\"] = \"\";\n      }\n\n      selectedRecord[\"smanufname\"] = \"\";\n      selectedRecord[\"smahname\"] = \"\";\n      selectedRecord[\"smanufsitename\"] = \"\";\n      selectedRecord[\"nproductmahcode\"] = \"\";\n      Specification = constructOptionList(Specification || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n      Product = constructOptionList(Product || [], \"nproductcode\", \"sproductname\", undefined, undefined, true).get(\"OptionList\");\n      let optionalUpdates = {}; //ROUTINE\n\n      if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n        optionalUpdates = {};\n      } else {\n        optionalUpdates = {\n          Manufacturer\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Product,\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          ...optionalUpdates,\n          Component: [],\n          Test: [],\n          SelectedTest: [],\n          ProductMaholder: [],\n          loading: false,\n          SelectedSource: [],\n          Source: []\n        }\n      });\n    }).catch(error => {\n      //console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getReProductChange(Map, selectedRecord, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getManufacturespecByProduct\", Map).then(response => {\n      selectedRecord[\"nproductcode\"] = Map[\"event\"];\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes,\n        Manufacturer\n      } = LoginProps;\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"];\n        Manufacturer = response.data[\"Manufacturer\"];\n\n        if (LoginProps.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          selectedRecord[\"ntemplatemanipulationcode\"] = -1;\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? Specification[0] : \"\"; // {\n          //     \"value\": Specification[0].nallottedspeccode,\n          //     \"label\": Specification[0].sspecname\n          // } : \"\";\n\n          selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n          selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        }\n\n        selectedRecord[\"nmanufcode\"] = \"\";\n        selectedRecord[\"smanufname\"] = \"\";\n        selectedRecord[\"smanufsitename\"] = \"\";\n        selectedRecord[\"nproductmahcode\"] = \"\";\n        selectedRecord[\"smahname\"] = \"\";\n      } else {\n        Manufacturer = response.data[\"Manufacturer\"];\n        selectedRecord[\"nmanufcode\"] = \"\";\n        selectedRecord[\"smahname\"] = \"\";\n        selectedRecord[\"smanufname\"] = \"\";\n        selectedRecord[\"smanufsitename\"] = \"\";\n        selectedRecord[\"nproductmahcode\"] = \"\";\n      }\n\n      let optionalUpdates = {}; //ROUTINE\n\n      if (LoginProps.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n        optionalUpdates = {};\n      } else {\n        optionalUpdates = {\n          Manufacturer\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Specification,\n          ...optionalUpdates,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Component: [],\n          Test: [],\n          ProductMaholder: [],\n          SelectedTest: [],\n          loading: false,\n          SelectedSource: [],\n          Source: []\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getComponentTestBySpec\", Map).then(response => {\n      const {\n        Component,\n        Test\n      } = response.data;\n      let slno = Component.length > 0 ? Component[0].slno : -1;\n      let selectedComponent = Component.length > 0 ? Component[0] : undefined;\n      let SelectedTest = [];\n      let SelectedSource = [];\n\n      if (Object.keys(Test).length > 0) {\n        SelectedTest = Test[slno];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectedComponent,\n          loading: false,\n          SelectedSource,\n          selectedRecord,\n          popUptestDataState: {\n            skip: 0,\n            take: 10\n          },\n          Source: []\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function AddComponent(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\n      \"userinfo\": Map[\"userinfo\"]\n    });\n    const StorageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", {\n      \"userinfo\": Map[\"userinfo\"]\n    });\n\n    if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\n      const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\", {\n        \"userinfo\": Map[\"userinfo\"],\n        nmanufcode: Map[\"nmanufcode\"]\n      });\n      urlArray = [PlasmaMasterByManufCode];\n    }\n\n    urlArray = [ComponentTestBySpec, StorageConditionbySite, StorageLocationbySite, timezone, ...urlArray];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const StorageConditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\", \"sstorageconditionname\", undefined, undefined, true);\n      const StorageLocationMap = constructOptionList(response[2].data || [], \"nstoragelocationcode\", \"sstoragelocationname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true); // const StorageCondition = response[1].data;\n      // const StorageLocation = response[2].data;\n      // const timeZoneList = response[3].data;\n\n      let plasmaMasterFile = [];\n\n      if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\n        plasmaMasterFile = constructOptionList(response[4].data || [], \"nplasmafilecode\", \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\n      }\n\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const StorageCondition = StorageConditionMap.get(\"OptionList\");\n      const StorageLocation = StorageLocationMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\"); // const dreceiveddate = lstComponent[0].dreceiveddate || [];\n\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        //: new Date(dreceiveddate),\n        ntzdmanufdate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdmanufdate: Map[\"userinfo\"].stimezoneid,\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        nstorageconditioncode: StorageConditionMap.get(\"DefaultValue\"),\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate; //new Date(dreceiveddate);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          StorageCondition,\n          StorageLocation,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          plasmaMasterFile\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let component = { ...objComponent\n    };\n    component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\n    component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\n    component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\n    component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\n    component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\n    component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\n    component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\n    component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\n    component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\n    component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\n    component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\n    component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\n    const dreceiveddate = objComponent[\"dreceiveddate\"];\n    component[\"dreceiveddate\"] = dreceiveddate; //formatInputDate(objComponent[\"dreceiveddate\"], false);\n\n    component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo); //formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\n    // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\n\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: component.nspecsampletypecode,\n      slno: component.slno\n    }).then(response => {\n      let TestData = response.data;\n      let slno = component.slno;\n      let SelectedTest = [];\n      let loadComponent = true;\n      let selectComponent = {};\n      let showSaveContinue = true;\n      let SelectedSource = []; // let openChildModal = true;\n\n      let selectedComponent = undefined;\n      let parentPopUpSize = \"lg\"; // selectComponent = objComponent\n\n      if (nflag === 1) {\n        loadComponent = true;\n        objComponent[\"smanuflotno\"] = \"\";\n        objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        selectComponent = objComponent;\n      } else {\n        loadComponent = false;\n        parentPopUpSize = \"xl\"; // openChildModal = false;\n\n        showSaveContinue = false;\n        selectComponent = undefined;\n      }\n\n      let Test = LoginProps.Test || [];\n      let Component = LoginProps.Component || [];\n      Component.unshift(component);\n      selectedComponent = component;\n      Test[slno] = response.data;\n      SelectedTest = TestData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectComponent,\n          selectedComponent,\n          loadComponent,\n          showSaveContinue,\n          parentPopUpSize,\n          loading: false,\n          SelectedSource\n        }\n      }); // console.log(response.data);\n    }).catch(error => {\n      //   console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTest(objComponent, LoginProps) {\n  return function (dispatch) {\n    if (Object.keys(objComponent).length > 0) {\n      dispatch(initRequest(true)); //rsapi.post(\"/registration/getTestfromDB\", { \"Component\": objComponent })\n\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nspecsampletypecode: objComponent.nspecsampletypecode,\n        slno: objComponent.slno\n      }).then(response => {\n        let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n        const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            TestCombined,\n            loadTest: true,\n            openChildModal: false,\n            ChildscreenName: \"Test\",\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false\n          }\n        });\n      }).catch(error => {\n        //console.log(error);\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function EditComponent(Map, component, userInfo, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\n      \"userinfo\": userInfo\n    });\n    const StorageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", {\n      \"userinfo\": userInfo\n    });\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n\n    if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\n      const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\", {\n        \"userinfo\": Map[\"userinfo\"],\n        nmanufcode: Map[\"nmanufcode\"]\n      });\n      urlArray = [PlasmaMasterByManufCode];\n    }\n\n    urlArray = [ComponentTestBySpec, StorageConditionbySite, StorageLocationbySite, timezone, ...urlArray];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const StorageConditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\", \"sstorageconditionname\", undefined, undefined, true);\n      const StorageLocationMap = constructOptionList(response[2].data || [], \"nstoragelocationcode\", \"sstoragelocationname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const TimeZoneField = response[3].data;\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const StorageCondition = StorageConditionMap.get(\"OptionList\");\n      const StorageLocation = StorageLocationMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      let plasmaMasterFile = [];\n\n      if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\n        plasmaMasterFile = constructOptionList(response[4].data || [], \"nplasmafilecode\", \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\n\n        if (plasmaMasterFile.length > 0) {\n          component[\"nplasmafilecode\"] = component.nplasmafilecode && component.nplasmafilecode !== -1 ? {\n            \"label\": plasmaMasterFile[plasmaMasterFile.findIndex(x => x.value === component.nplasmafilecode)].label,\n            \"value\": plasmaMasterFile[plasmaMasterFile.findIndex(x => x.value === component.nplasmafilecode)].value\n          } : \"\";\n        }\n      }\n\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      }; // component[\"nstoragelocationcode\"] = { label: component.sstoragelocationname, value: component.nstoragelocationcode }\n      // component[\"nstorageconditioncode\"] = { label: component.sstorageconditionname, value: component.nstorageconditioncode }\n\n      if (component.nstoragelocationcode !== -1) {\n        component[\"nstoragelocationcode\"] = {\n          label: component.sstoragelocationname,\n          value: component.nstoragelocationcode\n        };\n      } else {\n        component[\"nstoragelocationcode\"] = undefined;\n      }\n\n      if (component.nstorageconditioncode !== -1) {\n        component[\"nstorageconditioncode\"] = {\n          label: component.sstorageconditionname,\n          value: component.nstorageconditioncode\n        };\n      } else {\n        component[\"nstorageconditioncode\"] = undefined;\n      }\n\n      component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]); //new Date(component[\"sreceiveddate\"])\n\n      let ntzdmanufdate = component.ntzdmanufdate;\n\n      if (component.ntzdmanufdate !== null && typeof component.ntzdmanufdate === \"object\") {\n        ntzdmanufdate = component.ntzdmanufdate.value;\n      }\n\n      let ntzdreceivedate = component.ntzdreceivedate;\n\n      if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\n        ntzdreceivedate = component.ntzdreceivedate.value;\n      }\n\n      component[\"ntzdmanufdate\"] = component.ntzdmanufdate && TimeZoneField.length > 0 ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdmanufdate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdmanufdate)].ntimezonecode\n      } : \"\"; //findIndex(x => x.ntimezonecode === ntzdmanufdate)\n\n      component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\n      } : \"\"; // if(typeof Component.ntzdmanufdate)\n      // Component[\"ntzdmanufdate\"] = Component.ntzdmanufdate ? { \"label\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdmanufdate)].stimezoneid, \"value\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdmanufdate)].ntimezonecode } : \"\"\n      // Component[\"ntzdreceivedate\"] = Component.ntzdreceivedate ? { \"label\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdreceivedate)].stimezoneid, \"value\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdreceivedate)].ntimezonecode } : \"\"\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          childoperation: \"update\",\n          lstComponent,\n          StorageCondition,\n          StorageLocation,\n          ChildscreenName: \"Component\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          timeZoneList,\n          plasmaMasterFile,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      //console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }); // return dispatch({\n    //     type: DEFAULT_RETURN,\n    //     payload: {\n    //     }\n    // })\n  };\n}\nexport function insertRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createRegistration\", inputParam.inputData).then(response => {\n      let openModal = true;\n\n      if (response.data[\"rtn\"] === \"Success\") {\n        let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n        let selectedSample = response.data[\"selectedSample\"];\n        let RegistrationGetSubSample = response.data[\"selectedSubSample\"];\n        let RegistrationGetTest = response.data[\"selectedTest\"];\n        let selectedSubSample = RegistrationGetSubSample;\n        RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n        let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n\n        if (inputParam.multipleselectionFlag) {\n          selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n          updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n          updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n          RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n          RegistrationGetTest = masterData.RegistrationGetTest;\n        }\n\n        masterData = { ...masterData,\n          ...response.data,\n          selectedSample,\n          selectedSubSample,\n          selectedTest,\n          RegistrationGetSubSample,\n          RegistrationGetTest,\n          RegistrationGetSample\n        }; // sortData(masterData);\n        // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         openModal: false, masterData, showConfirmAlert: false, selectedRecord: undefined\n        //     }\n        // });\n        // sortData(masterData);\n        // dispatch({\n        //     type: DEFAULT_RETURN,\n        //     payload: {\n        //         openModal: false, masterData, showConfirmAlert: false, selectedRecord: undefined\n        //     }\n        // });\n\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          loadPreregister: false,\n          showSample: undefined\n        };\n        inputParam.postParamList[0]['clearFilter'] = 'yes';\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else if (response.data[\"rtn\"] && response.data[\"rtn\"] !== \"\") {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            booleanFlag: response.data[\"rtn\"],\n            //.split(\",\").join(\"\\n\"), \n            showConfirmAlert: true,\n            masterData,\n            openModal,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            showConfirmAlert: false,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n} // export function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n//     return function (dispatch) {\n//         let inputParamData = {\n//             nflag: 2,\n//             ntype: 2,\n//             nsampletypecode: inputData.nsampletypecode,\n//             nregtypecode: inputData.nregtypecode,\n//             nregsubtypecode: inputData.nregsubtypecode,\n//             npreregno: inputData.npreregno,\n//             ntransactionstatus: inputData.ntransactionstatus,\n//             napprovalconfigcode: inputData.napprovalconfigcode,\n//             activeTestTab: inputData.activeTestTab,\n//             activeSampleTab: inputData.activeSampleTab,\n//             userinfo: inputData.userinfo\n//         }\n//         dispatch(initRequest(true));\n//         if (isServiceRequired) {\n//             rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\n//                 .then(response => {\n//                     sortData(response.data);\n//                     fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n//                     let wholeRegistrationTestComments = [];\n//                     let RegistrationTestComment = [];\n//                     if (inputData.checkBoxOperation === 1) {\n//                         RegistrationTestComment = getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,\n//                             inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//                     } else if (inputData.checkBoxOperation === 5) {\n//                         let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n//                         let RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n//                         let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\n//                         RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n//                         // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n//                     } else {\n//                         RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n//                     }\n//                     let { testskip, testtake } = inputData\n//                     let bool = false;\n//                     let skipInfo = {}\n//                     if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n//                         testskip = 0;\n//                         bool = true\n//                     }\n//                     if (bool) {\n//                         skipInfo = { testskip, testtake }\n//                     }\n//                     if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n//                         inputData.searchTestRef.current.value = \"\"\n//                         inputData.masterData['searchedTest'] = undefined\n//                     }\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData: {\n//                                 ...inputData.masterData,\n//                                 selectedSample: inputData.selectedSample,\n//                                 selectedPreregno: inputData.npreregno,\n//                                 selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n//                                 RegistrationTestComment,\n//                                 selectedSubSample: inputData.masterData.RegistrationGetSubSample, wholeRegistrationTestComments\n//                             },\n//                             loading: false,\n//                             showFilter: false,\n//                             activeSampleTab: inputData.activeSampleTab,\n//                             activeTestTab: inputData.activeTestTab,\n//                             skip: undefined,\n//                             take: undefined,\n//                             ...skipInfo,\n//                             showSample:undefined\n//                         }\n//                     })\n//                 })\n//                 .catch(error => {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     if (error.response.status === 500) {\n//                         toast.error(error.message);\n//                     }\n//                     else {\n//                         toast.warn(error.response.data);\n//                     }\n//                 })\n//         } else {\n//             let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n//             let isGrandChildGetRequired = false;\n//             if (TestSelected.length > 0) {\n//                 isGrandChildGetRequired = true;\n//             } else {\n//                 isGrandChildGetRequired = false;\n//             }\n//             fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n//             if (isGrandChildGetRequired) {\n//                 let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n//                 let selectedSample = inputData.selectedSample;\n//                 let selectedPreregno = inputData.npreregno;\n//                 let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n//                 let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n//                 let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\n//                 inputData = {\n//                     ...inputData, childTabsKey: [\"RegistrationTestComment\"], ntransactiontestcode, masterData, selectedTest,\n//                     selectedSubSample, checkBoxOperation: 3\n//                 }\n//                 dispatch(getTestChildTabDetail(inputData, true));\n//             } else {\n//                 let RegistrationTestComment = getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,\n//                     inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\", \"ntransactiontestcode\")\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         masterData: {\n//                             ...inputData.masterData,\n//                             selectedSample: inputData.selectedSample,\n//                             selectedPreregno: inputData.npreregno,\n//                             selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n//                             RegistrationTestComment,\n//                             selectedSubSample: inputData.masterData.RegistrationGetSubSample\n//                         },\n//                         loading: false,\n//                         showFilter: false,\n//                         activeSampleTab: inputData.activeSampleTab,\n//                         activeTestTab: inputData.activeTestTab\n//                     }\n//                 })\n//             }\n//         }\n//     }\n// }\n\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nflag: 2,\n      ntype: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.selectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: inputData.masterData.RegistrationGetSubSample //wholeRegistrationTestComments\n\n        }; //let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let RegistrationParameter = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n              let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n              let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData['RegistrationTestComment'] = RegistrationTestComment;\n        masterData[\"RegistrationParameter\"] = RegistrationParameter;\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.sourceDataState && masterData.RegistrationSourceCountry && masterData.RegistrationSourceCountry.length <= inputData.sourceDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sourceDataState: { ...inputData.sourceDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sourceDataState: { ...inputData.sourceDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSample = inputData.selectedSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetail(inputData, true));\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: inputData.masterData.RegistrationGetSubSample\n        };\n        let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function acceptRegistration(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\" || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n        // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        // let masterData = {\n        //     ...LoginProps, ...response.data\n        // }\n        replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        delete response.data[\"RegistrationGetSample\"];\n        delete response.data[\"RegistrationGetSubSample\"];\n        delete response.data[\"RegistrationGetTest\"];\n        let masterData = { ...LoginProps,\n          ...response.data,\n          selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n          selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n          selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n\n        if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      } // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData\n      //     }\n      // });\n\n    }).catch(error => {\n      //console.log(error);\n      toast.error(error.message);\n    });\n  };\n}\nexport function getRegistrationSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\"; //masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } // let selectedFilter = inputData.selectedFilter;\n      // selectedFilter[\"fromdate\"] = \"\";\n      // selectedFilter[\"todate\"] = \"\";\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          showSample: undefined //selectedFilter\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getManufacturerChange(selectedRecord, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n\n    if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\n      selectedRecord[\"nproductmahcode\"] = \"\";\n      selectedRecord[\"smahname\"] = \"\";\n      selectedRecord[\"nplasmafilecode\"] = undefined;\n      const maHolder = rsapi.post(\"registration/getMaholderByProduct\", {\n        nproductcode: selectedRecord.nproductcode.value,\n        nproductmanufcode: selectedRecord.nproductmanufcode,\n        userinfo: userInfo\n      });\n      const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\", {\n        \"userinfo\": userInfo,\n        nmanufcode: selectedRecord.nmanufcode\n      });\n      Axios.all([maHolder, PlasmaMasterByManufCode]) // rsapi.post(\"registration/getMaholderByProduct\", { nproductcode: selectedRecord.nproductcode.value, nproductmanufcode: selectedRecord.nproductmanufcode, userinfo: userInfo })\n      .then(response => {\n        const plasmaMasterFile = constructOptionList(response[1].data || [], \"nplasmafilecode\", \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\n        let ProductMaholder = response[0].data; //let plasmaMasterFile = response[1].data;\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ProductMaholder,\n            plasmaMasterFile,\n            selectedRecord,\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getComponentSource(objComponent, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n\n    if (Object.keys(objComponent).length > 0) {\n      rsapi.post(\"/country/getBatchPoolCountry\", {\n        \"userinfo\": LoginProps.userInfo\n      }).then(response => {\n        let Country = response.data; // let Sources = LoginProps.Sources || [];\n\n        let Source = LoginProps.Source || [];\n        let componentSource = Source[objComponent.slno] ? Source[objComponent.slno] : [];\n        let SourceCombined = [];\n\n        if (componentSource.length > 0) {\n          SourceCombined = filterRecordBasedOnTwoArrays(Country, componentSource, \"ncountrycode\");\n        } else {\n          SourceCombined = Country;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            SourceCombined,\n            loadSource: true,\n            ChildscreenName: \"Source\",\n            selectedSourceData: [],\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        // console.log(error);\n        toast.error(error.message);\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); //toast.warn(\"select Component to Add Source\");\n\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDSOURCE\"\n      }));\n    }\n  };\n}\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData).then(response => {\n      replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function cancelTestAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelTest\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedTest: response.data[\"selectedTest\"],\n        // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\n        RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\"),\n        RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         loading: false,\n      //         loadEsign: false,\n      //         openModal: false\n      //     }\n      // });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function ImportFile(formData, ConfirmMessage, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/importFile\", formData).then(response => {\n      let {\n        Component,\n        SelectedTest,\n        Test,\n        selectedComponent,\n        SelectedSource,\n        Source,\n        selectedSourceData\n      } = LoginProps;\n\n      if (response.data.rtn === \"Success\") {\n        Component = response.data[\"Component\"];\n        Test = response.data[\"Test\"];\n        Source = response.data[\"Source\"];\n        selectedComponent = Component[0];\n        SelectedTest = Test[selectedComponent.slno];\n        SelectedSource = Source[selectedComponent.slno];\n        selectedSourceData = Source[selectedComponent.slno];\n      } else {\n        const data = response.data.rtn;\n        ConfirmMessage.confirm(intl.formatMessage({\n          id: \"IDS_WARNING\"\n        }), intl.formatMessage({\n          id: \"IDS_WARNING\"\n        }), data, undefined, intl.formatMessage({\n          id: \"IDS_OK\"\n        }), undefined, true, undefined);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadFile: false,\n          parentPopUpSize: \"xl\",\n          Component,\n          SelectedTest,\n          Test,\n          selectedComponent,\n          loading: false,\n          SelectedSource,\n          Source,\n          showSample: undefined,\n          selectedSourceData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegistrationComboService(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      masterData,\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const goodsin = rsapi.post(\"/registration/getGoodsinReceive\", {\n      \"userinfo\": userInfo\n    });\n    const eprotocolService = rsapi.post(\"/eprotocol/getEProtocol\", {\n      \"userinfo\": userInfo\n    });\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam,\n      npreregno\n    });\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    const storageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\n      \"userinfo\": userInfo\n    });\n    const storageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", {\n      \"userinfo\": userInfo\n    });\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: userInfo\n    });\n\n    if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH) {\n      const ClientService = rsapi.post(\"/client/getActiveClient\", {\n        \"userinfo\": userInfo\n      });\n      urlArray = [ClientService];\n    }\n\n    if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      const ClientService = rsapi.post(\"/client/getActiveClient\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(ClientService);\n      const supplierService = rsapi.post(\"/supplier/getApprovedSupplier\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(supplierService);\n      const containerTypeService = rsapi.post(\"/containertype/getContainerType\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(containerTypeService);\n      const DispositionService = rsapi.post(\"/registration/getDisposition\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(DispositionService);\n      const unitService = rsapi.post(\"/unit/getUnit\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(unitService);\n      const PriorityService = rsapi.post(\"/registration/getPriority\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(PriorityService);\n      const periodService = rsapi.post(\"/registration/getPeriodConfig\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(periodService);\n      const manufacturerService = rsapi.post(\"/manufacturer/getManufacturersCombo\", {\n        \"userinfo\": userInfo\n      });\n      urlArray.push(manufacturerService);\n    }\n\n    urlArray = [goodsin, eprotocolService, selectedRegistration, timezone, storageConditionbySite, storageLocationbySite, UTCtimeZoneService, ...urlArray];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[2].data[\"SelectedRegistration\"][0]\n      };\n      const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0]\n      };\n      const currentTime = rearrangeDateFormat(userInfo, response[6].data);\n\n      if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        selectedRecord[\"nproductcatcode\"] = {\n          value: selectedRecord.nproductcatcode,\n          label: selectedRecord.sproductcatname\n        };\n        selectedRecord[\"nproductcode\"] = {\n          value: selectedRecord.nproductcode,\n          label: selectedRecord.sproductname\n        };\n        selectedRecord[\"neprotocolcode\"] = {\n          value: selectedRecord.neprotocolcode,\n          label: selectedRecord.seprotocolname\n        };\n        selectedRecord[\"nrmsno\"] = {\n          label: selectedRecord.nrmsno,\n          value: selectedRecord.nrmsno\n        };\n        selectedRecord[\"nallottedspeccode\"] = {\n          value: selectedRecord.nallottedspeccode,\n          label: selectedRecord.sspecname\n        }; // selectedRecord[\"nstorageconditioncode\"] = { value: selectedRecord.nstorageconditioncode, label: selectedRecord.sstorageconditionname };\n\n        selectedRecord[\"nclientcode\"] = {\n          value: selectedRecord.nclientcode,\n          label: selectedRecord.sclientname\n        };\n        selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, selectedRecord.sreceiveddate); //new Date(selectedRecord.sreceiveddate);\n\n        recordToEdit[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"];\n\n        if (selectedRecord.smanufdate && selectedRecord.smanufdate !== null) {\n          selectedRecord[\"dmanufdate\"] = rearrangeDateFormat(userInfo, selectedRecord.smanufdate); //new Date(selectedRecord.smanufdate);\n\n          recordToEdit[\"dmanufdate\"] = selectedRecord[\"dmanufdate\"];\n        } //selectedRecord[\"nstoragelocationcode\"] = { value: selectedRecord.nstoragelocationcode, label: selectedRecord.sstoragelocationname };\n        // selectedRecord[\"nplasmafilecode\"] = { value: selectedRecord.nplasmafilecode, label: selectedRecord.splasmafilenumber };\n\n\n        if (selectedRecord[\"nstorageconditioncode\"] !== -1) {\n          selectedRecord[\"nstorageconditioncode\"] = {\n            value: selectedRecord.nstorageconditioncode,\n            label: selectedRecord.sstorageconditionname\n          };\n        }\n\n        if (selectedRecord[\"nstoragelocationcode\"] !== -1) {\n          selectedRecord[\"nstoragelocationcode\"] = {\n            value: selectedRecord.nstoragelocationcode,\n            label: selectedRecord.sstoragelocationname\n          };\n        }\n\n        if (selectedRecord[\"nplasmafilecode\"] !== -1) {\n          selectedRecord[\"nplasmafilecode\"] = {\n            value: selectedRecord.nplasmafilecode,\n            label: selectedRecord.splasmafilenumber\n          };\n        }\n\n        response[3].data.forEach(option => {\n          if (option.ntimezonecode === selectedRecord[\"ntzdreceivedate\"]) selectedRecord[\"ntzdreceivedate\"] = {\n            value: option.ntimezonecode,\n            label: option.stimezoneid\n          };\n          if (option.ntimezonecode === selectedRecord[\"ntzdmanufdate\"]) selectedRecord[\"ntzdmanufdate\"] = {\n            value: option.ntimezonecode,\n            label: option.stimezoneid\n          };\n        });\n        selectedRecord[\"stzdreceivedate\"] = selectedRecord[\"ntzdreceivedate\"] ? selectedRecord[\"ntzdreceivedate\"].label : \"\";\n        selectedRecord[\"stzdmanufdate\"] = selectedRecord[\"ntzdmanufdate\"] ? selectedRecord[\"ntzdmanufdate\"].label : \"\";\n        const plasmaMasterFile = constructOptionList(response[2].data[\"PlasmaMasterFile\"] || [], \"nplasmafilecode\", \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\n        let popUpLabel = masterData.RealRegTypeValue.sregtypename + \"(\" + masterData.RealRegSubTypeValue.sregsubtypename + \" )\";\n        let {\n          Client,\n          Supplier,\n          ContainerType,\n          Disposition,\n          Unit,\n          Priority,\n          Period\n        } = []; //ROUTINE\n\n        let Manufacturer = response[2].data[\"Manufacturer\"] || [];\n\n        if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH) {\n          Client = constructOptionList(response[7].data || [], \"nclientcode\", \"sclientname\", undefined, undefined, true).get(\"OptionList\");\n        }\n\n        if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n          Client = constructOptionList(response[7].data || [], \"nclientcode\", \"sclientname\", undefined, undefined, true).get(\"OptionList\");\n          Supplier = constructOptionList(response[8].data || [], \"nsuppliercode\", \"ssuppliername\", undefined, undefined, true).get(\"OptionList\");\n          ContainerType = constructOptionList(response[9].data || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true).get(\"OptionList\");\n          Disposition = constructOptionList(response[10].data || [], \"ndispositioncode\", \"sdispositionname\", undefined, undefined, true).get(\"OptionList\");\n          Unit = constructOptionList(response[11].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true).get(\"OptionList\");\n          Priority = constructOptionList(response[12].data || [], \"nprioritycode\", \"spriorityname\", undefined, undefined, true).get(\"OptionList\");\n          Period = constructOptionList(response[13].data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, true).get(\"OptionList\");\n          Manufacturer = constructOptionList(response[14].data || [] || [], \"nmanufcode\", \"smanufname\", undefined, undefined, true).get(\"OptionList\");\n\n          if (selectedRecord[\"nclientcode\"] !== -1 && selectedRecord.nclientcode.value === undefined) {\n            selectedRecord[\"nclientcode\"] = {\n              value: selectedRecord.nclientcode,\n              label: selectedRecord.sclientname\n            };\n          }\n\n          if (selectedRecord[\"nsuppliercode\"] !== -1) {\n            selectedRecord[\"nsuppliercode\"] = {\n              value: selectedRecord.nsuppliercode,\n              label: selectedRecord.ssuppliername\n            };\n          }\n\n          if (selectedRecord[\"ncontainertypecode\"] !== -1) {\n            selectedRecord[\"ncontainertypecode\"] = {\n              value: selectedRecord.ncontainertypecode,\n              label: selectedRecord.scontainertype\n            };\n          }\n\n          if (selectedRecord[\"ndisposition\"] !== -1) {\n            selectedRecord[\"ndisposition\"] = {\n              value: selectedRecord.ndisposition,\n              label: selectedRecord.sdispositionname\n            };\n          }\n\n          if (selectedRecord[\"ntotalunitcode\"] !== -1) {\n            selectedRecord[\"ntotalunitcode\"] = {\n              value: selectedRecord.ntotalunitcode,\n              label: selectedRecord.sunitname\n            };\n          }\n\n          if (selectedRecord[\"npriority\"] !== -1) {\n            selectedRecord[\"npriority\"] = {\n              value: selectedRecord.npriority,\n              label: selectedRecord.spriorityname\n            };\n          }\n\n          if (selectedRecord[\"nperiodconfigcode\"] !== -1) {\n            selectedRecord[\"nperiodconfigcode\"] = {\n              value: selectedRecord.nperiodconfigcode,\n              label: selectedRecord.speriodname\n            };\n          }\n\n          if (selectedRecord[\"nmanufcode\"] !== -1) {\n            selectedRecord[\"nmanufcode\"] = {\n              value: selectedRecord.nmanufcode,\n              label: selectedRecord.smanufname\n            };\n          }\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ProductCategory: [],\n            Goodsin: constructOptionList(response[0].data || [], \"nrmsno\", \"nrmsno\", undefined, undefined, true).get(\"OptionList\"),\n            EProtocol: constructOptionList(response[1].data || [], \"neprotocolcode\", \"seprotocolname\", undefined, undefined, true).get(\"OptionList\"),\n            Client,\n            Supplier,\n            ContainerType,\n            Disposition,\n            Unit,\n            Priority,\n            Period,\n            AgaramTree: response[2].data[\"AgaramTree\"],\n            FocusKey: response[2].data[\"FocusKey\"],\n            ActiveKey: response[2].data[\"ActiveKey\"],\n            OpenNodes: response[2].data[\"OpenNodes\"],\n            Manufacturer,\n            plasmaMasterFile,\n            //plasmaMasterFile: response[2].data[\"PlasmaMasterFile\"] || [],\n            ProductMaholder: response[2].data[\"ProductMAHolder\"] || [],\n            statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\n            timeZoneList: constructOptionList(response[3].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true).get(\"OptionList\"),\n            StorageCondition: constructOptionList(response[4].data || [], \"nstorageconditioncode\", \"sstorageconditionname\", undefined, undefined, true).get(\"OptionList\"),\n            StorageLocation: constructOptionList(response[5].data || [], \"nstoragelocationcode\", \"sstoragelocationname\", undefined, undefined, true).get(\"OptionList\"),\n            currentTime,\n            operation,\n            screenName: popUpLabel,\n            PopUpLabel: popUpLabel,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: inputParam.editRegParam.ncontrolCode,\n            loadPreregister: true,\n            loadTest: false,\n            loadComponent: false,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            regRecordToEdit: recordToEdit\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    }); //} else {\n    // const alertstatus=masterData.selectedProduct.stransdisplaystatus+\"CANNOTBEEEDITED\";\n    // toast.warn(masterData.selectedProduct.sproductname +\" : \" +this.props.formatMessage({id:alertstatus}));\n    //}\n  };\n}\nexport function updateRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistration\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"selectedSample\"], masterData.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\"); // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n\n      let RegistrationGetTest = response.data[\"selectedTest\"];\n      masterData = { ...masterData,\n        selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [],\n        RegistrationGetTest\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadPreregister: false,\n          selectedRecord: undefined,\n          showSample: undefined\n        }\n      });\n      let inputData = {\n        masterData,\n        selectedTest: masterData.selectedTest,\n        ntransactiontestcode: masterData.selectedTest ? String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n        npreregno: masterData.selectedSample ? masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n        userinfo: inputParam.inputData.userinfo,\n        activeTestTab: masterData.activeTestTab,\n        screenName: masterData.activeTestTab,\n        resultDataState: inputParam.resultDataState,\n        testCommentDataState: inputParam.testCommentDataState\n      };\n      dispatch(getTestChildTabDetail(inputData, true));\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport const addMoreTest = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n    value = inputParam.selectedsample.some(obj => obj.nspecsampletypecode !== inputParam.selectedsample[0].nspecsampletypecode);\n\n    if (value) {\n      return toast.warn(intl.formatMessage({\n        id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n      }));\n    }\n\n    sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n    const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsample, \"npreregno\");\n    const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\n\n    if (selectedsample && selectedsample.length > 0) {\n      const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\n\n      if (findTransactionStatus.length === 1) {\n        if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n          if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\n            const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\n\n            if (findApprovalVersion.length === 1) {\n              const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\n              const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n              if (findSampleSpec.length === 1 && findComponent.length === 1) {\n                dispatch(initRequest(true));\n                rsapi.post(\"/registration/getMoreTest\", { ...inputParam\n                }).then(response => {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      availableTest: response.data,\n                      loadChildTest: true,\n                      loading: false,\n                      ncontrolCode,\n                      screenName: \"IDS_TEST\",\n                      operation: \"create\",\n                      openModal: true,\n                      parentPopUpSize: \"lg\",\n                      selectedRecord: {},\n                      showSample: undefined\n                    }\n                  });\n                }).catch(error => {\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      loading: false\n                    }\n                  });\n\n                  if (error.response.status === 500) {\n                    toast.error(error.message);\n                  } else {\n                    toast.warn(this.props.formatMessage({\n                      id: error.response.data\n                    }));\n                  }\n                });\n              } else {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                }));\n              }\n            } else {\n              toast.warn(intl.formatMessage({\n                id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n              }));\n            }\n          } else {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\"\n            }));\n          }\n        } else {\n          ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n          }));\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSAMPLE\"\n      }));\n    }\n  };\n};\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      // inputParam.responseKeyList.forEach(item => {\n      //     if (item.dataAction === \"add\") {\n      //         updatedObjectWithNewElement(masterData[item.masterDataKey], response.data[item.responseKey]);\n      //     } else if (item.dataAction === \"update\") {\n      //         replaceUpdatedObject(response.data[item.responseKey], masterData[item.masterDataKey], item.primaryKey);\n      //     }\n      // });\n      // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      // let selectedSample = response.data[\"selectedSample\"];\n      // let RegistrationGetSubSample = response.data[\"selectedSubSample\"];\n      // let RegistrationGetTest = response.data[\"selectedTest\"];\n      // let selectedSubSample = RegistrationGetSubSample;\n      // let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      // if (inputParam.multipleselectionFlag) {\n      //     selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n      //     updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n      //     updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n      //     RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n      //     RegistrationGetTest = masterData.RegistrationGetTest;\n      // }\n      //   let lst=response.data[\"selectedTest\"];\n      //let RegistrationGetTest = getRemovedRecordAndAddNewRecord(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"], inputParam.inputData.RegistrationSample, \"ntransactionsamplecode\");\n      let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"check\"]);\n      masterData = { ...masterData,\n        RegistrationGetTest,\n        selectedTest: response.data[\"check\"],\n        RegistrationParameter: response.data.RegistrationParameter,\n        RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          [modalName]: false,\n          loading: false,\n          loadChildTest: false,\n          showSample: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getCountryList(inputParam) {\n  return dispatch => {\n    if (inputParam.selectedSample.every(checkCancelAndReject)) {\n      return toast.warn(intl.formatMessage({\n        id: \"IDS_CANNOTADDSOURCEFORCANCELREJECTSAMPLE\"\n      }));\n    }\n\n    const inputData = {\n      npreregno: inputParam.sample.npreregno,\n      userinfo: inputParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getCountryList\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sourceCountry: response.data,\n          selectedSourceData: [],\n          loadPoolSource: true,\n          openModal: true,\n          loading: false,\n          loadTest: false,\n          loadComponent: false,\n          loadSource: false,\n          loadFile: false,\n          loadPreregister: false,\n          showSaveContinue: false,\n          parentPopUpSize: 'lg',\n          operation: \"create\",\n          screenName: \"Source\",\n          insertSourcePreregno: inputParam.sample.npreregno,\n          ncontrolcode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(this.props.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function cancelSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSample\", inputParam.inputData).then(response => {\n      replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      }; // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         loading: false,\n      //         loadEsign: false,\n      //         openModal: false\n      //     }\n      // });\n\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function validateEsignforRegistration(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"registration\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"preregister\":\n        dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"editSample\":\n        dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\n        break;\n\n      case \"accept\":\n        dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"quarantine\":\n        dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelTest\":\n        dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"cancelSample\":\n        dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"addregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"deleteregsourcecountry\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      case \"printer\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function getPrinterComboService(inputParam) {\n  return dispatch => {\n    if (inputParam.sample.ntransactionstatus !== transactionStatus.PREREGISTER && inputParam.sample.ntransactionstatus !== transactionStatus.QUARANTINE && inputParam.sample.ntransactionstatus !== transactionStatus.CANCELLED && inputParam.sample.ntransactionstatus !== transactionStatus.REJECT) {\n      dispatch(initRequest(true));\n      rsapi.post(\"barcode/getPrinter\", inputParam.userInfo).then(response => {\n        let selectedPrinterData = {};\n        selectedPrinterData['sprintername'] = {\n          value: response.data[0].sprintername,\n          label: response.data[0].sprintername,\n          item: response.data[0]\n        };\n        const printerList = constructOptionList(response.data || [], \"sprintername\", \"sprintername\", undefined, undefined, true).get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            printer: printerList,\n            selectedPrinterData: selectedPrinterData,\n            loadPoolSource: false,\n            loadPrinter: true,\n            openModal: true,\n            loading: false,\n            loadTest: false,\n            loadComponent: false,\n            loadSource: false,\n            loadFile: false,\n            loadPreregister: false,\n            showSaveContinue: false,\n            parentPopUpSize: 'lg',\n            operation: \"print\",\n            screenName: \"PrintBarcode\",\n            insertPrinterPreregno: inputParam.sample.npreregno,\n            ncontrolcode: inputParam.ncontrolcode,\n            loadEsign: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTREGISTERSAMPLESTOPRINTBARCODE\"\n      }));\n    }\n  };\n}\nexport const getRegSpecification = (inputParam, masterData, getComponents) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n\n        if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n          inputParam.selectedRecord[\"nallottedspeccode\"] = \"\";\n          inputParam.selectedRecord[\"sversion\"] = \"\";\n          inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = -1;\n        } else {\n          inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? Specification[0] : \"\";\n          inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n          inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        } //Routine Start\n        // if (getComponents) {\n        //     let inputData = {\n        //         ntemplatemanipulationcode: Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1,\n        //         nallottedspeccode: Specification.length > 0 ? Specification[0].item.nallottedspeccode : -1,\n        //         testrequired: false,\n        //         userinfo: inputParam.userinfo\n        //     }\n        //     rsapi.post(\"/registration/getComponentTestBySpec\", inputData)\n        //         .then(componentResponse => {\n        //             Component = componentResponse.data.Component;\n        //             Test = componentResponse.data.Test;\n        //             let slno = Component.length > 0 ? Component[0].slno : -1;\n        //             selectedComponent = Component.length > 0 ? Component[0] : undefined\n        //             if (Object.keys(Test).length > 0) {\n        //                 SelectedTest = Test[slno];\n        //             }\n        //             dispatch({\n        //                 type: DEFAULT_RETURN,\n        //                 payload: {\n        //                     Component,\n        //                     Test,\n        //                     selectedComponent,\n        //                     SelectedTest,\n        //                 }\n        //             })\n        //         })\n        //         .catch(error => {\n        //             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n        //             if (error.response.status === 500) {\n        //                 toast.error(error.message);\n        //             } else {\n        //                 toast.warn(intl.formatMessage({ id: error.response.data }));\n        //             }\n        //         })\n        // }\n        //Routine End\n\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Component: [],\n            Test: [],\n            selectedComponent,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined,\n            SelectedSource: [],\n            Source: []\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function getTestByComponentChange(listData, selectedobject, LoginProps, nneedservice) {\n  return function (dispatch) {\n    if (Object.keys(selectedobject).length > 0) {\n      dispatch(initRequest(true));\n\n      if (nneedservice === false || nneedservice === undefined) {\n        //rsapi.post(\"/registration/getTestfromDB\", { \"Component\": objComponent })\n        rsapi.post(\"/registration/getTestfromDB\", {\n          nspecsampletypecode: selectedobject.nspecsampletypecode,\n          slno: selectedobject.slno\n        }).then(response => {\n          let TestData = response.data;\n          let Test = LoginProps.Test || [];\n          Test[selectedobject.slno] = TestData;\n          delete selectedobject.nneedservice;\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              Component: listData,\n              selectedComponent: selectedobject,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: TestData,\n              loading: false,\n              showSample: undefined\n            }\n          });\n        }).catch(error => {\n          toast.error(error.message);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n        });\n      } else {\n        // let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        Test[selectedobject.slno] = [];\n        delete selectedobject.nneedservice;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            Component: listData,\n            selectedComponent: selectedobject,\n            loadComponent: false,\n            openChildModal: false,\n            selectComponent: undefined,\n            parentPopUpSize: \"xl\",\n            Test,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    } else {\n      //toast.warn(\"select Component to Add Test\");\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function preRegAction(saveType, selectedRecord, comboComponent, userInfo, Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    comboComponent.map(item => {\n      selectedRecord[item.label] = {\n        value: selectedRecord[item.label].value,\n        label: selectedRecord[item.label].label\n      };\n    });\n    const inputParam = {\n      Registration: { ...selectedRecord\n      },\n      userInfo: userInfo,\n      ...Map\n    };\n    rsapi.post(\"/registration/createRegeistration\", {\n      inputParam\n    }).then(response => {\n      let TestData = response.data;\n      const masterData = { ...this.props.Login.masterData\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showSample: undefined,\n          openPortal: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getTreeByProduct\", Map).then(response => {\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes,\n        Manufacturer\n      } = [];\n      const selectedSpec = {};\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n      }\n\n      selectedRecord = { ...selectedRecord,\n        ...selectedSpec\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Test: [],\n          SelectedTest: [],\n          loading: false,\n          comboData,\n          ...inputParam,\n          selectedSpec\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getNewRegSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          value: Specification[0].value,\n          label: Specification[0].label,\n          item: Specification[0].item\n        } : \"\";\n        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Test: [],\n            selectedComponent,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function AddComponents(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\n      \"userinfo\": Map[\"userinfo\"]\n    });\n    const StorageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", {\n      \"userinfo\": Map[\"userinfo\"]\n    });\n\n    if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\n      const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\", {\n        \"userinfo\": Map[\"userinfo\"],\n        nmanufcode: Map[\"nmanufcode\"]\n      });\n      urlArray = [PlasmaMasterByManufCode];\n    }\n\n    urlArray = [ComponentTestBySpec, StorageConditionbySite, StorageLocationbySite, timezone, ...urlArray];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const StorageConditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\", \"sstorageconditionname\", undefined, undefined, true);\n      const StorageLocationMap = constructOptionList(response[2].data || [], \"nstoragelocationcode\", \"sstoragelocationname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true); // const StorageCondition = response[1].data;\n      // const StorageLocation = response[2].data;\n      // const timeZoneList = response[3].data;\n\n      let plasmaMasterFile = [];\n\n      if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\n        plasmaMasterFile = constructOptionList(response[4].data || [], \"nplasmafilecode\", \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\n      }\n\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const StorageCondition = StorageConditionMap.get(\"OptionList\");\n      const StorageLocation = StorageLocationMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\"); // const dreceiveddate = lstComponent[0].dreceiveddate || [];\n\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        //: new Date(dreceiveddate),\n        ntzdmanufdate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdmanufdate: Map[\"userinfo\"].stimezoneid,\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        nstorageconditioncode: StorageConditionMap.get(\"DefaultValue\"),\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate; //new Date(dreceiveddate);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          StorageCondition,\n          StorageLocation,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          plasmaMasterFile,\n          openPortal: true,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/RegistrationAction.js"],"names":["rsapi","Axios","toast","fillRecordBasedOnCheckBoxSelection","checkCancelAndReject","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","convertDateTimetoString","DEFAULT_RETURN","intl","initRequest","RegistrationSubType","RegistrationType","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","getTestChildTabDetail","constructOptionList","getSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","getRegTypeChange","getRegSubTypeChange","getRegistrationComboService","screenName","operation","primaryKeyName","userInfo","ncontrolCode","RealRegTypeValue","undefined","RealRegSubTypeValue","selectedProduct","ntransactionstatus","DRAFT","CORRECTION","urlArray","ProductCategoryService","Goodsin","EprotocolService","nregtypecode","NON_BATCH","ClientService","nregsubtypecode","ROUTINE","push","supplierService","containerTypeService","StorageConditionbySite","timezoneService","DispositionService","unitService","PriorityService","periodService","manufacturerService","all","selectedRecord","PopUpLabel","sregtypename","sregsubtypename","ProductCategory","get","EProtocol","Client","Supplier","ContainerType","StorageCondition","timezone","Disposition","Unit","Period","Priority","Manufacturer","ntzdreceivedate","stimezoneid","ntimezonecode","Product","Specification","AgaramTree","Component","Test","SelectedTest","selectedComponent","Source","SelectedSource","openModal","loadPreregister","loadTest","loadComponent","loadPoolSource","loadPrinter","loadFile","loadChildTest","parentPopUpSize","showSample","status","warn","formatMessage","id","getProductCategoryChange","ncategorybasedFlow","ActiveKey","FocusKey","OpenNodes","length","nallottedspeccode","sspecname","sversion","ntemplatemanipulationcode","nproductcode","sproductname","optionalUpdates","ProductMaholder","getReProductChange","LoginProps","getComponentTestBySpec","slno","Object","keys","popUptestDataState","skip","take","AddComponent","ComponentTestBySpec","StorageLocationbySite","PLASMA_POOL","PlasmaMasterByManufCode","nmanufcode","lstComponentMap","lstComponent","StorageConditionMap","StorageLocationMap","timeZoneListMap","plasmaMasterFile","StorageLocation","timeZoneList","dreceiveddate","sreceiveddate","selectComponent","ntzdmanufdate","stzdmanufdate","stzdreceivedate","nstorageconditioncode","scomments","CurrentTime","ChildscreenName","showSaveContinue","openChildModal","childoperation","getTestfromDB","objComponent","nflag","component","value","label","nspecsampletypecode","TestData","unshift","getTest","componentTest","TestCombined","EditComponent","TimeZoneField","nplasmafilecode","findIndex","x","scomponentname","ncomponentcode","nstoragelocationcode","sstoragelocationname","sstorageconditionname","insertRegistration","inputParam","inputData","RegistrationGetSample","selectedSample","RegistrationGetSubSample","RegistrationGetTest","selectedSubSample","selectedTest","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","postParamList","booleanFlag","getRegistrationsubSampleDetail","isServiceRequired","inputParamData","ntype","nsampletypecode","npreregno","napprovalconfigcode","activeTestTab","activeSampleTab","userinfo","activeName","dataStateName","oldSelectedTest","childTabsKey","checkBoxOperation","removeElementFromArray","selectedPreregno","RegistrationTestComment","RegistrationParameter","wholeTestList","map","b","ntransactiontestcode","forEach","test","index","includes","splice","keepOld","ResponseData","RegistrationTestComment1","resultResponseData","RegistrationParameter1","ntransactiontestcode1","ResponseData1","RegistrationTestComment2","ntransactionTestCode","testskip","testtake","bool","skipInfo","sampleGridDataState","sort","filter","sourceDataState","RegistrationSourceCountry","searchTestRef","current","attachmentskip","showFilter","TestSelected","isGrandChildGetRequired","toString","dataStateArray","arr","acceptRegistration","rtn","getRegistrationSample","searchSampleRef","searchSubSampleRef","selectedFilter","ReloadData","getManufacturerChange","maHolder","nproductmanufcode","getComponentSource","Country","componentSource","SourceCombined","loadSource","selectedSourceData","preregRecordToQuarantine","cancelTestAction","ImportFile","formData","ConfirmMessage","confirm","getEditRegistrationComboService","mastertoedit","goodsin","eprotocolService","selectedRegistration","editRegParam","storageConditionbySite","storageLocationbySite","UTCtimeZoneService","recordToEdit","currentTime","CANCELLED","REJECT","nproductcatcode","sproductcatname","neprotocolcode","seprotocolname","nrmsno","nclientcode","sclientname","smanufdate","splasmafilenumber","option","popUpLabel","nsuppliercode","ssuppliername","ncontainertypecode","scontainertype","ndisposition","sdispositionname","ntotalunitcode","sunitname","npriority","spriorityname","nperiodconfigcode","speriodname","smanufname","statustoEditDetail","regRecordToEdit","updateRegistration","regDateEditConfirmMessage","String","join","resultDataState","testCommentDataState","regEditParam","addMoreTest","sampleList","selectedsample","some","obj","slice","selectsubsample","selectedsubsample","findTransactionStatus","Set","CERTIFIED","SENT","findApprovalVersion","napprovalversioncode","findSampleSpec","findComponent","availableTest","props","createRegistrationTest","modalName","classUrl","methodUrl","getCountryList","every","sample","sourceCountry","insertSourcePreregno","ncontrolcode","cancelSampleAction","validateEsignforRegistration","toLowerCase","dispatchMethods","screenData","action","getPrinterComboService","PREREGISTER","QUARANTINE","selectedPrinterData","sprintername","printerList","printer","insertPrinterPreregno","getRegSpecification","getComponents","selectedNode","ntreetemplatemanipulationcode","activeKey","focusKey","primaryKey","getTestByComponentChange","listData","selectedobject","nneedservice","preRegAction","saveType","comboComponent","Registration","Login","openPortal","getTreeByProduct","comboData","selectedSpec","getNewRegSpecification","AddComponents"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA,OAAO,SAASG,8BAAT,CAAwCb,SAAxC,EAAmDc,iBAAnD,EAAsE;AACzE,SAAO,UAAUlL,QAAV,EAAoB;AACvB,QAAImL,cAAc,GAAG;AACjBrC,MAAAA,KAAK,EAAE,CADU;AAEjBsC,MAAAA,KAAK,EAAE,CAFU;AAGjBC,MAAAA,eAAe,EAAEjB,SAAS,CAACiB,eAHV;AAIjBtJ,MAAAA,YAAY,EAAEqI,SAAS,CAACrI,YAJP;AAKjBG,MAAAA,eAAe,EAAEkI,SAAS,CAAClI,eALV;AAMjBoJ,MAAAA,SAAS,EAAElB,SAAS,CAACkB,SANJ;AAOjB9J,MAAAA,kBAAkB,EAAE4I,SAAS,CAAC5I,kBAPb;AAQjB+J,MAAAA,mBAAmB,EAAEnB,SAAS,CAACmB,mBARd;AASjBC,MAAAA,aAAa,EAAEpB,SAAS,CAACoB,aATR;AAUjBC,MAAAA,eAAe,EAAErB,SAAS,CAACqB,eAVV;AAWjBC,MAAAA,QAAQ,EAAEtB,SAAS,CAACsB;AAXH,KAArB;AAaA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,aAAa,GAAG,EAApB;AACA5L,IAAAA,QAAQ,CAACb,WAAW,CAAC,IAAD,CAAZ,CAAR;;AACA,QAAI+L,iBAAJ,EAAuB;AACnB9M,MAAAA,KAA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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    fillRecordBasedOnCheckBoxSelection,checkCancelAndReject,\r\n    filterRecordBasedOnTwoArrays, getRecordBasedOnPrimaryKeyName, getSameRecordFromTwoArrays, replaceUpdatedObject, sortData, updatedObjectWithNewElement, rearrangeDateFormat, convertDateTimetoString\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\nimport { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                // const RegistrationSubType = response.data[\"RegistrationSubType\"];\r\n\r\n                //  console.log(response.data);\r\n                // RegistrationSubType.length > 0 ?\r\n                //     selectedRecord[\"nregsubtypecode\"] = {\r\n                //         \"value\": RegistrationSubType[0].nregsubtypecode,\r\n                //         \"label\": RegistrationSubType[0].sregsubtypename\r\n                //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\r\n                // const [labelname] = event.item;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationComboService(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if ((masterData.RealRegTypeValue !== undefined && masterData.RealRegSubTypeValue !== undefined && operation === \"create\") || (operation === \"update\" && (masterData.selectedProduct.ntransactionstatus === transactionStatus.DRAFT || masterData.selectedProduct.ntransactionstatus === transactionStatus.CORRECTION))) {\r\n            dispatch(initRequest(true));\r\n            let urlArray = [];\r\n            const ProductCategoryService = rsapi.post(\"/productcategory/getProductCategory\", {\r\n                \"userinfo\": userInfo\r\n            });\r\n\r\n            const Goodsin = rsapi.post(\"/registration/getGoodsinReceive\", {\r\n                \"userinfo\": userInfo\r\n            });\r\n            const EprotocolService = rsapi.post(\"/eprotocol/getEProtocol\", {\r\n                \"userinfo\": userInfo\r\n            });\r\n            if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH) {\r\n                const ClientService = rsapi.post(\"/client/getActiveClient\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n                urlArray = [ClientService]\r\n            }\r\n\r\n            //ROUTINE\r\n            if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n                const ClientService = rsapi.post(\"/client/getActiveClient\", { \"userinfo\": userInfo });\r\n                urlArray.push(ClientService)\r\n                const supplierService = rsapi.post(\"/supplier/getApprovedSupplier\", { \"userinfo\": userInfo });\r\n                urlArray.push(supplierService)\r\n                const containerTypeService = rsapi.post(\"/containertype/getContainerType\", { \"userinfo\": userInfo });\r\n                urlArray.push(containerTypeService)\r\n                const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", { \"userinfo\": userInfo });\r\n                urlArray.push(StorageConditionbySite);\r\n                const timezoneService = rsapi.post(\"timezone/getTimeZone\");\r\n                urlArray.push(timezoneService);\r\n                const DispositionService = rsapi.post(\"/registration/getDisposition\", { \"userinfo\": userInfo });\r\n                urlArray.push(DispositionService)\r\n                const unitService = rsapi.post(\"/unit/getUnit\", { \"userinfo\": userInfo });\r\n                urlArray.push(unitService)\r\n                const PriorityService = rsapi.post(\"/registration/getPriority\", { \"userinfo\": userInfo });\r\n                urlArray.push(PriorityService)\r\n                const periodService = rsapi.post(\"/registration/getPeriodConfig\", { \"userinfo\": userInfo });\r\n                urlArray.push(periodService)\r\n                const manufacturerService = rsapi.post(\"/manufacturer/getManufacturersCombo\", { \"userinfo\": userInfo });\r\n                urlArray.push(manufacturerService)\r\n            }\r\n            if (operation === \"create\") {\r\n                urlArray = [ProductCategoryService, Goodsin, EprotocolService, ...urlArray];\r\n            } else {\r\n            }\r\n\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = { \"ntransactionstatus\": 3 };\r\n                    let PopUpLabel = masterData.RealRegTypeValue.sregtypename + \"(\" + masterData.RealRegSubTypeValue.sregsubtypename + \" )\";\r\n                    const ProductCategory = constructOptionList(response[0].data || [], \"nproductcatcode\",\r\n                        \"sproductcatname\", undefined, undefined, true).get(\"OptionList\");\r\n                    const Goodsin = constructOptionList(response[1].data || [], \"nrmsno\",\r\n                        \"nrmsno\", \"nrmsno\", \"descending\", false).get(\"OptionList\");\r\n                    const EProtocol = constructOptionList(response[2].data || [], \"neprotocolcode\",\r\n                        \"seprotocolname\", undefined, undefined, true).get(\"OptionList\");\r\n                    let Client = masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH ?\r\n                        constructOptionList(response[3].data || [], \"nclientcode\",\r\n                            \"sclientname\", undefined, undefined, true).get(\"OptionList\") : [];\r\n                    let { Supplier, ContainerType, StorageCondition, timezone, Disposition, Unit, Period, Priority, Manufacturer } = []\r\n                    //ROUTINE\r\n                    if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                        Client = constructOptionList(response[3].data || [], \"nclientcode\",\r\n                            \"sclientname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Supplier = constructOptionList(response[4].data || [], \"nsuppliercode\",\r\n                            \"ssuppliername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        ContainerType = constructOptionList(response[5].data || [], \"ncontainertypecode\",\r\n                            \"scontainertype\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        StorageCondition = constructOptionList(response[6].data || [], \"nstorageconditioncode\",\r\n                            \"sstorageconditionname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        timezone = constructOptionList(response[7].data || [], \"ntimezonecode\",\r\n                            \"stimezoneid\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        let ntzdreceivedate = { \"label\": userInfo.stimezoneid, \"value\": userInfo.ntimezonecode };\r\n                        selectedRecord = { ...selectedRecord, ntzdreceivedate }\r\n\r\n                        Disposition = constructOptionList(response[8].data || [], \"ndispositioncode\",\r\n                            \"sdispositionname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Unit = constructOptionList(response[9].data || [], \"nunitcode\",\r\n                            \"sunitname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Priority = constructOptionList(response[10].data || [], \"nprioritycode\",\r\n                            \"spriorityname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Period = constructOptionList(response[11].data || [], \"nperiodcode\",\r\n                            \"speriodname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Manufacturer = constructOptionList(response[12].data || [], \"nmanufcode\",\r\n                            \"smanufname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ProductCategory,\r\n                            Goodsin,\r\n                            EProtocol,\r\n                            Client,\r\n                            Product: [],\r\n                            Specification: [],\r\n                            AgaramTree: [],\r\n                            Component: [],\r\n                            Test: [],\r\n                            SelectedTest: [],\r\n                            selectedComponent: [],\r\n                           // Sources: [],\r\n                            Source:[],\r\n                            SelectedSource: [],\r\n                            operation,\r\n                            screenName: PopUpLabel,\r\n                            PopUpLabel: PopUpLabel,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode,\r\n                            loadPreregister: true,\r\n                            loadTest: false,\r\n                            loadComponent: false,\r\n                            loadPoolSource: false,\r\n                            loadPrinter: false,\r\n                            loadFile: false,\r\n                            loadChildTest: false,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            Supplier, ContainerType, StorageCondition, timezone, Disposition, Unit, Period, Priority, Manufacturer\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            // const alertstatus=masterData.selectedProduct.stransdisplaystatus+\"CANNOTBEEEDITED\";\r\n            // toast.warn(masterData.selectedProduct.sproductname +\" : \" +this.props.formatMessage({id:alertstatus}));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getProductCategoryChange(Map, selectedRecord, masterData, ncategorybasedFlow) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getProductByProductCategory\", Map)\r\n            .then(response => {\r\n                selectedRecord[\"nproductcatcode\"]=Map[\"event\"]\r\n                let { Product, Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes, Manufacturer } = response.data;\r\n                if (ncategorybasedFlow === 3) {\r\n                    if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\";\r\n                        selectedRecord[\"sversion\"] = \"\";\r\n                        selectedRecord[\"ntemplatemanipulationcode\"] = -1;\r\n\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ?\r\n                            {\r\n                                \"value\": Specification[0].nallottedspeccode,\r\n                                \"label\": Specification[0].sspecname\r\n                            } : \"\";\r\n                        selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].sversion : \"\"\r\n                        selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].ntemplatemanipulationcode : -1;\r\n                    }\r\n\r\n                    selectedRecord[\"nproductcode\"] = Product.length > 0 ?\r\n                        {\r\n                            \"value\": Product[0].nproductcode,\r\n                            \"label\": Product[0].sproductname\r\n                        } : selectedRecord[\"nproductcode\"];\r\n\r\n                } else {\r\n                    selectedRecord[\"nallottedspeccode\"] = \"\";\r\n                    selectedRecord[\"sversion\"] = \"\";\r\n                    selectedRecord[\"nproductcode\"] = \"\";\r\n                }\r\n                selectedRecord[\"smanufname\"] = \"\";\r\n                selectedRecord[\"smahname\"] = \"\";\r\n                selectedRecord[\"smanufsitename\"] = \"\";\r\n                selectedRecord[\"nproductmahcode\"] = \"\";\r\n\r\n                Specification = constructOptionList(Specification || [], \"nallottedspeccode\",\r\n                    \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                Product = constructOptionList(Product || [], \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true).get(\"OptionList\");\r\n                let optionalUpdates = {};\r\n                //ROUTINE\r\n                if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                    optionalUpdates = {};\r\n\r\n                }else{\r\n                    optionalUpdates = {Manufacturer}\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Product, Specification, selectedRecord, AgaramTree, ActiveKey, FocusKey, OpenNodes, \r\n                        ...optionalUpdates,\r\n                        Component: [],\r\n                        Test: [],\r\n                        SelectedTest: [], \r\n                        ProductMaholder: [], loading: false\r\n                        ,SelectedSource:[],Source:[]\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                //console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReProductChange(Map, selectedRecord, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getManufacturespecByProduct\", Map)\r\n            .then(response => {\r\n                selectedRecord[\"nproductcode\"]=Map[\"event\"]\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes, Manufacturer } = LoginProps;\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    Manufacturer = response.data[\"Manufacturer\"];\r\n                    if (LoginProps.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\";\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        selectedRecord[\"ntemplatemanipulationcode\"] = -1\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? Specification[0]: \"\";\r\n                            // {\r\n                            //     \"value\": Specification[0].nallottedspeccode,\r\n                            //     \"label\": Specification[0].sspecname\r\n                            // } : \"\";\r\n                        selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                        selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                    }\r\n                    selectedRecord[\"nmanufcode\"] = \"\";\r\n                    selectedRecord[\"smanufname\"] = \"\";\r\n                    selectedRecord[\"smanufsitename\"] = \"\";\r\n                    selectedRecord[\"nproductmahcode\"] = \"\";\r\n                    selectedRecord[\"smahname\"] = \"\";\r\n\r\n                } else {\r\n                    Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedRecord[\"nmanufcode\"] = \"\";\r\n                    selectedRecord[\"smahname\"] = \"\";\r\n                    selectedRecord[\"smanufname\"] = \"\";\r\n                    selectedRecord[\"smanufsitename\"] = \"\";\r\n                    selectedRecord[\"nproductmahcode\"] = \"\";\r\n                }\r\n                let optionalUpdates = {};\r\n                //ROUTINE\r\n                if (LoginProps.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                    optionalUpdates = {};\r\n\r\n                }else{\r\n                    optionalUpdates = {Manufacturer}\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Specification, \r\n                        ...optionalUpdates,\r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Component: [],\r\n                        Test: [],\r\n                        ProductMaholder: [],\r\n                        SelectedTest: [], \r\n                        loading: false\r\n                        ,SelectedSource:[],Source:[]\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getComponentTestBySpec\", Map)\r\n            .then(response => {\r\n                const { Component, Test } = response.data;\r\n                let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                let selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n                let SelectedTest = [];\r\n                let SelectedSource = [];\r\n\r\n                if (Object.keys(Test).length > 0) {\r\n                    SelectedTest = Test[slno];\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectedComponent, loading: false, \r\n                        SelectedSource, selectedRecord, popUptestDataState:{skip:0, take:10},Source:[]\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function AddComponent(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n        const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\r\n            \"userinfo\": Map[\"userinfo\"]\r\n        });\r\n        const StorageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", {\r\n            \"userinfo\": Map[\"userinfo\"]\r\n        });\r\n        if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\r\n            const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\",\r\n                { \"userinfo\": Map[\"userinfo\"], nmanufcode: Map[\"nmanufcode\"] })\r\n            urlArray = [PlasmaMasterByManufCode]\r\n        }\r\n\r\n        urlArray = [ComponentTestBySpec, StorageConditionbySite, StorageLocationbySite, timezone, ...urlArray\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const StorageConditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\",\r\n                    \"sstorageconditionname\", undefined, undefined, true);\r\n                const StorageLocationMap = constructOptionList(response[2].data || [], \"nstoragelocationcode\",\r\n                    \"sstoragelocationname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n\r\n                // const StorageCondition = response[1].data;\r\n                // const StorageLocation = response[2].data;\r\n                // const timeZoneList = response[3].data;\r\n                let plasmaMasterFile = [];\r\n\r\n                if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\r\n                    plasmaMasterFile = constructOptionList(response[4].data || [], \"nplasmafilecode\",\r\n                        \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\r\n                }\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const StorageCondition = StorageConditionMap.get(\"OptionList\");\r\n                const StorageLocation = StorageLocationMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                // const dreceiveddate = lstComponent[0].dreceiveddate || [];\r\n\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,//: new Date(dreceiveddate),\r\n                    ntzdmanufdate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdmanufdate: Map[\"userinfo\"].stimezoneid,\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    nstorageconditioncode: StorageConditionMap.get(\"DefaultValue\"),\r\n                    scomments: \"\",\r\n                    nallottedspeccode:lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;//new Date(dreceiveddate);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, StorageCondition, StorageLocation, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent,\r\n                        parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false, plasmaMasterFile\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let component = { ...objComponent };\r\n        component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\r\n        component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\r\n        component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\r\n        component[\"slno\"] = LoginProps.Component? Object.keys(LoginProps.Component).length + 1: 0;\r\n        component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\r\n        component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\r\n        component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\r\n        component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\r\n        component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\r\n        component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\r\n        component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\r\n        component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\r\n        const dreceiveddate = objComponent[\"dreceiveddate\"];\r\n        component[\"dreceiveddate\"] = dreceiveddate;//formatInputDate(objComponent[\"dreceiveddate\"], false);\r\n        component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo);//formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\r\n        // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: component.nspecsampletypecode,\r\n            slno: component.slno\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                let slno = component.slno;\r\n                let SelectedTest = [];\r\n                let loadComponent = true;\r\n                let selectComponent = {};\r\n                let showSaveContinue = true;\r\n                let SelectedSource = [];\r\n                // let openChildModal = true;\r\n                let selectedComponent = undefined;\r\n                let parentPopUpSize = \"lg\"\r\n                // selectComponent = objComponent\r\n                if (nflag === 1) {\r\n                    loadComponent = true;\r\n                    objComponent[\"smanuflotno\"] = \"\";\r\n                    objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    selectComponent = objComponent;\r\n                } else {\r\n                    loadComponent = false;\r\n                    parentPopUpSize = \"xl\"\r\n                    // openChildModal = false;\r\n                    showSaveContinue = false;\r\n                    selectComponent = undefined\r\n                }\r\n                let Test = LoginProps.Test || [];\r\n                let Component = LoginProps.Component || [];\r\n                Component.unshift(component);\r\n                selectedComponent = component;\r\n                Test[slno] = response.data;\r\n                SelectedTest = TestData;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectComponent, selectedComponent,\r\n                        loadComponent, showSaveContinue, parentPopUpSize, loading: false, SelectedSource\r\n                    }\r\n                });\r\n                // console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                //   console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTest(objComponent, LoginProps) {\r\n    return function (dispatch) {\r\n\r\n        if (Object.keys(objComponent).length > 0) {\r\n            dispatch(initRequest(true));\r\n            //rsapi.post(\"/registration/getTestfromDB\", { \"Component\": objComponent })\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                    const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, loadTest: true, openChildModal: false, ChildscreenName: \"Test\",\r\n                            childoperation: \"create\", parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    //console.log(error);\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function EditComponent(Map, component, userInfo, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n\r\n        const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const StorageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", {\r\n            \"userinfo\": userInfo\r\n        });\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n        if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\r\n            const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\",\r\n                { \"userinfo\": Map[\"userinfo\"], nmanufcode: Map[\"nmanufcode\"] })\r\n            urlArray = [PlasmaMasterByManufCode]\r\n        }\r\n        urlArray = [ComponentTestBySpec, StorageConditionbySite, StorageLocationbySite, timezone, ...urlArray]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const StorageConditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\",\r\n                    \"sstorageconditionname\", undefined, undefined, true);\r\n                const StorageLocationMap = constructOptionList(response[2].data || [], \"nstoragelocationcode\",\r\n                    \"sstoragelocationname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const TimeZoneField = response[3].data;\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const StorageCondition = StorageConditionMap.get(\"OptionList\");\r\n                const StorageLocation = StorageLocationMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                let plasmaMasterFile = []\r\n                if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\r\n                    plasmaMasterFile = constructOptionList(response[4].data || [], \"nplasmafilecode\",\r\n                        \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\r\n                    if (plasmaMasterFile.length > 0) {\r\n                        component[\"nplasmafilecode\"] = component.nplasmafilecode && component.nplasmafilecode !== -1 ? {\r\n                            \"label\": plasmaMasterFile[plasmaMasterFile.findIndex(x => x.value === component.nplasmafilecode)].label,\r\n                            \"value\": plasmaMasterFile[plasmaMasterFile.findIndex(x => x.value === component.nplasmafilecode)].value\r\n                        } : \"\"\r\n                    }\r\n                }\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n                // component[\"nstoragelocationcode\"] = { label: component.sstoragelocationname, value: component.nstoragelocationcode }\r\n                // component[\"nstorageconditioncode\"] = { label: component.sstorageconditionname, value: component.nstorageconditioncode }\r\n\r\n                if (component.nstoragelocationcode !== -1){\r\n                    component[\"nstoragelocationcode\"] = { label: component.sstoragelocationname, value: component.nstoragelocationcode }\r\n                }\r\n                else{\r\n                    component[\"nstoragelocationcode\"] = undefined;\r\n                }\r\n                if (component.nstorageconditioncode !== -1){\r\n                    component[\"nstorageconditioncode\"] = { label: component.sstorageconditionname, value: component.nstorageconditioncode }\r\n                }\r\n                else{\r\n                    component[\"nstorageconditioncode\"] = undefined;\r\n                }\r\n\r\n                component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);//new Date(component[\"sreceiveddate\"])\r\n\r\n                let ntzdmanufdate = component.ntzdmanufdate;\r\n                if (component.ntzdmanufdate !== null && typeof component.ntzdmanufdate === \"object\") {\r\n                    ntzdmanufdate = component.ntzdmanufdate.value;\r\n                }\r\n                let ntzdreceivedate = component.ntzdreceivedate;\r\n                if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\r\n                    ntzdreceivedate = component.ntzdreceivedate.value;\r\n                }\r\n                component[\"ntzdmanufdate\"] = component.ntzdmanufdate && TimeZoneField.length > 0 ? { \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdmanufdate)].stimezoneid, \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdmanufdate)].ntimezonecode } : \"\" //findIndex(x => x.ntimezonecode === ntzdmanufdate)\r\n                component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? { \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid, \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode } : \"\"\r\n\r\n\r\n                // if(typeof Component.ntzdmanufdate)\r\n                // Component[\"ntzdmanufdate\"] = Component.ntzdmanufdate ? { \"label\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdmanufdate)].stimezoneid, \"value\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdmanufdate)].ntimezonecode } : \"\"\r\n                // Component[\"ntzdreceivedate\"] = Component.ntzdreceivedate ? { \"label\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdreceivedate)].stimezoneid, \"value\": timeZoneList[timeZoneList.findIndex(x => x.ntimezonecode === Component.ntzdreceivedate)].ntimezonecode } : \"\"\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true, childoperation: \"update\",\r\n                        lstComponent, StorageCondition, StorageLocation, ChildscreenName: \"Component\",\r\n                        openChildModal: false, selectComponent: component, parentPopUpSize: \"lg\",\r\n                        timeZoneList, plasmaMasterFile, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                //console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n\r\n        // return dispatch({\r\n        //     type: DEFAULT_RETURN,\r\n        //     payload: {\r\n\r\n        //     }\r\n        // })\r\n    }\r\n}\r\n\r\nexport function insertRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                let openModal = true;\r\n                if (response.data[\"rtn\"] === \"Success\") {\r\n                    let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n\r\n                    let selectedSample = response.data[\"selectedSample\"];\r\n                    let RegistrationGetSubSample = response.data[\"selectedSubSample\"];\r\n                    let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                    let selectedSubSample = RegistrationGetSubSample;\r\n                    RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                    let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n\r\n                    if (inputParam.multipleselectionFlag) {\r\n                        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                        RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                        RegistrationGetTest = masterData.RegistrationGetTest;\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData, ...response.data,\r\n                        selectedSample, selectedSubSample, selectedTest,\r\n                        RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                    }\r\n\r\n\r\n                    // sortData(masterData);\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         openModal: false, masterData, showConfirmAlert: false, selectedRecord: undefined\r\n                    //     }\r\n                    // });\r\n\r\n                    // sortData(masterData);\r\n                    // dispatch({\r\n                    //     type: DEFAULT_RETURN,\r\n                    //     payload: {\r\n                    //         openModal: false, masterData, showConfirmAlert: false, selectedRecord: undefined\r\n                    //     }\r\n                    // });\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        loadPreregister: false,\r\n                        showSample: undefined\r\n                    }\r\n                    inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                } \r\n                else if (response.data[\"rtn\"] && response.data[\"rtn\"] !== \"\") {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            booleanFlag: response.data[\"rtn\"],//.split(\",\").join(\"\\n\"), \r\n                            showConfirmAlert: true, masterData, openModal, loading: false\r\n                        }\r\n                    });\r\n                } \r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            showConfirmAlert: false, loading: false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\n// export function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n//     return function (dispatch) {\r\n//         let inputParamData = {\r\n//             nflag: 2,\r\n//             ntype: 2,\r\n//             nsampletypecode: inputData.nsampletypecode,\r\n//             nregtypecode: inputData.nregtypecode,\r\n//             nregsubtypecode: inputData.nregsubtypecode,\r\n//             npreregno: inputData.npreregno,\r\n//             ntransactionstatus: inputData.ntransactionstatus,\r\n//             napprovalconfigcode: inputData.napprovalconfigcode,\r\n//             activeTestTab: inputData.activeTestTab,\r\n//             activeSampleTab: inputData.activeSampleTab,\r\n//             userinfo: inputData.userinfo\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         if (isServiceRequired) {\r\n//             rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n//                 .then(response => {\r\n//                     sortData(response.data);\r\n//                     fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n//                     let wholeRegistrationTestComments = [];\r\n//                     let RegistrationTestComment = [];\r\n//                     if (inputData.checkBoxOperation === 1) {\r\n//                         RegistrationTestComment = getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,\r\n//                             inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n//                     } else if (inputData.checkBoxOperation === 5) {\r\n//                         let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n//                         let RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n//                         let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n//                         RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n//                         // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n//                     } else {\r\n//                         RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n//                     }\r\n//                     let { testskip, testtake } = inputData\r\n//                     let bool = false;\r\n//                     let skipInfo = {}\r\n//                     if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n//                         testskip = 0;\r\n//                         bool = true\r\n//                     }\r\n//                     if (bool) {\r\n//                         skipInfo = { testskip, testtake }\r\n//                     }\r\n//                     if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n//                         inputData.searchTestRef.current.value = \"\"\r\n//                         inputData.masterData['searchedTest'] = undefined\r\n//                     }\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData: {\r\n//                                 ...inputData.masterData,\r\n//                                 selectedSample: inputData.selectedSample,\r\n//                                 selectedPreregno: inputData.npreregno,\r\n//                                 selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n//                                 RegistrationTestComment,\r\n//                                 selectedSubSample: inputData.masterData.RegistrationGetSubSample, wholeRegistrationTestComments\r\n//                             },\r\n//                             loading: false,\r\n//                             showFilter: false,\r\n//                             activeSampleTab: inputData.activeSampleTab,\r\n//                             activeTestTab: inputData.activeTestTab,\r\n//                             skip: undefined,\r\n//                             take: undefined,\r\n//                             ...skipInfo,\r\n//                             showSample:undefined\r\n//                         }\r\n//                     })\r\n//                 })\r\n//                 .catch(error => {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     if (error.response.status === 500) {\r\n//                         toast.error(error.message);\r\n//                     }\r\n//                     else {\r\n//                         toast.warn(error.response.data);\r\n//                     }\r\n//                 })\r\n//         } else {\r\n//             let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n//             let isGrandChildGetRequired = false;\r\n//             if (TestSelected.length > 0) {\r\n//                 isGrandChildGetRequired = true;\r\n//             } else {\r\n//                 isGrandChildGetRequired = false;\r\n//             }\r\n//             fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n//             if (isGrandChildGetRequired) {\r\n//                 let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n//                 let selectedSample = inputData.selectedSample;\r\n//                 let selectedPreregno = inputData.npreregno;\r\n//                 let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n//                 let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n//                 let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n//                 inputData = {\r\n//                     ...inputData, childTabsKey: [\"RegistrationTestComment\"], ntransactiontestcode, masterData, selectedTest,\r\n//                     selectedSubSample, checkBoxOperation: 3\r\n//                 }\r\n//                 dispatch(getTestChildTabDetail(inputData, true));\r\n//             } else {\r\n//                 let RegistrationTestComment = getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,\r\n//                     inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\", \"ntransactiontestcode\")\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         masterData: {\r\n//                             ...inputData.masterData,\r\n//                             selectedSample: inputData.selectedSample,\r\n//                             selectedPreregno: inputData.npreregno,\r\n//                             selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n//                             RegistrationTestComment,\r\n//                             selectedSubSample: inputData.masterData.RegistrationGetSubSample\r\n//                         },\r\n//                         loading: false,\r\n//                         showFilter: false,\r\n//                         activeSampleTab: inputData.activeSampleTab,\r\n//                         activeTestTab: inputData.activeTestTab\r\n//                     }\r\n//                 })\r\n//             }\r\n\r\n//         }\r\n\r\n//     }\r\n// }\r\n\r\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nflag: 2,\r\n            ntype: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.selectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSample: inputData.selectedSample,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                        selectedSubSample: inputData.masterData.RegistrationGetSubSample, //wholeRegistrationTestComments\r\n                    }\r\n                    //let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationParameter = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n\r\n                        let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.forEach((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default :\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        \r\n                        \r\n\r\n                    } \r\n                    else if (inputData.checkBoxOperation === 5) {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if(inputData.masterData.RegistrationTestComment!==undefined){\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default :\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if(inputData.masterData.RegistrationTestComment!==undefined){\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    } \r\n                    else {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default :\r\n                                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    \r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                         && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState:{\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }else{\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState:{\r\n                                ...inputData.sampleGridDataState,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.sourceDataState && masterData.RegistrationSourceCountry\r\n                         && masterData.RegistrationSourceCountry.length <= inputData.sourceDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sourceDataState: {\r\n                                ...inputData.sourceDataState,\r\n                                skip: 0,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }else{\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sourceDataState: {\r\n                                ...inputData.sourceDataState,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let inputParam={attachmentskip:undefined}\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }else{\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSample = inputData.selectedSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.npreregno,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: inputData.masterData.RegistrationGetSubSample\r\n                }\r\n                let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    {activeName:'selectedSample', dataStateName:'sampleGridDataState'},\r\n                    {activeName:'RegistrationSourceCountry', dataStateName:'sourceDataState'},\r\n                    {activeName:'RegistrationTestComment', dataStateName:'testCommentDataState'},\r\n                    {activeName:'RegistrationParameter', dataStateName:'resultDataState'},\r\n                ]\r\n                dataStateArray.map(arr=>{\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] && \r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }else{\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function acceptRegistration(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\"\r\n                    || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                    || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\"|| response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                    // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    // let masterData = {\r\n                    //     ...LoginProps, ...response.data\r\n                    // }\r\n\r\n                    replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"RegistrationGetSample\"];\r\n                    delete response.data[\"RegistrationGetSubSample\"];\r\n                    delete response.data[\"RegistrationGetTest\"];\r\n                    let masterData = {\r\n                        ...LoginProps, ...response.data,\r\n                        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                        || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\"|| response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                        toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                //console.log(error);\r\n                toast.error(error.message);\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter){\r\n                    respObject = {selectedFilter : {...inputData.selectedFilter}};\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab:inputData.inputData.activeSampleTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    //masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // let selectedFilter = inputData.selectedFilter;\r\n                // selectedFilter[\"fromdate\"] = \"\";\r\n                // selectedFilter[\"todate\"] = \"\";\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        showSample: undefined,\r\n                        //selectedFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getManufacturerChange(selectedRecord, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\r\n            selectedRecord[\"nproductmahcode\"] = \"\";\r\n            selectedRecord[\"smahname\"] = \"\";\r\n            selectedRecord[\"nplasmafilecode\"] = undefined;\r\n            const maHolder = rsapi.post(\"registration/getMaholderByProduct\",\r\n                {\r\n                    nproductcode: selectedRecord.nproductcode.value,\r\n                    nproductmanufcode: selectedRecord.nproductmanufcode,\r\n                    userinfo: userInfo\r\n                });\r\n\r\n\r\n            const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\",\r\n                { \"userinfo\": userInfo, nmanufcode: selectedRecord.nmanufcode })\r\n\r\n            Axios.all([maHolder, PlasmaMasterByManufCode])\r\n                // rsapi.post(\"registration/getMaholderByProduct\", { nproductcode: selectedRecord.nproductcode.value, nproductmanufcode: selectedRecord.nproductmanufcode, userinfo: userInfo })\r\n                .then(response => {\r\n\r\n                    const plasmaMasterFile = constructOptionList(response[1].data || [], \"nplasmafilecode\",\r\n                        \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                    let ProductMaholder = response[0].data;\r\n                    //let plasmaMasterFile = response[1].data;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            ProductMaholder,\r\n                            plasmaMasterFile,\r\n                            selectedRecord,\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    selectedRecord, loading: false\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport function getComponentSource(objComponent, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        if (Object.keys(objComponent).length > 0) {\r\n            rsapi.post(\"/country/getBatchPoolCountry\", { \"userinfo\": LoginProps.userInfo })\r\n                .then(response => {\r\n                    let Country = response.data;\r\n                   // let Sources = LoginProps.Sources || [];\r\n                    let Source = LoginProps.Source || [];\r\n                    let componentSource = Source[objComponent.slno] ? Source[objComponent.slno] : [];\r\n                    let SourceCombined = [];\r\n                    if (componentSource.length > 0) {\r\n                        SourceCombined = filterRecordBasedOnTwoArrays(Country, componentSource, \"ncountrycode\");\r\n                    } else {\r\n                        SourceCombined = Country\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            SourceCombined, loadSource: true, ChildscreenName: \"Source\",selectedSourceData:[],\r\n                            childoperation: \"create\", parentPopUpSize: \"lg\", loading: false, showSample: undefined\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    // console.log(error);\r\n                    toast.error(error.message);\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            });\r\n            //toast.warn(\"select Component to Add Source\");\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDSOURCE\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelTestAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\r\n                    RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\"),\r\n\r\n                    RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         loading: false,\r\n                //         loadEsign: false,\r\n                //         openModal: false\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function ImportFile(formData, ConfirmMessage, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/importFile\", formData)\r\n            .then(response => {\r\n                let { Component, SelectedTest, Test, selectedComponent, SelectedSource, Source, selectedSourceData } = LoginProps;\r\n                if (response.data.rtn === \"Success\") {\r\n                    Component = response.data[\"Component\"];\r\n                    Test = response.data[\"Test\"];\r\n                    Source = response.data[\"Source\"];\r\n                    selectedComponent = Component[0];\r\n                    SelectedTest = Test[selectedComponent.slno];\r\n                    SelectedSource = Source[selectedComponent.slno];\r\n                    selectedSourceData = Source[selectedComponent.slno];\r\n                } else {\r\n                    const data = response.data.rtn;\r\n                    ConfirmMessage.confirm(\r\n                        intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                        intl.formatMessage({ id: \"IDS_WARNING\" }),\r\n                        data, undefined,\r\n                        intl.formatMessage({ id: \"IDS_OK\" }),\r\n                        undefined, true, undefined);\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loadFile: false, parentPopUpSize: \"xl\", Component, SelectedTest,\r\n                        Test, selectedComponent, loading: false,\r\n                        SelectedSource, Source, showSample: undefined,\r\n                        selectedSourceData\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport function getEditRegistrationComboService(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { masterData, userInfo, operation } = { ...inputParam };\r\n\r\n        const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const goodsin = rsapi.post(\"/registration/getGoodsinReceive\", { \"userinfo\": userInfo });\r\n        const eprotocolService = rsapi.post(\"/eprotocol/getEProtocol\", { \"userinfo\": userInfo });\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam, npreregno })\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n        const storageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", { \"userinfo\": userInfo });\r\n        const storageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", { \"userinfo\": userInfo });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo });\r\n\r\n        if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH) {\r\n            const ClientService = rsapi.post(\"/client/getActiveClient\", { \"userinfo\": userInfo });\r\n            urlArray = [ClientService]\r\n        }\r\n        if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n            const ClientService = rsapi.post(\"/client/getActiveClient\", { \"userinfo\": userInfo });\r\n            urlArray.push(ClientService)\r\n            const supplierService = rsapi.post(\"/supplier/getApprovedSupplier\", { \"userinfo\": userInfo });\r\n            urlArray.push(supplierService)\r\n            const containerTypeService = rsapi.post(\"/containertype/getContainerType\", { \"userinfo\": userInfo });\r\n            urlArray.push(containerTypeService)\r\n            const DispositionService = rsapi.post(\"/registration/getDisposition\", { \"userinfo\": userInfo });\r\n            urlArray.push(DispositionService)\r\n            const unitService = rsapi.post(\"/unit/getUnit\", { \"userinfo\": userInfo });\r\n            urlArray.push(unitService)\r\n            const PriorityService = rsapi.post(\"/registration/getPriority\", { \"userinfo\": userInfo });\r\n            urlArray.push(PriorityService)\r\n            const periodService = rsapi.post(\"/registration/getPeriodConfig\", { \"userinfo\": userInfo });\r\n            urlArray.push(periodService)\r\n            const manufacturerService = rsapi.post(\"/manufacturer/getManufacturersCombo\", { \"userinfo\": userInfo });\r\n            urlArray.push(manufacturerService)\r\n        }\r\n        urlArray = [goodsin, eprotocolService, selectedRegistration,\r\n            timezone, storageConditionbySite, storageLocationbySite,UTCtimeZoneService, ...urlArray]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n\r\n                const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                const currentTime = rearrangeDateFormat(userInfo, response[6].data);\r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n                else {\r\n\r\n                    selectedRecord[\"nproductcatcode\"] = { value: selectedRecord.nproductcatcode, label: selectedRecord.sproductcatname };\r\n                    selectedRecord[\"nproductcode\"] = { value: selectedRecord.nproductcode, label: selectedRecord.sproductname };\r\n\r\n                    selectedRecord[\"neprotocolcode\"] = { value: selectedRecord.neprotocolcode, label: selectedRecord.seprotocolname };\r\n                    selectedRecord[\"nrmsno\"] = { label: selectedRecord.nrmsno, value: selectedRecord.nrmsno };\r\n                    selectedRecord[\"nallottedspeccode\"] = { value: selectedRecord.nallottedspeccode, label: selectedRecord.sspecname };\r\n                    // selectedRecord[\"nstorageconditioncode\"] = { value: selectedRecord.nstorageconditioncode, label: selectedRecord.sstorageconditionname };\r\n                    selectedRecord[\"nclientcode\"] = { value: selectedRecord.nclientcode, label: selectedRecord.sclientname };\r\n\r\n                    selectedRecord[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, selectedRecord.sreceiveddate);//new Date(selectedRecord.sreceiveddate);\r\n                    recordToEdit[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"];\r\n                    if (selectedRecord.smanufdate && selectedRecord.smanufdate !== null) {\r\n                        selectedRecord[\"dmanufdate\"] = rearrangeDateFormat(userInfo, selectedRecord.smanufdate);//new Date(selectedRecord.smanufdate);\r\n                        recordToEdit[\"dmanufdate\"] = selectedRecord[\"dmanufdate\"];\r\n                   \r\n                    }\r\n                    //selectedRecord[\"nstoragelocationcode\"] = { value: selectedRecord.nstoragelocationcode, label: selectedRecord.sstoragelocationname };\r\n                    // selectedRecord[\"nplasmafilecode\"] = { value: selectedRecord.nplasmafilecode, label: selectedRecord.splasmafilenumber };\r\n\r\n                    if (selectedRecord[\"nstorageconditioncode\"] !== -1) {\r\n                        selectedRecord[\"nstorageconditioncode\"] = { value: selectedRecord.nstorageconditioncode, label: selectedRecord.sstorageconditionname };\r\n                    }\r\n                    if (selectedRecord[\"nstoragelocationcode\"] !== -1) {\r\n                        selectedRecord[\"nstoragelocationcode\"] = { value: selectedRecord.nstoragelocationcode, label: selectedRecord.sstoragelocationname };\r\n                    }\r\n                    if (selectedRecord[\"nplasmafilecode\"] !== -1) {\r\n                        selectedRecord[\"nplasmafilecode\"] = { value: selectedRecord.nplasmafilecode, label: selectedRecord.splasmafilenumber };\r\n\r\n                    }\r\n\r\n                    response[3].data.forEach((option) => {\r\n                        if (option.ntimezonecode === selectedRecord[\"ntzdreceivedate\"])\r\n                            selectedRecord[\"ntzdreceivedate\"] = {\r\n                                value: option.ntimezonecode,\r\n                                label: option.stimezoneid\r\n                            }\r\n\r\n                        if (option.ntimezonecode === selectedRecord[\"ntzdmanufdate\"])\r\n                            selectedRecord[\"ntzdmanufdate\"] = {\r\n                                value: option.ntimezonecode,\r\n                                label: option.stimezoneid\r\n                            }\r\n\r\n                    })\r\n                    selectedRecord[\"stzdreceivedate\"] = selectedRecord[\"ntzdreceivedate\"] ? selectedRecord[\"ntzdreceivedate\"].label : \"\";\r\n                    selectedRecord[\"stzdmanufdate\"] = selectedRecord[\"ntzdmanufdate\"] ? selectedRecord[\"ntzdmanufdate\"].label : \"\";\r\n\r\n\r\n                    const plasmaMasterFile = constructOptionList(response[2].data[\"PlasmaMasterFile\"] || [], \"nplasmafilecode\",\r\n                        \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\r\n                    let popUpLabel = masterData.RealRegTypeValue.sregtypename + \"(\" + masterData.RealRegSubTypeValue.sregsubtypename + \" )\";\r\n                    let { Client, Supplier, ContainerType, Disposition, Unit, Priority, Period } = []\r\n                    //ROUTINE\r\n                    let Manufacturer = response[2].data[\"Manufacturer\"] || [];\r\n                    if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH) {\r\n                        Client = constructOptionList(response[7].data || [], \"nclientcode\",\r\n                            \"sclientname\", undefined, undefined, true).get(\"OptionList\")\r\n                    }\r\n                    if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                        Client = constructOptionList(response[7].data || [], \"nclientcode\",\r\n                            \"sclientname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Supplier = constructOptionList(response[8].data || [], \"nsuppliercode\",\r\n                            \"ssuppliername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        ContainerType = constructOptionList(response[9].data || [], \"ncontainertypecode\",\r\n                            \"scontainertype\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Disposition = constructOptionList(response[10].data || [], \"ndispositioncode\",\r\n                            \"sdispositionname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Unit = constructOptionList(response[11].data || [], \"nunitcode\",\r\n                            \"sunitname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Priority = constructOptionList(response[12].data || [], \"nprioritycode\",\r\n                            \"spriorityname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Period = constructOptionList(response[13].data || [], \"nperiodcode\",\r\n                            \"speriodname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        Manufacturer = constructOptionList(response[14].data || [] || [], \"nmanufcode\",\r\n                            \"smanufname\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                        if (selectedRecord[\"nclientcode\"] !== -1 && selectedRecord.nclientcode.value === undefined) {\r\n                            selectedRecord[\"nclientcode\"] = { value: selectedRecord.nclientcode, label: selectedRecord.sclientname };\r\n                        }\r\n                        if (selectedRecord[\"nsuppliercode\"] !== -1) {\r\n                            selectedRecord[\"nsuppliercode\"] = { value: selectedRecord.nsuppliercode, label: selectedRecord.ssuppliername };\r\n                        }\r\n                        if (selectedRecord[\"ncontainertypecode\"] !== -1) {\r\n                            selectedRecord[\"ncontainertypecode\"] = { value: selectedRecord.ncontainertypecode, label: selectedRecord.scontainertype };\r\n                        }\r\n                        if (selectedRecord[\"ndisposition\"] !== -1) {\r\n                            selectedRecord[\"ndisposition\"] = { value: selectedRecord.ndisposition, label: selectedRecord.sdispositionname };\r\n                        }\r\n                        if (selectedRecord[\"ntotalunitcode\"] !== -1) {\r\n                            selectedRecord[\"ntotalunitcode\"] = { value: selectedRecord.ntotalunitcode, label: selectedRecord.sunitname };\r\n                        }\r\n                        if (selectedRecord[\"npriority\"] !== -1) {\r\n                            selectedRecord[\"npriority\"] = { value: selectedRecord.npriority, label: selectedRecord.spriorityname };\r\n                        }\r\n                        if (selectedRecord[\"nperiodconfigcode\"] !== -1) {\r\n                            selectedRecord[\"nperiodconfigcode\"] = { value: selectedRecord.nperiodconfigcode, label: selectedRecord.speriodname };\r\n                        }\r\n                        if (selectedRecord[\"nmanufcode\"] !== -1) {\r\n                            selectedRecord[\"nmanufcode\"] = { value: selectedRecord.nmanufcode, label: selectedRecord.smanufname };\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ProductCategory: [],\r\n                            Goodsin: constructOptionList(response[0].data || [], \"nrmsno\", \"nrmsno\", undefined, undefined, true).get(\"OptionList\"),\r\n                            EProtocol: constructOptionList(response[1].data || [], \"neprotocolcode\", \"seprotocolname\", undefined, undefined, true).get(\"OptionList\"),\r\n                            Client, Supplier, ContainerType, Disposition, Unit, Priority, Period,\r\n                            AgaramTree: response[2].data[\"AgaramTree\"],\r\n                            FocusKey: response[2].data[\"FocusKey\"],\r\n                            ActiveKey: response[2].data[\"ActiveKey\"],\r\n                            OpenNodes: response[2].data[\"OpenNodes\"],\r\n                            Manufacturer,\r\n                            plasmaMasterFile,\r\n                            //plasmaMasterFile: response[2].data[\"PlasmaMasterFile\"] || [],\r\n                            ProductMaholder: response[2].data[\"ProductMAHolder\"] || [],\r\n                            statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\r\n                            timeZoneList: constructOptionList(response[3].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true).get(\"OptionList\"),\r\n                            StorageCondition: constructOptionList(response[4].data || [], \"nstorageconditioncode\", \"sstorageconditionname\", undefined, undefined, true).get(\"OptionList\"),\r\n                            StorageLocation: constructOptionList(response[5].data || [], \"nstoragelocationcode\", \"sstoragelocationname\", undefined, undefined, true).get(\"OptionList\"),\r\n                            currentTime,\r\n                            operation,\r\n                            screenName: popUpLabel,\r\n                            PopUpLabel: popUpLabel,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.editRegParam.ncontrolCode,\r\n                            loadPreregister: true,\r\n                            loadTest: false,\r\n                            loadComponent: false,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n        //} else {\r\n        // const alertstatus=masterData.selectedProduct.stransdisplaystatus+\"CANNOTBEEEDITED\";\r\n        // toast.warn(masterData.selectedProduct.sproductname +\" : \" +this.props.formatMessage({id:alertstatus}));\r\n        //}\r\n    }\r\n}\r\n\r\nexport function updateRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"selectedSample\"], masterData.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest: RegistrationGetTest.length>0?[RegistrationGetTest[0]]:[],\r\n                    RegistrationGetTest\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadPreregister: false, selectedRecord: undefined, showSample: undefined\r\n                    }\r\n                });\r\n                let inputData = {\r\n                    masterData,\r\n                    selectedTest: masterData.selectedTest,\r\n                    ntransactiontestcode: masterData.selectedTest ?\r\n                        String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: masterData.selectedSample ?\r\n                        masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: inputParam.inputData.userinfo,\r\n                    activeTestTab : masterData.activeTestTab,\r\n                    screenName: masterData.activeTestTab,\r\n                    resultDataState: inputParam.resultDataState,\r\n                    testCommentDataState: inputParam.testCommentDataState,\r\n                }\r\n                dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign:false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n       value = inputParam.selectedsample.some(obj=> obj.nspecsampletypecode !== inputParam.selectedsample[0].nspecsampletypecode)\r\n       if(value)\r\n       {\r\n          return toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n       }\r\n        sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n        const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsample, \"npreregno\");\r\n        const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\r\n        if (selectedsample && selectedsample.length > 0) {\r\n            const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n           \r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                   if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\r\n                        const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                        if (findApprovalVersion.length === 1) {\r\n                            const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                            const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                            if (findSampleSpec.length === 1 && findComponent.length === 1) {\r\n                                dispatch(initRequest(true));\r\n                                rsapi.post(\"/registration/getMoreTest\", { ...inputParam })\r\n                                    .then(response => {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                availableTest: response.data,\r\n                                                loadChildTest: true,\r\n                                                loading: false, ncontrolCode,\r\n                                                screenName: \"IDS_TEST\",\r\n                                                operation: \"create\",\r\n                                                openModal: true,\r\n                                                parentPopUpSize: \"lg\",\r\n                                                selectedRecord: {},\r\n                                                showSample: undefined\r\n                                            }\r\n                                        });\r\n                                    })\r\n                                    .catch(error => {\r\n                                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                        if (error.response.status === 500) {\r\n                                            toast.error(error.message);\r\n                                        } else {\r\n                                            toast.warn(this.props.formatMessage({ id: error.response.data }));\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                            }\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                        }\r\n                    }\r\n                    else{\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\" }));\r\n                    }\r\n                }\r\n                  else {\r\n                ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                      toast.warn(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                }\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }\r\n      \r\n}  \r\n\r\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n\r\n                // inputParam.responseKeyList.forEach(item => {\r\n                //     if (item.dataAction === \"add\") {\r\n                //         updatedObjectWithNewElement(masterData[item.masterDataKey], response.data[item.responseKey]);\r\n                //     } else if (item.dataAction === \"update\") {\r\n                //         replaceUpdatedObject(response.data[item.responseKey], masterData[item.masterDataKey], item.primaryKey);\r\n                //     }\r\n                // });\r\n\r\n                // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n\r\n                // let selectedSample = response.data[\"selectedSample\"];\r\n                // let RegistrationGetSubSample = response.data[\"selectedSubSample\"];\r\n                // let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                // let selectedSubSample = RegistrationGetSubSample;\r\n                // let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n\r\n                // if (inputParam.multipleselectionFlag) {\r\n                //     selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                //     updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                //     updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                //     RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                //     RegistrationGetTest = masterData.RegistrationGetTest;\r\n                // }\r\n                //   let lst=response.data[\"selectedTest\"];\r\n\r\n\r\n                //let RegistrationGetTest = getRemovedRecordAndAddNewRecord(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"], inputParam.inputData.RegistrationSample, \"ntransactionsamplecode\");\r\n                let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"],response.data[\"check\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationGetTest,\r\n                    selectedTest: response.data[\"check\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        [modalName]: false,\r\n                        loading: false,\r\n                        loadChildTest: false,\r\n                        showSample: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getCountryList(inputParam) {\r\n    return (dispatch) => {\r\n         if (inputParam.selectedSample.every(checkCancelAndReject)) {\r\n            return  toast.warn(intl.formatMessage({ id: \"IDS_CANNOTADDSOURCEFORCANCELREJECTSAMPLE\" })); \r\n        }\r\n        const inputData = {\r\n            npreregno: inputParam.sample.npreregno,\r\n            userinfo: inputParam.userInfo\r\n        }\r\n        dispatch(initRequest(true))\r\n        rsapi.post(\"registration/getCountryList\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        sourceCountry: response.data,\r\n                        selectedSourceData: [],\r\n                        loadPoolSource: true,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadTest: false,\r\n                        loadComponent: false,\r\n                        loadSource: false,\r\n                        loadFile: false,\r\n                        loadPreregister: false,\r\n                        showSaveContinue: false,\r\n                        parentPopUpSize: 'lg',\r\n                        operation: \"create\",\r\n                        screenName: \"Source\",\r\n                        insertSourcePreregno: inputParam.sample.npreregno,\r\n                        ncontrolcode: inputParam.ncontrolcode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(this.props.formatMessage({ id: error.response.data }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function cancelSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSample\", inputParam.inputData)\r\n            .then(response => {\r\n                replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         loading: false,\r\n                //         loadEsign: false,\r\n                //         openModal: false\r\n                //     }\r\n                // });\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignforRegistration(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"registration\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"preregister\":\r\n                dispatch(insertRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"editSample\":\r\n                dispatch(updateRegistration(screenData.inputParam, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"accept\":\r\n                dispatch(acceptRegistration(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"quarantine\":\r\n                dispatch(preregRecordToQuarantine(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelTest\":\r\n                dispatch(cancelTestAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"cancelSample\":\r\n                dispatch(cancelSampleAction(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"addregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"deleteregsourcecountry\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            case \"printer\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"openModal\"))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function getPrinterComboService(inputParam) {\r\n    return (dispatch) => {\r\n        if (inputParam.sample.ntransactionstatus !== transactionStatus.PREREGISTER && inputParam.sample.ntransactionstatus !== transactionStatus.QUARANTINE\r\n            && inputParam.sample.ntransactionstatus !== transactionStatus.CANCELLED && inputParam.sample.ntransactionstatus !== transactionStatus.REJECT) {\r\n            dispatch(initRequest(true))\r\n            rsapi.post(\"barcode/getPrinter\", inputParam.userInfo)\r\n                .then(response => {\r\n                    let selectedPrinterData = {}\r\n                    selectedPrinterData['sprintername'] = { value: response.data[0].sprintername, label: response.data[0].sprintername, item: response.data[0] }\r\n                    const printerList = constructOptionList(response.data || [], \"sprintername\",\r\n                        \"sprintername\", undefined, undefined, true).get(\"OptionList\");\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            printer: printerList,\r\n                            selectedPrinterData: selectedPrinterData,\r\n                            loadPoolSource: false,\r\n                            loadPrinter: true,\r\n                            openModal: true,\r\n                            loading: false,\r\n                            loadTest: false,\r\n                            loadComponent: false,\r\n                            loadSource: false,\r\n                            loadFile: false,\r\n                            loadPreregister: false,\r\n                            showSaveContinue: false,\r\n                            parentPopUpSize: 'lg',\r\n                            operation: \"print\",\r\n                            screenName: \"PrintBarcode\",\r\n                            insertPrinterPreregno: inputParam.sample.npreregno,\r\n                            ncontrolcode: inputParam.ncontrolcode,\r\n                            loadEsign: false,\r\n                            showSample: undefined\r\n\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTREGISTERSAMPLESTOPRINTBARCODE\" }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const getRegSpecification = (inputParam, masterData, getComponents) => {\r\n    return (dispatch) => {\r\n\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                    if (masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                        inputParam.selectedRecord[\"nallottedspeccode\"] = \"\";\r\n                        inputParam.selectedRecord[\"sversion\"] = \"\"\r\n                        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = -1\r\n\r\n                    } else {\r\n\r\n                        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? Specification[0] : \"\";\r\n                        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n\r\n                    }\r\n\r\n\r\n\r\n                    //Routine Start\r\n                    // if (getComponents) {\r\n                    //     let inputData = {\r\n                    //         ntemplatemanipulationcode: Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1,\r\n                    //         nallottedspeccode: Specification.length > 0 ? Specification[0].item.nallottedspeccode : -1,\r\n                    //         testrequired: false,\r\n                    //         userinfo: inputParam.userinfo\r\n                    //     }\r\n                    //     rsapi.post(\"/registration/getComponentTestBySpec\", inputData)\r\n                    //         .then(componentResponse => {\r\n                    //             Component = componentResponse.data.Component;\r\n                    //             Test = componentResponse.data.Test;\r\n                    //             let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                    //             selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n\r\n                    //             if (Object.keys(Test).length > 0) {\r\n                    //                 SelectedTest = Test[slno];\r\n                    //             }\r\n                    //             dispatch({\r\n                    //                 type: DEFAULT_RETURN,\r\n                    //                 payload: {\r\n                    //                     Component,\r\n                    //                     Test,\r\n                    //                     selectedComponent,\r\n                    //                     SelectedTest,\r\n                    //                 }\r\n                    //             })\r\n                    //         })\r\n                    //         .catch(error => {\r\n                    //             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    //             if (error.response.status === 500) {\r\n                    //                 toast.error(error.message);\r\n                    //             } else {\r\n                    //                 toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    //             }\r\n                    //         })\r\n                    // }\r\n                    //Routine End\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Component:[],\r\n                            Test:[],\r\n                            selectedComponent,\r\n                            SelectedTest:[],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                            ,SelectedSource:[],Source:[]\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestByComponentChange(listData, selectedobject, LoginProps,nneedservice) {\r\n    return function (dispatch) {\r\n\r\n        if (Object.keys(selectedobject).length > 0) {\r\n            dispatch(initRequest(true));\r\n            if(nneedservice===false||nneedservice===undefined){\r\n            //rsapi.post(\"/registration/getTestfromDB\", { \"Component\": objComponent })\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n                slno: selectedobject.slno\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    Test[selectedobject.slno] = TestData;\r\n                    delete selectedobject.nneedservice\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            Component: listData, selectedComponent: selectedobject, loadComponent: false, openChildModal: false,\r\n                            selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: TestData, loading: false, showSample: undefined\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n            }else{\r\n               // let TestData = response.data;\r\n                let Test = LoginProps.Test || [];\r\n                Test[selectedobject.slno] =[];\r\n                delete selectedobject.nneedservice\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component: listData, selectedComponent: selectedobject, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: [], loading: false, showSample: undefined\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            //toast.warn(\"select Component to Add Test\");\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport function preRegAction(saveType,selectedRecord,comboComponent,userInfo,Map) {\r\n    return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            comboComponent.map(item=>{\r\n                selectedRecord[item.label]={value:selectedRecord[item.label].value,label:selectedRecord[item.label].label}\r\n            })\r\n            const inputParam={\r\n                Registration:{...selectedRecord},\r\n                userInfo:userInfo,\r\n                ...Map\r\n            }\r\n\r\n            rsapi.post(\"/registration/createRegeistration\", {\r\n                inputParam\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    const masterData={...this.props.Login.masterData}\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            openPortal:false,\r\n                            openModal:false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n           \r\n      \r\n    }\r\n}\r\nexport function getTreeByProduct(Map, selectedRecord,comboData,inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getTreeByProduct\", Map)\r\n            .then(response => {\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes, Manufacturer } = [];\r\n                const selectedSpec={}\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                            \"value\": Specification[0].value,\r\n                             \"label\": Specification[0].label\r\n                         }: \"\";\r\n                             \r\n                         selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                         selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                } \r\n               selectedRecord={...selectedRecord,...selectedSpec}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Specification, \r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Test: [],\r\n                        SelectedTest: [], \r\n                        loading: false,\r\n                        comboData,\r\n                        ...inputParam,\r\n                        selectedSpec\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getNewRegSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ?{value:Specification[0].value,label:Specification[0].label,item:Specification[0].item}  : \"\";\r\n                        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Test:[],\r\n                            selectedComponent,\r\n                            SelectedTest:[],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function AddComponents(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n        const StorageConditionbySite = rsapi.post(\"/storagecondition/getStorageCondition\", {\r\n            \"userinfo\": Map[\"userinfo\"]\r\n        });\r\n        const StorageLocationbySite = rsapi.post(\"/storagelocation/getStorageLocation\", {\r\n            \"userinfo\": Map[\"userinfo\"]\r\n        });\r\n        if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\r\n            const PlasmaMasterByManufCode = rsapi.post(\"/plasmamasterfile/getPlasmaMasterFileByManufcode\",\r\n                { \"userinfo\": Map[\"userinfo\"], nmanufcode: Map[\"nmanufcode\"] })\r\n            urlArray = [PlasmaMasterByManufCode]\r\n        }\r\n\r\n        urlArray = [ComponentTestBySpec, StorageConditionbySite, StorageLocationbySite, timezone, ...urlArray\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const StorageConditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\",\r\n                    \"sstorageconditionname\", undefined, undefined, true);\r\n                const StorageLocationMap = constructOptionList(response[2].data || [], \"nstoragelocationcode\",\r\n                    \"sstoragelocationname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[3].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n\r\n                // const StorageCondition = response[1].data;\r\n                // const StorageLocation = response[2].data;\r\n                // const timeZoneList = response[3].data;\r\n                let plasmaMasterFile = [];\r\n\r\n                if (Map[\"nregtypecode\"] === RegistrationType.PLASMA_POOL) {\r\n                    plasmaMasterFile = constructOptionList(response[4].data || [], \"nplasmafilecode\",\r\n                        \"splasmafilenumber\", undefined, undefined, true).get(\"OptionList\");\r\n                }\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const StorageCondition = StorageConditionMap.get(\"OptionList\");\r\n                const StorageLocation = StorageLocationMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                // const dreceiveddate = lstComponent[0].dreceiveddate || [];\r\n\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,//: new Date(dreceiveddate),\r\n                    ntzdmanufdate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdmanufdate: Map[\"userinfo\"].stimezoneid,\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    nstorageconditioncode: StorageConditionMap.get(\"DefaultValue\"),\r\n                    scomments: \"\",\r\n                    nallottedspeccode:lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;//new Date(dreceiveddate);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, StorageCondition, StorageLocation, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent,\r\n                        parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false, \r\n                        plasmaMasterFile,openPortal:true,openModal:false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}