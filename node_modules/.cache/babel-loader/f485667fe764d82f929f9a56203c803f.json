{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testmanagement\\\\Method.jsx\";\nimport React, { Component } from 'react';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport rsapi from '../../rsapi';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component'; // import {\n//     callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\n//     addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,\n//     changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById\n// } from '../../actions'\n\nimport { callService, crudMaster, getMethodComboService, getMethodDetail, getAvailableValidityData, fetchMethodValidityById, getMethodValidityUTCDate, updateStore, validateEsignCredential, filterColumnData } from '../../actions';\nimport MethodValidityView from './MethodValidityView';\nimport { injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify'; //import AddParameter from './AddParameter'\n//import AddTest from '../../pages/testmanagement/AddTest'\n\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, constructOptionList, convertDateValuetoString } from '../../components/CommonScript'; //import TestCategoryFilter from './TestCategoryFilter';\n\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\nimport 'react-perfect-scrollbar/dist/css/styles.css'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport AddMethod from './AddMethod';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite'; //import ReactTooltip from 'react-tooltip';\n\nimport { removeItems } from '@progress/kendo-react-treelist';\n\nclass Method extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSaveClick = (saveType, formRef) => {\n      // if (this.state.selectedRecord[\"dvalidityenddate\"] !== undefined && this.state.selectedRecord[\"dvaliditystartdate\"] !== undefined) {\n      //     if (this.state.selectedRecord[\"dvalidityenddate\"] < this.state.selectedRecord[\"dvaliditystartdate\"]) {\n      //         toast.info(this.props.intl.formatMessage({ id: \"IDS_ENDDATEGRATERTHANSTARTDATE\" }));\n      //         return;\n      //     }\n      // }\n      //add / edit            \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n      inputData[\"method\"] = {};\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        delete this.state.selectedRecord[\"dcurrentdate\"];\n        dataState = this.state.dataState; //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n        selectedId = this.props.Login.selectedRecord.nmethodcode;\n        inputData[\"method\"][\"nmethodcode\"] = this.props.Login.selectedRecord.nmethodcode;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n      }\n\n      inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] !== undefined && this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\n      inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"] ? this.state.selectedRecord[\"nmethodcatcode\"].value : \"\";\n      inputData[\"method\"][\"smethodname\"] = this.state.selectedRecord[\"smethodname\"] ? this.state.selectedRecord[\"smethodname\"] : \"\";\n      inputData[\"method\"][\"nneedvalidity\"] = this.state.selectedRecord[\"nneedvalidity\"] !== undefined && this.state.selectedRecord[\"nneedvalidity\"] ? this.state.selectedRecord[\"nneedvalidity\"] : transactionStatus.NO;\n      inputData[\"method\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      inputData[\"methodvalidity\"] = {};\n\n      if (this.state.selectedRecord[\"nneedvalidity\"] === 3) {\n        let obj = convertDateValuetoString(this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"] : new Date(), this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date(), this.props.Login.userInfo);\n        this.state.selectedRecord[\"svaliditystartdate\"] = obj.fromDate;\n        this.state.selectedRecord[\"svalidityenddate\"] = obj.toDate;\n        inputData[\"methodvalidity\"][\"dvaliditystartdate\"] = this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"] : new Date();\n        inputData[\"methodvalidity\"][\"dvalidityenddate\"] = this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date();\n        inputData[\"methodvalidity\"][\"svaliditystartdate\"] = this.state.selectedRecord[\"svaliditystartdate\"] ? this.state.selectedRecord[\"svaliditystartdate\"] : new Date();\n        inputData[\"methodvalidity\"][\"svalidityenddate\"] = this.state.selectedRecord[\"svalidityenddate\"] ? this.state.selectedRecord[\"svalidityenddate\"] : new Date();\n        inputData[\"methodvalidity\"][\"ntzvaliditystartdatetimezone\"] = this.state.selectedRecord[\"ntzvaliditystartdatetimezone\"] ? this.state.selectedRecord[\"ntzvaliditystartdatetimezone\"].value || this.props.Login.userInfo.ntimezonecode : this.props.Login.userInfo.ntimezonecode;\n        inputData[\"methodvalidity\"][\"ntzvalidityenddatetimezone\"] = this.state.selectedRecord[\"ntzvalidityenddatetimezone\"] ? this.state.selectedRecord[\"ntzvalidityenddatetimezone\"].value || this.props.Login.userInfo.ntimezonecode : this.props.Login.userInfo.ntimezonecode;\n      }\n\n      let postParam = undefined;\n      postParam = {\n        inputListName: \"Method\",\n        selectedObject: \"SelectedMethod\",\n        primaryKeyField: \"nmethodcode\",\n        primaryKeyValue: this.props.Login.selectedRecord.nmethodcode,\n        fetchUrl: \"method/getActiveMethodById\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        },\n        masterData: this.props.Login.masterData\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Method\",\n        //this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.screenName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.screenName && this.props.intl.formatMessage({\n              id: this.props.Login.screenName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.ConfirmDelete = (deleteParam, deleteID) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(deleteParam, deleteID));\n    };\n\n    this.deleteRecord = (deleteParam, nControlcode) => {\n      const postParam = {\n        inputListName: \"Method\",\n        selectedObject: \"SelectedMethod\",\n        primaryKeyField: \"nmethodcode\",\n        primaryKeyValue: this.props.Login.masterData.SelectedMethod.nmethodcode,\n        fetchUrl: \"method/getMethod\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Method\",\n        //this.props.Login.inputParam.methodUrl,                        \n        displayName: this.props.Login.screenName,\n        inputData: {\n          [\"method\"]: this.props.Login.masterData.SelectedMethod,\n          //deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        postParam\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, nControlcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.screenName && this.props.intl.formatMessage({\n              id: this.props.Login.screenName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue, sdatename) => {\n      const {\n        selectedRecord\n      } = this.state; // if(dateName === \"dvaliditystartdate\")\n      // {\n      //    selectedRecord[\"dvalidityenddate\"] = dateValue;  \n      // }\n\n      selectedRecord[dateName] = dateValue;\n      selectedRecord[sdatename] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = transactionStatus.NO;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"Method\",\n        //this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25\n    };\n    this.searchRef = React.createRef(); // this.searchFieldList = [\"smethodname\", \"sdescription\",  \"smethodcategoryname\", \"stransactionstatus\"];\n\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    //     const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\n    //     && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    //    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\n    //     && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addId = this.state.controlMap.has(\"AddMethod\") && this.state.controlMap.get(\"AddMethod\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditMethod\") && this.state.controlMap.get(\"EditMethod\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteMethod\") && this.state.controlMap.get(\"DeleteMethod\").ncontrolcode; // const addParam = {screenName:\"Method\", primaryeyField: \"nmethodcode\", primaryKeyValue:undefined,  \n    //     operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\n    //   const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\", \n    //    primaryKeyField:\"nmethodcode\", inputParam:this.props.Login.inputParam,  userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\n\n    const addParam = {\n      screenName: \"IDS_METHOD\",\n      operation: \"create\",\n      primaryKeyName: \"nmethodcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addId\n    };\n    const editParam = {\n      screenName: \"IDS_METHOD\",\n      operation: \"update\",\n      primaryKeyName: \"nmethodcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editId,\n      inputListName: \"Method\",\n      selectedObject: \"SelectedMethod\"\n    };\n    const editValidityId = this.state.controlMap.has(\"EditMethodValidity\") && this.state.controlMap.get(\"EditMethodValidity\").ncontrolcode;\n    const approveValidityId = this.state.controlMap.has(\"ApproveMethodValidity\") && this.state.controlMap.get(\"ApproveMethodValidity\").ncontrolcode;\n    const editValidityParam = {\n      screenName: \"IDS_METHODVALIDITY\",\n      operation: \"update\",\n      primaryKeyName: \"nmethodvaliditycode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: editValidityId,\n      inputListName: \"MethodValidity\",\n      selectedObject: \"selectedRecord\"\n    };\n    const approveValidityParam = {\n      screenName: \"IDS_METHODVALIDITY\",\n      operation: \"approve\",\n      primaryKeyName: \"nmethodvaliditycode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: approveValidityId,\n      inputListName: \"MethodValidity\",\n      selectedObject: \"selectedRecord\"\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_METHODCATEGORY\",\n      \"dataField\": \"nmethodcatcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_METHODNAME\",\n      \"dataField\": \"smethodname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // {idsName: \"IDS_VALIDITYSTARTDATE\",dataField: \"dvaliditystartdate\", mandatoryLabel: \"IDS_SELECT\",controlType: \"selectbox\"},\n    // {idsName: \"IDS_VALIDITYENDDATE\",dataField: \"dvalidityenddate\",mandatoryLabel: \"IDS_SELECT\",controlType: \"selectbox\"},\n    ];\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    const filterParam = {\n      inputListName: \"Method\",\n      selectedObject: \"SelectedMethod\",\n      primaryKeyField: \"nmethodcode\",\n      fetchUrl: \"method/getMethod\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"smethodname\", \"sdescription\", \"smethodcatname\", 'sdisplaystatus', \"stransactionstatus\"]\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: this.props.Login.masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_METHOD\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Method,\n      getMasterDetail: method => this.props.getMethodDetail(method, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedMethod,\n      primaryKeyField: \"nmethodcode\",\n      mainField: \"smethodname\",\n      firstField: \"smethodcatname\",\n      secondField: \"sdisplaystatus\",\n      openModal: () => this.props.getMethodComboService(addParam),\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }, this.props.Login.masterData.Method && this.props.Login.masterData.Method.length > 0 && this.props.Login.masterData.SelectedMethod && Object.values(this.props.Login.masterData.SelectedMethod).length > 0 ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.SelectedMethod.smethodname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"editmethodname\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.getMethodComboService(editParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletemethodname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteParam, deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedMethod.sdescription))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_DISPLAYSTATUS\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedMethod.sdisplaystatus)))), /*#__PURE__*/React.createElement(MethodValidityView, {\n      userInfo: this.props.Login.userInfo,\n      dataState: this.props.Login.dataState,\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      openChildModal: this.props.Login.openChildModal,\n      fetchMethodValidityById: this.props.fetchMethodValidityById,\n      editParam: editValidityParam,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      selectedRecord: this.props.Login.selectedRecord,\n      selectedMethod: this.props.Login.masterData.SelectedMethod,\n      loadEsign: this.props.Login.loadEsign,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      crudMaster: this.props.crudMaster,\n      getAvailableValidityData: this.props.getAvailableValidityData,\n      getMethodDetails: this.props.getMethodDetails,\n      getMethodValidityUTCDate: this.props.getMethodValidityUTCDate,\n      updateStore: this.props.updateStore,\n      validateEsignCredential: this.props.validateEsignCredential,\n      settings: this.props.Login.settings,\n      selectedId: this.props.Login.selectedId,\n      approveParam: approveValidityParam,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 45\n      }\n    })))) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields || [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddMethod, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        methodCategoryList: this.props.Login.methodCategoryList || [],\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false; // if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n    //     this.setState({\n    //         regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n    //         regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n    //         regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n    //     });\n    // }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  } // generateBreadCrumData() {\n  //     const breadCrumbData = [];\n  //     if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\n  //         breadCrumbData.push(\n  //             {\n  //                 \"label\": \"IDS_TESTCATEGORY\",\n  //                 \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\n  //             }\n  //         );\n  //     }\n  //     return breadCrumbData;\n  // }\n\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getMethodComboService,\n  getMethodDetail,\n  getAvailableValidityData,\n  fetchMethodValidityById,\n  getMethodValidityUTCDate,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData\n})(injectIntl(Method));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testmanagement/Method.jsx"],"names":["React","Component","ListWrapper","Row","Col","Card","Nav","FormGroup","FormLabel","connect","rsapi","process","DataGrid","callService","crudMaster","getMethodComboService","getMethodDetail","getAvailableValidityData","fetchMethodValidityById","getMethodValidityUTCDate","updateStore","validateEsignCredential","filterColumnData","MethodValidityView","injectIntl","toast","SlideOutModal","getControlMap","showEsign","constructOptionList","convertDateValuetoString","ListMaster","faTrashAlt","faPencilAlt","faCopy","faCheck","FontAwesomeIcon","ReadOnlyText","ContentPanel","MediaLabel","DEFAULT_RETURN","Esign","parameterType","transactionStatus","AddMethod","ConfirmMessage","BreadcrumbComponent","Affix","removeItems","Method","constructor","props","onSaveClick","saveType","formRef","inputData","Login","userInfo","dataState","undefined","selectedId","operation","state","selectedRecord","nmethodcode","inputParam","methodUrl","toLowerCase","nmastersitecode","NO","value","obj","Date","fromDate","toDate","ntimezonecode","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","userinfo","masterData","classUrl","displayName","screenName","searchRef","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","openModal","intl","formatMessage","id","ConfirmDelete","deleteParam","deleteID","confirmMessage","confirm","deleteRecord","nControlcode","SelectedMethod","onEsignInputOnChange","event","target","type","name","checked","YES","setState","onInputOnChange","onComboChange","comboData","fieldName","handleDateChange","dateName","dateValue","sdatename","closeModal","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","reloadData","current","error","controlMap","Map","skip","take","settings","createRef","getDerivedStateFromProps","masterStatus","errorCode","warn","render","addId","has","get","ncontrolcode","editId","deleteId","addParam","primaryKeyName","editParam","editValidityId","approveValidityId","editValidityParam","approveValidityParam","mandatoryFields","filterParam","searchFieldList","searchedData","method","length","Object","values","smethodname","indexOf","sdescription","sdisplaystatus","openChildModal","getMethodDetails","methodCategoryList","componentDidUpdate","previousProps","isComponentUpdated","showSaveContinue","PrevoiusLoginData","map","item","push","componentWillUnmount","modalName","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {ListWrapper} from '../../components/client-group.styles';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport rsapi from '../../rsapi';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n// import {\r\n//     callService, crudMaster, getTestMaster, addTest, updateStore, getTestDetails, formulaChangeFunction, filterColumnData,\r\n//     addParameter, validateEsignCredential, addCodedResult, addParameterSpecification, getAvailableData, addFormula,\r\n//     changeTestCategoryFilter, addTestFile, viewAttachment,getActiveTestContainerTypeById\r\n// } from '../../actions'\r\nimport { callService, crudMaster,getMethodComboService,getMethodDetail,getAvailableValidityData,fetchMethodValidityById,getMethodValidityUTCDate,updateStore, validateEsignCredential,filterColumnData } from '../../actions';\r\nimport MethodValidityView from './MethodValidityView';\r\nimport { injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\n//import AddParameter from './AddParameter'\r\n//import AddTest from '../../pages/testmanagement/AddTest'\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { getControlMap, showEsign, constructOptionList, convertDateValuetoString } from '../../components/CommonScript';\r\n//import TestCategoryFilter from './TestCategoryFilter';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { faTrashAlt, faPencilAlt, faCopy, faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport { parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport AddMethod from './AddMethod';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\n//import ReactTooltip from 'react-tooltip';\r\nimport { removeItems } from '@progress/kendo-react-treelist';\r\n\r\n\r\nclass Method extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 25\r\n        });\r\n        this.searchRef = React.createRef();\r\n       // this.searchFieldList = [\"smethodname\", \"sdescription\",  \"smethodcategoryname\", \"stransactionstatus\"];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n    //     const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n    //     && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n    //    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n    //     && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n    const addId = this.state.controlMap.has(\"AddMethod\") && this.state.controlMap.get(\"AddMethod\").ncontrolcode;\r\n    const editId = this.state.controlMap.has(\"EditMethod\") && this.state.controlMap.get(\"EditMethod\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteMethod\") && this.state.controlMap.get(\"DeleteMethod\").ncontrolcode;\r\n\r\n        // const addParam = {screenName:\"Method\", primaryeyField: \"nmethodcode\", primaryKeyValue:undefined,  \r\n        //     operation:\"create\", inputParam:this.props.Login.inputParam, userInfo : this.props.Login.userInfo, ncontrolCode: addId};\r\n\r\n        //   const editParam = {screenName:this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\", \r\n        //    primaryKeyField:\"nmethodcode\", inputParam:this.props.Login.inputParam,  userInfo:this.props.Login.userInfo,  ncontrolCode:editId};\r\n        const addParam = {\r\n            screenName: \"IDS_METHOD\", operation: \"create\", primaryKeyName: \"nmethodcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addId\r\n        }\r\n\r\n        const editParam = {\r\n            screenName: \"IDS_METHOD\", operation: \"update\", primaryKeyName: \"nmethodcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: editId, inputListName: \"Method\", selectedObject: \"SelectedMethod\"\r\n        };\r\n        const editValidityId = this.state.controlMap.has(\"EditMethodValidity\") && this.state.controlMap.get(\"EditMethodValidity\").ncontrolcode;\r\n        const approveValidityId = this.state.controlMap.has(\"ApproveMethodValidity\") && this.state.controlMap.get(\"ApproveMethodValidity\").ncontrolcode;\r\n    const editValidityParam = {\r\n      screenName: \"IDS_METHODVALIDITY\", operation: \"update\", primaryKeyName: \"nmethodvaliditycode\",\r\n      masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n      ncontrolcode: editValidityId, inputListName: \"MethodValidity\", selectedObject: \"selectedRecord\"\r\n  };\r\n  const approveValidityParam = {\r\n    screenName: \"IDS_METHODVALIDITY\", operation: \"approve\", primaryKeyName: \"nmethodvaliditycode\",\r\n    masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n    ncontrolcode: approveValidityId, inputListName: \"MethodValidity\", selectedObject: \"selectedRecord\"\r\n};\r\n        const mandatoryFields = [{\"idsName\":\"IDS_METHODCATEGORY\",\"dataField\":\"nmethodcatcode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n        {\"idsName\":\"IDS_METHODNAME\",\"dataField\":\"smethodname\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n        // {idsName: \"IDS_VALIDITYSTARTDATE\",dataField: \"dvaliditystartdate\", mandatoryLabel: \"IDS_SELECT\",controlType: \"selectbox\"},\r\n        // {idsName: \"IDS_VALIDITYENDDATE\",dataField: \"dvalidityenddate\",mandatoryLabel: \"IDS_SELECT\",controlType: \"selectbox\"},\r\n        ];\r\n        const deleteParam = { operation: \"delete\" };\r\n        const filterParam = {\r\n            inputListName: \"Method\", selectedObject: \"SelectedMethod\", primaryKeyField: \"nmethodcode\",\r\n            fetchUrl: \"method/getMethod\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"smethodname\", \"sdescription\", \"smethodcatname\",'sdisplaystatus', \"stransactionstatus\"]\r\n        };\r\n\r\n        return (\r\n            <>\r\n                {/* Start of get display */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {/* {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    } */}\r\n                    <Row noGutters={true}>\r\n                        <Col md=\"4\">\r\n                            <ListMaster\r\n                                masterData={this.props.Login.masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_METHOD\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.Method}\r\n                                getMasterDetail={(method) => this.props.getMethodDetail(method, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedMethod}\r\n                                primaryKeyField=\"nmethodcode\"\r\n                                mainField=\"smethodname\"\r\n                                firstField=\"smethodcatname\"\r\n                                secondField=\"sdisplaystatus\"\r\n                                openModal={() => this.props.getMethodComboService(addParam)}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n\r\n                                \r\n                                \r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            {this.props.Login.masterData.Method && this.props.Login.masterData.Method.length > 0 && this.props.Login.masterData.SelectedMethod && Object.values(this.props.Login.masterData.SelectedMethod).length > 0 ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.SelectedMethod.smethodname}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                {/* <Row>\r\n                                                <Col md={8}> */}\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        {/* <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.SelectedMethod.nstatus === 1 ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                            {this.props.Login.masterData.SelectedMethod.nstatus === 1 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>}\r\n                                                            {this.props.Login.masterData.SelectedMethod.sdisplaystatus}\r\n                                                        </MediaLabel> */}\r\n                                                        \r\n                                                    </h2>\r\n                                                    {/* </Col>\r\n                                                <Col md=\"4\"> */}\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <div className=\"d-inline\">\r\n                                                       \r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"editmethodname\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            //data-for=\"tooltip_list_wrap\"\r\n                                                            onClick={() => this.props.getMethodComboService(editParam)}>\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletemethodname\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            //data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(deleteParam,deleteId)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    handleClickDelete={() => this.deleteAction(SelectedTest, \"delete\", deleteId, \"TestMaster\", \"openModal\")}\r\n                                                                /> */}\r\n                                                        </Nav.Link>\r\n                                                        \r\n                                                    </div>\r\n                                                    {/* </Tooltip> */}\r\n                                                </div>\r\n                                                {/* </Col>\r\n                                            </Row> */}\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row>\r\n                                            <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedMethod.sdescription}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_DISPLAYSTATUS\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedMethod.sdisplaystatus}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                {/* <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_METHODVALIDITYENABLE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedMethod.smethodvalidityenable}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n                                                \r\n                                                {/* <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_DISPLAYSTATUS\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedMethod.sdisplaystatus}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col> */}\r\n\r\n                                                \r\n                                               \r\n                                                {/* End Here */}\r\n                                            </Row>\r\n                                            <MethodValidityView\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                dataState={this.props.Login.dataState}\r\n                                                masterData={this.props.Login.masterData}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                fetchMethodValidityById={this.props.fetchMethodValidityById}\r\n                                                editParam={editValidityParam}\r\n                                                operation={this.props.Login.operation}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                selectedMethod={this.props.Login.masterData.SelectedMethod}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                getAvailableValidityData={this.props.getAvailableValidityData}\r\n                                                getMethodDetails={this.props.getMethodDetails}\r\n                                                getMethodValidityUTCDate={this.props.getMethodValidityUTCDate}\r\n                                                updateStore={this.props.updateStore}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                settings = {this.props.Login.settings}\r\n                                                selectedId={this.props.Login.selectedId}\r\n                                                approveParam ={approveValidityParam}\r\n                                            ></MethodValidityView>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {/* End of get display */}\r\n\r\n                {/* Start of Modal Sideout for Test Creation */}\r\n                {this.props.Login.openModal && \r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields || []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddMethod  \r\n                            selectedRecord={this.state.selectedRecord ||{}}                                  \r\n                            onInputOnChange={this.onInputOnChange}\r\n                            onComboChange={this.onComboChange} \r\n                            handleDateChange={this.handleDateChange}\r\n                            methodCategoryList={this.props.Login.methodCategoryList ||[]}\r\n                            operation={this.props.Login.operation}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            inputParam={this.props.Login.inputParam}  \r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n                {/* End of Modal Sideout for Test Creation */}\r\n            </>\r\n        );\r\n    }\r\n   \r\n    onSaveClick = (saveType, formRef) => {\r\n        // if (this.state.selectedRecord[\"dvalidityenddate\"] !== undefined && this.state.selectedRecord[\"dvaliditystartdate\"] !== undefined) {\r\n        //     if (this.state.selectedRecord[\"dvalidityenddate\"] < this.state.selectedRecord[\"dvaliditystartdate\"]) {\r\n        //         toast.info(this.props.intl.formatMessage({ id: \"IDS_ENDDATEGRATERTHANSTARTDATE\" }));\r\n        //         return;\r\n        //     }\r\n        // }\r\n        //add / edit            \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        inputData[\"method\"]={};\r\n        if ( this.props.Login.operation === \"update\"){\r\n            // edit\r\n            delete this.state.selectedRecord[\"dcurrentdate\"];\r\n            dataState = this.state.dataState;\r\n            //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            selectedId = this.props.Login.selectedRecord.nmethodcode;              \r\n            inputData[\"method\"][\"nmethodcode\"] = this.props.Login.selectedRecord.nmethodcode;\r\n        }\r\n        else{\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\"nsitecode\":this.props.Login.userInfo.nmastersitecode};      \r\n           \r\n        }   \r\n\r\n        inputData[\"method\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] !== undefined && this.state.selectedRecord[\"ndefaultstatus\"]? this.state.selectedRecord[\"ndefaultstatus\"]:transactionStatus.NO;\r\n        inputData[\"method\"][\"nmethodcatcode\"] = this.state.selectedRecord[\"nmethodcatcode\"]? this.state.selectedRecord[\"nmethodcatcode\"].value:\"\";\r\n        inputData[\"method\"][\"smethodname\"] = this.state.selectedRecord[\"smethodname\"]? this.state.selectedRecord[\"smethodname\"]:\"\";\r\n        inputData[\"method\"][\"nneedvalidity\"] = this.state.selectedRecord[\"nneedvalidity\"] !== undefined && this.state.selectedRecord[\"nneedvalidity\"]? this.state.selectedRecord[\"nneedvalidity\"]:transactionStatus.NO;\r\n        inputData[\"method\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"]? this.state.selectedRecord[\"sdescription\"]:\"\";\r\n        inputData[\"methodvalidity\"]={};\r\n        if(this.state.selectedRecord[\"nneedvalidity\"]===3)\r\n        {\r\n            let obj= convertDateValuetoString(this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"]: new Date(),this.state.selectedRecord[\"dvalidityenddate\"]?this.state.selectedRecord[\"dvalidityenddate\"]:new Date(),this.props.Login.userInfo);\r\n            this.state.selectedRecord[\"svaliditystartdate\"]=obj.fromDate;\r\n            this.state.selectedRecord[\"svalidityenddate\"]=obj.toDate;\r\n\r\n        inputData[\"methodvalidity\"][\"dvaliditystartdate\"] = this.state.selectedRecord[\"dvaliditystartdate\"] ? this.state.selectedRecord[\"dvaliditystartdate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"dvalidityenddate\"] = this.state.selectedRecord[\"dvalidityenddate\"] ? this.state.selectedRecord[\"dvalidityenddate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"svaliditystartdate\"] = this.state.selectedRecord[\"svaliditystartdate\"] ? this.state.selectedRecord[\"svaliditystartdate\"] : new Date();\r\n        inputData[\"methodvalidity\"][\"svalidityenddate\"] = this.state.selectedRecord[\"svalidityenddate\"] ? this.state.selectedRecord[\"svalidityenddate\"] : new Date();\r\n\r\n        inputData[\"methodvalidity\"][\"ntzvaliditystartdatetimezone\"] = this.state.selectedRecord[\r\n            \"ntzvaliditystartdatetimezone\"\r\n          ]\r\n            ? this.state.selectedRecord[\"ntzvaliditystartdatetimezone\"].value ||\r\n            this.props.Login.userInfo.ntimezonecode\r\n            : this.props.Login.userInfo.ntimezonecode;\r\n        inputData[\"methodvalidity\"][\"ntzvalidityenddatetimezone\"] = this.state.selectedRecord[\r\n                \"ntzvalidityenddatetimezone\"\r\n              ]\r\n                ? this.state.selectedRecord[\"ntzvalidityenddatetimezone\"].value ||\r\n                this.props.Login.userInfo.ntimezonecode\r\n                : this.props.Login.userInfo.ntimezonecode;\r\n\r\n        }   \r\n        let postParam = undefined;\r\n        postParam= {\r\n            inputListName: \"Method\", selectedObject: \"SelectedMethod\", primaryKeyField: \"nmethodcode\",\r\n            primaryKeyValue: this.props.Login.selectedRecord.nmethodcode,\r\n            fetchUrl: \"method/getActiveMethodById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Method\",//this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.screenName,  \r\n            inputData: inputData, selectedId, dataState,\r\n            operation: this.props.Login.operation, saveType, formRef,\r\n            postParam, searchRef: this.searchRef,\r\n\r\n        }\r\n       \r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                    openModal:true, screenName: this.props.Login.screenName && this.props.intl.formatMessage({ id:this.props.Login.screenName}),\r\n                    operation:this.props.Login.operation\r\n                    }\r\n                }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n       \r\n}\r\n\r\n    ConfirmDelete = (deleteParam,deleteID) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(deleteParam,deleteID));\r\n    }\r\n    deleteRecord = (deleteParam, nControlcode) => {\r\n        const postParam = {\r\n            inputListName: \"Method\", selectedObject: \"SelectedMethod\",\r\n            primaryKeyField: \"nmethodcode\",\r\n            primaryKeyValue: this.props.Login.masterData.SelectedMethod.nmethodcode,\r\n            fetchUrl: \"method/getMethod\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n                                classUrl: this.props.Login.inputParam.classUrl,\r\n                                methodUrl: \"Method\",//this.props.Login.inputParam.methodUrl,                        \r\n                                displayName:this.props.Login.screenName,\r\n                                inputData: {[\"method\"] :this.props.Login.masterData.SelectedMethod,   //deleteParam.selectedRecord,\r\n                                            \"userinfo\": this.props.Login.userInfo},\r\n                                operation:deleteParam.operation,\r\n            dataState: this.state.dataState,\r\n            postParam\r\n                            }       \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, nControlcode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                    openModal:true, screenName: this.props.Login.screenName && this.props.intl.formatMessage({ id:this.props.Login.screenName}),\r\n                    operation:deleteParam.operation\r\n                    }\r\n                }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onInputOnChange=(event) => {\r\n        \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox')\r\n        {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else{\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        \r\n        this.setState({selectedRecord});\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {      \r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;   \r\n     \r\n        this.setState({selectedRecord});        \r\n    }\r\n    handleDateChange = (dateName, dateValue, sdatename) => {\r\n        const { selectedRecord } = this.state;\r\n        // if(dateName === \"dvaliditystartdate\")\r\n        // {\r\n        //    selectedRecord[\"dvalidityenddate\"] = dateValue;  \r\n        // }\r\n        selectedRecord[dateName] = dateValue;\r\n        selectedRecord[sdatename] = dateValue;\r\n        this.setState({ selectedRecord });\r\n      };\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = transactionStatus.NO;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n\r\n        const inputParam = {\r\n                        inputData : {\"userinfo\":this.props.Login.userInfo},                        \r\n                        classUrl: this.props.Login.inputParam.classUrl,\r\n                        methodUrl: \"Method\",//this.props.Login.inputParam.methodUrl,\r\n                        displayName:this.props.Login.inputParam.displayName,\r\n                        userInfo: this.props.Login.userInfo\r\n                    };     \r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n\r\n       \r\n\r\n        // if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n        //     this.setState({\r\n        //         regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n        //         regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n        //         regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n        //     });\r\n\r\n        // }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n        \r\n\r\n        \r\n       \r\n        \r\n    }\r\n\r\n    // generateBreadCrumData() {\r\n    //     const breadCrumbData = [];\r\n    //     if (this.props.Login.masterData && this.props.Login.masterData.filterTestCategory) {\r\n\r\n    //         breadCrumbData.push(\r\n    //             {\r\n    //                 \"label\": \"IDS_TESTCATEGORY\",\r\n    //                 \"value\": this.props.Login.masterData.SelectedTestCat ? this.props.Login.masterData.SelectedTestCat.stestcategoryname : \"NA\"\r\n    //             }\r\n    //         );\r\n    //     }\r\n    //     return breadCrumbData;\r\n    // }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n                \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,getMethodComboService,getMethodDetail,getAvailableValidityData,fetchMethodValidityById,getMethodValidityUTCDate,updateStore, validateEsignCredential,filterColumnData,\r\n})(injectIntl(Method));"]},"metadata":{},"sourceType":"module"}