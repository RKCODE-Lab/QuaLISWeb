{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList } from '../components/CommonScript';\nexport function openLicenseAuthorityModal(userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('country/getCountry', {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const countryOptionsMap = constructOptionList(response.data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\n      const countryOptions = countryOptionsMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: {},\n          operation: \"create\",\n          countryOptions,\n          openModal: true,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n;\nexport function fetchLicenseAuthorityById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('country/getCountry', {\n      \"userinfo\": editParam.userInfo\n    });\n    const URL2 = rsapi.post(\"licenseauthority/getActiveLicenseAuthorityById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL1, URL2]).then(response => {\n      let selectedId = editParam.primaryKeyValue;\n      let selectedRecord = response[1].data;\n      const countryOptionsMap = constructOptionList(response[0].data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\n      const countryOptions = countryOptionsMap.get(\"OptionList\");\n      selectedRecord['countryValue'] = {\n        value: response[1].data.ncountrycode,\n        label: response[1].data.scountryname\n      };\n      selectedRecord['countryShortName'] = response[1].data.scountryshortname;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          operation: \"update\",\n          countryOptions,\n          screenName: editParam.screenName,\n          inputparam: editParam.inputparam,\n          ncontrolcode: editParam.ncontrolCode,\n          openModal: true,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/LicenseAuthorityAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","constructOptionList","openLicenseAuthorityModal","userInfo","ncontrolcode","dispatch","post","then","response","countryOptionsMap","data","undefined","countryOptions","get","type","payload","selectedRecord","operation","openModal","loading","catch","error","status","message","warn","fetchLicenseAuthorityById","editParam","URL1","URL2","primaryKeyField","primaryKeyValue","all","selectedId","value","ncountrycode","label","scountryname","scountryshortname","screenName","inputparam","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\n\r\nexport function openLicenseAuthorityModal(userInfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('country/getCountry', { \"userinfo\": userInfo })\r\n            .then(response => {\r\n                const countryOptionsMap = constructOptionList(response.data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\r\n                const countryOptions = countryOptionsMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord: {},\r\n                        operation: \"create\",\r\n                        countryOptions,\r\n                        openModal: true,\r\n                        ncontrolcode,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n};\r\n\r\nexport function fetchLicenseAuthorityById(editParam) {\r\n    return function (dispatch) {\r\n        const URL1 = rsapi.post('country/getCountry', { \"userinfo\": editParam.userInfo })\r\n        const URL2 = rsapi.post(\"licenseauthority/getActiveLicenseAuthorityById\", { [editParam.primaryKeyField]: editParam.primaryKeyValue, \"userinfo\": editParam.userInfo })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL1, URL2])\r\n            .then(response => {\r\n                let selectedId = editParam.primaryKeyValue\r\n                let selectedRecord = response[1].data;\r\n                const countryOptionsMap = constructOptionList(response[0].data || [], \"ncountrycode\", \"scountryname\", undefined, undefined, true);\r\n                const countryOptions = countryOptionsMap.get(\"OptionList\");\r\n                selectedRecord['countryValue'] = { value: response[1].data.ncountrycode, label: response[1].data.scountryname }\r\n                selectedRecord['countryShortName'] = response[1].data.scountryshortname\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        operation: \"update\",\r\n                        countryOptions ,\r\n                        screenName: editParam.screenName,\r\n                        inputparam: editParam.inputparam,\r\n                        ncontrolcode: editParam.ncontrolCode,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        selectedId\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}