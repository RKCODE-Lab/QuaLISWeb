{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryForm.jsx\";\nimport React from 'react';\nimport { Row, Col, Nav, Button, Modal, Card } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport '../../components/list-master/list-master.styles';\nimport { attachmentType, parameterType, transactionStatus } from '../../components/Enumeration';\nimport './result.css';\nimport '../../assets/styles/tree.css';\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalculator, faEye, faInfo, faInfoCircle, faSave } from '@fortawesome/free-solid-svg-icons';\nimport TestPopOver from './TestPopOver';\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\nimport { constructOptionList, deleteAttachmentDropZone, rearrangeDateFormat } from '../../components/CommonScript';\nimport { connect } from 'react-redux';\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport ModalShow from '../../components/ModalShow';\nimport { // getPredefinedData,\nupdateStore } from '../../actions';\nimport rsapi from '../../rsapi';\nimport Preloader from '../../components/preloader/preloader.component';\nimport { withRouter } from 'react-router-dom';\nimport { initRequest } from '../../actions/LoginAction';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { intl } from '../../components/App'; // const mapStatetoProps = (state) => {\n//     return {\n//         Login: state.Login\n//     }\n// }\n// const mapDispatchToProps = dispatch => ({ \n//     dispatch                // ← Add this\n//  })\n\nclass ResultEntryForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (Data) {\n        selectedRecord[name] = Data.target.value;\n      } else {\n        selectedRecord[name] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeModalShow = () => {\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let selectedRecord = this.props.Login.selectedRecord;\n      selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode'];\n      showAlertGrid = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showAlertGrid,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onModalSave = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n      let parameterResults = this.state.parameterResults;\n      let currentntestgrouptestpredefcode = this.state.currentntestgrouptestpredefcode || 0;\n      let bool = parameterResults.some(x => x['ntransactionresultcode'] === currentAlertResultCode);\n\n      if (bool) {\n        parameterResults.map(Parameter => {\n          if (Parameter['ntransactionresultcode'] === currentAlertResultCode) {\n            Parameter['additionalInfoUidata'] = {\n              ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']\n            };\n\n            if (selectedRecord['ntestgrouptestpredefsubcode']) {\n              if (typeof selectedRecord['ntestgrouptestpredefsubcode'] === 'string') {\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'];\n              } else {\n                Parameter['additionalInfo'] = \"\";\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'].map(x => x.label + \",\").join('\\n');\n                Parameter['additionalInfo'] = Parameter['additionalInfo'].substring(0, Parameter['additionalInfo'].length - 1);\n              }\n            } else {\n              Parameter['additionalInfo'] = \"\";\n              Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata'];\n            }\n\n            Parameter['ntestgrouptestpredefcode'] = currentntestgrouptestpredefcode;\n          }\n        });\n      } // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { parameterResults:parameterResults,selectedRecord: selectedRecord, showAlert: false }\n      // }\n      // this.props.updateStore(updateInfo);\n      //Sync With Parent Component\n\n\n      this.props.onResultInputChange(parameterResults);\n      this.setState({\n        parameterResults: parameterResults,\n        selectedRecord: selectedRecord,\n        showAlert: false\n      });\n    };\n\n    this.onGradeEvent = (ResultParameter, index, parameter) => {\n      if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: ResultParameter[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\n            //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: -1\n            };\n          }\n        }\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.deleteAttachmentParameterFile = (event, file, fieldName, index) => {\n      let ResultParameter = this.state.parameterResults[index];\n      let parameterResults = this.state.parameterResults;\n      ResultParameter[fieldName] = deleteAttachmentDropZone(ResultParameter[fieldName], file);\n      parameterResults[index]['editable'] = true;\n      this.setState({\n        parameterResults: parameterResults\n      });\n    };\n\n    this.onResultInputChange = (event, index, parameter) => {\n      let selectedRecord = this.state.selectedRecord || [];\n      let ResultParameter = this.state.parameterResults ? [...this.state.parameterResults] : [];\n      let sresult = \"\";\n      let sfinal = \"\";\n      let sresultpredefinedname = \"\";\n      let salertmessage = \"\";\n      let sresultcomment = \"\";\n      let value = -1;\n      let acceptedFile = [];\n      let ncalculatedresult;\n      let currentAlertResultCode = 0;\n      let currentntestgrouptestpredefcode = 0;\n      let inputData = {};\n\n      if (parameter.nparametertypecode === parameterType.NUMERIC) {\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n          sresult = event.target.value;\n          ncalculatedresult = 4;\n        } else {\n          sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\n          ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        currentAlertResultCode = event.item.ntransactionresultcode;\n        currentntestgrouptestpredefcode = event.item.ntestgrouptestpredefcode;\n\n        if (event != null) {\n          sresult = event.item.spredefinedname;\n          sresultpredefinedname = event.item.sresultpredefinedname;\n          sfinal = event.item.spredefinedsynonym;\n          value = event.item.ngradecode;\n          salertmessage = event.item.salertmessage ? event.item.salertmessage : \"\";\n          sresultcomment = event.item.spredefinedcomments ? event.item.spredefinedcomments : \"\";\n          ncalculatedresult = 4;\n        } else {\n          sresult = \"\";\n          sfinal = \"\";\n          sresultpredefinedname = \"\";\n          value = -1;\n          ncalculatedresult = 4;\n        }\n\n        inputData = {\n          'ntestgrouptestpredefcode': event.item.ntestgrouptestpredefcode,\n          'salertmessage': salertmessage,\n          'nneedresultentryalert': event.item.nneedresultentryalert,\n          'nneedsubcodedresult': event.item.nneedsubcodedresult\n        };\n\n        if (event.item.nneedresultentryalert === transactionStatus.NO && event.item.nneedsubcodedresult === transactionStatus.NO) {\n          if (ResultParameter[index]['additionalInfo']) {\n            ResultParameter[index]['additionalInfo'] = \"\";\n          }\n\n          if (ResultParameter[index]['additionalInfoUidata']) {\n            ResultParameter[index]['additionalInfoUidata'] = \"\";\n          }\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.CHARACTER) {\n        sresult = event.target.value;\n        if (event.target.value.trim() === \"\") ncalculatedresult = -1;else ncalculatedresult = 4;\n      }\n\n      if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n        sresult = event[0] && event[0].name;\n        sfinal = event;\n        ncalculatedresult = 4;\n      }\n\n      ResultParameter[index]['sresult'] = sresult;\n      ResultParameter[index]['sfinal'] = sfinal;\n      ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname;\n      ResultParameter[index]['sresultcomment'] = sresultcomment;\n      ResultParameter[index]['salertmessage'] = salertmessage;\n      ResultParameter[index]['acceptedFile'] = acceptedFile;\n      ResultParameter[index]['editable'] = true;\n      ResultParameter[index]['ngradecode'] = value;\n      ResultParameter[index]['ncalculatedresult'] = ncalculatedresult;\n      ResultParameter[index]['dummty'] = 'dummty';\n      selectedRecord.ResultParameter = ResultParameter;\n      let parameterResults = ResultParameter;\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED && (event.item.nneedresultentryalert === transactionStatus.YES || event.item.nneedsubcodedresult === transactionStatus.YES)) {\n        // this.props.\n        this.getPredefinedData(inputData, selectedRecord, currentAlertResultCode, this.props.Login.masterData, currentntestgrouptestpredefcode);\n      } else {\n        if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\n          delete selectedRecord[\"ntestgrouptestpredefsubcode\"];\n        }\n      } //Sync child Data With Parent Component\n\n\n      this.props.onResultInputChange(parameterResults);\n      this.setState({\n        parameterResults: parameterResults,\n        currentAlertResultCode,\n        currentntestgrouptestpredefcode,\n        selectedRecord\n      });\n    };\n\n    this.renderSwitch = (parameter, index, result, screenName) => {\n      const selectedResultGrade = this.state.selectedResultGrade; //this.props.selectedResultGrade;\n\n      const gradeValues = this.props.gradeValues;\n      const gradeCode = selectedResultGrade ? selectedResultGrade.length > 0 ? selectedResultGrade[index] ? selectedResultGrade[index]['ngradecode'] : undefined : \"\" : \"\";\n      let isAdditionalInfoRequired = this.state.parameterResults[index].hasOwnProperty('additionalInfo') && this.state.parameterResults[index]['additionalInfo'] !== \"\" && this.state.parameterResults[index]['additionalInfo'] !== null ? true : false; //  parameter.jsondata['value'] ? JSON.parse(parameter.jsondata['value']).hasOwnProperty('additionalInfo') &&\n      //     JSON.parse(parameter.jsondata['value'])['additionalInfo'] !== \"\" ? true : false :\n      //     parameter.jsondata.hasOwnProperty('additionalInfo') &&\n      //         parameter.jsondata['additionalInfo'] !== \"\" ? true : false\n\n      switch (parameter.nparametertypecode) {\n        case 1:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n              className: \"row w-100\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 6,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(FormInput, {\n              name: this.state.parameterResults[index].ntransactionresultcode,\n              type: \"text\",\n              required: false,\n              isMandatory: false // value={this.props.parameterResults.length > 0 ?\n              //     this.props.parameterResults[index] ? (this.props.parameterResults[index]['sresult'] !== null ? this.props.parameterResults[index]['sresult'] : \"\") : \"\" : \"\"}\n              ,\n              value: this.state.parameterResults.length > 0 ? this.state.parameterResults[index] ? this.state.parameterResults[index]['sresult'] !== null ? this.state.parameterResults[index]['sresult'] : \"\" : \"\" : \"\" // placeholder={parameter.sparametersynonym}\n              //label={parameter.sparametersynonym}\n              // onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\n              ,\n              onChange: event => this.onResultInputChange(event, index, parameter),\n              onBlur: () => this.onGradeEvent(this.state.parameterResults, index, parameter) // onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\n              ,\n              maxLength: 9,\n              onKeyUp: event => this.props.onKeyPress(event, index, this.props.paremterResultcode),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 33\n              }\n            })), parameter.ntestgrouptestformulacode > 0 ? /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              className: \"d-flex product-category justify-content-end icon-group-wrap\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              title: \"Calculate Formula\",\n              className: \"btn btn-circle outline-grey ml-2\",\n              role: \"button\",\n              id: screenName + -+index,\n              onClick: event => this.props.getFormula(parameter, this.props.Login.userInfo, this.props.Login.masterData, index, event),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              title: \"Calculate Formula\",\n              icon: faCalculator,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 438,\n                columnNumber: 41\n              }\n            }))) : \"\", /*#__PURE__*/React.createElement(Col, {\n              md: 4,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 442,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(ListWrapper, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(MediaLabel, {\n              className: \"labelfont\",\n              style: {\n                color: gradeValues[gradeCode][0]['scolorhexcode']\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 46\n              }\n            }, gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename'])))));\n          }\n\n        case 2:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n              md: isAdditionalInfoRequired ? 8 : 10,\n              className: \"pl-0\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: this.state.parameterResults[index] && this.state.parameterResults[index].ntransactionresultcode,\n              as: \"select\" //formLabel={parameter.sparametersynonym}\n              ,\n              defaultValue: {\n                \"value\": this.state.parameterResults[index] && this.state.parameterResults[index].sresultpredefinedname,\n                \"label\": this.state.parameterResults[index] && this.state.parameterResults[index].sresultpredefinedname\n              } //  defaultValue={{ \"value\": parameter.sresultpredefinedname, \"label\": parameter.sresultpredefinedname }}\n              //  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\n              //  this.props.predefinedValues ? constructOptionList(this.props.predefinedValues[parameter.ntransactionresultcode]||[],'ngradecode',\n              // 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\n              ,\n              options: this.props.predefinedValues ? this.props.predefinedValues[parameter.ntransactionresultcode] : \"\",\n              optionId: \"ntestgrouptestpredefcode\",\n              optionValue: \"spredefinedname\",\n              isMulti: false,\n              isDisabled: false,\n              matchFrom: 'start',\n              isSearchable: true,\n              isClearable: parameter.nresultmandatory === transactionStatus.YES ? false : true,\n              isMandatory: false,\n              onKeyUp: event => this.props.onKeyPress(event, index, this.props.paremterResultcode) // onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\n              // onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\n              ,\n              onChange: event => this.onResultInputChange(event, index, parameter),\n              onBlur: () => this.onGradeEvent(this.state.parameterResults, index, parameter),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 29\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              className: \"pt-2\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(ListWrapper, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(MediaLabel, {\n              className: \"labelfont\",\n              style: {\n                color: gradeValues[gradeCode][0]['scolorhexcode']\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 42\n              }\n            }, gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']))), isAdditionalInfoRequired && /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              className: \"pt-2\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(TestPopOver, {\n              intl: this.props.intl,\n              needIcon: true,\n              needPopoverTitleContent: true,\n              placement: \"left\",\n              stringList: // parameter.jsondata['value'] ?\n              //      [JSON.parse(parameter.jsondata['value'])['additionalInfo']] :\n              //              [parameter.jsondata['additionalInfo']] \n              this.state.parameterResults[index].hasOwnProperty('additionalInfo') && this.state.parameterResults[index]['additionalInfo'] !== \"\" && [this.state.parameterResults[index]['additionalInfo']],\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 33\n              }\n            })));\n          }\n\n        case 3:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n              md: 10,\n              className: \"pl-0\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(FormTextarea, {\n              name: parameter.ntransactionresultcode //label={parameter.sparametersynonym}\n              //placeholder={parameter.sparametersynonym}\n              ,\n              type: \"text\" //     defaultValue={parameter.sresult}\n              ,\n              defaultValue: this.state.parameterResults[index] && this.state.parameterResults[index]['sresult'],\n              isMandatory: false,\n              required: false,\n              maxLength: 255,\n              onChange: event => this.onResultInputChange(event, index, parameter),\n              onBlur: () => this.onGradeEvent(this.state.parameterResults, index, parameter),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 547,\n                columnNumber: 29\n              }\n            })), /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(ListWrapper, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(MediaLabel, {\n              className: \"labelfont\",\n              style: {\n                color: gradeValues[gradeCode][0]['scolorhexcode']\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 42\n              }\n            }, gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']))));\n          }\n\n        case 4:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              className: \"pl-0\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(DropZone, {\n              maxFiles: 1,\n              isMandatory: false //label={parameter.sparametersynonym}\n              ,\n              accept: \".pdf\",\n              minSize: 0,\n              maxSize: 20,\n              multiple: false // editFiles={parameter.sfinal != null ? parameter : \"\"}\n              ,\n              editFiles: this.state.parameterResults[index].sfinal != null ? this.state.parameterResults[index] : \"\",\n              attachmentTypeCode: attachmentType.FTP,\n              fileSizeName: \"nfilesize\",\n              fileName: \"sfinal\",\n              index: index // deleteAttachment={this.props.deleteAttachmentParamFile}\n              // onDrop={(event) => this.props.onResultInputChange(event, index, parameter)}\n              ,\n              deleteAttachment: this.deleteAttachmentParameterFile,\n              onDrop: event => this.onResultInputChange(event, index, parameter) //disabled={disabled}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 574,\n                columnNumber: 25\n              }\n            }));\n          }\n\n        default:\n          return \"\";\n      }\n    };\n\n    this.state = {\n      parameterResults: [...this.props.ResultParameter],\n      selectedResultGrade: this.props.selectedResultGrade //,\n      //loading:false\n\n    };\n  } // componentDidUpdate(previousProps) {\n  //     let bool = false;\n  //     let { currentAlertResultCode, currentntestgrouptestpredefcode,selectedRecord,showAlert } = this.state\n  //     if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n  //         bool = true;\n  //         selectedRecord = this.props.Login.selectedRecord;\n  //     }\n  //     if (this.props.Login.showAlert !== previousProps.Login.showAlert) {\n  //         bool = true;\n  //         showAlert = this.props.Login.showAlert;\n  //     }\n  //     if (this.props.Login.currentAlertResultCode !== previousProps.Login.currentAlertResultCode) {\n  //         bool = true;\n  //         currentAlertResultCode = this.props.Login.currentAlertResultCode;\n  //     }\n  //     if (this.props.Login.currentntestgrouptestpredefcode !== previousProps.Login.currentntestgrouptestpredefcode) {\n  //         bool = true;\n  //         currentntestgrouptestpredefcode = this.props.Login.currentntestgrouptestpredefcode;\n  //     }\n  //     if (bool) {\n  //         this.setState({ currentntestgrouptestpredefcode, currentAlertResultCode,selectedRecord,showAlert })\n  //     }\n  // }\n  //For Subcode Result Start\n\n\n  getPredefinedData(inputData, selectedRecord, currentAlertResultCode, masterData, currentntestgrouptestpredefcode) {\n    //  return function (dispatch) {\n    //   this.setState({loading:true})\n    let inputParamData = {\n      ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode\n    }; //dispatch(initRequest(true));\n\n    rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData).then(response => {\n      let showMultiSelectCombo = false;\n      let ResultParameter = selectedRecord['ResultParameter'];\n      let onlyAlertMsgAvailable = false;\n      let testgrouptestpredefsubresult = response.data['testgrouptestpredefsubresult'];\n\n      if (inputData['nneedsubcodedresult'] === transactionStatus.YES) {\n        showMultiSelectCombo = true;\n        masterData['testgrouptestpredefsubresultOptions'] = testgrouptestpredefsubresult;\n      } else {\n        onlyAlertMsgAvailable = true;\n      }\n\n      for (const Parameter of ResultParameter) {\n        if (Parameter.additionalInfoUidata || Parameter.additionalInfoUidata === \"\") {\n          let additionalInfoUidata = typeof Parameter.additionalInfoUidata === 'string' ? Parameter.additionalInfoUidata === \"\" ? \"\" : JSON.parse(Parameter.additionalInfoUidata) : Parameter.additionalInfoUidata;\n\n          if (Parameter['ntransactionresultcode'] === currentAlertResultCode && Parameter['ntestgrouptestpredefcode'] === inputData['ntestgrouptestpredefcode']) {\n            if (Parameter.additionalInfoUidata) {\n              selectedRecord[\"ntestgrouptestpredefsubcode\"] = additionalInfoUidata['ntestgrouptestpredefsubcode'];\n              break;\n            }\n          } else {\n            if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\n              delete selectedRecord[\"ntestgrouptestpredefsubcode\"];\n            }\n          }\n        }\n      }\n\n      ;\n      masterData['salertmessage'] = inputData.salertmessage;\n      this.setState({\n        masterData,\n        showAlert: inputData.nneedresultentryalert === transactionStatus.NO ? false : true,\n        showAlertForPredefined: true,\n        showMultiSelectCombo,\n        onlyAlertMsgAvailable,\n        additionalInfoView: false,\n        selectedRecord,\n        currentAlertResultCode,\n        currentntestgrouptestpredefcode //,\n        //  loading:false\n\n      }); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: { \n      //         loading: false,\n      //        masterData, \n      //         showAlert: inputData.nneedresultentryalert===transactionStatus.NO?false:true,\n      //          showAlertForPredefined: true,\n      //          showMultiSelectCombo,\n      //          onlyAlertMsgAvailable,\n      //          additionalInfoView:false,\n      //          selectedRecord,\n      //          currentAlertResultCode,\n      //          currentntestgrouptestpredefcode\n      //     }\n      // })\n    }); // .catch(error => {\n    //     dispatch({\n    //         type: DEFAULT_RETURN,\n    //         payload: {\n    //             loading: false\n    //         }\n    //     })\n    //     if (error.response.status === 500) {\n    //         toast.error(error.message);\n    //     } else {\n    //         toast.warn(error.response.data);\n    //     }\n    // })\n    //    }\n  } // componentDidUpdate(previousProps, prevState, snapshot) {\n  //     let parameterResults=[];\n  //     if(this.state.parameterResults!==prevState.parameterResults){\n  //        // parameterResults=this.props.parameterResults;\n  //         //this.setState({parameterResults})\n  //         this.props.dispatch({ type: DEFAULT_RETURN });\n  //     } \n  // }\n\n\n  // static getDerivedStateFromProps(props, state) {\n  //     if( props.Login.showAlert !==  state.showAlert){\n  //         //Change in props\n  //         return{\n  //             showAlert: props.Login.showAlert\n  //         };\n  //     } \n  //     return null; // No change to state\n  // }\n  componentWillUnmount() {\n    //  let parameterResults = this.state.parameterResults\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      //  data: { parameterResults: undefined  }\n      data: {\n        isParameterInitialRender: false,\n        parameterResults: [],\n        selectedRecord: {}\n      }\n    };\n    this.props.updateStore(updateInfo);\n  } // shouldComponentUpdate (nextProps,nextState) {\n  //     // Rendering the component only if\n  //     // passed props value is changed\n  //     console.log('nextProps',nextProps);\n  //     if ((nextProps.Login.parameterResults !==this.props.Login.parameterResults)) {\n  //       return false;\n  //     }else if(nextState.parameterResults!==this.state.parameterResults){\n  //         return true;\n  //     } else {\n  //       return false;\n  //     }\n  //   }\n  // shouldComponentUpdate (nextProps) { \n  //     if ((nextProps.Login.parameterResults !==this.props.Login.parameterResults)&&\n  //     nextProps.Login.isParameterInitialRender===false) {\n  //       return false;\n  //     } else {\n  //       return true;\n  //     }\n  //   }\n  // componentDidUpdate (prevProps, prevState) {\n  //   //  console.log('Deleted User successfully'); \n  //     let parameterResults = this.state.parameterResults\n  //     if(this.state.parameterResults!==prevState.parameterResults){\n  //         const updateInfo = {\n  //             typeName: DEFAULT_RETURN,\n  //             data: { parameterResults: parameterResults,isParameterInitialRender:false }\n  //         }\n  //         this.props.updateStore(updateInfo);\n  //     }\n  //   }\n  // this.props.onSaveClick = (childData) =>{\n  //     this.setState({name: childData})\n  // }\n  // updateStoreResultEntryForm = (updateInfo)  => { \n  //     return function (dispatch) {\n  //         console.log('updateInfoXXXXX')\n  //         dispatch({\n  //             type: updateInfo.typeName,\n  //             payload: {\n  //                 ...updateInfo.data,\n  //                 masterStatus: \"\",\n  //                 errorCode: undefined\n  //             }\n  //         }); \n  //     } \n  // }\n\n\n  render() {\n    //  console.log(\"Grand Child Result Entry Form\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, //this.props.index===0&&\n    this.state.showAlert && /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.state.showAlert,\n      modalTitle: this.props.intl.formatMessage({\n        id: \"IDS_ADDITIONALINFOREQURIED\"\n      }),\n      closeModal: this.closeModalShow,\n      onSaveClick: this.onModalSave,\n      removeCancel: this.state.showAlertForPredefined || this.state.additionalInfoView ? true : false,\n      needSubmit: this.state.showAlertForPredefined || this.state.additionalInfoView ? true : false,\n      needSave: this.state.showAlertForPredefined || this.state.additionalInfoView ? \"\" : true,\n      selectedRecord: this.state.selectedRecord || {},\n      size: this.state.showAlertForPredefined || this.state.additionalInfoView ? \"\" : 'lg',\n      showAlertMsg: this.state.showAlertForPredefined ? true : false,\n      modalBody: /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        onlyAlertMsgAvailable: this.state.onlyAlertMsgAvailable,\n        salertmessage: this.state.masterData['salertmessage'],\n        showMultiSelectCombo: this.state.showMultiSelectCombo,\n        testgrouptestpredefsubresultOptions: this.state.masterData.testgrouptestpredefsubresultOptions || [],\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 703,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, this.props.needSubSample && this.props.parameterResults.ssamplearno ? /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      style: {\n        color: \"#007bff\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 29\n      }\n    }, this.props.parameterResults.ssamplearno, this.props.parameterResults.stestsynonym ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `labelfont` //style={{ color: \"#505f79\" }}\n      ,\n      style: {\n        color: \"#97a0af\",\n        paddingLeft: '0.2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 37\n      }\n    }, \" \", this.props.parameterResults.stestsynonym) : \"\") : this.props.parameterResults.sarno ? /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      style: {\n        color: \"#007bff\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 33\n      }\n    }, this.props.parameterResults.sarno, this.props.parameterResults.stestsynonym ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `labelfont` //style={{ color: \"#505f79\" }}\n      ,\n      style: {\n        color: \"#97a0af\",\n        paddingLeft: '0.2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 41\n      }\n    }, \" \", this.props.parameterResults.stestsynonym) : \"\") : \"\", /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"pl-0 mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MediaHeader, {\n      className: `labelfont`,\n      style: {\n        color: \"#505f79\"\n      } // style={{ color: \"#97a0af\" }}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 29\n      }\n    }, \" \", this.props.parameterResults.sparametersynonym, this.props.parameterResults.nresultmandatory === transactionStatus.NO ? \"(optional)\" : \"\")), this.renderSwitch(this.props.parameterResults, this.props.index, this.props.parameterResults.ntransactionresultcode, this.props.Login.screenName))));\n  }\n\n} // export default  \n// connect(mapStatetoProps, mapDispatchToProps, {\n//    updateStore//,getPredefinedData\n// } )\n// //connect()\n//     (injectIntl(ResultEntryForm)) ;\n\n\nexport default connect(null, {\n  updateStore\n})(injectIntl(ResultEntryForm));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryForm.jsx"],"names":["React","Row","Col","Nav","Button","Modal","Card","FormattedMessage","injectIntl","ListWrapper","FormSelectSearch","FormTextarea","DropZone","attachmentType","parameterType","transactionStatus","MediaHeader","MediaLabel","MediaSubHeader","FormInput","FontAwesomeIcon","faCalculator","faEye","faInfo","faInfoCircle","faSave","TestPopOver","numberConversion","numericGrade","constructOptionList","deleteAttachmentDropZone","rearrangeDateFormat","connect","ResultEntryPredefinedComments","DEFAULT_RETURN","ModalShow","updateStore","rsapi","Preloader","withRouter","initRequest","toast","Axios","intl","ResultEntryForm","Component","constructor","props","onComboChange","comboData","comboName","selectedRecord","state","currentAlertResultCode","setState","onInputChange","Data","name","target","value","closeModalShow","showAlertGrid","Login","updateInfo","typeName","data","onModalSave","parameterResults","currentntestgrouptestpredefcode","bool","some","x","map","Parameter","ntestgrouptestpredefsubcode","label","join","substring","length","onResultInputChange","showAlert","onGradeEvent","ResultParameter","index","parameter","undefined","sresult","selectedResultGrade","nparametertypecode","NUMERIC","ngradecode","parseFloat","parseInt","nroundingdigits","PREDEFINED","CHARACTER","trim","deleteAttachmentParameterFile","event","file","fieldName","sfinal","sresultpredefinedname","salertmessage","sresultcomment","acceptedFile","ncalculatedresult","inputData","test","item","ntransactionresultcode","ntestgrouptestpredefcode","spredefinedname","spredefinedsynonym","spredefinedcomments","nneedresultentryalert","nneedsubcodedresult","NO","ATTACHMENT","YES","getPredefinedData","masterData","renderSwitch","result","screenName","gradeValues","gradeCode","isAdditionalInfoRequired","hasOwnProperty","onKeyPress","paremterResultcode","ntestgrouptestformulacode","getFormula","userInfo","color","predefinedValues","nresultmandatory","FTP","inputParamData","post","then","response","showMultiSelectCombo","onlyAlertMsgAvailable","testgrouptestpredefsubresult","additionalInfoUidata","JSON","parse","showAlertForPredefined","additionalInfoView","componentWillUnmount","isParameterInitialRender","render","formatMessage","id","testgrouptestpredefsubresultOptions","needSubSample","ssamplearno","stestsynonym","paddingLeft","sarno","sparametersynonym"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Nav, Button, Modal, Card } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport '../../components/list-master/list-master.styles';\r\nimport { attachmentType, parameterType, transactionStatus } from '../../components/Enumeration';\r\nimport './result.css';\r\nimport '../../assets/styles/tree.css';\r\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalculator, faEye, faInfo, faInfoCircle, faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport TestPopOver from './TestPopOver';\r\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\r\nimport { constructOptionList, deleteAttachmentDropZone, rearrangeDateFormat } from '../../components/CommonScript';\r\nimport { connect } from 'react-redux';\r\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport {\r\n    // getPredefinedData,\r\n    updateStore\r\n} from '../../actions';\r\nimport rsapi from '../../rsapi';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport { initRequest } from '../../actions/LoginAction';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { intl } from '../../components/App';\r\n// const mapStatetoProps = (state) => {\r\n//     return {\r\n//         Login: state.Login\r\n//     }\r\n// }\r\n// const mapDispatchToProps = dispatch => ({ \r\n//     dispatch                // ← Add this\r\n//  })\r\nclass ResultEntryForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            parameterResults: [...this.props.ResultParameter],\r\n            selectedResultGrade: this.props.selectedResultGrade//,\r\n            //loading:false\r\n        }\r\n\r\n    } \r\n\r\n\r\n    // componentDidUpdate(previousProps) {\r\n    //     let bool = false;\r\n    //     let { currentAlertResultCode, currentntestgrouptestpredefcode,selectedRecord,showAlert } = this.state\r\n    //     if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n    //         bool = true;\r\n    //         selectedRecord = this.props.Login.selectedRecord;\r\n    //     }\r\n    //     if (this.props.Login.showAlert !== previousProps.Login.showAlert) {\r\n    //         bool = true;\r\n    //         showAlert = this.props.Login.showAlert;\r\n    //     }\r\n\r\n    //     if (this.props.Login.currentAlertResultCode !== previousProps.Login.currentAlertResultCode) {\r\n    //         bool = true;\r\n    //         currentAlertResultCode = this.props.Login.currentAlertResultCode;\r\n    //     }\r\n    //     if (this.props.Login.currentntestgrouptestpredefcode !== previousProps.Login.currentntestgrouptestpredefcode) {\r\n    //         bool = true;\r\n    //         currentntestgrouptestpredefcode = this.props.Login.currentntestgrouptestpredefcode;\r\n    //     }\r\n    //     if (bool) {\r\n    //         this.setState({ currentntestgrouptestpredefcode, currentAlertResultCode,selectedRecord,showAlert })\r\n    //     }\r\n    // }\r\n    //For Subcode Result Start\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode = this.state.currentAlertResultCode || 0;\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode = this.state.currentAlertResultCode || 0;\r\n        if (Data) {\r\n            selectedRecord[name] = Data.target.value;\r\n        }\r\n        else {\r\n            selectedRecord[name] = [];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    closeModalShow = () => {\r\n        let showAlertGrid = this.props.Login.showAlertGrid;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode']\r\n        showAlertGrid = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showAlertGrid, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onModalSave = () => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode = this.state.currentAlertResultCode || 0;\r\n        let parameterResults = this.state.parameterResults\r\n        let currentntestgrouptestpredefcode = this.state.currentntestgrouptestpredefcode || 0;\r\n        let bool = parameterResults.some(x => x['ntransactionresultcode'] === currentAlertResultCode)\r\n        if (bool) {\r\n            parameterResults.map(Parameter => {\r\n                if (Parameter['ntransactionresultcode'] === currentAlertResultCode) {\r\n                    Parameter['additionalInfoUidata'] = { ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode'] }\r\n                    if (selectedRecord['ntestgrouptestpredefsubcode']) {\r\n                        if (typeof selectedRecord['ntestgrouptestpredefsubcode'] === 'string') {\r\n                            Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode']\r\n                        } else {\r\n                            Parameter['additionalInfo'] = \"\"\r\n                            Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'].map(x => x.label + \",\").join('\\n')\r\n                            Parameter['additionalInfo'] = Parameter['additionalInfo'].substring(0,\r\n                                Parameter['additionalInfo'].length - 1)\r\n                        }\r\n                    } else {\r\n                        Parameter['additionalInfo'] = \"\"\r\n                        Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata']\r\n                    }\r\n                    Parameter['ntestgrouptestpredefcode'] = currentntestgrouptestpredefcode\r\n                }\r\n            }\r\n            );\r\n        }\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { parameterResults:parameterResults,selectedRecord: selectedRecord, showAlert: false }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n\r\n          //Sync With Parent Component\r\n          this.props.onResultInputChange(parameterResults);\r\n        this.setState({ parameterResults: parameterResults, selectedRecord: selectedRecord, showAlert: false })\r\n    }\r\n\r\n    //For Subcode Result End\r\n\r\n\r\n    onGradeEvent = (ResultParameter, index, parameter) => {\r\n        if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: ResultParameter[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\r\n                    //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: -1 };\r\n                }\r\n            }\r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n        }\r\n    }\r\n    deleteAttachmentParameterFile = (event, file, fieldName, index) => {\r\n        let ResultParameter = this.state.parameterResults[index];\r\n        let parameterResults = this.state.parameterResults;\r\n        ResultParameter[fieldName] = deleteAttachmentDropZone(ResultParameter[fieldName],\r\n            file)\r\n        parameterResults[index]['editable'] = true;\r\n        this.setState({\r\n            parameterResults: parameterResults\r\n        });\r\n\r\n    }\r\n    onResultInputChange = (event, index, parameter) => {\r\n        let selectedRecord = this.state.selectedRecord || [];\r\n        let ResultParameter = this.state.parameterResults ? [...this.state.parameterResults] : [];\r\n        let sresult = \"\";\r\n        let sfinal = \"\";\r\n        let sresultpredefinedname = \"\";\r\n        let salertmessage = \"\";\r\n        let sresultcomment = \"\";\r\n        let value = -1;\r\n        let acceptedFile = [];\r\n        let ncalculatedresult;\r\n        let currentAlertResultCode = 0;\r\n        let currentntestgrouptestpredefcode = 0;\r\n        let inputData = {}\r\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n                sresult = event.target.value;\r\n                ncalculatedresult = 4\r\n            } else {\r\n                sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\r\n                ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n            currentAlertResultCode = event.item.ntransactionresultcode;\r\n            currentntestgrouptestpredefcode = event.item.ntestgrouptestpredefcode;\r\n            if (event != null) {\r\n                sresult = event.item.spredefinedname;\r\n                sresultpredefinedname = event.item.sresultpredefinedname;\r\n                sfinal = event.item.spredefinedsynonym\r\n                value = event.item.ngradecode;\r\n                salertmessage = event.item.salertmessage ? event.item.salertmessage : \"\";\r\n                sresultcomment = event.item.spredefinedcomments ? event.item.spredefinedcomments : \"\";\r\n                ncalculatedresult = 4;\r\n            }\r\n            else {\r\n                sresult = \"\";\r\n                sfinal = \"\";\r\n                sresultpredefinedname = \"\";\r\n                value = -1;\r\n                ncalculatedresult = 4\r\n            }\r\n            inputData = {\r\n                'ntestgrouptestpredefcode': event.item.ntestgrouptestpredefcode,\r\n                'salertmessage': salertmessage,\r\n                'nneedresultentryalert': event.item.nneedresultentryalert,\r\n                'nneedsubcodedresult': event.item.nneedsubcodedresult\r\n            }\r\n            if (event.item.nneedresultentryalert === transactionStatus.NO &&\r\n                event.item.nneedsubcodedresult === transactionStatus.NO) {\r\n                if (ResultParameter[index]['additionalInfo']) {\r\n                    ResultParameter[index]['additionalInfo'] = \"\"\r\n                }\r\n                if (ResultParameter[index]['additionalInfoUidata']) {\r\n                    ResultParameter[index]['additionalInfoUidata'] = \"\"\r\n                }\r\n            }\r\n\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n            sresult = event.target.value;\r\n            if (event.target.value.trim() === \"\")\r\n                ncalculatedresult = -1;\r\n            else\r\n                ncalculatedresult = 4;\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n            sresult = event[0] && event[0].name;\r\n            sfinal = event;\r\n            ncalculatedresult = 4\r\n        }\r\n        ResultParameter[index]['sresult'] = sresult\r\n        ResultParameter[index]['sfinal'] = sfinal\r\n        ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname\r\n        ResultParameter[index]['sresultcomment'] = sresultcomment\r\n        ResultParameter[index]['salertmessage'] = salertmessage\r\n        ResultParameter[index]['acceptedFile'] = acceptedFile\r\n        ResultParameter[index]['editable'] = true\r\n        ResultParameter[index]['ngradecode'] = value\r\n        ResultParameter[index]['ncalculatedresult'] = ncalculatedresult\r\n        ResultParameter[index]['dummty'] = 'dummty'\r\n        selectedRecord.ResultParameter = ResultParameter\r\n        let parameterResults = ResultParameter\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED && (event.item.nneedresultentryalert === transactionStatus.YES ||\r\n            event.item.nneedsubcodedresult === transactionStatus.YES)\r\n            ) {\r\n            // this.props.\r\n            this.getPredefinedData(inputData, selectedRecord, currentAlertResultCode, this.props.Login.masterData, currentntestgrouptestpredefcode)\r\n        }else{\r\n            if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\r\n                delete selectedRecord[\"ntestgrouptestpredefsubcode\"]\r\n            }\r\n        }\r\n        //Sync child Data With Parent Component\r\n        this.props.onResultInputChange(parameterResults);\r\n        this.setState({\r\n            parameterResults: parameterResults,\r\n            currentAlertResultCode,\r\n            currentntestgrouptestpredefcode,\r\n            selectedRecord\r\n        });\r\n    }\r\n\r\n    getPredefinedData(inputData, selectedRecord, currentAlertResultCode, masterData, currentntestgrouptestpredefcode) {\r\n        //  return function (dispatch) {\r\n         //   this.setState({loading:true})\r\n        let inputParamData = {\r\n            ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode,\r\n        }\r\n        //dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData)\r\n            .then(response => {\r\n                let showMultiSelectCombo = false;\r\n                let ResultParameter = selectedRecord['ResultParameter']\r\n                let onlyAlertMsgAvailable = false;\r\n                let testgrouptestpredefsubresult = response.data['testgrouptestpredefsubresult']\r\n                if (inputData['nneedsubcodedresult'] === transactionStatus.YES) {\r\n                    showMultiSelectCombo = true\r\n                    masterData['testgrouptestpredefsubresultOptions'] = testgrouptestpredefsubresult\r\n                }\r\n                else {\r\n                    onlyAlertMsgAvailable = true;\r\n                }\r\n                for (const Parameter of ResultParameter) {\r\n                    if (Parameter.additionalInfoUidata || Parameter.additionalInfoUidata === \"\") {\r\n                        let additionalInfoUidata = typeof Parameter.additionalInfoUidata === 'string' ? Parameter.additionalInfoUidata === \"\" ? \"\" : JSON.parse(Parameter.additionalInfoUidata) :\r\n                            Parameter.additionalInfoUidata\r\n                        if (Parameter['ntransactionresultcode'] === currentAlertResultCode &&\r\n                            Parameter['ntestgrouptestpredefcode'] === inputData['ntestgrouptestpredefcode']) {\r\n                            if (Parameter.additionalInfoUidata) {\r\n                                selectedRecord[\"ntestgrouptestpredefsubcode\"] = additionalInfoUidata['ntestgrouptestpredefsubcode']\r\n                                break;\r\n                            }\r\n                        } else {\r\n                            if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\r\n                                delete selectedRecord[\"ntestgrouptestpredefsubcode\"]\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                };\r\n                masterData['salertmessage'] = inputData.salertmessage\r\n\r\n                this.setState({\r\n                    masterData,\r\n                    showAlert: inputData.nneedresultentryalert === transactionStatus.NO ? false : true,\r\n                    showAlertForPredefined: true,\r\n                    showMultiSelectCombo,\r\n                    onlyAlertMsgAvailable,\r\n                    additionalInfoView: false,\r\n                    selectedRecord,\r\n                    currentAlertResultCode,\r\n                    currentntestgrouptestpredefcode//,\r\n                  //  loading:false\r\n                });\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: { \r\n                //         loading: false,\r\n                //        masterData, \r\n                //         showAlert: inputData.nneedresultentryalert===transactionStatus.NO?false:true,\r\n                //          showAlertForPredefined: true,\r\n                //          showMultiSelectCombo,\r\n                //          onlyAlertMsgAvailable,\r\n                //          additionalInfoView:false,\r\n                //          selectedRecord,\r\n                //          currentAlertResultCode,\r\n                //          currentntestgrouptestpredefcode\r\n                //     }\r\n                // })\r\n            })\r\n        // .catch(error => {\r\n        //     dispatch({\r\n        //         type: DEFAULT_RETURN,\r\n        //         payload: {\r\n        //             loading: false\r\n        //         }\r\n        //     })\r\n        //     if (error.response.status === 500) {\r\n        //         toast.error(error.message);\r\n        //     } else {\r\n        //         toast.warn(error.response.data);\r\n        //     }\r\n        // })\r\n        //    }\r\n\r\n    }\r\n\r\n    // componentDidUpdate(previousProps, prevState, snapshot) {\r\n    //     let parameterResults=[];\r\n    //     if(this.state.parameterResults!==prevState.parameterResults){\r\n    //        // parameterResults=this.props.parameterResults;\r\n    //         //this.setState({parameterResults})\r\n    //         this.props.dispatch({ type: DEFAULT_RETURN });\r\n    //     } \r\n    // }\r\n\r\n    renderSwitch = (parameter, index, result, screenName) => {\r\n        const selectedResultGrade = this.state.selectedResultGrade;//this.props.selectedResultGrade;\r\n        const gradeValues = this.props.gradeValues;\r\n        const gradeCode = selectedResultGrade ? selectedResultGrade.length > 0 ?\r\n            selectedResultGrade[index] ? selectedResultGrade[index]['ngradecode'] : undefined : \"\" : \"\";\r\n        let isAdditionalInfoRequired = this.state.parameterResults[index].hasOwnProperty('additionalInfo') &&\r\n        this.state.parameterResults[index]['additionalInfo'] !== \"\" && this.state.parameterResults[index]['additionalInfo'] !== null ? true : false\r\n        //  parameter.jsondata['value'] ? JSON.parse(parameter.jsondata['value']).hasOwnProperty('additionalInfo') &&\r\n        //     JSON.parse(parameter.jsondata['value'])['additionalInfo'] !== \"\" ? true : false :\r\n        //     parameter.jsondata.hasOwnProperty('additionalInfo') &&\r\n        //         parameter.jsondata['additionalInfo'] !== \"\" ? true : false\r\n        switch (parameter.nparametertypecode) {\r\n            case 1: {\r\n                return (\r\n                    <>\r\n                        <div className='row w-100'>\r\n                            <Col md={6}>\r\n                                <FormInput\r\n                                    name={this.state.parameterResults[index].ntransactionresultcode}\r\n                                    type=\"text\"\r\n                                    required={false}\r\n                                    isMandatory={false}\r\n                                    // value={this.props.parameterResults.length > 0 ?\r\n                                    //     this.props.parameterResults[index] ? (this.props.parameterResults[index]['sresult'] !== null ? this.props.parameterResults[index]['sresult'] : \"\") : \"\" : \"\"}\r\n                                    value={this.state.parameterResults.length > 0 ?\r\n                                        this.state.parameterResults[index] ? (this.state.parameterResults[index]['sresult'] !== null ? this.state.parameterResults[index]['sresult'] : \"\") : \"\" : \"\"}\r\n                                    // placeholder={parameter.sparametersynonym}\r\n                                    //label={parameter.sparametersynonym}\r\n                                    // onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                    onChange={(event) => this.onResultInputChange(event, index, parameter)}\r\n                                    onBlur={() => this.onGradeEvent(this.state.parameterResults, index, parameter)}\r\n                                    // onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                                    maxLength={9}\r\n                                    onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                                />\r\n                            </Col>\r\n                            {parameter.ntestgrouptestformulacode > 0 ?\r\n                                <Col md={2} className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                    <Nav.Link title=\"Calculate Formula\" className=\"btn btn-circle outline-grey ml-2\" role=\"button\" id={screenName + -+index}\r\n                                        onClick={(event) => this.props.getFormula(parameter, this.props.Login.userInfo, this.props.Login.masterData, index, event)}>\r\n                                        <FontAwesomeIcon title=\"Calculate Formula\" icon={faCalculator} />\r\n                                    </Nav.Link>\r\n                                </Col>\r\n                                : \"\"}\r\n                            <Col md={4}>\r\n                                {/* {this.props.selectedResultGrade.length > 0 ? */}\r\n                                <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                    {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>\r\n                                {/* : \"\"} */}\r\n                            </Col>\r\n                        </div>\r\n                    </>\r\n                );\r\n            }\r\n            case 2: {\r\n                return (\r\n                    <>\r\n                        <Col md={isAdditionalInfoRequired ? 8 : 10} className=\"pl-0\" >\r\n                            <FormSelectSearch \r\n                                name={this.state.parameterResults[index] && this.state.parameterResults[index].ntransactionresultcode}\r\n                                as={\"select\"}\r\n                                //formLabel={parameter.sparametersynonym}\r\n\r\n                                defaultValue={{\r\n                                    \"value\": this.state.parameterResults[index] &&\r\n                                        this.state.parameterResults[index].sresultpredefinedname, \"label\":\r\n                                        this.state.parameterResults[index] && this.state.parameterResults[index]\r\n                                            .sresultpredefinedname\r\n                                }}\r\n\r\n                                //  defaultValue={{ \"value\": parameter.sresultpredefinedname, \"label\": parameter.sresultpredefinedname }}\r\n\r\n\r\n                                //  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\r\n                                //  this.props.predefinedValues ? constructOptionList(this.props.predefinedValues[parameter.ntransactionresultcode]||[],'ngradecode',\r\n                                // 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\r\n\r\n                                options={this.props.predefinedValues ? this.props.predefinedValues[parameter.ntransactionresultcode] : \"\"}\r\n                                optionId={\"ntestgrouptestpredefcode\"}\r\n                                optionValue={\"spredefinedname\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                matchFrom={'start'}\r\n                                isSearchable={true}\r\n                                isClearable={parameter.nresultmandatory === transactionStatus.YES ? false : true}\r\n                                isMandatory={false}\r\n                                onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                                // onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                // onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n\r\n                                onChange={(event) => this.onResultInputChange(event, index, parameter)}\r\n                                onBlur={() => this.onGradeEvent(this.state.parameterResults, index, parameter)}\r\n \r\n                            />\r\n                        </Col>\r\n                        <Col md={2} className=\"pt-2\">\r\n                            {/* {this.props.selectedResultGrade.length > 0 ? */}\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>\r\n                            {/* : \"\"} */}\r\n                        </Col>\r\n                        {isAdditionalInfoRequired &&\r\n\r\n                            <Col md={2} className=\"pt-2\">\r\n                                {/* <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                     //   hidden={this.props.userRoleControlRights.indexOf(this.props.viewId) === -1}\r\n                                        title={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                        data-tip={  parameter.jsondata['value'] ?\r\n                                        JSON.parse(parameter.jsondata['value'])['additionalInfo'] :\r\n                                        parameter.jsondata['additionalInfo']}\r\n                                        data-for=\"tooltip_list_wrap\"\r\n                                         onClick={() => this.props.viewAdditionalInfo(parameter.ntransactionresultcode)}\r\n                                        >\r\n                                        <FontAwesomeIcon icon={faEye}/>\r\n                                     </Button>     */}\r\n                                {/* <Modal.Title id=\"password\" className=\"header-primary flex-grow-1\">\r\n                                      <FormattedMessage id='IDS_ADDITIONALINFOREQURIED' defaultMessage='Cancel' />\r\n                                      </Modal.Title> */}\r\n\r\n                                <TestPopOver intl={this.props.intl} needIcon={true} needPopoverTitleContent={true} placement=\"left\" stringList={\r\n                                    // parameter.jsondata['value'] ?\r\n                                    //      [JSON.parse(parameter.jsondata['value'])['additionalInfo']] :\r\n                                    //              [parameter.jsondata['additionalInfo']] \r\n                                    this.state.parameterResults[index].hasOwnProperty('additionalInfo') &&\r\n                                    this.state.parameterResults[index]['additionalInfo']!==\"\"&&\r\n                                    [this.state.parameterResults[index]['additionalInfo']]} ></TestPopOver>\r\n                                {/* <Nav.Link\r\n                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                        // data-for=\"tooltip-common-wrap\"\r\n                                        //  data-place={action.dataplace && action.dataplace ? action.dataplace : \"\"}\r\n                                         data-tip={ parameter.jsondata['value'] ?\r\n                                         JSON.parse(parameter.jsondata['value'])['additionalInfo'] :\r\n                                                 parameter.jsondata['additionalInfo'] }\r\n                                        data-html={true}\r\n                                        //   hidden={this.props.userRoleControlRights.indexOf(this.props.viewId) === -1}\r\n                                        onClick={() => this.props.viewAdditionalInfo(parameter.ntransactionresultcode)}>\r\n                                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                                    </Nav.Link>  */}\r\n\r\n                            </Col>\r\n                        }\r\n\r\n                    </>\r\n                );\r\n            }\r\n            case 3: {\r\n                return (\r\n                    <>\r\n                        <Col md={10} className=\"pl-0\">\r\n                            <FormTextarea\r\n                                name={parameter.ntransactionresultcode}\r\n                                //label={parameter.sparametersynonym}\r\n                                //placeholder={parameter.sparametersynonym}\r\n                                type=\"text\"\r\n                                //     defaultValue={parameter.sresult}\r\n                                defaultValue={this.state.parameterResults[index] && this.state.parameterResults[index]['sresult']}\r\n\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={255}\r\n                                onChange={(event) => this.onResultInputChange(event, index, parameter)}\r\n                                onBlur={() => this.onGradeEvent(this.state.parameterResults, index, parameter)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={2}>\r\n                            {/* {this.props.selectedResultGrade.length > 0 ? */}\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>\r\n                            {/* : \"\"} */}\r\n                        </Col>\r\n                    </>\r\n                );\r\n            }\r\n            case 4: {\r\n                return (\r\n                    <Col md={12} className=\"pl-0\">\r\n                        <DropZone\r\n                            maxFiles={1}\r\n                            isMandatory={false}\r\n                            //label={parameter.sparametersynonym}\r\n                            accept=\".pdf\"\r\n                            minSize={0}\r\n                            maxSize={20}\r\n                            multiple={false}\r\n                            // editFiles={parameter.sfinal != null ? parameter : \"\"}\r\n                            editFiles={this.state.parameterResults[index].sfinal != null ? this.state.parameterResults[index] : \"\"}\r\n\r\n                            attachmentTypeCode={attachmentType.FTP}\r\n                            fileSizeName=\"nfilesize\"\r\n                            fileName=\"sfinal\"\r\n                            index={index}\r\n                            // deleteAttachment={this.props.deleteAttachmentParamFile}\r\n                            // onDrop={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                            deleteAttachment={this.deleteAttachmentParameterFile}\r\n                            onDrop={(event) => this.onResultInputChange(event, index, parameter)}\r\n                        //disabled={disabled}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n    }\r\n    // static getDerivedStateFromProps(props, state) {\r\n    //     if( props.Login.showAlert !==  state.showAlert){\r\n    //         //Change in props\r\n    //         return{\r\n    //             showAlert: props.Login.showAlert\r\n    //         };\r\n    //     } \r\n    //     return null; // No change to state\r\n    // }\r\n    componentWillUnmount() {\r\n     \r\n      //  let parameterResults = this.state.parameterResults\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n          //  data: { parameterResults: undefined  }\r\n            data: { isParameterInitialRender: false,parameterResults:[] ,selectedRecord :{} }\r\n\r\n            \r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    \r\n    // shouldComponentUpdate (nextProps,nextState) {\r\n    //     // Rendering the component only if\r\n    //     // passed props value is changed\r\n    //     console.log('nextProps',nextProps);\r\n    //     if ((nextProps.Login.parameterResults !==this.props.Login.parameterResults)) {\r\n    //       return false;\r\n    //     }else if(nextState.parameterResults!==this.state.parameterResults){\r\n    //         return true;\r\n    //     } else {\r\n    //       return false;\r\n    //     }\r\n    //   }\r\n    // shouldComponentUpdate (nextProps) { \r\n    //     if ((nextProps.Login.parameterResults !==this.props.Login.parameterResults)&&\r\n    //     nextProps.Login.isParameterInitialRender===false) {\r\n    //       return false;\r\n    //     } else {\r\n    //       return true;\r\n    //     }\r\n    //   }\r\n\r\n    // componentDidUpdate (prevProps, prevState) {\r\n    //   //  console.log('Deleted User successfully'); \r\n    //     let parameterResults = this.state.parameterResults\r\n    //     if(this.state.parameterResults!==prevState.parameterResults){\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: { parameterResults: parameterResults,isParameterInitialRender:false }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n  \r\n    //   }\r\n\r\n    // this.props.onSaveClick = (childData) =>{\r\n    //     this.setState({name: childData})\r\n    // }\r\n\r\n    // updateStoreResultEntryForm = (updateInfo)  => { \r\n    //     return function (dispatch) {\r\n    //         console.log('updateInfoXXXXX')\r\n    //         dispatch({\r\n    //             type: updateInfo.typeName,\r\n    //             payload: {\r\n    //                 ...updateInfo.data,\r\n    //                 masterStatus: \"\",\r\n    //                 errorCode: undefined\r\n    //             }\r\n    //         }); \r\n    //     } \r\n    // }\r\n    render() {\r\n      //  console.log(\"Grand Child Result Entry Form\");\r\n        return (\r\n            <>\r\n                        {/* <Preloader loading={this.state.loading} /> */}\r\n\r\n            {/* { this.props.index===0&&\r\n                <Button  className=\"btn-user btn-primary-blue\" onClick={() => this.props.onSaveClick(this.state)}>\r\n\r\n                    <FontAwesomeIcon icon={faSave} /> { }\r\n                    <FormattedMessage id='IDS_SAVEFILTER' defaultMessage='Save Filter' />\r\n                </Button> \r\n                \r\n                }     */}\r\n                {//this.props.index===0&&\r\n                    this.state.showAlert &&\r\n                    <ModalShow\r\n                        modalShow={this.state.showAlert}\r\n                        modalTitle={this.props.intl.formatMessage({ id: \"IDS_ADDITIONALINFOREQURIED\" })}\r\n                        closeModal={this.closeModalShow}\r\n                        onSaveClick={this.onModalSave}\r\n                        removeCancel={this.state.showAlertForPredefined || this.state.additionalInfoView ? true : false}\r\n                        needSubmit={this.state.showAlertForPredefined || this.state.additionalInfoView ? true : false}\r\n                        needSave={this.state.showAlertForPredefined || this.state.additionalInfoView ? \"\" : true}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        size={this.state.showAlertForPredefined || this.state.additionalInfoView ? \"\" : 'lg'}\r\n                        showAlertMsg={this.state.showAlertForPredefined ? true : false}\r\n                        modalBody={\r\n                            <ResultEntryPredefinedComments\r\n                                onlyAlertMsgAvailable={this.state.onlyAlertMsgAvailable}\r\n                                salertmessage={this.state.masterData['salertmessage']}\r\n                                showMultiSelectCombo={this.state.showMultiSelectCombo}\r\n                                testgrouptestpredefsubresultOptions={this.state.masterData.testgrouptestpredefsubresultOptions || []}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputChange={this.onInputChange}\r\n                                onComboChange={this.onComboChange}\r\n                            />\r\n                        }\r\n                    />}\r\n\r\n                <Row   >\r\n                    {/* {this.props.parameterResults.map((parameterResult, index) => {\r\n                    return (   */}\r\n                    <>\r\n\r\n                        {this.props.needSubSample && this.props.parameterResults.ssamplearno ?\r\n                            <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                {this.props.parameterResults.ssamplearno}\r\n                                {this.props.parameterResults.stestsynonym ?\r\n                                    <span className={`labelfont`} //style={{ color: \"#505f79\" }}\r\n                                        style={{ color: \"#97a0af\", paddingLeft: '0.2rem' }}>\r\n                                        {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                        {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                        { }{ } {this.props.parameterResults.stestsynonym}\r\n                                        {/* {this.props.parameterResults.sretestrepeatcount} */}\r\n                                    </span>\r\n                                    : \"\"}\r\n                            </MediaHeader>\r\n                            : this.props.parameterResults.sarno ?\r\n                                <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                    {this.props.parameterResults.sarno}\r\n                                    {this.props.parameterResults.stestsynonym ?\r\n                                        <span className={`labelfont`} //style={{ color: \"#505f79\" }}\r\n                                            style={{ color: \"#97a0af\", paddingLeft: '0.2rem' }}>\r\n                                            {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                            {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                            { }{ } {this.props.parameterResults.stestsynonym}\r\n                                            {/* {this.props.parameterResults.sretestrepeatcount} */}\r\n                                        </span>\r\n                                        : \"\"}\r\n                                </MediaHeader>\r\n                                : \"\"\r\n                        }\r\n\r\n                        <Col md={12} className=\"pl-0 mt-2\">\r\n                            <MediaHeader className={`labelfont`} style={{ color: \"#505f79\" }}\r\n                            // style={{ color: \"#97a0af\" }}\r\n                            >\r\n                                {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                {/* <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" />\r\n                                    <FontAwesomeIcon icon={faAngleRight} className=\"DeleteIconColor\" /> */}\r\n                                { }{ } {this.props.parameterResults.sparametersynonym}{ }{ }{this.props.parameterResults.nresultmandatory === transactionStatus.NO ? \"(optional)\" : \"\"}\r\n                            </MediaHeader>\r\n                        </Col>\r\n                        {this.renderSwitch(this.props.parameterResults, this.props.index, this.props.parameterResults.ntransactionresultcode, this.props.Login.screenName)}\r\n                    </>\r\n                    {/* )\r\n            })\r\n            } */}\r\n                </Row ></>\r\n\r\n        )\r\n    }\r\n}\r\n \r\n// export default  \r\n// connect(mapStatetoProps, mapDispatchToProps, {\r\n//    updateStore//,getPredefinedData\r\n// } )\r\n// //connect()\r\n//     (injectIntl(ResultEntryForm)) ;\r\n\r\n    export default connect(null, {\r\n        updateStore \r\n    \r\n    })(injectIntl(ResultEntryForm));"]},"metadata":{},"sourceType":"module"}