{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntry.jsx\";\nimport React, { Component } from 'react';\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Nav, Button } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SplitterLayout from \"react-splitter-layout\";\nimport { ContentPanel } from '../../components/App.styles';\nimport { crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord, completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile, filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate //,deleteResultUsedMaterial\n} from '../../actions';\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties } from '../../components/Enumeration';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport { ProductList } from '../product/product.styled';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ResultEntryFilter from './ResultEntryFilter';\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\nimport ResultEntryForm from './ResultEntryForm';\nimport TestEditForm from './TestEditForm';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\nimport ResultEntryImport from './ResultEntryImport';\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'; // import ReactTooltip from 'react-tooltip';\n\nimport ResultEntryMean from './ResultEntryMean';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\nimport UsedMaterial from './UsedMaterial';\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\n\nclass ResultEntry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.props.Login.masterData.selectedImportFile;\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: { ...this.props.Login.masterData,\n            selectedImportFile: selectedRecord\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let loadFile = this.props.Login.loadFile;\n      let updateInfo = {};\n\n      if (screenName === \"IDS_RESULTFORMULA\") {\n        screenName = \"IDS_RESULTENTRY\";\n        operation = \"update\";\n        let showValidate = !this.props.Login.showValidate;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            operation,\n            showValidate,\n            validateFormulaMandyFields: []\n          }\n        };\n      } else {\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"default\" || this.props.Login.operation === \"deleteTask\" || this.props.Login.operation === \"deleteInstrument\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else if (this.props.Login.operation === \"updatechecklist\") {\n            loadEsign = false;\n            openModal = false;\n          } else {\n            loadEsign = false;\n          }\n        } else {\n          openModal = false;\n          openTemplateModal = false;\n          selectedRecord = {};\n          loadFile = false;\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            screenName,\n            loadEsign,\n            selectedRecord,\n            openTemplateModal,\n            loadFile\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            todate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            nsampletypecode: parseInt(event.value),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationSubType(inputData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationSubType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getREFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultApprovalConfigVersion: event.item,\n            masterData: this.props.Login.masterData,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          };\n          this.props.getREJobStatus(inputData);\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: 1,\n            // parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\n            ntranscode: String(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultFilterStatus: event.item,\n            masterData: this.props.Login.masterData,\n            DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          };\n          this.props.getREFilterTestData(inputData);\n        } else if (fieldname === \"test\") {\n          let defaultTestvalues = event.item;\n          this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {}\n      }\n    };\n\n    this.OnDateConverstion = (date, fieldname) => {\n      const month = validateTwoDigitDate(String(date.getMonth() + 1));\n      const day = validateTwoDigitDate(String(date.getDate()));\n\n      if (fieldname === \"fromDate\") {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\n      } else {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\n      }\n\n      return date;\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realApproveConfigVersion,\n        realFilterStatusValue,\n        realTestcodeValue\n      } = this.props.Login.masterData; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        napprovalversioncode: realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onREFilterSubmit = event => {\n      // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType;\n      let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType;\n      let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType;\n      let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion;\n      let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus;\n      let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode || -1,\n        napprovalversioncode: this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\n        ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        nneedsubsample: this.props.Login.masterData.nneedsubsample || false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onSecondaryPaneSizeChange = (e, val) => {// let hGrand = this.state.grandparentheight\n      // let check = e - 400;\n      // if (check > 1) {\n      //     hGrand = this.state.parentHeight + check\n      // }\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: hGrand - e - 70,\n      //     grandparentheight: hGrand\n      // })\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: this.state.parentHeight - e - 70\n      // })\n    };\n\n    this.onComboCategoryChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\n\n        if (fieldname === \"ninstrumentcatcode\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 2,\n            ninstrumentcatcode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        rsapi.post(uRL, inputData).then(response => {\n          const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n          const TagListInstrument = TagInstrument.get(\"OptionList\");\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                Instrument: TagListInstrument\n              },\n              selectedRecord: { ...this.props.Login.selectedRecord,\n                [fieldname]: event,\n                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo); // const selectedRecord = this.state.selectedRecord || {};\n          // selectedRecord[fieldname] = event;\n          // this.setState({ selectedRecord });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.testRETabDetail = () => {\n      const testTabMap = new Map(); //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      testTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 39\n        }\n      }));\n      testTabMap.set(\"IDS_INSTRUMENT\", /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 699,\n          columnNumber: 42\n        }\n      }));\n      testTabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(UsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 40\n        }\n      }));\n      testTabMap.set(\"IDS_TASK\", /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 36\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"dcreateddate\"\n        }],\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        masterData: this.props.Login.masterData,\n        isTestComment: true,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 799,\n          columnNumber: 44\n        }\n      }));\n      testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        userInfo: this.props.Login.userInfo,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 847,\n          columnNumber: 51\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleKey) {\n        case \"IDS_APPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeTestKey) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.subsampleTabDetail = () => {\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1080,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1120,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          RESelectedSample: this.props.Login.masterData.RESelectedSample,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestKey = tabProps.screenName;\n\n      if (activeTestKey !== this.props.Login.activeTestKey) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\n            //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\n            //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestKey,\n            screenName: activeTestKey,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testMethodSourceEdit = test => {\n      this.props.testMethodSourceEdit(test);\n    };\n\n    this.addREInstrument = test => {\n      this.props.addREInstrument(test);\n    };\n\n    this.deleteInstrumentRecord = test => {\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteInstrument\",\n        screenName: \"deleteInstrumentAction\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteInstrumentAction\",\n            operation: \"deleteInstrument\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteInstrumentRecord(test);\n      }\n    };\n\n    this.fetchInstrumentRecord = test => {\n      this.props.fetchInstrumentRecord(test);\n    };\n\n    this.fetchMaterialRecord = test => {\n      this.props.fetchMaterialRecord(test);\n    };\n\n    this.deleteMaterialRecord = test => {\n      let inputParam = {\n        inputData: { ...test.selectedRecord,\n          ntransactiontestcode: test.masterData.RESelectedTest ? test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n          userinfo: this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        classUrl: 'resultentrybysample',\n        methodUrl: \"ResultUsedMaterial\",\n        operation: \"delete\",\n        screenName: \"deleteMaterialAction\",\n        displayName: this.props.Login.inputParam.displayName,\n        //, postParam,\n        //test: test\n        nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteMaterialAction\",\n            operation: \"deleteMaterial\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\"); //this.props.deleteResultUsedMaterial(test)\n      }\n    };\n\n    this.deleteTaskRecord = test => {\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteTask\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteTaskaction\",\n            operation: \"deleteTask\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteTaskRecord(test);\n      }\n    };\n\n    this.fetchTaskRecord = test => {\n      this.props.fetchTaskRecord(test);\n    };\n\n    this.addResultEntryTask = inputData => {\n      let selectedRecord = {};\n      selectedRecord = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          operation: \"create\",\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          activeTestKey: \"IDS_TASK\",\n          ncontrolcode: inputData.addResultUsedTaskId,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkListRecord = parameterData => {\n      this.props.checkListRecord(parameterData, this.props.Login.userInfo);\n    };\n\n    this.getFormula = (parameterData, userInfo, masterData, index, event) => {\n      this.setState({\n        modalEvent: event.currentTarget\n      });\n      this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord);\n    };\n\n    this.calculateFormula = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const selectedForumulaInput = selectedRecord.selectedForumulaInput || [];\n      let lstDynamicFields = [];\n\n      if (selectedForumulaInput) {\n        selectedForumulaInput.map(dynamicfields => lstDynamicFields.push(dynamicfields));\n        const inputData = {\n          masterData: this.props.Login.masterData,\n          lstDynamicFields: lstDynamicFields,\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: selectedRecord,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\n          ResultParameter: this.state.selectedRecord.ResultParameter || {}\n        };\n        this.props.calculateFormula(inputData);\n      }\n    };\n\n    this.resultImport = () => {\n      this.props.Login.masterData.selectedImportFile = [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation: \"create\",\n          screenName: \"IDS_RESULTIMPORTFILE\",\n          openModal: true,\n          loadFile: true,\n          activeTestKey: \"IDS_RESULTS\",\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take,\n        sampletakeDataState: e.take\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\n      const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n      const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'nregtypecode': nregtypecode,\n            'nregsubtypecode': nregsubtypecode,\n            'ncontrolcode': setDefaultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"default\",\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: { ...testChildGetREParam,\n            ncontrolcode: setDefaultId\n          },\n          RESelectedTest: acceptTestList,\n          RESelectedSample: RESelectedSample\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"defaultaction\",\n              operation: \"default\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTTEST\"\n        }));\n      }\n    };\n\n    this.completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        let inputParam = {\n          \"inputData\": {\n            userinfo: userInfo\n          }\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              selectedRecord,\n              userInfo,\n              nregtypecode,\n              nregsubtypecode,\n              inputParam,\n              operation: \"updatechecklist\"\n            },\n            openModal: true,\n            operation: \"updatechecklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" || this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\n        this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedImportFile = this.props.Login.masterData.selectedImportFile;\n      const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFile && acceptedFile.length > 0) {\n        acceptedFile.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFile.length);\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\n      formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\n      this.props.resultImportFile(formData, this.props.Login.masterData);\n    };\n\n    this.onDropFile = acceptedFile => {\n      // let selectedImportFile = this.props.Login.masterData.selectedImportFile || [];\n      // selectedImportFile['sfilename'] = acceptedFile;\n      this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({selectedImportFile});\n    };\n\n    this.onFormulaInputChange = (event, index, fields) => {\n      let selectedRecord = this.state.selectedRecord;\n      let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\n      let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\n      let dynamicformulafields = {};\n\n      if (event) {\n        if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\n          const value = event.target.value.replace(/[^-^0-9]/g, '');\n\n          if (/^-?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        } else {\n          const value = event.target.value.replace(/[^-^0-9.]/g, '');\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          } // else {\n          //     dynamicformulafields.svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\n          //     selectedForumulaInput[index].svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\n          // }\n\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control); //this.setState({selectedRecord});\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (Data) {\n        selectedRecord[name] = Data.target.value; //this.setState({selectedRecord});\n      } else {\n        selectedRecord[name] = []; //this.setState({selectedRecord});\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onNumericChange = (numericData, numericName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecord[numericName] = numericData; //this.setState({selectedRecord});\n        } else {\n          selectedRecord[numericName] = numericData.target.value; //this.setState({selectedRecord});\n        }\n      } else {\n        selectedRecord[numericName] = \"\"; //this.setState({selectedRecord});\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onDateChange = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      selectedRecord[dateName] = dateValue;\n\n      if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { selectedRecord: selectedRecord }\n        // }\n        //this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n\n      if (checked) {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\n          return item;\n        });\n        let selectedTestParam = \"\";\n        let selectedTestParamMean = 0;\n        let size = 0;\n\n        if (selectedMeanTestParam.size > 0) {\n          [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n          selectedTestParamMean = selectedTestParamMean / size;\n        }\n\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam,\n          selectedTestParam,\n          testMean: selectedTestParamMean,\n          selectAll: checked\n        });\n      } else {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          return item;\n        });\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam: new Map(),\n          selectedTestParam: \"\",\n          testMean: \"\",\n          selectAll: checked\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n      meanTestParameterList.map(item => {\n        if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\n          item.selected = !event.dataItem.selected;\n        }\n\n        return item;\n      });\n\n      if (event.dataItem.selected) {\n        selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\n      } else {\n        if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\n          selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode);\n        }\n      }\n\n      let selectedTestParam = \"\";\n      let selectedTestParamMean = 0;\n      let size = 0;\n\n      if (selectedMeanTestParam.size > 0) {\n        [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n        selectedTestParamMean = selectedTestParamMean / size;\n      }\n\n      this.setState({\n        meanTestParameterList,\n        selectedMeanTestParam,\n        selectedTestParam,\n        testMean: selectedTestParamMean,\n        selectAll: this.valiateCheckAll(meanTestParameterList)\n      });\n    };\n\n    this.onMeanComboChange = (comboData, comboName) => {\n      const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\n      selectedMeanTestParam[comboName] = comboData[0];\n      let data = \"\";\n\n      if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\n        data = comboData[0].value;\n      } else {\n        data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\n      }\n\n      selectedMeanTestParam[\"parametervalue\"] = data;\n      this.setState({\n        selectedMeanTestParam\n      });\n    };\n\n    this.onMaterialComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      switch (comboName) {\n        case 'nmaterialtypecode':\n          this.props.getREMaterialCategoryByType({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcatcode':\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.RESelectedTest[0].nsectioncode;\n          this.props.getREMaterialByCategory({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcode':\n          this.props.getREMaterialInvertoryByMaterial({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.props.getAvailableMaterialQuantity({\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onGradeEvent = (ResultParameter, index, parameter) => {\n      if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: ResultParameter[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          }\n        } //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\n\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { masterData: this.props.Login.masterData }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.onKeyPress = (event, index, paremterResultcode) => {\n      if (event.keyCode === 13) {\n        for (let i = 0; i < event.target.form.elements.length; i++) {\n          if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\n            event.target.form.elements[i].focus();\n            break;\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    this.onResultInputChange = (event, index, parameter) => {\n      //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\n      let selectedRecord = this.state.selectedRecord || [];\n      let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\n      let sresult = \"\";\n      let value = -1;\n      let acceptedFile = [];\n      let ncalculatedresult;\n\n      if (parameter.nparametertypecode === parameterType.NUMERIC) {\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n          sresult = event.target.value;\n          ncalculatedresult = 4;\n        } else {\n          sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\n          ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        if (event != null) {\n          sresult = event.item.spredefinedname;\n          value = event.item.ngradecode;\n          ncalculatedresult = 4;\n        } else {\n          sresult = \"\";\n          value = -1;\n          ncalculatedresult = 4;\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.CHARACTER) {\n        sresult = event.target.value;\n        ncalculatedresult = 4;\n      }\n\n      if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n        sresult = event[0].name;\n        acceptedFile = event;\n        ncalculatedresult = 4;\n      }\n\n      ResultParameter[index]['sresult'] = sresult;\n      ResultParameter[index]['sfinal'] = sresult;\n      ResultParameter[index]['acceptedFile'] = acceptedFile;\n      ResultParameter[index]['editable'] = true;\n      ResultParameter[index]['ngradecode'] = value;\n      ResultParameter[index]['ncalculatedresult'] = ncalculatedresult; // this.props.Login.masterData.ResultParameter = ResultParameter;\n\n      selectedRecord.ResultParameter = ResultParameter;\n      this.setState({\n        selectedRecord: selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: this.props.Login.masterData }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveMean = saveType => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      let resultParameter = this.props.Login.selectedTestParameterMean || {}; //let resultParameter = { };\n\n      resultParameter[\"ncalculatedresult\"] = 4;\n      resultParameter[\"sresult\"] = this.state.testMean;\n      resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\n      resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\n      resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n      resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode; // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\n      // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\n      // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\n      //console.log(\"result:\", resultParameter);\n\n      const formData = new FormData();\n      formData.append(\"filecount\", 0);\n      formData.append(\"nregtypecode\", nregtypecode);\n      formData.append(\"nregsubtypecode\", nregsubtypecode);\n      formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n      formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\n      formData.append(\"resultData\", JSON.stringify([resultParameter]));\n      const inputParam = {\n        classUrl: \"resultentrybysample\",\n        methodUrl: \"TestParameterResult\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: \"update\",\n        displayName: this.props.Login.inputParam.displayName,\n        saveType\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = saveType => {\n      if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\n        this.onSaveMean(saveType);\n      } else {\n        let ResultParameter = this.state.selectedRecord.ResultParameter || [];\n        let selectedRecord = this.state.selectedRecord || {};\n        let selectedId = this.props.Login.selectedId || null;\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n        const classUrl = \"resultentrybysample\";\n        const formData = new FormData();\n        let neditable = 0;\n        let resultParameters = [];\n        let inputParam = {};\n        let inputData = [];\n        let i = 0; //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\n          if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n            ResultParameter.map((resultData, index) => {\n              let results = {};\n\n              if (resultData.editable === true) {\n                neditable = 1;\n\n                switch (resultData.nparametertypecode) {\n                  case 1:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: resultData[\"ncalculatedresult\"],\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                    results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 2:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.ngradecode;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 3:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = grade.FIO;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 4:\n                    if (resultData.acceptedFile !== undefined) {\n                      const splittedFileName = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.') : \"\";\n                      const fileExtension = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = create_UUID() + '.' + fileExtension;\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.acceptedFile[0].size,\n                        ncalculatedresult: 4,\n                        sresult: resultData.sresult,\n                        sfinal: resultData.sresult\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = grade.FIO;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = uniquefilename;\n                      results[\"nfilesize\"] = resultData.acceptedFile[0].size;\n                      formData.append(\"uploadedFile\" + index, resultData.acceptedFile[0]);\n                      formData.append(\"uniquefilename\" + index, uniquefilename);\n                      formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n                      i++;\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n\n                if (Object.values(results).length > 0) {\n                  resultParameters.push(results);\n                }\n              }\n\n              return null;\n            });\n\n            if (neditable === 0) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n\n            formData.append(\"filecount\", i);\n            formData.append(\"nregtypecode\", nregtypecode);\n            formData.append(\"nregsubtypecode\", nregsubtypecode);\n            formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n            formData.append(\"resultData\", JSON.stringify(resultParameters));\n            const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n            formData.append(\"transactiontestcode\", tests); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"TestParameterResult\",\n              inputData: {\n                userinfo: this.props.Login.userInfo\n              },\n              formData: formData,\n              isFileupload: true,\n              operation: \"update\",\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //, postParam\n\n            };\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false,\n                openModal: false\n              }\n            };\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\n          inputData = {\n            ntype: 3,\n            nflag: 3,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\n            ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n            nmethodcode: selectedRecord.nmethodcode.value,\n            nsourcecode: selectedRecord.nsourcecode.value,\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: \"IDS_RESULTS\",\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"TestMethodSource\",\n          //     inputData: inputData,\n          //     isFileupload: false,\n          //     operation: \"update\",\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\n          let inputData = [];\n\n          if (this.props.Login.operation === \"update\") {\n            inputData = {\n              ResultUsedInstrument: {\n                nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value,\n                ntransactiontestcode: selectedRecord.ntransactiontestcode\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n            };\n          } else {\n            inputData = {\n              ResultUsedInstrument: {\n                ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                npreregno: selectedRecord.npreregno,\n                ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecord.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecord.dfromdate, false),\n                dtodate: formatInputDate(selectedRecord.dtodate, false),\n                stzfromdate: selectedRecord.ntzfromdate.label,\n                stztodate: selectedRecord.ntztodate.label,\n                ntzfromdate: selectedRecord.ntzfromdate.value,\n                ntztodate: selectedRecord.ntztodate.value\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n            };\n          }\n\n          inputParam = {\n            classUrl: classUrl,\n            methodUrl: \"ResultUsedInstrument\",\n            inputData: inputData,\n            selectedId,\n            isFileupload: false,\n            activeTestKey: \"IDS_INSTRUMENT\",\n            operation: this.props.Login.operation,\n            displayName: this.props.Login.inputParam.displayName,\n            saveType //postParam\n\n          };\n        }\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          let inputData = [];\n\n          if (this.state.selectedRecord.nmaterialcode != \"\") {\n            if (this.state.selectedRecord.nmaterialinventorycode != \"\") {\n              if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\n                if (this.props.Login.operation === \"update\") {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\n                      ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                      npreregno: selectedRecord.npreregno,\n                      nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecord.nmaterialcategorycode.value,\n                      nmaterialcode: selectedRecord.nmaterialcode.value,\n                      ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecord.sarno,\n                        ssamplearno: selectedRecord.ssamplearno,\n                        stestsynonym: selectedRecord.stestsynonym,\n                        smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                        smaterialname: selectedRecord.nmaterialcode.label,\n                        sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity,\n                        scarriergas: selectedRecord.scarriergas,\n                        smobilephase: selectedRecord.smobilephase,\n                        sremarks: selectedRecord.sremarks,\n                        susername: this.props.Login.userInfo.susername,\n                        nsectioncode: selectedRecord.nsectioncode,\n                        ssectionname: selectedRecord.ssectionname\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n                  };\n                } else {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      ntransactiontestcode: selectedRecord.ntransactiontestcode,\n                      npreregno: selectedRecord.npreregno,\n                      nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\n                      nmaterialcode: selectedRecord.nmaterialcode.value,\n                      ninventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecord.sarno,\n                        ssamplearno: selectedRecord.ssamplearno,\n                        stestsynonym: selectedRecord.stestsynonym,\n                        smaterialcatname: selectedRecord.nmaterialcatcode.label,\n                        smaterialname: selectedRecord.nmaterialcode.label,\n                        sinventoryid: selectedRecord.nmaterialinventorycode.label,\n                        nqtyused: selectedRecord.susedquantity,\n                        scarriergas: selectedRecord.scarriergas,\n                        smobilephase: selectedRecord.smobilephase,\n                        sremarks: selectedRecord.sremarks,\n                        smaterialtypename: selectedRecord.nmaterialtypecode.label,\n                        nsectioncode: selectedRecord.nsectioncode,\n                        ssectionname: selectedRecord.ssectionname\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecord.nsectioncode,\n                      jsondata: {\n                        nqtyused: selectedRecord.susedquantity,\n                        IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n                  };\n                }\n\n                inputParam = {\n                  classUrl: classUrl,\n                  methodUrl: \"ResultUsedMaterial\",\n                  inputData: inputData,\n                  selectedId,\n                  isFileupload: false,\n                  activeTestKey: \"IDS_MATERIAL\",\n                  operation: this.props.Login.operation,\n                  displayName: this.props.Login.inputParam.displayName,\n                  saveType //postParam\n\n                };\n              } else {\n                toast.warn(this.props.intl.formatMessage({\n                  id: \"Quantity Not available\"\n                }));\n                return null;\n              }\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"Select Material Inventory\"\n              }));\n              return null;\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"Select Material\"\n            }));\n            return null;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TASK\") {\n          if (selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\" || selectedRecord.smisctime && selectedRecord.smisctime !== \"\" || selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\" || selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\" || selectedRecord.scomments && selectedRecord.scomments !== \"\") {\n            if (this.props.Login.operation === \"update\") {\n              inputData = {\n                ResultUsedTasks: {\n                  nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\n                  jsondata: {\n                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\n                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\n                    stestsynonym: selectedRecord.stestsynonym,\n                    sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                    sanalyst: this.props.Login.userInfo.susername,\n                    smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                    spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                    spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                    scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                  }\n                },\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode\n              };\n            } else {\n              let taskArry = [];\n              this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(test => taskArry.push({\n                //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                ntransactiontestcode: parseInt(test.ntransactiontestcode),\n                npreregno: parseInt(test.npreregno),\n                // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                // sanalyst: this.props.Login.userInfo.susername,\n                // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\n                // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n                jsondata: {\n                  //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                  sarno: test.sarno,\n                  ssamplearno: test.ssamplearno,\n                  stestsynonym: test.stestsynonym,\n                  sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                  sanalyst: this.props.Login.userInfo.susername,\n                  smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                  spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                  spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                  scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\n                }\n              }));\n              inputData = {\n                ResultUsedTasks: taskArry,\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode\n              };\n            }\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultUsedTasks\",\n              inputData: inputData,\n              selectedId,\n              activeTestKey: \"IDS_TASK\",\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_ENTERTASKTIME\"\n            }));\n            return;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\n          inputData = {\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            ntransactionresultcode: selectedRecord.ntransactionresultcode,\n            sresultcomment: selectedRecord.sresultcomment,\n            transactiontestcode: selectedRecord.transactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: nregtypecode,\n            nregsubtypecode: nregsubtypecode,\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"ParameterComments\",\n          //     inputData: inputData, selectedId,\n          //     isFileupload: false,\n          //     operation: this.props.Login.operation,\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\n          let lstResultCheckList = [];\n\n          if (selectedRecord && selectedRecord.editedQB) {\n            selectedRecord.editedQB.map(qbcode => lstResultCheckList.push(selectedRecord[qbcode]));\n            inputData = {\n              ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n              ntransactionresultcode: selectedRecord.ntransactionresultcode,\n              transactiontestcode: selectedRecord.transactiontestcode,\n              ResultCheckList: lstResultCheckList,\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode\n            };\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultEntryChecklist\",\n              inputData: inputData,\n              selectedId,\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          }\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.state = {\n      // sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\n      // resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\n      // sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\n      // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'stestsynonym' }] \n\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"\",\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      tabPane: 0,\n      subsampleskip: 0,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      selectedRecord: {},\n      validateFormulaMandyFields: [],\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      subSampleSkip: 0,\n      subSampleTake: 5,\n      // subsampletake: this.props.Login.settings\n      // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      initialVerticalWidth: \"57vh\",\n      enablePin: false\n    };\n    this.formRef = React.createRef(); //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  showRESampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showRETestList() {\n    this.setState({\n      showTest: true,\n      showSample: false,\n      showSubSample: false\n    });\n  } // getMeanTestParameter =(meanParam)=>{\n  //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\n  //                        userinfo:this.props.Login.userInfo}\n  //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\n  //         .then(response => {\n  //            const list =  response.data || [];\n  //            const optionList = [];\n  //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\n  //            this.setState({meanTestParameterList:optionList});                \n  //         })\n  //         .catch(error => {\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             } else {\n  //                 toast.warn(error.response.data);\n  //             }\n  //         })\n  // }\n\n\n  showRESubSampleinfo() {\n    this.setState({\n      showSample: false,\n      showTest: true,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  // sampleTabDetail = () => {\n  //     const tabMap = new Map();\n  //     {\n  //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\n  //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\n  //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\n  //                 SingleItem={this.state.SingleItem}\n  //                 screenName=\"IDS_SAMPLEINFO\"\n  //             />) :\n  //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\n  //                 selectedSample={this.props.Login.masterData.RESelectedSample}\n  //                 dataState={this.state.dataState}\n  //                 dataStateChange={this.dataStateChange}\n  //                 detailedFieldList={this.state.SampleGridExpandableItem}\n  //                 extractedColumnList={this.state.SampleGridItem}\n  //                 userInfo={this.props.Login.userInfo}\n  //                 inputParam={this.props.Login.inputParam}\n  //                 screenName=\"IDS_SAMPLEGRID\"\n  //             />)\n  //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\n  //         return tabMap;\n  //     }\n  // }\n  sampleTabDetail() {\n    const tabMap = new Map();\n    let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n    tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n      screenName: \"IDS_SAMPLEATTACHMENTS\",\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      attachments: this.props.Login.masterData.RegistrationAttachment || [],\n      deleteRecord: this.props.deleteAttachment,\n      onSaveClick: this.onAttachmentSaveClick,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n      fetchRecord: this.props.getAttachmentCombo,\n      addName: \"AddSampleAttachment\",\n      editName: \"EditSampleAttachment\",\n      deleteName: \"DeleteSampleAttachment\",\n      viewName: \"ViewSampleAttachment\",\n      methodUrl: \"SampleAttachment\",\n      deleteParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: this.props.Login.screenName\n      },\n      editParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        masterList: this.props.Login.masterData.RESelectedSample\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n      screenName: \"IDS_SAMPLECOMMENTS\",\n      onSaveClick: this.onCommentsSaveClick,\n      selectedMaster: \"RESelectedSample\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      Comments: this.props.Login.masterData.RegistrationComment || [],\n      fetchRecord: this.props.getCommentsCombo,\n      masterData: this.props.Login.masterData,\n      addName: \"AddSampleComment\",\n      editName: \"EditSampleComment\",\n      deleteName: \"DeleteSampleComment\",\n      methodUrl: \"SampleComment\",\n      isTestComment: false,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n      primaryKeyField: \"nregcommentcode\",\n      dataState: this.state.testCommentDataState,\n      dataStateChange: this.testDataStateChange,\n      deleteParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\"\n      },\n      editParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        operation: \"update\",\n        masterList: this.props.Login.masterData.RESelectedSample || [],\n        ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 42\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\", /*#__PURE__*/React.createElement(SampleApprovalHistory, {\n      userInfo: this.props.Login.userInfo,\n      ApprovalHistory: this.props.Login.masterData.SampleApprovalHistory,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleHistoryDataState,\n      dataStateChange: this.sampleDataStateChange,\n      masterData: this.props.Login.masterData,\n      screenName: \"IDS_SAMPLEAPPROVALHISTORY\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedId: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1052,\n        columnNumber: 13\n      }\n    }));\n    return tabMap;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n    }\n\n    return url;\n  }\n\n  render() {\n    let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : []; //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n\n    let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []; //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\n\n    let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : [];\n    const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n    const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n    let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n    const fromDate = obj.fromDate;\n    const toDate = obj.toDate;\n    let subSampleGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      fromdate: fromDate,\n      todate: toDate,\n      activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef,\n      nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n      //Aravindh\n      checkBoxOperation: 3\n    };\n    let testGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      historyDataState: this.state.historyDataState,\n      samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n      sampleHistoryDataState: this.state.sampleHistoryDataState\n    };\n    let testChildGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n      fromdate: fromDate,\n      todate: toDate,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n    };\n    let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\", \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\", \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"RE_SAMPLE\",\n      selectedObject: \"RESelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n        //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        nneedsubsample: this.props.Login.masterData.nneedsubsample == 3 ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: sampleSearchField,\n      changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"RE_SUBSAMPLE\",\n      selectedObject: \"RESelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\n        nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: ['ssamplearno'],\n      changeList: [\"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RE_TEST\",\n      selectedObject: \"RESelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\n      changeList: [\"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedTest\"],\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      checkBoxOperation: 3\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: filterSampleParam,\n      selectedObject: \"RESelectedSample\",\n      inputListName: \"RE_SAMPLE\",\n      updatedListname: \"\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: testGetREParam,\n      selectedObject: \"RESelectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      inputListName: \"RE_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      clearFilter: \"yes\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchSampleRef,\n        childFilteredListName: \"\"\n      }],\n      fecthInputObject: testChildGetREParam,\n      selectedObject: \"RESelectedTest\",\n      inputListName: \"RE_TEST\",\n      updatedListname: \"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    }, {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"-\" :\n      // this.props.Login.masterData.RegistrationSubType ?\n      //     this.props.Login.masterData.RegistrationSubType[0].sregsubtypename : \"-\"\n\n    }, {\n      \"label\": \"IDS_CONFIGVERSION\",\n      \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\n    }, {\n      \"label\": \"IDS_TEST\",\n      \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\n    }];\n    const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode;\n    const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode;\n    const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n    const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode;\n    const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode;\n    const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode;\n    const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode; //const addResultUsedTaskId = this.state.controlMap.has(\"AddResultUsedTask\") && this.state.controlMap.get(\"AddResultUsedTask\").ncontrolcode\n    //const parameterCommentsId = this.state.controlMap.has(\"AddParameterComments\") && this.state.controlMap.get(\"AddParameterComments\").ncontrolcode\n\n    const mandatoryFieldsInstrument = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"ninstrumentcatcode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENT\",\n      \"dataField\": \"ninstrumentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FORMDATE\",\n      \"dataField\": \"dfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TODATE\",\n      \"dataField\": \"dtodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntztodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsTask = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREANALYSISTIME\",\n      \"dataField\": \"spreanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREPARATIONTIME\",\n      \"dataField\": \"spreparationtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ANALYSISTIME\",\n      \"dataField\": \"sanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MISCTIME\",\n      \"dataField\": \"smisctime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } //{ \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\" }\n    ];\n    const mandatoryFieldsTestMethodSource = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"nsourcecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"nmethodcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }]; // const mandatoryFieldsCheckList=[{\"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\" },\n    //    { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\"}]\n\n    const mandatoryFieldsParameter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PARAMETERCOMMENTS\",\n      \"dataField\": \"sresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const validateFormulaMandyFields = this.state.validateFormulaMandyFields; // const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\" },\n    // { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\" }]\n\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1877,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1878,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1879,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1880,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1881,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showRESampleInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1883,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1886,\n        columnNumber: 25\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1891,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabREDetail,\n      inputParam: testChildGetREParam,\n      subFieldsLabel: true,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"RESelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      showStatusName: true,\n      selectionFieldName: \"sfilterstatus\",\n      childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n      selectionList: this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : [],\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      selectionColorField: \"scolorhexcode\",\n      showMoreResetList: true,\n      showMoreResetListName: \"RE_SAMPLE\",\n      buttonCount: 5,\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDINSTRUMENT\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1,\n        onClick: this.addREInstrument,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedInstrumentId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDMATERIAL\"\n        }),\n        controlname: \"faFlask\",\n        hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1,\n        onClick: this.props.addREMaterial,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedMaterailId\n        }\n      } // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\n      ],\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1943,\n          columnNumber: 29\n        }\n      }, testListRE.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_TESTSTART\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1953,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1957,\n          columnNumber: 45\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(resultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1962,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1963,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_FILLDEFAULTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(setDefaultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1965,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilRuler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1966,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1968,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheckCircle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1969,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTRESULT\"\n        }),\n        hidden: true,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1971,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1972,\n          columnNumber: 45\n        }\n      }))) : \"\") // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1892,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage,\n        onSecondaryPaneSizeChange: this.paneSizeChange,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1988,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1995,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1996,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1997,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1998,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2001,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n        paneHeight: this.state.initialVerticalWidth,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleListRE,\n        selectedMaster: this.props.Login.masterData.RESelectedSubSample,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: this.props.getTestREDetail,\n        inputParam: testGetREParam,\n        additionalParam: [],\n        mainField: \"ssamplearno\",\n        selectedListName: \"RESelectedSubSample\",\n        objectName: \"subSample\",\n        listName: \"IDS_SUBSAMPLE\",\n        jsonField: 'jsondata',\n        jsonDesignFields: true,\n        subFields: this.state.DynamicSubSampleColumns,\n        moreField: this.state.subSampleMoreField,\n        needValidation: false,\n        needMultiSelect: true,\n        needFilter: false,\n        skip: this.state.subSampleSkip,\n        take: this.state.subSampleTake,\n        handlePageChange: this.handleSubSamplePageChange,\n        showStatusLink: true,\n        showStatusName: true,\n        selectionList: this.state.selectedFilter,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        childTabsKey: [\"RE_TEST\"],\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: filterSubSampleParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2002,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2047,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2048,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2049,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2051,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2052,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange} \n      ,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2053,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      clickIconGroup: true // paneHeight={this.state.parentHeight}\n      ,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleREDetail,\n      inputParam: subSampleGetREParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sarno\",\n      selectedListName: \"RESelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      needValidation: false,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSampleColumns || [],\n      moreField: this.state.sampleMoreField,\n      needFilter: true,\n      needMultiSelect: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onREFilterSubmit,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      handlePageChange: this.handlePageChange,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      hidePaging: false,\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\" //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\"],\n      selectionList: this.state.selectedFilter,\n      selectionColorField: \"scolorhexcode\",\n      selectionField: \"ntransactionstatus\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(ResultEntryFilter, {\n          fromDate: this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.props.Login.masterData.defaultRegistrationSubType || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.REFilterStatus || [],\n          FilterStatusValue: this.props.Login.masterData.defaultFilterStatus || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalConfigVersion || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          TestValue: this.props.Login.masterData.defaultTestvalues || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2104,\n            columnNumber: 66\n          }\n        })\n      }],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : {}],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2152,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2155,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2159,\n          columnNumber: 57\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2057,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2166,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner no-height\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1 //onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n      ,\n      secondaryInitialSize: window.outerHeight - 260,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2167,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth + 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2175,\n        columnNumber: 50\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2176,\n        columnNumber: 53\n      }\n    }, mainDesign), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2179,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2180,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2181,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2182,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2183,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2184,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2185,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showRETestList(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2187,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2189,\n        columnNumber: 77\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2193,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {},\n      SingleItem: this.state.SingleItem,\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2195,\n        columnNumber: 77\n      }\n    }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n      selectedSample: this.props.Login.masterData.RESelectedSample,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleGridDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      userInfo: this.props.Login.userInfo,\n      inputParam: this.props.Login.inputParam,\n      screenName: \"IDS_SAMPLEGRID\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2203,\n        columnNumber: 77\n      }\n    }))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2221,\n        columnNumber: 49\n      }\n    }, this.state.enablePin ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `pin-icon ${this.state.enableAutoHeight ? \"active\" : \"\"}`,\n      onClick: this.changeSplitterOption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2222,\n        columnNumber: 77\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2227,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2228,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2229,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2230,\n        columnNumber: 61\n      }\n    }, this.state.showSample ? this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEATTACHMENTSCOMMENTS\"\n    }) : this.state.showSubSample ? this.props.intl.formatMessage({\n      id: \"IDS_SUBSAMPLEATTACHMENTSCOMMENTS\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_PARAMETERRESULTS\"\n    }))), this.props.Login.masterData.realRegSubTypeValue && this.state.showTest && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => {\n        this.state.showSubSample == true ? this.showRETestList() : this.showRESubSampleinfo();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2238,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2241,\n        columnNumber: 65\n      }\n    }), \" \", this.state.showSubSample == true ? this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_SUBSAMPLE\"\n    })) : \"\", this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2251,\n        columnNumber: 53\n      }\n    }) : this.state.showSubSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSubSampleTab ? this.props.Login.activeSubSampleTab === 'IDS_SUBSAMPLEATTACHMENTS' ? 'IDS_SUBSAMPLEATTACHMENTS' : this.props.Login.activeSubSampleTab : 'IDS_SUBSAMPLEATTACHMENTS',\n      tabDetail: this.subsampleTabDetail(),\n      onTabChange: this.onSubSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2254,\n        columnNumber: 57\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n      tabDetail: this.testRETabDetail(),\n      onTabChange: this.onTestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2258,\n        columnNumber: 57\n      }\n    }) : /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2261,\n        columnNumber: 57\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.screenName === 'IDS_RESULTENTRY' ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      selectedRecord: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument : this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : [],\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.screenName,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.props.Login.showValidate ? this.calculateFormula : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.onSaveClick,\n      showValidate: this.props.Login.showValidate,\n      modalEvent: this.state.modalEvent,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2304,\n          columnNumber: 25\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRY' ? /*#__PURE__*/React.createElement(ResultEntryForm, {\n        predefinedValues: this.props.Login.masterData.PredefinedValues,\n        defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n        gradeValues: this.props.Login.masterData.GradeValues || [],\n        selectedNumericData: this.props.Login.masterData.selectedNumericData,\n        selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n        paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n        parameterResults: this.state.selectedRecord.ResultParameter || [],\n        Login: this.props.Login,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        onResultInputChange: this.onResultInputChange,\n        onGradeEvent: this.onGradeEvent,\n        getFormula: this.getFormula,\n        onDropTestFile: this.onDropTestFile,\n        onKeyPress: this.onKeyPress,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2311,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? /*#__PURE__*/React.createElement(TestEditForm, {\n        methodValues: this.props.Login.masterData.MethodData,\n        sourceValues: this.props.Login.masterData.SourceData,\n        selecteRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2330,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === 'IDS_INSTRUMENT' ? /*#__PURE__*/React.createElement(ResultEntryInstrumentForm, {\n        instrumentcatValue: this.props.Login.masterData.InstrumentCategory,\n        instrumentValue: this.props.Login.masterData.Instrument,\n        selecteRecord: this.state.selectedRecord || {},\n        timeZoneListData: this.props.Login.timeZoneList || [],\n        onComboChange: this.onComboChange,\n        onComboCategoryChange: this.onComboCategoryChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2339,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === 'IDS_MATERIAL' ? /*#__PURE__*/React.createElement(ResultEntryMaterialForm, {\n        materialType: this.props.Login.materialType,\n        materialCategory: this.props.Login.materialCat,\n        material: this.props.Login.material,\n        materialInventory: this.props.Login.materialInventory,\n        selectedRecord: this.state.selectedRecord || {},\n        onMaterialComboChange: this.onMaterialComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2353,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === 'IDS_TASK' ? /*#__PURE__*/React.createElement(ResultEntryTaskForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onNumericChange: this.onNumericChange,\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2368,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryParamCommetsForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2376,\n          columnNumber: 49\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? /*#__PURE__*/React.createElement(ResultEntryFormulaForm, {\n        DynamicFields: this.props.Login.masterData.DynamicFormulaFields // formRef={this.formRef}\n        ,\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName //selectedForumulaInput={this.state.selectedForumulaInput || []}\n        ,\n        onFormulaInputChange: this.onFormulaInputChange,\n        Login: this.props.Login,\n        showValidate: this.props.Login.showValidate,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2382,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? /*#__PURE__*/React.createElement(ResultEntryImport, {\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        onDropFile: this.onDropFile,\n        selectedImportFile: this.props.Login.masterData.selectedImportFile || {},\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2394,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === 'IDS_MEANPARAMETER' ? /*#__PURE__*/React.createElement(ResultEntryMean // onInputOnChange={this.onMeanInputOnChange}\n      // onComboChange={this.onMeanComboChange}\n      , {\n        screenName: this.props.Login.screenName,\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        selectAll: this.state.selectAll,\n        testMean: this.state.testMean,\n        meanTestParameterList: this.state.meanTestParameterList || [],\n        selectedTestParam: this.state.selectedTestParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2402,\n          columnNumber: 61\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2281,\n        columnNumber: 17\n      }\n    }), this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode),\n      nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode),\n      needSaveButton: this.props.Login.needSaveButton,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.closeModal,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      needValidation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 2417,\n        columnNumber: 25\n      }\n    }) : \"\");\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  updateTestMethodSource(inputData, masterData, ncontrolcode) {\n    let inputParam = {\n      inputData: { ...inputData,\n        'userinfo': this.props.Login.userInfo,\n        ncontrolcode\n      },\n      // formData: formData,\n      // isFileupload: true,\n      operation: \"createMethod\",\n      screenName: \"IDS_TESTMETHODSOURCE\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData1: inputData,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"createMethod\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateTestMethodSource(inputData, masterData);\n    }\n  }\n\n  updateParameterComments(inputData, masterData, ncontrolcode) {\n    // let inputData1 = { ...inputData, ncontrolcode }\n    let inputParam = {\n      inputData: { ...inputData,\n        ncontrolcode,\n        'userinfo': this.props.Login.userInfo\n      },\n      operation: this.props.Login.operation,\n      screenName: \"IDS_RESULT\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData: inputData1,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"updateParameterComments\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateParameterComments(inputData, masterData);\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      showTest,\n      showSample,\n      userRoleControlRights,\n      controlMap,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      testCommentDataState,\n      historyDataState,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      sampleMoreField,\n      subSampleMoreField,\n      testMoreField,\n      selectedRecord,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      REFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField,\n      validateFormulaMandyFields,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      stateDynamicDesign\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        bool = true;\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n      testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataSate = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n      resultDataState = dataSate;\n      instrumentDataState = dataSate;\n      materialDataState = dataSate;\n      taskDataState = dataSate;\n      documentDataState = dataSate;\n      resultChangeDataState = dataSate;\n      historyDataState = dataSate;\n      testCommentDataState = dataSate;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\n      bool = true;\n      validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", 'descending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      } // if (this.props.Login.masterData.DynamicColumns && this.props.Login.masterData.DynamicColumns !== previousProps.Login.masterData.DynamicColumns) {\n      //     bool = true;\n      //     sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 3);\n      //     subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 3);\n      //     testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 3);\n      //     sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 8);\n      //     subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 8);\n      //     testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 8);\n      //     SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 4)\n      //     SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 5)\n      //     SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 6)\n      //     sampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 7)\n      //     subSampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 7)\n      //     testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 7)\n      // }\n\n\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {masterData: this.props.Login.masterData,showTest,showSample }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      REFilterStatus = REFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\");\n    }\n\n    if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n      const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n      stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n    }\n\n    if (bool) {\n      this.setState({\n        showTest,\n        showSample,\n        userRoleControlRights,\n        controlMap,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        testCommentDataState,\n        historyDataState,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        sampleMoreField,\n        subSampleMoreField,\n        testMoreField,\n        selectedRecord,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        REFilterStatus,\n        REJobStatus,\n        Testvalues,\n        ApprovalConfigVersion,\n        validateFormulaMandyFields,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        stateDynamicDesign\n      });\n    }\n\n    if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\n      this.setState({\n        meanTestParameterList: this.props.Login.meanTestParameterList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    } // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n\n\n    return null;\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  crudMaster,\n  updateStore,\n  getsubSampleREDetail,\n  getTestREDetail,\n  getTestChildTabREDetail,\n  resultGetModule,\n  completeTest,\n  testMethodSourceEdit,\n  addREInstrument,\n  addREMaterial,\n  deleteInstrumentRecord,\n  fetchInstrumentRecord,\n  deleteTaskRecord,\n  fetchTaskRecord,\n  parameterRecord,\n  checkListRecord,\n  onSaveCheckList,\n  defaultTest,\n  getFormula,\n  getRERegistrationType,\n  getRERegistrationSubType,\n  fetchMaterialRecord,\n  getREApprovalConfigVersion,\n  getResultEntryDetails,\n  calculateFormula,\n  getREFilterStatus,\n  getREFilterTestData,\n  getREJobStatus,\n  getSampleChildTabREDetail,\n  viewAttachment,\n  getAttachmentCombo,\n  deleteAttachment,\n  resultImportFile,\n  validateEsignCredentialComplete,\n  getCommentsCombo,\n  updateTestMethodSource,\n  filterTransactionList,\n  validateEsignCredential,\n  updateParameterComments,\n  previewSampleReport,\n  getMeanCalculationTestParameter,\n  getREMaterialCategoryByType,\n  getREMaterialByCategory,\n  getREMaterialInvertoryByMaterial,\n  getAvailableMaterialQuantity,\n  testStart,\n  getSubSampleChildTabDetail,\n  getSampleChildTabDetail,\n  getREFilterTemplate //,deleteResultUsedMaterial\n\n})(injectIntl(ResultEntry));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntry.jsx"],"names":["React","Component","faPlay","faAddressBook","faCheckCircle","faEye","faPencilRuler","faFileImport","faSync","Card","Col","Row","Nav","Button","injectIntl","connect","ListWrapper","FontAwesomeIcon","SplitterLayout","ContentPanel","crudMaster","updateStore","getsubSampleREDetail","getTestREDetail","getTestChildTabREDetail","resultGetModule","fetchMaterialRecord","completeTest","testMethodSourceEdit","addREInstrument","addREMaterial","deleteInstrumentRecord","fetchInstrumentRecord","deleteTaskRecord","fetchTaskRecord","parameterRecord","checkListRecord","onSaveCheckList","defaultTest","getFormula","getRERegistrationType","getRERegistrationSubType","getREApprovalConfigVersion","getResultEntryDetails","calculateFormula","getREFilterStatus","getREFilterTestData","getREJobStatus","viewAttachment","validateEsignCredentialComplete","getAttachmentCombo","deleteAttachment","getCommentsCombo","updateTestMethodSource","resultImportFile","filterTransactionList","validateEsignCredential","getSampleChildTabREDetail","updateParameterComments","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","previewSampleReport","getMeanCalculationTestParameter","getAvailableMaterialQuantity","testStart","getSubSampleChildTabDetail","getSampleChildTabDetail","getREFilterTemplate","sortData","create_UUID","getControlMap","listDataFromDynamicArray","formatInputDate","validateTwoDigitDate","showEsign","constructOptionList","deleteAttachmentDropZone","rsapi","toast","parameterType","grade","transactionStatus","RegistrationType","RegistrationSubType","FORMULAFIELDTYPE","designProperties","TransactionListMasterJson","ProductList","CustomTabs","ResultEntryResultsTab","DEFAULT_RETURN","SlideOutModal","Esign","BreadcrumbComponent","ResultEntryFilter","ResultEntryInstrumentForm","ResultEntryForm","TestEditForm","SampleInfoView","SampleInfoGrid","ApprovalInstrumentTab","ResultEntryTaskTab","ResultEntryTaskForm","ResultEntryParamCommetsForm","TemplateForm","templateChangeHandler","numberConversion","numericGrade","PerfectScrollbar","ResultEntryFormulaForm","SampleApprovalHistory","ResultChangeHistoryTab","Attachments","Comments","onSaveSampleAttachment","onSaveTestAttachment","onSaveSubSampleAttachment","onSaveSampleComments","onSaveTestComments","onSaveSubSampleComments","ResultEntryImport","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","ResultEntryMean","ScrollBar","ResultEntryMaterialForm","UsedMaterial","FontIconWrap","ResultEntry","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","event","file","fieldName","selectedRecord","Login","masterData","selectedImportFile","updateInfo","typeName","data","closeModal","loadEsign","openModal","openTemplateModal","screenName","operation","loadFile","showValidate","validateFormulaMandyFields","onFilterComboChange","fieldname","inputData","dateObj","toDate","userInfo","nflag","fromdate","fromDate","todate","nsampletypecode","parseInt","defaultSampleType","nregtypecode","defaultRegistrationType","nregsubtypecode","defaultRegistrationSubType","ntranscode","String","defaultFilterStatus","ntransactionstatus","userinfo","obj","state","value","item","inputParamData","napprovalversioncode","ApprovalConfigVersion","napprovalconfigversioncode","nneedsubsample","ndesigntemplatemappingcode","DesignTemplateMappingValue","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","defaultTestvalues","OnDateConverstion","date","month","getMonth","day","getDate","getFullYear","onReload","realFromDate","realToDate","realSampleTypeValue","realRegTypeValue","realRegSubTypeValue","realApproveConfigVersion","realFilterStatusValue","realTestcodeValue","ntestcode","ntransactiontestcode","activeTestKey","showTest","showSample","checkBoxOperation","inpuParamData","refs","searchSampleRef","searchSubSampleRef","searchTestRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","warn","intl","formatMessage","id","onDesignTemplateChange","labelname","onREFilterSubmit","nneedtemplatebasedflow","undefined","onSecondaryPaneSizeChange","e","val","onComboCategoryChange","uRL","ninstrumentcatcode","ncalibrationRequired","ncalibrationreq","post","then","response","TagInstrument","Instrument","TagListInstrument","get","ninstrumentcode","catch","error","status","message","testRETabDetail","testTabMap","Map","RESelectedTest","map","test","join","testskip","testtake","testList","RE_TEST","slice","meanControlId","controlMap","has","ncontrolcode","selectedTestList","set","inputParam","dataStateChange","primaryKeyField","selectedId","userRoleControlRights","ncontrolCode","deleteMaterialRecord","addResultEntryTask","onAttachmentSaveClick","RegistrationTestAttachment","VALUE","methodUrl","esignRights","masterList","onCommentsSaveClick","RegistrationTestComment","ResultChangeHistory","sampleDataStateChange","activeSampleKey","sampleHistoryDataState","dataState","sampleGridDataState","sampleGridDataStateChange","subsampleTabDetail","ntransactionsamplecode","RESelectedSubSample","sample","tabMap","subsampleList","RE_SUBSAMPLE","subsampleskip","subsampletake","selectedSubSampleList","RegistrationSampleAttachment","attachmentskip","attachmenttake","settings","RegistrationSampleComment","subSampleCommentDataState","subSampledataStateChange","onSampleTabChange","tabProps","activeSampleTab","RESelectedSample","npreregno","onTestTabChange","length","toString","preregno","onSubSampleTabChange","activeSubSampleTab","selectedSubSample","subSampleAttachmentDataState","popUptestDataState","displayName","nformcode","screenData","classUrl","nresultusedmaterialcode","stestsynonym","addResultUsedTaskId","parameterData","index","modalEvent","currentTarget","selectedForumulaInput","lstDynamicFields","dynamicfields","push","selectedResultGrade","ResultParameter","resultImport","closeFilter","showFilter","handlePageChange","skip","take","setTimeout","_scrollBarRef","updateScroll","handleSubSamplePageChange","subSampleSkip","subSampleTake","handleTestPageChange","sampletakeDataState","verticalPaneSizeChange","enableAutoHeight","initialVerticalWidth","changeSplitterOption","defaultActions","testChildGetREParam","setDefaultId","TestList","splice","acceptTestList","completeActions","completeResultId","postParamList","testStartActions","validateEsign","sreason","password","onEsignInputOnChange","target","type","name","checked","YES","NO","onInputOnChange","onSaveFileClick","saveType","formRef","acceptedFile","sfilename","formData","FormData","forEach","append","JSON","stringify","x","onDropFile","onFormulaInputChange","fields","selectedMandatory","dynamicformulafields","ndynamicformulafieldcode","INTEGER","replace","formulainput","svalues","sparameter","sdescription","onTemplateInputChange","control","onTemplateComboChange","comboData","onTemplateDateChange","dateData","handleDateChange","dateName","dateValue","Date","onInputChange","Data","onNumericChange","numericData","numericName","onDateChange","headerSelectionChange","syntheticEvent","meanTestParameterList","selectedMeanTestParam","selected","ntransactionresultcode","sresult","selectedTestParam","selectedTestParamMean","size","values","testMean","selectAll","selectionChange","dataItem","delete","valiateCheckAll","onMeanComboChange","comboName","onMaterialComboChange","nsectioncode","onComboChange","onGradeEvent","parameter","nparametertypecode","NUMERIC","ngradecode","parseFloat","nroundingdigits","PREDEFINED","CHARACTER","saveParam","isTestComment","sampleList","searchedSample","RE_SAMPLE","acceptList","searchedSubSample","selectedSampleList","selectedMaster","onKeyPress","paremterResultcode","keyCode","i","form","elements","focus","preventDefault","onResultInputChange","ncalculatedresult","spredefinedname","ATTACHMENT","onSaveMean","resultParameter","selectedTestParameterMean","nroundingdigit","nuserrole","nusercode","isFileupload","onSaveClick","neditable","resultParameters","resultData","results","editable","sfinal","FIO","splittedFileName","split","fileExtension","uniquefilename","ssystemfilename","nfilesize","Object","loading","tests","ntype","nmethodcode","nsourcecode","ResultUsedInstrument","nresultusedinstrumentcode","dfromdate","dtodate","stzfromdate","ntzfromdate","label","stztodate","ntztodate","transactiontestcode","nmaterialcode","nmaterialinventorycode","susedquantity","savailablequantity","ResultUsedMaterial","nmaterialtypecode","nmaterialcategorycode","ninventorycode","jsondata","sarno","ssamplearno","smaterialcatname","nmaterialcatcode","smaterialname","sinventoryid","nqtyused","scarriergas","smobilephase","sremarks","susername","ssectionname","MaterialInventoryTrans","IDS_INVENTORYID","smaterialtypename","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","ResultUsedTasks","nresultusedtaskcode","sanalyst","taskArry","info","sresultcomment","lstResultCheckList","editedQB","qbcode","ResultCheckList","createRef","masterStatus","showSubSample","tabPane","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SingleItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","enablePin","showRESampleInfo","showRETestList","showRESubSampleinfo","sampleTabDetail","RegistrationAttachment","RegistrationComment","testDataStateChange","componentDidMount","parentHeight","height","clientHeight","firstPane","getActiveTestURL","url","render","sampleListRE","subSampleListRE","testListRE","startDate","endDate","subSampleGetREParam","testGetREParam","samplePrintHistoryDataState","sampleSearchField","ROUTINE","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregsubtypename","sversionname","sfilterstatus","testStartId","resultEnterId","editSourceMethodId","addResultUsedInstrumentId","addResultUsedMaterailId","mandatoryFieldsInstrument","mandatoryFieldsTask","mandatoryFieldsTestMethodSource","mandatoryFieldsParameter","reportPreviewId","testDesign","borderBottom","display","float","searchedTest","setting","REFilterStatus","ALL","title","controlname","dataplace","hidden","indexOf","onClick","objectName","nneedtestinitiate","mainDesign","marginTop","DynamicSubSampleColumns","subSampleMoreField","selectedFilter","DynamicSampleColumns","sampleMoreField","openFilter","SampleType","REJobStatus","Testvalues","stateDynamicDesign","PLASMA_POOL","window","outerHeight","background","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","PredefinedValues","GradeValues","selectedNumericData","handleClose","onDropTestFile","MethodData","SourceData","InstrumentCategory","timeZoneList","materialType","materialCat","material","materialInventory","DynamicFormulaFields","ChecklistData","needSaveButton","temparray","option","LABEL","slanguagetypecode","constructDesign","list","newList","componentDidUpdate","previousProps","DynamicTestColumns","bool","DynamicDesign","dynamicColumn","parse","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","testlistmoreitems","dataSate","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","findIndex","DesignTemplateMapping","DesignTemplateMappingMap","componentWillUnmount","getDerivedStateFromProps","errorCode","mapStatetoProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Nav, Button } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord,\r\n    fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus,\r\n    viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile,\r\n    filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial,\r\n    previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart,getSubSampleChildTabDetail,getSampleChildTabDetail,getREFilterTemplate//,deleteResultUsedMaterial\r\n} from '../../actions';\r\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone } from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties } from '../../components/Enumeration';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ResultEntryFilter from './ResultEntryFilter';\r\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\r\nimport ResultEntryForm from './ResultEntryForm';\r\nimport TestEditForm from './TestEditForm';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\r\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\r\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\r\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\r\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\r\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\r\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment,onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { onSaveSampleComments, onSaveTestComments,onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport ResultEntryImport from './ResultEntryImport';\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ResultEntryMean from './ResultEntryMean';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\r\nimport UsedMaterial from './UsedMaterial';\r\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\n\r\nclass ResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.state = {\r\n\r\n\r\n            // sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            // resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            // historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'stestsynonym' }] },\r\n            // sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n\r\n\r\n            // historyDataState: { skip: 0, take: 5, group: [{ field: 'ArNo' }, { field: 'stestsynonym' }] },\r\n\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            instrumentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            materialDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            taskDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            documentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            resultChangeDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'stestsynonym' }] \r\n            },\r\n            sampleHistoryDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            operation: \"\",\r\n            showSample: false,\r\n            showSubSample: false,\r\n            showTest: true,\r\n            tabPane: 0,\r\n            subsampleskip: 0,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            selectedRecord: {},\r\n            validateFormulaMandyFields: [],\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            subSampleSkip: 0,\r\n            subSampleTake: 5,\r\n            // subsampletake: this.props.Login.settings\r\n            // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false\r\n        }\r\n        this.formRef = React.createRef();\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.props.Login.masterData.selectedImportFile\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: { ...this.props.Login.masterData, selectedImportFile: selectedRecord } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let updateInfo = {};\r\n        if (screenName === \"IDS_RESULTFORMULA\") {\r\n            screenName = \"IDS_RESULTENTRY\";\r\n            operation = \"update\";\r\n            let showValidate = !this.props.Login.showValidate;\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, operation, showValidate, validateFormulaMandyFields: [] }\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\"\r\n                    || this.props.Login.operation === \"complete\"\r\n                    || this.props.Login.operation === \"default\"\r\n                    || this.props.Login.operation === \"deleteTask\"\r\n                    || this.props.Login.operation === \"deleteInstrument\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else if (this.props.Login.operation === \"updatechecklist\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                }\r\n            } else {\r\n                openModal = false;\r\n                openTemplateModal = false;\r\n                selectedRecord = {};\r\n                loadFile = false;\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, screenName, loadEsign, selectedRecord, openTemplateModal, loadFile }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    todate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationSubType(inputData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationSubType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getREFilterTemplate(inputParamData)\r\n                \r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultApprovalConfigVersion: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                }\r\n                this.props.getREJobStatus(inputData)\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: 1,// parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\r\n                    ntranscode: String(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultFilterStatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                }\r\n                this.props.getREFilterTestData(inputData)\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                let defaultTestvalues = event.item;\r\n                this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n    }\r\n    OnDateConverstion = (date, fieldname) => {\r\n        const month = validateTwoDigitDate(String(date.getMonth() + 1));\r\n        const day = validateTwoDigitDate(String(date.getDate()));\r\n        if (fieldname === \"fromDate\") {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\r\n        }\r\n        else {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\r\n        }\r\n        return date;\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realApproveConfigVersion,\r\n            realFilterStatusValue, realTestcodeValue } = this.props.Login.masterData\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            napprovalversioncode: (realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n            ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onREFilterSubmit = (event) => {\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType\r\n        let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType\r\n        let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n        let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion\r\n        let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus\r\n        let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues\r\n\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode) || -1,\r\n            nregtypecode: (this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode) || -1,\r\n            nregsubtypecode: (this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode) || -1,\r\n            napprovalversioncode: (this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\r\n            ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: (this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n            nneedtemplatebasedflow:(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false\r\n\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState\r\n        }\r\n\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n\r\n    //     const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n    //     const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n\r\n        // let hGrand = this.state.grandparentheight\r\n        // let check = e - 400;\r\n        // if (check > 1) {\r\n        //     hGrand = this.state.parentHeight + check\r\n        // }\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: hGrand - e - 70,\r\n        //     grandparentheight: hGrand\r\n        // })\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: this.state.parentHeight - e - 70\r\n        // })\r\n    }\r\n\r\n    onComboCategoryChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\r\n            if (fieldname === \"ninstrumentcatcode\") {\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 2,\r\n                    ninstrumentcatcode: event.value,\r\n                    ncalibrationRequired: event.item.ncalibrationreq\r\n                }\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                        \"sinstrumentid\", undefined, undefined, undefined);\r\n                    const TagListInstrument = TagInstrument.get(\"OptionList\")\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: { ...this.props.Login.masterData, Instrument: TagListInstrument },\r\n                            selectedRecord: {\r\n                                ...this.props.Login.selectedRecord,\r\n                                [fieldname]: event,\r\n                                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    // const selectedRecord = this.state.selectedRecord || {};\r\n                    // selectedRecord[fieldname] = event;\r\n                    // this.setState({ selectedRecord });\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n     showRESampleInfo(){\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showRETestList() {\r\n        this.setState({ showTest: true, showSample: false,showSubSample: false })\r\n    }\r\n\r\n    // getMeanTestParameter =(meanParam)=>{\r\n    //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\r\n    //                        userinfo:this.props.Login.userInfo}\r\n    //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n    //         .then(response => {\r\n    //            const list =  response.data || [];\r\n    //            const optionList = [];\r\n    //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\r\n    //            this.setState({meanTestParameterList:optionList});                \r\n    //         })\r\n    //         .catch(error => {\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             } else {\r\n    //                 toast.warn(error.response.data);\r\n    //             }\r\n    //         })\r\n    // }\r\n\r\n    showRESubSampleinfo() {\r\n        this.setState({ showSample: false, showTest: true, showSubSample: !this.state.showSubSample })\r\n    }\r\n\r\n    \r\n\r\n    testRETabDetail = () => {\r\n        const testTabMap = new Map();\r\n        //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        testTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n        testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedInstrument\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.instrumentDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteInstrumentRecord}\r\n            fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_INSTRUMENT\"\r\n        />)\r\n        testTabMap.set(\"IDS_MATERIAL\", <UsedMaterial\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedMaterial\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.materialDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteMaterialRecord}\r\n            fetchRecord={this.props.fetchMaterialRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_MATERIAL\"\r\n        />)\r\n        testTabMap.set(\"IDS_TASK\", <ResultEntryTaskTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedTask\"}\r\n            addResultEntryTask={this.addResultEntryTask}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n            }}\r\n            editParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n            }}\r\n            dataState={this.state.taskDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteTaskRecord}\r\n            fetchRecord={this.fetchTaskRecord}\r\n            //fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_TASK\" />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={true}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    masterList: this.props.Login.masterData.RESelectedTest,\r\n                    ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedTest,\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n            userInfo={this.props.Login.userInfo}\r\n            ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultChangeDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n            controlMap={this.state.controlMap}\r\n            masterData={this.props.Login.masterData}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            selectedId={null}\r\n\r\n        />)\r\n\r\n        return testTabMap;\r\n    }\r\n\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleKey) {\r\n            case \"IDS_APPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({ sampleGridDataState: event.dataState })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    // sampleTabDetail = () => {\r\n    //     const tabMap = new Map();\r\n\r\n    //     {\r\n    //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n    //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\r\n    //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n    //                 SingleItem={this.state.SingleItem}\r\n    //                 screenName=\"IDS_SAMPLEINFO\"\r\n    //             />) :\r\n    //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\r\n    //                 selectedSample={this.props.Login.masterData.RESelectedSample}\r\n    //                 dataState={this.state.dataState}\r\n    //                 dataStateChange={this.dataStateChange}\r\n    //                 detailedFieldList={this.state.SampleGridExpandableItem}\r\n    //                 extractedColumnList={this.state.SampleGridItem}\r\n    //                 userInfo={this.props.Login.userInfo}\r\n    //                 inputParam={this.props.Login.inputParam}\r\n    //                 screenName=\"IDS_SAMPLEGRID\"\r\n    //             />)\r\n    //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\r\n    //         return tabMap;\r\n    //     }\r\n    // }\r\n\r\n  \r\n\r\n    sampleTabDetail() {\r\n        const tabMap = new Map();\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\r\n            <SampleApprovalHistory\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.sampleHistoryDataState}\r\n                dataStateChange={this.sampleDataStateChange}\r\n                masterData={this.props.Login.masterData}\r\n                screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n\r\n        \r\n        return tabMap;\r\n    }\r\n\r\n\r\n\r\n    subsampleTabDetail = () => {\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onTestTabChange = (tabProps) => {\r\n        const activeTestKey = tabProps.screenName;\r\n        if (activeTestKey !== this.props.Login.activeTestKey) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                    //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\r\n                    //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestKey,\r\n                    screenName: activeTestKey,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    testMethodSourceEdit = (test) => {\r\n        this.props.testMethodSourceEdit(test)\r\n    }\r\n\r\n    addREInstrument = (test) => {\r\n        this.props.addREInstrument(test)\r\n    }\r\n    deleteInstrumentRecord = (test) => {\r\n\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteInstrument\",\r\n            screenName: \"deleteInstrumentAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteInstrumentAction\",\r\n                    operation: \"deleteInstrument\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteInstrumentRecord(test)\r\n        }\r\n\r\n\r\n    }\r\n    fetchInstrumentRecord = (test) => {\r\n        this.props.fetchInstrumentRecord(test)\r\n    }\r\n    fetchMaterialRecord = (test) => {\r\n        this.props.fetchMaterialRecord(test)\r\n    }\r\n\r\n    //Aravindh\r\n    deleteMaterialRecord = (test) => {\r\n\r\n        let inputParam = {\r\n            inputData: {\r\n                ...test.selectedRecord,\r\n                ntransactiontestcode: test.masterData.RESelectedTest ?\r\n                    test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"ResultUsedMaterial\",\r\n            operation: \"delete\",\r\n            screenName: \"deleteMaterialAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n            nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode,\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteMaterialAction\",\r\n                    operation: \"deleteMaterial\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            //this.props.deleteResultUsedMaterial(test)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    deleteTaskRecord = (test) => {\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteTask\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteTaskaction\",\r\n                    operation: \"deleteTask\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteTaskRecord(test)\r\n        }\r\n\r\n    }\r\n    fetchTaskRecord = (test) => {\r\n        this.props.fetchTaskRecord(test)\r\n    }\r\n    addResultEntryTask = (inputData) => {\r\n        let selectedRecord = {}\r\n        selectedRecord = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: selectedRecord,\r\n                operation: \"create\",\r\n                screenName: \"IDS_TASK\",\r\n                openModal: true,\r\n                activeTestKey: \"IDS_TASK\",\r\n                ncontrolcode: inputData.addResultUsedTaskId,\r\n                selectedId: null\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    checkListRecord = (parameterData) => {\r\n        this.props.checkListRecord(parameterData, this.props.Login.userInfo)\r\n    }\r\n    getFormula = (parameterData, userInfo, masterData, index, event) => {\r\n        this.setState({\r\n            modalEvent: event.currentTarget\r\n        })\r\n        this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord)\r\n    }\r\n    calculateFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord || []\r\n        const selectedForumulaInput = selectedRecord.selectedForumulaInput || []\r\n        let lstDynamicFields = [];\r\n\r\n        if (selectedForumulaInput) {\r\n            selectedForumulaInput.map(dynamicfields =>\r\n                lstDynamicFields.push(dynamicfields)\r\n            );\r\n            const inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                lstDynamicFields: lstDynamicFields,\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: selectedRecord,\r\n                selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\r\n                ResultParameter: this.state.selectedRecord.ResultParameter || {}\r\n            }\r\n            this.props.calculateFormula(inputData)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n    getActiveTestURL() {\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    resultImport = () => {\r\n        this.props.Login.masterData.selectedImportFile = []\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                operation: \"create\",\r\n                screenName: \"IDS_RESULTIMPORTFILE\",\r\n                openModal: true,\r\n                loadFile: true,\r\n                activeTestKey: \"IDS_RESULTS\",\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subSampleSkip: e.skip,\r\n            subSampleTake: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take,\r\n            sampletakeDataState: e.take\r\n        });\r\n    };\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []\r\n\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n\r\n\r\n        let subSampleGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef,\r\n            nneedtemplatebasedflow:(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            //Aravindh\r\n            checkBoxOperation: 3\r\n        }\r\n        let testGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeSampleKey || 'IDS_IDS_SAMPLEINFO',\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n            sampleHistoryDataState: this.state.sampleHistoryDataState\r\n\r\n        }\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\r\n        }\r\n\r\n        let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n            , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n            , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\", \"dregdate\"];\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n            sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"RE_SAMPLE\",\r\n            selectedObject: \"RESelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n                //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                nneedsubsample: this.props.Login.masterData.nneedsubsample == 3 ? true :false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n\r\n        const filterSubSampleParam = {\r\n            inputListName: \"RE_SUBSAMPLE\",\r\n            selectedObject: \"RESelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestKey || 'IDS_RESULTS',\r\n                nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: ['ssamplearno'],\r\n            changeList: [\"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n        let filterTestParam = {\r\n            inputListName: \"RE_TEST\",\r\n            selectedObject: \"RESelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"stestsynonym\", \"dtransactiondate\", \"ssectionname\", \"ssourcename\", \"ntestrepeatno\", \"ntestretestno\", \"stransdisplaystatus\", \"stestsynonym\"],\r\n            changeList: [\"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedTest\"],\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: 3\r\n\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: filterSampleParam,\r\n                selectedObject: \"RESelectedSample\",\r\n                inputListName: \"RE_SAMPLE\",\r\n                updatedListname: \"\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: testGetREParam,\r\n                selectedObject: \"RESelectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                inputListName: \"RE_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedTest\",\r\n                clearFilter: \"yes\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchSampleRef, childFilteredListName: \"\" }],\r\n                fecthInputObject: testChildGetREParam,\r\n                selectedObject: \"RESelectedTest\",\r\n                inputListName: \"RE_TEST\",\r\n                updatedListname: \"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }];\r\n\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"-\" :\r\n                // this.props.Login.masterData.RegistrationSubType ?\r\n                //     this.props.Login.masterData.RegistrationSubType[0].sregsubtypename : \"-\"\r\n            }, {\r\n                \"label\": \"IDS_CONFIGVERSION\",\r\n                \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_TEST\",\r\n                \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\r\n            }\r\n        ]\r\n\r\n\r\n        const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode\r\n        const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode\r\n        const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode\r\n\r\n        const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode\r\n        const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode\r\n        const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode\r\n        //const addResultUsedTaskId = this.state.controlMap.has(\"AddResultUsedTask\") && this.state.controlMap.get(\"AddResultUsedTask\").ncontrolcode\r\n        //const parameterCommentsId = this.state.controlMap.has(\"AddParameterComments\") && this.state.controlMap.get(\"AddParameterComments\").ncontrolcode\r\n\r\n\r\n        const mandatoryFieldsInstrument = [{ \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"ninstrumentcatcode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"ninstrumentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_FORMDATE\", \"dataField\": \"dfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TODATE\", \"dataField\": \"dtodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntztodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            //{ \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\" }\r\n        ]\r\n\r\n        const mandatoryFieldsTestMethodSource = [{ \"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n        // const mandatoryFieldsCheckList=[{\"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\" },\r\n        //    { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\"}]\r\n        const mandatoryFieldsParameter = [{ \"mandatory\": true, \"idsName\": \"IDS_PARAMETERCOMMENTS\", \"dataField\": \"sresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n        const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\r\n\r\n        // const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\" },\r\n        // { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\" }]\r\n\r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode\r\n\r\n\r\n\r\n\r\n\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                    <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                        onClick={()=>this.showRESampleInfo()}\r\n                    >\r\n                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                    </button>\r\n                    {/* </div> */}\r\n                </Card.Header>\r\n                <Card.Body className='p-0'>\r\n                    <TransactionListMasterJson\r\n                        paneHeight={this.state.initialVerticalWidth}\r\n                        // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\r\n                        masterList={this.props.Login.masterData.searchedTest || testListRE}\r\n                        selectedMaster={this.props.Login.masterData.RESelectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        getMasterDetail={this.props.getTestChildTabREDetail}\r\n                        inputParam={testChildGetREParam}\r\n                        subFieldsLabel={true}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"RESelectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        showStatusName={true}\r\n                        selectionFieldName=\"sfilterstatus\"\r\n                        childTabsKey={[\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]}\r\n                        selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RE_SAMPLE\"\r\n                        buttonCount={5}\r\n                        jsonField={'jsondata'}\r\n                        jsonDesignFields={true}\r\n                        actionIcons={\r\n                            [{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDINSTRUMENT\" }), controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDMATERIAL\" }), controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1, onClick: this.props.addREMaterial, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedMaterailId } }\r\n                                // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\r\n                            ]\r\n                        }\r\n                        commonActions={\r\n                            // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                {testListRE.length > 0 ?\r\n                                    <>\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                        {/* <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                                                            </Nav.Link> */}\r\n\r\n                                {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ?\r\n\r\n                                        <FontIconWrap data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                            className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                            onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest,\r\n                                                this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)} >\r\n                                            <FontAwesomeIcon icon={faPlay} />\r\n                                        </FontIconWrap>:\"\"}\r\n\r\n\r\n\r\n                                        <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(resultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)} >\r\n                                            <FontAwesomeIcon icon={faAddressBook} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_FILLDEFAULTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(setDefaultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faPencilRuler} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faCheckCircle} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTRESULT\" })} hidden={true} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faFileImport} />\r\n                                        </Nav.Link>\r\n                                    </>\r\n                                    : \"\"}\r\n                            </ProductList>\r\n\r\n                            // </Tooltip>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n        let mainDesign = \"\";\r\n        if (this.props.Login.masterData.realRegSubTypeValue &&\r\n            this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n                <Card>\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0'>\r\n                        <TransactionListMasterJson\r\n                            paneHeight={this.state.initialVerticalWidth}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleListRE}\r\n                            selectedMaster={this.props.Login.masterData.RESelectedSubSample}\r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={this.props.getTestREDetail}\r\n                            inputParam={testGetREParam}\r\n                            additionalParam={[]}\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"RESelectedSubSample\"\r\n                            objectName=\"subSample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            jsonField={'jsondata'}\r\n                            jsonDesignFields={true}\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            moreField={this.state.subSampleMoreField}\r\n                            needValidation={false}\r\n                            needMultiSelect={true}\r\n                            needFilter={false}\r\n                            skip={this.state.subSampleSkip}\r\n                            take={this.state.subSampleTake}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            showStatusLink={true}\r\n                            showStatusName={true}\r\n                            selectionList={this.state.selectedFilter}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            childTabsKey={[\"RE_TEST\"]}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={filterSubSampleParam}\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n        }\r\n        else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* <PerfectScrollbar> */}\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true}>\r\n                        {/* sticky_head_parent ref={(parentHeight) => { this.parentHeight = parentHeight }} secondaryInitialSize={40}*/}\r\n                        <Col md={12} className=\"parent-port-height\" >\r\n                            <ListWrapper>\r\n                                <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} \r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage} \r\n                                //onSecondaryPaneSizeChange={this.paneSizeChange} \r\n                                primaryMinSize={40} secondaryMinSize={20}>\r\n                                    <TransactionListMasterJson\r\n                                        clickIconGroup={true}\r\n                                        // paneHeight={this.state.parentHeight}\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        masterList={this.props.Login.masterData.searchedSample || sampleListRE}\r\n                                        selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                                        primaryKeyField=\"npreregno\"\r\n                                        getMasterDetail={this.props.getsubSampleREDetail}\r\n                                        inputParam={subSampleGetREParam}\r\n                                        additionalParam={['napprovalversioncode']}\r\n                                        mainField=\"sarno\"\r\n                                        selectedListName=\"RESelectedSample\"\r\n                                        objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        needValidation={false}\r\n                                        validationKey=\"napprovalversioncode\"\r\n                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                        subFields={this.state.DynamicSampleColumns || []}\r\n                                        moreField={this.state.sampleMoreField}\r\n                                        needFilter={true}\r\n                                        needMultiSelect={true}\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onREFilterSubmit}\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        searchListName=\"searchedSample\"\r\n                                        searchRef={this.searchSampleRef}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        filterParam={filterSampleParam}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        hidePaging={false}\r\n                                        showStatusLink={true}\r\n                                        showStatusName={true}\r\n                                        statusFieldName=\"stransdisplaystatus\"\r\n                                        statusField=\"ntransactionstatus\"\r\n                                        selectionFieldName=\"sfilterstatus\"\r\n                                        //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        childTabsKey={[\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\"]}\r\n                                        selectionList={this.state.selectedFilter}\r\n                                        selectionColorField=\"scolorhexcode\"\r\n                                        selectionField=\"ntransactionstatus\"\r\n                                        jsonField={'jsondata'}\r\n                                        jsonDesignFields={true}\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"Sample Filter\": <ResultEntryFilter\r\n                                                    fromDate={this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \r\n                                                        rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate)\r\n                                                        : new Date()}\r\n                                                    toDate={this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \r\n                                                        rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate)\r\n                                                        : new Date()}\r\n                                                    SampleType={this.state.SampleType || []}\r\n                                                    SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                                    RegType={this.state.RegistrationType || []}\r\n                                                    RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                                    RegSubType={this.state.RegistrationSubType || []}\r\n                                                    RegSubTypeValue={this.props.Login.masterData.defaultRegistrationSubType || []}\r\n                                                    DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                                    FilterStatus={this.state.REFilterStatus || []}\r\n                                                    FilterStatusValue={this.props.Login.masterData.defaultFilterStatus || []}\r\n                                                    ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                                    ApprovalVersionValue={this.props.Login.masterData.defaultApprovalConfigVersion || []}\r\n                                                    REJobStatus={this.state.REJobStatus || []}\r\n                                                    JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                                    Test={this.state.Testvalues || []}\r\n                                                    TestValue={this.props.Login.masterData.defaultTestvalues || []}\r\n                                                    onFilterComboChange={this.onFilterComboChange}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                    DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                />\r\n                                            }\r\n                                        ]}\r\n                                        actionIcons={\r\n                                            [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                {\r\n                                                    title: \"Report\",\r\n                                                    controlname: \"reports\",\r\n                                                    objectName: \"sample\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                    onClick: this.props.previewSampleReport,\r\n                                                    inputData: {\r\n                                                        userinfo: this.props.Login.userInfo,\r\n                                                        ncontrolcode: reportPreviewId\r\n                                                    },\r\n                                                } : {}\r\n                                            ]\r\n                                        }\r\n                                        commonActions={\r\n                                            <>\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        onClick={() => this.onReload()}\r\n                                                        data-for=\"tooltip-common-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                </ProductList>\r\n                                            </>\r\n                                        }\r\n                                    />\r\n                                        <ScrollBar>\r\n                                            <SplitterLayout\r\n                                                customClassName=\"detailed-inner no-height\"\r\n                                                vertical\r\n                                                borderColor=\"#999\"\r\n                                                primaryIndex={1}\r\n                                                //onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                                secondaryInitialSize={window.outerHeight - 260}\r\n                                            >\r\n                                                 <div style={{ height: this.state.initialVerticalWidth + 30 }}>\r\n                                                    <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                        {mainDesign}\r\n                                                    </div>\r\n                                                    <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Card className='p-0'>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                            onClick={() => this.showRETestList()}>\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body>\r\n                                                                        {this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n                                                                            <SampleInfoView\r\n                                                                                data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0\r\n                                                                                    ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n                                                                                SingleItem={this.state.SingleItem}\r\n\r\n                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                            /> :\r\n                                                                            <SampleInfoGrid\r\n                                                                                selectedSample={this.props.Login.masterData.RESelectedSample}\r\n                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                dataStateChange={this.sampleGridDataStateChange}\r\n                                                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                userInfo={this.props.Login.userInfo}\r\n                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                screenName=\"IDS_SAMPLEGRID\"\r\n                                                                                jsonField={\"jsondata\"}\r\n                                                                            />\r\n                                                                        }\r\n                                                                                                                                            </Card.Body>\r\n                                                                </Card>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                </div>\r\n                                                <div>\r\n                                                    {this.state.enablePin ? <span className={`pin-icon ${this.state.enableAutoHeight ? \"active\" : \"\"}`} \r\n                                                    onClick={this.changeSplitterOption}\r\n                                                    ></span>\r\n                                                        : \"\"}\r\n                                              \r\n                                              <Card>\r\n                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                            <h4 className=\"card-title\">\r\n                                                            {this.state.showSample ? this.props.intl.formatMessage({ id: \"IDS_SAMPLEATTACHMENTSCOMMENTS\" })  : this.state.showSubSample ?  this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLEATTACHMENTSCOMMENTS\" }) : this.props.intl.formatMessage({ id: \"IDS_PARAMETERRESULTS\" }) }\r\n\r\n                                                            </h4>\r\n                                                        </span>\r\n\r\n                                                        {this.props.Login.masterData.realRegSubTypeValue &&\r\n                                                            this.state.showTest && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ?\r\n                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                onClick={() => { this.state.showSubSample == true ? this.showRETestList() : this.showRESubSampleinfo() }}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                {this.state.showSubSample == true ? this.props.intl.formatMessage({ id: \"IDS_TEST\" }) : this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                            </button> : \"\"\r\n                                                        }\r\n\r\n                                                        \r\n\r\n\r\n\r\n                                                    {this.state.showSample ?\r\n                                                    <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"}\r\n                                                        tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n                                                    this.state.showSubSample ?\r\n                                                        <CustomTabs activeKey={this.props.Login.activeSubSampleTab ? this.props.Login.activeSubSampleTab === 'IDS_SUBSAMPLEATTACHMENTS' ? 'IDS_SUBSAMPLEATTACHMENTS' : this.props.Login.activeSubSampleTab : 'IDS_SUBSAMPLEATTACHMENTS'}\r\n                                                            tabDetail={this.subsampleTabDetail()} onTabChange={this.onSubSampleTabChange} /> :\r\n                                                       \r\n                                                        this.state.showTest ?\r\n                                                        <CustomTabs activeKey={this.props.Login.activeTestKey || \"IDS_RESULTS\"}\r\n                                                            tabDetail={this.testRETabDetail()} onTabChange={this.onTestTabChange} />\r\n                                                        :\r\n                                                        <CustomTabs tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} />\r\n\r\n                                                            }\r\n\r\n                                                        </Card.Header>\r\n                                                        </Card>\r\n                                                    \r\n                                                </div>\r\n                                            </SplitterLayout>\r\n                                        </ScrollBar>\r\n                                        \r\n                                        \r\n                                    \r\n                                </SplitterLayout >\r\n                            </ListWrapper >\r\n                            {/* </PerfectScrollbar> */}\r\n                        </Col >\r\n                    </Row >\r\n                </ListWrapper >\r\n                {/* </PerfectScrollbar> */}\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    size={this.props.Login.screenName === 'IDS_MEANPARAMETER' ? \"xl\" : \"lg\"}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.screenName === 'IDS_RESULTENTRY' ? \"\"\r\n                        : this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    selectedRecord={this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                        this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {}}\r\n                    mandatoryFields={this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\r\n                        this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\r\n                            this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource :\r\n                                this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter :\r\n                                    this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : []}\r\n                    esign={this.props.Login.loadEsign}\r\n                    innerPopup={this.props.Login.screenName}\r\n                    validateEsign={this.validateEsign}\r\n                    onSaveClick={this.props.Login.showValidate ? this.calculateFormula\r\n                        : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.onSaveClick}\r\n                    showValidate={this.props.Login.showValidate}\r\n                    modalEvent={this.state.modalEvent}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign\r\n                            operation={this.props.Login.operation}\r\n                            onInputOnChange={this.onEsignInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        /> :\r\n                        this.props.Login.screenName === 'IDS_RESULTENTRY' ?\r\n                            <ResultEntryForm\r\n                                predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                parameterResults={this.state.selectedRecord.ResultParameter || []}\r\n                                Login={this.props.Login}\r\n                                handleClose={this.handleClose}\r\n                                onSaveClick={this.onSaveClick}\r\n                                onResultInputChange={this.onResultInputChange}\r\n                                onGradeEvent={this.onGradeEvent}\r\n                                getFormula={this.getFormula}\r\n                                onDropTestFile={this.onDropTestFile}\r\n                                onKeyPress={this.onKeyPress}\r\n                                needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                            /> :\r\n                            this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ?\r\n                                <TestEditForm\r\n                                    methodValues={this.props.Login.masterData.MethodData}\r\n                                    sourceValues={this.props.Login.masterData.SourceData}\r\n                                    selecteRecord={this.state.selectedRecord || {}}\r\n                                    onComboChange={this.onComboChange}\r\n                                    handleClose={this.handleClose}\r\n                                    onSaveClick={this.onSaveClick}\r\n                                /> :\r\n                                this.props.Login.screenName === 'IDS_INSTRUMENT' ?\r\n                                    <ResultEntryInstrumentForm\r\n                                        instrumentcatValue={this.props.Login.masterData.InstrumentCategory}\r\n                                        instrumentValue={this.props.Login.masterData.Instrument}\r\n                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                        timeZoneListData={this.props.Login.timeZoneList || []}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onComboCategoryChange={this.onComboCategoryChange}\r\n                                        onDateChange={this.onDateChange}\r\n                                        handleClose={this.handleClose}\r\n                                        onSaveClick={this.onSaveClick}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                                    /> :\r\n                                    this.props.Login.screenName === 'IDS_MATERIAL' ?\r\n                                        <ResultEntryMaterialForm\r\n                                            materialType={this.props.Login.materialType}\r\n                                            materialCategory={this.props.Login.materialCat}\r\n                                            material={this.props.Login.material}\r\n                                            materialInventory={this.props.Login.materialInventory}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onMaterialComboChange={this.onMaterialComboChange}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onDateChange={this.onDateChange}\r\n                                            handleClose={this.handleClose}\r\n                                            onSaveClick={this.onSaveClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            needSubSample={this.props.Login.masterData.nneedsubsample}\r\n                                        /> :\r\n                                        this.props.Login.screenName === 'IDS_TASK' ?\r\n                                            <ResultEntryTaskForm\r\n                                                selecteRecord={this.state.selectedRecord || {}}\r\n                                                onNumericChange={this.onNumericChange}\r\n                                                onInputChange={this.onInputChange}\r\n                                                handleClose={this.handleClose}\r\n                                                onSaveClick={this.onSaveClick}\r\n                                            /> :\r\n                                            this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ?\r\n                                                <ResultEntryParamCommetsForm\r\n                                                    selecteRecord={this.state.selectedRecord || {}}\r\n                                                    onInputChange={this.onInputChange}\r\n                                                    handleClose={this.handleClose}\r\n                                                    onSaveClick={this.onSaveClick}\r\n                                                /> : this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                                                    <ResultEntryFormulaForm\r\n                                                        DynamicFields={this.props.Login.masterData.DynamicFormulaFields}\r\n                                                        // formRef={this.formRef}\r\n                                                        handleClose={this.handleClose}\r\n                                                        screenName={this.props.Login.screenName}\r\n                                                        //selectedForumulaInput={this.state.selectedForumulaInput || []}\r\n                                                        onFormulaInputChange={this.onFormulaInputChange}\r\n                                                        Login={this.props.Login}\r\n                                                        showValidate={this.props.Login.showValidate}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                    />\r\n                                                    : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ?\r\n                                                        <ResultEntryImport\r\n                                                            handleClose={this.handleClose}\r\n                                                            screenName={this.props.Login.screenName}\r\n                                                            onDropFile={this.onDropFile}\r\n                                                            selectedImportFile={this.props.Login.masterData.selectedImportFile || {}}\r\n                                                            deleteAttachment={this.deleteAttachment}\r\n                                                        /> :\r\n                                                        this.props.Login.screenName === 'IDS_MEANPARAMETER' ?\r\n                                                            <ResultEntryMean\r\n                                                                // onInputOnChange={this.onMeanInputOnChange}\r\n                                                                // onComboChange={this.onMeanComboChange}\r\n                                                                screenName={this.props.Login.screenName}\r\n                                                                headerSelectionChange={this.headerSelectionChange}\r\n                                                                selectionChange={this.selectionChange}\r\n                                                                selectAll={this.state.selectAll}\r\n                                                                testMean={this.state.testMean}\r\n                                                                meanTestParameterList={this.state.meanTestParameterList || []}\r\n                                                                selectedTestParam={this.state.selectedTestParam}\r\n                                                            /> : \"\"\r\n                    }\r\n                />\r\n                {\r\n                    this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                        <TemplateForm\r\n                            templateData={this.props.Login.masterData.ChecklistData}\r\n                            nregtypecode={parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode)}\r\n                            nregsubtypecode={parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode)}\r\n                            needSaveButton={this.props.Login.needSaveButton}\r\n                            formRef={this.formRef}\r\n                            onTemplateInputChange={this.onTemplateInputChange}\r\n                            handleClose={this.closeModal}\r\n                            onTemplateComboChange={this.onTemplateComboChange}\r\n                            screenName={this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveCheckList}\r\n                            Login={this.props.Login}\r\n                            viewScreen={this.props.Login.openTemplateModal}\r\n                            selectedRecord={this.state.selectedRecord || []}\r\n                            onTemplateDateChange={this.onTemplateDateChange}\r\n                            needValidation={true}\r\n                        /> : \"\"\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\r\n        const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n        const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'nregtypecode': nregtypecode, 'nregsubtypecode': nregsubtypecode, 'ncontrolcode': setDefaultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"default\",\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: { ...testChildGetREParam, ncontrolcode: setDefaultId },\r\n                RESelectedTest: acceptTestList,\r\n                RESelectedSample: RESelectedSample\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"defaultaction\",\r\n                        operation: \"default\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTTEST\" }));\r\n        }\r\n\r\n    }\r\n\r\n    completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n    onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            let inputParam = {\r\n                \"inputData\": { userinfo: userInfo }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { selectedRecord, userInfo, nregtypecode, nregsubtypecode, inputParam, operation: \"updatechecklist\" },\r\n                    openModal: true,\r\n                    operation: \"updatechecklist\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode)\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" ||\r\n            this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\r\n            this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedImportFile = this.props.Login.masterData.selectedImportFile;\r\n        const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\r\n        const formData = new FormData();\r\n\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFile && acceptedFile.length > 0) {\r\n            acceptedFile.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFile.length);\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }))\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\r\n        formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\r\n        this.props.resultImportFile(formData, this.props.Login.masterData);\r\n    }\r\n\r\n    onDropFile = (acceptedFile) => {\r\n        // let selectedImportFile = this.props.Login.masterData.selectedImportFile || [];\r\n        // selectedImportFile['sfilename'] = acceptedFile;\r\n        this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: this.props.Login.masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({selectedImportFile});\r\n    }\r\n\r\n    onFormulaInputChange = (event, index, fields) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\r\n        let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\r\n        let dynamicformulafields = {};\r\n\r\n        if (event) {\r\n            if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\r\n                const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                if (/^-?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            } else {\r\n                const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                // else {\r\n                //     dynamicformulafields.svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\r\n                //     selectedForumulaInput[index].svalues = selectedForumulaInput.length > 0 ? selectedForumulaInput[index].svalues : \"\";\r\n\r\n                // }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        //this.setState({selectedRecord});\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (Data) {\r\n            selectedRecord[name] = Data.target.value;\r\n            //this.setState({selectedRecord});\r\n        }\r\n        else {\r\n            selectedRecord[name] = [];\r\n            //this.setState({selectedRecord});\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onNumericChange = (numericData, numericName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecord[numericName] = numericData;\r\n                //this.setState({selectedRecord});\r\n            } else {\r\n                selectedRecord[numericName] = numericData.target.value;\r\n                //this.setState({selectedRecord});\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[numericName] = \"\";\r\n            //this.setState({selectedRecord});\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onDateChange = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        selectedRecord[dateName] = dateValue;\r\n        if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\r\n            this.setState({ selectedRecord });\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { selectedRecord: selectedRecord }\r\n            // }\r\n            //this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        if (checked) {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\r\n                return item;\r\n            });\r\n\r\n            let selectedTestParam = \"\";\r\n            let selectedTestParamMean = 0;\r\n            let size = 0;\r\n            if (selectedMeanTestParam.size > 0) {\r\n                [...selectedMeanTestParam.values()].forEach(item => (\r\n                    item !== null && item !== \"\" ?\r\n                        (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                            size = size + 1,\r\n                            selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n                ));\r\n                selectedTestParamMean = selectedTestParamMean / size;\r\n            }\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam, selectedTestParam,\r\n                testMean: selectedTestParamMean,\r\n                selectAll: checked\r\n            });\r\n        }\r\n        else {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam: new Map(),\r\n                selectedTestParam: \"\",\r\n                testMean: \"\",\r\n                selectAll: checked\r\n            });\r\n        }\r\n    }\r\n\r\n    selectionChange = (event) => {\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        meanTestParameterList.map(item => {\r\n            if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\r\n                item.selected = !event.dataItem.selected;\r\n            }\r\n            return item;\r\n        });\r\n        if (event.dataItem.selected) {\r\n            selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\r\n        }\r\n        else {\r\n            if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\r\n                selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode)\r\n            }\r\n        }\r\n        let selectedTestParam = \"\";\r\n        let selectedTestParamMean = 0;\r\n        let size = 0;\r\n        if (selectedMeanTestParam.size > 0) {\r\n            [...selectedMeanTestParam.values()].forEach(item => (\r\n                item !== null && item !== \"\" ?\r\n                    (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                        size = size + 1,\r\n                        selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n            ));\r\n            selectedTestParamMean = selectedTestParamMean / size;\r\n        }\r\n\r\n        this.setState({\r\n            meanTestParameterList, selectedMeanTestParam, selectedTestParam, testMean: selectedTestParamMean,\r\n            selectAll: this.valiateCheckAll(meanTestParameterList)\r\n        });\r\n    }\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            selectAll = false;\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n    onMeanComboChange = (comboData, comboName) => {\r\n        const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n        selectedMeanTestParam[comboName] = comboData[0];\r\n        let data = \"\";\r\n        if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\r\n            data = comboData[0].value;\r\n        }\r\n        else {\r\n            data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\r\n        }\r\n        selectedMeanTestParam[\"parametervalue\"] = data;\r\n        this.setState({ selectedMeanTestParam });\r\n    }\r\n\r\n    // onMeanInputOnChange = (event) => {\r\n    //     const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n    //     selectedMeanTestParam[event.target.name] = selectedMeanTestParam[event.target.name] + \"+\" + event.target.value;\r\n    //     this.setState({selectedMeanTestParam});\r\n    // }\r\n    onMaterialComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        switch (comboName) {\r\n            case 'nmaterialtypecode':\r\n                this.props.getREMaterialCategoryByType({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcatcode':\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.RESelectedTest[0].nsectioncode;\r\n                this.props.getREMaterialByCategory({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcode':\r\n                this.props.getREMaterialInvertoryByMaterial({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.props.getAvailableMaterialQuantity({ selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n\r\n        }\r\n    }\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onGradeEvent = (ResultParameter, index, parameter) => {\r\n        if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: ResultParameter[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n            }\r\n            //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterData: this.props.Login.masterData }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n        \r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n        }\r\n\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    onKeyPress = (event, index, paremterResultcode) => {\r\n        if (event.keyCode === 13) {\r\n            for (let i = 0; i < event.target.form.elements.length; i++) {\r\n                if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\r\n                    event.target.form.elements[i].focus();\r\n                    break;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    onResultInputChange = (event, index, parameter) => {\r\n        //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\r\n        let selectedRecord = this.state.selectedRecord || [];\r\n        let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\r\n        let sresult = \"\";\r\n        let value = -1;\r\n        let acceptedFile = [];\r\n        let ncalculatedresult;\r\n\r\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n                sresult = event.target.value;\r\n                ncalculatedresult = 4\r\n            } else {\r\n                sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\r\n                ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n            if (event != null) {\r\n                sresult = event.item.spredefinedname;\r\n                value = event.item.ngradecode;\r\n                ncalculatedresult = 4\r\n            }\r\n            else {\r\n                sresult = \"\";\r\n                value = -1;\r\n                ncalculatedresult = 4\r\n            }\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n            sresult = event.target.value;\r\n            ncalculatedresult = 4\r\n        }\r\n        if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n            sresult = event[0].name;\r\n            acceptedFile = event;\r\n            ncalculatedresult = 4\r\n        }\r\n        ResultParameter[index]['sresult'] = sresult\r\n        ResultParameter[index]['sfinal'] = sresult\r\n        ResultParameter[index]['acceptedFile'] = acceptedFile\r\n        ResultParameter[index]['editable'] = true\r\n        ResultParameter[index]['ngradecode'] = value\r\n        ResultParameter[index]['ncalculatedresult'] = ncalculatedresult\r\n\r\n        // this.props.Login.masterData.ResultParameter = ResultParameter;\r\n        selectedRecord.ResultParameter = ResultParameter\r\n        this.setState({\r\n            selectedRecord: selectedRecord\r\n        });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: this.props.Login.masterData }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    updateTestMethodSource(inputData, masterData, ncontrolcode) {\r\n        let inputParam = {\r\n\r\n            inputData: { ...inputData, 'userinfo': this.props.Login.userInfo, ncontrolcode },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"createMethod\",\r\n            screenName: \"IDS_TESTMETHODSOURCE\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData1: inputData,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"createMethod\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateTestMethodSource(inputData, masterData)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateParameterComments(inputData, masterData, ncontrolcode) {\r\n        // let inputData1 = { ...inputData, ncontrolcode }\r\n        let inputParam = {\r\n            inputData: { ...inputData, ncontrolcode, 'userinfo': this.props.Login.userInfo },\r\n            operation: this.props.Login.operation,\r\n            screenName: \"IDS_RESULT\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData: inputData1,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"updateParameterComments\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateParameterComments(inputData, masterData)\r\n        }\r\n    }\r\n\r\n    onSaveMean = (saveType) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n\r\n        let resultParameter = this.props.Login.selectedTestParameterMean || {};\r\n        //let resultParameter = { };\r\n\r\n        resultParameter[\"ncalculatedresult\"] = 4;\r\n        resultParameter[\"sresult\"] = this.state.testMean;\r\n        resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\r\n\r\n        resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\r\n        resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n        resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n        // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\r\n        // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\r\n        // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\r\n        //console.log(\"result:\", resultParameter);\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"filecount\", 0);\r\n        formData.append(\"nregtypecode\", nregtypecode);\r\n        formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n        formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n        formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\r\n        formData.append(\"resultData\", JSON.stringify([resultParameter]));\r\n\r\n        const inputParam = {\r\n            classUrl: \"resultentrybysample\",\r\n            methodUrl: \"TestParameterResult\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: \"update\",\r\n            displayName: this.props.Login.inputParam.displayName, saveType\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSaveClick = (saveType) => {\r\n        if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\r\n            this.onSaveMean(saveType);\r\n        }\r\n        else {\r\n            let ResultParameter = this.state.selectedRecord.ResultParameter || [];\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let selectedId = this.props.Login.selectedId || null;\r\n            const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n            const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n            const classUrl = \"resultentrybysample\";\r\n            const formData = new FormData();\r\n            let neditable = 0;\r\n            let resultParameters = [];\r\n            let inputParam = {};\r\n            let inputData = [];\r\n            let i = 0;\r\n            //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\r\n                if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                    ResultParameter.map((resultData, index) => {\r\n                        let results = {};\r\n                        if (resultData.editable === true) {\r\n                            neditable = 1;\r\n                            switch (resultData.nparametertypecode) {\r\n                                case 1:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                        numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                    results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 2:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.ngradecode;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 3:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = grade.FIO;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 4:\r\n                                    if (resultData.acceptedFile !== undefined) {\r\n                                        const splittedFileName = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.acceptedFile ? resultData.acceptedFile[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.acceptedFile[0].size,\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: resultData.sresult,\r\n                                            sfinal: resultData.sresult\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = grade.FIO;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = uniquefilename;\r\n                                        results[\"nfilesize\"] = resultData.acceptedFile[0].size;\r\n                                        formData.append(\"uploadedFile\" + index, resultData.acceptedFile[0]);\r\n                                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                                        formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                        i++;\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (Object.values(results).length > 0) {\r\n                                resultParameters.push(results);\r\n                            }\r\n                        }\r\n                        return null;\r\n                    });\r\n\r\n                    if (neditable === 0) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n\r\n                    formData.append(\"filecount\", i);\r\n                    formData.append(\"nregtypecode\", nregtypecode);\r\n                    formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                    formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                    formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                    const tests = this.props.Login.masterData.RESelectedTest ?\r\n                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                    formData.append(\"transactiontestcode\", tests);\r\n                    //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"TestParameterResult\",\r\n                        inputData: { userinfo: this.props.Login.userInfo },\r\n                        formData: formData,\r\n                        isFileupload: true,\r\n                        operation: \"update\",\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false, openModal: false }\r\n                    }\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n\r\n            if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\r\n                inputData = {\r\n                    ntype: 3,\r\n                    nflag: 3,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                    nmethodcode: selectedRecord.nmethodcode.value,\r\n                    nsourcecode: selectedRecord.nsourcecode.value,\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: \"IDS_RESULTS\",\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"TestMethodSource\",\r\n                //     inputData: inputData,\r\n                //     isFileupload: false,\r\n                //     operation: \"update\",\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n\r\n                this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\r\n                let inputData = [];\r\n                if (this.props.Login.operation === \"update\") {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            nresultusedinstrumentcode: selectedRecord.nresultusedinstrumentcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value,\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode\r\n\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    }\r\n                }\r\n                else {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                            npreregno: selectedRecord.npreregno,\r\n                            ninstrumentcatcode: selectedRecord.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecord.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecord.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecord.dtodate, false),\r\n                            stzfromdate: selectedRecord.ntzfromdate.label,\r\n                            stztodate: selectedRecord.ntztodate.label,\r\n                            ntzfromdate: selectedRecord.ntzfromdate.value,\r\n                            ntztodate: selectedRecord.ntztodate.value\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    }\r\n                }\r\n                inputParam = {\r\n                    classUrl: classUrl,\r\n                    methodUrl: \"ResultUsedInstrument\",\r\n                    inputData: inputData, selectedId,\r\n                    isFileupload: false,\r\n                    activeTestKey: \"IDS_INSTRUMENT\",\r\n                    operation: this.props.Login.operation,\r\n                    displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                let inputData = [];\r\n                if (this.state.selectedRecord.nmaterialcode!=\"\") {\r\n                if (this.state.selectedRecord.nmaterialinventorycode!=\"\") {\r\n                if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.state.selectedRecord.savailablequantity)) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedMaterial: {\r\n                                nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\r\n                                ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                npreregno: selectedRecord.npreregno,\r\n                                nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                nmaterialcategorycode: selectedRecord.nmaterialcategorycode.value,\r\n                                nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    sarno: selectedRecord.sarno,\r\n                                    ssamplearno: selectedRecord.ssamplearno,\r\n                                    stestsynonym: selectedRecord.stestsynonym,\r\n                                    smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                    smaterialname: selectedRecord.nmaterialcode.label,\r\n                                    sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                    scarriergas: selectedRecord.scarriergas,\r\n                                    smobilephase: selectedRecord.smobilephase,\r\n                                    sremarks: selectedRecord.sremarks,\r\n                                    susername: this.props.Login.userInfo.susername,\r\n                                    nsectioncode: selectedRecord.nsectioncode,\r\n                                    ssectionname: selectedRecord.ssectionname\r\n                                }\r\n                            },\r\n                            MaterialInventoryTrans: {\r\n                                nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label,\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            nresultusedmaterialcode: selectedRecord.nresultusedmaterialcode,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                        }\r\n                    }\r\n                    else {\r\n                        inputData = {\r\n                            ResultUsedMaterial: {\r\n                                ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                                npreregno: selectedRecord.npreregno,\r\n                                nmaterialtypecode: selectedRecord.nmaterialtypecode.value,\r\n                                nmaterialcategorycode: selectedRecord.nmaterialcatcode.value,\r\n                                nmaterialcode: selectedRecord.nmaterialcode.value,\r\n                                ninventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    sarno: selectedRecord.sarno,\r\n                                    ssamplearno: selectedRecord.ssamplearno,\r\n                                    stestsynonym: selectedRecord.stestsynonym,\r\n                                    smaterialcatname: selectedRecord.nmaterialcatcode.label,\r\n                                    smaterialname: selectedRecord.nmaterialcode.label,\r\n                                    sinventoryid: selectedRecord.nmaterialinventorycode.label,\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                    scarriergas: selectedRecord.scarriergas,\r\n                                    smobilephase: selectedRecord.smobilephase,\r\n                                    sremarks: selectedRecord.sremarks,\r\n                                    smaterialtypename: selectedRecord.nmaterialtypecode.label,\r\n                                    nsectioncode: selectedRecord.nsectioncode,\r\n                                    ssectionname: selectedRecord.ssectionname\r\n                                }\r\n                            },\r\n                            MaterialInventoryTrans: {\r\n                                nmaterialinventorycode: selectedRecord.nmaterialinventorycode.value,\r\n                                nsectioncode: selectedRecord.nsectioncode,\r\n                                jsondata: {\r\n                                    nqtyused: selectedRecord.susedquantity,\r\n                                    IDS_INVENTORYID: selectedRecord.nmaterialinventorycode.label\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedMaterial\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        activeTestKey: \"IDS_MATERIAL\",\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"Quantity Not available\" }))\r\n                    return null;\r\n                }\r\n\r\n\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"Select Material Inventory\" }))\r\n                return null;\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"Select Material\" }))\r\n            return null;\r\n        }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_TASK\") {\r\n                if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\r\n                    || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\r\n                    || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\r\n                    || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\r\n                    || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedTasks: {\r\n                                nresultusedtaskcode: selectedRecord.nresultusedtaskcode,\r\n                                jsondata: {\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\r\n                                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\r\n                                    stestsynonym: selectedRecord.stestsynonym,\r\n                                    sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    sanalyst: this.props.Login.userInfo.susername,\r\n                                    smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode\r\n                        }\r\n                    }\r\n                    else {\r\n                        let taskArry = [];\r\n                        this.props.Login.masterData.RESelectedTest &&\r\n                            this.props.Login.masterData.RESelectedTest.map(test =>\r\n\r\n                                taskArry.push({\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    ntransactiontestcode: parseInt(test.ntransactiontestcode),\r\n                                    npreregno: parseInt(test.npreregno),\r\n                                    // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    // sanalyst: this.props.Login.userInfo.susername,\r\n                                    // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\r\n                                   // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                                    jsondata: {\r\n                                        //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                        sarno: test.sarno,\r\n                                        ssamplearno: test.ssamplearno,\r\n                                        stestsynonym: test.stestsynonym,\r\n                                        sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                        sanalyst: this.props.Login.userInfo.susername,\r\n                                        smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                        spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                        spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                        scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\"\r\n                                    }\r\n                                })\r\n                            )\r\n                        inputData = {\r\n                            ResultUsedTasks: taskArry,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedTasks\",\r\n                        inputData: inputData, selectedId,\r\n                        activeTestKey: \"IDS_TASK\",\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTASKTIME\" }));\r\n                    return;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\r\n                inputData = {\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                    sresultcomment: selectedRecord.sresultcomment,\r\n                    transactiontestcode: selectedRecord.transactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregtypecode: nregtypecode,\r\n                    nregsubtypecode: nregsubtypecode,\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"ParameterComments\",\r\n                //     inputData: inputData, selectedId,\r\n                //     isFileupload: false,\r\n                //     operation: this.props.Login.operation,\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n                this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\r\n                let lstResultCheckList = [];\r\n                if (selectedRecord && selectedRecord.editedQB) {\r\n                    selectedRecord.editedQB.map(qbcode =>\r\n                        lstResultCheckList.push(selectedRecord[qbcode]));\r\n                    inputData = {\r\n                        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                        ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                        transactiontestcode: selectedRecord.transactiontestcode,\r\n                        ResultCheckList: lstResultCheckList,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultEntryChecklist\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n            historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n            SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n            testMoreField, selectedRecord, SampleType, RegistrationType, RegistrationSubType,\r\n            REFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, DynamicSampleColumns,\r\n            DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem, DynamicGridMoreField,\r\n            validateFormulaMandyFields, skip, take, testskip, testtake, selectedFilter, stateDynamicDesign } = this.state;\r\n        let bool = false;\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                bool = true;\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n        }\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataSate = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n            resultDataState = dataSate;\r\n            instrumentDataState = dataSate;\r\n            materialDataState = dataSate;\r\n            taskDataState = dataSate;\r\n            documentDataState = dataSate;\r\n            resultChangeDataState = dataSate;\r\n            historyDataState = dataSate;\r\n            testCommentDataState = dataSate;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\r\n            bool = true;\r\n            validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", 'descending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n\r\n            // if (this.props.Login.masterData.DynamicColumns && this.props.Login.masterData.DynamicColumns !== previousProps.Login.masterData.DynamicColumns) {\r\n            //     bool = true;\r\n            //     sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 3);\r\n            //     subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 3);\r\n            //     testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 3);\r\n            //     sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 8);\r\n            //     subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 8);\r\n            //     testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 8);\r\n            //     SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 4)\r\n            //     SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 5)\r\n            //     SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 6)\r\n            //     sampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 7)\r\n            //     subSampleMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 7)\r\n            //     testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 7)\r\n            // }\r\n\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {masterData: this.props.Login.masterData,showTest,showSample }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            REFilterStatus = REFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n        }\r\n\r\n        if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n            const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                \"sregtemplatename\", undefined, undefined, false);\r\n\r\n            stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n                historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n                SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n                testMoreField, selectedRecord,\r\n                SampleType,\r\n                RegistrationType,\r\n                RegistrationSubType,\r\n                REFilterStatus,\r\n                REJobStatus,\r\n                Testvalues,\r\n                ApprovalConfigVersion,\r\n                validateFormulaMandyFields,\r\n                skip, take, testskip, testtake, selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                DynamicGridItem, DynamicGridMoreField, stateDynamicDesign\r\n            })\r\n        }\r\n\r\n        if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\r\n            this.setState({ meanTestParameterList: this.props.Login.meanTestParameterList });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord,\r\n    parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, fetchMaterialRecord,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, getSampleChildTabREDetail,\r\n    viewAttachment, getAttachmentCombo, deleteAttachment, resultImportFile, validateEsignCredentialComplete, getCommentsCombo, updateTestMethodSource,\r\n    filterTransactionList, validateEsignCredential, updateParameterComments, previewSampleReport, getMeanCalculationTestParameter, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, getAvailableMaterialQuantity, testStart,getSubSampleChildTabDetail,getSampleChildTabDetail,getREFilterTemplate//,deleteResultUsedMaterial\r\n\r\n})(injectIntl(ResultEntry));"]},"metadata":{},"sourceType":"module"}