{"ast":null,"code":"import { ResultEntry } from '../../components/Enumeration';\nexport function numberConversion(number, rounding) {\n  return Number.parseFloat(number).toFixed(rounding);\n}\nexport function numericGrade(parameter, sfinalresult) {\n  let result = sfinalresult;\n  let minA = parseInt(parameter.smina);\n  let maxA = parseInt(parameter.smaxa);\n  let minB = parseInt(parameter.sminb);\n  let maxB = parseInt(parameter.smaxb);\n  let minLoD = parseInt(parameter.sminlod);\n  let maxLoD = parseInt(parameter.smaxlod);\n  let minLOQ = parseInt(parameter.sminloq);\n  let maxLOQ = parseInt(parameter.smaxloq);\n  let disregard = parseInt(parameter.sdisregard);\n\n  if (disregard !== \"null\" && disregard > sfinalresult) {\n    return ResultEntry.RESULTSTATUS_BELOWDISREGARD;\n  } else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result >= minLOQ && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BQL;\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\n      if (result >= minLoD && result <= maxLoD) {\n        return ResultEntry.RESULTSTATUS_BDL;\n      } else {\n        return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n      }\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\n    if (result >= minLoD && result <= maxLoD) {\n      return ResultEntry.RESULTSTATUS_BDL;\n    } else {\n      return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n    }\n  } else {\n    return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\n  }\n}\nexport function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\n  if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    return findGrade(minB, minA, maxA, maxB, result);\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result === maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLOQ && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= minLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\n    if (result < minLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= minLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\n    if (result < maxLoD) {\n      return ResultEntry.RESULTSTATUS_BLOD;\n    } else if (result >= maxLoD && result <= maxLOQ) {\n      return ResultEntry.RESULTSTATUS_BLOQ;\n    } else {\n      return findGrade(minB, minA, maxA, maxB, result);\n    }\n  } else {\n    return findGrade(minB, minA, maxA, maxB, result);\n  }\n}\nexport function findGrade(minB, minA, maxA, maxB, result) {\n  if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    return ResultEntry.RESULTSTATUS_FIO;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result <= maxB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB || maxB < result) return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_PASS;\n  } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result <= maxB) {\n      return ResultEntry.RESULTSTATUS_PASS;\n    } else if (result > maxB) {\n      return ResultEntry.RESULTSTATUS_OOS;\n    }\n  } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result <= maxA) {\n      return ResultEntry.RESULTSTATUS_PASS;\n    } else if (result > maxA) {\n      return ResultEntry.RESULTSTATUS_OOS;\n    }\n  } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) return ResultEntry.RESULTSTATUS_OOT;else if (result < maxA) return ResultEntry.RESULTSTATUS_PASS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_PASS;else if (result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB) return ResultEntry.RESULTSTATUS_OOT;else if (result < minA) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minA) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_OOT;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxA) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxA && result <= maxB) return ResultEntry.RESULTSTATUS_OOS;else if (result > maxB || result < minB) return ResultEntry.RESULTSTATUS_OOS;\n  } else if (!isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA) return ResultEntry.RESULTSTATUS_PASS;\n  } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA && result <= maxB) return ResultEntry.RESULTSTATUS_PASS;else if (result > maxB || result < minB) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\n    if (result >= minB && result < minA) return ResultEntry.RESULTSTATUS_OOS;else if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result < minB) return ResultEntry.RESULTSTATUS_OOT;else if (result > maxA) return ResultEntry.RESULTSTATUS_OOT;\n  } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\n    if (result >= minA && result <= maxA) return ResultEntry.RESULTSTATUS_PASS;else if (result >= minB && result <= maxB) return ResultEntry.RESULTSTATUS_OOT;else if ((result < minB || maxB < result) && minB !== 0 && maxB !== 0) return ResultEntry.RESULTSTATUS_OOS;else return ResultEntry.RESULTSTATUS_PASS;\n  }\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryValidation.jsx"],"names":["ResultEntry","numberConversion","number","rounding","Number","parseFloat","toFixed","numericGrade","parameter","sfinalresult","result","minA","parseInt","smina","maxA","smaxa","minB","sminb","maxB","smaxb","minLoD","sminlod","maxLoD","smaxlod","minLOQ","sminloq","maxLOQ","smaxloq","disregard","sdisregard","RESULTSTATUS_BELOWDISREGARD","isNaN","RESULTSTATUS_BQL","RESULTSTATUS_BDL","findLOQandLOD","findGrade","RESULTSTATUS_BLOD","RESULTSTATUS_BLOQ","RESULTSTATUS_FIO","RESULTSTATUS_PASS","RESULTSTATUS_OOS","RESULTSTATUS_OOT"],"mappings":"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","sourcesContent":["import { ResultEntry } from '../../components/Enumeration';\r\n\r\nexport function numberConversion(number, rounding) {\r\n    return Number.parseFloat(number).toFixed(rounding);\r\n}\r\n\r\nexport function numericGrade(parameter, sfinalresult) {\r\n    let result = sfinalresult;\r\n    let minA = parseInt(parameter.smina);\r\n    let maxA = parseInt(parameter.smaxa);\r\n    let minB = parseInt(parameter.sminb);\r\n    let maxB = parseInt(parameter.smaxb);\r\n    let minLoD = parseInt(parameter.sminlod);\r\n    let maxLoD = parseInt(parameter.smaxlod);\r\n    let minLOQ = parseInt(parameter.sminloq);\r\n    let maxLOQ = parseInt(parameter.smaxloq);\r\n    let disregard = parseInt(parameter.sdisregard);\r\n    if (disregard !== \"null\" && disregard > sfinalresult) {\r\n        return ResultEntry.RESULTSTATUS_BELOWDISREGARD;\r\n    } else if (!isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BQL;\r\n        }\r\n        else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n            if (result >= minLoD && result <= maxLoD) {\r\n                return ResultEntry.RESULTSTATUS_BDL;\r\n            }\r\n            else {\r\n                return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n            }\r\n        } else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD)) {\r\n        if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BDL;\r\n        }\r\n        else {\r\n            return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n        }\r\n    } else {\r\n        return findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, sfinalresult);\r\n    }\r\n}\r\n\r\n\r\nexport function findLOQandLOD(minLoD, maxLoD, minLOQ, maxLOQ, minA, maxA, minB, maxB, result) {\r\n    if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        return findGrade(minB, minA, maxA, maxB, result)\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result === maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && !isNaN(maxLoD) && isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLOQ && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && !isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= minLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && !isNaN(minLOQ) && !isNaN(maxLOQ)) {\r\n        if (result < minLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= minLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else if (!isNaN(minLoD) && isNaN(maxLoD) && isNaN(minLOQ) && isNaN(maxLOQ)) {\r\n        if (result < maxLoD) {\r\n            return ResultEntry.RESULTSTATUS_BLOD\r\n        } else if (result >= maxLoD && result <= maxLOQ) {\r\n            return ResultEntry.RESULTSTATUS_BLOQ\r\n        } else {\r\n            return findGrade(minB, minA, maxA, maxB, result);\r\n        }\r\n    } else {\r\n        return findGrade(minB, minA, maxA, maxB, result);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function findGrade(minB, minA, maxA, maxB, result) {\r\n    if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        return ResultEntry.RESULTSTATUS_FIO;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB || maxB < result)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result <= maxB) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxB) {\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result <= maxA) {\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        } else if (result > maxA) {\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        }\r\n    } else if (isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result < maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && isNaN(minB) && isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result > maxB || result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    } else if (isNaN(minA) && !isNaN(minB) && isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result > maxB || result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && isNaN(maxB)) {\r\n        if (result >= minB && result < minA)\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result < minB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if (result > maxA)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n    } else if (!isNaN(minA) && !isNaN(minB) && !isNaN(maxA) && !isNaN(maxB)) {\r\n        if (result >= minA && result <= maxA)\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n        else if (result >= minB && result <= maxB)\r\n            return ResultEntry.RESULTSTATUS_OOT;\r\n        else if ((result < minB || maxB < result) && (minB !== 0 && maxB !== 0))\r\n            return ResultEntry.RESULTSTATUS_OOS;\r\n        else\r\n            return ResultEntry.RESULTSTATUS_PASS;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}