{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/updateRelease\", inputData).then(response => {\n        if (response.data.statusCodeValue !== 200) {\n          toast.warn(intl.formatMessage({\n            id: response.data.body\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n        } else {\n          if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n            dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"], inputData));\n          }\n\n          let masterData = { ...Data1,\n            ...response.data.body\n          };\n          console.log(\"ReleasedTest,\", masterData);\n          sortData(masterData.ReleaseHistory, \"\", 'sreportno'); //  dispatch(generateReport(inputData,masterData))\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              openModal: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n          console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {};\n\n      if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 || response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n      } else {\n        responseData.ReleaseHistory = [];\n        responseData.selectedReleaseHistory = [];\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n      }\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isAddPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n    const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    if (inputParam.inputData.ncoareporttypecode === 7) {\n      urlArray = [projectType];\n    } else {\n      urlArray = [releaseSample //,reportType\n      , projectType];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      let ProjectTypeList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n      //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n      //      \"label\": response[1].data.ReportType[0].scoareporttypename\n      // }\n      // };\n\n      let masterData = {};\n      let selectedRecord = inputParam.inputData.selectedRecord;\n\n      if (inputParam.inputData.ncoareporttypecode === 7) {\n        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n        ProjectTypeList = projectTypeMap.get(\"OptionList\");\n        masterData = { ...inputParam.masterData,\n          ReleaseSubSample: [],\n          ReleaseTest: [],\n          ReleaseSample: []\n        };\n\n        if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n          delete inputParam.inputData.selectedRecord.nprojecttypecode;\n        }\n\n        if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n          delete inputParam.inputData.selectedRecord.nprojectmastercode;\n        }\n      } else {\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n      } // responseData = sortData(responseData)\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          // selectedRecord,\n          // ReportTypeList,\n          ncontrolCode,\n          ProjectTypeList,\n          loading: false,\n          showFilter: false,\n          openModal: true,\n          isAddPopup: true,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function generateReleasedReport(inputParam, Data, Preview) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: inputParam.npreregno,\n      //   nsectioncode: inputParam.nsectioncode || -1,\n      userinfo: inputParam.userinfo,\n      nprimarykey: inputParam.npreregno,\n      ncoareporttypecode: reportCOAType.SAMPLEWISE,\n      nreporttypecode: REPORTTYPE.COAREPORT,\n      sprimarykeyname: \"npreregno\",\n      ncontrolcode: inputParam.ncontrolCode,\n      nregtypecode: inputParam.nregtypecode,\n      nregsubtypecode: inputParam.nregsubtypecode,\n      ntransactiontestcode: inputParam.ntransactiontestcode,\n      napproveconfversioncode: inputParam.napprovalversioncode,\n      action: inputParam.action,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      ntransactionstatus: inputParam.ntransactionstatus,\n      Preview: Preview\n    };\n    rsapi.post(\"release/generateReleasedReport\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, coahistory) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\"; // masterData['searchedTest'] = undefined\n\n        masterData['searchedTests'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          take: inputParam.take,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          resultDataState: { ...inputParam.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParam.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParam.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParam.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParam.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParam.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","reportCOAType","REPORTTYPE","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","getReleasedSelectedSampleSubSampleTest","userInfo","Data1","inputData","dispatch","undefined","npreregno","post","then","response","data","statusCodeValue","warn","formatMessage","id","body","type","payload","loading","length","UpdateExternalOrderStatus","masterData","console","log","ReleaseHistory","change","openModal","catch","error","status","message","getReleasedRegistrationType","responseData","SampleTypeValue","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","getReleasedApprovalVersion","inputParam","getReleasedSample","ReleasedSampleDetails","ReleaseSample","selectedReleaseHistory","searchRef","current","value","searchSampleRef","searchSubSampleRef","searchTestRef","showFilter","skip","take","testskip","testtake","resultDataState","sort","filter","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","getApprovedSample","ncontrolCode","urlArray","releaseSample","projectType","ncoareporttypecode","all","ProjectTypeList","selectedRecord","projectTypeMap","get","ReleaseSubSample","ReleaseTest","nprojecttypecode","nprojectmastercode","isAddPopup","generateReleasedReport","Data","Preview","userinfo","nprimarykey","SAMPLEWISE","nreporttypecode","COAREPORT","sprimarykeyname","ncontrolcode","nregtypecode","nregsubtypecode","ntransactiontestcode","napproveconfversioncode","action","ncoaparentcode","ntransactionstatus","document","getElementById","setAttribute","filepath","click","modalShow","loadEsign","getReleasedFilterStatus","getReleasedDataDetails","coahistory","inputParamData","dfrom","dto","nsampletypecode","nsectioncode","ntestcode","napprovalconfigcode","nneedsubsample","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","ProjectTypeValue","getReportForPortal","portallist","String","JSON","stringify","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,EAAoDC,QAApD,QAAoE,4BAApE;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,2BAA1C;AACA,OAAOC,sBAAP,MAAmC,qEAAnC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,SAASC,sCAAT,CAAgDC,QAAhD,EAA0DC,KAA1D,EAAiEC,SAAjE,EAA4E;AAG/E,SAAO,UAAUC,QAAV,EAAoB;AACzB,QAAID,SAAS,KAAKE,SAAd,IAA0BF,SAAS,CAACG,SAAV,KAAsB,EAApD,EAAwD;AAEtDF,MAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,aAAOD,KAAK,CAACU,IAAN,CAAW,uBAAX,EAEHJ,SAFG,EAIFK,IAJE,CAIGC,QAAQ,IAAI;AACd,YAAIA,QAAQ,CAACC,IAAT,CAAcC,eAAd,KAAkC,GAAtC,EAA2C;AACvCtB,UAAAA,KAAK,CAACuB,IAAN,CAAWtB,IAAI,CAACuB,aAAL,CAAmB;AAC1BC,YAAAA,EAAE,EAAEL,QAAQ,CAACC,IAAT,CAAcK;AADQ,WAAnB,CAAX;AAGAX,UAAAA,QAAQ,CAAC;AACLY,YAAAA,IAAI,EAAEjB,cADD;AAELkB,YAAAA,OAAO,EAAE;AACLC,cAAAA,OAAO,EAAE;AADJ;AAFJ,WAAD,CAAR;AAQH,SAZD,MAaK;AAED,cAAIT,QAAQ,CAACC,IAAT,CAAcK,IAAd,CAAmB,cAAnB,KAAsCN,QAAQ,CAACC,IAAT,CAAcK,IAAd,CAAmB,cAAnB,EAAmCI,MAAnC,GAA4C,CAAtF,EAAyF;AACrFf,YAAAA,QAAQ,CAACgB,yBAAyB,CAACX,QAAQ,CAACC,IAAT,CAAcK,IAAd,CAAmB,cAAnB,CAAD,EAAoCZ,SAApC,CAA1B,CAAR;AACH;;AACD,cAAIkB,UAAU,GAAG,EAEb,GAAGnB,KAFU;AAEH,eAAGO,QAAQ,CAACC,IAAT,CAAcK;AAFd,WAAjB;AAOAO,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,UAA7B;AACC5B,UAAAA,QAAQ,CAAC4B,UAAU,CAACG,cAAZ,EAA2B,EAA3B,EAA8B,WAA9B,CAAR,CAbA,CAcH;;AAEEpB,UAAAA,QAAQ,CAAC;AACLY,YAAAA,IAAI,EAAEjB,cADD;AACiBkB,YAAAA,OAAO,EAAE;AAC3BI,cAAAA,UAD2B;AAE3BI,cAAAA,MAAM,EAAEtB,SAAS,CAACsB,MAFS;AAG3BP,cAAAA,OAAO,EAAE,KAHkB;AAI3BQ,cAAAA,SAAS,EAAC;AAJiB;AAD1B,WAAD,CAAR;AAQH;AACJ,OA3CE,EA6CFC,KA7CE,CA6CIC,KAAK,IAAI;AACZxB,QAAAA,QAAQ,CAAC;AAAEY,UAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,UAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BK,KAA7B;AAEH,SAJD,MAKK;AACDvC,UAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,OAvDE,CAAP;AA0DC,KA7DH,MA8DO;AACDrB,MAAAA,KAAK,CAACuB,IAAN,CAAWtB,IAAI,CAACuB,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GApED;AAqEH;AACD,OAAO,SAASiB,2BAAT,CAAqC5B,SAArC,EAAgD;AACnD,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,6BAAX,EAA0CJ,SAA1C,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAIuB,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB;AACAsB,MAAAA,YAAY,GAAGvC,QAAQ,CAACuC,YAAD,CAAvB;AACA5B,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BI,UAAAA,UAAU,EAAE,EACR,GAAGlB,SAAS,CAACkB,UADL;AAER,eAAGW,YAFK;AAGRC,YAAAA,eAAe,EAAE9B,SAAS,CAAC8B;AAHnB,WADe;AAM3Bf,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAdL,EAeKS,KAfL,CAeWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KAvBL;AAwBH,GA1BD;AA2BH;AACD,OAAO,SAASwB,8BAAT,CAAwC/B,SAAxC,EAAmD;AACtD,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,gCAAX,EAA6CJ,SAA7C,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAIuB,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB;AACAsB,MAAAA,YAAY,GAAGvC,QAAQ,CAACuC,YAAD,CAAvB;AACA5B,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BI,UAAAA,UAAU,EAAE,EACR,GAAGlB,SAAS,CAACkB,UADL;AAER,eAAGW,YAFK;AAGRG,YAAAA,YAAY,EAAEhC,SAAS,CAACgC;AAHhB,WADe;AAM3BjB,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAdL,EAeKS,KAfL,CAeWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KAvBL;AAwBH,GA1BD;AA2BH;AAED,OAAO,SAAS0B,0BAAT,CAAoCjC,SAApC,EAA+C;AAClD,SAAO,UAAUC,QAAV,EAAoB;AACvB,QAAID,SAAS,CAACkC,oBAAd,EAAoC;AAChCjC,MAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,MAAAA,KAAK,CAACU,IAAN,CAAW,4BAAX,EAAyCJ,SAAzC,EACKK,IADL,CACUC,QAAQ,IAAI;AAGd,YAAIuB,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,SAAnB;AACAsB,QAAAA,YAAY,GAAGvC,QAAQ,CAACuC,YAAD,CAAvB;AACA5B,QAAAA,QAAQ,CAAC;AACLY,UAAAA,IAAI,EAAEjB,cADD;AACiBkB,UAAAA,OAAO,EAAE;AAC3BI,YAAAA,UAAU,EAAE,EACR,GAAGlB,SAAS,CAACkB,UADL;AAER,iBAAGW,YAFK;AAGRM,cAAAA,eAAe,EAAEnC,SAAS,CAACmC,eAHnB;AAIRC,cAAAA,0BAA0B,EAAEpC,SAAS,CAACoC,0BAJ9B;AAKRC,cAAAA,0BAA0B,EAAErC,SAAS,CAACqC;AAL9B,aADe;AAQ3BtB,YAAAA,OAAO,EAAE;AARkB;AAD1B,SAAD,CAAR;;AAYA,YAAIT,QAAQ,CAACC,IAAT,CAAc+B,GAAlB,EAAuB;AACnBpD,UAAAA,KAAK,CAACuB,IAAN,CAAWH,QAAQ,CAACC,IAAT,CAAc+B,GAAzB;AACH;AAEJ,OAtBL,EAuBKd,KAvBL,CAuBWC,KAAK,IAAI;AACZxB,QAAAA,QAAQ,CAAC;AAAEY,UAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,UAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDzC,UAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,OA/BL;AAgCH,KAlCD,MAmCK;AACDrB,MAAAA,KAAK,CAACuB,IAAN,CAAWtB,IAAI,CAACuB,aAAL,CAAmB;AAC1BC,QAAAA,EAAE,EAAE;AADsB,OAAnB,CAAX;AAGH;AACJ,GAzCD;AA2CH;AAED,OAAO,SAAS4B,0BAAT,CAAoCC,UAApC,EAAgD;AACnD,SAAO,UAAUvC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,4BAAX,EAAyCoC,UAAU,CAACxC,SAApD,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAIuB,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB;AACAsB,MAAAA,YAAY,GAAGvC,QAAQ,CAACuC,YAAD,CAAvB;AACA5B,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BI,UAAAA,UAAU,EAAE,EACR,GAAGsB,UAAU,CAACtB,UADN;AAER,eAAGW,YAFK,CAGR;AACA;;AAJQ,WADe;AAO3Bd,UAAAA,OAAO,EAAE;AAPkB;AAD1B,OAAD,CAAR;AAWH,KAfL,EAgBKS,KAhBL,CAgBWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KAxBL;AAyBH,GA3BD;AA4BH;AACD,OAAO,SAASkC,iBAAT,CAA2BD,UAA3B,EAAuC;AAC1C,SAAO,UAAUvC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,0BAAX,EAAuCoC,UAAU,CAACxC,SAAlD,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAIuB,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB,CADc,CAEd;;AACA,UAAIW,UAAU,GAAG,EAAjB;;AACA,UAAIZ,QAAQ,CAACC,IAAT,CAAcmC,qBAAd,IAAuCpC,QAAQ,CAACC,IAAT,CAAcmC,qBAAd,CAAoC1B,MAApC,KAA+C,CAAtF,IACAV,QAAQ,CAACC,IAAT,CAAcoC,aAAd,IAA+BrC,QAAQ,CAACC,IAAT,CAAcoC,aAAd,CAA4B3B,MAA5B,KAAuC,CAD1E,EAC6E;AACzEE,QAAAA,UAAU,GAAG,EACT,GAAGsB,UAAU,CAACtB,UADL;AAET,aAAGW;AAFM,SAAb;AAIP,OANG,MAOK;AACDA,QAAAA,YAAY,CAACR,cAAb,GAA8B,EAA9B;AACAQ,QAAAA,YAAY,CAACe,sBAAb,GAAqC,EAArC;AACA1B,QAAAA,UAAU,GAAG,EACT,GAAGsB,UAAU,CAACtB,UADL;AAET,aAAGW;AAFM,SAAb;AAIH;;AACD,UAAIW,UAAU,CAACK,SAAX,KAAyB3C,SAAzB,IAAsCsC,UAAU,CAACK,SAAX,CAAqBC,OAArB,KAAiC,IAA3E,EAAiF;AAC7EN,QAAAA,UAAU,CAACK,SAAX,CAAqBC,OAArB,CAA6BC,KAA7B,GAAqC,EAArC;AACA7B,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BhB,SAA7B;AACH;;AACD,UAAIsC,UAAU,CAACQ,eAAX,KAA+B9C,SAA/B,IAA4CsC,UAAU,CAACQ,eAAX,CAA2BF,OAA3B,KAAuC,IAAvF,EAA6F;AACzFN,QAAAA,UAAU,CAACQ,eAAX,CAA2BF,OAA3B,CAAmCC,KAAnC,GAA2C,EAA3C;AACA7B,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BhB,SAA7B;AACH;;AACD,UAAIsC,UAAU,CAACS,kBAAX,KAAkC/C,SAAlC,IAA+CsC,UAAU,CAACS,kBAAX,CAA8BH,OAA9B,KAA0C,IAA7F,EAAmG;AAC/FN,QAAAA,UAAU,CAACS,kBAAX,CAA8BH,OAA9B,CAAsCC,KAAtC,GAA8C,EAA9C;AACA7B,QAAAA,UAAU,CAAC,mBAAD,CAAV,GAAkChB,SAAlC;AACH;;AACD,UAAIsC,UAAU,CAACU,aAAX,KAA6BhD,SAA7B,IAA0CsC,UAAU,CAACU,aAAX,CAAyBJ,OAAzB,KAAqC,IAAnF,EAAyF;AACrFN,QAAAA,UAAU,CAACU,aAAX,CAAyBJ,OAAzB,CAAiCC,KAAjC,GAAyC,EAAzC,CADqF,CAErF;;AACA7B,QAAAA,UAAU,CAAC,eAAD,CAAV,GAA8BhB,SAA9B;AAEH;;AACDZ,MAAAA,QAAQ,CAAC4B,UAAD,CAAR;AACAjB,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BI,UAAAA,UAD2B;AAE3BH,UAAAA,OAAO,EAAE,KAFkB;AAG3BoC,UAAAA,UAAU,EAAE,KAHe;AAI3BC,UAAAA,IAAI,EAAE,CAJqB;AAK3BC,UAAAA,IAAI,EAAEb,UAAU,CAACa,IALU;AAM3BC,UAAAA,QAAQ,EAAE,CANiB;AAO3BC,UAAAA,QAAQ,EAAEf,UAAU,CAACe,QAPM;AAQ3BC,UAAAA,eAAe,EAAE,EAAE,GAAGhB,UAAU,CAACgB,eAAhB;AAAiCC,YAAAA,IAAI,EAAEvD,SAAvC;AAAkDwD,YAAAA,MAAM,EAAExD;AAA1D,WARU;AAS3ByD,UAAAA,mBAAmB,EAAE,EAAE,GAAGnB,UAAU,CAACmB,mBAAhB;AAAqCF,YAAAA,IAAI,EAAEvD,SAA3C;AAAsDwD,YAAAA,MAAM,EAAExD;AAA9D,WATM;AAU3B0D,UAAAA,iBAAiB,EAAE,EAAE,GAAGpB,UAAU,CAACoB,iBAAhB;AAAmCH,YAAAA,IAAI,EAAEvD,SAAzC;AAAoDwD,YAAAA,MAAM,EAAExD;AAA5D,WAVQ;AAW3B2D,UAAAA,aAAa,EAAE,EAAE,GAAGrB,UAAU,CAACqB,aAAhB;AAA+BJ,YAAAA,IAAI,EAAEvD,SAArC;AAAgDwD,YAAAA,MAAM,EAAExD;AAAxD,WAXY;AAY3B4D,UAAAA,iBAAiB,EAAE,EAAE,GAAGtB,UAAU,CAACsB,iBAAhB;AAAmCL,YAAAA,IAAI,EAAEvD,SAAzC;AAAoDwD,YAAAA,MAAM,EAAExD;AAA5D,WAZQ;AAa3B6D,UAAAA,qBAAqB,EAAE,EAAE,GAAGvB,UAAU,CAACuB,qBAAhB;AAAuCN,YAAAA,IAAI,EAAEvD,SAA7C;AAAwDwD,YAAAA,MAAM,EAAExD;AAAhE,WAbI;AAc3B8D,UAAAA,oBAAoB,EAAE,EAAE,GAAGxB,UAAU,CAACwB,oBAAhB;AAAsCP,YAAAA,IAAI,EAAEvD,SAA5C;AAAuDwD,YAAAA,MAAM,EAAExD;AAA/D,WAdK;AAe3B+D,UAAAA,gBAAgB,EAAE,EAAE,GAAGzB,UAAU,CAACyB,gBAAhB;AAAkCR,YAAAA,IAAI,EAAEvD,SAAxC;AAAmDwD,YAAAA,MAAM,EAAExD;AAA3D,WAfS;AAgB3BgE,UAAAA,2BAA2B,EAAE,EAAE,GAAG1B,UAAU,CAAC0B,2BAAhB;AAA6CT,YAAAA,IAAI,EAAEvD,SAAnD;AAA8DwD,YAAAA,MAAM,EAAExD;AAAtE,WAhBF;AAiB3BiE,UAAAA,sBAAsB,EAAE,EAAE,GAAG3B,UAAU,CAAC2B,sBAAhB;AAAwCV,YAAAA,IAAI,EAAEvD,SAA9C;AAAyDwD,YAAAA,MAAM,EAAExD;AAAjE;AAjBG;AAD1B,OAAD,CAAR;AAqBH,KA5DL,EA6DKsB,KA7DL,CA6DWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KArEL;AAsEH,GAxED;AAyEH;AACG,OAAO,SAAS6D,iBAAT,CAA2B5B,UAA3B,EAAsC6B,YAAtC,EAAoD;AAC3D,SAAO,UAAUpE,QAAV,EAAoB;AACvB,QAAIqE,QAAQ,GAAG,EAAf;AACA9B,IAAAA,UAAU,CAACxC,SAAX,CAAqB,YAArB,IAAmC,IAAnC;AACA,UAAMuE,aAAa,GAAG7E,KAAK,CAACU,IAAN,CAAW,0BAAX,EAAuCoC,UAAU,CAACxC,SAAlD,CAAtB,CAHuB,CAIzB;;AACE,UAAMwE,WAAW,GAAG9E,KAAK,CAACU,IAAN,CAAW,gCAAX,EAA6CoC,UAAU,CAACxC,SAAxD,CAApB;;AACA,QAAIwC,UAAU,CAACxC,SAAX,CAAqByE,kBAArB,KAA4C,CAAhD,EAAmD;AAE/CH,MAAAA,QAAQ,GAAG,CAAEE,WAAF,CAAX;AACH,KAHD,MAIK;AACDF,MAAAA,QAAQ,GAAG,CAACC,aAAD,CACP;AADO,QAELC,WAFK,CAAX;AAIH;;AACDvE,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAV,IAAAA,KAAK,CAACyF,GAAN,CAAUJ,QAAV,EAEKjE,IAFL,CAEUC,QAAQ,IAAI;AACd;AACA;AAEA;AACA,UAAIqE,eAAe,GAAG,EAAtB,CALc,CAOd;AACA;AACA;AACA;AACA;;AACA,UAAIzD,UAAU,GAAG,EAAjB;AACA,UAAI0D,cAAc,GAAGpC,UAAU,CAACxC,SAAX,CAAqB4E,cAA1C;;AACA,UAAIpC,UAAU,CAACxC,SAAX,CAAqByE,kBAArB,KAA4C,CAAhD,EAAmD;AAC/C,cAAMI,cAAc,GAAGzF,mBAAmB,CAACkB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,IAAoB,EAArB,EAAyB,kBAAzB,EAC1C,kBAD0C,EACtBL,SADsB,EACXA,SADW,EACA,KADA,CAA1C;AAGHyE,QAAAA,eAAe,GAAGE,cAAc,CAACC,GAAf,CAAmB,YAAnB,CAAlB;AACG5D,QAAAA,UAAU,GAAG,EAAE,GAAGsB,UAAU,CAACtB,UAAhB;AAA4B6D,UAAAA,gBAAgB,EAAE,EAA9C;AAAkDC,UAAAA,WAAW,EAAE,EAA/D;AAAmErC,UAAAA,aAAa,EAAE;AAAlF,SAAb;;AACA,YAAGH,UAAU,CAACxC,SAAX,CAAqB4E,cAArB,CAAoCK,gBAAvC,EAAwD;AACpD,iBAAOzC,UAAU,CAACxC,SAAX,CAAqB4E,cAArB,CAAoCK,gBAA3C;AACP;;AACE,YAAGzC,UAAU,CAACxC,SAAX,CAAqB4E,cAArB,CAAoCM,kBAAvC,EAA0D;AACrD,iBAAO1C,UAAU,CAACxC,SAAX,CAAqB4E,cAArB,CAAoCM,kBAA3C;AACJ;AACH,OAZD,MAYO;AACH,YAAIrD,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAAC,CAAD,CAAR,CAAYC;AAAjB,SAAnB;AACAW,QAAAA,UAAU,GAAG,EACV,GAAGsB,UAAU,CAACtB,UADJ;AACe,aAAGW;AADlB,SAAb;AAGH,OA/Ba,CAiCd;;;AAGAvC,MAAAA,QAAQ,CAAC4B,UAAD,CAAR;AACAjB,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BI,UAAAA,UAD2B;AAE5B;AACA;AACAmD,UAAAA,YAJ4B;AAK3BM,UAAAA,eAL2B;AAM3B5D,UAAAA,OAAO,EAAE,KANkB;AAO3BoC,UAAAA,UAAU,EAAE,KAPe;AAQ3B5B,UAAAA,SAAS,EAAE,IARgB;AAS3B4D,UAAAA,UAAU,EAAC,IATgB;AAU3B/B,UAAAA,IAAI,EAAE,CAVqB;AAW3BC,UAAAA,IAAI,EAAEb,UAAU,CAACa,IAXU;AAY3BC,UAAAA,QAAQ,EAAE,CAZiB;AAa3BC,UAAAA,QAAQ,EAAEf,UAAU,CAACe,QAbM;AAc3BC,UAAAA,eAAe,EAAE,EAAE,GAAGhB,UAAU,CAACgB,eAAhB;AAAiCC,YAAAA,IAAI,EAAEvD,SAAvC;AAAkDwD,YAAAA,MAAM,EAAExD;AAA1D,WAdU;AAe3ByD,UAAAA,mBAAmB,EAAE,EAAE,GAAGnB,UAAU,CAACmB,mBAAhB;AAAqCF,YAAAA,IAAI,EAAEvD,SAA3C;AAAsDwD,YAAAA,MAAM,EAAExD;AAA9D,WAfM;AAgB3B0D,UAAAA,iBAAiB,EAAE,EAAE,GAAGpB,UAAU,CAACoB,iBAAhB;AAAmCH,YAAAA,IAAI,EAAEvD,SAAzC;AAAoDwD,YAAAA,MAAM,EAAExD;AAA5D,WAhBQ;AAiB3B2D,UAAAA,aAAa,EAAE,EAAE,GAAGrB,UAAU,CAACqB,aAAhB;AAA+BJ,YAAAA,IAAI,EAAEvD,SAArC;AAAgDwD,YAAAA,MAAM,EAAExD;AAAxD,WAjBY;AAkB3B4D,UAAAA,iBAAiB,EAAE,EAAE,GAAGtB,UAAU,CAACsB,iBAAhB;AAAmCL,YAAAA,IAAI,EAAEvD,SAAzC;AAAoDwD,YAAAA,MAAM,EAAExD;AAA5D,WAlBQ;AAmB3B6D,UAAAA,qBAAqB,EAAE,EAAE,GAAGvB,UAAU,CAACuB,qBAAhB;AAAuCN,YAAAA,IAAI,EAAEvD,SAA7C;AAAwDwD,YAAAA,MAAM,EAAExD;AAAhE,WAnBI;AAoB3B8D,UAAAA,oBAAoB,EAAE,EAAE,GAAGxB,UAAU,CAACwB,oBAAhB;AAAsCP,YAAAA,IAAI,EAAEvD,SAA5C;AAAuDwD,YAAAA,MAAM,EAAExD;AAA/D,WApBK;AAqB3B+D,UAAAA,gBAAgB,EAAE,EAAE,GAAGzB,UAAU,CAACyB,gBAAhB;AAAkCR,YAAAA,IAAI,EAAEvD,SAAxC;AAAmDwD,YAAAA,MAAM,EAAExD;AAA3D,WArBS;AAsB3BgE,UAAAA,2BAA2B,EAAE,EAAE,GAAG1B,UAAU,CAAC0B,2BAAhB;AAA6CT,YAAAA,IAAI,EAAEvD,SAAnD;AAA8DwD,YAAAA,MAAM,EAAExD;AAAtE,WAtBF;AAuB3BiE,UAAAA,sBAAsB,EAAE,EAAE,GAAG3B,UAAU,CAAC2B,sBAAhB;AAAwCV,YAAAA,IAAI,EAAEvD,SAA9C;AAAyDwD,YAAAA,MAAM,EAAExD;AAAjE;AAvBG;AAD1B,OAAD,CAAR;AA2BH,KAlEL,EAmEKsB,KAnEL,CAmEWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KA3EL;AA4EH,GA7FD;AA8FH;AACD,OAAO,SAAS6E,sBAAT,CAAgC5C,UAAhC,EAA2C6C,IAA3C,EAAgDC,OAAhD,EAAyD;AAC5D,SAAO,UAAUrF,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,UAAMK,SAAS,GAAG;AACdG,MAAAA,SAAS,EAAEqC,UAAU,CAACrC,SADR;AAEjB;AACGoF,MAAAA,QAAQ,EAAE/C,UAAU,CAAC+C,QAHP;AAIdC,MAAAA,WAAW,EAAEhD,UAAU,CAACrC,SAJV;AAKdsE,MAAAA,kBAAkB,EAAElF,aAAa,CAACkG,UALpB;AAMdC,MAAAA,eAAe,EAAElG,UAAU,CAACmG,SANd;AAOdC,MAAAA,eAAe,EAAE,WAPH;AAQdC,MAAAA,YAAY,EAAErD,UAAU,CAAC6B,YARX;AASdyB,MAAAA,YAAY,EAAEtD,UAAU,CAACsD,YATX;AAUdC,MAAAA,eAAe,EAAEvD,UAAU,CAACuD,eAVd;AAWdC,MAAAA,oBAAoB,EAACxD,UAAU,CAACwD,oBAXlB;AAYdC,MAAAA,uBAAuB,EAAEzD,UAAU,CAACN,oBAZtB;AAadgE,MAAAA,MAAM,EAAE1D,UAAU,CAAC0D,MAbL;AAcdC,MAAAA,cAAc,EAAE3D,UAAU,CAAC2D,cAdb;AAedC,MAAAA,kBAAkB,EAAC5D,UAAU,CAAC4D,kBAfhB;AAgBdd,MAAAA,OAAO,EAACA;AAhBM,KAAlB;AAkBA5F,IAAAA,KAAK,CAACU,IAAN,CAAW,gCAAX,EAA6CJ,SAA7C,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAIY,UAAU,GAAG,EACb,GAAGmE,IADU;AAEb,WAAG/E,QAAQ,CAACC;AAFC,OAAjB;;AAIA,UAAID,QAAQ,CAACC,IAAT,CAAc+B,GAAd,KAAsB,SAA1B,EAAqC;AACjC+D,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCC,YAAzC,CAAsD,MAAtD,EAA8DjG,QAAQ,CAACC,IAAT,CAAciG,QAA5E;AACAH,QAAAA,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCG,KAAzC;AACH,OAHD,MAGO;AACHvH,QAAAA,KAAK,CAACuB,IAAN,CAAWH,QAAQ,CAACC,IAAT,CAAc+B,GAAzB;AACH;;AAEDrC,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAiBO,UAAAA,MAAM,EAAEkB,UAAU,CAAClB,MAApC;AAA2CJ,UAAAA,UAA3C;AACtCwF,UAAAA,SAAS,EAAE,KAD2B;AACpB9B,UAAAA,cAAc,EAAE,EADI;AACA+B,UAAAA,SAAS,EAAE;AADX;AAAjC,OAAD,CAAR;AAEH,KAfL,EAgBKnF,KAhBL,CAgBWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KAxBL;AAyBH,GA9CD;AA+CH;AACD,OAAO,SAASqG,uBAAT,CAAiC5G,SAAjC,EAA4C;AAC/C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,kDAAX,EAA+DJ,SAA/D,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAIuB,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB;AACAsB,MAAAA,YAAY,GAAGvC,QAAQ,CAACuC,YAAD,CAAvB;AACA5B,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BI,UAAAA,UAAU,EAAE,EACR,GAAGlB,SAAS,CAACkB,UADL;AAER,eAAGW,YAFK;AAGRM,YAAAA,eAAe,EAAEnC,SAAS,CAACmC;AAHnB,WADe;AAM3BpB,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAdL,EAeKS,KAfL,CAeWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KAvBL;AAwBH,GA1BD;AA2BH;AACD,OAAO,SAASsG,sBAAT,CAAgCrE,UAAhC,EAA2CsE,UAA3C,EAAuD;AAC1D,SAAO,UAAU7G,QAAV,EAAoB;AACvB,QAAI8G,cAAc,GAAG;AACjBC,MAAAA,KAAK,EAAExE,UAAU,CAACxC,SAAX,CAAqBgH,KADX;AAEjBC,MAAAA,GAAG,EAAEzE,UAAU,CAACxC,SAAX,CAAqBiH,GAFT;AAIjBC,MAAAA,eAAe,EAAE1E,UAAU,CAACxC,SAAX,CAAqBkH,eAJrB;AAKjBpB,MAAAA,YAAY,EAAEtD,UAAU,CAACxC,SAAX,CAAqB8F,YALlB;AAMjBC,MAAAA,eAAe,EAAEvD,UAAU,CAACxC,SAAX,CAAqB+F,eANrB;AAOjBK,MAAAA,kBAAkB,EAAE5D,UAAU,CAACxC,SAAX,CAAqBoG,kBAPxB;AAQjBe,MAAAA,YAAY,EAAE3E,UAAU,CAACxC,SAAX,CAAqBmH,YARlB;AASjBC,MAAAA,SAAS,EAAE5E,UAAU,CAACxC,SAAX,CAAqBoH,SATf;AAUjBlF,MAAAA,oBAAoB,EAAEM,UAAU,CAACxC,SAAX,CAAqBkC,oBAV1B;AAWjBmF,MAAAA,mBAAmB,EAAE7E,UAAU,CAACxC,SAAX,CAAqBqH,mBAXzB;AAYjB9B,MAAAA,QAAQ,EAAE/C,UAAU,CAACxC,SAAX,CAAqBuF,QAZd;AAajB+B,MAAAA,cAAc,EAAE9E,UAAU,CAACxC,SAAX,CAAqBsH,cAbpB;AAcjBnB,MAAAA,cAAc,EAAC3D,UAAU,CAAC2D,cAdT;AAejBhG,MAAAA,SAAS,EAAEqC,UAAU,CAACrC,SAfL;AAgBjBsE,MAAAA,kBAAkB,EAACjC,UAAU,CAACxC,SAAX,CAAqByE,kBAhBvB;AAiBjBrC,MAAAA,0BAA0B,EAACI,UAAU,CAACtB,UAAX,CAAsBkB,0BAjBhC;AAkBjB+C,MAAAA,UAAU,EAAC;AAlBM,KAArB;AAqBAlF,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,0BAAX,EAAuC2G,cAAvC,EACK1G,IADL,CACUC,QAAQ,IAAI;AACd,UAAIuB,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB,CADc,CAEd;;AACA,UAAIW,UAAU,GAAG,EACb,GAAGsB,UAAU,CAACtB,UADD;AAEb,WAAGW;AAFU,OAAjB;;AAIA,UAAIW,UAAU,CAACQ,eAAX,KAA+B9C,SAA/B,IAA4CsC,UAAU,CAACQ,eAAX,CAA2BF,OAA3B,KAAuC,IAAvF,EAA6F;AACzFN,QAAAA,UAAU,CAACQ,eAAX,CAA2BF,OAA3B,CAAmCC,KAAnC,GAA2C,EAA3C;AACA7B,QAAAA,UAAU,CAAC,gBAAD,CAAV,GAA+BhB,SAA/B;AACH;;AACD,UAAIsC,UAAU,CAACS,kBAAX,KAAkC/C,SAAlC,IAA+CsC,UAAU,CAACS,kBAAX,CAA8BH,OAA9B,KAA0C,IAA7F,EAAmG;AAC/FN,QAAAA,UAAU,CAACS,kBAAX,CAA8BH,OAA9B,CAAsCC,KAAtC,GAA8C,EAA9C;AACA7B,QAAAA,UAAU,CAAC,mBAAD,CAAV,GAAkChB,SAAlC;AACH;;AACD,UAAIsC,UAAU,CAACU,aAAX,KAA6BhD,SAA7B,IAA0CsC,UAAU,CAACU,aAAX,CAAyBJ,OAAzB,KAAqC,IAAnF,EAAyF;AACrFN,QAAAA,UAAU,CAACU,aAAX,CAAyBJ,OAAzB,CAAiCC,KAAjC,GAAyC,EAAzC,CADqF,CAErF;;AACA7B,QAAAA,UAAU,CAAC,eAAD,CAAV,GAA8BhB,SAA9B;AAEH;;AACDZ,MAAAA,QAAQ,CAAC4B,UAAD,CAAR;AACAjB,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BI,UAAAA,UAD2B;AAE3BH,UAAAA,OAAO,EAAE,KAFkB;AAG3BoC,UAAAA,UAAU,EAAE,KAHe;AAI3BC,UAAAA,IAAI,EAAE,CAJqB;AAK3BC,UAAAA,IAAI,EAAEb,UAAU,CAACa,IALU;AAM3BC,UAAAA,QAAQ,EAAE,CANiB;AAO3BC,UAAAA,QAAQ,EAAEf,UAAU,CAACe,QAPM;AAQ3BC,UAAAA,eAAe,EAAE,EAAE,GAAGhB,UAAU,CAACgB,eAAhB;AAAiCC,YAAAA,IAAI,EAAEvD,SAAvC;AAAkDwD,YAAAA,MAAM,EAAExD;AAA1D,WARU;AAS3ByD,UAAAA,mBAAmB,EAAE,EAAE,GAAGnB,UAAU,CAACmB,mBAAhB;AAAqCF,YAAAA,IAAI,EAAEvD,SAA3C;AAAsDwD,YAAAA,MAAM,EAAExD;AAA9D,WATM;AAU3B0D,UAAAA,iBAAiB,EAAE,EAAE,GAAGpB,UAAU,CAACoB,iBAAhB;AAAmCH,YAAAA,IAAI,EAAEvD,SAAzC;AAAoDwD,YAAAA,MAAM,EAAExD;AAA5D,WAVQ;AAW3B2D,UAAAA,aAAa,EAAE,EAAE,GAAGrB,UAAU,CAACqB,aAAhB;AAA+BJ,YAAAA,IAAI,EAAEvD,SAArC;AAAgDwD,YAAAA,MAAM,EAAExD;AAAxD,WAXY;AAY3B4D,UAAAA,iBAAiB,EAAE,EAAE,GAAGtB,UAAU,CAACsB,iBAAhB;AAAmCL,YAAAA,IAAI,EAAEvD,SAAzC;AAAoDwD,YAAAA,MAAM,EAAExD;AAA5D,WAZQ;AAa3B6D,UAAAA,qBAAqB,EAAE,EAAE,GAAGvB,UAAU,CAACuB,qBAAhB;AAAuCN,YAAAA,IAAI,EAAEvD,SAA7C;AAAwDwD,YAAAA,MAAM,EAAExD;AAAhE,WAbI;AAc3B8D,UAAAA,oBAAoB,EAAE,EAAE,GAAGxB,UAAU,CAACwB,oBAAhB;AAAsCP,YAAAA,IAAI,EAAEvD,SAA5C;AAAuDwD,YAAAA,MAAM,EAAExD;AAA/D,WAdK;AAe3B+D,UAAAA,gBAAgB,EAAE,EAAE,GAAGzB,UAAU,CAACyB,gBAAhB;AAAkCR,YAAAA,IAAI,EAAEvD,SAAxC;AAAmDwD,YAAAA,MAAM,EAAExD;AAA3D,WAfS;AAgB3BgE,UAAAA,2BAA2B,EAAE,EAAE,GAAG1B,UAAU,CAAC0B,2BAAhB;AAA6CT,YAAAA,IAAI,EAAEvD,SAAnD;AAA8DwD,YAAAA,MAAM,EAAExD;AAAtE,WAhBF;AAiB3BiE,UAAAA,sBAAsB,EAAE,EAAE,GAAG3B,UAAU,CAAC2B,sBAAhB;AAAwCV,YAAAA,IAAI,EAAEvD,SAA9C;AAAyDwD,YAAAA,MAAM,EAAExD;AAAjE;AAjBG;AAD1B,OAAD,CAAR;AAqBH,KA5CL,EA6CKsB,KA7CL,CA6CWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KArDL;AAsDH,GA7ED;AA8EH;AACD,OAAO,SAASgH,+BAAT,CAAyCvH,SAAzC,EAAoD;AACvD,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,yCAAX,EAAsDJ,SAAtD,EACKK,IADL,CACUC,QAAQ,IAAI;AACT,YAAMkH,gBAAgB,GAAGpI,mBAAmB,CAACkB,QAAQ,CAACC,IAAT,IAAiB,EAAlB,EAAsB,oBAAtB,EACjD,cADiD,EACjCL,SADiC,EACtBA,SADsB,EACX,KADW,CAA5C;AAGT,YAAMuH,iBAAiB,GAAGD,gBAAgB,CAAC1C,GAAjB,CAAqB,YAArB,CAA1B;AACI,UAAIjD,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB;AACAsB,MAAAA,YAAY,GAAGvC,QAAQ,CAACuC,YAAD,CAAvB;AACA5B,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3B2G,UAAAA,iBAD2B;AAE3BvG,UAAAA,UAAU,EAAE,EACR,GAAGlB,SAAS,CAACkB,UADL;AAER,eAAGW;AAFK,WAFe;AAM3Bd,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH,KAlBL,EAmBKS,KAnBL,CAmBWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KA3BL;AA4BH,GA9BD;AA+BH;AACD,OAAO,SAASmH,sBAAT,CAAgC1H,SAAhC,EAA2C;AAC9C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,gCAAX,EAA6CJ,SAA7C,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,YAAMuE,cAAc,GAAGzF,mBAAmB,CAACkB,QAAQ,CAACC,IAAT,IAAiB,EAAlB,EAAsB,kBAAtB,EAC1C,kBAD0C,EACtBL,SADsB,EACXA,SADW,EACA,KADA,CAA1C;AAGJ,YAAMyE,eAAe,GAAGE,cAAc,CAACC,GAAf,CAAmB,YAAnB,CAAxB,CAJkB,CAMlB;AACA;AAEA;;AACI,UAAIjD,YAAY,GAAG,EAAE,GAAGvB,QAAQ,CAACC;AAAd,OAAnB;AACAsB,MAAAA,YAAY,GAAGvC,QAAQ,CAACuC,YAAD,CAAvB;AACA5B,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3B6D,UAAAA,eAD2B;AAE3BzD,UAAAA,UAAU,EAAE,EACR,GAAGlB,SAAS,CAACkB,UADL;AAER,eAAGW,YAFK;AAGR8F,YAAAA,gBAAgB,EAAE3H,SAAS,CAAC2H;AAHpB,WAFe;AAO3B5G,UAAAA,OAAO,EAAE;AAPkB;AAD1B,OAAD,CAAR;AAWH,KAxBL,EAyBKS,KAzBL,CAyBWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KAjCL;AAkCH,GApCD;AAqCH;AACD,OAAO,SAASqH,kBAAT,CAA4B5H,SAA5B,EAAuC;AAC1C,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAW,4BAAX,EAAyCJ,SAAzC,EACKK,IADL,CACUC,QAAQ,IAAI;AAEd,UAAIA,QAAQ,CAACC,IAAT,CAAc,KAAd,CAAJ,EAA0B;AACtBrB,QAAAA,KAAK,CAACuB,IAAN,CAAWH,QAAQ,CAACC,IAAT,CAAc+B,GAAzB;AACH;;AACGrC,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;AACP,KAPL,EAQKS,KARL,CAQWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KAhBL;AAiBH,GAnBD;AAoBH;AACD,OAAO,SAASU,yBAAT,CAAmC4G,UAAnC,EAA8CrF,UAA9C,EAA0D;AAC7D,SAAO,UAAUvC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACN,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACU,IAAN,CAAY0H,MAAD,CAAStF,UAAU,CAAC,KAAD,CAAnB,IAA4B,iCAAvC,EAAyEuF,IAAI,CAACC,SAAL,CAAeH,UAAf,CAAzE,EAAoG;AAChGI,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADuF,KAApG,EAKK5H,IALL,CAKUC,QAAQ,IAAI;AAEdL,MAAAA,QAAQ,CAAC;AACLY,QAAAA,IAAI,EAAEjB,cADD;AACiBkB,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,OAAO,EAAE;AADkB;AAD1B,OAAD,CAAR;AAKH,KAZL,EAaKS,KAbL,CAaWC,KAAK,IAAI;AACZxB,MAAAA,QAAQ,CAAC;AAAEY,QAAAA,IAAI,EAAEjB,cAAR;AAAwBkB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIU,KAAK,CAACnB,QAAN,CAAeoB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BxC,QAAAA,KAAK,CAACuC,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDzC,QAAAA,KAAK,CAACuB,IAAN,CAAWgB,KAAK,CAACnB,QAAN,CAAeC,IAA1B;AACH;AACJ,KArBL;AAsBH,GAxBD;AAyBH","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { reportCOAType, REPORTTYPE } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n\r\n\r\n    return function (dispatch) {\r\n      if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateRelease\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n                if (response.data.statusCodeValue !== 200) {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response.data.body\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n\r\n                }\r\n                else {\r\n         \r\n                    if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n                    }\r\n                    let masterData = {\r\n\r\n                        ...Data1, ...response.data.body,\r\n    \r\n\r\n                    };\r\n\r\n                    console.log(\"ReleasedTest,\", masterData);\r\n                     sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n                  //  dispatch(generateReport(inputData,masterData))\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            loading: false,\r\n                            openModal:false\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {} \r\n                if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n                    response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                    masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                    }\r\n            }\r\n                else {\r\n                    responseData.ReleaseHistory = []\r\n                    responseData.selectedReleaseHistory= []\r\n                    masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                    }\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n    export function getApprovedSample(inputParam,ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = []; \r\n        inputParam.inputData['isAddPopup']=true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n      //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n            urlArray = [ projectType];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample\r\n                //,reportType\r\n                , projectType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                \r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let selectedRecord = inputParam.inputData.selectedRecord;\r\n                if (inputParam.inputData.ncoareporttypecode === 7) {\r\n                    const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n                 ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if(inputParam.inputData.selectedRecord.nprojecttypecode){\r\n                        delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                }\r\n                   if(inputParam.inputData.selectedRecord.nprojectmastercode){\r\n                        delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                   }\r\n                } else {\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                       ...inputParam.masterData,...responseData\r\n                   }\r\n                }\r\n            \r\n                // responseData = sortData(responseData)\r\n\r\n                \r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                       // selectedRecord,\r\n                       // ReportTypeList,\r\n                       ncontrolCode,\r\n                        ProjectTypeList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: true,\r\n                        isAddPopup:true,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function generateReleasedReport(inputParam,Data,Preview) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: inputParam.npreregno,\r\n         //   nsectioncode: inputParam.nsectioncode || -1,\r\n            userinfo: inputParam.userinfo,\r\n            nprimarykey: inputParam.npreregno,\r\n            ncoareporttypecode: reportCOAType.SAMPLEWISE,\r\n            nreporttypecode: REPORTTYPE.COAREPORT,\r\n            sprimarykeyname: \"npreregno\",\r\n            ncontrolcode: inputParam.ncontrolCode,\r\n            nregtypecode: inputParam.nregtypecode,\r\n            nregsubtypecode: inputParam.nregsubtypecode,\r\n            ntransactiontestcode:inputParam.ntransactiontestcode,\r\n            napproveconfversioncode: inputParam.napprovalversioncode,\r\n            action: inputParam.action,\r\n            ncoaparentcode: inputParam.ncoaparentcode,\r\n            ntransactionstatus:inputParam.ntransactionstatus,\r\n            Preview:Preview\r\n        }\r\n        rsapi.post(\"release/generateReleasedReport\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n               \r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false,change: inputParam.change,masterData,\r\n                    modalShow: false, selectedRecord: {}, loadEsign: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam,coahistory) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,          \r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            ncoaparentcode:inputParam.ncoaparentcode,\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode:inputParam.inputData.ncoareporttypecode,\r\n            ndesigntemplatemappingcode:inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup:false\r\n            \r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTest'] = undefined\r\n                    masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        take: inputParam.take,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        resultDataState: { ...inputParam.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParam.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParam.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParam.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParam.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParam.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParam.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParam.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                     const projectMasterMap = constructOptionList(response.data || [], \"nprojectmastercode\",\r\n                \"sprojectcode\", undefined, undefined, false);\r\n                \r\n            const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n            //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n            //     \"sprojecttypename\", undefined, undefined, false);\r\n                \r\n            // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n                \r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateExternalOrderStatus(portallist,inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"])+\"/portal/UpdateMultiSampleStatus\",JSON.stringify(portallist),{\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}