{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\Registration.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { showUnderDevelopment, callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo, filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetail, getTestByComponentChange, getPreviewTemplate, getChildValues } from '../../actions';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport { formatInputDate, getControlMap, listDataFromDynamicArray, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, checkCancelAndReject, convertDateTimetoString } from '../../components/CommonScript';\nimport RegistrationFilter from './RegistrationFilter';\nimport Esign from '../audittrail/Esign';\nimport { injectIntl } from 'react-intl';\nimport { ProductList } from '../product/product.styled';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SplitterLayout from \"react-splitter-layout\";\nimport AddTest from './AddTest';\nimport PreRegisterPopUp from './PreRegisterPopUp';\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../../components/Enumeration';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { checkDuplicateComponentandManufLot, fnCheckBatchComponentMandatory, fnCheckBatchProtocolComponentMandatory, getRegistration, getRegistrationGeneral, TestListManipulation, getComponentListfromUnwantedAttr, checkTestPresent, getRegistrationRoutine } from './RegistrationValidation';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel } from '../../components/App.styles';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddSource from './AddSource';\nimport AddPrinter from './AddPrinter';\nimport SampleGridTab from './SampleGridTab';\nimport AddFile from './AddFile';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport EditPreRegistration from './EditPreRegistration';\nimport { ReactComponent as Quarantine } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Quarantine.svg\";\nimport { ReactComponent as Register } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/register.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport SourceTab from './SourceTab';\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegistrationResultTab from './RegistrationResultTab';\nimport PreRegisterRoutine from './PreRegisterRoutine';\nimport PortalModal from '../../PortalModal';\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\n\nclass Registration extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onReload = () => {\n      // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\n      // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const RealFromDate = obj.fromDate;\n      const RealToDate = obj.toDate;\n      let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue;\n      let activeSampleTab = this.props.Login.activeSampleTab;\n      let activeTestTab = this.props.Login.activeTestTab;\n      let SampleTypeValue = RealSampleTypeValue;\n      let RegTypeValue = RealRegTypeValue;\n      let RegSubTypeValue = RealRegSubTypeValue;\n      let FilterStatusValue = RealFilterStatusValue; // let FromDate = this.props.Login.masterData.FromDate\n      // let ToDate = this.props.Login.masterData.ToDate\n\n      const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        FromDate,\n        ToDate,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        SampleTypeValue,\n        RegTypeValue,\n        RegSubTypeValue,\n        FilterStatusValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        flag: 1\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter: this.state.selectedFilter\n        };\n        this.props.ReloadData(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      // let RealFromDate = new Date(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate)\n      // let RealToDate = new Date(this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\n      const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n      const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n      let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let activeSampleTab = this.props.Login.activeSampleTab;\n\n      if (this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode !== RegistrationType.PLASMA_POOL) {\n        activeSampleTab = \"IDS_SAMPLEATTACHMENTS\";\n      }\n\n      let activeTestTab = this.props.Login.activeTestTab;\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\n        //     this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\n        const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        const selectedFilter = {};\n        selectedFilter[\"fromdate\"] = RealFromDate;\n        selectedFilter[\"todate\"] = RealToDate;\n        const inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter\n        };\n        this.props.getRegistrationSample(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveChildTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\"); // selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\n\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const inputData = {\n        TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Test\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef\n      };\n\n      if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.mandatoryList = (preregister, component, test, source, printer, nregtypecode, nregsubtypecode, operation, file, childtest) => {\n      let mandatory = [];\n\n      if (file) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_IMPORTFILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      } else if (preregister && component === false && test === false) {\n        if (operation === \"create\") {\n          //ROUTINE\n          if (nregsubtypecode === RegistrationSubType.ROUTINE) {\n            mandatory = [{\n              \"mandatory\": true,\n              \"idsName\": \"IDS_CLIENT\",\n              \"dataField\": \"nclientcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCTCATEGORY\",\n              \"dataField\": \"nproductcatcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCT\",\n              \"dataField\": \"nproductcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_SPECIFICATION\",\n              \"dataField\": \"nallottedspeccode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RECEIVEDDATE\",\n              \"dataField\": \"dreceiveddate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_TIMEZONE\",\n              \"dataField\": \"ntzdreceivedate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_DISPOSITION\",\n              \"dataField\": \"ndisposition\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_TOTALQUANTITY\",\n              \"dataField\": \"stotalqty\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_UNIT\",\n              \"dataField\": \"ntotalunitcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRIORITY\",\n              \"dataField\": \"npriority\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }];\n          } else if (nregtypecode === RegistrationType.BATCH && nregsubtypecode !== RegistrationSubType.PROTOCOL || nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\n            mandatory = [{\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RMSNO\",\n              \"dataField\": \"nrmsno\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCTCATEGORY\",\n              \"dataField\": \"nproductcatcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCT\",\n              \"dataField\": \"nproductcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERNAME\",\n              \"dataField\": \"nproductmanufcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERSITENAME\",\n              \"dataField\": \"smanufsitename\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_SPECIFICATION\",\n              \"dataField\": \"nallottedspeccode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }];\n          } else {\n            mandatory = [{\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCTCATEGORY\",\n              \"dataField\": \"nproductcatcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCT\",\n              \"dataField\": \"nproductcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERNAME\",\n              \"dataField\": \"nproductmanufcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERSITENAME\",\n              \"dataField\": \"smanufsitename\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_SPECIFICATION\",\n              \"dataField\": \"nallottedspeccode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }];\n          }\n        } else {\n          if (nregsubtypecode === RegistrationSubType.ROUTINE) {\n            mandatory = [{\n              \"mandatory\": true,\n              \"idsName\": \"IDS_CLIENT\",\n              \"dataField\": \"nclientcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCTCATEGORY\",\n              \"dataField\": \"nproductcatcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCT\",\n              \"dataField\": \"nproductcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_SPECIFICATION\",\n              \"dataField\": \"nallottedspeccode\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RECEIVEDDATE\",\n              \"dataField\": \"dreceiveddate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_TIMEZONE\",\n              \"dataField\": \"ntzdreceivedate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_DISPOSITION\",\n              \"dataField\": \"ndisposition\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_TOTALQUANTITY\",\n              \"dataField\": \"stotalqty\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_UNIT\",\n              \"dataField\": \"ntotalunitcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRIORITY\",\n              \"dataField\": \"npriority\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }];\n          } else if (nregsubtypecode === RegistrationSubType.EU || nregsubtypecode === RegistrationSubType.NON_EU) {\n            mandatory = [{\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RMSNO\",\n              \"dataField\": \"nrmsno\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCTCATEGORY\",\n              \"dataField\": \"nproductcatcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCT\",\n              \"dataField\": \"nproductcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERNAME\",\n              \"dataField\": \"nproductmanufcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERSITENAME\",\n              \"dataField\": \"smanufsitename\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_SPECIFICATION\",\n              \"dataField\": \"nallottedspeccode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFLOTNO\",\n              \"dataField\": \"smanuflotno\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_STORAGECONDITION\",\n              \"dataField\": \"nstorageconditioncode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_NOOFCONTAINER\",\n              \"dataField\": \"nnoofcontainer\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RECEIVEDDATE\",\n              \"dataField\": \"dreceiveddate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_TIMEZONE\",\n              \"dataField\": \"ntzdreceivedate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }];\n          } else if (nregsubtypecode === RegistrationSubType.PROTOCOL) {\n            mandatory = [{\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RMSNO\",\n              \"dataField\": \"nrmsno\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCTCATEGORY\",\n              \"dataField\": \"nproductcatcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCT\",\n              \"dataField\": \"nproductcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERNAME\",\n              \"dataField\": \"nproductmanufcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERSITENAME\",\n              \"dataField\": \"smanufsitename\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_SPECIFICATION\",\n              \"dataField\": \"nallottedspeccode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFLOTNO\",\n              \"dataField\": \"smanuflotno\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RECEIVEDDATE\",\n              \"dataField\": \"dreceiveddate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_TIMEZONE\",\n              \"dataField\": \"ntzdreceivedate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }];\n          } else {\n            mandatory = [{\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RMSNO\",\n              \"dataField\": \"nrmsno\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCTCATEGORY\",\n              \"dataField\": \"nproductcatcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_PRODUCT\",\n              \"dataField\": \"nproductcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERNAME\",\n              \"dataField\": \"nproductmanufcode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFACTURERSITENAME\",\n              \"dataField\": \"smanufsitename\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_SPECIFICATION\",\n              \"dataField\": \"nallottedspeccode\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_MANUFLOTNO\",\n              \"dataField\": \"smanuflotno\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_NOOFCONTAINER\",\n              \"dataField\": \"nnoofcontainer\",\n              \"mandatoryLabel\": \"IDS_ENTER\",\n              \"controlType\": \"textbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_RECEIVEDDATE\",\n              \"dataField\": \"dreceiveddate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }, {\n              \"mandatory\": true,\n              \"idsName\": \"IDS_TIMEZONE\",\n              \"dataField\": \"ntzdreceivedate\",\n              \"mandatoryLabel\": \"IDS_SELECT\",\n              \"controlType\": \"selectbox\"\n            }];\n          }\n        }\n      } else if (component && preregister) {\n        if (nregtypecode === RegistrationType.BATCH && (nregsubtypecode === RegistrationSubType.EU || nregsubtypecode === RegistrationSubType.NON_EU)) {\n          mandatory = [{\n            \"mandatory\": true,\n            \"idsName\": \"IDS_COMPONENT\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_MANUFLOTNO\",\n            \"dataField\": \"smanuflotno\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_STORAGECONDITION\",\n            \"dataField\": \"nstorageconditioncode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_NOOFCONTAINER\",\n            \"dataField\": \"nnoofcontainer\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_RECEIVEDDATE\",\n            \"dataField\": \"dreceiveddate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_TIMEZONE\",\n            \"dataField\": \"ntzdreceivedate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }];\n        } else if (nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\n          mandatory = [{\n            \"mandatory\": true,\n            \"idsName\": \"IDS_COMPONENT\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_MANUFLOTNO\",\n            \"dataField\": \"smanuflotno\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_POOLBULKVOLUME\",\n            \"dataField\": \"sbulkvolume\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_NOOFCONTAINER\",\n            \"dataField\": \"nnoofcontainer\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_RECEIVEDDATE\",\n            \"dataField\": \"dreceiveddate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_TIMEZONE\",\n            \"dataField\": \"ntzdreceivedate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }];\n        } else if (nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode === RegistrationSubType.EXTERNAL_POOL) {\n          mandatory = [{\n            \"mandatory\": true,\n            \"idsName\": \"IDS_COMPONENT\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_MANUFLOTNO\",\n            \"dataField\": \"smanuflotno\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, // { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\" },\n          {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_RECEIVEDDATE\",\n            \"dataField\": \"dreceiveddate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_TIMEZONE\",\n            \"dataField\": \"ntzdreceivedate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }];\n        } else if (nregsubtypecode === RegistrationSubType.PROTOCOL) {\n          mandatory = [{\n            \"mandatory\": true,\n            \"idsName\": \"IDS_COMPONENT\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_MANUFLOTNO\",\n            \"dataField\": \"smanuflotno\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_NOOFCONTAINER\",\n            \"dataField\": \"nnoofcontainer\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_RECEIVEDDATE\",\n            \"dataField\": \"dreceiveddate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_TIMEZONE\",\n            \"dataField\": \"ntzdreceivedate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }];\n        } else if (nregtypecode === RegistrationType.NON_BATCH && nregsubtypecode === RegistrationSubType.CONTRACTTESTING) {\n          mandatory = [{\n            \"mandatory\": true,\n            \"idsName\": \"IDS_COMPONENT\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_MANUFLOTNO\",\n            \"dataField\": \"smanuflotno\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, // { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\" },\n          {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_RECEIVEDDATE\",\n            \"dataField\": \"dreceiveddate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_TIMEZONE\",\n            \"dataField\": \"ntzdreceivedate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }];\n        } else {\n          mandatory = [{\n            \"mandatory\": true,\n            \"idsName\": \"IDS_COMPONENT\",\n            \"dataField\": \"ncomponentcode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_MANUFLOTNO\",\n            \"dataField\": \"smanuflotno\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_NOOFCONTAINER\",\n            \"dataField\": \"nnoofcontainer\",\n            \"mandatoryLabel\": \"IDS_ENTER\",\n            \"controlType\": \"textbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_RECEIVEDDATE\",\n            \"dataField\": \"dreceiveddate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }, {\n            \"mandatory\": true,\n            \"idsName\": \"IDS_TIMEZONE\",\n            \"dataField\": \"ntzdreceivedate\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          }];\n        }\n      } else if (test && preregister) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } // else if (file) {\n      //     mandatory = [\n      //         {\"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"ntestgrouptestcode\" }\n      //     ];\n      // }\n      else if (source) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_SOURCENAME\",\n          \"dataField\": \"ncountrycode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (printer) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_PRINTER\",\n          \"dataField\": \"sprintername\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (childtest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      }\n\n      return mandatory;\n    };\n\n    this.getRegistrationComboService = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId) => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate.jsondata;\n      Layout.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n              if (componentrow.inputtype === \"combo\") {\n                data.push(componentrow);\n              } else {\n                withoutCombocomponent.push(componentrow);\n              }\n            }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n          });\n        });\n      });\n      const comboComponents = data;\n      let childColumnList = {};\n      data.map(columnList => {\n        const val = this.comboChild(data, columnList, childColumnList, true);\n        data = val.data;\n        childColumnList = val.childColumnList;\n      });\n      const mapOfFilterRegData = {\n        nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n      };\n      this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData);\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = this.comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterChange = (event, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      }; //Routine\n\n      let getComponents = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ? true : false;\n\n      if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n        this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      } else {\n        if (event.key !== this.props.Login.ActiveKey) {\n          this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\", \"ok\", \"cancel\", () => this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n        }\n      }\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {activeSampleTab, screenName: activeSampleTab }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        // if (this.props.Login.masterData.RealRegTypeValue.nregtypecode !== RegistrationType.PLASMA_POOL){\n        //     activeSampleTab = \"IDS_SAMPLEATTACHMENTS\";\n        // }\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.ontestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {activeTestTab, screenName: activeTestTab }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState\n          };\n          this.props.getTestChildTabDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedFile,\n        actionType: \"new\"\n      });\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.onUpdateRegistrationConfirm = () => {\n      this.showAlert();\n      this.onUpdateRegistration(this.props.Login.regEditParam.saveType, this.props.Login.regEditParam.formRef, this.props.Login.regEditParam.operation, 2);\n    };\n\n    this.confirmAlert = () => {\n      if (this.state.showConfirmAlert) {\n        if (this.props.Login.regDateEditConfirmMessage) {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.regDateEditConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onUpdateRegistrationConfirm(), undefined, () => this.showAlert());\n        } else {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.booleanFlag, \"ok\", \"Cancel\", () => this.insertRegistration(false), undefined, () => this.showAlert());\n        }\n      }\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.showAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n      let booleanFlag = true;\n\n      if (this.state.selectedRecord.nallottedspeccode !== undefined && this.state.selectedRecord.nallottedspeccode !== \"\") {\n        if (this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\n          if (this.state.selectedRecord.nmanufcode === undefined || this.state.selectedRecord.nmanufcode === \"\") {\n            booleanFlag = false;\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTMANUFACTURER\"\n            }));\n          }\n        }\n\n        if (booleanFlag) {\n          if (this.state.selectedRecord.nallottedspeccode !== undefined && this.state.selectedRecord.nallottedspeccode !== \"\") {\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedRecord.ntemplatemanipulationcode;\n            Map[\"nallottedspeccode\"] = this.state.selectedRecord.nallottedspeccode.value;\n            Map[\"nmanufcode\"] = this.state.selectedRecord.nmanufcode;\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n            Map[\"testrequired\"] = false;\n            Map[\"userinfo\"] = this.props.Login.userInfo;\n            this.props.AddComponent(Map);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTSPECIFICATION\"\n            }));\n          }\n        }\n      }\n    };\n\n    this.AddFile = () => {\n      let selectedRecord = this.state.selectedRecord;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\n      let booleanmanuf = true;\n\n      if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\n        booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false;\n      }\n\n      if (booleanmanuf) {\n        if (this.state.selectedRecord.nallottedspeccode !== undefined) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadFile: true,\n              ChildscreenName: \"File\",\n              childoperation: \"Import\",\n              parentPopUpSize: \"lg\",\n              selectedFile: undefined\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMANUFACTURER\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectComponent[name] = '';\n        this.setState({\n          selectComponent\n        });\n      } else {\n        selectComponent[name] = value;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.addComponentTest = selectedComponent => {\n      if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n        delete selectedComponent[\"selected\"];\n        this.props.getTest(selectedComponent, this.props.Login);\n      } else {\n        if (this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECTOADDTEST\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        }\n      }\n    };\n\n    this.addComponentSource = selectedComponent => {\n      delete selectedComponent[\"selected\"];\n      this.props.getComponentSource(selectedComponent, this.props.Login);\n    };\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onClientComboChange = comboData => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData !== null) {\n        selectedRecord[\"nclientcode\"] = comboData;\n        selectedRecord[\"saddress1\"] = comboData.item.saddress1;\n      } else {\n        selectedRecord[\"nclientcode\"] = undefined;\n        selectedRecord[\"saddress1\"] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.ConfirmComponent = props => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\", \"ok\", \"cancel\", () => this.getComponentfromJava(props)); // confirm1.confirm(\"warning\", \"warning1\", \"do you want to override?\", \"ok\", \"cancel\", undefined);\n      //.confirm(\"warning\", \"warning1\", \"do you want to override?\", \"ok\", \"cancel\", undefined)\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.acceptRegistration = (registerId, skip, take) => {\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n\n\n      let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (acceptList && acceptList.length > 0) {\n        if (acceptList.every(this.checkPreregisterAndQuarentine)) {\n          if (this.props.Login.masterData.selectedTest.length > 0) {\n            if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_ACCEPTREGISTRATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.acceptRegistrationConfirm(inputParam, registerId));\n            } else {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\", \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDTESTTOREGISTERSAMPLES\"\n            }));\n          }\n        } else {\n          //toast.warn(\"Select Pre-register/Quarantine Samples\")\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n        }));\n      }\n    };\n\n    this.acceptRegistrationConfirm = (inputParam, registerId) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            parentPopUpSize: 'lg',\n            screenName: this.props.Login.screenName,\n            operation: 'accept'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.acceptRegistration(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectQuarantine = (quarantineId, skip, take) => {\n      let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\n      let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (quarentineList && quarentineList.length > 0) {\n        if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\n          // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\n          //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\n          //if (ntransactionstatus === transactionStatus.PREREGISTER) {\n          let Map = {};\n          Map[\"fromdate\"] = \"\";\n          Map[\"todate\"] = \"\";\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; //Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"ntransactionstatus\"] = quarentineList && quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\"); //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\n\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'quarantine'\n          }; //console.log(\"inputParam, quarantine:\", inputParam);\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'quarantine'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGISTERSAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSAMPLES\"\n        }));\n      }\n    };\n\n    this.onRegSubTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      }); // }\n    };\n\n    this.onComponentComboChange = (comboData, fieldName) => {\n      //if (comboData !== null) {\n      const selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = comboData;\n      this.setState({\n        selectComponent\n      }); //}\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData;\n      this.setState({\n        selectedTestData\n      });\n    };\n\n    this.SourceChange = (comboData, fieldName) => {\n      const selectedSourceData = this.state.selectedSourceData || {};\n      selectedSourceData[fieldName] = comboData;\n      this.setState({\n        selectedSourceData\n      });\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.onComboComponentChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectComponent = this.state.selectComponent || {};\n      selectComponent[fieldName] = comboData;\n      this.setState({\n        selectComponent\n      }); // }\n    };\n\n    this.onComponentChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectComponent = this.state.selectComponent || {};\n        const oldspecsampletypecode = selectComponent.nspecsampletypecode;\n\n        if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          selectComponent[\"nneedservice\"] = true;\n        }\n\n        selectComponent[\"ncomponentcode\"] = comboData;\n        selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.onProductChange = (event, fieldName) => {\n      if (event !== null) {\n        let Map = {};\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nproductcode\"] !== undefined ? this.state.selectedRecord[\"nproductcode\"].value : undefined;\n        Map[\"nproductcode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        Map[\"nsampletypecode\"] = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode);\n        Map[\"nproductcatcode\"] = parseInt(selectedRecord.nproductcatcode.value);\n        Map[\"event\"] = event;\n\n        if (this.props.Login.Component.length === 0) {\n          this.props.getReProductChange(Map, selectedRecord, this.props.Login);\n        } else {\n          if (event.value !== oldpromarycode) {\n            // selectedRecord[fieldName] = event;\n            this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\", \"ok\", \"cancel\", () => this.props.getReProductChange(Map, selectedRecord, this.props.Login));\n          }\n        }\n      }\n    };\n\n    this.onproductCategoryChange = (event, fieldName) => {\n      if (event !== null) {\n        let Map = {};\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nproductcatcode\"] !== undefined ? this.state.selectedRecord[\"nproductcatcode\"].value : undefined;\n        Map[\"nproductcatcode\"] = parseInt(event.value);\n        Map[\"ncategorybasedflow\"] = parseInt(event.item.ncategorybasedflow);\n        Map[\"nsampletypecode\"] = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode);\n        Map['userinfo'] = this.props.Login.userInfo;\n        Map[\"event\"] = event; //  selectedRecord[fieldName] = event;\n\n        selectedRecord[\"nregsubtypecode\"] = \"\";\n\n        if (this.props.Login.Component.length === 0) {\n          this.props.getProductCategoryChange(Map, selectedRecord, this.props.Login.masterData, parseInt(event.item.ncategorybasedflow));\n        } else {\n          if (event.value !== oldpromarycode) {\n            this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\", \"ok\", \"cancel\", () => this.props.getProductCategoryChange(Map, selectedRecord, this.props.Login.masterData, parseInt(event.item.ncategorybasedflow)));\n          }\n        }\n      }\n    };\n\n    this.onManufacturerChange = (event, fieldName) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nmanufcode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        const selectedRecord = this.state.selectedRecord;\n        selectedRecord[fieldName] = event;\n        selectedRecord[\"nregsubtypecode\"] = \"\";\n        this.props.getManufactureChange(Map, selectedRecord, this.props.Login.masterData);\n      }\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord;\n        const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ? this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event;\n\n        if (this.props.Login.Component.length === 0) {\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          if (event.value !== oldpromarycode) {\n            this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\", \"ok\", \"cancel\", () => this.setState({\n              selectedRecord\n            }));\n          }\n        }\n      }\n    };\n\n    this.onRoutineSpecChange = (event, fieldName) => {\n      let Map = {};\n      const selectedRecord = this.state.selectedRecord;\n      selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n      selectedRecord[\"nallottedspeccode\"] = event;\n      Map[\"ntemplatemanipulationcode\"] = selectedRecord.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = selectedRecord.nallottedspeccode.value;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      this.props.getComponentTestBySpec(Map, selectedRecord, this.props.Login.masterData);\n    };\n\n    this.onMultiColumnValue = (value, key, flag, label, keys) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n\n        if (flag) {\n          keys.map((objkey, index) => {\n            return selectedRecord[objkey] = {\n              \"label\": value[0][label[index]],\n              \"value\": value[0][objkey]\n            };\n          });\n        }\n      } else {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = \"\";\n        });\n        keys.map((objkey, index) => {\n          return selectedRecord[objkey] = \"\";\n        });\n      }\n\n      this.props.getManufacturerChange(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n    };\n\n    this.getComponentfromJava = selectedRecord => {\n      let Map = {};\n      Map[\"ntemplatemanipulationcode\"] = selectedRecord.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = selectedRecord.nallottedspeccode.value;\n      Map[\"testrequired\"] = selectedRecord.ntransactionstatus === 3 ? true : false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      this.props.getComponentTestBySpec(Map, selectedRecord, this.props.Login.masterData);\n    };\n\n    this.selectComponent = event => {\n      // let index = this.props.Login.Component.find(event.dataItem.slno);\n      // console.log(\"this.props.Login.SelectedSource:\", this.props.Login);\n      let selectedComponent = event.dataItem; //  console.log(\"selectComponent:\", this.props.Login.Test, selectedComponent);\n\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      let SelectedSource = this.props.Login.Source ? this.props.Login.Source[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          SelectedSource,\n          selectedSourceData: SelectedSource,\n          popUptestDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onMultiColumnMAHChange = (value, key) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.closeChildModal = () => {\n      let loadComponent = this.props.Login.loadComponent;\n      let loadTest = this.props.Login.loadTest;\n      let loadFile = this.props.Login.loadFile;\n      let loadSource = this.props.Login.loadSource;\n      let showSaveContinue = this.props.Login.showSaveContinue;\n      let screenName = this.props.Login.screenName;\n      let selectedTest = this.props.Login.selectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      let selectComponent = this.state.selectComponent;\n      let loadChildTest = this.props.Login.loadChildTest;\n      let openModal = this.props.Login.openModal;\n      let loadPreregister = this.props.Login.loadPreregister;\n\n      if (this.props.Login.loadComponent) {\n        loadComponent = false;\n        showSaveContinue = false;\n        selectedTest = {};\n        selectComponent = undefined;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadTest) {\n        loadTest = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadSource) {\n        loadSource = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadFile) {\n        loadFile = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadChildTest) {\n        loadChildTest = false;\n        openModal = false;\n        loadPreregister = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent,\n          loadTest,\n          screenName,\n          showSaveContinue,\n          selectedComponent,\n          loadSource,\n          loadFile,\n          loadChildTest,\n          selectedTest,\n          openModal,\n          loadPreregister,\n          parentPopUpSize: \"xl\",\n          selectComponent\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPreregister = this.props.Login.loadPreregister;\n      let openChildModal = this.props.Login.openChildModal;\n      let parentPopUpSize = this.props.Login.pare;\n      let screenName = this.props.Login.screenName;\n      let loadPrinter = this.props.Login.loadPrinter;\n      let loadPoolSource = this.props.Login.loadPoolSource;\n      let openPortal = this.props.Login.openPortal;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          loadPreregister = false;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              openModal,\n              openChildModal,\n              loadPreregister\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          loadEsign = false;\n\n          if (loadPreregister) {\n            parentPopUpSize = 'xl';\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              parentPopUpSize\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false;\n        loadPrinter = false;\n        loadPreregister = false;\n        loadPoolSource = false;\n        selectedRecord = {};\n        openPortal = false;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadPreregister,\n            selectedRecord,\n            screenName,\n            insertSourcePreregno: undefined,\n            loadPrinter,\n            loadPoolSource,\n            openPortal\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      } else {\n        //ROUTINE\n        if (this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n          this.insertRoutineRegistration(true);\n        } else {\n          let Components = this.props.Login.Component; // var flag = true;\n\n          if (Components.length > 0) {\n            if (operation === \"create\") {\n              let checkManufLot = this.checkManufLotPresent();\n\n              if (checkManufLot === true) {\n                let flagDuplicate = checkDuplicateComponentandManufLot(Components);\n\n                if (flagDuplicate === true) {\n                  // if (this.props.Login.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\n                  //     flag= checkSourceForAllPreregno(Components, this.props.Login.Sources);\n                  // }\n                  this.insertRegistration(true);\n                } else {\n                  this.confirmMessage.confirm(\"warning\", \"Warning!\", flagDuplicate, undefined, \"ok\", undefined, true, undefined); // alert(flagDuplicate);\n                }\n              } else {\n                this.confirmMessage.confirm(\"warning\", \"Warning!\", checkManufLot, undefined, \"ok\", undefined, true, undefined); // this.confirmMessage.confirm(\"warning\", \"Warning!\", checkManufLot, \"ok\", undefined, \"ok\", undefined);\n                // alert(checkManufLot)\n              }\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTCOMPONENT\"\n            }));\n          }\n        }\n      }\n    };\n\n    this.onSavePoolSourceClick = () => {\n      let insertlistcountry = [];\n\n      if (this.props.Login.masterData.selectedSample.every(checkCancelAndReject)) {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CANNOTADDSOURCEFORCANCELREJECTSAMPLE\"\n        }));\n      }\n\n      this.state.selectedSourceData.ncountrycode && this.state.selectedSourceData.ncountrycode.map(source => insertlistcountry.push({\n        npreregno: this.props.Login.insertSourcePreregno,\n        ncountrycode: source.value\n      }));\n      const inputParam = {\n        classUrl: 'registration',\n        methodUrl: 'RegistrationSourceCountry',\n        displayName: 'IDS_SAMPLEREGISTRATION',\n        inputData: {\n          ninsertpreregno: this.props.Login.insertSourcePreregno,\n          insertlistcountry,\n          npreregno: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo\n        },\n        operation: 'create',\n        dataState: this.state.sourceDataState,\n        activeSampleTab: \"IDS_SOURCE\",\n        action: 'addregsourcecountry',\n        showSample: true\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'create'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedFile = this.state.selectedFile;\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedFile.sfilename;\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\n      formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\n      formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\n      this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SOURCE\":\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testdataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.checkManufLotPresent = () => {\n      let masterData = this.props.Login.masterData;\n      let Components = this.props.Login.Component;\n\n      if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH || masterData.RealRegTypeValue.nregtypecode === RegistrationType.BATCH && masterData.RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL || masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && masterData.RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\n        return fnCheckBatchComponentMandatory(Components);\n      } else if (masterData.RealRegTypeValue.nregtypecode === RegistrationType.BATCH && masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.PROTOCOL || masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL && masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.EXTERNAL_POOL) {\n        return fnCheckBatchProtocolComponentMandatory(Components);\n      }\n    };\n\n    this.sampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      tabMap.set(\"IDS_ATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2754,\n          columnNumber: 39\n        }\n      }));\n\n      if (this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\n        tabMap.set(\"IDS_SOURCE\", /*#__PURE__*/React.createElement(SourceTab, {\n          userInfo: this.props.Login.masterData.userInfo || {},\n          RegistrationSourceCountry: this.props.Login.masterData.RegistrationSourceCountry || [],\n          dataState: this.state.sourceDataState,\n          methodUrl: \"RegistrationSourceCountry\",\n          dataStateChange: this.dataStateChange,\n          masterData: this.props.Login.masterData,\n          inputParam: this.props.Login.inputParam,\n          screenName: \"IDS_SOURCE\",\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          deleteRecord: this.deleteRegistrationSourceCountry,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 2796,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      return tabMap;\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      testTabMap.set(\"IDS_PARAMETERRESULTS\", /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights // getStatusCombo={this.props.getStatusCombo}\n        //selectedId={this.props.Login.masterData.selectedParamId}\n        //  viewFile={this.props.viewAttachment}\n        // checkListRecord={this.props.checkListRecord}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2822,\n          columnNumber: 48\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2837,\n          columnNumber: 44\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.getCommentsCombo = event => {\n      if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\n        this.props.getCommentsCombo(...event);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOADDCOMMENTS\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_PARAMETERRESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TEST\":\n          this.setState({\n            testDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n        // default:\n        //     this.setState({\n        //         testDataState: event.dataState\n        //     });\n        //     break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData.map(item => {\n        return selectedTestArray.push(item.item);\n      });\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest: Test[selectedComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          loadTest: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveSourceClick = (saveType, formRef) => {\n      let selectedSourceData = this.state.selectedSourceData[\"ncountrycode\"] || {};\n      let selectedSourceArray = [];\n      let selectedComponent = this.props.Login.selectedComponent;\n      selectedSourceData.map(item => {\n        return selectedSourceArray.push({ ...item.item,\n          slno: selectedComponent.slno\n        });\n      }); //let Sources = this.props.Login.Sources || [];\n\n      let Source = this.props.Login.Source || [];\n      const ArraySources = Source[selectedComponent.slno] ? Source[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Source[selectedComponent.slno] = [...ArraySources, ...selectedSourceArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedSource: Source[selectedComponent.slno],\n          Source: Source,\n          selectedSourceData: {},\n          loadSource: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let nregtypecode = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        let nregsubtypecode = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"sstoragelocationname\"] = selectedComponent[\"nstoragelocationcode\"] && selectedComponent[\"nstoragelocationcode\"].label ? selectedComponent[\"nstoragelocationcode\"].label : null;\n        objcomponent[\"sstorageconditionname\"] = selectedComponent[\"nstorageconditioncode\"] && selectedComponent[\"nstorageconditioncode\"].label ? selectedComponent[\"nstorageconditioncode\"].label : null;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        objcomponent[\"nstoragelocationcode\"] = selectedComponent[\"nstoragelocationcode\"] ? selectedComponent[\"nstoragelocationcode\"].value : -1;\n        objcomponent[\"nstorageconditioncode\"] = selectedComponent[\"nstorageconditioncode\"] ? selectedComponent[\"nstorageconditioncode\"].value : -1; // objcomponent[\"sreceiveddate\"] = formatInputDateWithoutT(selectedComponent[\"dreceiveddate\"], false);\n        // objcomponent[\"dreceiveddate\"] = formatInputDate(selectedComponent[\"dreceiveddate\"], false);\n\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdmanufdate\"] = selectedComponent[\"ntzdmanufdate\"] ? selectedComponent[\"ntzdmanufdate\"].value : -1;\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"stzdmanufdate\"] = selectedComponent[\"ntzdmanufdate\"] ? selectedComponent[\"ntzdmanufdate\"].label : \"\";\n\n        if (nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\n          objcomponent[\"nplasmafilecode\"] = selectedComponent[\"nplasmafilecode\"].value ? selectedComponent[\"nplasmafilecode\"].value : -1;\n          objcomponent[\"splasmafilenumber\"] = selectedComponent[\"nplasmafilecode\"].label ? selectedComponent[\"nplasmafilecode\"].label : \"\";\n        } else {\n          objcomponent[\"nplasmafilecode\"] = selectedComponent[\"nplasmafilecode\"] ? selectedComponent[\"nplasmafilecode\"] : -1;\n        } // const TestList = [...TestListManipulation(Component, Test)];\n        // const TestComponentData = [... new Set(TestList.filter(item => {\n        //     if (item.nspecsampletypecode === selectedComponent.nspecsampletypecode) {\n        //         return item;\n        //     }\n        // }))];\n        // Test[selectedComponent.slno] = TestComponentData.map(item => {\n        //     // item.slno = selectedComponent.slno\n        //     return { ...item, slno: selectedComponent.slno };\n        // })\n\n\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          // Component.splice(index, 1);\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let testList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n      } else {\n        testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\n      }\n\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let acceptList = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        acceptList.push(selectedRecord);\n      } else {\n        acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, acceptList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.cancelRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedTest || (this.props.Login.masterData.RegistrationGetTest ? [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n\n          Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\"); //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelTest'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelTestAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.handleEditDateChange = (dateName, dateValue) => {\n      const selectComponent = this.state.selectedRecord;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectedRecord: selectComponent\n      });\n    };\n\n    this.onNumericInputEditChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.deleteRegistrationSourceCountry = deleteParam => {\n      const inputParam = {\n        classUrl: 'registration',\n        methodUrl: 'RegistrationSourceCountry',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          registrationsourcecountry: deleteParam.selectedRecord,\n          npreregno: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: 'delete',\n        dataState: this.state.sourceDataState,\n        action: 'deleteregsourcecountry'\n      };\n      const deleteSourceId = this.state.controlMap.has(\"DeleteRegistrationSourceCountry\") ? this.state.controlMap.get(\"DeleteRegistrationSourceCountry\").ncontrolcode : -1;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteSourceId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SAMPLEREGISTRATION\",\n            //screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n            operation: 'delete'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.cancelSampleRecords = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n      // sampleList = sampleList.splice(skip, skip + take);\n\n\n      let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\n          //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\n          Map['ntransactionstatus'] = cancelRejectSamplesList && cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\"); //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\n          //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = cancelRejectSamplesList && cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\n          Map[\"registrationsample\"] = cancelRejectSamplesList;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\n      //  const transList=transactionValidation?Object.keys(transactionValidation):[];\n      //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\n      //let check=true;\n      //  let validate=false;\n      let ntransstatus = [];\n      let translist = transactionValidation[ncontrolcode];\n\n      if (translist) {\n        transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\n          return ntransstatus.push(sam.ntransactionstatus);\n        });\n        const selectdata = selectedSample ? selectedSample : [];\n        let check = selectdata.map(sam1 => {\n          return ntransstatus.includes(sam1.ntransactionstatus);\n        });\n\n        if (check.includes(false)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignforRegistration(inputParam, \"openModal\");\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.PrevoiusLoginData = undefined;\n    this.state = {\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      Product: [],\n      operation: \"\",\n      selectedProduct: undefined,\n      screenName: \"Product\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      showSaveContinue: false,\n      filterCollection: [],\n      selectedFilter: {},\n      breadCrumb: [],\n      showTest: true,\n      showSample: false,\n      showSubSample: false,\n      SingleItem: [],\n      showConfirmAlert: false,\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      DynamicSampleColumns: [],\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'npreregno'\n        }]\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'groupingField'\n        }]\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }, {\n          field: 'stestsynonym'\n        }]\n      },\n      selectedPrinterData: {},\n      grandparentheight: '150vh',\n      transactionValidation: [],\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      testskip: 0,\n      splitChangeWidthPercentage: 28.6,\n      testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      comboComponents: [],\n      withoutCombocomponent: [] // parentPopUpSize: \"xl\"\n\n    };\n    this.ProductFieldList = ['sproductname', 'sbillto']; // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_PARAMETERRESULTS\":\n        //url = \"resultentrybysample/getTestbasedParameter\";\n        url = \"registration/getregistrationparameter\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      default:\n        url = \"registration/getregistrationparameter\"; // url = \"resultentrybysample/getTestbasedParameter\";\n\n        break;\n    }\n\n    return url;\n  }\n\n  render() {\n    const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n    const preRegisterId = this.state.controlMap.has(\"AddPreregister\") ? this.state.controlMap.get(\"AddPreregister\").ncontrolcode : -1;\n    const registerId = this.state.controlMap.has(\"RegisterAccept\") ? this.state.controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\n    const editSampleId = this.state.controlMap.has(\"EditSample\") ? this.state.controlMap.get(\"EditSample\").ncontrolcode : -1;\n    const quarantineId = this.state.controlMap.has(\"RegisterQuarantine\") ? this.state.controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\n    const addSourceId = this.state.controlMap.has(\"AddRegistrationSourceCountry\") ? this.state.controlMap.get(\"AddRegistrationSourceCountry\").ncontrolcode : -1;\n    const addTestId = this.state.controlMap.has(\"AddNewTest\") ? this.state.controlMap.get(\"AddNewTest\").ncontrolcode : -1; //const deleteSourceId = this.state.controlMap.has(\"DeleteRegistrationSourceCountry\") ? this.state.controlMap.get(\"DeleteRegistrationSourceCountry\").ncontrolcode:-1;\n\n    const printBarcodeId = this.state.controlMap.has(\"PrintBarcode\") ? this.state.controlMap.get(\"PrintBarcode\").ncontrolcode : -1; //const cancelTestId = this.state.controlMap.has(\"CancelTest\") ? this.state.controlMap.get(\"CancelTest\").ncontrolcode:-1;\n\n    const cancelSampleId = this.state.controlMap.has(\"CancelReject\") ? this.state.controlMap.get(\"CancelReject\").ncontrolcode : -1;\n    const addSubSampleId = this.state.controlMap.has(\"AddSubSample\") ? this.state.controlMap.get(\"AddSubSample\").ncontrolcode : -1;\n    const editSubSampleId = this.state.controlMap.has(\"EditSubSample\") ? this.state.controlMap.get(\"EditSubSample\").ncontrolcode : -1;\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\n    this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate; // this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : new Date(this.props.Login.masterData.FromDate);\n    // this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : new Date(this.props.Login.masterData.ToDate);\n\n    let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample) : []; // let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? sortData(this.props.Login.masterData.RegistrationGetSubSample) : [];\n\n    let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\n\n    let testGetParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      // userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n      sfromdate: this.props.Login.masterData.RealFromDate,\n      stodate: this.props.Login.masterData.RealToDate,\n      searchTestRef: this.searchTestRef\n    };\n    let testChildGetParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      // userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      sfromdate: this.props.Login.masterData.RealFromDate,\n      stodate: this.props.Login.masterData.RealToDate,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState\n    };\n    this.confirmMessage = new ConfirmMessage(); // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n\n    let breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": breadCrumbobj.breadCrumbFrom //|| this.props.Login.masterData.RealFromDate\n\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": breadCrumbobj.breadCrumbto //|| this.props.Login.masterData.RealToDate\n\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n    }];\n    let subSampleGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      testskip: this.state.testskip,\n      searchTestRef: this.searchTestRef,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      sourceDataState: this.state.sourceDataState,\n      sampleGridDataState: this.state.sampleGridDataState\n    };\n    let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\", \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\", \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\n\n    if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"RegistrationGetSample\",\n      selectedObject: \"selectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedSubSample\"\n      }],\n      fecthInputObject: {\n        nflag: 2,\n        ntype: 2,\n        masterData: this.props.Login.masterData,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: sampleSearchField,\n      changeList: [\"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RegistrationGetTest\",\n      selectedObject: \"selectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\", \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\n      changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      fecthInputObject: subSampleGetParam,\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedSubSample\"\n      }],\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"selectedSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      updatedListname: \"selectedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: testGetParam,\n      selectedObject: \"selectedTest\",\n      inputListName: \"RegistrationGetTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    let editRegParam = {\n      nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      sfromdate: this.props.Login.masterData.RealFromDate,\n      stodate: this.props.Login.masterData.RealToDate,\n      ncontrolCode: editSampleId\n    };\n    const addTestParam = {\n      selectedsample: this.props.Login.masterData.selectedSample,\n      selectedsubsample: this.props.Login.masterData.selectedSubSample,\n      skip: this.state.skip,\n      take: this.state.skip + this.state.take,\n      userinfo: this.props.Login.userInfo,\n      sampleList: this.props.Login.masterData.RegistrationGetSample,\n      snspecsampletypecode: this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n    }; // const methodUrl = \"Test\";\n    // const mandatoryFields = [{ \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\" }]\n    // this.breadCrumb = [...this.state.selectedFilter];\n    //, Object.keys(this.state.selectedFilter).length > 0 && { ...this.state.selectedFilter }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster // paneHeight={this.state.firstPane}\n    , {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleList,\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      primaryKeyField: \"npreregno\",\n      filterColumnData: this.props.filterTransactionList,\n      getMasterDetail: this.props.getRegistrationsubSampleDetail,\n      inputParam: subSampleGetParam,\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\",\n      mainField: \"sarno\" //showStatusLink={true}\n      // showStatusName={true}\n      ,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectedListName: \"selectedSample\",\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns,\n      needMultiSelect: true,\n      filterParam: filterSampleParam,\n      subFieldsLabel: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationSourceCountry\"] //, \"RegistrationParameter\"\"RegistrationTestComment\"\n      ,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editSampleId) === -1,\n        onClick: this.props.getEditRegistrationComboService,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(printBarcodeId) === -1,\n        onClick: this.props.getPrinterComboService,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam\n        }\n      }, // {\n      //     title: \"reject\",\n      //     controlname: \"reject\",\n      //     objectName: \"cancelSample\",\n      //     hidden: false,\n      //     onClick:(cancelSample) => this.cancelSampleRecords(cancelSample,\"IDS_CANCEL\",cancelSampleId),\n      //     inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\n      // }\n      this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDSOURCE\"\n        }),\n        controlname: \"AddSource\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(addSourceId) === -1,\n        onClick: this.props.getCountryList,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          ncontrolcode: addSourceId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam\n        }\n      } : {}],\n      needFilter: true,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue ml-2\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGISTER\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(preRegisterId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, preRegisterId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ACCEPT\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(registerId) === -1,\n        onClick: () => this.acceptRegistration(registerId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Register, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_QUARANTINE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(quarantineId) === -1,\n        onClick: () => this.selectQuarantine(quarantineId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Quarantine, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTSAMPLE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(cancelSampleId) === -1,\n        onClick: () => this.cancelSampleRecords(cancelSampleId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        onClick: () => this.onReload(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 53\n        }\n      }))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(RegistrationFilter, {\n          SampleType: this.state.stateSampleType || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          FromDate: this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date(),\n          ToDate: this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date(),\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 66\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 37\n      }\n    }), this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === 3 &&\n    /*#__PURE__*/\n    // <ScrollBar>\n    React.createElement(TransactionListMaster, {\n      masterList: this.subSampleList,\n      selectedMaster: this.props.Login.masterData.selectedSubSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleDetail,\n      inputParam: testGetParam,\n      additionalParam: ['napprovalversioncode'],\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      mainField: \"ssamplearno\",\n      selectedListName: \"SelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSubSampleColumns,\n      searchRef: this.searchSubSampleRef,\n      actionIcons: /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        hidden: this.state.userRoleControlRights.indexOf(editSubSampleId) === -1,\n        title: \"Print Barcode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        title: \"Edit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 53\n        }\n      })),\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\" // hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\n        ,\n        hidden: this.state.userRoleControlRights.indexOf(addSubSampleId) === -1,\n        onClick: () => this.props.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, addSubSampleId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PREREGISTER\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 57\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 651,\n        columnNumber: 41\n      }\n    }) // </ScrollBar>\n    , /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 85\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      } //onClick={() => this.showSampleInfo()}\n      ,\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 775,\n        columnNumber: 85\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      paneHeight: `${testList && testList !== null && testList.length > 0 ? testList.length * 13 : 5}vh`,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetail,\n      inputParam: testChildGetParam,\n      additionalParam: [],\n      mainField: \"stestname\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 831,\n          columnNumber: 93\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        onClick: () => this.props.addMoreTest(addTestParam, addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 97\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 840,\n          columnNumber: 101\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n        onClick: () => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 97\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850,\n          columnNumber: 101\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 81\n      }\n    })))))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 875,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      } //onClick={() => this.showTestDetails()}\n      ,\n      onClick: () => this.showTestAndSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 77\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 77\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898,\n        columnNumber: 77\n      }\n    })))))), this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926,\n        columnNumber: 57\n      }\n    }) : // <CustomTabs activeKey={this.props.Login.activeSampleTab ? \n    //                 this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? \n    //                     'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab \n    //                 : 'IDS_ATTACHMENTS\"'} \n    //             tabDetail={this.sampleTabDetail()} \n    //             onTabChange={this.onSampleTabChange} /> :\n    this.state.showTest ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935,\n        columnNumber: 61\n      }\n    }) : \"\"))))))))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(PreRegisterSlideOutModal, {\n      PrevoiusLoginData: this.PrevoiusLoginData,\n      show: this.props.Login.openPortal,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      screenName: \"IDS_REGISTRATION\",\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      comboComponents: this.state.comboComponents,\n      withoutCombocomponent: this.state.withoutCombocomponent,\n      userRoleControlRights: this.state.userRoleControlRights,\n      fromDate: this.fromDate,\n      toDate: this.toDate,\n      templateData: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata,\n      nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode),\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 948,\n        columnNumber: 26\n      }\n    })) : \"\", this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal //|| this.props.Login.loadEsign}\n      ,\n      closeModal: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile || this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal,\n      size: this.props.Login.parentPopUpSize,\n      loginoperation: this.props.Login.loadPrinter ? true : false,\n      buttonLabel: this.props.Login.loadPrinter ? \"print\" : undefined,\n      operation: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.loadComponent,\n      onSaveClick: this.props.Login.loadComponent ? this.onSaveComponentClick : this.props.Login.loadTest ? this.onSaveTestClick : this.props.Login.loadSource ? this.onSaveSourceClick : this.props.Login.loadFile ? this.onSaveFileClick : this.props.Login.loadPoolSource ? this.onSavePoolSourceClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick,\n      validateEsign: this.validateEsign,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      selectedRecord: !this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord,\n      mandatoryFields: this.mandatoryList(this.props.Login.loadPreregister, this.props.Login.loadComponent, this.props.Login.loadTest, this.props.Login.loadPoolSource, this.props.Login.loadPrinter, this.props.Login.masterData.RealRegTypeValue.nregtypecode, this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode, this.props.Login.operation, this.props.Login.loadFile, this.props.Login.loadChildTest),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1008,\n          columnNumber: 29\n        }\n      }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n        ref: this.myScrollRef,\n        selectComponent: this.state.selectComponent || {},\n        RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n        RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n        RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n        RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n        formatMessage: this.props.intl.formatMessage,\n        handleDateChange: this.handleDateChange,\n        Component: this.props.Login.lstComponent || [],\n        StorageCondition: this.props.Login.StorageCondition || [],\n        onInputComponentOnChange: this.onInputComponentOnChange,\n        onComboChange: this.onComponentComboChange,\n        onNumericInputChange: this.onNumericInputChange,\n        onComboComponentChange: this.onComboComponentChange,\n        timeZoneList: this.props.Login.timeZoneList,\n        plasmaMasterFile: this.props.Login.plasmaMasterFile,\n        onComponentChange: this.onComponentChange,\n        userInfo: this.props.Login.userInfo,\n        StorageLocation: this.props.Login.StorageLocation || [],\n        sreceiveddate: this.props.Login.sreceiveddate || [],\n        CurrentTime: this.props.Login.CurrentTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 64\n        }\n      }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.TestCombined || [],\n        TestChange: this.TestChange,\n        selectedTestData: this.state.selectedTestData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 62\n        }\n      }) : this.props.Login.loadSource ? /*#__PURE__*/React.createElement(AddSource, {\n        SourceCombined: this.props.Login.SourceCombined || [],\n        SourceChange: this.SourceChange,\n        selectedSourceData: this.state.selectedSourceData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1039,\n          columnNumber: 64\n        }\n      }) : this.props.Login.loadFile ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedFile: this.state.selectedFile || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropComponentFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        maxSize: 20,\n        maxFiles: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1043,\n          columnNumber: 62\n        }\n      }) : this.props.Login.loadPoolSource ? /*#__PURE__*/React.createElement(AddSource, {\n        SourceCombined: this.props.Login.sourceCountry,\n        selectedSourceData: this.state.selectedSourceData,\n        SourceChange: this.SourceChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1060,\n          columnNumber: 37\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.availableTest,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1064,\n          columnNumber: 75\n        }\n      }) : this.props.Login.loadPreregister ? this.props.Login.operation === \"create\" ? //ROUTINE\n      this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ? /*#__PURE__*/React.createElement(PreRegisterRoutine, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord,\n        selectedComponent: this.props.Login.selectedComponent || [],\n        ProductCategory: this.props.Login.ProductCategory || [],\n        Product: this.props.Login.Product || [],\n        Client: this.props.Login.Client || [],\n        selectedTest: this.props.Login.SelectedTest || [],\n        Supplier: this.props.Login.Supplier || [],\n        ContainerType: this.props.Login.ContainerType || [],\n        StorageCondition: this.props.Login.StorageCondition || [],\n        timezone: this.props.Login.timezone || [],\n        Disposition: this.props.Login.Disposition || [],\n        Unit: this.props.Login.Unit || [],\n        Period: this.props.Login.Period || [],\n        Priority: this.props.Login.Priority || [],\n        Manufacturer: this.props.Login.Manufacturer || [],\n        Specification: this.props.Login.Specification || [],\n        AgaramTree: this.props.Login.AgaramTree || [],\n        OpenNodes: this.props.Login.OpenNodes || [],\n        FocusKey: this.props.Login.FocusKey || [],\n        ActiveKey: this.props.Login.ActiveKey || [],\n        onTreeClick: this.onTreeClick,\n        onproductCategoryChange: this.onproductCategoryChange,\n        onProductChange: this.onProductChange,\n        onManufacturerChange: this.onManufacturerChange,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onClientComboChange: this.onClientComboChange,\n        onspecChange: this.onRoutineSpecChange,\n        handleDateChange: this.handleEditDateChange,\n        onNumericInputChange: this.onNumericInputEditChange,\n        operation: this.props.Login.operation,\n        statustoEditDetail: this.props.Login.statustoEditDetail,\n        addComponentTest: this.addComponentTest,\n        deleteTest: this.deleteTest,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1073,\n          columnNumber: 53\n        }\n      }) : /*#__PURE__*/React.createElement(PreRegisterPopUp, {\n        selectedRecord: this.state.selectedRecord || {},\n        RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n        RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n        formatMessage: this.props.intl.formatMessage,\n        onMultiColumnValue: this.onMultiColumnValue,\n        onMultiColumnMAHChange: this.onMultiColumnMAHChange,\n        ProductCategory: this.props.Login.ProductCategory || [],\n        Product: this.props.Login.Product || [],\n        Client: this.props.Login.Client || [],\n        Country: this.props.Login.Country || [],\n        ProductMaholder: this.props.Login.ProductMaholder || [],\n        Manufacturer: this.props.Login.Manufacturer || [],\n        Specification: this.props.Login.Specification || [],\n        AgaramTree: this.props.Login.AgaramTree || [],\n        OpenNodes: this.props.Login.OpenNodes || [],\n        FocusKey: this.props.Login.FocusKey || [],\n        ActiveKey: this.props.Login.ActiveKey || [],\n        onTreeClick: this.onTreeClick,\n        Goodsin: this.props.Login.Goodsin || [],\n        EProtocol: this.props.Login.EProtocol,\n        SelectedSource: this.props.Login.SelectedSource || [],\n        onproductCategoryChange: this.onproductCategoryChange,\n        onProductChange: this.onProductChange,\n        onManufacturerChange: this.onManufacturerChange,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onClientComboChange: this.onClientComboChange,\n        onspecChange: this.onspecChange,\n        getComponentfromJava: this.getComponentfromJava,\n        selectComponent: this.selectComponent,\n        selectedComponent: this.props.Login.selectedComponent || [],\n        Component: this.props.Login.Component || [],\n        selectedTest: this.props.Login.SelectedTest || [],\n        ConfirmComponent: this.ConfirmComponent,\n        AddComponent: this.AddComponent,\n        addComponentTest: this.addComponentTest,\n        addComponentSource: this.addComponentSource,\n        deleteComponent: this.deleteComponent,\n        deleteTest: this.deleteTest,\n        editComponent: this.editComponent,\n        AddFile: this.AddFile,\n        popUptestDataState: this.state.popUptestDataState,\n        componentDataState: this.state.componentDataState,\n        testdataStateChange: this.testdataStateChange,\n        componentDataStateChange: this.componentDataStateChange,\n        popUpsourceDataStateChange: this.popUpsourceDataStateChange,\n        popUpsourceDataState: this.state.popUpsourceDataState,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        deleteSource: this.deleteSource //     handleDateChange={this.handleDateChange}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1112,\n          columnNumber: 53\n        }\n      }) : this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ? /*#__PURE__*/React.createElement(PreRegisterRoutine, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord,\n        selectComponent: this.state.selectedComponent || [],\n        ProductCategory: this.props.Login.ProductCategory || [],\n        Product: this.props.Login.Product || [],\n        Client: this.props.Login.Client || [],\n        Supplier: this.props.Login.Supplier || [],\n        ContainerType: this.props.Login.ContainerType || [],\n        StorageCondition: this.props.Login.StorageCondition || [],\n        timezone: this.props.Login.timezone || [],\n        Disposition: this.props.Login.Disposition || [],\n        Unit: this.props.Login.Unit || [],\n        Period: this.props.Login.Period || [],\n        Priority: this.props.Login.Priority || [],\n        Manufacturer: this.props.Login.Manufacturer || [],\n        Specification: this.props.Login.Specification || [],\n        AgaramTree: this.props.Login.AgaramTree || [],\n        OpenNodes: this.props.Login.OpenNodes || [],\n        FocusKey: this.props.Login.FocusKey || [],\n        ActiveKey: this.props.Login.ActiveKey || [],\n        onTreeClick: this.onTreeClick,\n        onproductCategoryChange: this.onproductCategoryChange,\n        onProductChange: this.onProductChange,\n        onManufacturerChange: this.onManufacturerChange,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onClientComboChange: this.onClientComboChange,\n        onspecChange: this.onRoutineSpecChange,\n        handleDateChange: this.handleEditDateChange,\n        onNumericInputChange: this.onNumericInputEditChange,\n        operation: this.props.Login.operation,\n        statustoEditDetail: this.props.Login.statustoEditDetail,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1166,\n          columnNumber: 53\n        }\n      }) : /*#__PURE__*/React.createElement(EditPreRegistration, {\n        selectedRecord: this.state.selectedRecord || {},\n        realRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n        realRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n        formatMessage: this.props.intl.formatMessage,\n        onMultiColumnValue: this.onMultiColumnValue,\n        onspecChange: this.onspecChange,\n        onMultiColumnMAHChange: this.onMultiColumnMAHChange,\n        productCategory: this.props.Login.ProductCategory || [],\n        product: this.props.Login.Product || [],\n        client: this.props.Login.Client || [],\n        country: this.props.Login.Country || [],\n        productMaholder: this.props.Login.ProductMaholder || [],\n        manufacturer: this.props.Login.Manufacturer || [],\n        specification: this.props.Login.Specification || [],\n        timeZoneList: this.props.Login.timeZoneList,\n        agaramTree: this.props.Login.AgaramTree || [],\n        openNodes: this.props.Login.OpenNodes || [],\n        focusKey: this.props.Login.FocusKey || [],\n        activeKey: this.props.Login.ActiveKey || [],\n        onTreeClick: this.onTreeClick,\n        goodsIn: this.props.Login.Goodsin || [],\n        eProtocol: this.props.Login.EProtocol,\n        storageCondition: this.props.Login.StorageCondition || [],\n        storageLocation: this.props.Login.StorageLocation || [],\n        plasmaMasterFile: this.props.Login.plasmaMasterFile,\n        userInfo: this.props.Login.userInfo,\n        onNumericInputChange: this.onNumericInputEditChange,\n        onManufacturerChange: this.onManufacturerChange,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onClientComboChange: this.onClientComboChange //selectedTest={this.props.Login.SelectedTest || []}\n        //confirmComponent={this.ConfirmComponent}\n        ,\n        handleDateChange: this.handleEditDateChange,\n        statustoEditDetail: this.props.Login.statustoEditDetail,\n        operation: this.props.Login.operation,\n        CurrentTime: this.props.Login.currentTime,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1202,\n          columnNumber: 53\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 980,\n        columnNumber: 21\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showTestAndSample() {\n    this.setState({\n      showSample: !this.state.showSample,\n      showTest: !this.state.showTest\n    });\n  }\n\n  showTestDetails() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        showSample: !this.state.showSample,\n        showTest: !this.state.showTest\n      }\n    };\n    this.props.updateStore(updateInfo); // this.setState({ showSample: false, showTest: true })\n  }\n\n  checkPreregisterAndQuarentine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE;\n  }\n\n  checkPreregisterRecordQuarantine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER;\n  }\n\n  // onSaveFileClick = (saveType, formRef) => {\n  // }\n  insertRegistration(confirmMsg) {\n    let Components = this.props.Login.Component; //  let Source = this.props.Login.Sources ? this.props.Login.Sources : [];\n\n    let Source = this.props.Login.Source ? this.props.Login.Source : [];\n    let Test = this.props.Login.Test;\n    let Map = {};\n    Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n    Map[\"component\"] = getComponentListfromUnwantedAttr(this.props.Login.Component);\n    Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.fromDate); //formatDate(this.fromDate);\n\n    Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.toDate); //formatDate(this.toDate);\n\n    Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n    Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n    Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n    Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n    Map[\"Registration\"] = getRegistration(this.props.Login.masterData, this.state.selectedRecord);\n    Map[\"Registrationgeneral\"] = getRegistrationGeneral(this.state.selectedRecord);\n    Map[\"country\"] = Object.keys(Source).length > 0 ? TestListManipulation(Components, Source) : [];\n    Map[\"userinfo\"] = this.props.Login.userInfo;\n    Map[\"nflag\"] = 2;\n    Map[\"ntype\"] = 1;\n    Map[\"booleanLotCheck\"] = confirmMsg ? true : false;\n    Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n    Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n    Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false; // Map[\"postParamList\"]=this.postParamList\n\n    const inputParam = {\n      inputData: Map,\n      postParamList: this.postParamList,\n      action: \"preregister\"\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          parentPopUpSize: 'lg',\n          screenName: this.props.Login.screenName,\n          operation: 'create',\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateStore({\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      });\n      this.props.insertRegistration(inputParam, this.props.Login.masterData);\n    }\n  }\n\n  insertRoutineRegistration() {\n    let Components = this.props.Login.Component;\n    let Test = this.props.Login.Test;\n    let Map = {};\n    Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n    Map[\"component\"] = getComponentListfromUnwantedAttr(this.props.Login.Component);\n    Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.fromDate); //formatDate(this.fromDate);\n\n    Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.toDate); //formatDate(this.toDate);\n\n    Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n    Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n    Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n    Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n    Map[\"Registration\"] = getRegistration(this.props.Login.masterData, this.state.selectedRecord);\n    Map[\"Registrationgeneral\"] = {};\n    Map[\"registrationroutine\"] = getRegistrationRoutine(this.state.selectedRecord);\n    Map[\"country\"] = [];\n    Map[\"userinfo\"] = this.props.Login.userInfo;\n    Map[\"nflag\"] = 2;\n    Map[\"ntype\"] = 1;\n    Map[\"booleanLotCheck\"] = false;\n    Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\n    Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\n    Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false; // Map[\"postParamList\"]=this.postParamList\n\n    const inputParam = {\n      inputData: Map,\n      postParamList: this.postParamList,\n      action: \"preregister\"\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          parentPopUpSize: 'lg',\n          screenName: this.props.Login.screenName,\n          operation: 'create',\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateStore({\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      });\n      this.props.insertRegistration(inputParam, this.props.Login.masterData);\n    }\n  }\n\n  /* covertDatetoString(startDateValue, endDateValue) {\r\n       const startDate = new Date(startDateValue);\r\n       const endDate = new Date(endDateValue);\r\n          const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n       const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n       const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n       const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n          const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n       const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n       const breadCrumbFrom = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n       const breadCrumbTo = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n       return ({ fromDate, toDate, breadCrumbFrom, breadCrumbTo })\r\n   }*/\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[\"1\"],\n        \"dataField\": option[\"2\"],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"sstoragelocationname\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].label : \"\";\n      saveComponent[\"sstorageconditionname\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].label : \"\";\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      saveComponent[\"nstoragelocationcode\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].value : -1;\n      saveComponent[\"nstorageconditioncode\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].value : -1; //objcomponent[\"dreceiveddate\"] = formatDate(objcomponent[\"dreceiveddate\"]);\n      // saveComponent[\"dreceiveddate\"] = formatInputDate(objcomponent[\"dreceiveddate\"], false);\n      // saveComponent[\"sreceiveddate\"] = formatInputDateWithoutT(objcomponent[\"dreceiveddate\"], false);\n\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"nplasmafilecode\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].value : -1;\n      saveComponent[\"splasmafilenumber\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].label : \"\";\n      saveComponent[\"ntzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].value : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"stzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].label : \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          SelectedSource: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\n      this.setState({\n        withoutCombocomponent: this.props.Login.withoutCombocomponent\n      });\n    }\n\n    if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\n      this.setState({\n        comboComponents: this.props.Login.comboComponents\n      });\n    }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps.Login;\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.loadFile !== previousProps.Login.loadFile && this.props.Login.loadFile === false) {\n      this.setState({\n        selectedFile: undefined\n      });\n    } // else if (this.props.Login.selectedSourceData !== previousProps.Login.selectedSourceData) {\n    //     this.setState({ selectedSourceData: this.props.Login.selectedSourceData });\n    // } \n    else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\n      this.setState({\n        selectedFilter: this.props.Login.selectedFilter\n      });\n    }\n\n    if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n      this.setState({\n        popUptestDataState: this.props.Login.popUptestDataState\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    } // if(this.props.Login.showSample !== previousProps.Login.showSample) {\n    //     let showSample = this.props.Login.showSample !== undefined ? this.props.Login.showSample : this.state.showSample\n    //     let showTest = showSample ? false : true\n    //     this.setState({ showSample, showTest });\n    // }\n    // if(this.props.Login.showTest !== previousProps.Login.showTest) {\n    //     let showTest = this.props.Login.showTest !== undefined ? this.props.Login.showTest : this.state.showTest\n    //     let showSample = showTest ? false : true\n    //     this.setState({ showSample, showTest });\n    // }\n\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let DynamicSampleColumns = this.state.DynamicSampleColumns;\n      let DynamicSubSampleColumns = this.state.DynamicSubSampleColumns;\n      let DynamicTestColumns = this.state.DynamicTestColumns;\n      let DynamicGridItem = this.state.DynamicGridItem;\n      let DynamicGridMoreField = this.state.DynamicGridMoreField;\n      let SingleItem = this.state.SingleItem;\n      let testMoreField = this.state.testMoreField;\n      let testListColumns = this.state.testListColumns;\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        testCommentDataState,\n        resultDataState,\n        sourceDataState,\n        sampleGridDataState,\n        popUptestDataState\n      } = this.state;\n\n      if (this.props.Login.masterData.DynamicColumns && this.props.Login.masterData.DynamicColumns !== previousProps.Login.masterData.DynamicColumns) {\n        DynamicSampleColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 3);\n        DynamicSubSampleColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 3);\n        DynamicTestColumns = listDataFromDynamicArray(listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 5), 1);\n        DynamicGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 5);\n        DynamicGridMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 6);\n        SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 4);\n        testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 7);\n        testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 3);\n      }\n\n      let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample;\n      let showTest = showSample ? false : true;\n      const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"jsondata\", \"nsorter\", \"ascending\", false);\n      const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", \"ascending\", false);\n      const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", false);\n      const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", \"nsorter\", \"ascending\", false); // const stateSampleType = sampleTypeMap.get(\"OptionList\");\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.sourceDataState && this.props.Login.sourceDataState !== previousProps.Login.sourceDataState) {\n        sourceDataState = this.props.Login.sourceDataState;\n      }\n\n      if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n        sampleGridDataState = this.props.Login.sampleGridDataState;\n      }\n\n      if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n        popUptestDataState = this.props.Login.popUptestDataState;\n      }\n\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        SingleItem,\n        testMoreField,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        testListColumns,\n        stateSampleType: sampleTypeMap.get(\"OptionList\"),\n        stateRegistrationType: registrationTypeMap.get(\"OptionList\"),\n        stateRegistrationSubType: registrationSubTypeMap.get(\"OptionList\"),\n        stateFilterStatus: filterStatusMap.get(\"OptionList\"),\n        popUptestDataState,\n        showSample,\n        showTest,\n        skip,\n        take,\n        testskip,\n        testtake,\n        testCommentDataState,\n        resultDataState,\n        sourceDataState,\n        sampleGridDataState\n      });\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 1,\n      npreregno: String(this.state.selectedRecord.npreregno)\n    };\n    inputData[\"initialparam\"] = initialParam; // console.log(\"edit1:\", this.props.Login.regRecordToEdit);\n\n    inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    Object.keys(this.state.selectedRecord).map(key => {\n      if (typeof this.state.selectedRecord[key] === \"object\") {\n        if (this.state.selectedRecord[key] === null) {\n          return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n        } else if (this.state.selectedRecord[key] instanceof Date) {\n          return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n        } else {\n          return inputData[\"registration\"][key] = this.state.selectedRecord[key].value;\n        }\n      } else {\n        return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n      }\n    }); // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleTypeChange,\n  getRegTypeChange,\n  getRegSubTypeChange,\n  getAttachmentCombo,\n  viewAttachment,\n  getCommentsCombo,\n  filterTransactionList,\n  validateEsignCredential,\n  getSampleChildTabDetail,\n  getTestChildTabDetail,\n  ReloadData,\n  showUnderDevelopment,\n  getPreviewTemplate,\n  getChildValues\n})(injectIntl(Registration));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/Registration.jsx"],"names":["React","Component","connect","showUnderDevelopment","callService","crudMaster","updateStore","getSampleTypeChange","getRegTypeChange","getRegSubTypeChange","getAttachmentCombo","viewAttachment","getCommentsCombo","filterTransactionList","validateEsignCredential","ReloadData","getSampleChildTabDetail","getTestChildTabDetail","getTestByComponentChange","getPreviewTemplate","getChildValues","Button","Card","Col","Nav","Row","toast","SlideOutModal","AddComponentPopUp","formatInputDate","getControlMap","listDataFromDynamicArray","showEsign","sortData","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","checkCancelAndReject","convertDateTimetoString","RegistrationFilter","Esign","injectIntl","ProductList","DEFAULT_RETURN","SplitterLayout","AddTest","PreRegisterPopUp","RegistrationSubType","RegistrationType","transactionStatus","BreadcrumbComponent","checkDuplicateComponentandManufLot","fnCheckBatchComponentMandatory","fnCheckBatchProtocolComponentMandatory","getRegistration","getRegistrationGeneral","TestListManipulation","getComponentListfromUnwantedAttr","checkTestPresent","getRegistrationRoutine","ScrollBar","ListWrapper","TransactionListMaster","FontAwesomeIcon","faEye","faPencilAlt","faPlus","faSync","ContentPanel","SampleInfoView","CustomTabs","ConfirmMessage","AddSource","AddPrinter","SampleGridTab","AddFile","Attachments","Comments","onSaveTestComments","onSaveSampleAttachment","onSaveTestAttachment","EditPreRegistration","SourceTab","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","RegistrationResultTab","PreRegisterRoutine","PortalModal","PreRegisterSlideOutModal","Registration","constructor","props","onReload","obj","Login","masterData","RealFromDate","RealToDate","userInfo","fromDate","toDate","RealSampleTypeValue","RealRegTypeValue","RealRegSubTypeValue","RealFilterStatusValue","activeSampleTab","activeTestTab","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","FromDate","ToDate","inputData","npreregno","nsampletypecode","nregtypecode","nregsubtypecode","nfilterstatus","ntransactionstatus","userinfo","flag","inputParam","searchSubSampleRef","searchSampleRef","searchTestRef","selectedFilter","state","warn","intl","formatMessage","id","onFilterSubmit","fromdate","todate","PLASMA_POOL","getRegistrationSample","paneSizeChange","d","setState","splitChangeWidthPercentage","deleteAttachment","event","file","fieldName","selectedFile","actionType","onSaveChildTestClick","saveType","formRef","selectedSubsample","selectedSubSample","RegistrationGetSample","slice","skip","take","selectedSample","ntransactionsamplecode","map","x","join","TestGroupTest","selectedRecord","ntestgrouptestcode","value","item","RegistrationSample","ntype","sample","classUrl","operation","methodUrl","responseKeyList","controlMap","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","createRegistrationTest","mandatoryList","preregister","component","test","source","printer","childtest","mandatory","ROUTINE","BATCH","PROTOCOL","EXTERNAL_POOL","EU","NON_EU","NON_BATCH","CONTRACTTESTING","getRegistrationComboService","ScreenName","primaryKeyField","editId","withoutCombocomponent","Layout","registrationTemplate","jsondata","row","children","column","hasOwnProperty","componentrow","inputtype","push","comboComponents","childColumnList","columnList","val","comboChild","mapOfFilterRegData","parseInt","retunObj","label","undefined","childList","child","childData","index","findIndex","length","y","handlePageChange","e","setTimeout","_scrollBarRef","updateScroll","handleTestPageChange","testskip","testtake","openFilter","showFilter","onFilterChange","labelname","onTreeClick","screenName","activeKey","key","focusKey","keyName","selectedNode","primaryKey","getComponents","getRegSpecification","ActiveKey","confirmMessage","confirm","onSampleTabChange","tabProps","ontestTabChange","selectedTest","ntransactiontestcode","String","resultDataState","testCommentDataState","onDropComponentFile","attachedFiles","maxSize","handleFilterDateChange","dateName","dateValue","Date","onUpdateRegistrationConfirm","showAlert","onUpdateRegistration","regEditParam","confirmAlert","showConfirmAlert","regDateEditConfirmMessage","booleanFlag","insertRegistration","closeFilter","AddComponent","Map","nallottedspeccode","nmanufcode","ntemplatemanipulationcode","booleanmanuf","loadFile","ChildscreenName","childoperation","parentPopUpSize","onNumericInputChange","name","selectComponent","addComponentTest","selectedComponent","Object","keys","getTest","addComponentSource","getComponentSource","onSampleTypeChange","onClientComboChange","comboData","saddress1","ConfirmComponent","getComponentfromJava","onRegTypeChange","acceptRegistration","registerId","sampleList","searchedSample","acceptList","every","checkPreregisterAndQuarentine","RegistrationGetTest","postParamList","action","acceptRegistrationConfirm","userRoleControlRights","openModal","selectQuarantine","quarantineId","splice","quarentineList","checkPreregisterRecordQuarantine","preregRecordToQuarantine","onRegSubTypeChange","onInputOnChange","target","type","checked","onInputComponentOnChange","onComboChange","onComponentComboChange","TestChange","selectedTestData","SourceChange","selectedSourceData","PrinterChange","selectedPrinterData","onComboComponentChange","onComponentChange","oldspecsampletypecode","nspecsampletypecode","onProductChange","oldpromarycode","nproductcatcode","getReProductChange","onproductCategoryChange","ncategorybasedflow","getProductCategoryChange","onManufacturerChange","getManufactureChange","onspecChange","sversion","onRoutineSpecChange","getComponentTestBySpec","onMultiColumnValue","forEach","objarray","objkey","getManufacturerChange","dataItem","SelectedTest","Test","slno","SelectedSource","Source","popUptestDataState","settings","onMultiColumnMAHChange","closeChildModal","loadComponent","loadTest","loadSource","showSaveContinue","loadChildTest","loadPreregister","PopUpLabel","closeModal","openChildModal","pare","loadPrinter","loadPoolSource","openPortal","insertSourcePreregno","onSaveClick","insertRoutineRegistration","Components","checkManufLot","checkManufLotPresent","flagDuplicate","onSavePoolSourceClick","insertlistcountry","ncountrycode","displayName","ninsertpreregno","dataState","sourceDataState","showSample","ncontrolcode","onSavePrinterClick","insertlist","insertPrinterPreregno","sprintername","npreregno1","onSaveFileClick","acceptedFiles","sfilename","formData","FormData","append","JSON","stringify","ImportFile","sampleInfoDataStateChange","sampleGridDataState","dataStateChange","testdataStateChange","testStateChange","testDataState","sampleTabDetail","tabMap","set","onAttachmentSaveClick","RegistrationAttachment","attachmentskip","attachmenttake","esignRights","masterList","RegistrationSourceCountry","deleteRegistrationSourceCountry","testTabDetail","testTabMap","testList","selectedTestList","testDataStateChange","onCommentsSaveClick","RegistrationTestComment","has","get","onSaveTestClick","selectedTestArray","ArrayTest","onSaveSourceClick","selectedSourceArray","ArraySources","onSaveComponentClick","ComponentObjectAfterSave","ComponentObject","testrequired","objcomponent","dreceiveddate","nneedservice","searchedTest","saveParam","isTestComment","selectedMaster","cancelRecord","controlcode","transValidation","transactionValidation","cancelTestAction","stransdisplaystatus","handleEditDateChange","onNumericInputEditChange","deleteParam","registrationsourcecountry","deleteSourceId","cancelSampleRecords","cancelRejectSamplesList","transactionstatus","cancelSampleAction","ntransstatus","translist","sam","selectdata","check","sam1","includes","validateEsign","sreason","password","validateEsignforRegistration","createRef","PrevoiusLoginData","masterStatus","error","Product","selectedProduct","showAccordian","filterCollection","breadCrumb","showTest","showSubSample","SingleItem","DynamicSampleColumns","group","field","historyDataState","grandparentheight","ProductFieldList","getDerivedStateFromProps","getActiveTestURL","url","activeTestKey","render","cancelId","preRegisterId","editSampleId","addSourceId","addTestId","printBarcodeId","cancelSampleId","addSubSampleId","editSubSampleId","testGetParam","sfromdate","stodate","testChildGetParam","breadCrumbobj","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregsubtypename","subSampleGetParam","sampleSearchField","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","nflag","searchFieldList","changeList","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","editRegParam","addTestParam","selectedsample","selectedsubsample","snspecsampletypecode","Set","getRegistrationsubSampleDetail","ALL","FilterStatus","title","controlname","objectName","hidden","indexOf","onClick","getEditRegistrationComboService","primaryKeyName","getPrinterComboService","getCountryList","stateSampleType","stateRegistrationType","stateRegistrationSubType","stateFilterStatus","nsubsampleneed","subSampleList","getsubSampleDetail","DynamicSubSampleColumns","display","background","borderBottom","marginTop","float","showTestAndSample","split","setting","testListColumns","testMoreField","addMoreTest","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","timeZoneList","defaultTimeZone","myScrollRef","handleDateChange","lstComponent","StorageCondition","plasmaMasterFile","StorageLocation","sreceiveddate","CurrentTime","TestCombined","SourceCombined","sourceCountry","availableTest","ProductCategory","Client","Supplier","ContainerType","timezone","Disposition","Unit","Period","Priority","Manufacturer","Specification","AgaramTree","OpenNodes","FocusKey","statustoEditDetail","deleteTest","Country","ProductMaholder","Goodsin","EProtocol","deleteComponent","editComponent","componentDataState","componentDataStateChange","popUpsourceDataStateChange","popUpsourceDataState","deleteSource","currentTime","showSampleInfo","showTestDetails","PREREGISTER","QUARANTINE","confirmMsg","temparray","option","getTestfromDB","saveComponent","unshift","componentDidUpdate","previousProps","values","DynamicTestColumns","DynamicColumns","sampleTypeMap","SampleType","registrationTypeMap","registrationSubTypeMap","filterStatusMap","initialParam","parse","regRecordToEdit","updateRegistration","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    showUnderDevelopment,\r\n    callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetail\r\n    , getTestByComponentChange,getPreviewTemplate,getChildValues\r\n} from '../../actions'\r\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddComponentPopUp from './AddComponentPopUp'\r\nimport { formatInputDate, getControlMap, listDataFromDynamicArray, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, checkCancelAndReject, convertDateTimetoString } from '../../components/CommonScript';\r\nimport RegistrationFilter from './RegistrationFilter';\r\nimport Esign from '../audittrail/Esign';\r\nimport { injectIntl } from 'react-intl';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport AddTest from './AddTest';\r\nimport PreRegisterPopUp from './PreRegisterPopUp';\r\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../../components/Enumeration';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport {\r\n    checkDuplicateComponentandManufLot, fnCheckBatchComponentMandatory, fnCheckBatchProtocolComponentMandatory,\r\n    getRegistration, getRegistrationGeneral, TestListManipulation, getComponentListfromUnwantedAttr, checkTestPresent, getRegistrationRoutine\r\n} from './RegistrationValidation';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddSource from './AddSource';\r\nimport AddPrinter from './AddPrinter';\r\nimport SampleGridTab from './SampleGridTab';\r\nimport AddFile from './AddFile';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport EditPreRegistration from './EditPreRegistration';\r\nimport { ReactComponent as Quarantine } from '../../assets/image/Quarantine.svg'\r\nimport { ReactComponent as Register } from '../../assets/image/register.svg'\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport SourceTab from './SourceTab';\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\nimport RegistrationResultTab from './RegistrationResultTab';\r\nimport PreRegisterRoutine from './PreRegisterRoutine';\r\nimport PortalModal from '../../PortalModal';\r\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\r\n\r\nclass Registration extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.PrevoiusLoginData=undefined;\r\n        this.state = {\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            Product: [],\r\n            operation: \"\",\r\n            selectedProduct: undefined,\r\n            screenName: \"Product\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            showSaveContinue: false,\r\n            filterCollection: [],\r\n            selectedFilter: {},\r\n            breadCrumb: [],\r\n            showTest: true,\r\n            showSample: false,\r\n            showSubSample: false,\r\n            SingleItem: [],\r\n            showConfirmAlert: false,\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            DynamicSampleColumns: [],\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'npreregno' }] },\r\n            testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'groupingField' }] },\r\n            resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] },\r\n            selectedPrinterData: {},\r\n            grandparentheight: '150vh',\r\n            transactionValidation: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            testskip: 0,\r\n            splitChangeWidthPercentage: 28.6,\r\n            testtake: this.props.Login.settings \r\n            && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            comboComponents:[],\r\n            withoutCombocomponent:[]\r\n            // parentPopUpSize: \"xl\"\r\n        };\r\n\r\n        this.ProductFieldList = ['sproductname', 'sbillto']\r\n        // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onReload = () => {\r\n\r\n        // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\r\n        // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        const RealFromDate = obj.fromDate;\r\n        const RealToDate = obj.toDate;\r\n        let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue\r\n        let activeSampleTab = this.props.Login.activeSampleTab;\r\n        let activeTestTab = this.props.Login.activeTestTab;\r\n\r\n        let SampleTypeValue = RealSampleTypeValue\r\n        let RegTypeValue = RealRegTypeValue\r\n        let RegSubTypeValue = RealRegSubTypeValue\r\n        let FilterStatusValue = RealFilterStatusValue\r\n        // let FromDate = this.props.Login.masterData.FromDate\r\n        // let ToDate = this.props.Login.masterData.ToDate\r\n        const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue, FromDate, ToDate,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, SampleTypeValue, RegTypeValue, RegSubTypeValue, FilterStatusValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab,\r\n            flag: 1\r\n        }\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n\r\n            let inputParam = { masterData, inputData, searchSubSampleRef: this.searchSubSampleRef, searchSampleRef: this.searchSampleRef, searchTestRef: this.searchTestRef, selectedFilter: this.state.selectedFilter }\r\n            this.props.ReloadData(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        // let RealFromDate = new Date(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate)\r\n        // let RealToDate = new Date(this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\r\n        const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n\r\n        let activeSampleTab = this.props.Login.activeSampleTab;\r\n        if (this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode !== RegistrationType.PLASMA_POOL) {\r\n            activeSampleTab = \"IDS_SAMPLEATTACHMENTS\";\r\n        }\r\n\r\n        let activeTestTab = this.props.Login.activeTestTab;\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterStatusValue, RealFromDate, RealToDate\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab\r\n        }\r\n\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n            //     this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n            const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n            const selectedFilter = {};\r\n            selectedFilter[\"fromdate\"] = RealFromDate;\r\n            selectedFilter[\"todate\"] = RealToDate;\r\n            const inputParam = {\r\n                masterData, inputData, searchSubSampleRef: this.searchSubSampleRef,\r\n                searchSampleRef: this.searchSampleRef,\r\n                searchTestRef: this.searchTestRef, selectedFilter\r\n            }\r\n            this.props.getRegistrationSample(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getActiveTestURL() {\r\n\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                //url = \"resultentrybysample/getTestbasedParameter\";\r\n                url = \"registration/getregistrationparameter\";\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\";\r\n                break;\r\n            default:\r\n                url = \"registration/getregistrationparameter\";\r\n                // url = \"resultentrybysample/getTestbasedParameter\";\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        const preRegisterId = this.state.controlMap.has(\"AddPreregister\") ? this.state.controlMap.get(\"AddPreregister\").ncontrolcode : -1;\r\n        const registerId = this.state.controlMap.has(\"RegisterAccept\") ? this.state.controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\r\n        const editSampleId = this.state.controlMap.has(\"EditSample\") ? this.state.controlMap.get(\"EditSample\").ncontrolcode : -1;\r\n        const quarantineId = this.state.controlMap.has(\"RegisterQuarantine\") ? this.state.controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\r\n        const addSourceId = this.state.controlMap.has(\"AddRegistrationSourceCountry\") ? this.state.controlMap.get(\"AddRegistrationSourceCountry\").ncontrolcode : -1;\r\n        const addTestId = this.state.controlMap.has(\"AddNewTest\") ? this.state.controlMap.get(\"AddNewTest\").ncontrolcode : -1;\r\n        //const deleteSourceId = this.state.controlMap.has(\"DeleteRegistrationSourceCountry\") ? this.state.controlMap.get(\"DeleteRegistrationSourceCountry\").ncontrolcode:-1;\r\n        const printBarcodeId = this.state.controlMap.has(\"PrintBarcode\") ? this.state.controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n        //const cancelTestId = this.state.controlMap.has(\"CancelTest\") ? this.state.controlMap.get(\"CancelTest\").ncontrolcode:-1;\r\n        const cancelSampleId = this.state.controlMap.has(\"CancelReject\") ? this.state.controlMap.get(\"CancelReject\").ncontrolcode : -1;\r\n        const addSubSampleId = this.state.controlMap.has(\"AddSubSample\") ? this.state.controlMap.get(\"AddSubSample\").ncontrolcode : -1;\r\n        const editSubSampleId = this.state.controlMap.has(\"EditSubSample\") ? this.state.controlMap.get(\"EditSubSample\").ncontrolcode : -1;\r\n        this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        // this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : new Date(this.props.Login.masterData.FromDate);\r\n        // this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : new Date(this.props.Login.masterData.ToDate);\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample) : [];\r\n        // let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? sortData(this.props.Login.masterData.RegistrationGetSubSample) : [];\r\n        let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\r\n\r\n        let testGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            // userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            sfromdate: this.props.Login.masterData.RealFromDate,\r\n            stodate: this.props.Login.masterData.RealToDate,\r\n            searchTestRef: this.searchTestRef\r\n        }\r\n        let testChildGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            // userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            sfromdate: this.props.Login.masterData.RealFromDate,\r\n            stodate: this.props.Login.masterData.RealToDate,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n        }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n        let breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": breadCrumbobj.breadCrumbFrom //|| this.props.Login.masterData.RealFromDate\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": breadCrumbobj.breadCrumbto //|| this.props.Login.masterData.RealToDate\r\n            }, {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n            }, {\r\n                \"label\": \"IDS_REGTYPE\",\r\n                \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n            }, {\r\n                \"label\": \"IDS_REGSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }, {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n            }\r\n        ]\r\n        let subSampleGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            testskip: this.state.testskip,\r\n            searchTestRef: this.searchTestRef,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            sourceDataState: this.state.sourceDataState,\r\n            sampleGridDataState: this.state.sampleGridDataState\r\n        }\r\n        let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n            , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n            , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n            sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"RegistrationGetSample\",\r\n            selectedObject: \"selectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"registration/getRegistrationSubSample\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n            fecthInputObject: {\r\n                nflag: 2,\r\n                ntype: 2,\r\n                masterData: this.props.Login.masterData,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\r\n                \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n                \"selectedTest\", \"RegistrationParameter\"\r\n            ]\r\n        };\r\n\r\n        let filterTestParam = {\r\n            inputListName: \"RegistrationGetTest\",\r\n            selectedObject: \"selectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\r\n                \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\r\n            changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                fecthInputObject: subSampleGetParam,\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"selectedSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n            , {\r\n                filteredListName: \"searchedTest\",\r\n                updatedListname: \"selectedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: testGetParam,\r\n                selectedObject: \"selectedTest\",\r\n                inputListName: \"RegistrationGetTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n        ];\r\n\r\n\r\n        let editRegParam = {\r\n            nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            sfromdate: this.props.Login.masterData.RealFromDate,\r\n            stodate: this.props.Login.masterData.RealToDate,\r\n            ncontrolCode: editSampleId\r\n        }\r\n        const addTestParam = {\r\n            selectedsample: this.props.Login.masterData.selectedSample,\r\n            selectedsubsample: this.props.Login.masterData.selectedSubSample,\r\n            skip: this.state.skip, take: (this.state.skip + this.state.take),\r\n            userinfo: this.props.Login.userInfo,\r\n            sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n            snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n                [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n        };\r\n        // const methodUrl = \"Test\";\r\n        // const mandatoryFields = [{ \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\" }]\r\n\r\n        // this.breadCrumb = [...this.state.selectedFilter];\r\n        //, Object.keys(this.state.selectedFilter).length > 0 && { ...this.state.selectedFilter }\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper >\r\n                                {/* className={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 60 ? 'split-mode' : ''} */}\r\n                                <SplitterLayout borderColor=\"#999\"\r\n                                    primaryIndex={1} percentage={true}\r\n                                    secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                    onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                    primaryMinSize={40}\r\n                                    secondaryMinSize={20}\r\n                                >\r\n                                    <TransactionListMaster\r\n                                        // paneHeight={this.state.firstPane}\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        masterList={this.props.Login.masterData.searchedSample || sampleList}\r\n                                        selectedMaster={this.props.Login.masterData.selectedSample}\r\n                                        primaryKeyField=\"npreregno\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        getMasterDetail={this.props.getRegistrationsubSampleDetail}\r\n                                        inputParam={subSampleGetParam}\r\n                                        selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                        selectionColorField=\"scolorhexcode\"\r\n                                        mainField={\"sarno\"}\r\n                                        //showStatusLink={true}\r\n                                        // showStatusName={true}\r\n                                        statusFieldName=\"stransdisplaystatus\"\r\n                                        statusField=\"ntransactionstatus\"\r\n                                        selectedListName=\"selectedSample\"\r\n                                        searchListName=\"searchedSample\"\r\n                                        searchRef={this.searchSampleRef}\r\n                                        objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        selectionField=\"ntransactionstatus\"\r\n                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        subFields={this.state.DynamicSampleColumns}\r\n                                        needMultiSelect={true}\r\n                                        filterParam={filterSampleParam}\r\n                                        subFieldsLabel={false}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        splitModeClass={this.state.splitChangeWidthPercentage\r\n                                             && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\r\n                                              : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        childTabsKey={[\"RegistrationAttachment\", \"RegistrationGetSubSample\",\r\n                                            \"RegistrationGetTest\", \"RegistrationSourceCountry\"]} //, \"RegistrationParameter\"\"RegistrationTestComment\"\r\n                                        actionIcons={\r\n                                            [\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                    controlname: \"faPencilAlt\",\r\n                                                    objectName: \"mastertoedit\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(editSampleId) === -1,\r\n                                                    onClick: this.props.getEditRegistrationComboService,\r\n                                                    inputData: {\r\n                                                        primaryKeyName: \"npreregno\",\r\n                                                        operation: \"update\",\r\n                                                        masterData: this.props.Login.masterData,\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        editRegParam\r\n                                                    },\r\n                                                },\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                    controlname: \"faPrint\",\r\n                                                    objectName: \"sample\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(printBarcodeId) === -1,\r\n                                                    onClick: this.props.getPrinterComboService,\r\n                                                    inputData: {\r\n                                                        primaryKeyName: \"npreregno\",\r\n                                                        operation: \"print\",\r\n                                                        ncontrolcode: printBarcodeId,\r\n                                                        masterData: this.props.Login.masterData,\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        editRegParam\r\n                                                    },\r\n                                                },\r\n\r\n                                                // {\r\n                                                //     title: \"reject\",\r\n                                                //     controlname: \"reject\",\r\n                                                //     objectName: \"cancelSample\",\r\n                                                //     hidden: false,\r\n                                                //     onClick:(cancelSample) => this.cancelSampleRecords(cancelSample,\"IDS_CANCEL\",cancelSampleId),\r\n                                                //     inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                // }\r\n\r\n                                                this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                    {\r\n                                                        title: this.props.intl.formatMessage({ id: \"IDS_ADDSOURCE\" }),\r\n                                                        controlname: \"AddSource\",\r\n                                                        objectName: \"sample\",\r\n\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(addSourceId) === -1,\r\n                                                        onClick: this.props.getCountryList,\r\n                                                        inputData: {\r\n                                                            primaryKeyName: \"npreregno\",\r\n                                                            operation: \"update\",\r\n                                                            ncontrolcode: addSourceId,\r\n                                                            masterData: this.props.Login.masterData,\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            editRegParam\r\n                                                        },\r\n                                                    } : {}\r\n\r\n                                            ]\r\n                                        }\r\n                                        needFilter={true}\r\n                                        commonActions={\r\n\r\n                                            <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REGISTER\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(preRegisterId) === -1}\r\n                                                    onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                        this.props.Login.masterData, this.props.Login.userInfo, preRegisterId)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                </Button>\r\n                                                <Nav.Link\r\n                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(registerId) === -1}\r\n                                                    onClick={() => this.acceptRegistration(registerId, this.state.skip, this.state.take)} >\r\n                                                    <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                </Nav.Link>\r\n                                                <Nav.Link\r\n                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_QUARANTINE\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(quarantineId) === -1}\r\n                                                    onClick={() => this.selectQuarantine(quarantineId, this.state.skip, this.state.take)} >\r\n                                                    <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                </Nav.Link>\r\n                                                <Nav.Link\r\n                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSAMPLE\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(cancelSampleId) === -1}\r\n                                                    onClick={() => this.cancelSampleRecords(cancelSampleId, this.state.skip, this.state.take)}>\r\n                                                    <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                </Nav.Link>\r\n                                                <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    onClick={() => this.onReload()} >\r\n\r\n                                                    <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                </Button>\r\n                                            </ProductList>\r\n                                        }\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"Sample Filter\": <RegistrationFilter\r\n                                                    SampleType={this.state.stateSampleType || []}\r\n                                                    RegistrationType={this.state.stateRegistrationType || []}\r\n                                                    RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                                    userInfo={this.props.Login.userInfo || {}}\r\n                                                    SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                                    RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                                    RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                                    FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                    FilterStatus={this.state.stateFilterStatus || []}\r\n                                                    FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                                    ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                                    onSampleTypeChange={this.onSampleTypeChange}\r\n                                                    onRegTypeChange={this.onRegTypeChange}\r\n                                                    onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                    handleFilterDateChange={this.handleFilterDateChange}\r\n                                                    onFilterChange={this.onFilterChange}\r\n                                                />\r\n                                            }\r\n                                        ]}\r\n\r\n                                    />\r\n\r\n                                    {this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === 3 &&\r\n                                        // <ScrollBar>\r\n                                        <TransactionListMaster\r\n                                            masterList={this.subSampleList}\r\n                                            selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                                            primaryKeyField=\"npreregno\"\r\n                                            getMasterDetail={this.props.getsubSampleDetail}\r\n                                            inputParam={testGetParam}\r\n                                            additionalParam={['napprovalversioncode']}\r\n                                            showStatusLink={true}\r\n                                            statusFieldName=\"stransdisplaystatus\"\r\n                                            statusField=\"ntransactionstatus\"\r\n                                            mainField=\"ssamplearno\"\r\n                                            selectedListName=\"SelectedSample\"\r\n                                            objectName=\"sample\"\r\n                                            listName=\"IDS_SAMPLE\"\r\n                                            needValidation={true}\r\n                                            validationKey=\"napprovalversioncode\"\r\n                                            validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                            showFilter={this.props.Login.showFilter}\r\n                                            openFilter={this.openFilter}\r\n                                            closeFilter={this.closeFilter}\r\n                                            onFilterSubmit={this.onFilterSubmit}\r\n                                            subFields={this.state.DynamicSubSampleColumns}\r\n                                            searchRef={this.searchSubSampleRef}\r\n                                            actionIcons={\r\n\r\n                                                <Nav.Link className=\"btn btn-circle outline-grey ml-2\" hidden={this.state.userRoleControlRights.indexOf(editSubSampleId) === -1} title=\"Print Barcode\" >\r\n                                                    <FontAwesomeIcon icon={faPencilAlt} title=\"Edit\" />\r\n                                                </Nav.Link>\r\n\r\n\r\n                                            }\r\n                                            needFilter={false}\r\n                                            commonActions={\r\n                                                <ProductList className=\"d-flex product-category float-right\">\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                        // hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(addSubSampleId) === -1}\r\n                                                        onClick={() => this.props.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                            this.props.Login.masterData, this.props.Login.userInfo, addSubSampleId)}>\r\n                                                        <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_PREREGISTER\" })} />\r\n                                                    </Button>\r\n\r\n                                                </ProductList>\r\n\r\n                                            }\r\n                                        />\r\n                                        // </ScrollBar>\r\n                                    }\r\n\r\n                                    {/* <ScrollBar> */}\r\n                                    <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n\r\n                                        <div className=\"fixed_list_height\">\r\n                                            <>\r\n                                                <div className=\"card_group\">\r\n                                                    {/* <ContentPanel className={` ${this.state.showSample === true ? 'show' : 'hide'} `}>\r\n                                                <Card >\r\n                                                    <Card.Header style={{ padding: \"0.85rem 1rem\" }}>\r\n                                                        <span style={{ display: \"inline-block\" }} >\r\n                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLEINFO\" })}</h4>\r\n                                                        </span>\r\n                                                        {this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === 3 &&\r\n                                                            <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                onClick={() => this.showSampleInfo()}>\r\n                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                            </button>\r\n                                                        }\r\n\r\n                                                        <ContentPanel className=\"d-flex justify-content-end dropdown badget_menu icon-group-wrap\">\r\n                                                            <Nav.Link\r\n                                                                className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                title=\"Register\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(registerId) === -1}\r\n                                                                onClick={() => this.acceptRegistration(registerId)} >\r\n                                                                <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link\r\n                                                                className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                title={\"Quarantine\"}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(quarantineId) === -1}\r\n                                                                onClick={() => this.selectQuarantine(quarantineId)} >\r\n                                                                <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link\r\n                                                                className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                title={\"Cancel/Reject Sample\"}\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(cancelSampleId) === -1}\r\n                                                                onClick={() => this.cancelSampleRecords(cancelSampleId)}>\r\n                                                                <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                            </Nav.Link>\r\n                                                             <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                        href=\"#\">\r\n                                                                        <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\" title={this.props.intl.formatMessage({ id: \"Edit\" })} />\r\n                                                                    </Nav.Link> \r\n                                                        </ContentPanel>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body className=\"p-0\">\r\n                                                        {this.state.showSample ?\r\n                                                                    <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_SAMPLEINFO'} tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} paneHeight={this.state.paneHeight} />\r\n                                                                \r\n                                                             : \"\"}\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel>*/}\r\n                                                    {/* className=\"ad-card-wrap\" */}\r\n                                                    <ContentPanel style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                        {/* <Row className='no-gutters'>\r\n                                                            <Col md={12}> */}\r\n                                                        {/* className=\"mt-3\" */}\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                <Row className='no-gutters'>\r\n                                                                    <Col md={12}>\r\n                                                                        <Card>\r\n                                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                {/* <div className=\"d-flex justify-content-between align-items-center\"> */}\r\n                                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                                    <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                                </span>\r\n                                                                                <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                                    //onClick={() => this.showSampleInfo()}\r\n                                                                                    onClick={() => this.showTestAndSample()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                                </button>\r\n                                                                                {/* </div> */}\r\n                                                                            </Card.Header>\r\n                                                                            <Card.Body className='p-0'>\r\n                                                                                {/* <ScrollBar> */}\r\n                                                                                <TransactionListMaster\r\n                                                                                    paneHeight={`${testList && testList !== null && testList.length > 0 ? testList.length * 13 : 5}vh`}\r\n                                                                                    masterList={this.props.Login.masterData.searchedTest || testList}\r\n                                                                                    selectedMaster={this.props.Login.masterData.selectedTest}\r\n                                                                                    primaryKeyField=\"ntransactiontestcode\"\r\n                                                                                    getMasterDetail={this.props.getTestChildTabDetail}\r\n                                                                                    inputParam={testChildGetParam}\r\n                                                                                    additionalParam={[]}\r\n                                                                                    mainField=\"stestname\"\r\n                                                                                    selectedListName=\"selectedTest\"\r\n                                                                                    objectName=\"test\"\r\n                                                                                    listName=\"IDS_TEST\"\r\n                                                                                    pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                                    showStatusLink={true}\r\n                                                                                    subFieldsLabel={true}\r\n                                                                                    statusFieldName=\"stransdisplaystatus\"\r\n                                                                                    statusField=\"ntransactionstatus\"\r\n                                                                                    needMultiSelect={true}\r\n                                                                                    subFields={this.state.testListColumns || []}\r\n                                                                                    moreField={this.state.testMoreField}\r\n                                                                                    needValidation={false}\r\n                                                                                    showStatusName={true}\r\n                                                                                    needFilter={false}\r\n                                                                                    filterColumnData={this.props.filterTransactionList}\r\n                                                                                    searchListName=\"searchedTest\"\r\n                                                                                    searchRef={this.searchTestRef}\r\n                                                                                    filterParam={filterTestParam}\r\n                                                                                    selectionField=\"ntransactionstatus\"\r\n                                                                                    selectionFieldName=\"stransdisplaystatus\"\r\n                                                                                    // childTabsKey={[\"RegistrationTestComment\"]}\r\n                                                                                    childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\"]}\r\n                                                                                    handlePageChange={this.handleTestPageChange}\r\n                                                                                    buttonCount={5}\r\n                                                                                    skip={this.state.testskip}\r\n                                                                                    take={this.state.testtake}\r\n                                                                                    showMoreResetList={true}\r\n                                                                                    showMoreResetListName=\"RegistrationGetSample\"\r\n                                                                                    selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                                                                    selectionColorField=\"scolorhexcode\"\r\n                                                                                    // selectionList=\r\n                                                                                    // actionIcons={\r\n                                                                                    //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                                                                                    //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                                                                                    //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                                                                                    //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                                                                                    // }\r\n                                                                                    commonActions={\r\n                                                                                        <>\r\n                                                                                            {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                                                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                                                                                {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                                                <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                    //title={\"Add Test\"}\r\n                                                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                                                                                    hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                                                                                    onClick={() => this.props.addMoreTest(addTestParam, addTestId)}\r\n                                                                                                >\r\n                                                                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                                                                </Nav.Link>\r\n\r\n                                                                                                <Nav.Link\r\n                                                                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                                                                    //title={\"Cancel/Reject Test\"}\r\n                                                                                                    data-for=\"tooltip-common-wrap\"\r\n                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                                                                                    hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                                                    onClick={() => this.cancelRecord(cancelId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                    <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                                                                </Nav.Link>\r\n                                                                                            </ProductList>\r\n                                                                                            {/* </Tooltip> */}\r\n                                                                                        </>\r\n                                                                                    }\r\n                                                                                />\r\n                                                                                {/* </ScrollBar> */}\r\n                                                                            </Card.Body>\r\n                                                                        </Card>\r\n                                                                    </Col>\r\n                                                                </Row>\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                        {/* </Col>\r\n                                                        </Row> */}\r\n                                                    </ContentPanel>\r\n\r\n\r\n                                                    <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                        <Card className=\"border-0\">\r\n                                                            <Card.Body className='p-0'>\r\n                                                                {/* <Row className='no-gutters'>\r\n                                                                    <Col md={12}> */}\r\n                                                                <Card className='p-0'>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                            //onClick={() => this.showTestDetails()}\r\n                                                                            onClick={() => this.showTestAndSample()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body>\r\n                                                                        {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                            <SampleInfoView\r\n                                                                                data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                    this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                    this.state.SingleItem : []}\r\n                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n\r\n                                                                            />\r\n                                                                            :\r\n                                                                            <SampleGridTab\r\n                                                                                userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                masterData={this.props.Login.masterData}\r\n                                                                                inputParam={this.props.Login.inputParam}\r\n                                                                                dataState={this.state.sampleGridDataState}\r\n                                                                                dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                primaryKeyField={\"npreregno\"}\r\n                                                                                expandField=\"expanded\"\r\n                                                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                                            />\r\n                                                                        }\r\n                                                                        {/* <CustomTabs tabDetail={this.sampleTabDetail()} onTabChange={this.onTabChange} /> */}\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                                {/* </Col>\r\n                                                                </Row> */}\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                    {/* </div> */}\r\n                                                    {/* </div> */}\r\n                                                    {/* </ScrollBar> */}\r\n                                                    {/* </SplitterLayout> */}\r\n                                                    {this.state.showSample ?\r\n\r\n                                                        <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'} tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n                                                        // <CustomTabs activeKey={this.props.Login.activeSampleTab ? \r\n                                                        //                 this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? \r\n                                                        //                     'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab \r\n                                                        //                 : 'IDS_ATTACHMENTS\"'} \r\n                                                        //             tabDetail={this.sampleTabDetail()} \r\n                                                        //             onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                        this.state.showTest ?\r\n                                                            <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'} tabDetail={this.testTabDetail()} onTabChange={this.ontestTabChange} />\r\n                                                            : \"\"}\r\n                                                </div>\r\n                                            </>\r\n                                        </div>\r\n                                    </ScrollBar>\r\n                                </SplitterLayout>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper >\r\n                {this.props.Login.openPortal ?\r\n                    <PortalModal>\r\n                         <PreRegisterSlideOutModal\r\n                        PrevoiusLoginData={this.PrevoiusLoginData}\r\n                        show={this.props.Login.openPortal}\r\n                        closeModal={this.closeModal}\r\n                        operation={\"create\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={\"IDS_REGISTRATION\"}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        timeZoneList={this.props.Login.timeZoneList}\r\n                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                        comboComponents={this.state.comboComponents}\r\n                        withoutCombocomponent={this.state.withoutCombocomponent}\r\n                        userRoleControlRights={this.state.userRoleControlRights}\r\n                        fromDate = {this.fromDate}\r\n                        toDate = {this.toDate}\r\n                        templateData={this.props.Login.masterData.registrationTemplate &&\r\n                            this.props.Login.masterData.registrationTemplate.jsondata}\r\n                        nsampletypecode={parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)}\r\n                        mandatoryFields={[\r\n                            { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                            { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n                  \r\n                    />\r\n                 \r\n                     </PortalModal> \r\n                    : \"\"}\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        //|| this.props.Login.loadEsign}\r\n                        closeModal={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile || this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal}\r\n                        size={this.props.Login.parentPopUpSize}\r\n                        loginoperation={this.props.Login.loadPrinter ? true : false}\r\n                        buttonLabel={this.props.Login.loadPrinter ? \"print\" : undefined}\r\n                        operation={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.loadComponent}\r\n                        onSaveClick={this.props.Login.loadComponent ? this.onSaveComponentClick :\r\n                            this.props.Login.loadTest ? this.onSaveTestClick : this.props.Login.loadSource ? this.onSaveSourceClick : this.props.Login.loadFile ? this.onSaveFileClick :\r\n                                this.props.Login.loadPoolSource ? this.onSavePoolSourceClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        showSaveContinue={this.props.Login.showSaveContinue}\r\n                        selectedRecord={!this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData\r\n                            : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile\r\n                                : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryList(this.props.Login.loadPreregister,\r\n                            this.props.Login.loadComponent, this.props.Login.loadTest,\r\n                            this.props.Login.loadPoolSource,\r\n                            this.props.Login.loadPrinter,\r\n                            this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                            this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                            this.props.Login.operation, this.props.Login.loadFile,\r\n                            this.props.Login.loadChildTest)}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.loadComponent ? <AddComponentPopUp\r\n                                ref={this.myScrollRef}\r\n                                selectComponent={this.state.selectComponent || {}}\r\n                                RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                handleDateChange={this.handleDateChange}\r\n                                Component={this.props.Login.lstComponent || []}\r\n                                StorageCondition={this.props.Login.StorageCondition || []}\r\n                                onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                onComboChange={this.onComponentComboChange}\r\n                                onNumericInputChange={this.onNumericInputChange}\r\n                                onComboComponentChange={this.onComboComponentChange}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                                plasmaMasterFile={this.props.Login.plasmaMasterFile}\r\n                                onComponentChange={this.onComponentChange}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                StorageLocation={this.props.Login.StorageLocation || []}\r\n                                sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                CurrentTime={this.props.Login.CurrentTime}\r\n                            /> : this.props.Login.loadTest ? <AddTest\r\n                                TestCombined={this.props.Login.TestCombined || []}\r\n                                TestChange={this.TestChange}\r\n                                selectedTestData={this.state.selectedTestData}\r\n                            /> : this.props.Login.loadSource ? <AddSource\r\n                                SourceCombined={this.props.Login.SourceCombined || []}\r\n                                SourceChange={this.SourceChange}\r\n                                selectedSourceData={this.state.selectedSourceData}\r\n                            /> : this.props.Login.loadFile ? <AddFile\r\n                                selectedFile={this.state.selectedFile || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onDrop={this.onDropComponentFile}\r\n                                deleteAttachment={this.deleteAttachment}\r\n                                actionType={this.state.actionType}\r\n\r\n                                maxSize={20}\r\n                                maxFiles={1}\r\n                            /> : this.props.Login.loadPoolSource ?\r\n                                <AddSource\r\n                                    SourceCombined={this.props.Login.sourceCountry}\r\n                                    selectedSourceData={this.state.selectedSourceData}\r\n                                    SourceChange={this.SourceChange}\r\n                                />\r\n                                :\r\n                                this.props.Login.loadPrinter ?\r\n                                    <AddPrinter\r\n                                        printer={this.props.Login.printer}\r\n                                        selectedPrinterData={this.state.selectedPrinterData}\r\n                                        PrinterChange={this.PrinterChange}\r\n                                    /> : this.props.Login.loadChildTest ? <AddTest\r\n                                        TestCombined={this.props.Login.availableTest}\r\n                                        selectedTestData={this.state.selectedRecord}\r\n                                        TestChange={this.onComboChange}\r\n                                    /> :\r\n                                        this.props.Login.loadPreregister ?\r\n                                            (this.props.Login.operation === \"create\" ?\r\n                                                //ROUTINE\r\n                                                this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ?\r\n                                                    <PreRegisterRoutine\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        selectedComponent={this.props.Login.selectedComponent || []}\r\n                                                        ProductCategory={this.props.Login.ProductCategory || []}\r\n                                                        Product={this.props.Login.Product || []}\r\n                                                        Client={this.props.Login.Client || []}\r\n                                                        selectedTest={this.props.Login.SelectedTest || []}\r\n                                                        Supplier={this.props.Login.Supplier || []}\r\n                                                        ContainerType={this.props.Login.ContainerType || []}\r\n                                                        StorageCondition={this.props.Login.StorageCondition || []}\r\n                                                        timezone={this.props.Login.timezone || []}\r\n                                                        Disposition={this.props.Login.Disposition || []}\r\n                                                        Unit={this.props.Login.Unit || []}\r\n                                                        Period={this.props.Login.Period || []}\r\n                                                        Priority={this.props.Login.Priority || []}\r\n                                                        Manufacturer={this.props.Login.Manufacturer || []}\r\n                                                        Specification={this.props.Login.Specification || []}\r\n                                                        AgaramTree={this.props.Login.AgaramTree || []}\r\n                                                        OpenNodes={this.props.Login.OpenNodes || []}\r\n                                                        FocusKey={this.props.Login.FocusKey || []}\r\n                                                        ActiveKey={this.props.Login.ActiveKey || []}\r\n                                                        onTreeClick={this.onTreeClick}\r\n                                                        onproductCategoryChange={this.onproductCategoryChange}\r\n                                                        onProductChange={this.onProductChange}\r\n                                                        onManufacturerChange={this.onManufacturerChange}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onClientComboChange={this.onClientComboChange}\r\n                                                        onspecChange={this.onRoutineSpecChange}\r\n                                                        handleDateChange={this.handleEditDateChange}\r\n                                                        onNumericInputChange={this.onNumericInputEditChange}\r\n                                                        operation={this.props.Login.operation}\r\n                                                        statustoEditDetail={this.props.Login.statustoEditDetail}\r\n                                                        addComponentTest={this.addComponentTest}\r\n                                                        deleteTest={this.deleteTest}\r\n                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    />\r\n                                                    :\r\n                                                    <PreRegisterPopUp\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        onMultiColumnValue={this.onMultiColumnValue}\r\n                                                        onMultiColumnMAHChange={this.onMultiColumnMAHChange}\r\n                                                        ProductCategory={this.props.Login.ProductCategory || []}\r\n                                                        Product={this.props.Login.Product || []}\r\n                                                        Client={this.props.Login.Client || []}\r\n                                                        Country={this.props.Login.Country || []}\r\n                                                        ProductMaholder={this.props.Login.ProductMaholder || []}\r\n                                                        Manufacturer={this.props.Login.Manufacturer || []}\r\n                                                        Specification={this.props.Login.Specification || []}\r\n                                                        AgaramTree={this.props.Login.AgaramTree || []}\r\n                                                        OpenNodes={this.props.Login.OpenNodes || []}\r\n                                                        FocusKey={this.props.Login.FocusKey || []}\r\n                                                        ActiveKey={this.props.Login.ActiveKey || []}\r\n                                                        onTreeClick={this.onTreeClick}\r\n                                                        Goodsin={this.props.Login.Goodsin || []}\r\n                                                        EProtocol={this.props.Login.EProtocol}\r\n                                                        SelectedSource={this.props.Login.SelectedSource || []}\r\n                                                        onproductCategoryChange={this.onproductCategoryChange}\r\n                                                        onProductChange={this.onProductChange}\r\n                                                        onManufacturerChange={this.onManufacturerChange}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onClientComboChange={this.onClientComboChange}\r\n                                                        onspecChange={this.onspecChange}\r\n                                                        getComponentfromJava={this.getComponentfromJava}\r\n                                                        selectComponent={this.selectComponent}\r\n                                                        selectedComponent={this.props.Login.selectedComponent || []}\r\n                                                        Component={this.props.Login.Component || []}\r\n                                                        selectedTest={this.props.Login.SelectedTest || []}\r\n                                                        ConfirmComponent={this.ConfirmComponent}\r\n                                                        AddComponent={this.AddComponent}\r\n                                                        addComponentTest={this.addComponentTest}\r\n                                                        addComponentSource={this.addComponentSource}\r\n                                                        deleteComponent={this.deleteComponent}\r\n                                                        deleteTest={this.deleteTest}\r\n                                                        editComponent={this.editComponent}\r\n                                                        AddFile={this.AddFile}\r\n                                                        popUptestDataState={this.state.popUptestDataState}\r\n                                                        componentDataState={this.state.componentDataState}\r\n                                                        testdataStateChange={this.testdataStateChange}\r\n                                                        componentDataStateChange={this.componentDataStateChange}\r\n                                                        popUpsourceDataStateChange={this.popUpsourceDataStateChange}\r\n                                                        popUpsourceDataState={this.state.popUpsourceDataState}\r\n                                                        controlMap={this.state.controlMap}\r\n                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                        deleteSource={this.deleteSource}\r\n                                                    //     handleDateChange={this.handleDateChange}\r\n                                                    />\r\n                                                : this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ?\r\n                                                    <PreRegisterRoutine\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        selectComponent={this.state.selectedComponent || []}\r\n                                                        ProductCategory={this.props.Login.ProductCategory || []}\r\n                                                        Product={this.props.Login.Product || []}\r\n                                                        Client={this.props.Login.Client || []}\r\n\r\n                                                        Supplier={this.props.Login.Supplier || []}\r\n                                                        ContainerType={this.props.Login.ContainerType || []}\r\n                                                        StorageCondition={this.props.Login.StorageCondition || []}\r\n                                                        timezone={this.props.Login.timezone || []}\r\n                                                        Disposition={this.props.Login.Disposition || []}\r\n                                                        Unit={this.props.Login.Unit || []}\r\n                                                        Period={this.props.Login.Period || []}\r\n                                                        Priority={this.props.Login.Priority || []}\r\n                                                        Manufacturer={this.props.Login.Manufacturer || []}\r\n                                                        Specification={this.props.Login.Specification || []}\r\n                                                        AgaramTree={this.props.Login.AgaramTree || []}\r\n                                                        OpenNodes={this.props.Login.OpenNodes || []}\r\n                                                        FocusKey={this.props.Login.FocusKey || []}\r\n                                                        ActiveKey={this.props.Login.ActiveKey || []}\r\n                                                        onTreeClick={this.onTreeClick}\r\n                                                        onproductCategoryChange={this.onproductCategoryChange}\r\n                                                        onProductChange={this.onProductChange}\r\n                                                        onManufacturerChange={this.onManufacturerChange}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onClientComboChange={this.onClientComboChange}\r\n                                                        onspecChange={this.onRoutineSpecChange}\r\n                                                        handleDateChange={this.handleEditDateChange}\r\n                                                        onNumericInputChange={this.onNumericInputEditChange}\r\n                                                        operation={this.props.Login.operation}\r\n                                                        statustoEditDetail={this.props.Login.statustoEditDetail}\r\n                                                    />\r\n                                                    :\r\n                                                    <EditPreRegistration\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        realRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                        realRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                        formatMessage={this.props.intl.formatMessage}\r\n                                                        onMultiColumnValue={this.onMultiColumnValue}\r\n                                                        onspecChange={this.onspecChange}\r\n                                                        onMultiColumnMAHChange={this.onMultiColumnMAHChange}\r\n                                                        productCategory={this.props.Login.ProductCategory || []}\r\n                                                        product={this.props.Login.Product || []}\r\n                                                        client={this.props.Login.Client || []}\r\n                                                        country={this.props.Login.Country || []}\r\n                                                        productMaholder={this.props.Login.ProductMaholder || []}\r\n                                                        manufacturer={this.props.Login.Manufacturer || []}\r\n                                                        specification={this.props.Login.Specification || []}\r\n                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                        agaramTree={this.props.Login.AgaramTree || []}\r\n                                                        openNodes={this.props.Login.OpenNodes || []}\r\n                                                        focusKey={this.props.Login.FocusKey || []}\r\n                                                        activeKey={this.props.Login.ActiveKey || []}\r\n                                                        onTreeClick={this.onTreeClick}\r\n                                                        goodsIn={this.props.Login.Goodsin || []}\r\n                                                        eProtocol={this.props.Login.EProtocol}\r\n                                                        storageCondition={this.props.Login.StorageCondition || []}\r\n                                                        storageLocation={this.props.Login.StorageLocation || []}\r\n                                                        plasmaMasterFile={this.props.Login.plasmaMasterFile}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        onNumericInputChange={this.onNumericInputEditChange}\r\n                                                        onManufacturerChange={this.onManufacturerChange}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        onClientComboChange={this.onClientComboChange}\r\n                                                        //selectedTest={this.props.Login.SelectedTest || []}\r\n                                                        //confirmComponent={this.ConfirmComponent}\r\n                                                        handleDateChange={this.handleEditDateChange}\r\n                                                        statustoEditDetail={this.props.Login.statustoEditDetail}\r\n                                                        operation={this.props.Login.operation}\r\n                                                        CurrentTime={this.props.Login.currentTime}\r\n                                                    />\r\n                                            ) : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n        this.setState({\r\n            selectedFile, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSaveChildTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        // selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        const inputData = {\r\n            TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Test\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef\r\n        }\r\n        if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    mandatoryList = (preregister, component, test, source, printer, nregtypecode, nregsubtypecode, operation, file, childtest) => {\r\n        let mandatory = [];\r\n        if (file) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n            ];\r\n        }\r\n        else if (preregister && (component === false) && (test === false)) {\r\n            if (operation === \"create\") {\r\n                //ROUTINE\r\n                if (nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n                    mandatory = [\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_CLIENT\", \"dataField\": \"nclientcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_DISPOSITION\", \"dataField\": \"ndisposition\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_TOTALQUANTITY\", \"dataField\": \"stotalqty\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_UNIT\", \"dataField\": \"ntotalunitcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRIORITY\", \"dataField\": \"npriority\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n                    ];\r\n                }\r\n                else if ((nregtypecode === RegistrationType.BATCH && nregsubtypecode !== RegistrationSubType.PROTOCOL)\r\n                    || (nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL)) {\r\n                    mandatory = [\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RMSNO\", \"dataField\": \"nrmsno\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERNAME\", \"dataField\": \"nproductmanufcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERSITENAME\", \"dataField\": \"smanufsitename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                    ];\r\n                } else {\r\n                    mandatory = [\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERNAME\", \"dataField\": \"nproductmanufcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERSITENAME\", \"dataField\": \"smanufsitename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                    ];\r\n                }\r\n\r\n            } else {\r\n                if (nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n                    mandatory = [\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_CLIENT\", \"dataField\": \"nclientcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_DISPOSITION\", \"dataField\": \"ndisposition\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_TOTALQUANTITY\", \"dataField\": \"stotalqty\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_UNIT\", \"dataField\": \"ntotalunitcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRIORITY\", \"dataField\": \"npriority\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n                    ];\r\n                } else if (nregsubtypecode === RegistrationSubType.EU || nregsubtypecode === RegistrationSubType.NON_EU) {\r\n\r\n                    mandatory = [\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RMSNO\", \"dataField\": \"nrmsno\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERNAME\", \"dataField\": \"nproductmanufcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERSITENAME\", \"dataField\": \"smanufsitename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"nstorageconditioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                    ];\r\n                }\r\n                else if (nregsubtypecode === RegistrationSubType.PROTOCOL) {\r\n                    mandatory = [\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RMSNO\", \"dataField\": \"nrmsno\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERNAME\", \"dataField\": \"nproductmanufcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERSITENAME\", \"dataField\": \"smanufsitename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n                }\r\n                else {\r\n                    mandatory = [\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RMSNO\", \"dataField\": \"nrmsno\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"nproductcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERNAME\", \"dataField\": \"nproductmanufcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFACTURERSITENAME\", \"dataField\": \"smanufsitename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n                }\r\n            }\r\n        }\r\n        else if (component && preregister) {\r\n            if ((nregtypecode === RegistrationType.BATCH) && (nregsubtypecode === RegistrationSubType.EU || nregsubtypecode === RegistrationSubType.NON_EU)) {\r\n                mandatory = [\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"nstorageconditioncode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            }\r\n\r\n            else if (nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\r\n                mandatory = [\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_POOLBULKVOLUME\", \"dataField\": \"sbulkvolume\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            }\r\n            else if (nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode === RegistrationSubType.EXTERNAL_POOL) {\r\n                mandatory = [\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    // { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            }\r\n\r\n\r\n\r\n            else if (nregsubtypecode === RegistrationSubType.PROTOCOL) {\r\n                mandatory = [\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n                ];\r\n            }\r\n            else if (nregtypecode === RegistrationType.NON_BATCH && nregsubtypecode === RegistrationSubType.CONTRACTTESTING) {\r\n                mandatory = [\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    // { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            }\r\n\r\n            else {\r\n                mandatory = [\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_MANUFLOTNO\", \"dataField\": \"smanuflotno\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_NOOFCONTAINER\", \"dataField\": \"nnoofcontainer\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            }\r\n\r\n        }\r\n        else if (test && preregister) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        // else if (file) {\r\n        //     mandatory = [\r\n        //         {\"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"ntestgrouptestcode\" }\r\n        //     ];\r\n        // }\r\n        else if (source) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_SOURCENAME\", \"dataField\": \"ncountrycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        }\r\n        else if (printer) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (childtest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        return mandatory;\r\n    }\r\n\r\n    getRegistrationComboService = (ScreenName,operation,primaryKeyField,masterData, userInfo, editId) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate.jsondata\r\n        Layout.map(row => {\r\n            row.children.map(column => {\r\n                column.children.map(component => {\r\n                    return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                        if (componentrow.inputtype === \"combo\") {\r\n                            data.push(componentrow)\r\n                        } else {\r\n                            withoutCombocomponent.push(componentrow)\r\n                        }\r\n                    })\r\n                        : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component)\r\n                })\r\n            })\r\n        })\r\n        const comboComponents = data\r\n        let childColumnList = {};\r\n        data.map(columnList => {\r\n            const val = this.comboChild(data, columnList, childColumnList, true);\r\n            data = val.data;\r\n            childColumnList = val.childColumnList\r\n        })\r\n        const mapOfFilterRegData={\r\n            nsampletypecode:parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n        }\r\n        this.props.getPreviewTemplate(masterData, userInfo, editId,\r\n             data, this.state.selectedRecord, childColumnList, \r\n             comboComponents, withoutCombocomponent,true,false,mapOfFilterRegData)\r\n\r\n    }\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = this.comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterChange = (event, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        //Routine\r\n        let getComponents = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ? true : false;\r\n       \r\n        if(this.props.Login.Component===undefined ||this.props.Login.Component.length=== 0 ){\r\n            this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        }else{\r\n            if(event.key!== this.props.Login.ActiveKey ){\r\n            this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n            }\r\n        }\r\n       \r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {activeSampleTab, screenName: activeSampleTab }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n\r\n            // if (this.props.Login.masterData.RealRegTypeValue.nregtypecode !== RegistrationType.PLASMA_POOL){\r\n            //     activeSampleTab = \"IDS_SAMPLEATTACHMENTS\";\r\n            // }\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    ontestTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {activeTestTab, screenName: activeTestTab }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                }\r\n                this.props.getTestChildTabDetail(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedFile, actionType: \"new\" });\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n    // confirmAlert = () => {\r\n    //     this.state.showConfirmAlert &&\r\n    //         this.confirmMessage.confirm(\"Warning\", \"Warning\", \r\n    //         this.props.Login.booleanFlag, \"ok\", \"Cancel\", \r\n    //         () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n    // }\r\n\r\n    onUpdateRegistrationConfirm = () => {\r\n        this.showAlert();\r\n        this.onUpdateRegistration(this.props.Login.regEditParam.saveType,\r\n            this.props.Login.regEditParam.formRef,\r\n            this.props.Login.regEditParam.operation, 2)\r\n    }\r\n\r\n    confirmAlert = () => {\r\n        if (this.state.showConfirmAlert) {\r\n            if (this.props.Login.regDateEditConfirmMessage) {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.regDateEditConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onUpdateRegistrationConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.booleanFlag, \"ok\", \"Cancel\",\r\n                    () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n            }\r\n        }\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showTestAndSample() {\r\n        this.setState({ showSample: !this.state.showSample, showTest: !this.state.showTest })\r\n    }\r\n\r\n    showTestDetails() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showSample: !this.state.showSample, showTest: !this.state.showTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ showSample: false, showTest: true })\r\n    }\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        let booleanFlag = true;\r\n        if (this.state.selectedRecord.nallottedspeccode !== undefined\r\n            && this.state.selectedRecord.nallottedspeccode !== \"\") {\r\n                if (this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\r\n                    if (this.state.selectedRecord.nmanufcode === undefined || this.state.selectedRecord.nmanufcode === \"\") {\r\n                        booleanFlag = false;\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n                    }\r\n                }\r\n                if (booleanFlag) {\r\n                    if (this.state.selectedRecord.nallottedspeccode !== undefined && this.state.selectedRecord.nallottedspeccode !== \"\") {\r\n                        Map[\"ntemplatemanipulationcode\"] = this.state.selectedRecord.ntemplatemanipulationcode;\r\n                        Map[\"nallottedspeccode\"] = this.state.selectedRecord.nallottedspeccode.value;\r\n                        Map[\"nmanufcode\"] = this.state.selectedRecord.nmanufcode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"testrequired\"] = false;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        this.props.AddComponent(Map);\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                    }\r\n                }\r\n     \r\n        }\r\n\r\n    }\r\n\r\n    AddFile = () => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\r\n        let booleanmanuf = true;\r\n        if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\r\n            booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false\r\n        }\r\n        if (booleanmanuf) {\r\n            if (this.state.selectedRecord.nallottedspeccode !== undefined) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadFile: true,\r\n                        ChildscreenName: \"File\", childoperation: \"Import\",\r\n                        parentPopUpSize: \"lg\", selectedFile: undefined\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectComponent[name] = '';\r\n            this.setState({ selectComponent });\r\n        } else {\r\n            selectComponent[name] = value;\r\n            this.setState({ selectComponent });\r\n        }\r\n    }\r\n\r\n    addComponentTest = (selectedComponent) => {\r\n        if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n            delete selectedComponent[\"selected\"];\r\n            this.props.getTest(selectedComponent, this.props.Login);\r\n        } else {\r\n            if (this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECTOADDTEST\" }));\r\n\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    addComponentSource = (selectedComponent) => {\r\n        delete selectedComponent[\"selected\"];\r\n        this.props.getComponentSource(selectedComponent, this.props.Login);\r\n    }\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    onClientComboChange = (comboData) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData !== null) {\r\n            selectedRecord[\"nclientcode\"] = comboData;\r\n            selectedRecord[\"saddress1\"] = comboData.item.saddress1;\r\n        }\r\n        else {\r\n            selectedRecord[\"nclientcode\"] = undefined;\r\n            selectedRecord[\"saddress1\"] = \"\";\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    ConfirmComponent = (props) => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.getComponentfromJava(props));\r\n        // confirm1.confirm(\"warning\", \"warning1\", \"do you want to override?\", \"ok\", \"cancel\", undefined);\r\n        //.confirm(\"warning\", \"warning1\", \"do you want to override?\", \"ok\", \"cancel\", undefined)\r\n    }\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    acceptRegistration = (registerId, skip, take) => {\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            if (acceptList.every(this.checkPreregisterAndQuarentine)) {\r\n                if (this.props.Login.masterData.selectedTest.length > 0) {\r\n                    if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_ACCEPTREGISTRATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    } else {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        // Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\",\r\n                            \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDTESTTOREGISTERSAMPLES\" }));\r\n                }\r\n            } else {\r\n                //toast.warn(\"Select Pre-register/Quarantine Samples\")\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n        }\r\n    }\r\n\r\n    acceptRegistrationConfirm = (inputParam, registerId) => {\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'accept'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.acceptRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    selectQuarantine = (quarantineId, skip, take) => {\r\n        let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\r\n        let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (quarentineList && quarentineList.length > 0) {\r\n            if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\r\n\r\n                // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\r\n                //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //if (ntransactionstatus === transactionStatus.PREREGISTER) {\r\n                let Map = {};\r\n                Map[\"fromdate\"] = \"\";\r\n                Map[\"todate\"] = \"\";\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                //Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"ntransactionstatus\"] = quarentineList &&\r\n                    quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'quarantine'\r\n                }\r\n                //console.log(\"inputParam, quarantine:\", inputParam);\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'quarantine'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n        }\r\n\r\n    }\r\n\r\n    checkPreregisterAndQuarentine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE)\r\n    }\r\n\r\n    checkPreregisterRecordQuarantine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER)\r\n    }\r\n\r\n    onRegSubTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        // }\r\n    }\r\n\r\n    onComponentComboChange = (comboData, fieldName) => {\r\n        //if (comboData !== null) {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = comboData;\r\n        this.setState({ selectComponent });\r\n        //}\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        this.setState({ selectedTestData });\r\n    }\r\n\r\n    SourceChange = (comboData, fieldName) => {\r\n        const selectedSourceData = this.state.selectedSourceData || {};\r\n        selectedSourceData[fieldName] = comboData;\r\n        this.setState({ selectedSourceData });\r\n    }\r\n\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n\r\n    onComboComponentChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        selectComponent[fieldName] = comboData;\r\n        this.setState({ selectComponent });\r\n        // }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            const oldspecsampletypecode=selectComponent.nspecsampletypecode\r\n            if(oldspecsampletypecode!==comboData.item.nspecsampletypecode){\r\n                selectComponent[\"nneedservice\"] = true;\r\n            }\r\n            selectComponent[\"ncomponentcode\"] = comboData;\r\n            selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n            this.setState({ selectComponent });\r\n        }\r\n\r\n    }\r\n\r\n    onProductChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode=this.state.selectedRecord[\"nproductcode\"]!==undefined?\r\n            this.state.selectedRecord[\"nproductcode\"].value:undefined;\r\n            Map[\"nproductcode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            Map[\"nsampletypecode\"] = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode);\r\n            Map[\"nproductcatcode\"] = parseInt(selectedRecord.nproductcatcode.value); \r\n            Map[\"event\"] = event; \r\n\r\n            if(this.props.Login.Component.length=== 0 ){\r\n                this.props.getReProductChange(Map, selectedRecord, this.props.Login);\r\n            }else{\r\n                if(event.value!== oldpromarycode ){\r\n                   // selectedRecord[fieldName] = event;\r\n                this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n                \"ok\", \"cancel\", () =>  this.props.getReProductChange(Map,   selectedRecord , this.props.Login));\r\n                }\r\n            }\r\n           \r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    onproductCategoryChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode=this.state.selectedRecord[\"nproductcatcode\"]!==undefined?\r\n            this.state.selectedRecord[\"nproductcatcode\"].value:undefined;\r\n            Map[\"nproductcatcode\"] = parseInt(event.value);\r\n            Map[\"ncategorybasedflow\"] = parseInt(event.item.ncategorybasedflow)\r\n            Map[\"nsampletypecode\"] = parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            Map[\"event\"] = event; \r\n\r\n          //  selectedRecord[fieldName] = event;\r\n            selectedRecord[\"nregsubtypecode\"] = \"\";\r\n\r\n           \r\n            if(this.props.Login.Component.length=== 0 ){\r\n            this.props.getProductCategoryChange(Map, selectedRecord, this.props.Login.masterData, parseInt(event.item.ncategorybasedflow));\r\n        }else{\r\n            if(event.value!== oldpromarycode ){\r\n            this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.props.getProductCategoryChange(Map, selectedRecord, this.props.Login.masterData, parseInt(event.item.ncategorybasedflow)));\r\n            }\r\n        }\r\n        }\r\n    }\r\n\r\n    onManufacturerChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nmanufcode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            const selectedRecord = this.state.selectedRecord;\r\n            selectedRecord[fieldName] = event;\r\n            selectedRecord[\"nregsubtypecode\"] = \"\";\r\n            this.props.getManufactureChange(Map, selectedRecord, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const oldpromarycode=this.state.selectedRecord[\"nallottedspeccode\"]!==undefined?\r\n            this.state.selectedRecord[\"nallottedspeccode\"].value:undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            if(this.props.Login.Component.length=== 0 ){\r\n                this.setState({ selectedRecord });\r\n            }else{\r\n                if(event.value!== oldpromarycode ){\r\n                this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n                \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    onRoutineSpecChange = (event, fieldName) => {\r\n        let Map = {};\r\n        const selectedRecord = this.state.selectedRecord;\r\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n        selectedRecord[\"nallottedspeccode\"] = event;\r\n        Map[\"ntemplatemanipulationcode\"] = selectedRecord.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = selectedRecord.nallottedspeccode.value;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        this.props.getComponentTestBySpec(Map, selectedRecord, this.props.Login.masterData);\r\n    }\r\n\r\n    onMultiColumnValue = (value, key, flag, label, keys) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n            if (flag) {\r\n                keys.map((objkey, index) => {\r\n                    return selectedRecord[objkey] = { \"label\": value[0][label[index]], \"value\": value[0][objkey] }\r\n                })\r\n            }\r\n        } else {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = \"\";\r\n            });\r\n            keys.map((objkey, index) => {\r\n                return selectedRecord[objkey] = \"\"\r\n            })\r\n        }\r\n        this.props.getManufacturerChange(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\r\n    }\r\n\r\n    getComponentfromJava = (selectedRecord) => {\r\n        let Map = {};\r\n        Map[\"ntemplatemanipulationcode\"] = selectedRecord.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = selectedRecord.nallottedspeccode.value;\r\n        Map[\"testrequired\"] = selectedRecord.ntransactionstatus === 3 ? true : false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        this.props.getComponentTestBySpec(Map, selectedRecord, this.props.Login.masterData);\r\n    }\r\n\r\n    selectComponent = (event) => {\r\n        // let index = this.props.Login.Component.find(event.dataItem.slno);\r\n        // console.log(\"this.props.Login.SelectedSource:\", this.props.Login);\r\n        let selectedComponent = event.dataItem;\r\n        //  console.log(\"selectComponent:\", this.props.Login.Test, selectedComponent);\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        let SelectedSource = this.props.Login.Source ? this.props.Login.Source[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent, SelectedSource, selectedSourceData: SelectedSource,\r\n                popUptestDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n    onMultiColumnMAHChange = (value, key) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    closeChildModal = () => {\r\n        let loadComponent = this.props.Login.loadComponent;\r\n        let loadTest = this.props.Login.loadTest;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let loadSource = this.props.Login.loadSource;\r\n        let showSaveContinue = this.props.Login.showSaveContinue;\r\n        let screenName = this.props.Login.screenName;\r\n        let selectedTest = this.props.Login.selectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent\r\n        let selectComponent = this.state.selectComponent;\r\n        let loadChildTest = this.props.Login.loadChildTest;\r\n        let openModal = this.props.Login.openModal;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        if (this.props.Login.loadComponent) {\r\n            loadComponent = false;\r\n            showSaveContinue = false;\r\n            selectedTest = {};\r\n            selectComponent = undefined;\r\n            screenName = this.props.Login.PopUpLabel\r\n\r\n        } else if (this.props.Login.loadTest) {\r\n            loadTest = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadSource) {\r\n            loadSource = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadFile) {\r\n            loadFile = false;\r\n\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadChildTest) {\r\n            loadChildTest = false;\r\n            openModal = false;\r\n            loadPreregister = false;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent, loadTest, screenName, showSaveContinue,\r\n                selectedComponent,\r\n                loadSource, loadFile, loadChildTest,\r\n                selectedTest, openModal, loadPreregister,\r\n                parentPopUpSize: \"xl\", selectComponent\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let parentPopUpSize = this.props.Login.pare\r\n        let screenName = this.props.Login.screenName;\r\n        let loadPrinter = this.props.Login.loadPrinter;\r\n        let loadPoolSource = this.props.Login.loadPoolSource;\r\n        let openPortal = this.props.Login.openPortal;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false\r\n                loadPreregister = false;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, openModal, openChildModal, loadPreregister }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                if (loadPreregister) {\r\n                    parentPopUpSize = 'xl'\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, parentPopUpSize }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            loadPrinter = false;\r\n            loadPreregister = false;\r\n            loadPoolSource = false;\r\n            selectedRecord = {};\r\n            openPortal=false;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, loadPreregister, selectedRecord,\r\n                     screenName, insertSourcePreregno: undefined, loadPrinter, loadPoolSource,openPortal }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n        else {\r\n            //ROUTINE\r\n            if (this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n\r\n                this.insertRoutineRegistration(true);\r\n\r\n            } else {\r\n\r\n                let Components = this.props.Login.Component;\r\n                // var flag = true;\r\n                if (Components.length > 0) {\r\n                    if (operation === \"create\") {\r\n                        let checkManufLot = this.checkManufLotPresent();\r\n                        if (checkManufLot === true) {\r\n                            let flagDuplicate = checkDuplicateComponentandManufLot(Components);\r\n                            if (flagDuplicate === true) {\r\n                                // if (this.props.Login.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\r\n                                //     flag= checkSourceForAllPreregno(Components, this.props.Login.Sources);\r\n                                // }\r\n                                this.insertRegistration(true);\r\n                            } else {\r\n                                this.confirmMessage.confirm(\"warning\", \"Warning!\", flagDuplicate, undefined, \"ok\", undefined, true, undefined);\r\n                                // alert(flagDuplicate);\r\n                            }\r\n                        } else {\r\n                            this.confirmMessage.confirm(\"warning\", \"Warning!\", checkManufLot, undefined, \"ok\", undefined, true, undefined);\r\n                            // this.confirmMessage.confirm(\"warning\", \"Warning!\", checkManufLot, \"ok\", undefined, \"ok\", undefined);\r\n                            // alert(checkManufLot)\r\n                        }\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTCOMPONENT\" }));\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    onSavePoolSourceClick = () => {\r\n        let insertlistcountry = [];\r\n        if (this.props.Login.masterData.selectedSample.every(checkCancelAndReject)) {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDSOURCEFORCANCELREJECTSAMPLE\" }));\r\n        }\r\n        this.state.selectedSourceData.ncountrycode && this.state.selectedSourceData.ncountrycode.map(source => insertlistcountry.push({ npreregno: this.props.Login.insertSourcePreregno, ncountrycode: source.value }))\r\n        const inputParam = {\r\n            classUrl: 'registration',\r\n            methodUrl: 'RegistrationSourceCountry',\r\n            displayName: 'IDS_SAMPLEREGISTRATION',\r\n            inputData: {\r\n                ninsertpreregno: this.props.Login.insertSourcePreregno,\r\n                insertlistcountry,\r\n                npreregno: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            operation: 'create',\r\n            dataState: this.state.sourceDataState,\r\n            activeSampleTab: \"IDS_SOURCE\",\r\n            action: 'addregsourcecountry',\r\n            showSample: true\r\n\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'create'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedFile = this.state.selectedFile;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedFile.sfilename;\r\n        const formData = new FormData();\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFiles && acceptedFiles.length > 0) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFiles.length);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }));\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\r\n        formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\r\n        formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\r\n        this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\r\n    }\r\n\r\n    // onSaveFileClick = (saveType, formRef) => {\r\n\r\n    // }\r\n    insertRegistration(confirmMsg) {\r\n        let Components = this.props.Login.Component;\r\n        //  let Source = this.props.Login.Sources ? this.props.Login.Sources : [];\r\n        let Source = this.props.Login.Source ? this.props.Login.Source : []\r\n        let Test = this.props.Login.Test;\r\n        let Map = {};\r\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n        Map[\"component\"] = getComponentListfromUnwantedAttr(this.props.Login.Component);\r\n        Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.fromDate);//formatDate(this.fromDate);\r\n        Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.toDate);//formatDate(this.toDate);\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n        Map[\"Registration\"] = getRegistration(this.props.Login.masterData, this.state.selectedRecord);\r\n        Map[\"Registrationgeneral\"] = getRegistrationGeneral(this.state.selectedRecord);\r\n        Map[\"country\"] = Object.keys(Source).length > 0 ? TestListManipulation(Components, Source) : [];\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nflag\"] = 2;\r\n        Map[\"ntype\"] = 1;\r\n        Map[\"booleanLotCheck\"] = confirmMsg ? true : false;\r\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n        // Map[\"postParamList\"]=this.postParamList\r\n        const inputParam = {\r\n            inputData: Map,\r\n            postParamList: this.postParamList,\r\n            action: \"preregister\"\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'create',\r\n                    showConfirmAlert: false,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.updateStore({\r\n                typeName: DEFAULT_RETURN,\r\n                data: { showConfirmAlert: false }\r\n            });\r\n            this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    insertRoutineRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let Test = this.props.Login.Test;\r\n        let Map = {};\r\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n        Map[\"component\"] = getComponentListfromUnwantedAttr(this.props.Login.Component);\r\n        Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.fromDate);//formatDate(this.fromDate);\r\n        Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.toDate);//formatDate(this.toDate);\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n        Map[\"Registration\"] = getRegistration(this.props.Login.masterData, this.state.selectedRecord);\r\n        Map[\"Registrationgeneral\"] = {};\r\n        Map[\"registrationroutine\"] = getRegistrationRoutine(this.state.selectedRecord);\r\n        Map[\"country\"] = [];\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nflag\"] = 2;\r\n        Map[\"ntype\"] = 1;\r\n        Map[\"booleanLotCheck\"] = false;\r\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab;\r\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab;\r\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n        // Map[\"postParamList\"]=this.postParamList\r\n        const inputParam = {\r\n            inputData: Map,\r\n            postParamList: this.postParamList,\r\n            action: \"preregister\"\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'create',\r\n                    showConfirmAlert: false,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.updateStore({\r\n                typeName: DEFAULT_RETURN,\r\n                data: { showConfirmAlert: false }\r\n            });\r\n            this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SOURCE\":\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    testdataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    testStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    checkManufLotPresent = () => {\r\n        let masterData = this.props.Login.masterData;\r\n        let Components = this.props.Login.Component;\r\n        if ((masterData.RealRegTypeValue.nregtypecode === RegistrationType.NON_BATCH)\r\n            || (masterData.RealRegTypeValue.nregtypecode === RegistrationType.BATCH\r\n                && masterData.RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.PROTOCOL)\r\n            || (masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL\r\n                && masterData.RealRegSubTypeValue.nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL)) {\r\n            return fnCheckBatchComponentMandatory(Components);\r\n        } else if ((masterData.RealRegTypeValue.nregtypecode === RegistrationType.BATCH\r\n            && masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.PROTOCOL)\r\n            || (masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL\r\n                && masterData.RealRegSubTypeValue.nregsubtypecode === RegistrationSubType.EXTERNAL_POOL)) {\r\n            return fnCheckBatchProtocolComponentMandatory(Components);\r\n        }\r\n    }\r\n\r\n    sampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n        tabMap.set(\"IDS_ATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n        if (this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL) {\r\n            tabMap.set(\"IDS_SOURCE\",\r\n                <SourceTab\r\n                    userInfo={this.props.Login.masterData.userInfo || {}}\r\n                    RegistrationSourceCountry={this.props.Login.masterData.RegistrationSourceCountry || []}\r\n                    dataState={this.state.sourceDataState}\r\n                    methodUrl={\"RegistrationSourceCountry\"}\r\n                    dataStateChange={this.dataStateChange}\r\n                    masterData={this.props.Login.masterData}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName=\"IDS_SOURCE\"\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    deleteRecord={this.deleteRegistrationSourceCountry}\r\n                />)\r\n        }\r\n        return tabMap;\r\n    }\r\n\r\n    testTabDetail = () => {\r\n\r\n        const testTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        testTabMap.set(\"IDS_PARAMETERRESULTS\", <RegistrationResultTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            screenName=\"IDS_PARAMETERRESULTS\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n        // getStatusCombo={this.props.getStatusCombo}\r\n        //selectedId={this.props.Login.masterData.selectedParamId}\r\n        //  viewFile={this.props.viewAttachment}\r\n        // checkListRecord={this.props.checkListRecord}\r\n        />)\r\n\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        return testTabMap;\r\n    }\r\n\r\n    getCommentsCombo = (event) => {\r\n\r\n        if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\r\n            this.props.getCommentsCombo(...event);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOADDCOMMENTS\" }))\r\n        }\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    testDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            // default:\r\n            //     this.setState({\r\n            //         testDataState: event.dataState\r\n            //     });\r\n            //     break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n        selectedTestData.map((item) => {\r\n            return selectedTestArray.push(item.item);\r\n        });\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        let Test = this.props.Login.Test || [];\r\n\r\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n        //  ArrayTest.push(selectedTestArray);\r\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveSourceClick = (saveType, formRef) => {\r\n        let selectedSourceData = this.state.selectedSourceData[\"ncountrycode\"] || {};\r\n        let selectedSourceArray = [];\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        selectedSourceData.map((item) => {\r\n            return selectedSourceArray.push({ ...item.item, slno: selectedComponent.slno });\r\n        });\r\n\r\n        //let Sources = this.props.Login.Sources || [];\r\n        let Source = this.props.Login.Source || [];\r\n\r\n        const ArraySources = Source[selectedComponent.slno] ? Source[selectedComponent.slno] : [];\r\n        //  ArrayTest.push(selectedTestArray);\r\n        Source[selectedComponent.slno] = [...ArraySources, ...selectedSourceArray]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { SelectedSource: Source[selectedComponent.slno], Source: Source, selectedSourceData: {}, loadSource: false, parentPopUpSize: \"xl\" }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let nregtypecode = this.props.Login.masterData.RealRegTypeValue.nregtypecode\r\n            let nregsubtypecode = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"sstoragelocationname\"] = selectedComponent[\"nstoragelocationcode\"] && selectedComponent[\"nstoragelocationcode\"].label ? selectedComponent[\"nstoragelocationcode\"].label : null;\r\n            objcomponent[\"sstorageconditionname\"] = selectedComponent[\"nstorageconditioncode\"] && selectedComponent[\"nstorageconditioncode\"].label ? selectedComponent[\"nstorageconditioncode\"].label : null;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            objcomponent[\"nstoragelocationcode\"] = selectedComponent[\"nstoragelocationcode\"] ? selectedComponent[\"nstoragelocationcode\"].value : -1;\r\n            objcomponent[\"nstorageconditioncode\"] = selectedComponent[\"nstorageconditioncode\"] ? selectedComponent[\"nstorageconditioncode\"].value : -1;\r\n            // objcomponent[\"sreceiveddate\"] = formatInputDateWithoutT(selectedComponent[\"dreceiveddate\"], false);\r\n            // objcomponent[\"dreceiveddate\"] = formatInputDate(selectedComponent[\"dreceiveddate\"], false);\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdmanufdate\"] = selectedComponent[\"ntzdmanufdate\"] ? selectedComponent[\"ntzdmanufdate\"].value : -1;\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"stzdmanufdate\"] = selectedComponent[\"ntzdmanufdate\"] ? selectedComponent[\"ntzdmanufdate\"].label : \"\";\r\n\r\n            if (nregtypecode === RegistrationType.PLASMA_POOL && nregsubtypecode !== RegistrationSubType.EXTERNAL_POOL) {\r\n                objcomponent[\"nplasmafilecode\"] = selectedComponent[\"nplasmafilecode\"].value ? selectedComponent[\"nplasmafilecode\"].value : -1;\r\n                objcomponent[\"splasmafilenumber\"] = selectedComponent[\"nplasmafilecode\"].label ? selectedComponent[\"nplasmafilecode\"].label : \"\";\r\n            } else {\r\n                objcomponent[\"nplasmafilecode\"] = selectedComponent[\"nplasmafilecode\"] ? selectedComponent[\"nplasmafilecode\"] : -1;\r\n            }\r\n            // const TestList = [...TestListManipulation(Component, Test)];\r\n            // const TestComponentData = [... new Set(TestList.filter(item => {\r\n            //     if (item.nspecsampletypecode === selectedComponent.nspecsampletypecode) {\r\n            //         return item;\r\n            //     }\r\n            // }))];\r\n            // Test[selectedComponent.slno] = TestComponentData.map(item => {\r\n            //     // item.slno = selectedComponent.slno\r\n            //     return { ...item, slno: selectedComponent.slno };\r\n            // })\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                // Component.splice(index, 1);\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired===3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if(selectedComponent[\"nneedservice\"]===true){\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login,true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let testList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n        } else {\r\n            testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\r\n        }\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, acceptList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let acceptList = []\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            acceptList.push(selectedRecord);\r\n        }\r\n        else {\r\n            acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        }\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, acceptList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n \r\n\r\n\r\n   \r\n    /* covertDatetoString(startDateValue, endDateValue) {\r\n         const startDate = new Date(startDateValue);\r\n         const endDate = new Date(endDateValue);\r\n \r\n         const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n         const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n         const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n         const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n \r\n         const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n         const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n         const breadCrumbFrom = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n         const breadCrumbTo = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n         return ({ fromDate, toDate, breadCrumbFrom, breadCrumbTo })\r\n     }*/\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[\"1\"], \"dataField\": option[\"2\"], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"sstoragelocationname\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].label : \"\";\r\n            saveComponent[\"sstorageconditionname\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].label : \"\";\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            saveComponent[\"nstoragelocationcode\"] = objcomponent[\"nstoragelocationcode\"] ? objcomponent[\"nstoragelocationcode\"].value : -1;\r\n            saveComponent[\"nstorageconditioncode\"] = objcomponent[\"nstorageconditioncode\"] ? objcomponent[\"nstorageconditioncode\"].value : -1;\r\n\r\n            //objcomponent[\"dreceiveddate\"] = formatDate(objcomponent[\"dreceiveddate\"]);\r\n            // saveComponent[\"dreceiveddate\"] = formatInputDate(objcomponent[\"dreceiveddate\"], false);\r\n            // saveComponent[\"sreceiveddate\"] = formatInputDateWithoutT(objcomponent[\"dreceiveddate\"], false);\r\n\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"nplasmafilecode\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].value : -1;\r\n            saveComponent[\"splasmafilenumber\"] = objcomponent[\"nplasmafilecode\"] ? objcomponent[\"nplasmafilecode\"].label : \"\";\r\n            saveComponent[\"ntzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].value : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"stzdmanufdate\"] = objcomponent[\"ntzdmanufdate\"] ? objcomponent[\"ntzdmanufdate\"].label : \"\";\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], SelectedSource: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    cancelRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedTest ||\r\n            (this.props.Login.masterData.RegistrationGetTest ?\r\n                [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelTest'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelTestAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.withoutCombocomponent !== previousProps.Login.withoutCombocomponent) {\r\n            this.setState({ withoutCombocomponent: this.props.Login.withoutCombocomponent });\r\n        } \r\n        if (this.props.Login.comboComponents !== previousProps.Login.comboComponents) {\r\n            this.setState({ comboComponents: this.props.Login.comboComponents });\r\n        } \r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        } \r\n        if(this.props.Login!==previousProps.Login){\r\n            this.PrevoiusLoginData=previousProps.Login\r\n            \r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        } \r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.loadFile !== previousProps.Login.loadFile && (this.props.Login.loadFile === false)) {\r\n            this.setState({ selectedFile: undefined })\r\n        }\r\n\r\n        \r\n        // else if (this.props.Login.selectedSourceData !== previousProps.Login.selectedSourceData) {\r\n        //     this.setState({ selectedSourceData: this.props.Login.selectedSourceData });\r\n\r\n        // } \r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\r\n            this.setState({ selectedFilter: this.props.Login.selectedFilter });\r\n        }\r\n        if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n            this.setState({ popUptestDataState: this.props.Login.popUptestDataState });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            this.setState({ userRoleControlRights, controlMap });\r\n\r\n        }\r\n        // if(this.props.Login.showSample !== previousProps.Login.showSample) {\r\n        //     let showSample = this.props.Login.showSample !== undefined ? this.props.Login.showSample : this.state.showSample\r\n        //     let showTest = showSample ? false : true\r\n        //     this.setState({ showSample, showTest });\r\n        // }\r\n\r\n        // if(this.props.Login.showTest !== previousProps.Login.showTest) {\r\n        //     let showTest = this.props.Login.showTest !== undefined ? this.props.Login.showTest : this.state.showTest\r\n        //     let showSample = showTest ? false : true\r\n        //     this.setState({ showSample, showTest });\r\n        // }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            let DynamicSampleColumns = this.state.DynamicSampleColumns;\r\n            let DynamicSubSampleColumns = this.state.DynamicSubSampleColumns;\r\n            let DynamicTestColumns = this.state.DynamicTestColumns;\r\n            let DynamicGridItem = this.state.DynamicGridItem;\r\n            let DynamicGridMoreField = this.state.DynamicGridMoreField;\r\n            let SingleItem = this.state.SingleItem;\r\n            let testMoreField = this.state.testMoreField;\r\n            let testListColumns = this.state.testListColumns;\r\n            let { skip, take, testskip, testtake, testCommentDataState, resultDataState, sourceDataState, sampleGridDataState, popUptestDataState } = this.state\r\n            if (this.props.Login.masterData.DynamicColumns && this.props.Login.masterData.DynamicColumns !== previousProps.Login.masterData.DynamicColumns) {\r\n                DynamicSampleColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 3);\r\n                DynamicSubSampleColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], 3);\r\n                DynamicTestColumns = listDataFromDynamicArray(listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 5), 1);\r\n                DynamicGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 5);\r\n                DynamicGridMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 6);\r\n                SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], 4);\r\n                testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 7);\r\n                testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], 3);\r\n            }\r\n            let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample\r\n            let showTest = showSample ? false : true\r\n            const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                \"jsondata\", \"nsorter\", \"ascending\", false);\r\n\r\n            const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                \"sregtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n            const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                \"sregsubtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n            const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\",\r\n                \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\r\n            // const stateSampleType = sampleTypeMap.get(\"OptionList\");\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.sourceDataState && this.props.Login.sourceDataState !== previousProps.Login.sourceDataState) {\r\n                sourceDataState = this.props.Login.sourceDataState;\r\n            }\r\n            if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n                sampleGridDataState = this.props.Login.sampleGridDataState;\r\n            }\r\n            if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n                popUptestDataState = this.props.Login.popUptestDataState;\r\n            }\r\n            this.setState({\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns, SingleItem, testMoreField,\r\n                DynamicGridItem, DynamicGridMoreField, testListColumns, stateSampleType: sampleTypeMap.get(\"OptionList\"),\r\n                stateRegistrationType: registrationTypeMap.get(\"OptionList\"), stateRegistrationSubType: registrationSubTypeMap.get(\"OptionList\"),\r\n                stateFilterStatus: filterStatusMap.get(\"OptionList\"), popUptestDataState,\r\n                showSample, showTest, skip, take, testskip, testtake, testCommentDataState, resultDataState, sourceDataState, sampleGridDataState\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    handleEditDateChange = (dateName, dateValue) => {\r\n        const selectComponent = this.state.selectedRecord;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectedRecord: selectComponent });\r\n    }\r\n\r\n    onNumericInputEditChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    deleteRegistrationSourceCountry = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: 'registration',\r\n            methodUrl: 'RegistrationSourceCountry',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                registrationsourcecountry: deleteParam.selectedRecord,\r\n                npreregno: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: 'delete',\r\n            dataState: this.state.sourceDataState,\r\n            action: 'deleteregsourcecountry'\r\n        }\r\n\r\n        const deleteSourceId = this.state.controlMap.has(\"DeleteRegistrationSourceCountry\") ? this.state.controlMap.get(\"DeleteRegistrationSourceCountry\").ncontrolcode : -1;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteSourceId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: \"IDS_SAMPLEREGISTRATION\",//screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'delete'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    cancelSampleRecords = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        // sampleList = sampleList.splice(skip, skip + take);\r\n        let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\r\n                //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\r\n                Map['ntransactionstatus'] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\r\n                //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest &&\r\n                    this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\r\n                Map[\"registrationsample\"] = cancelRejectSamplesList;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\r\n        //  const transList=transactionValidation?Object.keys(transactionValidation):[];\r\n        //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\r\n        //let check=true;\r\n        //  let validate=false;\r\n        let ntransstatus = [];\r\n\r\n        let translist = transactionValidation[ncontrolcode];\r\n        if (translist) {\r\n            transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\r\n                return ntransstatus.push(sam.ntransactionstatus)\r\n            });\r\n            const selectdata = selectedSample ? selectedSample : [];\r\n            let check = selectdata.map(sam1 => {\r\n                return ntransstatus.includes(sam1.ntransactionstatus)\r\n            })\r\n            if (check.includes(false)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 1,\r\n            npreregno: String(this.state.selectedRecord.npreregno)\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // console.log(\"edit1:\", this.props.Login.regRecordToEdit);\r\n        inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        Object.keys(this.state.selectedRecord).map(key => {\r\n            if (typeof this.state.selectedRecord[key] === \"object\") {\r\n                if (this.state.selectedRecord[key] === null) {\r\n                    return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n                }\r\n                else if (this.state.selectedRecord[key] instanceof Date) {\r\n                    return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n                }\r\n                else {\r\n                    return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n                }\r\n            }\r\n            else {\r\n                return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n            }\r\n        }\r\n        )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignforRegistration(inputParam, \"openModal\");\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getSampleTypeChange, getRegTypeChange , getRegSubTypeChange, \r\n     getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n     filterTransactionList, validateEsignCredential,\r\n     getSampleChildTabDetail, getTestChildTabDetail,\r\n      ReloadData, showUnderDevelopment,getPreviewTemplate,getChildValues\r\n})(injectIntl(Registration));"]},"metadata":{},"sourceType":"module"}