{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\registrationsubtype\\\\RegistrationSubType.jsx\";\nimport { faLanguage, faPencilAlt, faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Card, Col, FormGroup, FormLabel, Nav, Row } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { Affix } from 'rsuite';\nimport { updateStore, crudMaster, filterColumnData, selectRegistrationSubType, getVersionById, getRegistrationSubTypeMaster, getRegSubTypeDetails, getSeqNoFormats, getEditRegSubType, getRegistrationTypeBySampleType, getRegistrationSubTypeOnReload, validateEsignCredential, getVersionByReleaseNo } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles';\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\nimport AddSynonym from '../../../components/droparea/AddSynonym';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport AddSeqNoFormatPopup from './AddSeqNoFormatPopup';\nimport RegistrationSubTypeAccordion from './RegistrationSubTypeAccordion';\nimport FlowRenderer from '../../../components/flow-renderer/flow-renderer.component';\nimport AddSeqNoFormatRelease from './AddSeqNoFormatRelease';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass RegistrationSubType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.registrationSubTypeAccordion = verisonList => {\n      const actionParam = {\n        // nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\n        // nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode,\n        nregsubtypeversioncode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.nregsubtypeversioncode : -1,\n        napprovalconfigcode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.napprovalconfigcode : -1\n      };\n      const accordionMap = new Map();\n      verisonList.map(version => accordionMap.set(version.nregsubtypeversioncode, /*#__PURE__*/React.createElement(RegistrationSubTypeAccordion, {\n        version: version,\n        editVersionId: this.state.editVersionId,\n        deleteVersionId: this.state.deleteVersionId,\n        approveVersionId: this.state.approveVersionId,\n        editReleaseReferenceNo: this.state.editReleaseReferenceNo,\n        userRoleControlRights: this.state.userRoleControlRights,\n        actionParam: actionParam,\n        getVersionById: this.getVersionById,\n        getVersionByReleaseNo: this.getVersionByReleaseNo,\n        approvrVersion: this.doAction,\n        confirmDelete: this.confirmDelete,\n        viewFlow: this.showTransactionFlow // approvalConfig={this.props.Login.masterData.ApprovalConfig}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 62\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.filterComboChange = (comboData, name) => {\n      if (name === 'nsampletypecode') this.props.getRegistrationTypeBySampleType(comboData, this.props.Login.masterData, this.props.Login.userInfo, this.state.breadCrumbRegType);else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            showFilter: false,\n            selectedRegType: comboData,\n            reloadData: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } // this.setState({ selectedRegType: comboData })\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.selectedSampleType) {\n        this.reloadData(this.state.selectedSampleType, this.state.selectedRegType);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVALIABLE\"\n        }));\n      }\n    };\n\n    this.reloadData = (selectedSampleType, selectedRegType) => {\n      // this.searchRef.current.value = \"\";\n      this.props.Login.masterData.searchedData = undefined;\n\n      if (selectedSampleType !== undefined) {\n        this.props.getRegistrationSubTypeMaster(selectedSampleType, selectedRegType, this.props.Login.masterData, this.props.Login.userInfo, this.searchRef);\n      } else {\n        this.props.getRegistrationSubTypeOnReload(this.props.Login.userInfo, this.searchRef);\n      }\n    };\n\n    this.confirmDelete = (deleteId, methodURL, selectedRecord) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.doAction('delete', deleteId, methodURL, selectedRecord));\n    };\n\n    this.showTransactionFlow = version => {\n      const edges = [];\n      const nodes = []; //const version = this.props.Login.regSubTypeVersionFlow;\n\n      if (version) {\n        const activeStyle = {\n          background: '#49f29d',\n          color: '#000000',\n          border: '1px solid #222138',\n          width: 180\n        };\n        const inActiveStyle = {\n          background: '#D6D5E6',\n          color: '#333',\n          border: '1px solid #222138',\n          width: 180\n        };\n        nodes.push({\n          id: '1',\n          type: 'input',\n          data: {\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, this.props.intl.formatMessage({\n              id: \"IDS_REGISTRATION\"\n            }))\n          },\n          position: {\n            x: 250,\n            y: 0\n          },\n          style: activeStyle\n        }, {\n          id: '2',\n          data: {\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, this.props.intl.formatMessage({\n              id: \"IDS_JOBALLOCATION\"\n            }))\n          },\n          position: {\n            x: 50,\n            y: 100\n          },\n          style: version.jsondata[\"nneedjoballocation\"] ? activeStyle : inActiveStyle\n        }, {\n          id: '3',\n          data: {\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, \" \", this.props.intl.formatMessage({\n              id: \"IDS_MYJOBS\"\n            }), \" \")\n          },\n          position: {\n            x: 350,\n            y: 100\n          },\n          style: version.jsondata[\"nneedmyjob\"] ? activeStyle : inActiveStyle\n        }, {\n          id: '4',\n          data: {\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, \" \", this.props.intl.formatMessage({\n              id: \"IDS_WORKLIST\"\n            }), \" \")\n          },\n          position: {\n            x: 550,\n            y: 100\n          },\n          style: version.jsondata[\"nneedworklist\"] ? activeStyle : inActiveStyle\n        }, {\n          id: '5a',\n          position: {\n            x: 250,\n            y: 200\n          },\n          data: {\n            label: this.props.intl.formatMessage({\n              id: \"IDS_BATCHRUN\"\n            })\n          },\n          style: version.jsondata[\"nneedbatch\"] ? activeStyle : inActiveStyle\n        }, {\n          id: '5',\n          position: {\n            x: 250,\n            y: 300\n          },\n          data: {\n            label: this.props.intl.formatMessage({\n              id: \"IDS_RESULTENTRY\"\n            })\n          },\n          style: activeStyle\n        }, {\n          id: '6',\n          data: {\n            label: this.props.intl.formatMessage({\n              id: \"IDS_APPROVAL\"\n            })\n          },\n          position: {\n            x: 250,\n            y: 400\n          },\n          style: activeStyle\n        }, {\n          id: '7',\n          type: 'output',\n          data: {\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, \" \", this.props.intl.formatMessage({\n              id: \"IDS_RELEASE\"\n            }))\n          },\n          position: {\n            x: 250,\n            y: 500\n          },\n          style: activeStyle\n        });\n\n        if (version.jsondata[\"nneedjoballocation\"]) {\n          edges.push({\n            id: 'e1-2',\n            source: '1',\n            target: '2',\n            label: this.props.intl.formatMessage({\n              id: \"IDS_ALLOT\"\n            }),\n            animated: true\n          });\n\n          if (version.jsondata[\"nneedmyjob\"]) {\n            edges.push({\n              id: 'e2-3',\n              source: '2',\n              target: '3',\n              label: this.props.intl.formatMessage({\n                id: \"IDS_ACCEPT\"\n              }),\n              animated: true\n            });\n\n            if (version.jsondata[\"nneedbatch\"]) {\n              edges.push({\n                id: 'e3-5a',\n                source: '3',\n                target: '5a',\n                label: this.props.intl.formatMessage({\n                  id: \"IDS_RUNBATCH\"\n                }),\n                animated: true\n              });\n              edges.push({\n                id: 'e5a-5',\n                source: '5a',\n                target: '5',\n                label: this.props.intl.formatMessage({\n                  id: \"IDS_COMPLETE\"\n                }),\n                animated: true\n              });\n            } else {\n              edges.push({\n                id: 'e3-5',\n                source: '3',\n                target: '5',\n                label: this.props.intl.formatMessage({\n                  id: \"IDS_COMPLETE\"\n                }),\n                animated: true,\n                type: 'step'\n              });\n            }\n          } else {\n            if (version.jsondata[\"nneedworklist\"]) {\n              edges.push({\n                id: 'e2-4',\n                source: '2',\n                target: '4',\n                label: this.props.intl.formatMessage({\n                  id: \"IDS_DATAENTRY\"\n                }),\n                animated: true\n              });\n\n              if (version.jsondata[\"nneedbatch\"]) {\n                edges.push({\n                  id: 'e4-5a',\n                  source: '4',\n                  target: '5a',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_RUNBATCH\"\n                  }),\n                  animated: true\n                });\n                edges.push({\n                  id: 'e5a-5',\n                  source: '5a',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              } else {\n                edges.push({\n                  id: 'e4-5',\n                  source: '4',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              }\n            } else {\n              if (version.jsondata[\"nneedbatch\"]) {\n                edges.push({\n                  id: 'e2-5a',\n                  source: '2',\n                  target: '5a',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_RUNBATCH\"\n                  }),\n                  animated: true\n                });\n                edges.push({\n                  id: 'e5a-5',\n                  source: '5a',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              } else {\n                edges.push({\n                  id: 'e2-5',\n                  source: '2',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              }\n            }\n          }\n        } else {\n          if (version.jsondata[\"nneedmyjob\"]) {\n            edges.push({\n              id: 'e1-3',\n              source: '1',\n              target: '3',\n              label: this.props.intl.formatMessage({\n                id: \"IDS_ACCEPT\"\n              }),\n              animated: true\n            });\n\n            if (version.jsondata[\"nneedbatch\"]) {\n              edges.push({\n                id: 'e3-5a',\n                source: '3',\n                target: '5a',\n                label: this.props.intl.formatMessage({\n                  id: \"IDS_RUNBATCH\"\n                }),\n                animated: true\n              });\n              edges.push({\n                id: 'e5a-5',\n                source: '5a',\n                target: '5',\n                label: this.props.intl.formatMessage({\n                  id: \"IDS_COMPLETE\"\n                }),\n                animated: true\n              });\n            } else {\n              edges.push({\n                id: 'e3-5',\n                source: '3',\n                target: '5',\n                label: this.props.intl.formatMessage({\n                  id: \"IDS_COMPLETE\"\n                }),\n                animated: true\n              });\n            }\n          } else {\n            if (version.jsondata[\"nneedworklist\"]) {\n              edges.push({\n                id: 'e1-4',\n                source: '1',\n                target: '4',\n                //label: this.props.intl.formatMessage({ id: \"IDS_DATAENTRY\" }), \n                label: \"\",\n                animated: true\n              });\n\n              if (version.jsondata[\"nneedbatch\"]) {\n                edges.push({\n                  id: 'e4-5a',\n                  source: '4',\n                  target: '5a',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_RUNBATCH\"\n                  }),\n                  animated: true\n                });\n                edges.push({\n                  id: 'e5a-5',\n                  source: '5a',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              } else {\n                edges.push({\n                  id: 'e4-5',\n                  source: '4',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              }\n            } else {\n              if (version.jsondata[\"nneedbatch\"]) {\n                edges.push({\n                  id: 'e1-5a',\n                  source: '1',\n                  target: '5a',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_RUNBATCH\"\n                  }),\n                  animated: true\n                });\n                edges.push({\n                  id: 'e5a-5',\n                  source: '5a',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              } else {\n                edges.push({\n                  id: 'e1-5',\n                  source: '1',\n                  target: '5',\n                  label: this.props.intl.formatMessage({\n                    id: \"IDS_COMPLETE\"\n                  }),\n                  animated: true\n                });\n              }\n            }\n          }\n        }\n\n        edges.push({\n          id: 'e5-6',\n          source: '5',\n          target: '6',\n          label: this.props.intl.formatMessage({\n            id: \"IDS_APPROVALFLOW\"\n          }),\n          animated: true\n        }, {\n          id: 'e6-7',\n          source: '6',\n          target: '7',\n          label: this.props.intl.formatMessage({\n            id: \"IDS_RELEASE\"\n          }),\n          animated: true\n        }); //console.log(\"seq:\", this.props.Login.screenName);\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          screenName: \"IDS_REGISTRATIONFLOW\",\n          regSubTypeVersionFlow: {\n            nodes,\n            edges\n          },\n          operation: \"view\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openModal = (screenName, ncontrolcode) => {\n      if (this.state.breadCrumbData[1] && this.state.breadCrumbData[1].item && this.state.breadCrumbData[1].item.value) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: true,\n            operation: \"create\",\n            screenName,\n            ncontrolcode\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTREGTYPE\"\n        }));\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.state.showSynonym) {\n        this.setState({\n          showSynonym: false\n        });\n        return null;\n      }\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          openChildModal = false;\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        openChildModal = false;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null,\n          selectedFieldRecord: {},\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\") {\n        this.saveRegSubType(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_RELEASEARNO\") {\n        this.saveReleaseArNoversion(saveType, formRef);\n      } else {\n        this.saveVersion(saveType, formRef);\n      }\n    };\n\n    this.saveRegSubType = (saveType, formRef) => {\n      //add \n      let registrationSubType = {\n        nregtypecode: this.state.breadCrumbData[1].item.value,\n        jsondata: {\n          \"sregsubtypename\": this.state.selectedRecord.sregsubtypename,\n          // \"sregsubtypename(en-US)\": this.state.selectedRecord.sregsubtypename['en-US'],\n          // \"sregsubtypename(ru-RU)\": this.state.selectedRecord.sregsubtypename['ru-RU'],\n          // \"sregsubtypename(tg-TG)\": this.state.selectedRecord.sregsubtypename['tg-TG'],\n          \"sdescription\": this.state.selectedRecord.sdescription\n        }\n      };\n      const postParam = {\n        inputListName: \"RegistrationSubType\",\n        selectedObject: \"selectedRegistrationSubType\",\n        primaryKeyField: \"nregsubtypecode\",\n        fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nregsubtypecode;\n        registrationSubType = { ...registrationSubType,\n          nregsubtypecode: selectedId\n        };\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: 'RegistrationSubType',\n        postParam,\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          registrationsubtype: registrationSubType\n        },\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation: this.props.Login.operation,\n            openModal: true,\n            screenName: \"IDS_REGISTRATIONSUBTYPE\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.saveVersion = (saveType, formRef) => {\n      let version = {\n        napprovalconfigcode: this.props.Login.masterData.selectedRegistrationSubType.napprovalconfigcode,\n        nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\n        jsondata: { ...this.state.selectedRecord,\n          nresetduration: 1,\n\n          /*ALPD-4135-Vignesh R--The system will allow the authorized \r\n          user to enter results for the selected tests without initiate action.*/\n          nneedtestinitiate: this.state.selectedRecord[\"nneedtestinitiate\"] ? true : false,\n          //  nneedtestinitiate:true,\n          // nneedscheduler:false,\n          sversiondesc: '-',\n          nversionno: -1\n        },\n        jsonuidata: {\n          exampleformat: this.state.selectedRecord[\"exampleformat\"] ? this.state.selectedRecord[\"exampleformat\"] : \"-\",\n          nisnewformat: this.state.selectedRecord[\"nisnewformat\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          nneedjoballocation: this.state.selectedRecord[\"nneedjoballocation\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          nneedmyjob: this.state.selectedRecord[\"nneedmyjob\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          nneedsampledby: this.state.selectedRecord[\"nneedsampledby\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          nneedscheduler: this.state.selectedRecord[\"nneedscheduler\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          nneedsubsample: this.state.selectedRecord[\"nneedsubsample\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          nneedtestinitiate: this.state.selectedRecord[\"nneedtestinitiate\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          // nneedtestinitiate:  this.props.intl.formatMessage({ id: \"IDS_YES\" }) ,\n          nneedworklist: this.state.selectedRecord[\"nneedworklist\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          nneedbatch: this.state.selectedRecord[\"nneedbatch\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          }),\n          seqnolength: this.state.selectedRecord[\"seqnolength\"] ? this.state.selectedRecord[\"seqnolength\"] : \"-\",\n          splaintext: this.state.selectedRecord[\"splaintext\"] ? this.state.selectedRecord[\"splaintext\"] : \"-\",\n          ssampleformat: this.state.selectedRecord[\"ssampleformat\"] ? this.state.selectedRecord[\"ssampleformat\"] : \"-\",\n          nresetduration: this.state.selectedRecord[\"nperiodcode\"] ? this.state.selectedRecord[\"nperiodcode\"].label : \"-\",\n          ntransactionstatus: transactionStatus.DRAFT,\n          stransdisplaystatus: this.props.intl.formatMessage({\n            id: \"IDS_DRAFT\"\n          }),\n          sversiondesc: '-',\n          nversionno: -1,\n          sregsubtypename: this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename,\n          nneedsitewisearno: this.state.selectedRecord[\"nneedsitewisearno\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          })\n        },\n        nperiodcode: this.state.selectedRecord.nperiodcode ? this.state.selectedRecord.nperiodcode.value : 4,\n        ntransactionstatus: transactionStatus.DRAFT,\n        nsitecode: this.props.Login.userInfo.nmastersitecode,\n        nstatus: transactionStatus.ACTIVE\n      };\n      let selectedId = null;\n      let operation = 'create';\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        operation = 'update';\n        selectedId = this.state.selectedRecord.nregsubtypeversioncode;\n        version = { ...version,\n          nregsubtypeversioncode: selectedId\n        };\n      }\n\n      const postParam = {\n        inputListName: \"RegistrationSubType\",\n        selectedObject: \"selectedRegistrationSubType\",\n        primaryKeyField: \"nregsubtypecode\",\n        fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: 'Version',\n        postParam,\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          version: version,\n          isChild: true\n        },\n        operation,\n        saveType,\n        formRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation,\n            openChildModal: true //screenName: \"IDS_REGISTRATIONFLOW\"\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.saveReleaseArNoversion = (saveType, formRef) => {\n      let version = {\n        napprovalconfigcode: this.props.Login.masterData.selectedRegistrationSubType.napprovalconfigcode,\n        nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\n        jsondata: { ...this.state.selectedRecord,\n          nresetduration: 1,\n\n          /*ALPD-4135-Vignesh R--The system will allow the authorized \r\n                      user to enter results for the selected tests without initiate action.*/\n          nneedtestinitiate: this.state.selectedRecord[\"nneedtestinitiate\"] ? true : false,\n          //  nneedtestinitiate:true,\n          // nneedscheduler:false,\n          sversiondesc: '-',\n          nversionno: -1\n        },\n        jsonuidata: {\n          sreleaseexampleformat: this.state.selectedRecord[\"sreleaseexampleformat\"] ? this.state.selectedRecord[\"sreleaseexampleformat\"] : \"-\",\n          seqnolength: this.state.selectedRecord[\"seqnolength\"] ? this.state.selectedRecord[\"seqnolength\"] : \"-\",\n          splaintext: this.state.selectedRecord[\"splaintext\"] ? this.state.selectedRecord[\"splaintext\"] : \"-\",\n          sreleaseformat: this.state.selectedRecord[\"sreleaseformat\"] ? this.state.selectedRecord[\"sreleaseformat\"] : \"-\",\n          nresetduration: this.state.selectedRecord[\"nperiodcode\"] ? this.state.selectedRecord[\"nperiodcode\"].label : \"-\",\n          ntransactionstatus: transactionStatus.DRAFT,\n          stransdisplaystatus: this.props.intl.formatMessage({\n            id: \"IDS_DRAFT\"\n          }),\n          sversiondesc: '-',\n          nversionno: -1,\n          sregsubtypename: this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename,\n          nneedsitewisearnorelease: this.state.selectedRecord[\"nneedsitewisearnorelease\"] ? this.props.intl.formatMessage({\n            id: \"IDS_YES\"\n          }) : this.props.intl.formatMessage({\n            id: \"IDS_NO\"\n          })\n        },\n        nperiodcode: this.state.selectedRecord.nperiodcode ? this.state.selectedRecord.nperiodcode.value : 4,\n        ntransactionstatus: transactionStatus.DRAFT,\n        nsitecode: this.props.Login.userInfo.nmastersitecode,\n        nstatus: transactionStatus.ACTIVE\n      };\n      let selectedId = null;\n      let operation = 'create';\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        operation = 'update';\n        selectedId = this.state.selectedRecord.nregsubtypeversionreleasecode;\n        version = { ...version,\n          nregsubtypeversionreleasecode: selectedId\n        };\n      }\n\n      const postParam = {\n        inputListName: \"RegistrationSubType\",\n        selectedObject: \"selectedRegistrationSubType\",\n        primaryKeyField: \"nregsubtypecode\",\n        fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n        },\n        masterData: this.props.Login.masterData\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: 'ReleaseArNoVersion',\n        postParam,\n        searchRef: this.searchRef,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          version: version,\n          isChild: true\n        },\n        operation,\n        saveType,\n        formRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType,\n            operation,\n            openChildModal: true //screenName: \"IDS_REGISTRATIONFLOW\"\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n      }\n    };\n\n    this.getVersionById = ncontrolcode => {\n      this.props.getVersionById(this.props.Login.masterData.selectedVersion.nregsubtypeversioncode, this.props.Login.userInfo, ncontrolcode);\n    };\n\n    this.getVersionByReleaseNo = ncontrolcode => {\n      this.props.getVersionByReleaseNo(this.props.Login.masterData.selectedVersion.nregsubtypeversionreleasecode !== undefined ? this.props.Login.masterData.selectedVersion.nregsubtypeversionreleasecode : this.props.Login.masterData.selectedVersion.nregsubtypeversioncode, this.props.Login.userInfo, ncontrolcode);\n    };\n\n    this.doAction = (operation, controlCode, methodURL, selectedRecord) => {\n      let arrayObject = {};\n      let selectedValue = { ...selectedRecord,\n        nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode\n      };\n      let modal = methodURL != \"Version\" ? \"openModal\" : \"openChildModal\";\n\n      if (operation === \"approve\") {\n        const nregtypecode = this.props.Login.masterData.selectedRegistrationSubType.nregtypecode;\n        const nregsubtypecode = this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode;\n        arrayObject = {\n          \"nregtypecode\": nregtypecode,\n          \"nregsubtypecode\": nregsubtypecode\n        };\n      }\n\n      const postParam = {\n        inputListName: \"RegistrationSubType\",\n        selectedObject: \"selectedRegistrationSubType\",\n        primaryKeyField: \"nregsubtypecode\",\n        fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n        },\n        primaryKeyValue: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\n        masterData: this.props.Login.masterData\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: methodURL,\n        postParam: methodURL != \"Version\" || methodURL == \"Version\" && operation == \"approve\" ? postParam : undefined,\n        searchRef: this.searchRef,\n        inputData: {\n          [methodURL.toLowerCase()]: { ...selectedValue,\n            ...arrayObject\n          },\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation,\n        displayName: this.props.Login.inputParam.displayName,\n        isChild: methodURL != \"Version\" ? undefined : true,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            [modal]: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, modal);\n      }\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked;\n\n        if (this.props.Login.screenName === \"IDS_RELEASEARNO\") {\n          selectedRecord[\"formatArray\"] = [];\n          selectedRecord[\"sreleaseexampleformat\"] = \"\";\n          selectedRecord[\"sreleaseformat\"] = \"\";\n          selectedRecord[\"seqnolength\"] = 4;\n        }\n\n        if (event.target.name === 'nisnewformat') {\n          selectedRecord[\"formatArray\"] = [];\n          selectedRecord[\"ssampleformat\"] = \"\";\n          selectedRecord[\"exampleformat\"] = \"\";\n          selectedRecord[\"seqnolength\"] = 4;\n        }\n\n        if (event.target.name === 'nneedsitewisearno') {\n          selectedRecord[\"formatArray\"] = [];\n          selectedRecord[\"ssampleformat\"] = \"\";\n          selectedRecord[\"exampleformat\"] = \"\";\n        }\n\n        if (selectedRecord[\"nneedworklist\"]) {\n          if (selectedRecord[\"nneedworklist\"] === true) {\n            delete selectedRecord[\"nneedmyjob\"]; //delete selectedRecord[\"nneedjoballocation\"]\n          }\n        }\n      } else {\n        if (name === 'synonym') {\n          selectedRecord['sregsubtypename'] = { ...selectedRecord['sregsubtypename'],\n            [event.target.name]: event.target.value\n          };\n        } else if (name === 'sregsubtypename') {\n          const langArray = this.props.Login.languageList;\n          const langDataObject = {};\n          langArray.map(item => langDataObject[item.value] = event.target.value);\n          selectedRecord['sregsubtypename'] = { ...selectedRecord['sregsubtypename'],\n            ...langDataObject\n          };\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      let modal = \"openChildModal\";\n\n      if (this.props.Login.screenData.inputParam.methodUrl !== \"ReleaseArNoVersion\") {\n        modal = this.props.Login.screenData.inputParam.methodUrl != \"Version\" ? \"openModal\" : \"openChildModal\";\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, modal);\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (value === 0 || value === 0.0) {\n        selectedRecord[name] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (name === 'seqnolength') {\n          let str = '{9999}';\n          str = str.substring(1, str.length - 4);\n          str = str.padStart(value, 9);\n          selectedRecord.sseqno = '{' + str + '}';\n        }\n\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onComboChange = (comboData, name) => {\n      this.setState({\n        selectedRecord: { ...this.state.selectedRecord,\n          [name]: comboData\n        }\n      });\n    };\n\n    this.onClickBackspace = () => {\n      let {\n        selectedRecord\n      } = this.state;\n      let formatArray = selectedRecord.formatArray || [];\n      formatArray.pop();\n      let formatString = '';\n      formatArray.map(comp => formatString += comp);\n      selectedRecord.formatArray = formatArray;\n\n      if (this.props.Login.screenName === \"IDS_RELEASEARNO\") {\n        selectedRecord.sreleaseformat = formatString;\n        selectedRecord.sreleaseexampleformat = this.replaceFormat(formatString);\n      } else {\n        selectedRecord.ssampleformat = formatString;\n        selectedRecord.exampleformat = this.replaceFormat(formatString);\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onClickClear = () => {\n      let {\n        selectedRecord\n      } = this.state;\n\n      if (this.props.Login.screenName === \"IDS_RELEASEARNO\") {\n        selectedRecord.formatArray = [];\n        selectedRecord.sreleaseformat = \"\";\n        selectedRecord.sreleaseexampleformat = \"\";\n      } else {\n        //ALPD-3835\n        if (selectedRecord) {\n          selectedRecord.formatArray = [];\n          selectedRecord.ssampleformat = \"\";\n          selectedRecord.exampleformat = \"\";\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.replaceFormat = formatString => {\n      const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n      const date = new Date();\n      let replacedString = formatString;\n      let seqno = \"1\";\n\n      while (replacedString.includes('}')) {\n        let comp = replacedString.substring(replacedString.indexOf('{'), replacedString.indexOf('}') + 1);\n\n        switch (comp) {\n          case '{yyyy}':\n            replacedString = replacedString.replace('{yyyy}', date.getFullYear());\n            break;\n\n          case '{yy}':\n            replacedString = replacedString.replace('{yy}', date.getFullYear().toString().substring(2, 4));\n            break;\n\n          case '{MM}':\n            replacedString = replacedString.replace('{MM}', (date.getMonth() + 1).toString().padStart(2, \"0\"));\n            break;\n\n          case '{MMM}':\n            replacedString = replacedString.replace('{MMM}', month[date.getMonth()]);\n            break;\n\n          case '{DD}':\n            replacedString = replacedString.replace('{DD}', date.getDate().toString().padStart(2, \"0\"));\n            break;\n\n          case '{XXXXX}':\n            replacedString = replacedString.replace('{XXXXX}', this.props.Login.userInfo.ssitecode);\n            break;\n\n          case this.state.selectedRecord && this.state.selectedRecord.sseqno || '{9999}':\n            seqno = seqno.padStart(this.state.selectedRecord && this.state.selectedRecord.seqnolength || 4, \"0\");\n            replacedString = replacedString.replace(this.state.selectedRecord && this.state.selectedRecord.sseqno || '{9999}', seqno);\n            break;\n\n          default:\n            if (comp.includes('9')) {\n              seqno = seqno.padStart(comp.length - 2, \"0\");\n              replacedString = replacedString.replace(comp, seqno);\n            }\n\n            break;\n        }\n      }\n\n      return replacedString;\n    };\n\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      addVersionId: -1,\n      editVersionId: -1,\n      deleteVersionId: -1,\n      approveVersionId: -1,\n      addRegistrationSubTypeId: -1,\n      editRegistrationSubTypeId: -1,\n      deleteRegistrationSubTypeId: -1,\n      selectedRecord: {},\n      sampleTypeOptions: [],\n      selectedSampleType: {},\n      breadCrumbSampleType: {},\n      selectedRegType: {},\n      breadCrumbRegType: {},\n      breadCrumbData: [],\n      design: [],\n      comboComponents: [],\n      withoutCombocomponent: [],\n      sidebarview: false\n    };\n    this.regSubTypeMandatoryFields = [{\n      \"idsName\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"dataField\": \"sregsubtypename\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\",\n      \"ismultilingual\": \"true\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.masterStatus\n      }));\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const filterParam = {\n      inputListName: \"RegistrationSubType\",\n      selectedObject: \"selectedRegistrationSubType\",\n      primaryKeyField: \"nregsubtypecode\",\n      fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"realSampleType\", \"SampleTypes\", \"realRegtype\", \"RegistrationTypes\"],\n      searchFieldList: [\"sregsubtypename\", \"sdescription\"]\n    };\n    this.versionMandatoryFields = [{\n      \"idsName\": \"IDS_FORMAT\",\n      \"dataField\": \"ssampleformat\",\n      \"mandatoryLabel\": \"IDS_SELECT\"\n    } //{ \"idsName\": \"IDS_SEQUENCENOLENGTH\", \"dataField\":\"seqnolength\", \"mandatoryLabel\": \"IDS_ENTER\" }\n    // { \"idsName\": \"IDS_SEQUENCENOLENGTH\", \"dataField\": \"seqnolength\", \"mandatoryLabel\": \"IDS_ENTER\" },\n    ];\n    const deleteParam = this.props.Login.masterData.selectedRegistrationSubType ? {\n      nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\n      nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode\n    } : {};\n\n    if (this.state.selectedRecord && this.state.selectedRecord.nisnewformat) {\n      // this.versionMandatoryFields.push({ \"idsName\": \"IDS_RESETDURATION\", \"dataField\": \"nresetduration\", \"mandatoryLabel\": \"IDS_ENTER\" })\n      this.versionMandatoryFields.push({\n        \"idsName\": \"IDS_RESETDURATION\",\n        \"dataField\": \"nperiodcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\"\n      });\n      this.versionMandatoryFields.push({\n        \"idsName\": \"IDS_SEQUENCENOLENGTH\",\n        \"dataField\": \"seqnolength\",\n        \"mandatoryLabel\": \"IDS_ENTER\"\n      });\n    }\n\n    this.versionReleaseArNoManFields = [{\n      \"idsName\": \"IDS_FORMAT\",\n      \"dataField\": \"sreleaseformat\",\n      \"mandatoryLabel\": \"IDS_SELECT\"\n    }]; // console.log(\"this.props.Login:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, this.state.breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.state.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      filterColumnData: this.props.filterColumnData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_REGISTRATIONSUBTYPE\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationSubType || [],\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      getMasterDetail: regType => this.props.selectRegistrationSubType(regType, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.selectedRegistrationSubType,\n      primaryKeyField: \"nregsubtypecode\",\n      mainField: \"sregsubtypename\" // firstField=\"stransdisplaystatus\"\n      // secondField=\"stransdisplaystatus\"\n      ,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: this.state.addRegistrationSubTypeId,\n      filterParam: filterParam,\n      hidePaging: false,\n      searchRef: this.searchRef,\n      reloadData: () => this.reloadData(this.state.selectedSampleType, this.state.selectedRegType),\n      openModal: () => this.openModal(\"IDS_REGISTRATIONSUBTYPE\", this.state.addRegistrationSubTypeId),\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_SAMPLETYPEFILTER\": /*#__PURE__*/React.createElement(Row, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 45\n          }\n        }, /*#__PURE__*/React.createElement(Col, {\n          md: 12,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nsampletypecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_SAMPLETYPE\"\n          }),\n          isSearchable: false,\n          placeholder: \"Please Select...\",\n          options: this.state.sampleTypeOptions,\n          value: this.state.selectedSampleType ? this.state.selectedSampleType : \"\",\n          onChange: value => this.filterComboChange(value, 'nsampletypecode'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 53\n          }\n        }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n          name: \"nregtypecode\",\n          formLabel: this.props.intl.formatMessage({\n            id: \"IDS_REGTYPE\"\n          }),\n          isSearchable: false,\n          placeholder: \"Please Select...\",\n          options: this.state.regTypeOptions,\n          value: this.state.selectedRegType || \"\",\n          onChange: value => this.filterComboChange(value, 'nregtypecode'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 53\n          }\n        })))\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 41\n      }\n    }))), this.props.Login.masterData.selectedRegistrationSubType ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editInstrument\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.editRegistrationSubTypeId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      onClick: e => this.props.getEditRegSubType(this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode, this.props.Login.userInfo, this.state.editRegistrationSubTypeId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteInstrument\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //  data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(this.state.deleteRegistrationSubTypeId) === -1,\n      onClick: () => this.confirmDelete(this.state.deleteRegistrationSubTypeId, 'RegistrationSubType', deleteParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.selectedRegistrationSubType.jsondata.sdescription || '-')))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.state.userRoleControlRights.indexOf(this.state.addVersionId) === -1,\n      onClick: () => this.props.getSeqNoFormats({\n        userInfo: this.props.Login.userInfo,\n        ncontrolcode: this.state.addVersionId\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 61\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      defaultMessage: \"Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 61\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.versions && this.props.Login.masterData.versions.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"FormatVersion\",\n      titlePrefix: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }) + \" : \",\n      isJSONdata: true,\n      jsonFieldName: 'jsondata',\n      accordionTitle: 'sversiondesc',\n      accordionComponent: this.registrationSubTypeAccordion(this.props.Login.masterData.versions),\n      inputParam: {\n        masterData: this.props.Login.masterData,\n        userInfo: this.props.Login.userInfo\n      },\n      accordionClick: this.props.getRegSubTypeDetails,\n      accordionPrimaryKey: \"nregsubtypeversioncode\",\n      accordionObjectName: \"version\",\n      selectedKey: this.props.Login.masterData.selectedVersion.nregsubtypeversioncode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 57\n      }\n    }) : \"\"))))) : \"\"))), this.props.Login.openModal || this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal //size={this.props.Login.screenName === \"Version\" ? \"xl\" : \"lg\"}\n    , {\n      size: this.props.Login.screenName === \"Version\" && !this.props.Login.loadEsign || this.props.Login.screenName === \"IDS_RELEASEARNO\" && !this.props.Login.loadEsign ? \"xl\" : \"lg\",\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\" ? this.props.intl.formatMessage({\n        id: \"IDS_REGISTRATIONSUBTYPE\"\n      }) : this.props.Login.screenName === \"IDS_REGISTRATIONFLOW\" ? this.props.intl.formatMessage({\n        id: \"IDS_REGISTRATIONFLOW\"\n      }) : this.props.Login.screenName === \"IDS_RELEASEARNO\" ? this.props.intl.formatMessage({\n        id: \"IDS_RELEASEARNO\"\n      }) : this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      closeModal: this.closeModal,\n      show: this.props.Login.openModal || this.props.Login.openChildModal,\n      inputParam: this.props.Login.inputParam,\n      noSave: this.props.Login.screenName === \"IDS_REGISTRATIONFLOW\" ? true : false,\n      esign: this.props.Login.loadEsign,\n      hideSave: this.state.showSynonym,\n      closeLabel: this.state.showSynonym ? \"IDS_CLOSE\" : undefined,\n      validateEsign: this.validateEsign,\n      mandatoryFields: this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\" ? this.regSubTypeMandatoryFields : this.props.Login.screenName === \"IDS_RELEASEARNO\" ? this.versionReleaseArNoManFields : this.versionMandatoryFields,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: event => this.onInputOnChange(event),\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 29\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"sregsubtypename\",\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 11,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: this.props.Login.language,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONSUBTYPE\"\n        }),\n        type: \"text\",\n        value: this.state.selectedRecord.sregsubtypename ? this.state.selectedRecord.sregsubtypename[this.props.Login.language] : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: 100,\n        onChange: event => this.onInputOnChange(event, 'sregsubtypename'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 1,\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addsynonym\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSYNONYMN\"\n        }) // data-for=\"tooltip_list_wrap\"\n        // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\n        ,\n        className: \"btn btn-circle outline-grey mr-2\",\n        onClick: e => this.setState({\n          showSynonym: true\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faLanguage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 49\n        }\n      }))), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sdescription\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        type: \"text\",\n        value: this.state.selectedRecord.sdescription || \"\",\n        isMandatory: false,\n        required: true,\n        maxLength: 255,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 45\n        }\n      }))) : this.props.Login.screenName === \"IDS_REGISTRATIONFLOW\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 45\n        }\n      }, this.props.Login.regSubTypeVersionFlow && /*#__PURE__*/React.createElement(FlowRenderer, {\n        initialNodes: this.props.Login.regSubTypeVersionFlow.nodes || [],\n        initialEdges: this.props.Login.regSubTypeVersionFlow.edges || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 49\n        }\n      }))) : this.props.Login.screenName === \"IDS_RELEASEARNO\" ? /*#__PURE__*/React.createElement(AddSeqNoFormatRelease, {\n        selectedRecord: this.state.selectedRecord,\n        sreleaseexistingFormats: this.props.Login.sreleaseexistingFormats,\n        sitewiseexistingFormatsRelease: this.props.Login.sitewiseexistingFormatsRelease,\n        periodList: this.props.Login.periodList,\n        onComboChange: this.onComboChange,\n        onDrop: this.onDrop.bind(this),\n        onClickBackspace: this.onClickBackspace,\n        onClickClear: this.onClickClear,\n        userInfo: this.props.Login.userInfo,\n        settings: this.props.Login.settings,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 41\n        }\n      }) : /*#__PURE__*/React.createElement(AddSeqNoFormatPopup, {\n        selectedRecord: this.state.selectedRecord,\n        existingFormats: this.props.Login.existingFormats,\n        sitewiseexistingFormats: this.props.Login.sitewiseexistingFormats,\n        periodList: this.props.Login.periodList,\n        onComboChange: this.onComboChange,\n        onDrop: this.onDrop.bind(this),\n        onClickBackspace: this.onClickBackspace,\n        onClickClear: this.onClickClear,\n        userInfo: this.props.Login.userInfo,\n        settings: this.props.Login.settings,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 42\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      userRoleControlRights,\n      controlMap,\n      addVersionId,\n      editVersionId,\n      deleteVersionId,\n      approveVersionId,\n      addRegistrationSubTypeId,\n      editRegistrationSubTypeId,\n      deleteRegistrationSubTypeId,\n      breadCrumbSampleType,\n      breadCrumbRegType,\n      sampleTypeOptions,\n      regTypeOptions,\n      breadCrumbData,\n      selectedSampleType,\n      selectedRegType,\n      selectedRecord,\n      comboComponents,\n      withoutCombocomponent,\n      editReleaseReferenceNo\n    } = this.state;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      updateState = true;\n      addVersionId = controlMap.has(\"AddSeqNoFormatVersion\") && controlMap.get(\"AddSeqNoFormatVersion\").ncontrolcode;\n      editVersionId = controlMap.has(\"EditSeqNoFormatVersion\") && controlMap.get(\"EditSeqNoFormatVersion\").ncontrolcode;\n      deleteVersionId = controlMap.has(\"DeleteSeqNoFormatVersion\") && controlMap.get(\"DeleteSeqNoFormatVersion\").ncontrolcode;\n      approveVersionId = controlMap.has(\"ApproveSeqNoFormatVersion\") && controlMap.get(\"ApproveSeqNoFormatVersion\").ncontrolcode;\n      addRegistrationSubTypeId = controlMap.has(\"AddRegistrationSubType\") && controlMap.get(\"AddRegistrationSubType\").ncontrolcode;\n      editRegistrationSubTypeId = controlMap.has(\"EditRegistrationSubType\") && controlMap.get(\"EditRegistrationSubType\").ncontrolcode;\n      deleteRegistrationSubTypeId = controlMap.has(\"DeleteRegistrationSubType\") && controlMap.get(\"DeleteRegistrationSubType\").ncontrolcode;\n      editReleaseReferenceNo = controlMap.has(\"EditReleaseReferenceNo\") && controlMap.get(\"EditReleaseReferenceNo\").ncontrolcode;\n      sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\");\n      selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\n      regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\");\n      selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\n      breadCrumbData = [];\n      breadCrumbSampleType = sampleTypeOptions[0] || {};\n      breadCrumbRegType = regTypeOptions[0] || {};\n      sampleTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": breadCrumbSampleType.label,\n        \"item\": sampleTypeOptions\n      });\n      regTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": breadCrumbRegType.label,\n        \"item\": breadCrumbRegType\n      });\n      updateState = true;\n    }\n\n    if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\n      breadCrumbData = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": selectedSampleType.label,\n        \"item\": selectedSampleType\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": selectedRegType.label,\n        \"item\": selectedRegType\n      }];\n      breadCrumbSampleType = this.props.Login.realSampleType;\n      breadCrumbRegType = this.props.Login.realRegtype;\n      updateState = true;\n    }\n\n    if (this.props.Login.realRegtype !== previousProps.Login.realRegtype) {\n      breadCrumbSampleType = this.props.Login.realSampleType || breadCrumbSampleType;\n      breadCrumbRegType = this.props.Login.realRegtype;\n      breadCrumbData = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": breadCrumbSampleType.label,\n        \"item\": breadCrumbSampleType\n      }, {\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": breadCrumbRegType.label,\n        \"item\": breadCrumbRegType\n      }];\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedSampleType !== previousProps.Login.selectedSampleType) {\n      selectedSampleType = this.props.Login.selectedSampleType;\n      regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\");\n      selectedRegType = regTypeOptions[0];\n      updateState = true;\n    }\n\n    if (this.props.Login.reloadData && this.props.Login.reloadData !== previousProps.Login.reloadData) {\n      sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsampletypecode', \"ascending\").get(\"OptionList\");\n      selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\n      regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\");\n      selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\n      breadCrumbData = [];\n      breadCrumbSampleType = sampleTypeOptions[0] || {};\n      breadCrumbRegType = regTypeOptions[0] || {};\n      sampleTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": breadCrumbSampleType.label,\n        \"item\": sampleTypeOptions\n      });\n      regTypeOptions.length > 0 && breadCrumbData.push({\n        \"label\": \"IDS_REGTYPE\",\n        \"value\": breadCrumbRegType.label,\n        \"item\": breadCrumbRegType\n      });\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedRegType !== previousProps.Login.selectedRegType) {\n      selectedRegType = this.props.Login.selectedRegType;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (updateState) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        addVersionId,\n        editVersionId,\n        deleteVersionId,\n        approveVersionId,\n        addRegistrationSubTypeId,\n        editRegistrationSubTypeId,\n        deleteRegistrationSubTypeId,\n        sampleTypeOptions,\n        regTypeOptions,\n        breadCrumbData,\n        selectedSampleType,\n        selectedRegType,\n        selectedRecord,\n        comboComponents,\n        withoutCombocomponent,\n        breadCrumbSampleType,\n        breadCrumbRegType,\n        editReleaseReferenceNo\n      });\n    }\n  }\n\n  onDrop(data) {\n    // if (data.formatcomponents === \"\") {\n    // } else {\n    let selectedRecord = {};\n\n    if (this.state.selectedRecord !== undefined) {\n      selectedRecord = JSON.parse(JSON.stringify(this.state.selectedRecord)); // let formatArray = selectedRecord.formatArray || []\n      // formatArray.push(data.formatcomponents)\n      // let formatString = '';\n      // formatArray.map(comp => formatString += comp)\n      // selectedRecord.formatArray = formatArray\n      // selectedRecord.ssampleformat = formatString;\n      // selectedRecord.exampleformat = this.replaceFormat(formatString)\n      // if (selectedRecord.ssampleformat.length < 30) {\n      //     this.setState({ selectedRecord });\n      // } else {\n      //     toast.info(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXCHARS\" }));\n      // }\n      // }\n    }\n\n    let formatArray = selectedRecord && selectedRecord.formatArray !== undefined ? selectedRecord.formatArray : [];\n    formatArray.push(data.formatcomponents);\n    let formatString = '';\n    formatArray.map(comp => formatString += comp);\n    selectedRecord.formatArray = formatArray;\n\n    if (this.props.Login.screenName === \"IDS_RELEASEARNO\") {\n      selectedRecord.sreleaseformat = formatString;\n      selectedRecord.sreleaseexampleformat = this.replaceFormat(formatString); //ALPD-534\n\n      if (selectedRecord.sreleaseformat.replaceAll(\"{\", \"\").replaceAll(\"}\", \"\").length <= 40) {\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_EXCEEDSMAXCHARS\"\n        }));\n      }\n    } else {\n      selectedRecord.ssampleformat = formatString;\n      selectedRecord.exampleformat = this.replaceFormat(formatString); //ALPD-534\n\n      if (selectedRecord.ssampleformat.replaceAll(\"{\", \"\").replaceAll(\"}\", \"\").length <= 40) {\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_EXCEEDSMAXCHARS\"\n        }));\n      }\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getRegistrationSubTypeMaster,\n  filterColumnData,\n  getRegSubTypeDetails,\n  getSeqNoFormats,\n  selectRegistrationSubType,\n  getEditRegSubType,\n  getVersionById,\n  getRegistrationTypeBySampleType,\n  getRegistrationSubTypeOnReload,\n  validateEsignCredential,\n  getVersionByReleaseNo\n})(injectIntl(RegistrationSubType));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/dynamicpreregdesign/registrationsubtype/RegistrationSubType.jsx"],"names":["faLanguage","faPencilAlt","faPlus","faTrashAlt","FontAwesomeIcon","React","Card","Col","FormGroup","FormLabel","Nav","Row","FormattedMessage","injectIntl","connect","toast","Affix","updateStore","crudMaster","filterColumnData","selectRegistrationSubType","getVersionById","getRegistrationSubTypeMaster","getRegSubTypeDetails","getSeqNoFormats","getEditRegSubType","getRegistrationTypeBySampleType","getRegistrationSubTypeOnReload","validateEsignCredential","getVersionByReleaseNo","DEFAULT_RETURN","ContentPanel","ReadOnlyText","BreadcrumbComponent","constructOptionList","getControlMap","showEsign","ConfirmMessage","CustomAccordion","AddSynonym","transactionStatus","FormInput","FormSelectSearch","FormTextarea","ListMaster","SlideOutModal","Esign","AddSeqNoFormatPopup","RegistrationSubTypeAccordion","FlowRenderer","AddSeqNoFormatRelease","mapStateToProps","state","Login","RegistrationSubType","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","registrationSubTypeAccordion","verisonList","actionParam","nregsubtypeversioncode","masterData","selectedVersion","napprovalconfigcode","accordionMap","Map","map","version","set","editVersionId","deleteVersionId","approveVersionId","editReleaseReferenceNo","userRoleControlRights","doAction","confirmDelete","showTransactionFlow","filterComboChange","comboData","name","userInfo","breadCrumbRegType","updateInfo","typeName","data","showFilter","selectedRegType","reloadData","closeFilter","onFilterSubmit","selectedSampleType","warn","intl","formatMessage","id","searchedData","undefined","searchRef","deleteId","methodURL","selectedRecord","confirmMessage","confirm","edges","nodes","activeStyle","background","color","border","width","inActiveStyle","push","type","label","position","x","y","style","jsondata","source","target","animated","openModal","screenName","regSubTypeVersionFlow","operation","ncontrolcode","breadCrumbData","item","value","closeModal","loadEsign","openChildModal","showSynonym","selectedId","selectedFieldRecord","showConfirmAlert","onSaveClick","saveType","formRef","saveRegSubType","saveReleaseArNoversion","saveVersion","registrationSubType","nregtypecode","sregsubtypename","sdescription","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","nregsubtypecode","inputParam","classUrl","methodUrl","displayName","inputData","registrationsubtype","esignNeeded","nformcode","screenData","selectedRegistrationSubType","nresetduration","nneedtestinitiate","sversiondesc","nversionno","jsonuidata","exampleformat","nisnewformat","nneedjoballocation","nneedmyjob","nneedsampledby","nneedscheduler","nneedsubsample","nneedworklist","nneedbatch","seqnolength","splaintext","ssampleformat","ntransactionstatus","DRAFT","stransdisplaystatus","nneedsitewisearno","nperiodcode","nsitecode","nmastersitecode","nstatus","ACTIVE","isChild","sreleaseexampleformat","sreleaseformat","nneedsitewisearnorelease","nregsubtypeversionreleasecode","controlCode","arrayObject","selectedValue","modal","primaryKeyValue","toLowerCase","onInputOnChange","event","checked","langArray","languageList","langDataObject","validateEsign","sreason","nreasoncode","spredefinedreason","password","onNumericInputChange","str","substring","length","padStart","sseqno","onComboChange","onClickBackspace","formatArray","pop","formatString","comp","replaceFormat","onClickClear","month","date","Date","replacedString","seqno","includes","indexOf","replace","getFullYear","toString","getMonth","getDate","ssitecode","createRef","controlMap","addVersionId","addRegistrationSubTypeId","editRegistrationSubTypeId","deleteRegistrationSubTypeId","sampleTypeOptions","breadCrumbSampleType","design","comboComponents","withoutCombocomponent","regSubTypeMandatoryFields","getDerivedStateFromProps","masterStatus","error","render","filterParam","unchangeList","searchFieldList","versionMandatoryFields","deleteParam","versionReleaseArNoManFields","regType","openFilter","regTypeOptions","parentFunction","e","versions","language","sreleaseexistingFormats","sitewiseexistingFormatsRelease","periodList","onDrop","bind","settings","existingFormats","sitewiseexistingFormats","componentDidUpdate","previousProps","updateState","Object","values","has","get","SampleTypes","RegistrationTypes","realSampleType","realRegtype","JSON","parse","stringify","formatcomponents","replaceAll","info"],"mappings":"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","sourcesContent":["import { faLanguage, faPencilAlt, faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Card, Col, FormGroup, FormLabel, Nav, Row } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { Affix } from 'rsuite';\r\nimport {\r\n    updateStore, crudMaster, filterColumnData, selectRegistrationSubType, getVersionById,\r\n    getRegistrationSubTypeMaster, getRegSubTypeDetails, getSeqNoFormats, getEditRegSubType,\r\n    getRegistrationTypeBySampleType, getRegistrationSubTypeOnReload, validateEsignCredential,getVersionByReleaseNo\r\n} from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport { ContentPanel, ReadOnlyText } from '../../../components/App.styles';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport CustomAccordion from '../../../components/custom-accordion/custom-accordion.component';\r\nimport AddSynonym from '../../../components/droparea/AddSynonym';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport AddSeqNoFormatPopup from './AddSeqNoFormatPopup';\r\nimport RegistrationSubTypeAccordion from './RegistrationSubTypeAccordion';\r\nimport FlowRenderer from '../../../components/flow-renderer/flow-renderer.component';\r\nimport AddSeqNoFormatRelease from './AddSeqNoFormatRelease';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass RegistrationSubType extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            addVersionId: -1,\r\n            editVersionId: -1,\r\n            deleteVersionId: -1,\r\n            approveVersionId: -1,\r\n            addRegistrationSubTypeId: -1,\r\n            editRegistrationSubTypeId: -1,\r\n            deleteRegistrationSubTypeId: -1,\r\n            selectedRecord: {},\r\n            sampleTypeOptions: [],\r\n            selectedSampleType: {},\r\n            breadCrumbSampleType: {},\r\n            selectedRegType: {},\r\n            breadCrumbRegType: {},\r\n            breadCrumbData: [],\r\n            design: [],\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            sidebarview:false\r\n        };\r\n        this.regSubTypeMandatoryFields = [\r\n            { \"idsName\": \"IDS_REGISTRATIONSUBTYPE\", \"dataField\": \"sregsubtypename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\", \"ismultilingual\": \"true\" }\r\n        ]\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.masterStatus }));\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const filterParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregsubtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            unchangeList: [\"realSampleType\", \"SampleTypes\", \"realRegtype\", \"RegistrationTypes\"],\r\n            searchFieldList: [\"sregsubtypename\", \"sdescription\"]\r\n        };\r\n        this.versionMandatoryFields = [\r\n            { \"idsName\": \"IDS_FORMAT\", \"dataField\": \"ssampleformat\", \"mandatoryLabel\": \"IDS_SELECT\" }\r\n            //{ \"idsName\": \"IDS_SEQUENCENOLENGTH\", \"dataField\":\"seqnolength\", \"mandatoryLabel\": \"IDS_ENTER\" }\r\n            // { \"idsName\": \"IDS_SEQUENCENOLENGTH\", \"dataField\": \"seqnolength\", \"mandatoryLabel\": \"IDS_ENTER\" },\r\n        ]\r\n        const deleteParam = this.props.Login.masterData.selectedRegistrationSubType ? {\r\n            nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n            nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode\r\n        } : {}\r\n        if (this.state.selectedRecord && this.state.selectedRecord.nisnewformat) {\r\n            // this.versionMandatoryFields.push({ \"idsName\": \"IDS_RESETDURATION\", \"dataField\": \"nresetduration\", \"mandatoryLabel\": \"IDS_ENTER\" })\r\n            this.versionMandatoryFields.push({ \"idsName\": \"IDS_RESETDURATION\", \"dataField\": \"nperiodcode\", \"mandatoryLabel\": \"IDS_SELECT\" })\r\n            this.versionMandatoryFields.push({ \"idsName\": \"IDS_SEQUENCENOLENGTH\", \"dataField\": \"seqnolength\", \"mandatoryLabel\": \"IDS_ENTER\" })\r\n        }\r\n        this.versionReleaseArNoManFields = [\r\n            { \"idsName\": \"IDS_FORMAT\", \"dataField\": \"sreleaseformat\", \"mandatoryLabel\": \"IDS_SELECT\" }\r\n        \r\n        ]\r\n       // console.log(\"this.props.Login:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {this.state.breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={this.state.breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONSUBTYPE\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.RegistrationSubType || []}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                getMasterDetail={(regType) => this.props.selectRegistrationSubType(regType, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.selectedRegistrationSubType}\r\n                                primaryKeyField=\"nregsubtypecode\"\r\n                                mainField=\"sregsubtypename\"\r\n                                // firstField=\"stransdisplaystatus\"\r\n                                // secondField=\"stransdisplaystatus\"\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={this.state.addRegistrationSubTypeId}\r\n                                filterParam={filterParam}\r\n                                hidePaging={false}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={() => this.reloadData(this.state.selectedSampleType, this.state.selectedRegType)}\r\n                                openModal={() => this.openModal(\"IDS_REGISTRATIONSUBTYPE\", this.state.addRegistrationSubTypeId)}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_SAMPLETYPEFILTER\":\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nsampletypecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder=\"Please Select...\"\r\n                                                        options={this.state.sampleTypeOptions}\r\n                                                        value={this.state.selectedSampleType ? this.state.selectedSampleType : \"\"}\r\n                                                        onChange={value => this.filterComboChange(value, 'nsampletypecode')}\r\n                                                    />\r\n                                                    <FormSelectSearch\r\n                                                        name={\"nregtypecode\"}\r\n                                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_REGTYPE\" })}\r\n                                                        isSearchable={false}\r\n                                                        placeholder=\"Please Select...\"\r\n                                                        options={this.state.regTypeOptions}\r\n                                                        value={this.state.selectedRegType || \"\"}\r\n                                                        onChange={value => this.filterComboChange(value, 'nregtypecode')}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            {this.props.Login.masterData.selectedRegistrationSubType ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                        <Nav.Link name=\"editInstrument\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                            //   data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.editRegistrationSubTypeId) === -1}\r\n                                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                                            onClick={(e) => this.props.getEditRegSubType(this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n                                                                this.props.Login.userInfo, this.state.editRegistrationSubTypeId\r\n                                                            )}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                        </Nav.Link>\r\n                                                        <Nav.Link name=\"deleteInstrument\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            //  data-for=\"tooltip_list_wrap\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.deleteRegistrationSubTypeId) === -1}\r\n                                                            onClick={() => this.confirmDelete(this.state.deleteRegistrationSubTypeId, 'RegistrationSubType', deleteParam)}>\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body>\r\n                                            <Row>\r\n                                                <Col md={12}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id={\"IDS_DESCRIPTION\"} message={\"Description\"} /></FormLabel>\r\n                                                        <ReadOnlyText>{this.props.Login.masterData.selectedRegistrationSubType.jsondata.sdescription || '-'}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row noGutters={true} >\r\n                                                <Col md={12}>\r\n                                                    <div className=\"d-flex justify-content-end\">\r\n                                                        <Nav.Link className=\"add-txt-btn\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(this.state.addVersionId) === -1}\r\n                                                            onClick={() => this.props.getSeqNoFormats({ userInfo: this.props.Login.userInfo, ncontrolcode: this.state.addVersionId })}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                            <FormattedMessage id='IDS_VERSION' defaultMessage='Version' />\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row noGutters={true}>\r\n                                                <Col md={12}>\r\n                                                    {this.props.Login.masterData.versions && this.props.Login.masterData.versions.length > 0 ?\r\n                                                        <CustomAccordion\r\n                                                            key=\"FormatVersion\"\r\n                                                            titlePrefix={this.props.intl.formatMessage({ id: \"IDS_VERSION\" }) + \" : \"}\r\n                                                            isJSONdata={true}\r\n                                                            jsonFieldName={'jsondata'}\r\n                                                            accordionTitle={'sversiondesc'}\r\n                                                            accordionComponent={this.registrationSubTypeAccordion(this.props.Login.masterData.versions)}\r\n                                                            inputParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                                            accordionClick={this.props.getRegSubTypeDetails}\r\n                                                            accordionPrimaryKey={\"nregsubtypeversioncode\"}\r\n                                                            accordionObjectName={\"version\"}\r\n                                                            selectedKey={this.props.Login.masterData.selectedVersion.nregsubtypeversioncode}\r\n                                                        />\r\n                                                        : \"\"}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {(this.props.Login.openModal || this.props.Login.openChildModal) ?\r\n                    <SlideOutModal\r\n                        //size={this.props.Login.screenName === \"Version\" ? \"xl\" : \"lg\"}\r\n                        size={this.props.Login.screenName  === \"Version\"&&!this.props.Login.loadEsign ||this.props.Login.screenName === \"IDS_RELEASEARNO\"&&!this.props.Login.loadEsign ? \"xl\" : \"lg\"}\r\n\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\" ? this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONSUBTYPE\" }) \r\n                                    : this.props.Login.screenName === \"IDS_REGISTRATIONFLOW\" ? this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONFLOW\" }) \r\n                                    : this.props.Login.screenName === \"IDS_RELEASEARNO\" ? this.props.intl.formatMessage({ id: \"IDS_RELEASEARNO\" }) \r\n                                    : this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                        closeModal={this.closeModal}\r\n                        show={this.props.Login.openModal || this.props.Login.openChildModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        noSave={this.props.Login.screenName === \"IDS_REGISTRATIONFLOW\" ? true : false}\r\n                        esign={this.props.Login.loadEsign}\r\n                        hideSave={this.state.showSynonym}\r\n                        closeLabel={this.state.showSynonym ? \"IDS_CLOSE\" : undefined}\r\n                        validateEsign={this.validateEsign}\r\n                        mandatoryFields={this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\" ? this.regSubTypeMandatoryFields : this.props.Login.screenName === \"IDS_RELEASEARNO\" ?this.versionReleaseArNoManFields  : this.versionMandatoryFields}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={(event) => this.onInputOnChange(event)}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.state.showSynonym ?\r\n                                <AddSynonym\r\n                                    selectedFieldRecord={this.state.selectedRecord}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    languages={this.props.Login.languageList || []}\r\n                                    fieldName=\"sregsubtypename\"\r\n                                    maxLength={100}\r\n\r\n                                />\r\n                                :\r\n                                this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\" ?\r\n                                    <Row>\r\n                                        <Col md={11}>\r\n                                            <FormInput\r\n                                                name={this.props.Login.language}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONSUBTYPE\" })}\r\n                                                type=\"text\"\r\n                                                value={this.state.selectedRecord.sregsubtypename ? this.state.selectedRecord.sregsubtypename[this.props.Login.language] : \"\"}\r\n                                                isMandatory={true}\r\n                                                required={true}\r\n                                                maxLength={100}\r\n                                                onChange={(event) => this.onInputOnChange(event, 'sregsubtypename')}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={1} className=\"p-0\">\r\n                                            <Nav.Link name=\"addsynonym\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSYNONYMN\" })}\r\n                                                // data-for=\"tooltip_list_wrap\"\r\n                                                // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\r\n                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                onClick={(e) => this.setState({ showSynonym: true })}\r\n                                            >\r\n                                                <FontAwesomeIcon icon={faLanguage} />\r\n                                            </Nav.Link>\r\n                                        </Col>\r\n                                        <Col md={12}>\r\n                                            <FormTextarea\r\n                                                name={\"sdescription\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                                type=\"text\"\r\n                                                value={this.state.selectedRecord.sdescription || \"\"}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                maxLength={255}\r\n                                                onChange={(event) => this.onInputOnChange(event)}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    :\r\n                                    this.props.Login.screenName === \"IDS_REGISTRATIONFLOW\" ?\r\n                                        <Row>                                          \r\n                                            <Col>\r\n                                             {this.props.Login.regSubTypeVersionFlow &&\r\n                                                <FlowRenderer initialNodes={this.props.Login.regSubTypeVersionFlow.nodes || []}\r\n                                                    initialEdges={this.props.Login.regSubTypeVersionFlow.edges || []} />\r\n                                             }\r\n                                            </Col> \r\n                                        </Row>\r\n                                        : this.props.Login.screenName === \"IDS_RELEASEARNO\"?\r\n                                        <AddSeqNoFormatRelease\r\n                                            selectedRecord={this.state.selectedRecord}\r\n                                            sreleaseexistingFormats={this.props.Login.sreleaseexistingFormats}\r\n                                            sitewiseexistingFormatsRelease={this.props.Login.sitewiseexistingFormatsRelease}\r\n                                            periodList={this.props.Login.periodList}\r\n                                            onComboChange={this.onComboChange}\r\n                                            onDrop={this.onDrop.bind(this)}\r\n                                            onClickBackspace={this.onClickBackspace}\r\n                                            onClickClear={this.onClickClear}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            settings={this.props.Login.settings}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                        />\r\n                                        :<AddSeqNoFormatPopup \r\n                                        selectedRecord={this.state.selectedRecord}\r\n                                        existingFormats={this.props.Login.existingFormats}\r\n                                        sitewiseexistingFormats={this.props.Login.sitewiseexistingFormats}\r\n                                        periodList={this.props.Login.periodList}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onDrop={this.onDrop.bind(this)}\r\n                                        onClickBackspace={this.onClickBackspace}\r\n                                        onClickClear={this.onClickClear}\r\n                                        userInfo={this.props.Login.userInfo}    \r\n                                        settings={this.props.Login.settings}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onNumericInputChange={this.onNumericInputChange}\r\n                                    />\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { userRoleControlRights, controlMap, addVersionId, editVersionId, deleteVersionId, approveVersionId,\r\n            addRegistrationSubTypeId, editRegistrationSubTypeId, deleteRegistrationSubTypeId, breadCrumbSampleType, breadCrumbRegType,\r\n            sampleTypeOptions, regTypeOptions, breadCrumbData, selectedSampleType, selectedRegType,\r\n            selectedRecord, comboComponents, withoutCombocomponent,editReleaseReferenceNo\r\n        } = this.state;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            updateState = true;\r\n            addVersionId = controlMap.has(\"AddSeqNoFormatVersion\") && controlMap.get(\"AddSeqNoFormatVersion\").ncontrolcode;\r\n            editVersionId = controlMap.has(\"EditSeqNoFormatVersion\") && controlMap.get(\"EditSeqNoFormatVersion\").ncontrolcode;\r\n            deleteVersionId = controlMap.has(\"DeleteSeqNoFormatVersion\") && controlMap.get(\"DeleteSeqNoFormatVersion\").ncontrolcode;\r\n            approveVersionId = controlMap.has(\"ApproveSeqNoFormatVersion\") && controlMap.get(\"ApproveSeqNoFormatVersion\").ncontrolcode\r\n            addRegistrationSubTypeId = controlMap.has(\"AddRegistrationSubType\") && controlMap.get(\"AddRegistrationSubType\").ncontrolcode;\r\n            editRegistrationSubTypeId = controlMap.has(\"EditRegistrationSubType\") && controlMap.get(\"EditRegistrationSubType\").ncontrolcode;\r\n            deleteRegistrationSubTypeId = controlMap.has(\"DeleteRegistrationSubType\") && controlMap.get(\"DeleteRegistrationSubType\").ncontrolcode;\r\n            editReleaseReferenceNo = controlMap.has(\"EditReleaseReferenceNo\") && controlMap.get(\"EditReleaseReferenceNo\").ncontrolcode;\r\n\r\n            sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsorter', \"ascending\").get(\"OptionList\")\r\n            selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\r\n            regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\")\r\n            selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\r\n            breadCrumbData = [];\r\n            breadCrumbSampleType = sampleTypeOptions[0] || {};\r\n            breadCrumbRegType = regTypeOptions[0] || {};\r\n            sampleTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": breadCrumbSampleType.label,\r\n                    \"item\": sampleTypeOptions\r\n                }\r\n            );\r\n            regTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": breadCrumbRegType.label,\r\n                    \"item\": breadCrumbRegType\r\n                }\r\n            );\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.realSampleType !== previousProps.Login.realSampleType) {\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": selectedSampleType.label,\r\n                    \"item\": selectedSampleType\r\n                },\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": selectedRegType.label,\r\n                    \"item\": selectedRegType\r\n                }\r\n            ];\r\n            breadCrumbSampleType = this.props.Login.realSampleType;\r\n            breadCrumbRegType = this.props.Login.realRegtype;\r\n            updateState = true;\r\n        } if (this.props.Login.realRegtype !== previousProps.Login.realRegtype) {\r\n            breadCrumbSampleType = this.props.Login.realSampleType || breadCrumbSampleType;\r\n            breadCrumbRegType = this.props.Login.realRegtype;\r\n            breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": breadCrumbSampleType.label,\r\n                    \"item\": breadCrumbSampleType\r\n                },\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": breadCrumbRegType.label,\r\n                    \"item\": breadCrumbRegType\r\n                }\r\n            ];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedSampleType !== previousProps.Login.selectedSampleType) {\r\n            selectedSampleType = this.props.Login.selectedSampleType;\r\n            regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\")\r\n            selectedRegType = regTypeOptions[0];\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.reloadData && this.props.Login.reloadData !== previousProps.Login.reloadData) {\r\n            sampleTypeOptions = constructOptionList(this.props.Login.masterData.SampleTypes || [], 'nsampletypecode', 'ssampletypename', 'nsampletypecode', \"ascending\").get(\"OptionList\")\r\n            selectedSampleType = sampleTypeOptions.length > 0 ? sampleTypeOptions[0] : {};\r\n            regTypeOptions = constructOptionList(this.props.Login.masterData.RegistrationTypes || [], 'nregtypecode', 'sregtypename', 'nregtypecode', \"ascending\").get(\"OptionList\")\r\n            selectedRegType = regTypeOptions.length > 0 ? regTypeOptions[0] : {};\r\n            breadCrumbData = [];\r\n            breadCrumbSampleType = sampleTypeOptions[0] || {};\r\n            breadCrumbRegType = regTypeOptions[0] || {};\r\n            sampleTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": breadCrumbSampleType.label,\r\n                    \"item\": sampleTypeOptions\r\n                }\r\n            );\r\n            regTypeOptions.length > 0 && breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_REGTYPE\",\r\n                    \"value\": breadCrumbRegType.label,\r\n                    \"item\": breadCrumbRegType\r\n                }\r\n            );\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedRegType !== previousProps.Login.selectedRegType) {\r\n            selectedRegType = this.props.Login.selectedRegType;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap, addVersionId, editVersionId, deleteVersionId, approveVersionId,\r\n                addRegistrationSubTypeId, editRegistrationSubTypeId, deleteRegistrationSubTypeId,\r\n                sampleTypeOptions, regTypeOptions, breadCrumbData, selectedSampleType, selectedRegType,\r\n                selectedRecord, comboComponents, withoutCombocomponent, breadCrumbSampleType, breadCrumbRegType,editReleaseReferenceNo\r\n            });\r\n        }\r\n    }\r\n\r\n    registrationSubTypeAccordion = (verisonList) => {\r\n        const actionParam = {\r\n            // nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n            // nregtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregtypecode,\r\n            nregsubtypeversioncode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.nregsubtypeversioncode : -1,\r\n            napprovalconfigcode: this.props.Login.masterData.selectedVersion ? this.props.Login.masterData.selectedVersion.napprovalconfigcode : -1\r\n        }\r\n        const accordionMap = new Map();\r\n        verisonList.map(version =>\r\n            accordionMap.set(version.nregsubtypeversioncode, <RegistrationSubTypeAccordion\r\n                version={version}\r\n                editVersionId={this.state.editVersionId}\r\n                deleteVersionId={this.state.deleteVersionId}\r\n                approveVersionId={this.state.approveVersionId}\r\n                editReleaseReferenceNo={this.state.editReleaseReferenceNo}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                actionParam={actionParam}\r\n                getVersionById={this.getVersionById}\r\n                getVersionByReleaseNo={this.getVersionByReleaseNo}\r\n\r\n                approvrVersion={this.doAction}\r\n                confirmDelete={this.confirmDelete}\r\n                viewFlow={this.showTransactionFlow}\r\n\r\n            // approvalConfig={this.props.Login.masterData.ApprovalConfig}\r\n            />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n\r\n    filterComboChange = (comboData, name) => {\r\n        if (name === 'nsampletypecode')\r\n            this.props.getRegistrationTypeBySampleType(comboData, this.props.Login.masterData, this.props.Login.userInfo, this.state.breadCrumbRegType)\r\n        else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    showFilter: false,\r\n                    selectedRegType: comboData,\r\n                    reloadData: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        // this.setState({ selectedRegType: comboData })\r\n    }\r\n\r\n    closeFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.selectedSampleType) {\r\n            this.reloadData(this.state.selectedSampleType, this.state.selectedRegType);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVALIABLE\" }));\r\n        }\r\n    }\r\n\r\n    reloadData = (selectedSampleType, selectedRegType) => {\r\n        // this.searchRef.current.value = \"\";\r\n        this.props.Login.masterData.searchedData = undefined;\r\n        if (selectedSampleType !== undefined) {\r\n            this.props.getRegistrationSubTypeMaster(selectedSampleType, selectedRegType,\r\n                this.props.Login.masterData, this.props.Login.userInfo, this.searchRef);\r\n        } else {\r\n            this.props.getRegistrationSubTypeOnReload(this.props.Login.userInfo, this.searchRef);\r\n        }\r\n\r\n    }\r\n\r\n    confirmDelete = (deleteId, methodURL, selectedRecord) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.doAction('delete', deleteId, methodURL, selectedRecord));\r\n    }\r\n\r\n    showTransactionFlow = (version) => {\r\n        const edges = [];\r\n        const nodes = [];\r\n        //const version = this.props.Login.regSubTypeVersionFlow;\r\n\r\n        if (version) {\r\n\r\n            const activeStyle = {\r\n                background: '#49f29d',\r\n                color: '#000000',\r\n                border: '1px solid #222138',\r\n                width: 180\r\n            };\r\n\r\n            const inActiveStyle = {\r\n                background: '#D6D5E6',\r\n                color: '#333',\r\n                border: '1px solid #222138',\r\n                width: 180\r\n            };\r\n\r\n            nodes.push(\r\n                {\r\n                    id: '1',\r\n                    type: 'input',\r\n                    data: { label: (<>{this.props.intl.formatMessage({ id: \"IDS_REGISTRATION\" })}</>), },\r\n                    position: { x: 250, y: 0 },\r\n                    style: activeStyle\r\n                },\r\n                {\r\n                    id: '2',\r\n                    data: { label: (<>{this.props.intl.formatMessage({ id: \"IDS_JOBALLOCATION\" })}</>), },\r\n                    position: { x: 50, y: 100 },\r\n                    style: version.jsondata[\"nneedjoballocation\"] ? activeStyle : inActiveStyle\r\n                },\r\n                {\r\n                    id: '3',\r\n                    data: { label: (<> {this.props.intl.formatMessage({ id: \"IDS_MYJOBS\" })} </>), },\r\n                    position: { x: 350, y: 100 },\r\n                    style: version.jsondata[\"nneedmyjob\"] ? activeStyle : inActiveStyle\r\n                },\r\n                {\r\n                    id: '4',\r\n                    data: { label: (<> {this.props.intl.formatMessage({ id: \"IDS_WORKLIST\" })} </>), },\r\n                    position: { x: 550, y: 100 },\r\n                    style: version.jsondata[\"nneedworklist\"] ? activeStyle : inActiveStyle\r\n                },\r\n                {\r\n                    id: '5a',\r\n                    position: { x: 250, y: 200 },\r\n                    data: { label: this.props.intl.formatMessage({ id: \"IDS_BATCHRUN\" }), },\r\n                    style: version.jsondata[\"nneedbatch\"] ? activeStyle : inActiveStyle\r\n                },\r\n                {\r\n                    id: '5',\r\n                    position: { x: 250, y: 300 },\r\n                    data: { label: this.props.intl.formatMessage({ id: \"IDS_RESULTENTRY\" }), },\r\n                    style: activeStyle\r\n                },\r\n                {\r\n                    id: '6',\r\n                    data: { label: this.props.intl.formatMessage({ id: \"IDS_APPROVAL\" }), },\r\n                    position: { x: 250, y: 400 },\r\n                    style: activeStyle\r\n                },\r\n                {\r\n                    id: '7',\r\n                    type: 'output',\r\n                    data: { label: (<> {this.props.intl.formatMessage({ id: \"IDS_RELEASE\" })}</>), },\r\n                    position: { x: 250, y: 500 },\r\n                    style: activeStyle\r\n                },\r\n            );\r\n\r\n            if (version.jsondata[\"nneedjoballocation\"]) {\r\n                edges.push({ id: 'e1-2', source: '1', target: '2', label: this.props.intl.formatMessage({ id: \"IDS_ALLOT\" }), animated: true, },)\r\n                if (version.jsondata[\"nneedmyjob\"]) {\r\n                    edges.push({ id: 'e2-3', source: '2', target: '3', label: this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" }), animated: true, },);\r\n                    if (version.jsondata[\"nneedbatch\"]) {\r\n                        edges.push({ id: 'e3-5a', source: '3', target: '5a', label: this.props.intl.formatMessage({ id: \"IDS_RUNBATCH\" }), animated: true, },);\r\n                        edges.push({ id: 'e5a-5', source: '5a', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                    }\r\n                    else{\r\n                        edges.push({ id: 'e3-5', source: '3', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, type:'step'},);\r\n                    }\r\n                }\r\n                else {\r\n                    if (version.jsondata[\"nneedworklist\"]) {\r\n                        edges.push({ id: 'e2-4', source: '2', target: '4', label: this.props.intl.formatMessage({ id: \"IDS_DATAENTRY\" }), animated: true, },);\r\n                        if (version.jsondata[\"nneedbatch\"]) {\r\n                            edges.push({ id: 'e4-5a', source: '4', target: '5a', label: this.props.intl.formatMessage({ id: \"IDS_RUNBATCH\" }), animated: true, },);\r\n                            edges.push({ id: 'e5a-5', source: '5a', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                        }\r\n                        else{\r\n                            edges.push({ id: 'e4-5', source: '4', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true},);\r\n                        }\r\n                    } \r\n                    else\r\n                    {\r\n                        if (version.jsondata[\"nneedbatch\"]) {\r\n                            edges.push({ id: 'e2-5a', source: '2', target: '5a', label: this.props.intl.formatMessage({ id: \"IDS_RUNBATCH\" }), animated: true, },);\r\n                            edges.push({ id: 'e5a-5', source: '5a', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                        }\r\n                        else{\r\n                            edges.push({ id: 'e2-5', source: '2', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true},);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (version.jsondata[\"nneedmyjob\"]) {\r\n                    edges.push({ id: 'e1-3', source: '1', target: '3', label: this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" }), animated: true, },);\r\n                    if (version.jsondata[\"nneedbatch\"]) {\r\n                        edges.push({ id: 'e3-5a', source: '3', target: '5a', label: this.props.intl.formatMessage({ id: \"IDS_RUNBATCH\" }), animated: true, },);\r\n                        edges.push({ id: 'e5a-5', source: '5a', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                    }\r\n                    else{\r\n                        edges.push({ id: 'e3-5', source: '3', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                    }\r\n                   \r\n                }\r\n                else {\r\n                    if (version.jsondata[\"nneedworklist\"]) {\r\n                        edges.push({ id: 'e1-4', source: '1', target: '4', //label: this.props.intl.formatMessage({ id: \"IDS_DATAENTRY\" }), \r\n                                    label: \"\",\r\n                                    animated: true, },);\r\n                        if (version.jsondata[\"nneedbatch\"]) {\r\n                            edges.push({ id: 'e4-5a', source: '4', target: '5a', label: this.props.intl.formatMessage({ id: \"IDS_RUNBATCH\" }), animated: true, },);\r\n                            edges.push({ id: 'e5a-5', source: '5a', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                        }\r\n                        else{\r\n                            edges.push({ id: 'e4-5', source: '4', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                        }\r\n                        \r\n                    }\r\n                    else {\r\n                        if (version.jsondata[\"nneedbatch\"]) {\r\n                            edges.push({ id: 'e1-5a', source: '1', target: '5a', label: this.props.intl.formatMessage({ id: \"IDS_RUNBATCH\" }), animated: true, },);\r\n                            edges.push({ id: 'e5a-5', source: '5a', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                        }\r\n                        else{\r\n                            edges.push({ id: 'e1-5', source: '1', target: '5', label: this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" }), animated: true, },);\r\n                    \r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            edges.push({ id: 'e5-6', source: '5', target: '6', label: this.props.intl.formatMessage({ id: \"IDS_APPROVALFLOW\" }), animated: true, },\r\n                        { id: 'e6-7', source: '6', target: '7', label: this.props.intl.formatMessage({ id: \"IDS_RELEASE\" }), animated: true, })\r\n            //console.log(\"seq:\", this.props.Login.screenName);\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, screenName: \"IDS_REGISTRATIONFLOW\",\r\n                regSubTypeVersionFlow: { nodes, edges }, operation: \"view\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    openModal = (screenName, ncontrolcode) => {\r\n        if (this.state.breadCrumbData[1] && this.state.breadCrumbData[1].item && this.state.breadCrumbData[1].item.value) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal: true, operation: \"create\", screenName, ncontrolcode }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTREGTYPE\" }));\r\n        }\r\n\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                openChildModal = false;\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            openChildModal = false;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, openChildModal, loadEsign, selectedRecord, selectedId: null, selectedFieldRecord: {}, showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.screenName === \"IDS_REGISTRATIONSUBTYPE\") {\r\n            this.saveRegSubType(saveType, formRef)\r\n        }else if(this.props.Login.screenName ===\"IDS_RELEASEARNO\"){\r\n            this.saveReleaseArNoversion(saveType, formRef)\r\n        }\r\n        \r\n        else {\r\n            this.saveVersion(saveType, formRef)\r\n        }\r\n    }\r\n\r\n    saveRegSubType = (saveType, formRef) => {\r\n        //add \r\n        let registrationSubType = {\r\n            nregtypecode: this.state.breadCrumbData[1].item.value,\r\n            jsondata: {\r\n                \"sregsubtypename\": this.state.selectedRecord.sregsubtypename,\r\n                // \"sregsubtypename(en-US)\": this.state.selectedRecord.sregsubtypename['en-US'],\r\n                // \"sregsubtypename(ru-RU)\": this.state.selectedRecord.sregsubtypename['ru-RU'],\r\n                // \"sregsubtypename(tg-TG)\": this.state.selectedRecord.sregsubtypename['tg-TG'],\r\n\r\n                \"sdescription\": this.state.selectedRecord.sdescription\r\n            }\r\n        }\r\n        const postParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregsubtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.state.selectedRecord.nregsubtypecode\r\n            registrationSubType = {\r\n                ...registrationSubType,\r\n                nregsubtypecode: selectedId\r\n            }\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: 'RegistrationSubType',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                registrationsubtype: registrationSubType\r\n            },\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType,\r\n                    operation: this.props.Login.operation, openModal: true,\r\n                    screenName: \"IDS_REGISTRATIONSUBTYPE\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n\r\n    }\r\n\r\n    saveVersion = (saveType, formRef) => {\r\n        let version = {\r\n            napprovalconfigcode: this.props.Login.masterData.selectedRegistrationSubType.napprovalconfigcode,\r\n            nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n            jsondata: {\r\n                ...this.state.selectedRecord,\r\n                nresetduration: 1,\r\n                /*ALPD-4135-Vignesh R--The system will allow the authorized \r\n             user to enter results for the selected tests without initiate action.*/\r\n              nneedtestinitiate:this.state.selectedRecord[\"nneedtestinitiate\"] ? true :false,\r\n               //  nneedtestinitiate:true,\r\n // nneedscheduler:false,\r\n                sversiondesc: '-',\r\n                nversionno: -1\r\n            },\r\n            jsonuidata: {\r\n                exampleformat: this.state.selectedRecord[\"exampleformat\"] ? this.state.selectedRecord[\"exampleformat\"] : \"-\",\r\n                nisnewformat: this.state.selectedRecord[\"nisnewformat\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                nneedjoballocation: this.state.selectedRecord[\"nneedjoballocation\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                nneedmyjob: this.state.selectedRecord[\"nneedmyjob\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                nneedsampledby: this.state.selectedRecord[\"nneedsampledby\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                nneedscheduler: this.state.selectedRecord[\"nneedscheduler\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                nneedsubsample: this.state.selectedRecord[\"nneedsubsample\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                nneedtestinitiate: this.state.selectedRecord[\"nneedtestinitiate\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n               // nneedtestinitiate:  this.props.intl.formatMessage({ id: \"IDS_YES\" }) ,\r\n                nneedworklist: this.state.selectedRecord[\"nneedworklist\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                nneedbatch: this.state.selectedRecord[\"nneedbatch\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n                seqnolength: this.state.selectedRecord[\"seqnolength\"] ? this.state.selectedRecord[\"seqnolength\"] : \"-\",\r\n                splaintext: this.state.selectedRecord[\"splaintext\"] ? this.state.selectedRecord[\"splaintext\"] : \"-\",\r\n                ssampleformat: this.state.selectedRecord[\"ssampleformat\"] ? this.state.selectedRecord[\"ssampleformat\"] : \"-\",\r\n                nresetduration: this.state.selectedRecord[\"nperiodcode\"] ? this.state.selectedRecord[\"nperiodcode\"].label : \"-\",\r\n                ntransactionstatus: transactionStatus.DRAFT,\r\n                stransdisplaystatus: this.props.intl.formatMessage({ id: \"IDS_DRAFT\" }),\r\n                sversiondesc: '-',\r\n                nversionno: -1,\r\n                sregsubtypename: this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename,\r\n                nneedsitewisearno: this.state.selectedRecord[\"nneedsitewisearno\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n            },\r\n\r\n\r\n            nperiodcode: this.state.selectedRecord.nperiodcode ? this.state.selectedRecord.nperiodcode.value : 4,\r\n            ntransactionstatus: transactionStatus.DRAFT,\r\n            nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n            nstatus: transactionStatus.ACTIVE\r\n        }\r\n        let selectedId = null;\r\n        let operation = 'create';\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            operation = 'update'\r\n            selectedId = this.state.selectedRecord.nregsubtypeversioncode\r\n            version = {\r\n                ...version,\r\n                nregsubtypeversioncode: selectedId\r\n            }\r\n        }\r\n        const postParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregsubtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: 'Version',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                version: version, isChild: true\r\n            },\r\n            operation,\r\n            saveType, formRef,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    saveType,\r\n                    operation,\r\n                    openChildModal: true,\r\n                    //screenName: \"IDS_REGISTRATIONFLOW\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n        }\r\n    }\r\n    \r\n    saveReleaseArNoversion = (saveType, formRef) => {\r\n        let version = {\r\n            napprovalconfigcode: this.props.Login.masterData.selectedRegistrationSubType.napprovalconfigcode,\r\n            nregsubtypecode: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n            jsondata: {\r\n                ...this.state.selectedRecord,\r\n                nresetduration: 1,\r\n /*ALPD-4135-Vignesh R--The system will allow the authorized \r\n             user to enter results for the selected tests without initiate action.*/\r\n              nneedtestinitiate:this.state.selectedRecord[\"nneedtestinitiate\"] ? true :false,\r\n              //  nneedtestinitiate:true,\r\n                // nneedscheduler:false,\r\n                sversiondesc: '-',\r\n                nversionno: -1\r\n            },\r\n            jsonuidata: {\r\n                sreleaseexampleformat: this.state.selectedRecord[\"sreleaseexampleformat\"] ? this.state.selectedRecord[\"sreleaseexampleformat\"] : \"-\",\r\n                seqnolength: this.state.selectedRecord[\"seqnolength\"] ? this.state.selectedRecord[\"seqnolength\"] : \"-\",\r\n                splaintext: this.state.selectedRecord[\"splaintext\"] ? this.state.selectedRecord[\"splaintext\"] : \"-\",\r\n                sreleaseformat: this.state.selectedRecord[\"sreleaseformat\"] ? this.state.selectedRecord[\"sreleaseformat\"] : \"-\",\r\n                nresetduration: this.state.selectedRecord[\"nperiodcode\"] ? this.state.selectedRecord[\"nperiodcode\"].label : \"-\",\r\n                ntransactionstatus: transactionStatus.DRAFT,\r\n                stransdisplaystatus: this.props.intl.formatMessage({ id: \"IDS_DRAFT\" }),\r\n                sversiondesc: '-',\r\n                nversionno: -1,\r\n                sregsubtypename: this.props.Login.masterData.selectedRegistrationSubType.sregsubtypename,\r\n                nneedsitewisearnorelease: this.state.selectedRecord[\"nneedsitewisearnorelease\"] ? this.props.intl.formatMessage({ id: \"IDS_YES\" }) : this.props.intl.formatMessage({ id: \"IDS_NO\" }),\r\n            },\r\n\r\n\r\n            nperiodcode: this.state.selectedRecord.nperiodcode ? this.state.selectedRecord.nperiodcode.value : 4,\r\n            ntransactionstatus: transactionStatus.DRAFT,\r\n            nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n            nstatus: transactionStatus.ACTIVE\r\n        }\r\n        let selectedId = null;\r\n        let operation = 'create';\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n             operation = 'update'\r\n            selectedId = this.state.selectedRecord.nregsubtypeversionreleasecode\r\n            version = {\r\n                ...version,\r\n                nregsubtypeversionreleasecode: selectedId\r\n            }\r\n        }\r\n        const postParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregsubtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: 'ReleaseArNoVersion',\r\n            postParam,\r\n            searchRef: this.searchRef,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                version: version, isChild: true\r\n            },\r\n            operation,\r\n            saveType, formRef,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    saveType,\r\n                    operation,\r\n                    openChildModal: true,\r\n                    //screenName: \"IDS_REGISTRATIONFLOW\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getVersionById = (ncontrolcode) => {\r\n        this.props.getVersionById(this.props.Login.masterData.selectedVersion.nregsubtypeversioncode, this.props.Login.userInfo, ncontrolcode)\r\n    }\r\n    getVersionByReleaseNo = (ncontrolcode) => {\r\n        this.props.getVersionByReleaseNo(this.props.Login.masterData.selectedVersion.nregsubtypeversionreleasecode!==undefined?this.props.Login.masterData.selectedVersion.nregsubtypeversionreleasecode: this.props.Login.masterData.selectedVersion.nregsubtypeversioncode, this.props.Login.userInfo, ncontrolcode)\r\n    }\r\n    doAction = (operation, controlCode, methodURL, selectedRecord) => {\r\n\r\n        let arrayObject = {};\r\n       let  selectedValue={...selectedRecord, nregsubtypecode :this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode}\r\n        let modal = methodURL != \"Version\" ? \"openModal\" : \"openChildModal\";\r\n        if (operation === \"approve\") {\r\n            const nregtypecode = this.props.Login.masterData.selectedRegistrationSubType.nregtypecode;\r\n            const nregsubtypecode = this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode;\r\n            arrayObject = { \"nregtypecode\": nregtypecode, \"nregsubtypecode\": nregsubtypecode };\r\n        }\r\n        const postParam = {\r\n            inputListName: \"RegistrationSubType\",\r\n            selectedObject: \"selectedRegistrationSubType\",\r\n            primaryKeyField: \"nregsubtypecode\",\r\n            fetchUrl: \"registrationsubtype/getRegistrationSubTypeMaster\",\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                nregtypecode: this.state.breadCrumbData[1] ? this.state.breadCrumbData[1].item.value : -1\r\n            },\r\n            primaryKeyValue: this.props.Login.masterData.selectedRegistrationSubType.nregsubtypecode,\r\n            masterData: this.props.Login.masterData\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: methodURL,\r\n            postParam: ((methodURL != \"Version\") || (methodURL == \"Version\" && operation == \"approve\")) ? postParam : undefined,\r\n            searchRef: this.searchRef,\r\n            inputData: {\r\n                [methodURL.toLowerCase()]: { ...selectedValue, ...arrayObject },\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation,\r\n            displayName: this.props.Login.inputParam.displayName, isChild: methodURL != \"Version\" ? undefined : true,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    [modal] : true,\r\n                    screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, modal);\r\n        }\r\n    }\r\n    onInputOnChange = (event, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n            if(this.props.Login.screenName===\"IDS_RELEASEARNO\"){\r\n                selectedRecord[\"formatArray\"] = [];\r\n                selectedRecord[\"sreleaseexampleformat\"] = \"\";\r\n                selectedRecord[\"sreleaseformat\"] = \"\";\r\n                selectedRecord[\"seqnolength\"] = 4;\r\n            }\r\n            if (event.target.name === 'nisnewformat') {\r\n\r\n                selectedRecord[\"formatArray\"] = [];\r\n                selectedRecord[\"ssampleformat\"] = \"\";\r\n                selectedRecord[\"exampleformat\"] = \"\";\r\n                selectedRecord[\"seqnolength\"] = 4;\r\n            }\r\n            if (event.target.name === 'nneedsitewisearno') {\r\n\r\n                selectedRecord[\"formatArray\"] = [];\r\n                selectedRecord[\"ssampleformat\"] = \"\";\r\n                selectedRecord[\"exampleformat\"] = \"\";\r\n            }\r\n\r\n            if (selectedRecord[\"nneedworklist\"]) {\r\n                if (selectedRecord[\"nneedworklist\"] === true) {\r\n                    delete selectedRecord[\"nneedmyjob\"]\r\n                    //delete selectedRecord[\"nneedjoballocation\"]\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            if (name === 'synonym') {\r\n                selectedRecord['sregsubtypename'] = {\r\n                    ...selectedRecord['sregsubtypename'],\r\n                    [event.target.name]: event.target.value\r\n                }\r\n            }\r\n            else if (name === 'sregsubtypename') {\r\n                const langArray = this.props.Login.languageList;\r\n                const langDataObject = {};\r\n                langArray.map(item =>\r\n                    langDataObject[item.value] = event.target.value);\r\n\r\n                selectedRecord['sregsubtypename'] = {\r\n                    ...selectedRecord['sregsubtypename'],\r\n                    ...langDataObject\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    validateEsign = () => {\r\n        let modal=\"openChildModal\";\r\n        if(this.props.Login.screenData.inputParam.methodUrl!==\"ReleaseArNoVersion\"){\r\n             modal = this.props.Login.screenData.inputParam.methodUrl != \"Version\" ? \"openModal\" : \"openChildModal\";\r\n\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, modal);\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (value === 0 || value === 0.0) {\r\n            selectedRecord[name] = \"\";\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            if (name === 'seqnolength') {\r\n                let str = '{9999}'\r\n                str = str.substring(1, str.length - 4)\r\n                str = str.padStart(value, 9)\r\n                selectedRecord.sseqno = '{' + str + '}'\r\n            }\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n\r\n        }\r\n    }\r\n    onComboChange = (comboData, name) => {\r\n        this.setState({ selectedRecord: { ...this.state.selectedRecord, [name]: comboData } })\r\n    }\r\n    onDrop(data) {\r\n        // if (data.formatcomponents === \"\") {\r\n\r\n        // } else {\r\n        let selectedRecord={};\r\n        if(this.state.selectedRecord !== undefined){\r\n             selectedRecord = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            // let formatArray = selectedRecord.formatArray || []\r\n            // formatArray.push(data.formatcomponents)\r\n            // let formatString = '';\r\n            // formatArray.map(comp => formatString += comp)\r\n            // selectedRecord.formatArray = formatArray\r\n            // selectedRecord.ssampleformat = formatString;\r\n            // selectedRecord.exampleformat = this.replaceFormat(formatString)\r\n            // if (selectedRecord.ssampleformat.length < 30) {\r\n            //     this.setState({ selectedRecord });\r\n            // } else {\r\n            //     toast.info(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXCHARS\" }));\r\n            // }\r\n        // }\r\n      }\r\n            let formatArray = selectedRecord && selectedRecord.formatArray !== undefined ? selectedRecord.formatArray : []\r\n            formatArray.push(data.formatcomponents)\r\n            let formatString = '';\r\n            formatArray.map(comp => formatString += comp)\r\n            selectedRecord.formatArray = formatArray\r\n            if(this.props.Login.screenName===\"IDS_RELEASEARNO\"){\r\n                selectedRecord.sreleaseformat = formatString;\r\n                selectedRecord.sreleaseexampleformat = this.replaceFormat(formatString)\r\n                 //ALPD-534\r\n            if (selectedRecord.sreleaseformat.replaceAll(\"{\",\"\").replaceAll(\"}\",\"\").length <= 40) {\r\n                this.setState({ selectedRecord });\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXCHARS\" }));\r\n            }\r\n\r\n            }else{\r\n                selectedRecord.ssampleformat = formatString;\r\n                selectedRecord.exampleformat = this.replaceFormat(formatString)\r\n                 //ALPD-534\r\n            if (selectedRecord.ssampleformat.replaceAll(\"{\",\"\").replaceAll(\"}\",\"\").length <= 40) {\r\n                this.setState({ selectedRecord });\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_EXCEEDSMAXCHARS\" }));\r\n            }\r\n\r\n            }\r\n          \r\n           \r\n    }\r\n    onClickBackspace = () => {\r\n        let { selectedRecord } = this.state;\r\n        let formatArray = selectedRecord.formatArray || []\r\n        formatArray.pop()\r\n        let formatString = '';\r\n\r\n        formatArray.map(comp => formatString += comp)\r\n        \r\n        selectedRecord.formatArray = formatArray\r\n        if(this.props.Login.screenName===\"IDS_RELEASEARNO\"){\r\n            selectedRecord.sreleaseformat = formatString;\r\n            selectedRecord.sreleaseexampleformat = this.replaceFormat(formatString)\r\n            \r\n        }else{\r\n            selectedRecord.ssampleformat = formatString;\r\n            selectedRecord.exampleformat = this.replaceFormat(formatString)\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onClickClear = () => {\r\n        let { selectedRecord } = this.state;\r\n        if(this.props.Login.screenName===\"IDS_RELEASEARNO\"){\r\n            selectedRecord.formatArray = [];\r\n            selectedRecord.sreleaseformat = \"\";\r\n            selectedRecord.sreleaseexampleformat = \"\"\r\n        }else{\r\n\t\t\t//ALPD-3835\r\n            if(selectedRecord){\r\n                selectedRecord.formatArray = [];\r\n                selectedRecord.ssampleformat = \"\";\r\n                selectedRecord.exampleformat = \"\"\r\n            }\r\n           \r\n        }\r\n      \r\n        this.setState({ selectedRecord });\r\n    }\r\n    replaceFormat = (formatString) => {\r\n        const month = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n        const date = new Date();\r\n        let replacedString = formatString;\r\n        let seqno = \"1\"\r\n\r\n        while (replacedString.includes('}')) {\r\n            let comp = replacedString.substring(replacedString.indexOf('{'), replacedString.indexOf('}') + 1)\r\n            switch (comp) {\r\n                case '{yyyy}':\r\n                    replacedString = replacedString.replace('{yyyy}', date.getFullYear())\r\n                    break;\r\n                case '{yy}':\r\n                    replacedString = replacedString.replace('{yy}', date.getFullYear().toString().substring(2, 4))\r\n                    break;\r\n                case '{MM}':\r\n                    replacedString = replacedString.replace('{MM}', (date.getMonth() + 1).toString().padStart(2, \"0\"))\r\n                    break;\r\n                case '{MMM}':\r\n                    replacedString = replacedString.replace('{MMM}', month[date.getMonth()])\r\n                    break;\r\n                case '{DD}':\r\n                    replacedString = replacedString.replace('{DD}', date.getDate().toString().padStart(2, \"0\"))\r\n                    break;\r\n                case '{XXXXX}':\r\n                        replacedString = replacedString.replace('{XXXXX}', this.props.Login.userInfo.ssitecode);\r\n                        break;\r\n                case this.state.selectedRecord && this.state.selectedRecord.sseqno || '{9999}':\r\n                    seqno = seqno.padStart(this.state.selectedRecord  && this.state.selectedRecord.seqnolength || 4, \"0\")\r\n                    replacedString = replacedString.replace(this.state.selectedRecord &&  this.state.selectedRecord.sseqno || '{9999}', seqno)\r\n                    break;\r\n                default:\r\n                    if (comp.includes('9')) {\r\n                        seqno = seqno.padStart(comp.length - 2, \"0\")\r\n                        replacedString = replacedString.replace(comp, seqno)\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n        return replacedString;\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, {\r\n    updateStore, crudMaster, getRegistrationSubTypeMaster,\r\n    filterColumnData, getRegSubTypeDetails, getSeqNoFormats, selectRegistrationSubType, getEditRegSubType,\r\n    getVersionById, getRegistrationTypeBySampleType, getRegistrationSubTypeOnReload, validateEsignCredential,getVersionByReleaseNo\r\n})(injectIntl(RegistrationSubType))"]},"metadata":{},"sourceType":"module"}