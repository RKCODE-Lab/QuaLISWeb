{"ast":null,"code":"import { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport rsapi from '../rsapi';\nimport { initRequest } from './LoginAction';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, getComboLabelValue, constructOptionList, formatInputDate, rearrangeDateFormat, formatDate } from '../components/CommonScript';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getGrapicalSchedulerViewDetail(scheduler, userInfo, masterData, sscheduletype) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"graphicalschedulerview/getGraphicalSchedulerView\", {\n      nschedulecode: scheduler.nschedulecode,\n      userinfo: userInfo,\n      sscheduletype: sscheduletype\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function changeGrapicalScheduleTypeFilter(inputParam, filterScheduleType) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/graphicalschedulerview/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterScheduleType,\n            nfilterScheduleType: inputParam.inputData.nfilterScheduleType\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5294/QuaLISWeb/src/actions/GrapicalSchedulerViewAction.js"],"names":["toast","Axios","rsapi","initRequest","DEFAULT_RETURN","sortData","getComboLabelValue","constructOptionList","formatInputDate","rearrangeDateFormat","formatDate","intl","transactionStatus","getGrapicalSchedulerViewDetail","scheduler","userInfo","masterData","sscheduletype","dispatch","post","nschedulecode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","changeGrapicalScheduleTypeFilter","inputParam","filterScheduleType","methodUrl","inputData","nfilterScheduleType"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest } from './LoginAction';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {sortData, getComboLabelValue, constructOptionList,formatInputDate, rearrangeDateFormat, formatDate} from '../components/CommonScript';\r\nimport { intl } from '../components/App';\r\nimport {transactionStatus} from '../components/Enumeration';\r\n\r\nexport function getGrapicalSchedulerViewDetail (scheduler,userInfo, masterData,sscheduletype) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"graphicalschedulerview/getGraphicalSchedulerView\", {nschedulecode:scheduler.nschedulecode, userinfo:userInfo,sscheduletype:sscheduletype})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}\r\n}\r\n\r\nexport function changeGrapicalScheduleTypeFilter (inputParam, filterScheduleType)  {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/graphicalschedulerview/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterScheduleType,\r\n                            nfilterScheduleType: inputParam.inputData.nfilterScheduleType\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}