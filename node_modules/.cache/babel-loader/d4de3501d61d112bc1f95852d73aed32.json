{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { constructOptionList, rearrangeDateFormat, sortData } from \"../components/CommonScript\";\nimport { intl } from \"../components/App\";\nimport Axios from \"axios\";\nimport { transactionStatus } from \"../components/Enumeration\";\nexport function getRetrievalCertificateForFilter(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"retrievalcertificate/getRetrievalCertificate\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRetrievalCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\" && masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.DRAFT) {\n      let urlArray = [];\n      const projectTypeService = rsapi.post(\"projecttype/getProjectType\", {\n        userinfo: userInfo\n      });\n      const storageConditionService = rsapi.post(\"storagecondition/getStorageCondition\", {\n        userinfo: userInfo\n      });\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      const siteaddressService = rsapi.post(\"retrievalcertificate/getSiteAddress\", {\n        userinfo: userInfo\n      });\n\n      if (operation === \"create\") {\n        urlArray = [projectTypeService, storageConditionService, UTCtimeZoneService, siteaddressService];\n      } else {\n        const projectService = rsapi.post(\"retrievalcertificate/getProject\", {\n          \"nprojecttypecode\": masterData.SelectedRetrievalCertificate.nprojecttypecode,\n          userinfo: userInfo\n        });\n        const retrievalcertificateServiceById = rsapi.post(\"retrievalcertificate/getActiveRetrievalCertificateById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        }); //this.props.Login.userInfo\n\n        urlArray = [projectTypeService, storageConditionService, UTCtimeZoneService, retrievalcertificateServiceById, projectService];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, true);\n        const projectTypeList = projectTypeMap.get(\"OptionList\");\n        const storageconditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\", \"sstorageconditionname\", undefined, undefined, true);\n        let projectList = null;\n\n        if (operation !== \"create\") {\n          const projectMap = constructOptionList(response[4].data || [], \"nprojectmastercode\", \"sprojectname\", undefined, undefined, true);\n          projectList = projectMap.get(\"OptionList\");\n        }\n\n        const storageconditionList = storageconditionMap.get(\"OptionList\");\n        const currentTime = rearrangeDateFormat(userInfo, response[2].data);\n\n        if (operation === \"update\") {\n          selectedRecord = response[3].data;\n          selectedRecord[\"dretrievalcertificatedate\"] = rearrangeDateFormat(userInfo, response[3].data.sretrievalcertificatedate);\n          selectedRecord[\"nprojectmastercode\"] = {\n            \"value\": response[3].data.nprojectmastercode,\n            \"label\": response[3].data.sprojectname\n          };\n          selectedRecord[\"nprojecttypecode\"] = {\n            \"value\": response[3].data.nprojecttypecode,\n            \"label\": response[3].data.sprojecttypename\n          };\n          selectedRecord[\"nstorageconditioncode\"] = {\n            \"value\": response[3].data.nstorageconditioncode,\n            \"label\": response[3].data.sstorageconditionname\n          }; //  selectedRecord[\"ntztrainingdate\"] = { \"value\": response[4].data.ntztrainingdate, \"label\": response[4].data.stimezoneid };\n        } else {\n          selectedRecord[\"sorganizationaddress\"] = response[3].data[0].ssiteaddress;\n          selectedRecord[\"dretrievalcertificatedate\"] = rearrangeDateFormat(userInfo, response[2].data);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            currentTime,\n            projectList,\n            projectTypeList,\n            storageconditionList,\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORD\"\n      }));\n    }\n  };\n}\nexport function getProjectBasedUsers(nprojectmastercode, userInfo, selectedRecord, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"retrievalcertificate/getProjectUsers\", {\n      \"nprojectmastercode\": nprojectmastercode,\n      userinfo: userInfo\n    }).then(response => {\n      //console.log(\" response:\", response); \n      let Users = [];\n      const userName = constructOptionList(response.data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = userName.get(\"OptionList\"); //selectedRecord[\"nusercode\"] = undefined; \n\n      selectedRecord[\"sinvestigatorname\"] = response.data[0].susername;\n      selectedRecord[\"sphoneno\"] = response.data[0].sphoneno;\n      selectedRecord[\"semail\"] = response.data[0].semail;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRetrievalCertificateDetail(retrievalcertificate, fromDate, toDate, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"retrievalcertificate/getRetrievalCertificate\", {\n      nretrievalcertificatecode: retrievalcertificate.nretrievalcertificatecode,\n      fromDate,\n      toDate,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function reloadRetrievalCertificate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"retrievalcertificate/getRetrievalCertificate\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const reportRetrievalCetificate = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"retrievalcertificate/RetrievalReportCertificate\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showConfirmAlert: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getProjectBasedOnProjectType = (nprojectTypeCode, userInfo, selectedRecord) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"retrievalcertificate/getProject\", {\n      \"nprojecttypecode\": nprojectTypeCode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const projectMap = constructOptionList(response.data || [], \"nprojectmastercode\", \"sprojectname\", undefined, undefined, true);\n      const projectList = projectMap.get(\"OptionList\");\n      selectedRecord[\"nprojectmastercode\"] = \"\";\n      selectedRecord[\"semail\"] = \"\";\n      selectedRecord[\"sinvestigatorname\"] = \"\";\n      selectedRecord[\"sphoneno\"] = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectList,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/RetrievalCertificateAction.js"],"names":["toast","rsapi","initRequest","DEFAULT_RETURN","constructOptionList","rearrangeDateFormat","sortData","intl","Axios","transactionStatus","getRetrievalCertificateForFilter","inputParam","dispatch","post","inputData","then","response","responseData","data","masterData","searchRef","undefined","current","value","type","payload","loading","showFilter","catch","error","status","message","warn","getRetrievalCertificateComboService","screenName","operation","primaryKeyName","primaryKeyValue","userInfo","ncontrolCode","SelectedRetrievalCertificate","ntransactionstatus","DRAFT","urlArray","projectTypeService","userinfo","storageConditionService","UTCtimeZoneService","siteaddressService","projectService","nprojecttypecode","retrievalcertificateServiceById","all","selectedRecord","projectTypeMap","projectTypeList","get","storageconditionMap","projectList","projectMap","storageconditionList","currentTime","sretrievalcertificatedate","nprojectmastercode","sprojectname","sprojecttypename","nstorageconditioncode","sstorageconditionname","ssiteaddress","openModal","formatMessage","id","getProjectBasedUsers","Users","userName","susername","sphoneno","semail","getRetrievalCertificateDetail","retrievalcertificate","fromDate","toDate","nretrievalcertificatecode","reloadRetrievalCertificate","reportRetrievalCetificate","loadEsign","showConfirmAlert","document","getElementById","setAttribute","filepath","click","getProjectBasedOnProjectType","nprojectTypeCode"],"mappings":"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","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { constructOptionList, rearrangeDateFormat, sortData } from \"../components/CommonScript\";\r\nimport { intl } from \"../components/App\";\r\nimport Axios from \"axios\";\r\nimport { transactionStatus } from \"../components/Enumeration\";\r\n\r\nexport function getRetrievalCertificateForFilter(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"retrievalcertificate/getRetrievalCertificate\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRetrievalCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (operation===\"create\" || operation===\"update\" && masterData.SelectedRetrievalCertificate.ntransactionstatus===transactionStatus.DRAFT) {\r\n\r\n        let urlArray = [];\r\n        const projectTypeService = rsapi.post(\"projecttype/getProjectType\", { userinfo: userInfo });\r\n        const storageConditionService = rsapi.post(\"storagecondition/getStorageCondition\", { userinfo: userInfo });\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo });\r\n        const siteaddressService = rsapi.post(\"retrievalcertificate/getSiteAddress\", { userinfo: userInfo });\r\n\r\n        if (operation === \"create\") {\r\n            urlArray = [projectTypeService, storageConditionService, UTCtimeZoneService,siteaddressService];\r\n        }\r\n        else{\r\n            const projectService = rsapi.post(\"retrievalcertificate/getProject\", { \"nprojecttypecode\": masterData.SelectedRetrievalCertificate.nprojecttypecode, userinfo: userInfo });\r\n            const retrievalcertificateServiceById = rsapi.post(\"retrievalcertificate/getActiveRetrievalCertificateById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });//this.props.Login.userInfo\r\n            urlArray = [projectTypeService, storageConditionService, UTCtimeZoneService,retrievalcertificateServiceById, projectService];\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                \r\n                    let selectedRecord = {};\r\n\r\n                    const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, true);\r\n                    const projectTypeList = projectTypeMap.get(\"OptionList\");\r\n                    const storageconditionMap = constructOptionList(response[1].data || [], \"nstorageconditioncode\",\r\n                        \"sstorageconditionname\", undefined, undefined, true);\r\n                    let projectList = null;\r\n                    if(operation !== \"create\"){\r\n                        const projectMap = constructOptionList(response[4].data || [], \"nprojectmastercode\",\r\n                            \"sprojectname\", undefined, undefined, true);\r\n                        projectList = projectMap.get(\"OptionList\");\r\n                    }\r\n                    const storageconditionList = storageconditionMap.get(\"OptionList\");\r\n                    const currentTime = rearrangeDateFormat(userInfo, response[2].data);\r\n                    if (operation === \"update\") {\r\n                        selectedRecord = response[3].data;\r\n\r\n                        selectedRecord[\"dretrievalcertificatedate\"] = rearrangeDateFormat(userInfo, response[3].data.sretrievalcertificatedate)\r\n                        selectedRecord[\"nprojectmastercode\"] = { \"value\": response[3].data.nprojectmastercode, \"label\": response[3].data.sprojectname };\r\n                        selectedRecord[\"nprojecttypecode\"] = { \"value\": response[3].data.nprojecttypecode, \"label\": response[3].data.sprojecttypename };\r\n                        selectedRecord[\"nstorageconditioncode\"] = { \"value\": response[3].data.nstorageconditioncode, \"label\": response[3].data.sstorageconditionname };\r\n                      //  selectedRecord[\"ntztrainingdate\"] = { \"value\": response[4].data.ntztrainingdate, \"label\": response[4].data.stimezoneid };\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"sorganizationaddress\"] = response[3].data[0].ssiteaddress;\r\n                        selectedRecord[\"dretrievalcertificatedate\"] = rearrangeDateFormat(userInfo, response[2].data);\r\n\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            currentTime,\r\n                            projectList, \r\n                            projectTypeList,\r\n                            storageconditionList,\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n            \r\n            }\r\n            )\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        \r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\" }));\r\n            }\r\n    }\r\n}\r\nexport function getProjectBasedUsers(nprojectmastercode, userInfo, selectedRecord, screenName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"retrievalcertificate/getProjectUsers\", {\"nprojectmastercode\": nprojectmastercode,userinfo: userInfo})\r\n            .then(response => {\r\n                //console.log(\" response:\", response); \r\n                let Users = [];\r\n                    const userName = constructOptionList(response.data || [], \"nusercode\",\r\n                        \"susername\", undefined, undefined, false);\r\n                    Users = userName.get(\"OptionList\");\r\n                    //selectedRecord[\"nusercode\"] = undefined; \r\n                selectedRecord[\"sinvestigatorname\"] = response.data[0].susername; \r\n                selectedRecord[\"sphoneno\"] = response.data[0].sphoneno; \r\n                selectedRecord[\"semail\"] = response.data[0].semail; \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRetrievalCertificateDetail(retrievalcertificate, fromDate, toDate, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"retrievalcertificate/getRetrievalCertificate\", {\r\n            nretrievalcertificatecode: retrievalcertificate.nretrievalcertificatecode, fromDate, toDate,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport function reloadRetrievalCertificate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"retrievalcertificate/getRetrievalCertificate\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const reportRetrievalCetificate = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"retrievalcertificate/RetrievalReportCertificate\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showConfirmAlert: false\r\n                    }\r\n                })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const getProjectBasedOnProjectType = (nprojectTypeCode, userInfo, selectedRecord) =>{\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"retrievalcertificate/getProject\", {\r\n            \"nprojecttypecode\": nprojectTypeCode, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                const projectMap = constructOptionList(response.data || [], \"nprojectmastercode\",\r\n                    \"sprojectname\", undefined, undefined, true);\r\n                const projectList = projectMap.get(\"OptionList\");\r\n                selectedRecord[\"nprojectmastercode\"] = \"\";\r\n                selectedRecord[\"semail\"] = \"\";\r\n                selectedRecord[\"sinvestigatorname\"] = \"\";\r\n                selectedRecord[\"sphoneno\"] = \"\";\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    projectList,\r\n                    selectedRecord,\r\n                    loading: false\r\n\r\n                }\r\n            })\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}