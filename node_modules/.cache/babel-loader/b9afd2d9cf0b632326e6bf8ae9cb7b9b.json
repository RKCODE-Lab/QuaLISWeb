{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import Axios from'axios';import{toast}from'react-toastify';// import {\n//     getComboLabelValue\n// } from '../components/CommonScript'\nimport{DEFAULT_RETURN}from'./LoginTypes';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import{transactionStatus}from'./../components/Enumeration';export function openInstrumentCategoryModal(screenName,operation,primaryKeyName,masterData,userInfo,ncontrolcode){return function(dispatch){if(operation===\"create\"||operation===\"update\"){var Technique=rsapi.post(\"/technique/getTechnique\",{\"userinfo\":userInfo});var Interfacetype=rsapi.post(\"/instrumentcategory/getInterfacetype\",{\"userinfo\":userInfo});var urlArray=[];if(operation===\"create\"){urlArray=[Technique,Interfacetype];}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};selectedRecord[\"nstatus\"]=1;selectedRecord[\"ninstrumentcatcode\"]=0;selectedRecord[\"ncalibrationreq\"]=transactionStatus.NO;selectedRecord[\"ncategorybasedflow\"]=transactionStatus.NO;selectedRecord[\"ndefaultstatus\"]=transactionStatus.NO;dispatch({type:DEFAULT_RETURN,payload:{Technique:response[0].data||[],Interfacetype:response[1].data||[],operation:operation,screenName:screenName,selectedRecord:selectedRecord,openModal:true,ncontrolcode:ncontrolcode,loading:false}});}).catch(function(error){dispatch(initRequest(false));if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}};}export function fetchInstrumentCategoryById(editParam){return function(dispatch){var _rsapi$post;var URL1=rsapi.post('technique/getTechnique',{\"userinfo\":editParam.userInfo});var URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\",(_rsapi$post={},_defineProperty(_rsapi$post,editParam.primaryKeyField,editParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",editParam.userInfo),_rsapi$post));var URL3=rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo});dispatch(initRequest(true));Axios.all([URL1,URL2,URL3]).then(function(response){var selectedRecord={};var selectedId=editParam.primaryKeyValue;selectedRecord=response[1].data;// let Technique = response[0].data;\n// let Interfacetype = response[2].data;\nselectedRecord['ntechniquecode']={value:response[1].data.ntechniquecode,label:response[1].data.stechniquename};selectedRecord['ninterfacetypecode']={value:response[1].data.ninterfacetypecode,label:response[1].data.sinterfacetypename};// getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\n//  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\ndispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,Technique:response[0].data||[],Interfacetype:response[2].data||[],operation:editParam.operation,openModal:true,screenName:editParam.screenName,ncontrolcode:editParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/InstrumentCategoryAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","intl","transactionStatus","openInstrumentCategoryModal","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolcode","dispatch","Technique","post","Interfacetype","urlArray","all","then","response","selectedRecord","NO","type","payload","data","openModal","loading","catch","error","status","message","warn","formatMessage","id","fetchInstrumentCategoryById","editParam","URL1","URL2","primaryKeyField","primaryKeyValue","URL3","selectedId","value","ntechniquecode","label","stechniquename","ninterfacetypecode","sinterfacetypename","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\n// import {\r\n//     getComboLabelValue\r\n// } from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from './../components/Enumeration';\r\n\r\n\r\n    export function openInstrumentCategoryModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n        return function (dispatch) {\r\n            if (operation === \"create\" || operation === \"update\" ) {\r\n                const Technique = rsapi.post(\"/technique/getTechnique\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n    \r\n                const Interfacetype = rsapi.post(\"/instrumentcategory/getInterfacetype\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n               \r\n    \r\n                let urlArray = [];\r\n                if (operation === \"create\") {\r\n                   \r\n                    urlArray = [Technique, Interfacetype];\r\n                } \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                          let selectedRecord = {};\r\n                            selectedRecord[\"nstatus\"] = 1;\r\n                            selectedRecord[\"ninstrumentcatcode\"] = 0;\r\n                            selectedRecord[\"ncalibrationreq\"] = transactionStatus.NO;\r\n                            selectedRecord[\"ncategorybasedflow\"] = transactionStatus.NO;\r\n                            selectedRecord[\"ndefaultstatus\"] = transactionStatus.NO;\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                Technique: response[0].data || [],\r\n                                Interfacetype: response[1].data || [],\r\n                                operation,\r\n                                screenName,\r\n                                selectedRecord,\r\n                                openModal: true,\r\n                                ncontrolcode, loading: false\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(initRequest(false));\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: error.response.data\r\n                            }));\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n    \r\n    export function fetchInstrumentCategoryById (editParam){  \r\n        return function(dispatch){\r\n            const URL1= rsapi.post('technique/getTechnique',{\"userinfo\":editParam.userInfo})\r\n            const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n            const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\r\n            dispatch(initRequest(true));\r\n            Axios.all([URL1,URL2,URL3])\r\n            .then(response=> { \r\n                let selectedRecord={}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord=response[1].data\r\n               // let Technique = response[0].data;\r\n               // let Interfacetype = response[2].data;\r\n\r\n                selectedRecord['ntechniquecode']={value:response[1].data.ntechniquecode,label:response[1].data.stechniquename}\r\n                selectedRecord['ninterfacetypecode']={value:response[1].data.ninterfacetypecode,label:response[1].data.sinterfacetypename}\r\n\r\n              // getComboLabelValue(selectedRecord, Technique, \"ntechniquecode\", \"stechniquename\");\r\n              //  getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord ,\r\n                    Technique: response[0].data || [],\r\n                    Interfacetype: response[2].data || [],\r\n                    operation:editParam.operation,\r\n                    openModal: true,\r\n                    screenName:editParam.screenName,\r\n                    ncontrolcode:editParam.ncontrolCode,\r\n                    loading:false,selectedId\r\n                }\r\n                }); \r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        }\r\n     }\r\n"]},"metadata":{},"sourceType":"module"}