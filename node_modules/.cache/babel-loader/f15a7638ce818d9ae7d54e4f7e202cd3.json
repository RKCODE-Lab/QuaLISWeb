{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\contactmaster\\\\ManufacturerSiteTab.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { FormattedMessage } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddContactInfoManufacturer from '../../pages/contactmaster/AddContactInfoManufacturer';\nimport AddSiteManufacturer from '../../pages/contactmaster/AddSiteManufacturer';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, validateEmail, validatePhoneNumber, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify, replaceBackSlash } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport ManufacturerTabsAccordion from './ManufacturerTabsAccordion';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component'; //import ReactTooltip from 'react-tooltip';\n\nimport AddManufacturerFile from './AddManufacturerFile';\n\nclass ManufacturerSiteTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.ManufacturerContactInfo, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.openModalContact = input => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal: true,\n          operation: input.operation,\n          selectedRecord: {\n            \"ndefaultstatus\": transactionStatus.NO\n          },\n          defaultSite: undefined,\n          ncontrolCode: input.ncontrolCode,\n          screenName: \"IDS_SITECONTACT\",\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.manufacturerSiteAccordion = manufacturerSiteAddress => {\n      let primaryKeyField = \"nmanufcontactcode\";\n      const addManufacturerContactId = this.props.controlMap.has(\"AddManufacturerContactInfo\") && this.props.controlMap.get(\"AddManufacturerContactInfo\").ncontrolcode;\n      const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\n      const editContactParam = {\n        screenName: \"ManufacturerContact\",\n        primaryKeyField: \"nmanufcontactcode\",\n        operation: \"update\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: editManufacturerContactId\n      };\n      const AddContactParam = {\n        screenName: \"ManufacturerContact\",\n        primaryKeyField,\n        undefined,\n        operation: \"create\",\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        ncontrolCode: addManufacturerContactId\n      };\n      const accordionMap = new Map();\n      manufacturerSiteAddress.map(siteAddress => accordionMap.set(siteAddress.nmanufsitecode, /*#__PURE__*/React.createElement(ManufacturerTabsAccordion, {\n        siteAddress: siteAddress,\n        getSiteManufacturerLoadEdit: this.props.getSiteManufacturerLoadEdit,\n        masterData: this.props.masterData,\n        ConfirmDelete: this.ConfirmDelete,\n        addManufacturerContactId: addManufacturerContactId,\n        AddContactParam: AddContactParam,\n        openModalContact: this.openModalContact // tabDetail={this.tabDetail(userSite)}   \n        ,\n        primaryKeyField: primaryKeyField,\n        expandField: \"expanded\",\n        detailedFieldList: this.detailedFieldList,\n        extractedColumnList: this.ContactColumns,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        data: this.state.ManufacturerContactInfo || [],\n        ManufacturerContactInfo: this.state.ManufacturerContactInfo || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        controlMap: this.props.controlMap,\n        userRoleControlRights: this.props.userRoleControlRights || [],\n        methodUrl: \"ManufacturerContactInfo\",\n        getContactManufacturerLoadEdit: this.props.getContactManufacturerLoadEdit,\n        editParam: editContactParam,\n        deleteParam: {\n          operation: \"delete\"\n        },\n        deleteRecord: this.DeleteContact,\n        scrollable: \"scrollable\",\n        isActionRequired: true,\n        selectedId: this.props.selectedId,\n        hasDynamicColSize: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.Delete(obj));\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'ntransactionstatus') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        } else if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else if (event.target.type === \"radio\") {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\" || event.target.name === \"sfaxno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        } // selectedRecord[event.target.name] = event.target.value;\n\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData; //.value;\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\n        let inputParam = {};\n        let clearSelectedRecordField = [];\n\n        if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\n          inputParam = this.SaveSiteDetails(saveType, formRef);\n          clearSelectedRecordField = [{\n            \"idsName\": \"IDS_SITENAME\",\n            \"dataField\": \"smanufsitename\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_ADDRESS1\",\n            \"dataField\": \"saddress1\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_ADDRESS2\",\n            \"dataField\": \"saddress2\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_ADDRESS3\",\n            \"dataField\": \"saddress3\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_DEFAULT\",\n            \"dataField\": \"ndefaultstatus\",\n            \"width\": \"100px\",\n            \"isClearField\": true,\n            \"preSetValue\": 4\n          }];\n        } else if (this.props.screenName === \"IDS_SITECONTACT\") {\n          inputParam = this.SaveContactInfo(saveType, formRef);\n          clearSelectedRecordField = [{\n            \"idsName\": \"IDS_CONTACTNAME\",\n            \"dataField\": \"scontactname\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_PHONE\",\n            \"dataField\": \"sphoneno\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_MOBILE\",\n            \"dataField\": \"smobileno\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_FAX\",\n            \"dataField\": \"sfaxno\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_EMAILID\",\n            \"dataField\": \"semail\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_COMMENTS\",\n            \"dataField\": \"scomments\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_DEFAULT\",\n            \"dataField\": \"ndefaultstatus\",\n            \"width\": \"100px\",\n            \"isClearField\": true,\n            \"preSetValue\": 4\n          }];\n        } else {\n          inputParam = this.SaveManufacturerFile(saveType, formRef);\n          clearSelectedRecordField = [{\n            \"idsName\": \"IDS_FILENAME\",\n            \"dataField\": \"slinkfilename\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_DESCRIPTION\",\n            \"dataField\": \"sdescription\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }, {\n            \"idsName\": \"IDS_DESCRIPTION\",\n            \"dataField\": \"slinkdescription\",\n            \"width\": \"200px\",\n            \"controlType\": \"textbox\",\n            \"isClearField\": true\n          }];\n        }\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\", \"\", \"\", clearSelectedRecordField);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.DeleteContact = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[\"manufacturercontactinfo\"] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: \"ContactInfo\",\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        dataState: this.state.dataState,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: \"Contact\",\n            operation: \"delete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: \"Contact\",\n              operation: \"delete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.Delete = deleteParam => {\n      let inputData = [];\n\n      if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      inputData[deleteParam.Type] = deleteParam.selectedRecord;\n      inputData[\"userinfo\"] = this.props.userInfo;\n      const inputParam = {\n        methodUrl: deleteParam.methodURL,\n        classUrl: this.props.inputParam.classUrl,\n        inputData: inputData,\n        operation: \"delete\",\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } //this.props.crudMaster(inputParam, this.props.masterData);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    this.onDropManufacturerFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      isSiteOpen: false,\n      isContactOpen: false,\n      siteSelectedRecord: {},\n      contactSelectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\n      Country: [],\n      SiteCode: this.props.masterData.SiteCode,\n      selectedRecord: {},\n      countryCode: []\n    };\n    this.ContactColumns = [{\n      \"idsName\": \"IDS_CONTACTNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"scontactname\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"semail\",\n      idsName: \"IDS_EMAILID\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      dataField: \"sdefaultContact\",\n      idsName: \"IDS_DEFAULT\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.siteColumns = [{\n      \"idsName\": \"IDS_MANUFSITENAME\",\n      \"mandatory\": true,\n      \"dataField\": \"smanufsitename\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_ADDRESS1\",\n      \"mandatory\": true,\n      \"dataField\": \"saddress1\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_COUNTRYNAME\",\n      \"mandatory\": true,\n      \"dataField\": \"ncountrycode\",\n      \"width\": \"150px\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.manufacturerFileFTP = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }];\n    this.manufacturerFileLink = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"slinkfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_LINKNAME\",\n      \"dataField\": \"nlinkcode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.detailedFieldList = [{\n      \"dataField\": \"sphoneno\",\n      \"idsName\": \"IDS_PHONE\",\n      columnSize: \"4\"\n    }, {\n      \"idsName\": \"IDS_MOBILE\",\n      \"dataField\": \"smobileno\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"sfaxno\",\n      idsName: \"IDS_FAX\",\n      columnSize: \"4\"\n    }, {\n      dataField: \"scomments\",\n      idsName: \"IDS_COMMENTS\",\n      columnSize: \"12\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    const addManufacturerSiteId = this.props.controlMap.has(\"AddManufacturerSiteAddress\") && this.props.controlMap.get(\"AddManufacturerSiteAddress\").ncontrolcode; // const editManufacturerSiteId = this.props.controlMap.has(\"EditManufacturerSiteAddress\") && this.props.controlMap.get(\"EditManufacturerSiteAddress\").ncontrolcode;\n    // const deleteManufacturerSiteId = this.props.controlMap.has(\"DeleteManufacturerSiteAddress\") && this.props.controlMap.get(\"DeleteManufacturerSiteAddress\").ncontrolcode\n    //const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\n    // const deleteManufacturerContactId = this.props.controlMap.has(\"DeleteManufacturerContactInfo\") && this.props.controlMap.get(\"DeleteManufacturerContactInfo\").ncontrolcode\n    //let primaryKeyField = \"nmanufcontactcode\";\n    // const editContactParam = {\n    //     screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\n    //     inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\n    // };\n    // const deleteParam = { operation: \"delete\" };\n\n    const mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\n      this.siteColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else if (this.props.screenName === \"IDS_SITECONTACT\") {\n      this.ContactColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    } else if (this.props.screenName === \"IDS_MANUFACTURERFILE\") {\n      //ALPD-898 Fix\n      if (this.props.selectedRecord.nattachmenttypecode === attachmentType.FTP) {\n        this.manufacturerFileFTP.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n      } else {\n        this.manufacturerFileLink.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tab.Pane, {\n      \"aria-labelledby\": \"Version-tab\",\n      className: \"p-0 active show\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters pt-2 pb-2 col-12 text-right border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addManufacturerSiteId) === -1,\n      onClick: () => this.props.getSiteManufacturerLoadEdit(\"SiteManufacturer\", \"create\", this.props.masterData.selectedManufacturer.nmanufcode, undefined, addManufacturerSiteId, this.props.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MANUFACTURESITE\",\n      defaultMessage: \"Site Details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 53\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 41\n      }\n    }, this.props.masterData.ManufacturerSiteAddress && this.props.masterData.ManufacturerSiteAddress.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"smanufsitename\",\n      accordionComponent: this.manufacturerSiteAccordion(this.props.masterData.ManufacturerSiteAddress),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getContactInfo,\n      accordionPrimaryKey: \"nmanufsitecode\",\n      accordionObjectName: \"siteAddress\",\n      selectedKey: this.props.masterData.selectedSite.nmanufsitecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 49\n      }\n    }) : \"\"))))))), /*#__PURE__*/React.createElement(React.Fragment, null, this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      showSaveContinue: true,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation //  formatMessage={this.props.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_MANUFACTURESITE\" ? /*#__PURE__*/React.createElement(AddSiteManufacturer, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //   formatMessage={this.props.formatMessage}\n        ,\n        Country: this.props.Country || [],\n        inputParam: this.props.inputParam // defaultValue={this.props.countryCode}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 37\n        }\n      }) : this.props.screenName === \"IDS_SITECONTACT\" ? /*#__PURE__*/React.createElement(AddContactInfoManufacturer, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //  formatMessage={this.props.formatMessage}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 41\n        }\n      }) : this.props.screenName === \"IDS_MANUFACTURERFILE\" ?\n      /*#__PURE__*/\n      //ALPD-898 Fix\n      React.createElement(AddManufacturerFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropManufacturerFile,\n        onDropAccepted: this.onDropAccepted,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        onComboChange: this.onComboChange,\n        linkMaster: this.props.linkMaster,\n        editFiles: this.props.editFiles,\n        maxSize: 20 // maxFiles={this.props.operation === \"update\" ? 1 : 3}\n        // multiple={this.props.operation === \"update\" ? false : true}\n        ,\n        maxFiles: 1,\n        multiple: false,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_MANUFACTURERFILE\"\n        }),\n        name: \"manufacturerfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 45\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    })));\n  }\n\n  SaveSiteDetails(saveType, formRef) {\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmanufsitecode\", \"ncountrycode\", \"smanufsitename\", \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"SiteAddress\",\n        selectedObject: \"selectedSite\",\n        primaryKeyField: \"nmanufsitecode\"\n      };\n      inputData[\"manufacturersiteaddress\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\n        } else {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        }\n      });\n    } else {\n      inputData[\"manufacturersiteaddress\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode\n      };\n      fieldList.map(item => {\n        if (item === \"ncountrycode\") {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item].value;\n        } else {\n          return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item];\n        }\n      });\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"SiteAddress\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      postParam: postParam,\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SaveContactInfo(saveType, formRef) {\n    let dataState = undefined;\n    let inputData = [];\n    let postParam = undefined;\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmanufcontactcode\", \"scontactname\", \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\n    let selectedId = null;\n\n    if (this.props.operation === \"update\") {\n      postParam = {\n        inputListName: \"ContactInfo\",\n        selectedObject: \"selectedContact\",\n        primaryKeyField: \"nmanufcontactcode\"\n      };\n      inputData[\"manufacturercontactinfo\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\n        \"nmanufsitecode\": this.props.masterData.SiteCode\n      };\n      selectedId = this.props.selectedRecord.nmanufcontactcode;\n      fieldList.map(item => {\n        return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      dataState = this.state.dataState;\n    } else {\n      inputData[\"manufacturercontactinfo\"] = {\n        \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\n        \"nmanufsitecode\": this.props.masterData.SiteCode\n      };\n      fieldList.map(item => {\n        return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n      inputData[\"manufacturercontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ? this.state.selectedRecord.ndefaultstatus : transactionStatus.YES;\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"ContactInfo\",\n      inputData: inputData,\n      selectedId,\n      operation: this.props.operation,\n      saveType,\n      formRef,\n      dataState,\n      postParam: postParam,\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam; // this.props.crudMaster(inputParam, this.props.masterData);\n  }\n\n  SaveManufacturerFile(saveType, formRef) {\n    const selectedRecord = this.state.selectedRecord;\n    const acceptedFiles = selectedRecord.sfilename;\n    const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n    let isFileEdited = transactionStatus.NO;\n    let manufacturerFileArray = [];\n    let manufacturerFile = {\n      nmanufcode: this.props.masterData.selectedManufacturer.nmanufcode,\n      nmanufacturerfilecode: selectedRecord.nmanufacturerfilecode ? selectedRecord.nmanufacturerfilecode : 0,\n      nstatus: transactionStatus.ACTIVE,\n      nattachmenttypecode,\n      ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n    };\n    const formData = new FormData();\n\n    if (nattachmenttypecode === attachmentType.FTP) {\n      if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          const tempData = Object.assign({}, manufacturerFile);\n          const splittedFileName = file.name.split('.');\n          const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n          const ssystemfilename = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? selectedRecord.ssystemfilename.split('.') : create_UUID();\n          const filesystemfileext = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? file.name.split('.')[ssystemfilename.length - 1] : fileExtension;\n          const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nmanufacturerfilecode && selectedRecord.nmanufacturerfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n          tempData[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(file.name ? file.name : \"\"), false);\n          tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n          tempData[\"nlinkcode\"] = transactionStatus.NA;\n          tempData[\"ssystemfilename\"] = uniquefilename;\n          tempData[\"nfilesize\"] = file.size;\n          formData.append(\"uploadedFile\" + index, file);\n          formData.append(\"uniquefilename\" + index, uniquefilename);\n          manufacturerFileArray.push(tempData);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n        isFileEdited = transactionStatus.YES;\n      } else {\n        manufacturerFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sfilename ? selectedRecord.sfilename : \"\"), false);\n        manufacturerFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n        manufacturerFile[\"nlinkcode\"] = transactionStatus.NA;\n        manufacturerFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n        manufacturerFile[\"nfilesize\"] = selectedRecord.nfilesize;\n        manufacturerFileArray.push(manufacturerFile);\n      }\n    } else {\n      manufacturerFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkfilename ? selectedRecord.slinkfilename.trim() : \"\"), false);\n      manufacturerFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"), false);\n      manufacturerFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n      manufacturerFile[\"ssystemfilename\"] = \"\";\n      manufacturerFile[\"nfilesize\"] = 0;\n      manufacturerFileArray.push(manufacturerFile);\n    }\n\n    formData.append(\"isFileEdited\", isFileEdited);\n    formData.append(\"manufacturerfile\", JSON.stringify(manufacturerFileArray)); // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\n    ///  let selectedId = null;\n\n    let postParam = undefined;\n\n    if (this.props.operation === \"update\") {\n      // edit\n      postParam = {\n        inputListName: \"Manufacturer\",\n        selectedObject: \"selectedManufacturer\",\n        primaryKeyField: \"nmanufcode\"\n      }; //  selectedId = selectedRecord[\"nmanufacturerfilecode\"];\n    }\n\n    const inputParam = {\n      inputData: {\n        \"userinfo\": { ...this.props.userInfo,\n          sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\n          smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\n          //ALPD-1621(while saving the file and link,audit trail is not captured respective language)\n          slanguagename: Lims_JSON_stringify(this.props.userInfo.slanguagename)\n        }\n      },\n      formData: formData,\n      isFileupload: true,\n      operation: this.props.operation,\n      classUrl: \"manufacturer\",\n      saveType,\n      formRef,\n      methodUrl: \"ManufacturerFile\",\n      postParam,\n      selectedRecord: { ...this.state.selectedRecord\n      }\n    };\n    return inputParam;\n  } // DeleteContact = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\n\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      this.setState({\n        isSiteOpen: false,\n        isContactOpen: false,\n        ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\n        SiteCode: this.props.masterData.SiteCode,\n        Country: this.props.masterData.Country,\n        dataState\n      });\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(ManufacturerSiteTab);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/contactmaster/ManufacturerSiteTab.jsx"],"names":["React","Component","Row","Col","Card","Tab","Nav","injectIntl","FormattedMessage","FontAwesomeIcon","faPlus","process","SlideOutModal","AddContactInfoManufacturer","AddSiteManufacturer","DEFAULT_RETURN","showEsign","validateEmail","validatePhoneNumber","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","Lims_JSON_stringify","replaceBackSlash","Esign","transactionStatus","attachmentType","CustomAccordion","ManufacturerTabsAccordion","toast","ConfirmMessage","AddManufacturerFile","ManufacturerSiteTab","constructor","props","dataStateChange","event","setState","dataResult","state","ManufacturerContactInfo","dataState","openModalContact","input","updateInfo","typeName","data","openChildModal","operation","selectedRecord","NO","defaultSite","undefined","ncontrolCode","screenName","loading","updateStore","manufacturerSiteAccordion","manufacturerSiteAddress","primaryKeyField","addManufacturerContactId","controlMap","has","get","ncontrolcode","editManufacturerContactId","editContactParam","inputParam","userInfo","AddContactParam","accordionMap","Map","map","siteAddress","set","nmanufsitecode","getSiteManufacturerLoadEdit","masterData","ConfirmDelete","detailedFieldList","ContactColumns","userRoleControlRights","getContactManufacturerLoadEdit","DeleteContact","selectedId","obj","confirmMessage","confirm","intl","formatMessage","id","Delete","onInputOnChange","optional","target","type","name","checked","ACTIVE","DEACTIVE","YES","value","onComboChange","comboData","fieldName","closeModal","loadEsign","onSaveClick","saveType","formRef","clearSelectedRecordField","SaveSiteDetails","SaveContactInfo","SaveManufacturerFile","esignRights","nformcode","screenData","crudMaster","warn","deleteParam","inputData","expanded","methodUrl","classUrl","Type","methodURL","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","onDropManufacturerFile","attachedFiles","maxSize","actionType","deleteAttachment","file","skip","take","settings","parseInt","isSiteOpen","isContactOpen","siteSelectedRecord","contactSelectedRecord","Country","SiteCode","countryCode","dataField","idsName","siteColumns","manufacturerFileFTP","manufacturerFileLink","columnSize","render","addManufacturerSiteId","mandatoryFields","forEach","item","mandatory","push","nattachmenttypecode","FTP","indexOf","selectedManufacturer","nmanufcode","ManufacturerSiteAddress","length","getContactInfo","selectedSite","onDropAccepted","linkMaster","editFiles","postParam","fieldList","inputListName","selectedObject","nmanufcontactcode","ndefaultstatus","acceptedFiles","sfilename","isFileEdited","manufacturerFileArray","manufacturerFile","nmanufacturerfilecode","nstatus","LINK","formData","FormData","Array","isArray","index","tempData","Object","assign","splittedFileName","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","sdescription","trim","NA","size","append","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","sformname","smodulename","slanguagename","isFileupload","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Tab, Nav } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddContactInfoManufacturer from '../../pages/contactmaster/AddContactInfoManufacturer';\r\nimport AddSiteManufacturer from '../../pages/contactmaster/AddSiteManufacturer';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, validateEmail, validatePhoneNumber, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, Lims_JSON_stringify,replaceBackSlash } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\nimport ManufacturerTabsAccordion from './ManufacturerTabsAccordion';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n//import ReactTooltip from 'react-tooltip';\r\nimport AddManufacturerFile from './AddManufacturerFile';\r\n\r\nclass ManufacturerSiteTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5\r\n        };\r\n        this.state = {\r\n            isSiteOpen: false, isContactOpen: false, siteSelectedRecord: {}, contactSelectedRecord: {}, dataResult: [],\r\n            dataState: dataState, ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo, Country: [],\r\n            SiteCode: this.props.masterData.SiteCode, selectedRecord: {}, countryCode: [],\r\n\r\n        };\r\n        this.ContactColumns = [{ \"idsName\": \"IDS_CONTACTNAME\", \"mandatory\": true, \"dataField\": \"scontactname\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { dataField: \"semail\", idsName: \"IDS_EMAILID\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { dataField: \"sdefaultContact\", idsName: \"IDS_DEFAULT\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n\r\n\r\n        ];\r\n\r\n        this.siteColumns = [{ \"idsName\": \"IDS_MANUFSITENAME\", \"mandatory\": true, \"dataField\": \"smanufsitename\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_ADDRESS1\", \"mandatory\": true, \"dataField\": \"saddress1\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_COUNTRYNAME\", \"mandatory\": true, \"dataField\": \"ncountrycode\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n\r\n        ];\r\n\r\n        this.manufacturerFileFTP = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n        ];\r\n\r\n        this.manufacturerFileLink = [\r\n            { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n        ];\r\n\r\n        this.detailedFieldList = [\r\n            { \"dataField\": \"sphoneno\", \"idsName\": \"IDS_PHONE\", columnSize: \"4\" },\r\n            { \"idsName\": \"IDS_MOBILE\", \"dataField\": \"smobileno\", columnSize: \"4\" },\r\n            { dataField: \"sfaxno\", idsName: \"IDS_FAX\", columnSize: \"4\" },\r\n            { dataField: \"scomments\", idsName: \"IDS_COMMENTS\", columnSize: \"12\" }\r\n\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.ManufacturerContactInfo, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n    openModalContact = (input) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openChildModal: true, operation: input.operation,\r\n                selectedRecord: { \"ndefaultstatus\": transactionStatus.NO },\r\n                defaultSite: undefined, ncontrolCode: input.ncontrolCode,\r\n                screenName: \"IDS_SITECONTACT\", loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    render() {\r\n\r\n        const addManufacturerSiteId = this.props.controlMap.has(\"AddManufacturerSiteAddress\") && this.props.controlMap.get(\"AddManufacturerSiteAddress\").ncontrolcode\r\n        // const editManufacturerSiteId = this.props.controlMap.has(\"EditManufacturerSiteAddress\") && this.props.controlMap.get(\"EditManufacturerSiteAddress\").ncontrolcode;\r\n        // const deleteManufacturerSiteId = this.props.controlMap.has(\"DeleteManufacturerSiteAddress\") && this.props.controlMap.get(\"DeleteManufacturerSiteAddress\").ncontrolcode\r\n\r\n\r\n        //const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\r\n        // const deleteManufacturerContactId = this.props.controlMap.has(\"DeleteManufacturerContactInfo\") && this.props.controlMap.get(\"DeleteManufacturerContactInfo\").ncontrolcode\r\n\r\n        //let primaryKeyField = \"nmanufcontactcode\";\r\n\r\n        // const editContactParam = {\r\n        //     screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\r\n        //     inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\r\n        // };\r\n\r\n        // const deleteParam = { operation: \"delete\" };\r\n        const mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\r\n            this.siteColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        else if (this.props.screenName === \"IDS_SITECONTACT\") {\r\n            this.ContactColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        else if (this.props.screenName === \"IDS_MANUFACTURERFILE\") {     //ALPD-898 Fix\r\n            if (this.props.selectedRecord.nattachmenttypecode === attachmentType.FTP) {\r\n                this.manufacturerFileFTP.forEach(item => item.mandatory === true ?\r\n                    mandatoryFields.push(item) : \"\"\r\n                );\r\n            }\r\n            else {\r\n                this.manufacturerFileLink.forEach(item => item.mandatory === true ?\r\n                    mandatoryFields.push(item) : \"\"\r\n                );\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Row noGutters={true}>\r\n                    <Col md='12'>\r\n                        <Card className=\"at-tabs\">\r\n                            <Tab.Content>\r\n                                <Tab.Pane aria-labelledby=\"Version-tab\" className=\"p-0 active show\">\r\n\r\n                                    <Row className=\"no-gutters pt-2 pb-2 col-12 text-right border-bottom\" >\r\n                                        <Col md={12}>\r\n                                            <div className=\"d-flex justify-content-end\">\r\n                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\"/> */}\r\n                                                <Nav.Link className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addManufacturerSiteId) === -1}\r\n                                                    onClick={() => this.props.getSiteManufacturerLoadEdit(\"SiteManufacturer\", \"create\", this.props.masterData.selectedManufacturer.nmanufcode, undefined, addManufacturerSiteId, this.props.userInfo)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                                    <FormattedMessage id='IDS_MANUFACTURESITE' defaultMessage='Site Details' />\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                        </Col>\r\n\r\n                                    </Row>\r\n\r\n                                    <Row className=\"no-gutters\">\r\n                                        <Col md={12}>\r\n                                            {this.props.masterData.ManufacturerSiteAddress && this.props.masterData.ManufacturerSiteAddress.length > 0 ?\r\n                                                <CustomAccordion key=\"filter\"\r\n                                                    accordionTitle={\"smanufsitename\"}\r\n                                                    accordionComponent={this.manufacturerSiteAccordion(this.props.masterData.ManufacturerSiteAddress)}\r\n                                                    inputParam={{ masterData: this.props.masterData, userInfo: this.props.userInfo }}\r\n                                                    accordionClick={this.props.getContactInfo}\r\n                                                    accordionPrimaryKey={\"nmanufsitecode\"}\r\n                                                    accordionObjectName={\"siteAddress\"}\r\n                                                    selectedKey={this.props.masterData.selectedSite.nmanufsitecode}\r\n                                                />\r\n                                                : \"\"}\r\n                                        </Col>\r\n                                    </Row>\r\n                                    {/* <Row>\r\n                                        <Col>\r\n                                            <DataGrid\r\n                                                primaryKeyField={primaryKeyField}\r\n                                                expandField=\"expanded\"\r\n                                                detailedFieldList={this.detailedFieldList}\r\n                                                extractedColumnList={this.ContactColumns}\r\n                                                inputParam={this.props.inputParam}\r\n                                                userInfo={this.props.userInfo}\r\n                                                // width=\"600px\"\r\n                                                data={this.state.ManufacturerContactInfo || []}\r\n                                                dataResult={process(this.state.ManufacturerContactInfo || [], this.state.dataState)}\r\n                                                dataState={this.state.dataState}\r\n                                                dataStateChange={this.dataStateChange}\r\n                                                controlMap={this.props.controlMap}\r\n                                                userRoleControlRights={this.props.userRoleControlRights || []}\r\n                                                methodUrl=\"ManufacturerContactInfo\"\r\n                                                fetchRecord={this.props.getContactManufacturerLoadEdit}\r\n                                                editParam={editContactParam}\r\n                                                deleteParam={{ operation: \"delete\" }}\r\n                                                deleteRecord={this.DeleteContact}\r\n                                                //pageable={false}\r\n                                                scrollable={\"scrollable\"}\r\n                                                isActionRequired={true}\r\n                                                selectedId={this.props.selectedId}\r\n                                            // isComponent={true}\r\n                                            >\r\n                                            </DataGrid>\r\n                                        </Col>\r\n                                    </Row> */}\r\n\r\n                                </Tab.Pane >\r\n                            </Tab.Content >\r\n                        </Card >\r\n                    </Col >\r\n                </Row >\r\n                <>\r\n                    {this.props.openChildModal &&\r\n                        <SlideOutModal show={this.props.openChildModal}\r\n                            closeModal={this.closeModal}\r\n                            operation={this.props.operation}\r\n                            inputParam={this.props.inputParam}\r\n                            screenName={this.props.screenName}\r\n                            showSaveContinue={true}\r\n                            onSaveClick={this.onSaveClick}\r\n                            updateStore={this.props.updateStore}\r\n                            esign={this.props.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={mandatoryFields}\r\n                            addComponent={this.props.loadEsign ?\r\n                                <Esign operation={this.props.operation}\r\n                                    //  formatMessage={this.props.formatMessage}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                /> :\r\n                                this.props.screenName === \"IDS_MANUFACTURESITE\" ?\r\n                                    <AddSiteManufacturer selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        //   formatMessage={this.props.formatMessage}\r\n                                        Country={this.props.Country || []}\r\n                                        inputParam={this.props.inputParam}\r\n                                    // defaultValue={this.props.countryCode}\r\n                                    />\r\n                                    :\r\n                                    this.props.screenName === \"IDS_SITECONTACT\" ?\r\n                                        <AddContactInfoManufacturer\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                        //  formatMessage={this.props.formatMessage}\r\n\r\n                                        />\r\n                                        :\r\n                                        this.props.screenName === \"IDS_MANUFACTURERFILE\" ?      //ALPD-898 Fix\r\n                                            <AddManufacturerFile\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                onDrop={this.onDropManufacturerFile}\r\n                                                onDropAccepted={this.onDropAccepted}\r\n                                                deleteAttachment={this.deleteAttachment}\r\n                                                actionType={this.state.actionType}\r\n                                                onComboChange={this.onComboChange}\r\n                                                linkMaster={this.props.linkMaster}\r\n                                                editFiles={this.props.editFiles}\r\n                                                maxSize={20}\r\n                                                // maxFiles={this.props.operation === \"update\" ? 1 : 3}\r\n                                                // multiple={this.props.operation === \"update\" ? false : true}\r\n                                                maxFiles={1}\r\n                                                multiple={false}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_MANUFACTURERFILE\" })}\r\n                                                name=\"manufacturerfilename\"\r\n                                            /> : \"\"\r\n\r\n\r\n                            }\r\n                        />\r\n\r\n                    }\r\n\r\n                </>\r\n            </>\r\n        );\r\n    }\r\n    manufacturerSiteAccordion = (manufacturerSiteAddress) => {\r\n        let primaryKeyField = \"nmanufcontactcode\";\r\n        const addManufacturerContactId = this.props.controlMap.has(\"AddManufacturerContactInfo\") && this.props.controlMap.get(\"AddManufacturerContactInfo\").ncontrolcode\r\n        const editManufacturerContactId = this.props.controlMap.has(\"EditManufacturerContactInfo\") && this.props.controlMap.get(\"EditManufacturerContactInfo\").ncontrolcode;\r\n        const editContactParam = {\r\n            screenName: \"ManufacturerContact\", primaryKeyField: \"nmanufcontactcode\", operation: \"update\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: editManufacturerContactId\r\n        };\r\n        const AddContactParam = {\r\n            screenName: \"ManufacturerContact\", primaryKeyField, undefined, operation: \"create\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: addManufacturerContactId\r\n        };\r\n\r\n        const accordionMap = new Map();\r\n        manufacturerSiteAddress.map((siteAddress) =>\r\n            accordionMap.set(siteAddress.nmanufsitecode,\r\n                <ManufacturerTabsAccordion siteAddress={siteAddress}\r\n                    getSiteManufacturerLoadEdit={this.props.getSiteManufacturerLoadEdit}\r\n                    masterData={this.props.masterData}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    addManufacturerContactId={addManufacturerContactId}\r\n                    AddContactParam={AddContactParam}\r\n                    openModalContact={this.openModalContact}\r\n                    // tabDetail={this.tabDetail(userSite)}   \r\n\r\n                    primaryKeyField={primaryKeyField}\r\n                    expandField=\"expanded\"\r\n                    detailedFieldList={this.detailedFieldList}\r\n                    extractedColumnList={this.ContactColumns}\r\n                    inputParam={this.props.inputParam}\r\n                    userInfo={this.props.userInfo}\r\n                    data={this.state.ManufacturerContactInfo || []}\r\n                    ManufacturerContactInfo={this.state.ManufacturerContactInfo || []}\r\n                    dataState={this.state.dataState}\r\n                    dataStateChange={this.dataStateChange}\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights || []}\r\n                    methodUrl=\"ManufacturerContactInfo\"\r\n                    getContactManufacturerLoadEdit={this.props.getContactManufacturerLoadEdit}\r\n                    editParam={editContactParam}\r\n                    deleteParam={{ operation: \"delete\" }}\r\n                    deleteRecord={this.DeleteContact}\r\n                    scrollable={\"scrollable\"}\r\n                    isActionRequired={true}\r\n                    selectedId={this.props.selectedId}\r\n                    hasDynamicColSize={true}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.Delete(obj));\r\n    }\r\n\r\n    onInputOnChange = (event, optional) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'ntransactionstatus') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n            else if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n\r\n        }\r\n        else if (event.target.type === \"radio\") {\r\n            selectedRecord[event.target.name] = optional;\r\n        }\r\n\r\n        else {\r\n\r\n            if (event.target.name === \"sphoneno\" || event.target.name === \"smobileno\"\r\n                || event.target.name === \"sfaxno\") {\r\n\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                }\r\n                else {\r\n                    selectedRecord[event.target.name] = event.target.value\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            // selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;//.value;\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.state.selectedRecord['semail'] ? validateEmail(this.state.selectedRecord['semail']) : true) {\r\n            let inputParam = {};\r\n            let clearSelectedRecordField =[];\r\n            if (this.props.screenName === \"IDS_MANUFACTURESITE\") {\r\n                inputParam = this.SaveSiteDetails(saveType, formRef);\r\n\r\n                clearSelectedRecordField =[\r\n                    { \"idsName\": \"IDS_SITENAME\", \"dataField\": \"smanufsitename\", \"width\": \"200px\" ,\"controlType\": \"textbox\",\"isClearField\":true},\r\n                    { \"idsName\": \"IDS_ADDRESS1\", \"dataField\": \"saddress1\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_ADDRESS2\", \"dataField\": \"saddress2\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_ADDRESS3\", \"dataField\": \"saddress3\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_DEFAULT\", \"dataField\": \"ndefaultstatus\", \"width\": \"100px\",\"isClearField\":true,\"preSetValue\":4},\r\n                    \r\n                ]\r\n\r\n            }\r\n            else if (this.props.screenName === \"IDS_SITECONTACT\") {\r\n                inputParam = this.SaveContactInfo(saveType, formRef);\r\n\r\n                clearSelectedRecordField =[\r\n                    { \"idsName\": \"IDS_CONTACTNAME\", \"dataField\": \"scontactname\", \"width\": \"200px\" ,\"controlType\": \"textbox\",\"isClearField\":true},\r\n                    { \"idsName\": \"IDS_PHONE\", \"dataField\": \"sphoneno\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_MOBILE\", \"dataField\": \"smobileno\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_FAX\", \"dataField\": \"sfaxno\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_EMAILID\", \"dataField\": \"semail\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_DEFAULT\", \"dataField\": \"ndefaultstatus\", \"width\": \"100px\",\"isClearField\":true,\"preSetValue\":4},\r\n                    \r\n                ]\r\n            }\r\n            else {\r\n                inputParam = this.SaveManufacturerFile(saveType, formRef);\r\n\r\n                clearSelectedRecordField =[\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"width\": \"200px\" ,\"controlType\": \"textbox\",\"isClearField\":true},\r\n                    { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                    { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"slinkdescription\", \"width\": \"200px\",\"controlType\": \"textbox\",\"isClearField\":true },\r\n                                        \r\n                ]\r\n            }\r\n\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\",\"\",\"\",clearSelectedRecordField);\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n    }\r\n    SaveSiteDetails(saveType, formRef) {\r\n        let inputData = [];\r\n        let postParam = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmanufsitecode\", \"ncountrycode\", \"smanufsitename\",\r\n            \"saddress1\", \"saddress2\", \"saddress3\", \"ndefaultstatus\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"SiteAddress\",\r\n                selectedObject: \"selectedSite\",\r\n                primaryKeyField: \"nmanufsitecode\",\r\n            };\r\n\r\n            inputData[\"manufacturersiteaddress\"] = { \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode };\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item].value : \"\";\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                }\r\n            })\r\n        }\r\n        else {\r\n\r\n            inputData[\"manufacturersiteaddress\"] = { \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode };\r\n\r\n            fieldList.map(item => {\r\n                if (item === \"ncountrycode\") {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item].value\r\n                }\r\n                else {\r\n                    return inputData[\"manufacturersiteaddress\"][item] = this.state.selectedRecord[item]\r\n                }\r\n            })\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"SiteAddress\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef,\r\n            postParam: postParam,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    SaveContactInfo(saveType, formRef) {\r\n\r\n        let dataState = undefined;\r\n        let inputData = [];\r\n        let postParam = undefined;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmanufcontactcode\", \"scontactname\",\r\n            \"sphoneno\", \"smobileno\", \"semail\", \"sfaxno\", \"scomments\", \"ndefaultstatus\"];\r\n\r\n        let selectedId = null;\r\n        if (this.props.operation === \"update\") {\r\n            postParam = {\r\n                inputListName: \"ContactInfo\",\r\n                selectedObject: \"selectedContact\",\r\n                primaryKeyField: \"nmanufcontactcode\",\r\n            };\r\n\r\n            inputData[\"manufacturercontactinfo\"] = {\r\n                \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\r\n                \"nmanufsitecode\": this.props.masterData.SiteCode\r\n            };\r\n\r\n            selectedId = this.props.selectedRecord.nmanufcontactcode;\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            dataState = this.state.dataState;\r\n        }\r\n        else {\r\n\r\n            inputData[\"manufacturercontactinfo\"] = {\r\n                \"nmanufcode\": this.props.masterData.selectedManufacturer.nmanufcode,\r\n                \"nmanufsitecode\": this.props.masterData.SiteCode\r\n            };\r\n            fieldList.map(item => {\r\n                return inputData[\"manufacturercontactinfo\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n            inputData[\"manufacturercontactinfo\"]['ndefaultstatus'] = this.state.selectedRecord && this.state.selectedRecord.ndefaultstatus ?\r\n                this.state.selectedRecord.ndefaultstatus\r\n                : transactionStatus.YES\r\n\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"ContactInfo\",\r\n            inputData: inputData, selectedId,\r\n            operation: this.props.operation, saveType, formRef, dataState,\r\n            postParam: postParam,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n\r\n        }\r\n        return inputParam;\r\n\r\n        // this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n\r\n    SaveManufacturerFile(saveType, formRef) {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let manufacturerFileArray = [];\r\n        let manufacturerFile = {\r\n            nmanufcode: this.props.masterData.selectedManufacturer.nmanufcode,\r\n            nmanufacturerfilecode: selectedRecord.nmanufacturerfilecode ? selectedRecord.nmanufacturerfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, manufacturerFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? selectedRecord.ssystemfilename.split('.') : create_UUID();\r\n                    const filesystemfileext = selectedRecord.ssystemfilename && selectedRecord.ssystemfilename !== undefined ? file.name.split('.')[ssystemfilename.length - 1] : fileExtension;\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nmanufacturerfilecode && selectedRecord.nmanufacturerfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(file.name?file.name :\"\"), false);\r\n                    tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    manufacturerFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                manufacturerFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sfilename?selectedRecord.sfilename:\"\"), false);\r\n                manufacturerFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\r\n                manufacturerFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                manufacturerFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                manufacturerFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                manufacturerFileArray.push(manufacturerFile);\r\n            }\r\n        } else {\r\n            manufacturerFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkfilename ? selectedRecord.slinkfilename.trim() :\"\"), false);\r\n            manufacturerFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"), false);\r\n            manufacturerFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            manufacturerFile[\"ssystemfilename\"] = \"\";\r\n            manufacturerFile[\"nfilesize\"] = 0;\r\n            manufacturerFileArray.push(manufacturerFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"manufacturerfile\", JSON.stringify(manufacturerFileArray));\r\n        // formData.append(\"userinfo\", JSON.stringify(this.props.userInfo));\r\n\r\n\r\n\r\n      ///  let selectedId = null;\r\n        let postParam = undefined;\r\n        if (this.props.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"Manufacturer\", selectedObject: \"selectedManufacturer\", primaryKeyField: \"nmanufcode\" };\r\n          //  selectedId = selectedRecord[\"nmanufacturerfilecode\"];\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.userInfo.smodulename),\r\n                     //ALPD-1621(while saving the file and link,audit trail is not captured respective language)\r\n                    slanguagename: Lims_JSON_stringify(this.props.userInfo.slanguagename)\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.operation,\r\n            classUrl: \"manufacturer\",\r\n            saveType, formRef, methodUrl: \"ManufacturerFile\", postParam,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    // DeleteContact = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\r\n    DeleteContact = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[\"manufacturercontactinfo\"] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: \"ContactInfo\",\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            dataState: this.state.dataState,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: \"Contact\", operation: \"delete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    //Delete = (e, selectedRecord, Type, methodURL, operation, screenName, ncontrolCode) => {\r\n    Delete = (deleteParam) => {\r\n        let inputData = [];\r\n        if (deleteParam.selectedRecord.expanded && deleteParam.selectedRecord.expanded !== undefined) {\r\n            delete deleteParam.selectedRecord.expanded\r\n        }\r\n        inputData[deleteParam.Type] = deleteParam.selectedRecord;\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        const inputParam = {\r\n            methodUrl: deleteParam.methodURL,\r\n            classUrl: this.props.inputParam.classUrl,\r\n            inputData: inputData,\r\n            operation: \"delete\",\r\n            selectedRecord:{...this.state.selectedRecord}\r\n\r\n        }\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n            }\r\n\r\n            this.setState({\r\n                isSiteOpen: false, isContactOpen: false,\r\n                ManufacturerContactInfo: this.props.masterData.ManufacturerContactInfo,\r\n                SiteCode: this.props.masterData.SiteCode, Country: this.props.masterData.Country, dataState\r\n\r\n            });\r\n        }\r\n\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n\r\n    onDropManufacturerFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n}\r\nexport default (injectIntl(ManufacturerSiteTab));"]},"metadata":{},"sourceType":"module"}