{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport rsapi from \"../rsapi\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { attachmentType, parameterType, SampleType, transactionStatus } from \"../components/Enumeration\";\nimport { constructjsonOptionList, constructOptionList, rearrangeDateFormat, //formatInputDate,\nsortData } from \"../components/CommonScript\";\nimport Axios from \"axios\";\nimport { intl } from \"../components/App\";\nimport { initRequest } from \"./LoginAction\";\nexport const sampleTypeOnChange = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let url = \"/testgroup\";\n\n    if (inputParam.classUrl) {\n      url = inputParam.classUrl;\n    }\n\n    rsapi.post(url + inputParam.methodUrl, inputParam.inputData).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          tempFilterData: inputParam.inputData.tempFilterData,\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        masterData[\"ExistingLinkTable\"] = [];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n        toast.warn(error.response.data);\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const filterTestGroup = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/filterTestGroup\", inputParam.inputData).then(response => {\n      sortData(response.data);\n\n      if (searchRef.current) {\n        searchRef.current.value = \"\";\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          filterData: inputParam.inputData.filterData,\n          masterData: { ...masterData,\n            ...response.data,\n            isrulesenginerequired: inputParam['inputData']['filterData']['nsampletypecode']['item']['nrulesenginerequired'],\n            searchedData: undefined\n          },\n          loading: false,\n          testskip: 0,\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const createTree = (selectedRecord, userInfo, masterData, ncontrolCode) => {\n  return dispatch => {\n    //ALPD-1466,1465\n    let isValid = false;\n\n    if (selectedRecord && selectedRecord.ntreeversiontempcode !== \"\") {\n      if (selectedRecord && selectedRecord.nsampletypecode.item.nportalrequired === transactionStatus.YES && masterData.FocusKey === \"root\" && masterData && masterData.TreeTemplateManipulation.length > 0) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_MORETHANONEPROFILENOTALLOWEDCLINICALTYPE\"\n        }));\n      } else if (selectedRecord.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES) {\n        isValid = true;\n      } else if (selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES || selectedRecord.nproductcode) {\n        isValid = true;\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_PRODUCTNOTAVAILABLE\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n      }));\n    }\n\n    if (isValid) {\n      const inputParam = {\n        sampletype: selectedRecord.nsampletypecode.item,\n        ncategorycode: selectedRecord.nproductcatcode.value,\n        ntreeversiontempcode: selectedRecord.ntreeversiontempcode.value,\n        nprojectmastercode: selectedRecord.nprojectmastercode ? selectedRecord.nprojectmastercode.value : -1,\n        userinfo: userInfo,\n        treetemplatemanipulation: masterData.selectedNode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"/testgroup/getTemplateMasterDetails\", { ...inputParam\n      }).then(response => {\n        const treetempTranstestGroup = response.data[\"TreetempTranstestGroup\"] || []; // const treeMandatoryFields = treetempTranstestGroup.map((item, index) => {\n        //         return {\n        //             \"idsName\": item.slabelname,\n        //             \"dataField\": \"sleveldescription_\" + index,\n        //             \"mandatory\": true\n        //         }\n        // });\n        //  const selectedNodeLevel = selectedNode ? selectedNode.slevelcode.split(\"/1\").length-2 : -1;\n\n        const mandatoryFields = [];\n        treetempTranstestGroup.forEach((item, index) => {\n          if (item.sleveldescription === null) {\n            mandatoryFields.push({\n              \"idsName\": item.slabelname,\n              \"dataField\": \"sleveldescription_\" + index,\n              \"mandatory\": true\n            });\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: \"create\",\n            screenName: \"IDS_PROFILETREE\",\n            TreetempTranstestGroup: treetempTranstestGroup,\n            treeMandatoryFields: mandatoryFields,\n            //selectedRecord,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport const editTree = (operation, selectedNode, userinfo, ncontrolCode, filterData, masterData) => {\n  return dispatch => {\n    if (!selectedNode) {\n      return toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTPROFILENODETOEDIT\"\n      }));\n    } //console.log(\"edit Tree:\", selectedNode, masterData);\n\n\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === selectedNode[\"ntreeversiontempcode\"]); // if (treeVersionTemplateIndex !== -1){\n\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus; //}\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (selectedNode) {\n        dispatch(initRequest(true));\n        rsapi.post(\"/testgroup/getTreeById\", {\n          userinfo,\n          treetemplatemanipulation: selectedNode,\n          ntreeversiontempcode: filterData.ntreeversiontempcode.value\n        }).then(response => {\n          const treetempTranstestGroup = response.data;\n          const treeMandatoryFields = treetempTranstestGroup && [{\n            \"idsName\": treetempTranstestGroup.slabelname,\n            \"dataField\": \"sleveldescription\",\n            \"mandatory\": true\n          }];\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: operation,\n              screenName: \"IDS_EDITTREE\",\n              selectedRecord: { ...treetempTranstestGroup\n              },\n              treeMandatoryFields,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTPROFILENODETOEDIT\"\n        }));\n      }\n    }\n  };\n};\nexport const addSpecification = (operation, inputParam, ncontrolCode, masterDatas) => {\n  return dispatch => {\n    //if (inputParam.selectedNode != null && inputParam.selectedNode.schildnode === \"\") {\n    if (inputParam.selectedRecord && inputParam.selectedRecord.ntreeversiontempcode !== \"\") {\n      if (inputParam.selectedRecord.ntreeversiontempcode.item.ntransactionstatus === transactionStatus.RETIRED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        if (inputParam.selectedNode != null && inputParam.selectedNode.nnextchildcode === -1) {\n          if (masterDatas && masterDatas.SelectedSpecification === null && operation === \"copy\") {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_SELECTSPECIFICATION\"\n            }));\n          } else {\n            let urlArray = [];\n\n            if (operation === \"update\") {\n              const testgroupspecification = inputParam.testgroupspecification[0]; // let isValidOperation = false;\n              // if (operation === \"update\"){\n              //     if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION ||\n              //         testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\n              //             isValidOperation = true;\n              //     }\n              //     else {\n              //         toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\n              //         return;\n              //     }\n              // }\n              // else{\n              //     isValidOperation = true;\n              // }\n\n              if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION || testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\n                urlArray = [rsapi.post(\"timezone/getTimeZone\")];\n                urlArray.push(rsapi.post(\"/testgroup/getActiveSpecificationById\", {\n                  testgroupspecification,\n                  userinfo: inputParam.userinfo,\n                  ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value\n                }));\n              } else {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n                }));\n                return;\n              }\n            } else {\n              urlArray = [rsapi.post(\"timezone/getTimeZone\")];\n              urlArray.push(rsapi.post(\"/testgroup/getAddSpecification\", {\n                userinfo: inputParam.userInfo,\n                ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value //currentdate: formatInputDate(new Date(), true)\n\n              }));\n            }\n\n            Axios.all(urlArray).then(response => {\n              let selectedRecord = {};\n              let masterData = inputParam.masterData !== undefined ? inputParam.masterData : masterDatas;\n\n              if (operation === \"update\") {\n                masterData = { ...inputParam.masterData,\n                  ...response[1].data,\n                  testgroupspecification: inputParam.testgroupspecification\n                };\n                selectedRecord = {\n                  sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode && inputParam.selectedRecord.nproductcode.label,\n                  sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\n                  ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\n                  ...response[1].data.SelectedSpecification,\n                  //dexpirydate: new Date(response[1].data[\"sexpirydate\"]),\n                  dexpirydate: rearrangeDateFormat(inputParam.userinfo, response[1].data.SelectedSpecification[\"sexpirydate\"]),\n                  ntzexpirydate: {\n                    \"label\": response[1].data.SelectedSpecification.stimezoneid,\n                    \"value\": response[1].data.SelectedSpecification.ntzexpirydate\n                  }\n                };\n              } else {\n                selectedRecord = {\n                  sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode && inputParam.selectedRecord.nproductcode.label,\n                  sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\n                  sspecname: inputParam.selectedNode.sleveldescription,\n                  ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\n                  dexpirydate: rearrangeDateFormat(inputParam.userInfo, response[1].data.ExpiryDate),\n                  //ncomponentrequired: inputParam.selectedNode.nsampletypecode === SampleType.CLINICALTYPE ? transactionStatus.YES : transactionStatus.NO,\n                  ncomponentrequired: transactionStatus.YES,\n                  // nclinicalspec: inputParam.selectedNode.nsampletypecode===SampleType.CLINICALTYPE?transactionStatus.YES:transactionStatus.NO,\n                  ntransactionstatus: transactionStatus.ACTIVE,\n                  ntzexpirydate: {\n                    \"label\": inputParam.userInfo.stimezoneid,\n                    \"value\": inputParam.userInfo.ntimezonecode\n                  }\n                };\n              }\n\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  openModal: true,\n                  operation: operation,\n                  screenName: \"IDS_SPECIFICATION\",\n                  masterData,\n                  selectedRecord,\n                  timeZoneList: constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", false, false, true).get(\"OptionList\"),\n                  ncontrolCode\n                }\n              });\n            }).catch(error => {\n              if (error.response.status === 500) {\n                toast.error(error.message);\n              } else {\n                toast.warn(error.response.data);\n              }\n            });\n          }\n        } else {\n          if (operation === \"copy\") {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_SELECTSPECIFICATION\"\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_SELECTLASTLEVELNODETOADDSPEC\"\n            }));\n          }\n        }\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n      }));\n    }\n  };\n};\nexport const addComponent = (SelectedSpecification, userInfo, ncontrolCode, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      rsapi.post(\"/testgroup/getAvailableComponent\", {\n        userinfo: userInfo,\n        testgroupspecification: SelectedSpecification\n      }).then(response => {\n        const testGroupSpecSampleType = response.data[\"TestGroupSpecSampleType\"] || [];\n\n        if (testGroupSpecSampleType.length > 0) {\n          const testCategory = constructOptionList(response.data[\"TestCategory\"] || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\n          const sampleTypeMap = constructOptionList(testGroupSpecSampleType, \"ncomponentcode\", \"scomponentname\", false, false, true); // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: \"create\",\n              screenName: \"IDS_COMPONENT\",\n              testGroupInputData: {\n                TestCategory: testCategory.get(\"OptionList\"),\n                TestGroupSpecSampleType: sampleTypeMap.get(\"OptionList\"),\n                TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\n\n              },\n              selectedRecord: {\n                ncomponentcode: sampleTypeMap.get(\"DefaultValue\"),\n                ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\n              },\n              ncontrolCode\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_COMPONENTNOTAVAILABLE\"\n          }));\n        }\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport const addTestGroupTest = (selectedComponent, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\n  return dispatch => {\n    if (masterData.selectedNode !== undefined && masterData.selectedNode !== null) {\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        if (selectedSpecification) {\n          if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n            let openTestModal = false;\n\n            if (selectedSpecification.ncomponentrequired === transactionStatus.YES) {\n              if (selectedComponent == undefined) {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_NEEDCOMPONENTTOADDTEST\"\n                }));\n              } else {\n                openTestModal = true;\n              }\n            } else {\n              openTestModal = true;\n            }\n\n            if (openTestModal === true) {\n              rsapi.post(\"/testgroup/getAvailableTest\", {\n                userinfo: userInfo,\n                testgroupspecsampletype: selectedComponent,\n                ntreeversiontempcode: filterData.ntreeversiontempcode.value\n              }).then(response => {\n                let testCategory; // = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\n                // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\n\n                if (response.data[\"TestCategory\"].length > 0) {\n                  testCategory = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      openModal: true,\n                      operation: \"create\",\n                      screenName: \"IDS_TEST\",\n                      testGroupInputData: {\n                        TestCategory: testCategory.get(\"OptionList\"),\n                        TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\n\n                      },\n                      selectedRecord: {\n                        ntestcategorycode: {\n                          label: response.data[\"SelectedTestCategory\"].stestcategoryname,\n                          value: response.data[\"SelectedTestCategory\"].stestcategorycode,\n                          item: response.data[\"SelectedTestCategory\"]\n                        } //ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\n\n                      },\n                      ncontrolCode\n                    }\n                  });\n                } else {\n                  toast.warn(intl.formatMessage({\n                    id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\n                  }));\n                }\n              }).catch(error => {\n                if (error.response.status === 409 || error.response.status === 417) {\n                  toast.warn(error.response.data);\n                } else {\n                  toast.error(error.message);\n                }\n              });\n            }\n          } else {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n            }));\n          }\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  };\n};\nexport const editTestGroupTest = (operation, selectedTest, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n        const ntestcode = selectedTest.ntestcode;\n        const urlArray = [rsapi.post(\"/testgroup/getActiveTestById\", {\n          userinfo: userInfo,\n          testgrouptest: selectedTest,\n          ntreeversiontempcode: filterData.ntreeversiontempcode.value\n        }), rsapi.post(\"/source/getSource\", {\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getSection\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getMethod\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getInstrumentCategory\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getTestAttachment\", {\n          ntestcode,\n          userinfo: userInfo\n        }), rsapi.post(\"/testmaster/getContainerType\", {\n          ntestcode,\n          userinfo: userInfo\n        })];\n        Axios.all(urlArray).then(response => {\n          // const editObject = response[0].data.TestGroupTest;\n          // const testFileItem = response[0].data.TestGroupTestFile;\n          // const SelectedTest = response[0].data.TestGroupTest;\n          const editObject = response[0].data.SelectedTestGroupTest;\n          const testFileItem = response[0].data.TestGroupTestFile;\n          const SelectedTest = response[0].data.SelectedTest; //const TestGroupTest = response[0].data.TestGroupTest;\n\n          const selectedRecord = { ...editObject,\n            // nsourcecode: {\n            //     \"label\": editObject.ssourcename,\n            //     \"value\": editObject.nsourcecode\n            // },\n            nsectioncode: {\n              \"label\": editObject.ssectionname,\n              \"value\": editObject.nsectioncode\n            },\n            nmethodcode: {\n              \"label\": editObject.smethodname,\n              \"value\": editObject.nmethodcode\n            },\n            ninstrumentcatcode: {\n              \"label\": editObject.sinstrumentcatname,\n              \"value\": editObject.ninstrumentcatcode\n            },\n            ncontainertypecode: {\n              \"label\": editObject.scontainertype,\n              \"value\": editObject.ncontainertypecode\n            }\n          };\n\n          if (testFileItem) {\n            selectedRecord[\"ntestfilecode\"] = {\n              \"label\": testFileItem.sfilename,\n              \"value\": testFileItem.ntestgroupfilecode,\n              item: testFileItem\n            };\n            selectedRecord[\"ntestgroupfilecode\"] = testFileItem.ntestgroupfilecode;\n          }\n\n          if (editObject.nmethodcode !== -1) {\n            selectedRecord[\"nmethodcode\"] = {\n              \"label\": editObject.smethodname,\n              \"value\": editObject.nmethodcode\n            };\n          } else {\n            selectedRecord[\"nmethodcode\"] = undefined;\n          }\n\n          if (editObject.ninstrumentcatcode !== -1) {\n            selectedRecord[\"ninstrumentcatcode\"] = {\n              \"label\": editObject.sinstrumentcatname,\n              \"value\": editObject.ninstrumentcatcode\n            };\n          } else {\n            selectedRecord[\"ninstrumentcatcode\"] = undefined;\n          }\n\n          if (editObject.ncontainertypecode !== -1) {\n            selectedRecord[\"ncontainertypecode\"] = {\n              \"label\": editObject.scontainertype,\n              \"value\": editObject.ncontainertypecode\n            };\n          } else {\n            selectedRecord[\"ncontainertypecode\"] = undefined;\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...masterData,\n                ...response[0].data,\n                SelectedTest: SelectedTest //TestGroupTest : [TestGroupTest]\n\n              },\n              openModal: true,\n              operation: operation,\n              screenName: \"IDS_EDITTESTGROUPTEST\",\n              testGroupInputData: {\n                // source: constructOptionList(response[1].data || [], \"nsourcecode\", \"ssourcename\", false, false, true).get(\"OptionList\"),\n                section: constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", false, false, true).get(\"OptionList\"),\n                method: constructOptionList(response[3].data || [], \"nmethodcode\", \"smethodname\", false, false, true).get(\"OptionList\"),\n                instrumentCategory: constructOptionList(response[4].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true).get(\"OptionList\"),\n                containerType: constructOptionList(response[6].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true).get(\"OptionList\"),\n                testFile: constructOptionList(response[5].data || [], \"ntestfilecode\", \"sfilename\", false, false, true).get(\"OptionList\")\n              },\n              selectedRecord,\n              ncontrolCode\n            }\n          });\n        }).catch(error => {\n          //console.log(\"errror:\", error);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const editTestGroupParameter = (operation, selectedParameter, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n        dispatch(initRequest(true));\n        const urlArray = [rsapi.post(\"/testgroup/getActiveParameterById\", {\n          userinfo: userInfo,\n          testgrouptestparameter: selectedParameter,\n          ntreeversiontempcode: filterData.ntreeversiontempcode.value\n        }), rsapi.post(\"/parametertype/getParameterType\", {\n          userinfo: userInfo\n        }), rsapi.post(\"unit/getUnit\", {\n          userinfo: userInfo\n        }), rsapi.post(\"grade/getGrade\", {\n          userinfo: userInfo\n        }), rsapi.post(\"checklist/getApprovedChecklist\", {\n          \"userinfo\": userInfo\n        })];\n        Axios.all(urlArray).then(response => {\n          const parameterObject = response[0].data.TestGroupTestParameter[0];\n          const predefinedObject = response[0].data.TestGroupTestPredefinedParameter;\n          const characterObject = response[0].data.TestGroupTestCharParameter;\n          const numericObject = response[0].data.TestGroupTestNumericParameter && response[0].data.TestGroupTestNumericParameter.length > 0 ? response[0].data.TestGroupTestNumericParameter[0] : {};\n          const selectedRecord = { ...parameterObject,\n            nunitcode: {\n              \"label\": parameterObject.sunitname,\n              \"value\": parameterObject.nunitcode\n            },\n            nparametertypecode: {\n              \"label\": parameterObject.sdisplaystatus,\n              \"value\": parameterObject.nparametertypecode\n            },\n            parameterTypeCode: parameterObject.nparametertypecode,\n            nchecklistversioncode: {\n              \"label\": parameterObject.schecklistname,\n              \"value\": parameterObject.nchecklistversioncode\n            },\n            schecklistversionname: parameterObject.schecklistversionname,\n            ntestformulacode: parameterObject.ntestformulacode > 0 ? {\n              \"label\": parameterObject.sformulacalculationdetail,\n              \"value\": parameterObject.ntestformulacode,\n              item: {\n                sformulacalculationdetail: parameterObject.sformulacalculationdetail,\n                ntestformulacode: parameterObject.ntestformulacode,\n                sformulacalculationcode: parameterObject.sformulacalculationcode\n              }\n            } : \"\"\n          };\n\n          if (selectedRecord[\"schecklistname\"] === \"NA\") {\n            delete selectedRecord[\"nchecklistversioncode\"];\n          }\n\n          if (selectedRecord[\"schecklistversionname\"] === \"NA\") {\n            delete selectedRecord[\"schecklistversionname\"];\n          }\n\n          if (selectedRecord[\"sunitname\"] === \"NA\") {\n            delete selectedRecord[\"nunitcode\"];\n          }\n\n          if (characterObject) {\n            selectedRecord[\"scharname\"] = characterObject.scharname;\n            selectedRecord[\"ntestgrouptestcharcode\"] = characterObject.ntestgrouptestcharcode;\n          }\n\n          if (predefinedObject) {\n            selectedRecord[\"ntestgrouptestpredefcode\"] = predefinedObject.ntestgrouptestpredefcode;\n            selectedRecord[\"spredefinedname\"] = predefinedObject.spredefinedname;\n            selectedRecord[\"ndefaultstatus\"] = predefinedObject.ndefaultstatus;\n            selectedRecord[\"ngradecode\"] = {\n              \"label\": predefinedObject.sdisplaystatus,\n              \"value\": predefinedObject.ngradecode\n            };\n          }\n\n          if (numericObject) {\n            selectedRecord[\"ntestgrouptestnumericcode\"] = numericObject.ntestgrouptestnumericcode;\n            selectedRecord[\"sminlod\"] = numericObject.sminlod;\n            selectedRecord[\"smaxlod\"] = numericObject.smaxlod;\n            selectedRecord[\"sminb\"] = numericObject.sminb;\n            selectedRecord[\"smina\"] = numericObject.smina;\n            selectedRecord[\"smaxa\"] = numericObject.smaxa;\n            selectedRecord[\"smaxb\"] = numericObject.smaxb;\n            selectedRecord[\"sminloq\"] = numericObject.sminloq;\n            selectedRecord[\"smaxloq\"] = numericObject.smaxloq;\n            selectedRecord[\"sdisregard\"] = numericObject.sdisregard;\n            selectedRecord[\"sresultvalue\"] = numericObject.sresultvalue;\n          }\n\n          const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n          const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n          const grade = gradeMap.get(\"OptionList\");\n          const unit = unitMap.get(\"OptionList\");\n          const disabled = parameterObject.nparametertypecode === parameterType.NUMERIC ? false : true;\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openChildModal: true,\n              operation: operation,\n              screenName: \"IDS_PARAMETER\",\n              testGroupInputData: {\n                unit,\n                grade,\n                testFormula: constructOptionList(response[0].data.TestFormula || [], \"ntestformulacode\", \"sformulacalculationdetail\", false, false, true).get(\"OptionList\"),\n                parameterType: constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true).get(\"OptionList\"),\n                checkListVersion: constructOptionList(response[4].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true).get(\"OptionList\"),\n                needRoundingDigit: disabled,\n                needUnit: disabled\n              },\n              parameterData: {\n                grade,\n                defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"\n              },\n              selectedRecord,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n}; // export const addTestGroupFormula = (selectedParameter, userInfo, ncontrolCode, optionalData) => {\n//     return dispatch => {\n//         const testgroupspecification = optionalData.testgroupspecification;\n//         if(testgroupspecification.napprovalstatus === transactionStatus.DRAFT || \n//             testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n//             dispatch(initRequest(true));\n//             rsapi.post(\"/testgroup/getTestGroupFormula\", {userinfo: userInfo, testgrouptestparameter: selectedParameter, testgroupspecification})\n//             .then(response=>{\n//                 dispatch({\n//                     type: DEFAULT_RETURN, \n//                     payload:{\n//                         openChildModal: true,\n//                         operation: \"create\",\n//                         screenName: \"IDS_FORMULA\",\n//                         testGroupInputData: {testFormula: response.data},\n//                         selectedRecord: {},\n//                         ncontrolCode\n//                 }});\n//             })\n//             .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}});\n//                 if(error.response.status === 409 || error.response.status === 417) {\n//                     toast.warn(error.response.data);\n//                 } else {\n//                     toast.error(error.message)\n//                 }\n//             });\n//         } else {\n//             toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\n//         }\n//     }\n// }\n\nexport const getTestGroupParameter = inputParam => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestGroupTestParameter\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getComponentBySpecId = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\n      [inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0],\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      sortData(response.data);\n\n      if (searchRef.current) {\n        searchRef.current.value = \"\";\n      }\n\n      const historyDataState = { ...inputParam.historyDataState,\n        sort: undefined,\n        filter: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          historyDataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getTestGroupDetails = inputParam => {\n  return dispatch => {\n    //...inputParam, \n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/getTestGroupTest\", {\n      ntestgrouptestcode: parseInt(inputParam['ntestgrouptestcode']),\n      userinfo: inputParam.userInfo\n    }) // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \n    //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\n    .then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          testskip: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getTestGroupComponentDetails = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    //...inputParam, \n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/getTestByComponentId\", {\n      testgroupspecsampletype: inputParam['testgroupspecsampletype'],\n      userinfo: inputParam.userInfo\n    }) // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \n    //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\n    .then(response => {\n      sortData(response.data);\n      if (searchRef.current) searchRef.current.value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          testskip: 0,\n          testtake: 5,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getSpecification = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    if (inputParam.selectedRecord !== null) {\n      rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        [inputParam.keyName]: inputParam.selectedRecord\n      }).then(response => {\n        sortData(response.data);\n        if (searchRef.current) searchRef.current.value = \"\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ActiveKey: inputParam.activeKey,\n              FocusKey: inputParam.focusKey,\n              primaryKey: inputParam.primaryKey,\n              ...response.data,\n              selectedNode: inputParam.selectedRecord,\n              searchedData: undefined\n            },\n            historyDataState: { ...inputParam.historyDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedNode: inputParam.selectedRecord,\n            TestGroupSpecification: [],\n            SelectedSpecification: {},\n            TestGroupTest: [],\n            TestGroupTestParameter: [],\n            TestGroupTestNumericParameter: [],\n            TestGroupTestFormula: [],\n            TestGroupTestPredefinedParameter: [],\n            TestGroupTestClinicalSpec: [],\n            TestGroupTestCharParameter: [],\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            SelectedTest: {},\n            selectedParameter: {},\n            TestGroupSpecFile: [],\n            TestGroupSpecificationHistory: [],\n            SelectedComponent: undefined,\n            RulesEngine: []\n          }\n        }\n      });\n    }\n  };\n};\nexport const changeTestCategory = (inputParam, testGroupInputData) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestMasterByCategory\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      inputParam.selectedRecord.ntestcode = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: inputParam.selectedRecord,\n          testGroupInputData: { ...testGroupInputData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getSpecificationDetails = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/get\" + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      if (searchRef.current) searchRef.current.value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          screenName: inputParam.screenName\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const editSpecFile = inputParam => {\n  return dispatch => {\n    const masterData = inputParam.masterData;\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      if (inputParam.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputParam.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n          userinfo: inputParam.userInfo\n        }), rsapi.post(\"/testgroup/getActiveSpecFileById\", {\n          userinfo: inputParam.userInfo,\n          testgroupspecfile: inputParam.selectedRecord,\n          ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\n        })];\n        Axios.all(urlArray).then(response => {\n          const linkmaster = response[0].data.LinkMaster;\n          const defaultLink = linkmaster.filter(item => item.ndefaultlink === transactionStatus.YES);\n          const editObject = response[1].data;\n          let nlinkcode = {};\n          let link = {};\n\n          if (editObject.nattachmenttypecode === attachmentType.LINK) {\n            nlinkcode = {\n              \"label\": editObject.slinkname,\n              \"value\": editObject.nlinkcode\n            };\n            link = {\n              slinkfilename: editObject.sfilename,\n              slinkdescription: editObject.sdescription,\n              nlinkdefaultstatus: editObject.ndefaultstatus,\n              sfilesize: '',\n              nfilesize: 0,\n              ndefaultstatus: 4,\n              sfilename: ''\n            };\n          } else {\n            nlinkcode = defaultLink.length > 0 ? {\n              \"label\": defaultLink[0].slinkname,\n              \"value\": defaultLink[0].nlinkcode\n            } : \"\";\n            link = {\n              slinkfilename: '',\n              slinkdescription: '',\n              sdescription: editObject.sdescription,\n              nlinkdefaultstatus: 4,\n              sfilesize: editObject.sfilesize,\n              nfilesize: editObject.nfilesize,\n              ndefaultstatus: editObject.ndefaultstatus,\n              sfilename: editObject.sfilename\n            };\n          }\n\n          const selectedRecord = { // ...editObject,\n            ...link,\n            nallotedspeccode: editObject.nallotedspeccode,\n            nspecfilecode: editObject.nspecfilecode,\n            stypename: editObject.stypename,\n            nattachmenttypecode: editObject.nattachmenttypecode,\n            nlinkcode // disabled: true\n\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openModal: true,\n              operation: \"update\",\n              screenName: \"IDS_SPECFILE\",\n              editFiles: Object.values(editObject).length > 0 && editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {},\n              selectedRecord,\n              ncontrolCode: inputParam.ncontrolCode\n            }\n          });\n        }).catch(error => {\n          if (error.response.status === 409 || error.response.status === 417) {\n            toast.warn(error.response.data);\n          } else {\n            toast.error(error.message);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const addTestGroupCodedResult = (operation, paramdata, userInfo, ncontrolCode, optionalData, masterData) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      const testgroupspecification = optionalData.testgroupspecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        dispatch(initRequest(true));\n        const urlArray = [rsapi.post(\"grade/getGrade\", {\n          \"userinfo\": userInfo\n        })];\n\n        if (operation === \"update\") {\n          urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterById\", {\n            testgrouptestpredefinedparameter: paramdata,\n            \"userinfo\": userInfo,\n            testgroupspecification\n          }));\n          urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterSubCodedById\", {\n            testgrouptestpredefinedparameter: paramdata,\n            \"userinfo\": userInfo,\n            testgroupspecification\n          }));\n        }\n\n        Axios.all(urlArray).then(response => {\n          let selectedRecord = {};\n          let selectedsubcodedresult = [];\n          let selectsubcodedelete = [];\n          const gradeMap = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n          const grade = gradeMap.get(\"OptionList\");\n\n          if (operation === \"update\") {\n            const editCodedResult = response[1].data;\n            selectedRecord = {\n              ntestgrouptestpredefcode: paramdata[\"ntestgrouptestpredefcode\"],\n              ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\n              ngradecode: {\n                \"label\": editCodedResult[\"sdisplaystatus\"],\n                \"value\": editCodedResult[\"ngradecode\"]\n              },\n              spredefinedname: editCodedResult[\"spredefinedname\"],\n              //sresultparacomment: editCodedResult[\"sresultparacomment\"],\n              spredefinedsynonym: editCodedResult[\"spredefinedsynonym\"],\n              spredefinedcomments: editCodedResult[\"spredefinedcomments\"],\n              nneedresultentryalert: editCodedResult[\"nneedresultentryalert\"],\n              nneedsubcodedresult: editCodedResult[\"nneedsubcodedresult\"],\n              salertmessage: editCodedResult[\"salertmessage\"]\n            };\n            selectedsubcodedresult = response[2].data;\n          } else {\n            selectedRecord = {\n              ngradecode: gradeMap.get(\"DefaultValue\"),\n              nneedresultentryalert: 4,\n              nneedsubcodedresult: 4 // {\n              //     \"value\": grade[0].ngradecode,\n              //     \"label\": grade[0][\"sdisplaystatus\"]\n              // }\n\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openChildModal: true,\n              showSaveContinue: false,\n              operation: operation,\n              screenName: \"IDS_CODEDRESULT\",\n              parameterData: {\n                grade,\n                needCodedResult: false\n              },\n              selectedRecord,\n              ncontrolCode,\n              loading: false,\n              selectedsubcodedresult,\n              selectsubcodedelete\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const subCodedResultView = (operation, paramdata, userInfo, ncontrolCode, optionalData, masterData) => {\n  return dispatch => {\n    rsapi.post(\"testgroup/getActivePredefinedParameterSubCoded\", {\n      testgrouptestpredefinedparameter: paramdata,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let selectedsubcoderesult = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: \"View\",\n          screenName: \"IDS_SUBCODERESULT\",\n          selectedsubcoderesult: response.data,\n          masterData: { ...masterData,\n            selectedsubcoderesult: response.data,\n            searchedData: undefined\n          } //screenName: inputParam.screenName\n\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const addTestGroupNumericTab = (operation, paramdata, userInfo, optionalData, masterData, ncontrolCode) => {\n  return dispatch => {\n    const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n    const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n    if (templateVersionStatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n      }));\n    } else {\n      const testgroupspecification = optionalData.testgroupspecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        dispatch(initRequest(true));\n        const urlArray = [rsapi.post(\"patient/getGender\", {\n          \"userinfo\": userInfo\n        })];\n\n        if (operation === \"update\") {\n          urlArray.push(rsapi.post(\"testgroup/getActiveClinicalSpecById\", {\n            testgrouptestpredefinedparameter: paramdata,\n            \"userinfo\": userInfo,\n            testgroupspecification\n          }));\n        }\n\n        Axios.all(urlArray).then(response => {\n          let selectedRecord = {};\n          const gradeMap = constructOptionList(response[0].data.genderList || [], \"ngendercode\", \"sgendername\", false, false, true);\n          const grade = gradeMap.get(\"OptionList\");\n\n          if (operation === \"update\") {\n            const editCodedResult = response[1].data;\n            selectedRecord = {\n              ntestgrouptestclinicspeccode: paramdata[\"ntestgrouptestclinicspeccode\"],\n              ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\n              nfromage: paramdata[\"nfromage\"],\n              ntoage: paramdata[\"ntoage\"],\n              ngendercode: {\n                \"label\": editCodedResult[\"sgendername\"],\n                \"value\": editCodedResult[\"ngendercode\"]\n              },\n              nhigha: editCodedResult[\"shigha\"],\n              nhighb: editCodedResult[\"shighb\"],\n              nlowa: editCodedResult[\"slowa\"],\n              nlowb: editCodedResult[\"slowb\"],\n              sresultvalue: editCodedResult[\"sresultvalue\"]\n            };\n          } else {\n            selectedRecord = {\n              ngendercode: gradeMap.get(\"DefaultValue\") // {\n              //     \"value\": grade[0].ngradecode,\n              //     \"label\": grade[0][\"sdisplaystatus\"]\n              // }\n\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openChildModal: true,\n              showSaveContinue: false,\n              operation: operation,\n              screenName: \"IDS_CLINICALSPEC\",\n              parameterData: {\n                grade,\n                needCodedResult: false\n              },\n              selectedRecord,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    }\n  };\n};\nexport const viewTestGroupCheckList = (inputParam, userInfo) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"checklist/viewTemplate\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: true,\n          testGroupCheckList: {\n            templateData: response.data\n          },\n          loading: false,\n          selectedRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const reportSpecification = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testgroup/specReportGenerate\", { ...inputParam,\n      ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showConfirmAlert: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const retireSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testgroup/retireSpec\", { ...inputParam\n    }).then(response => {\n      // const TestGroupSpecification = response.data.TestGroupSpecificationHistory ;\n      sortData(response.data);\n      masterData = { ...masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\n  return function (dispatch) {\n    if (masterData.selectedNode !== undefined && masterData.selectedNode !== null && masterData.SelectedSpecification !== null) {\n      const testgroupspecification = masterData.SelectedSpecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        let urlArray = [];\n        const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", {\n          \"userinfo\": userInfo\n        });\n        const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", {\n          \"userinfo\": userInfo,\n          ntreeversiontempcode: masterData.selectedNode.ntreeversiontempcode\n        });\n        urlArray = [materialTypeUrl, validationUrl];\n        dispatch(initRequest(true));\n        Axios.all(urlArray).then(response => {\n          console.log(ncontrolCode);\n\n          if (masterData.SelectedTest && masterData.SelectedTest !== undefined) {\n            if (response[1].data === \"Success\") {\n              const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, false);\n              const materialType = materialTypeMap.get(\"OptionList\");\n              const materialTypedefault = materialTypeMap.get(\"DefaultValue\");\n              selectedRecord[\"nmaterialtypecode\"] = materialTypedefault;\n\n              if (selectedRecord[\"nmaterialtypecode\"] !== undefined) {\n                let inputData = [];\n                let inputParam = {\n                  operation: operation,\n                  selectedRecord: selectedRecord,\n                  materialType: materialType,\n                  inputData: {\n                    nmaterialtypecode: materialTypedefault.value\n                  },\n                  materialType: materialType,\n                  masterData: masterData,\n                  screenName: screenName,\n                  ncontrolCode\n                };\n                dispatch(getMaterialCategoryBasedMaterialType(inputParam));\n              } else {\n                dispatch({\n                  type: DEFAULT_RETURN,\n                  payload: {\n                    materialType: materialType,\n                    materialList: undefined,\n                    materialCategoryList: undefined,\n                    isOpen: true,\n                    operation: operation,\n                    screenName: screenName,\n                    openChildModal: true,\n                    ncontrolCode: ncontrolCode,\n                    loading: false\n                  }\n                });\n              }\n            } else {\n              toast.warn(intl.formatMessage({\n                id: response[1].data\n              }));\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  operation: operation,\n                  screenName: screenName,\n                  ncontrolCode: ncontrolCode,\n                  loading: false\n                }\n              });\n            }\n          } else {\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NEEDTOADDTEST\"\n            }));\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                operation: operation,\n                screenName: screenName,\n                ncontrolCode: ncontrolCode,\n                loading: false\n              }\n            });\n          }\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  };\n};\nexport function getMaterialCategoryBasedMaterialType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"material/getMaterialcombo\", {\n      nmaterialtypecode: inputParam.inputData.nmaterialtypecode\n    }).then(response => {\n      let selectedRecord = {};\n      selectedRecord = inputParam.selectedRecord;\n      const materialCategoryMap = constructOptionList(response.data.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, false);\n      const materialCategoryList = materialCategoryMap.get(\"OptionList\");\n      const materialCategorydefault = materialCategoryMap.get(\"DefaultValue\");\n      selectedRecord['nmaterialcatcode'] = materialCategorydefault;\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n\n      if (response.data.MaterialCategoryMain.length === 0) {\n        if (selectedRecord['nmaterialcatcode']) {\n          delete selectedRecord['nmaterialcatcode'];\n        }\n\n        if (selectedRecord['nmaterialcode']) {\n          delete selectedRecord['nmaterialcode'];\n        }\n      }\n\n      let materialList = [];\n\n      if (materialCategoryList.length !== 0) {\n        materialList = materialList;\n        inputParam = { ...inputParam,\n          responsecat: response,\n          materialCategoryList: materialCategoryList,\n          selectedRecord: selectedRecord,\n          inputData: {\n            //nmaterialcatcode: materialCategorydefault.value,\n            nmaterialtypecode: inputParam.inputData.nmaterialtypecode\n          }\n        };\n        dispatch(getMaterialBasedMaterialCategory(inputParam));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: true,\n            screenName: inputParam.screenName,\n            masterData,\n            loading: false,\n            materialCategoryList: materialCategoryList,\n            materialType: inputParam.materialType,\n            materialList: materialList,\n            selectedRecord: selectedRecord,\n            operation: inputParam.operation,\n            ncontrolCode: inputParam.ncontrolCode\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getMaterialBasedMaterialCategory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"testgroup/getAvailableMaterial\", {\n      nmaterialtypecode: inputParam.inputData.nmaterialtypecode,\n      nmaterialcatcode: inputParam.inputData.nmaterialcatcode !== undefined ? inputParam.inputData.nmaterialcatcode : inputParam.responsecat.data.MaterialCategoryMain[0].nmaterialcatcode,\n      ntestgrouptestcode: inputParam.masterData.SelectedTest.ntestgrouptestcode\n    }).then(response => {\n      let selectedRecord = inputParam.selectedRecord;\n      const materialMap = constructjsonOptionList(response.data.MaterialCombo || [], \"nmaterialcode\", \"Material Name\", undefined, undefined, false);\n      const materialList = materialMap.get(\"OptionList\");\n\n      if (response.data.MaterialCombo.length === 0) {\n        delete selectedRecord['nmaterialcode'];\n      }\n\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n\n      if (inputParam.materialCategoryList) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            materialCategoryList: inputParam.materialCategoryList,\n            masterData,\n            loading: false,\n            materialList: materialList,\n            openChildModal: true,\n            screenName: inputParam.screenName,\n            selectedRecord: inputParam.selectedRecord,\n            materialType: inputParam.materialType,\n            operation: inputParam.operation,\n            ncontrolCode: inputParam.ncontrolCode\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            materialList: materialList,\n            openChildModal: true\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport const getTestGroupMaterial = inputParam => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestGroupTestMaterial\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getDataForEditTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, Data, primaryKeyName) => {\n  return function (dispatch) {\n    const testgroupspecification = Data.SelectedSpecification;\n\n    if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n      let urlArray = [];\n      const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", {\n        \"userinfo\": userInfo\n      });\n      const materialCatUrl = rsapi.post(\"material/getMaterialcombo\", {\n        nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode\n      });\n      const materialUrl = rsapi.post(\"testgroup/getAvailableMaterial\", {\n        nmaterialcatcode: Data.selectedMaterial.nmaterialcatcode,\n        nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode,\n        ntestgrouptestcode: Data.SelectedTest.ntestgrouptestcode\n      });\n      const materialById = rsapi.post(\"testgroup/getActiveTestMaterialById\", {\n        [primaryKeyName]: Data.selectedMaterial.ntestgrouptestmaterialcode,\n        \"userinfo\": userInfo\n      });\n      const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", {\n        \"userinfo\": userInfo,\n        ntreeversiontempcode: Data.selectedNode.ntreeversiontempcode\n      });\n      urlArray = [materialTypeUrl, materialCatUrl, materialUrl, materialById, validationUrl];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        if (response[4].data === \"Success\") {\n          let selectedRecord = {};\n          let MaterialCategoryData = [];\n          let MaterialTypeData = [];\n          let MaterialData = [];\n          const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, false);\n          const materialType = materialTypeMap.get(\"OptionList\");\n          const materialCategoryMap = constructOptionList(response[1].data.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, false);\n          const materialCategoryList = materialCategoryMap.get(\"OptionList\");\n          const materialMap = constructjsonOptionList(response[2].data.MaterialCombo || [], \"nmaterialcode\", \"Material Name\", undefined, undefined, false);\n          const materialList = materialMap.get(\"OptionList\");\n          MaterialCategoryData.push({\n            \"value\": response[3].data[\"nmaterialcatcode\"],\n            \"label\": response[3].data[\"smaterialcatname\"]\n          });\n          MaterialTypeData.push({\n            \"value\": response[3].data[\"nmaterialtypecode\"],\n            \"label\": response[3].data[\"smaterialtypename\"]\n          });\n          MaterialData.push({\n            \"value\": response[3].data[\"nmaterialcode\"],\n            \"label\": response[3].data[\"smaterialname\"]\n          });\n          selectedRecord = response[3].data;\n          selectedRecord[\"nmaterialcatcode\"] = MaterialCategoryData[0];\n          selectedRecord[\"nmaterialtypecode\"] = MaterialTypeData[0];\n          selectedRecord[\"nmaterialcode\"] = MaterialData[0];\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              materialType: materialType,\n              materialList: materialList,\n              materialCategoryList: materialCategoryList,\n              selectedRecord: selectedRecord,\n              isOpen: true,\n              operation: operation,\n              screenName: screenName,\n              openChildModal: true,\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: response[4].data\n          }));\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              operation: operation,\n              screenName: screenName,\n              ncontrolCode: ncontrolCode,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestGroupAction.js"],"names":["toast","rsapi","DEFAULT_RETURN","attachmentType","parameterType","SampleType","transactionStatus","constructjsonOptionList","constructOptionList","rearrangeDateFormat","sortData","Axios","intl","initRequest","sampleTypeOnChange","inputParam","masterData","dispatch","url","classUrl","post","methodUrl","inputData","then","response","data","type","payload","tempFilterData","loading","catch","error","status","warn","message","filterTestGroup","searchRef","current","value","filterData","isrulesenginerequired","searchedData","undefined","testskip","historyDataState","sort","filter","createTree","selectedRecord","userInfo","ncontrolCode","isValid","ntreeversiontempcode","nsampletypecode","item","nportalrequired","YES","FocusKey","TreeTemplateManipulation","length","formatMessage","id","ncategorybasedflowrequired","nproductcatcode","ncategorybasedflow","nproductcode","sampletype","ncategorycode","nprojectmastercode","userinfo","treetemplatemanipulation","selectedNode","treetempTranstestGroup","mandatoryFields","forEach","index","sleveldescription","push","slabelname","openModal","operation","screenName","TreetempTranstestGroup","treeMandatoryFields","editTree","treeVersionTemplateIndex","findIndex","x","templateVersionStatus","ntransactionstatus","RETIRED","addSpecification","masterDatas","nnextchildcode","SelectedSpecification","urlArray","testgroupspecification","napprovalstatus","CORRECTION","DRAFT","all","sproductname","label","sproductcatname","dexpirydate","ntzexpirydate","stimezoneid","sspecname","ExpiryDate","ncomponentrequired","ACTIVE","ntimezonecode","timeZoneList","get","addComponent","testGroupSpecSampleType","testCategory","sampleTypeMap","testGroupInputData","TestCategory","TestGroupSpecSampleType","TestGroupTest","ncomponentcode","ntestcategorycode","addTestGroupTest","selectedComponent","selectedSpecification","openTestModal","testgroupspecsampletype","stestcategoryname","stestcategorycode","editTestGroupTest","selectedTest","ntestcode","testgrouptest","editObject","SelectedTestGroupTest","testFileItem","TestGroupTestFile","SelectedTest","nsectioncode","ssectionname","nmethodcode","smethodname","ninstrumentcatcode","sinstrumentcatname","ncontainertypecode","scontainertype","sfilename","ntestgroupfilecode","section","method","instrumentCategory","containerType","testFile","editTestGroupParameter","selectedParameter","testgrouptestparameter","parameterObject","TestGroupTestParameter","predefinedObject","TestGroupTestPredefinedParameter","characterObject","TestGroupTestCharParameter","numericObject","TestGroupTestNumericParameter","nunitcode","sunitname","nparametertypecode","sdisplaystatus","parameterTypeCode","nchecklistversioncode","schecklistname","schecklistversionname","ntestformulacode","sformulacalculationdetail","sformulacalculationcode","scharname","ntestgrouptestcharcode","ntestgrouptestpredefcode","spredefinedname","ndefaultstatus","ngradecode","ntestgrouptestnumericcode","sminlod","smaxlod","sminb","smina","smaxa","smaxb","sminloq","smaxloq","sdisregard","sresultvalue","gradeMap","unitMap","grade","unit","disabled","NUMERIC","openChildModal","testFormula","TestFormula","checkListVersion","needRoundingDigit","needUnit","parameterData","defaultUnit","getTestGroupParameter","getComponentBySpecId","keyName","getTestGroupDetails","ntestgrouptestcode","parseInt","getTestGroupComponentDetails","testtake","getSpecification","ActiveKey","activeKey","focusKey","primaryKey","TestGroupSpecification","TestGroupTestFormula","TestGroupTestClinicalSpec","TestGroupSpecFile","TestGroupSpecificationHistory","SelectedComponent","RulesEngine","changeTestCategory","getSpecificationDetails","editSpecFile","testgroupspecfile","linkmaster","LinkMaster","defaultLink","ndefaultlink","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","slinkdescription","sdescription","nlinkdefaultstatus","sfilesize","nfilesize","nallotedspeccode","nspecfilecode","stypename","editFiles","Object","values","FTP","addTestGroupCodedResult","paramdata","optionalData","testgrouptestpredefinedparameter","selectedsubcodedresult","selectsubcodedelete","editCodedResult","ntestgrouptestparametercode","spredefinedsynonym","spredefinedcomments","nneedresultentryalert","nneedsubcodedresult","salertmessage","showSaveContinue","needCodedResult","subCodedResultView","selectedsubcoderesult","addTestGroupNumericTab","genderList","ntestgrouptestclinicspeccode","nfromage","ntoage","ngendercode","nhigha","nhighb","nlowa","nlowb","viewTestGroupCheckList","openTemplateModal","testGroupCheckList","templateData","reportSpecification","loadEsign","showConfirmAlert","document","getElementById","setAttribute","filepath","click","retireSpecification","getDataForTestMaterial","primaryKeyName","materialTypeUrl","validationUrl","console","log","materialTypeMap","materialType","materialTypedefault","nmaterialtypecode","getMaterialCategoryBasedMaterialType","materialList","materialCategoryList","isOpen","materialCategoryMap","MaterialCategoryMain","materialCategorydefault","responsecat","getMaterialBasedMaterialCategory","nmaterialcatcode","materialMap","MaterialCombo","getTestGroupMaterial","getDataForEditTestMaterial","Data","materialCatUrl","selectedMaterial","materialUrl","materialById","ntestgrouptestmaterialcode","MaterialCategoryData","MaterialTypeData","MaterialData"],"mappings":"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","sourcesContent":["import {\r\n    toast\r\n} from \"react-toastify\";\r\nimport rsapi from \"../rsapi\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport {\r\n    attachmentType,\r\n    parameterType,\r\n    SampleType,\r\n    transactionStatus\r\n} from \"../components/Enumeration\";\r\nimport {\r\n    constructjsonOptionList,\r\n    constructOptionList,\r\n    rearrangeDateFormat,\r\n    //formatInputDate,\r\n    sortData\r\n} from \"../components/CommonScript\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    intl\r\n} from \"../components/App\";\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\n\r\n\r\nexport const sampleTypeOnChange = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let url = \"/testgroup\";\r\n        if (inputParam.classUrl) {\r\n            url = inputParam.classUrl;\r\n        }\r\n        rsapi.post(url + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        tempFilterData: inputParam.inputData.tempFilterData,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    masterData[\"ExistingLinkTable\"] = [];\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const filterTestGroup = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/filterTestGroup\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                if (searchRef.current) {\r\n                    searchRef.current.value = \"\";\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        filterData: inputParam.inputData.filterData,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            isrulesenginerequired:inputParam['inputData']['filterData']['nsampletypecode']['item']['nrulesenginerequired'],\r\n                            searchedData: undefined\r\n                        }, \r\n                        loading: false,\r\n                        testskip: 0,\r\n                        historyDataState: {\r\n                            ...inputParam.historyDataState,\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const createTree = (selectedRecord, userInfo, masterData, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        //ALPD-1466,1465\r\n     let isValid =false;\r\n        if (selectedRecord && selectedRecord.ntreeversiontempcode !== \"\") {\r\n            if (selectedRecord && selectedRecord.nsampletypecode.item.nportalrequired === transactionStatus.YES &&\r\n                masterData.FocusKey === \"root\" && masterData && masterData.TreeTemplateManipulation.length > 0) {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_MORETHANONEPROFILENOTALLOWEDCLINICALTYPE\"\r\n                }));\r\n            } else if (selectedRecord.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES) {\r\n                isValid=true;\r\n            } else if ((selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES) || (selectedRecord.nproductcode)) {\r\n                isValid=true;\r\n            } else {\r\n               \r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_PRODUCTNOTAVAILABLE\"\r\n                }));\r\n            }\r\n        }\r\n         else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n            }\r\n            if(isValid){\r\n                const inputParam = {\r\n                    sampletype: selectedRecord.nsampletypecode.item,\r\n                    ncategorycode: selectedRecord.nproductcatcode.value,\r\n                    ntreeversiontempcode: selectedRecord.ntreeversiontempcode.value,\r\n                    nprojectmastercode: selectedRecord.nprojectmastercode ? selectedRecord.nprojectmastercode.value : -1,\r\n                    userinfo: userInfo,\r\n                    treetemplatemanipulation: masterData.selectedNode\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"/testgroup/getTemplateMasterDetails\", {\r\n                    ...inputParam\r\n                })\r\n                    .then(response => {\r\n                        const treetempTranstestGroup = response.data[\"TreetempTranstestGroup\"] || [];\r\n\r\n                        // const treeMandatoryFields = treetempTranstestGroup.map((item, index) => {\r\n                        //         return {\r\n                        //             \"idsName\": item.slabelname,\r\n                        //             \"dataField\": \"sleveldescription_\" + index,\r\n                        //             \"mandatory\": true\r\n                        //         }\r\n                        // });\r\n\r\n                        //  const selectedNodeLevel = selectedNode ? selectedNode.slevelcode.split(\"/1\").length-2 : -1;\r\n                        const mandatoryFields = [];\r\n                        treetempTranstestGroup.forEach((item, index) => {\r\n                            if (item.sleveldescription === null) {\r\n                                mandatoryFields.push({\r\n                                    \"idsName\": item.slabelname,\r\n                                    \"dataField\": \"sleveldescription_\" + index,\r\n                                    \"mandatory\": true\r\n                                })\r\n                            }\r\n                        });\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openModal: true,\r\n                                operation: \"create\",\r\n                                screenName: \"IDS_PROFILETREE\",\r\n                                TreetempTranstestGroup: treetempTranstestGroup,\r\n                                treeMandatoryFields: mandatoryFields,\r\n                                //selectedRecord,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message)\r\n                        }\r\n                    });\r\n            }\r\n}\r\n}\r\n \r\nexport const editTree = (operation, selectedNode, userinfo, ncontrolCode, filterData, masterData) => {\r\n    return (dispatch) => {\r\n        if (!selectedNode) {\r\n            return toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTPROFILENODETOEDIT\"\r\n            }))\r\n        }\r\n        //console.log(\"edit Tree:\", selectedNode, masterData);\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === selectedNode[\"ntreeversiontempcode\"]);\r\n        // if (treeVersionTemplateIndex !== -1){\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        //}\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedNode) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"/testgroup/getTreeById\", {\r\n                    userinfo,\r\n                    treetemplatemanipulation: selectedNode,\r\n                    ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                })\r\n                    .then(response => {\r\n                        const treetempTranstestGroup = response.data;\r\n                        const treeMandatoryFields = treetempTranstestGroup && [{\r\n                            \"idsName\": treetempTranstestGroup.slabelname,\r\n                            \"dataField\": \"sleveldescription\",\r\n                            \"mandatory\": true\r\n                        }];\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openModal: true,\r\n                                operation: operation,\r\n                                screenName: \"IDS_EDITTREE\",\r\n                                selectedRecord: {\r\n                                    ...treetempTranstestGroup\r\n                                },\r\n                                treeMandatoryFields,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message)\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTPROFILENODETOEDIT\"\r\n                }))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const addSpecification = (operation, inputParam, ncontrolCode, masterDatas) => {\r\n    return (dispatch) => {\r\n        //if (inputParam.selectedNode != null && inputParam.selectedNode.schildnode === \"\") {\r\n        if (inputParam.selectedRecord && inputParam.selectedRecord.ntreeversiontempcode !== \"\") {\r\n            if (inputParam.selectedRecord.ntreeversiontempcode.item.ntransactionstatus === transactionStatus.RETIRED) {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (inputParam.selectedNode != null && inputParam.selectedNode.nnextchildcode === -1) {\r\n\r\n                    if (masterDatas && masterDatas.SelectedSpecification === null && operation === \"copy\") {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                    }\r\n                    else {\r\n                        let urlArray = [];\r\n                        if (operation === \"update\") {\r\n                            const testgroupspecification = inputParam.testgroupspecification[0];\r\n                            // let isValidOperation = false;\r\n                            // if (operation === \"update\"){\r\n                            //     if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION ||\r\n                            //         testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\r\n                            //             isValidOperation = true;\r\n                            //     }\r\n                            //     else {\r\n                            //         toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\r\n                            //         return;\r\n                            //     }\r\n                            // }\r\n                            // else{\r\n                            //     isValidOperation = true;\r\n                            // }\r\n                            if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION ||\r\n                                testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\r\n                                urlArray = [rsapi.post(\"timezone/getTimeZone\")];\r\n\r\n                                urlArray.push(rsapi.post(\"/testgroup/getActiveSpecificationById\", {\r\n                                    testgroupspecification,\r\n                                    userinfo: inputParam.userinfo,\r\n                                    ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value\r\n                                }));\r\n                            }\r\n                            else {\r\n                                toast.warn(intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n                                return;\r\n                            }\r\n                        }\r\n                        else {\r\n                            urlArray = [rsapi.post(\"timezone/getTimeZone\")];\r\n\r\n                            urlArray.push(rsapi.post(\"/testgroup/getAddSpecification\", {\r\n                                userinfo: inputParam.userInfo,\r\n                                ntreeversiontempcode: inputParam.selectedRecord.ntreeversiontempcode.value\r\n                                //currentdate: formatInputDate(new Date(), true)\r\n                            }));\r\n                        }\r\n                        Axios.all(urlArray)\r\n                            .then(response => {\r\n                                let selectedRecord = {};\r\n                                let masterData = inputParam.masterData !== undefined ? inputParam.masterData : masterDatas;\r\n\r\n                                if (operation === \"update\") {\r\n                                    masterData = {\r\n                                        ...inputParam.masterData,\r\n                                        ...response[1].data,\r\n                                        testgroupspecification: inputParam.testgroupspecification\r\n                                    }\r\n                                    selectedRecord = {\r\n                                        sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode && inputParam.selectedRecord.nproductcode.label,\r\n                                        sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\r\n                                        ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\r\n                                        ...response[1].data.SelectedSpecification,\r\n                                        //dexpirydate: new Date(response[1].data[\"sexpirydate\"]),\r\n                                        dexpirydate: rearrangeDateFormat(inputParam.userinfo, response[1].data.SelectedSpecification[\"sexpirydate\"]),\r\n                                        ntzexpirydate: {\r\n                                            \"label\": response[1].data.SelectedSpecification.stimezoneid,\r\n                                            \"value\": response[1].data.SelectedSpecification.ntzexpirydate\r\n                                        }\r\n                                    };\r\n                                } else {\r\n                                    selectedRecord = {\r\n                                        sproductname: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? \"\" : inputParam.selectedRecord.nproductcode && inputParam.selectedRecord.nproductcode.label,\r\n                                        sproductcatname: inputParam.selectedRecord.nproductcatcode.label,\r\n                                        sspecname: inputParam.selectedNode.sleveldescription,\r\n                                        ncategorybasedflow: inputParam.selectedRecord.nproductcatcode.item.ncategorybasedflow,\r\n                                        dexpirydate: rearrangeDateFormat(inputParam.userInfo, response[1].data.ExpiryDate),\r\n                                        //ncomponentrequired: inputParam.selectedNode.nsampletypecode === SampleType.CLINICALTYPE ? transactionStatus.YES : transactionStatus.NO,\r\n                                        ncomponentrequired: transactionStatus.YES,\r\n                                        // nclinicalspec: inputParam.selectedNode.nsampletypecode===SampleType.CLINICALTYPE?transactionStatus.YES:transactionStatus.NO,\r\n                                        ntransactionstatus: transactionStatus.ACTIVE,\r\n                                        ntzexpirydate: {\r\n                                            \"label\": inputParam.userInfo.stimezoneid,\r\n                                            \"value\": inputParam.userInfo.ntimezonecode\r\n                                        }\r\n                                    };\r\n                                }\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        openModal: true,\r\n                                        operation: operation,\r\n                                        screenName: \"IDS_SPECIFICATION\",\r\n                                        masterData,\r\n                                        selectedRecord,\r\n                                        timeZoneList: constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", false, false, true).get(\"OptionList\"),\r\n                                        ncontrolCode\r\n                                    }\r\n                                });\r\n                            })\r\n                            .catch(error => {\r\n                                if (error.response.status === 500) {\r\n                                    toast.error(error.message);\r\n                                } else {\r\n                                    toast.warn(error.response.data);\r\n                                }\r\n                            })\r\n                    }\r\n                } else {\r\n                    if (operation === \"copy\") {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_SELECTLASTLEVELNODETOADDSPEC\" }));\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const addComponent = (SelectedSpecification, userInfo, ncontrolCode, masterData) => {\r\n    return (dispatch) => {\r\n\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            rsapi.post(\"/testgroup/getAvailableComponent\", {\r\n                userinfo: userInfo,\r\n                testgroupspecification: SelectedSpecification\r\n            })\r\n                .then(response => {\r\n                    const testGroupSpecSampleType = response.data[\"TestGroupSpecSampleType\"] || [];\r\n                    if (testGroupSpecSampleType.length > 0) {\r\n                        const testCategory = constructOptionList(response.data[\"TestCategory\"] || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\r\n                        const sampleTypeMap = constructOptionList(testGroupSpecSampleType, \"ncomponentcode\", \"scomponentname\", false, false, true);\r\n                        // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openModal: true,\r\n                                operation: \"create\",\r\n                                screenName: \"IDS_COMPONENT\",\r\n                                testGroupInputData: {\r\n                                    TestCategory: testCategory.get(\"OptionList\"),\r\n                                    TestGroupSpecSampleType: sampleTypeMap.get(\"OptionList\"),\r\n                                    TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\r\n                                },\r\n                                selectedRecord: {\r\n                                    ncomponentcode: sampleTypeMap.get(\"DefaultValue\"),\r\n                                    ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\r\n                                },\r\n                                ncontrolCode\r\n                            }\r\n                        });\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: \"IDS_COMPONENTNOTAVAILABLE\"\r\n                        }));\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport const addTestGroupTest = (selectedComponent, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\r\n    return dispatch => {\r\n        if (masterData.selectedNode !== undefined && masterData.selectedNode !== null) {\r\n            const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n                x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n            const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n            if (templateVersionStatus === transactionStatus.RETIRED) {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (selectedSpecification) {\r\n                    if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                        selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n\r\n                        let openTestModal = false;\r\n                        if (selectedSpecification.ncomponentrequired === transactionStatus.YES) {\r\n                            if (selectedComponent == undefined) {\r\n                                toast.warn(intl.formatMessage({\r\n                                    id: \"IDS_NEEDCOMPONENTTOADDTEST\"\r\n                                }));\r\n                            } else {\r\n                                openTestModal = true;\r\n                            }\r\n                        } else {\r\n                            openTestModal = true;\r\n                        }\r\n\r\n                        if (openTestModal === true) {\r\n                            rsapi.post(\"/testgroup/getAvailableTest\", {\r\n                                userinfo: userInfo,\r\n                                testgroupspecsampletype: selectedComponent,\r\n                                ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                            })\r\n                                .then(response => {\r\n                                    let testCategory;\r\n                                    // = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\r\n                                    // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\r\n                                    if (response.data[\"TestCategory\"].length > 0) {\r\n                                        testCategory = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                openModal: true,\r\n                                                operation: \"create\",\r\n                                                screenName: \"IDS_TEST\",\r\n                                                testGroupInputData: {\r\n                                                    TestCategory: testCategory.get(\"OptionList\"),\r\n                                                    TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\r\n                                                },\r\n                                                selectedRecord: {\r\n                                                    ntestcategorycode: {\r\n                                                        label: response.data[\"SelectedTestCategory\"].stestcategoryname,\r\n                                                        value: response.data[\"SelectedTestCategory\"].stestcategorycode,\r\n                                                        item: response.data[\"SelectedTestCategory\"]\r\n                                                    }\r\n                                                    //ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\r\n                                                },\r\n                                                ncontrolCode\r\n                                            }\r\n                                        });\r\n                                    } else {\r\n                                        toast.warn(intl.formatMessage({\r\n                                            id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\r\n                                        }))\r\n                                    }\r\n                                })\r\n                                .catch(error => {\r\n                                    if (error.response.status === 409 || error.response.status === 417) {\r\n                                        toast.warn(error.response.data);\r\n                                    } else {\r\n                                        toast.error(error.message);\r\n                                    }\r\n                                });\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                        }));\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_SELECTSPECIFICATION\"\r\n                    }));\r\n                }\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTSPECIFICATION\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTestGroupTest = (operation, selectedTest, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\r\n    return dispatch => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const ntestcode = selectedTest.ntestcode;\r\n                const urlArray = [\r\n                    rsapi.post(\"/testgroup/getActiveTestById\", {\r\n                        userinfo: userInfo,\r\n                        testgrouptest: selectedTest,\r\n                        ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                    }),\r\n                    rsapi.post(\"/source/getSource\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getSection\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getMethod\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getInstrumentCategory\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getTestAttachment\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"/testmaster/getContainerType\", {\r\n                        ntestcode,\r\n                        userinfo: userInfo\r\n                    })\r\n                ]\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        // const editObject = response[0].data.TestGroupTest;\r\n                        // const testFileItem = response[0].data.TestGroupTestFile;\r\n                        // const SelectedTest = response[0].data.TestGroupTest;\r\n\r\n                        const editObject = response[0].data.SelectedTestGroupTest;\r\n                        const testFileItem = response[0].data.TestGroupTestFile;\r\n                        const SelectedTest = response[0].data.SelectedTest;\r\n                        //const TestGroupTest = response[0].data.TestGroupTest;\r\n\r\n                        const selectedRecord = {\r\n                            ...editObject,\r\n                            // nsourcecode: {\r\n                            //     \"label\": editObject.ssourcename,\r\n                            //     \"value\": editObject.nsourcecode\r\n                            // },\r\n                            nsectioncode: {\r\n                                \"label\": editObject.ssectionname,\r\n                                \"value\": editObject.nsectioncode\r\n                            },\r\n                            nmethodcode: {\r\n                                \"label\": editObject.smethodname,\r\n                                \"value\": editObject.nmethodcode\r\n                            },\r\n                            ninstrumentcatcode: {\r\n                                \"label\": editObject.sinstrumentcatname,\r\n                                \"value\": editObject.ninstrumentcatcode\r\n                            },\r\n                            ncontainertypecode: {\r\n                                \"label\": editObject.scontainertype,\r\n                                \"value\": editObject.ncontainertypecode\r\n                            }\r\n                        };\r\n                        if (testFileItem) {\r\n                            selectedRecord[\"ntestfilecode\"] = {\r\n                                \"label\": testFileItem.sfilename,\r\n                                \"value\": testFileItem.ntestgroupfilecode,\r\n                                item: testFileItem\r\n                            };\r\n                            selectedRecord[\"ntestgroupfilecode\"] = testFileItem.ntestgroupfilecode\r\n                        }\r\n                        if (editObject.nmethodcode !== -1) {\r\n                            selectedRecord[\"nmethodcode\"] = {\r\n                                \"label\": editObject.smethodname,\r\n                                \"value\": editObject.nmethodcode\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"nmethodcode\"] = undefined;\r\n                        }\r\n                        if (editObject.ninstrumentcatcode !== -1) {\r\n                            selectedRecord[\"ninstrumentcatcode\"] = {\r\n                                \"label\": editObject.sinstrumentcatname,\r\n                                \"value\": editObject.ninstrumentcatcode\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"ninstrumentcatcode\"] = undefined;\r\n                        }\r\n                        if (editObject.ncontainertypecode !== -1) {\r\n                            selectedRecord[\"ncontainertypecode\"] = {\r\n                                \"label\": editObject.scontainertype,\r\n                                \"value\": editObject.ncontainertypecode\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"ncontainertypecode\"] = undefined;\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...masterData,\r\n                                    ...response[0].data,\r\n                                    SelectedTest: SelectedTest,\r\n                                    //TestGroupTest : [TestGroupTest]\r\n                                },\r\n                                openModal: true,\r\n                                operation: operation,\r\n                                screenName: \"IDS_EDITTESTGROUPTEST\",\r\n                                testGroupInputData: {\r\n                                    // source: constructOptionList(response[1].data || [], \"nsourcecode\", \"ssourcename\", false, false, true).get(\"OptionList\"),\r\n                                    section: constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", false, false, true).get(\"OptionList\"),\r\n                                    method: constructOptionList(response[3].data || [], \"nmethodcode\", \"smethodname\", false, false, true).get(\"OptionList\"),\r\n                                    instrumentCategory: constructOptionList(response[4].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true).get(\"OptionList\"),\r\n                                    containerType: constructOptionList(response[6].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true).get(\"OptionList\"),\r\n                                    testFile: constructOptionList(response[5].data || [], \"ntestfilecode\", \"sfilename\", false, false, true).get(\"OptionList\")\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        //console.log(\"errror:\", error);\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message)\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTestGroupParameter = (operation, selectedParameter, userInfo, ncontrolCode, selectedSpecification, filterData, masterData) => {\r\n    return dispatch => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                dispatch(initRequest(true));\r\n                const urlArray = [\r\n                    rsapi.post(\"/testgroup/getActiveParameterById\", {\r\n                        userinfo: userInfo,\r\n                        testgrouptestparameter: selectedParameter,\r\n                        ntreeversiontempcode: filterData.ntreeversiontempcode.value\r\n                    }),\r\n                    rsapi.post(\"/parametertype/getParameterType\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"unit/getUnit\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"grade/getGrade\", {\r\n                        userinfo: userInfo\r\n                    }),\r\n                    rsapi.post(\"checklist/getApprovedChecklist\", {\r\n                        \"userinfo\": userInfo\r\n                    })\r\n                ]\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        const parameterObject = response[0].data.TestGroupTestParameter[0];\r\n                        const predefinedObject = response[0].data.TestGroupTestPredefinedParameter;\r\n                        const characterObject = response[0].data.TestGroupTestCharParameter;\r\n                        const numericObject = response[0].data.TestGroupTestNumericParameter && response[0].data.TestGroupTestNumericParameter.length > 0 ? response[0].data.TestGroupTestNumericParameter[0] : {};\r\n                        const selectedRecord = {\r\n                            ...parameterObject,\r\n                            nunitcode: {\r\n                                \"label\": parameterObject.sunitname,\r\n                                \"value\": parameterObject.nunitcode\r\n                            },\r\n                            nparametertypecode: {\r\n                                \"label\": parameterObject.sdisplaystatus,\r\n                                \"value\": parameterObject.nparametertypecode\r\n                            },\r\n                            parameterTypeCode: parameterObject.nparametertypecode,\r\n                            nchecklistversioncode: {\r\n                                \"label\": parameterObject.schecklistname,\r\n                                \"value\": parameterObject.nchecklistversioncode\r\n                            },\r\n                            schecklistversionname: parameterObject.schecklistversionname,\r\n                            ntestformulacode: parameterObject.ntestformulacode > 0 ? {\r\n                                \"label\": parameterObject.sformulacalculationdetail,\r\n                                \"value\": parameterObject.ntestformulacode,\r\n                                item: {\r\n                                    sformulacalculationdetail: parameterObject.sformulacalculationdetail,\r\n                                    ntestformulacode: parameterObject.ntestformulacode,\r\n                                    sformulacalculationcode: parameterObject.sformulacalculationcode\r\n                                }\r\n                            } : \"\"\r\n                        };\r\n                        if (selectedRecord[\"schecklistname\"] === \"NA\") {\r\n                            delete selectedRecord[\"nchecklistversioncode\"]\r\n                        }\r\n                        if (selectedRecord[\"schecklistversionname\"] === \"NA\") {\r\n                            delete selectedRecord[\"schecklistversionname\"]\r\n                        }\r\n                        if (selectedRecord[\"sunitname\"] === \"NA\") {\r\n                            delete selectedRecord[\"nunitcode\"]\r\n                        }\r\n                        if (characterObject) {\r\n                            selectedRecord[\"scharname\"] = characterObject.scharname;\r\n                            selectedRecord[\"ntestgrouptestcharcode\"] = characterObject.ntestgrouptestcharcode;\r\n                        }\r\n                        if (predefinedObject) {\r\n                            selectedRecord[\"ntestgrouptestpredefcode\"] = predefinedObject.ntestgrouptestpredefcode;\r\n                            selectedRecord[\"spredefinedname\"] = predefinedObject.spredefinedname;\r\n                            selectedRecord[\"ndefaultstatus\"] = predefinedObject.ndefaultstatus;\r\n                            selectedRecord[\"ngradecode\"] = {\r\n                                \"label\": predefinedObject.sdisplaystatus,\r\n                                \"value\": predefinedObject.ngradecode\r\n                            };\r\n                        }\r\n                        if (numericObject) {\r\n                            selectedRecord[\"ntestgrouptestnumericcode\"] = numericObject.ntestgrouptestnumericcode;\r\n                            selectedRecord[\"sminlod\"] = numericObject.sminlod;\r\n                            selectedRecord[\"smaxlod\"] = numericObject.smaxlod;\r\n                            selectedRecord[\"sminb\"] = numericObject.sminb;\r\n                            selectedRecord[\"smina\"] = numericObject.smina;\r\n                            selectedRecord[\"smaxa\"] = numericObject.smaxa;\r\n                            selectedRecord[\"smaxb\"] = numericObject.smaxb;\r\n                            selectedRecord[\"sminloq\"] = numericObject.sminloq;\r\n                            selectedRecord[\"smaxloq\"] = numericObject.smaxloq;\r\n                            selectedRecord[\"sdisregard\"] = numericObject.sdisregard;\r\n                            selectedRecord[\"sresultvalue\"] = numericObject.sresultvalue;\r\n                        }\r\n                        const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                        const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                        const grade = gradeMap.get(\"OptionList\");\r\n                        const unit = unitMap.get(\"OptionList\");\r\n                        const disabled = parameterObject.nparametertypecode === parameterType.NUMERIC ? false : true;\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openChildModal: true,\r\n                                operation: operation,\r\n                                screenName: \"IDS_PARAMETER\",\r\n                                testGroupInputData: {\r\n                                    unit,\r\n                                    grade,\r\n                                    testFormula: constructOptionList(response[0].data.TestFormula || [], \"ntestformulacode\", \"sformulacalculationdetail\", false, false, true).get(\"OptionList\"),\r\n                                    parameterType: constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true).get(\"OptionList\"),\r\n                                    checkListVersion: constructOptionList(response[4].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true).get(\"OptionList\"),\r\n                                    needRoundingDigit: disabled,\r\n                                    needUnit: disabled\r\n                                },\r\n                                parameterData: {\r\n                                    grade,\r\n                                    defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message);\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// export const addTestGroupFormula = (selectedParameter, userInfo, ncontrolCode, optionalData) => {\r\n//     return dispatch => {\r\n//         const testgroupspecification = optionalData.testgroupspecification;\r\n//         if(testgroupspecification.napprovalstatus === transactionStatus.DRAFT || \r\n//             testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n//             dispatch(initRequest(true));\r\n//             rsapi.post(\"/testgroup/getTestGroupFormula\", {userinfo: userInfo, testgrouptestparameter: selectedParameter, testgroupspecification})\r\n//             .then(response=>{\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, \r\n//                     payload:{\r\n//                         openChildModal: true,\r\n//                         operation: \"create\",\r\n//                         screenName: \"IDS_FORMULA\",\r\n//                         testGroupInputData: {testFormula: response.data},\r\n//                         selectedRecord: {},\r\n//                         ncontrolCode\r\n//                 }});\r\n//             })\r\n//             .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}});\r\n//                 if(error.response.status === 409 || error.response.status === 417) {\r\n//                     toast.warn(error.response.data);\r\n//                 } else {\r\n//                     toast.error(error.message)\r\n//                 }\r\n//             });\r\n//         } else {\r\n//             toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const getTestGroupParameter = (inputParam) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestGroupTestParameter\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getComponentBySpecId = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\r\n            [inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0],\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                sortData(response.data);\r\n                if (searchRef.current) {\r\n                    searchRef.current.value = \"\";\r\n                }\r\n                const historyDataState = {\r\n                    ...inputParam.historyDataState,\r\n                    sort: undefined,\r\n                    filter: undefined\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        historyDataState,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getTestGroupDetails = (inputParam) => {\r\n    return (dispatch) => { //...inputParam, \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/getTestGroupTest\", {\r\n            ntestgrouptestcode: parseInt(inputParam['ntestgrouptestcode']),\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \r\n            //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\r\n            .then(response => {\r\n                    sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        testskip: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getTestGroupComponentDetails = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => { //...inputParam, \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/getTestByComponentId\", {\r\n            testgroupspecsampletype: inputParam['testgroupspecsampletype'],\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \r\n            //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\r\n            .then(response => {\r\n                sortData(response.data);\r\n                if (searchRef.current)\r\n                    searchRef.current.value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        testskip: 0,\r\n                        testtake: 5,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getSpecification = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedRecord !== null) {\r\n            rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\r\n                ...inputParam,\r\n                [inputParam.keyName]: inputParam.selectedRecord\r\n            })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    if (searchRef.current)\r\n                        searchRef.current.value = \"\";\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ActiveKey: inputParam.activeKey,\r\n                                FocusKey: inputParam.focusKey,\r\n                                primaryKey: inputParam.primaryKey,\r\n                                ...response.data,\r\n                                selectedNode: inputParam.selectedRecord,\r\n                                searchedData: undefined,\r\n\r\n                            },\r\n                            historyDataState: {\r\n                                ...inputParam.historyDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData: {\r\n                        ...masterData,\r\n                        selectedNode: inputParam.selectedRecord,\r\n                        TestGroupSpecification: [],\r\n                        SelectedSpecification: {},\r\n                        TestGroupTest: [],\r\n                        TestGroupTestParameter: [],\r\n                        TestGroupTestNumericParameter: [],\r\n                        TestGroupTestFormula: [],\r\n                        TestGroupTestPredefinedParameter: [],\r\n                        TestGroupTestClinicalSpec: [],\r\n                        TestGroupTestCharParameter: [],\r\n                        ActiveKey: inputParam.activeKey,\r\n                        FocusKey: inputParam.focusKey,\r\n                        SelectedTest: {},\r\n                        selectedParameter: {},\r\n                        TestGroupSpecFile: [],\r\n                        TestGroupSpecificationHistory: [],\r\n                        SelectedComponent: undefined,\r\n                        RulesEngine: []\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeTestCategory = (inputParam, testGroupInputData) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestMasterByCategory\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                inputParam.selectedRecord.ntestcode = [];\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: inputParam.selectedRecord,\r\n                        testGroupInputData: {\r\n                            ...testGroupInputData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getSpecificationDetails = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/get\" + inputParam.methodUrl, {\r\n            ...inputParam.inputData\r\n        })\r\n            .then(response => {\r\n                if (searchRef.current)\r\n                    searchRef.current.value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        screenName: inputParam.screenName\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const editSpecFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        const masterData = inputParam.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (inputParam.testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                inputParam.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n                    userinfo: inputParam.userInfo\r\n                }),\r\n                rsapi.post(\"/testgroup/getActiveSpecFileById\", {\r\n                    userinfo: inputParam.userInfo,\r\n                    testgroupspecfile: inputParam.selectedRecord,\r\n                    ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\r\n                })\r\n                ]\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        const linkmaster = response[0].data.LinkMaster;\r\n                        const defaultLink = linkmaster.filter(item => item.ndefaultlink === transactionStatus.YES);\r\n                        const editObject = response[1].data;\r\n                        let nlinkcode = {};\r\n                        let link = {};\r\n                        if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                            nlinkcode = {\r\n                                \"label\": editObject.slinkname,\r\n                                \"value\": editObject.nlinkcode\r\n                            }\r\n                            link = {\r\n                                slinkfilename: editObject.sfilename,\r\n                                slinkdescription: editObject.sdescription,\r\n                                nlinkdefaultstatus: editObject.ndefaultstatus,\r\n                                sfilesize: '',\r\n                                nfilesize: 0,\r\n                                ndefaultstatus: 4,\r\n                                sfilename: '',\r\n                            }\r\n\r\n                        } else {\r\n                            nlinkcode = defaultLink.length > 0 ? {\r\n                                \"label\": defaultLink[0].slinkname,\r\n                                \"value\": defaultLink[0].nlinkcode\r\n                            } : \"\"\r\n\r\n                            link = {\r\n                                slinkfilename: '',\r\n                                slinkdescription: '',\r\n                                sdescription: editObject.sdescription,\r\n                                nlinkdefaultstatus: 4,\r\n                                sfilesize: editObject.sfilesize,\r\n                                nfilesize: editObject.nfilesize,\r\n                                ndefaultstatus: editObject.ndefaultstatus,\r\n                                sfilename: editObject.sfilename,\r\n                            }\r\n                        }\r\n                        const selectedRecord = {\r\n                            // ...editObject,\r\n                            ...link,\r\n                            nallotedspeccode: editObject.nallotedspeccode,\r\n                            nspecfilecode: editObject.nspecfilecode,\r\n                            stypename: editObject.stypename,\r\n                            nattachmenttypecode: editObject.nattachmenttypecode,\r\n                            nlinkcode,\r\n                            // disabled: true\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                screenName: \"IDS_SPECFILE\",\r\n                                editFiles: Object.values(editObject).length > 0 && editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {},\r\n                                selectedRecord,\r\n                                ncontrolCode: inputParam.ncontrolCode\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 409 || error.response.status === 417) {\r\n                            toast.warn(error.response.data);\r\n                        } else {\r\n                            toast.error(error.message)\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const addTestGroupCodedResult = (operation, paramdata, userInfo, ncontrolCode, optionalData, masterData) => {\r\n    return (dispatch) => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = optionalData.testgroupspecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                dispatch(initRequest(true));\r\n                const urlArray = [\r\n                    rsapi.post(\"grade/getGrade\", {\r\n                        \"userinfo\": userInfo\r\n                    })\r\n                ];\r\n                if (operation === \"update\") {\r\n                    urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterById\", {\r\n                        testgrouptestpredefinedparameter: paramdata,\r\n                        \"userinfo\": userInfo,\r\n                        testgroupspecification\r\n                    }));\r\n\r\n                    urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterSubCodedById\", {\r\n                        testgrouptestpredefinedparameter: paramdata,\r\n                        \"userinfo\": userInfo,\r\n                        testgroupspecification\r\n                    }));\r\n                }\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        let selectedRecord = {};\r\n                        let selectedsubcodedresult = [];\r\n                        let selectsubcodedelete = [];\r\n                        const gradeMap = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                        const grade = gradeMap.get(\"OptionList\");\r\n                        if (operation === \"update\") {\r\n                            const editCodedResult = response[1].data;\r\n                            selectedRecord = {\r\n                                ntestgrouptestpredefcode: paramdata[\"ntestgrouptestpredefcode\"],\r\n                                ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\r\n                                ngradecode: {\r\n                                    \"label\": editCodedResult[\"sdisplaystatus\"],\r\n                                    \"value\": editCodedResult[\"ngradecode\"]\r\n                                },\r\n                                spredefinedname: editCodedResult[\"spredefinedname\"],\r\n                                //sresultparacomment: editCodedResult[\"sresultparacomment\"],\r\n                                spredefinedsynonym: editCodedResult[\"spredefinedsynonym\"],\r\n                                spredefinedcomments: editCodedResult[\"spredefinedcomments\"],\r\n                                nneedresultentryalert: editCodedResult[\"nneedresultentryalert\"],\r\n                                nneedsubcodedresult: editCodedResult[\"nneedsubcodedresult\"],\r\n                                salertmessage: editCodedResult[\"salertmessage\"]\r\n                            }\r\n\r\n                            selectedsubcodedresult = response[2].data;\r\n                        } else {\r\n                            selectedRecord = {\r\n                                ngradecode: gradeMap.get(\"DefaultValue\"),\r\n                                nneedresultentryalert: 4,\r\n                                nneedsubcodedresult: 4\r\n                                // {\r\n                                //     \"value\": grade[0].ngradecode,\r\n                                //     \"label\": grade[0][\"sdisplaystatus\"]\r\n                                // }\r\n                            }\r\n\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openChildModal: true,\r\n                                showSaveContinue: false,\r\n                                operation: operation,\r\n                                screenName: \"IDS_CODEDRESULT\",\r\n                                parameterData: {\r\n                                    grade,\r\n                                    needCodedResult: false\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode,\r\n                                loading: false,\r\n                                selectedsubcodedresult,\r\n                                selectsubcodedelete\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const subCodedResultView = (operation, paramdata, userInfo, ncontrolCode, optionalData, masterData) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"testgroup/getActivePredefinedParameterSubCoded\", {\r\n            testgrouptestpredefinedparameter: paramdata,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                let selectedsubcoderesult = [];\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: {\r\n                        openModal: true,\r\n                        operation: \"View\",\r\n                        screenName: \"IDS_SUBCODERESULT\",\r\n                        selectedsubcoderesult: response.data,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            selectedsubcoderesult: response.data,\r\n                            searchedData: undefined,\r\n                        },\r\n                        //screenName: inputParam.screenName\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const addTestGroupNumericTab = (operation, paramdata, userInfo, optionalData, masterData, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = optionalData.testgroupspecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                dispatch(initRequest(true));\r\n                const urlArray = [\r\n                    rsapi.post(\"patient/getGender\", {\r\n                        \"userinfo\": userInfo\r\n                    })\r\n                ];\r\n                if (operation === \"update\") {\r\n                    urlArray.push(rsapi.post(\"testgroup/getActiveClinicalSpecById\", {\r\n                        testgrouptestpredefinedparameter: paramdata,\r\n                        \"userinfo\": userInfo,\r\n                        testgroupspecification\r\n                    }));\r\n                }\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        let selectedRecord = {};\r\n                        const gradeMap = constructOptionList(response[0].data.genderList || [], \"ngendercode\", \"sgendername\", false, false, true);\r\n                        const grade = gradeMap.get(\"OptionList\");\r\n                        if (operation === \"update\") {\r\n                            const editCodedResult = response[1].data;\r\n                            selectedRecord = {\r\n                                ntestgrouptestclinicspeccode: paramdata[\"ntestgrouptestclinicspeccode\"],\r\n                                ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\r\n                                nfromage: paramdata[\"nfromage\"],\r\n                                ntoage: paramdata[\"ntoage\"],\r\n                                ngendercode: {\r\n                                    \"label\": editCodedResult[\"sgendername\"],\r\n                                    \"value\": editCodedResult[\"ngendercode\"]\r\n                                },\r\n                                nhigha: editCodedResult[\"shigha\"],\r\n                                nhighb: editCodedResult[\"shighb\"],\r\n                                nlowa: editCodedResult[\"slowa\"],\r\n                                nlowb: editCodedResult[\"slowb\"],\r\n                                sresultvalue: editCodedResult[\"sresultvalue\"]\r\n\r\n                            }\r\n                        } else {\r\n                            selectedRecord = {\r\n                                ngendercode: gradeMap.get(\"DefaultValue\")\r\n                                // {\r\n                                //     \"value\": grade[0].ngradecode,\r\n                                //     \"label\": grade[0][\"sdisplaystatus\"]\r\n                                // }\r\n                            }\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openChildModal: true,\r\n                                showSaveContinue: false,\r\n                                operation: operation,\r\n                                screenName: \"IDS_CLINICALSPEC\",\r\n                                parameterData: {\r\n                                    grade,\r\n                                    needCodedResult: false\r\n                                },\r\n                                selectedRecord,\r\n                                ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        });\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    });\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const viewTestGroupCheckList = (inputParam, userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"checklist/viewTemplate\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openTemplateModal: true,\r\n                        testGroupCheckList: {\r\n                            templateData: response.data\r\n                        },\r\n                        loading: false,\r\n                        selectedRecord: {}\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const reportSpecification = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testgroup/specReportGenerate\", {\r\n            ...inputParam,\r\n            ntreeversiontempcode: inputParam.filterData.ntreeversiontempcode.value\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showConfirmAlert: false\r\n                    }\r\n                })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const retireSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testgroup/retireSpec\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                // const TestGroupSpecification = response.data.TestGroupSpecificationHistory ;\r\n                sortData(response.data);\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const getDataForTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, masterData, primaryKeyName) => {\r\n    return function (dispatch) {\r\n        if (masterData.selectedNode !== undefined && masterData.selectedNode !== null && masterData.SelectedSpecification !== null) {\r\n            const testgroupspecification = masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                let urlArray = [];\r\n                const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", { \"userinfo\": userInfo });\r\n                const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", { \"userinfo\": userInfo, ntreeversiontempcode: masterData.selectedNode.ntreeversiontempcode });\r\n\r\n                urlArray = [materialTypeUrl, validationUrl];\r\n\r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                        console.log(ncontrolCode)\r\n                        if (masterData.SelectedTest && masterData.SelectedTest !== undefined) {\r\n\r\n                            if (response[1].data === \"Success\") {\r\n\r\n                                const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\",\r\n                                    \"smaterialtypename\", undefined, undefined, false);\r\n\r\n                                const materialType = materialTypeMap.get(\"OptionList\");\r\n                                const materialTypedefault = materialTypeMap.get(\"DefaultValue\");\r\n\r\n                                selectedRecord[\"nmaterialtypecode\"] = materialTypedefault;\r\n                                if (selectedRecord[\"nmaterialtypecode\"] !== undefined) {\r\n                                    let inputData = []\r\n                                    let inputParam = { operation: operation, selectedRecord: selectedRecord, materialType: materialType, inputData: { nmaterialtypecode: materialTypedefault.value }, materialType: materialType, masterData: masterData, screenName: screenName, ncontrolCode }\r\n                                    dispatch(getMaterialCategoryBasedMaterialType(inputParam));\r\n\r\n                                } else {\r\n                                    dispatch({\r\n                                        type: DEFAULT_RETURN,\r\n                                        payload: {\r\n                                            materialType: materialType,\r\n                                            materialList: undefined,\r\n                                            materialCategoryList: undefined,\r\n                                            isOpen: true,\r\n                                            operation: operation,\r\n                                            screenName: screenName,\r\n                                            openChildModal: true,\r\n                                            ncontrolCode: ncontrolCode,\r\n                                            loading: false,\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                            else {\r\n                                toast.warn(intl.formatMessage({\r\n                                    id: response[1].data\r\n                                }));\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        operation: operation,\r\n                                        screenName: screenName,\r\n                                        ncontrolCode: ncontrolCode,\r\n                                        loading: false\r\n                                    }\r\n                                });\r\n\r\n                            }\r\n                        }\r\n                        else {\r\n\r\n                            toast.warn(intl.formatMessage({\r\n                                id: \"IDS_NEEDTOADDTEST\"\r\n                            }));\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    operation: operation,\r\n                                    screenName: screenName,\r\n                                    ncontrolCode: ncontrolCode,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(intl.formatMessage({\r\n                                id: error.message\r\n                            }));\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: error.response.data\r\n                            }));\r\n                        }\r\n                    })\r\n\r\n\r\n            }\r\n            else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTSPECIFICATION\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getMaterialCategoryBasedMaterialType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"material/getMaterialcombo\", { nmaterialtypecode: inputParam.inputData.nmaterialtypecode })\r\n            .then(response => {\r\n                let selectedRecord = {}\r\n                selectedRecord = inputParam.selectedRecord\r\n\r\n                const materialCategoryMap = constructOptionList(response.data.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                    \"smaterialcatname\", undefined, undefined, false);\r\n\r\n                const materialCategoryList = materialCategoryMap.get(\"OptionList\");\r\n                const materialCategorydefault = materialCategoryMap.get(\"DefaultValue\");\r\n                selectedRecord['nmaterialcatcode'] = materialCategorydefault;\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                if (response.data.MaterialCategoryMain.length === 0) {\r\n                    if (selectedRecord['nmaterialcatcode']) {\r\n                        delete selectedRecord['nmaterialcatcode']\r\n\r\n                    }\r\n                    if (selectedRecord['nmaterialcode']) {\r\n                        delete selectedRecord['nmaterialcode']\r\n\r\n                    }\r\n                }\r\n                let materialList = []\r\n                if (materialCategoryList.length !== 0) {\r\n                    materialList = materialList\r\n                    inputParam = {\r\n                        ...inputParam, responsecat: response, materialCategoryList: materialCategoryList, selectedRecord: selectedRecord,\r\n                        inputData: {\r\n                            //nmaterialcatcode: materialCategorydefault.value,\r\n                            nmaterialtypecode: inputParam.inputData.nmaterialtypecode\r\n                        }\r\n                    }\r\n                    dispatch(getMaterialBasedMaterialCategory(inputParam));\r\n                }\r\n\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openChildModal: true,\r\n                            screenName: inputParam.screenName,\r\n                            masterData, loading: false,\r\n                            materialCategoryList: materialCategoryList,\r\n                            materialType: inputParam.materialType,\r\n                            materialList: materialList,\r\n                            selectedRecord: selectedRecord,\r\n                            operation: inputParam.operation,\r\n                            ncontrolCode: inputParam.ncontrolCode\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getMaterialBasedMaterialCategory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"testgroup/getAvailableMaterial\", {\r\n            nmaterialtypecode: inputParam.inputData.nmaterialtypecode, nmaterialcatcode: inputParam.inputData.nmaterialcatcode !== undefined\r\n                ? inputParam.inputData.nmaterialcatcode : inputParam.responsecat.data.MaterialCategoryMain[0].nmaterialcatcode,\r\n            ntestgrouptestcode: inputParam.masterData.SelectedTest.ntestgrouptestcode\r\n        })\r\n            .then(response => {\r\n\r\n                let selectedRecord = inputParam.selectedRecord;\r\n\r\n                const materialMap = constructjsonOptionList(response.data.MaterialCombo || [], \"nmaterialcode\",\r\n                    \"Material Name\", undefined, undefined, false);\r\n\r\n                const materialList = materialMap.get(\"OptionList\");\r\n\r\n                if (response.data.MaterialCombo.length === 0) {\r\n                    delete selectedRecord['nmaterialcode']\r\n                }\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                if (inputParam.materialCategoryList) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            materialCategoryList: inputParam.materialCategoryList,\r\n                            masterData, loading: false,\r\n                            materialList: materialList,\r\n                            openChildModal: true,\r\n                            screenName: inputParam.screenName,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            materialType: inputParam.materialType,\r\n                            operation: inputParam.operation,\r\n                            ncontrolCode: inputParam.ncontrolCode\r\n\r\n\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData, loading: false,\r\n                            materialList: materialList,\r\n                            openChildModal: true,\r\n\r\n\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const getTestGroupMaterial = (inputParam) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestGroupTestMaterial\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const getDataForEditTestMaterial = (screenName, operation, userInfo, ncontrolCode, selectedRecord, Data, primaryKeyName) => {\r\n    return function (dispatch) {\r\n\r\n        const testgroupspecification = Data.SelectedSpecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n            testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n\r\n\r\n            let urlArray = [];\r\n            const materialTypeUrl = rsapi.post(\"materialcategory/getMaterialType\", { \"userinfo\": userInfo });\r\n            const materialCatUrl = rsapi.post(\"material/getMaterialcombo\", { nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode });\r\n            const materialUrl = rsapi.post(\"testgroup/getAvailableMaterial\", {\r\n                nmaterialcatcode: Data.selectedMaterial.nmaterialcatcode, nmaterialtypecode: Data.selectedMaterial.nmaterialtypecode,\r\n                ntestgrouptestcode: Data.SelectedTest.ntestgrouptestcode\r\n            });\r\n            const materialById = rsapi.post(\"testgroup/getActiveTestMaterialById\", {\r\n                [primaryKeyName]: Data.selectedMaterial.ntestgrouptestmaterialcode, \"userinfo\": userInfo\r\n            });\r\n            const validationUrl = rsapi.post(\"testgroup/validationForRetiredTemplate\", { \"userinfo\": userInfo, ntreeversiontempcode: Data.selectedNode.ntreeversiontempcode });\r\n\r\n            urlArray = [materialTypeUrl, materialCatUrl, materialUrl, materialById, validationUrl];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    if (response[4].data === \"Success\") {\r\n\r\n                        let selectedRecord = {};\r\n                        let MaterialCategoryData = [];\r\n                        let MaterialTypeData = [];\r\n                        let MaterialData = [];\r\n\r\n                        const materialTypeMap = constructOptionList(response[0].data || [], \"nmaterialtypecode\",\r\n                            \"smaterialtypename\", undefined, undefined, false);\r\n\r\n                        const materialType = materialTypeMap.get(\"OptionList\");\r\n\r\n                        const materialCategoryMap = constructOptionList(response[1].data.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                            \"smaterialcatname\", undefined, undefined, false);\r\n\r\n                        const materialCategoryList = materialCategoryMap.get(\"OptionList\");\r\n                        const materialMap = constructjsonOptionList(response[2].data.MaterialCombo || [], \"nmaterialcode\",\r\n                            \"Material Name\", undefined, undefined, false);\r\n\r\n                        const materialList = materialMap.get(\"OptionList\");\r\n\r\n                        MaterialCategoryData.push({\r\n                            \"value\": response[3].data[\"nmaterialcatcode\"],\r\n                            \"label\": response[3].data[\"smaterialcatname\"]\r\n                        });\r\n                        MaterialTypeData.push({\r\n                            \"value\": response[3].data[\"nmaterialtypecode\"],\r\n                            \"label\": response[3].data[\"smaterialtypename\"]\r\n                        });\r\n                        MaterialData.push({\r\n                            \"value\": response[3].data[\"nmaterialcode\"],\r\n                            \"label\": response[3].data[\"smaterialname\"]\r\n                        });\r\n\r\n                        selectedRecord = response[3].data;\r\n                        selectedRecord[\"nmaterialcatcode\"] = MaterialCategoryData[0];\r\n                        selectedRecord[\"nmaterialtypecode\"] = MaterialTypeData[0];\r\n                        selectedRecord[\"nmaterialcode\"] = MaterialData[0];\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                materialType: materialType,\r\n                                materialList: materialList,\r\n                                materialCategoryList: materialCategoryList,\r\n                                selectedRecord: selectedRecord,\r\n                                isOpen: true,\r\n                                operation: operation,\r\n                                screenName: screenName,\r\n                                openChildModal: true,\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false,\r\n                            }\r\n                        });\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: response[4].data\r\n                        }));\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                operation: operation,\r\n                                screenName: screenName,\r\n                                ncontrolCode: ncontrolCode,\r\n                                loading: false\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n            }));\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}