{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{constructOptionList}from'../components/CommonScript';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';export function getCityService(methodParam){return function(dispatch){var methodTypeService=rsapi.post(\"city/getCity\",{userinfo:methodParam.userInfo});var urlArray=[];var selectedId=null;if(methodParam.operation===\"create\"){urlArray=[methodTypeService];}else{var _rsapi$post;var url=methodParam.inputParam.classUrl+\"/getActive\"+methodParam.inputParam.methodUrl+\"ById\";//\"method/getActiveMethodById\"      \nvar methodById=rsapi.post(url,(_rsapi$post={},_defineProperty(_rsapi$post,methodParam.primaryKeyField,methodParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",methodParam.userInfo),_rsapi$post));urlArray=[methodTypeService,methodById];selectedId=methodParam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var cityList=constructOptionList(response[0].data||[],\"ncitycode\",\"scityname\",undefined,undefined,undefined);var cityList1=cityList.get(\"OptionList\");var citydefault=cityList.get(\"DefaultValue\");if(methodParam.operation===\"update\"){selectedRecord=response[1].data;}else{selectedRecord[\"ncitycode\"]=citydefault;}dispatch({type:DEFAULT_RETURN,payload:{cityList:cityList1||[],operation:methodParam.operation,screenName:methodParam.screenName,selectedRecord:selectedRecord,openModal:true,ncontrolCode:methodParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/CityAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","toast","Axios","initRequest","intl","getCityService","methodParam","dispatch","methodTypeService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","cityList","data","undefined","cityList1","get","citydefault","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getCityService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodTypeService = rsapi.post(\"city/getCity\", \r\n                                    {userinfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodTypeService];\r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodTypeService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n          \r\n            const cityList = constructOptionList(response[0].data  ||[],\"ncitycode\",\r\n            \"scityname\" , undefined, undefined, undefined);\r\n        const  cityList1  = cityList.get(\"OptionList\");\r\n        const  citydefault  = cityList.get(\"DefaultValue\");\r\n\r\n          \r\n        if (methodParam.operation === \"update\"){\r\n            selectedRecord = response[1].data;                            \r\n        }else{\r\n            selectedRecord[\"ncitycode\"] = citydefault; \r\n        }\r\n           \r\n            dispatch({type: DEFAULT_RETURN, payload:{cityList:cityList1 || [],                               \r\n                        operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:methodParam.ncontrolCode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(intl.formatMessage({id: error.message}));\r\n            } \r\n            else{               \r\n                toast.warn(intl.formatMessage({id: error.response.data}));\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}