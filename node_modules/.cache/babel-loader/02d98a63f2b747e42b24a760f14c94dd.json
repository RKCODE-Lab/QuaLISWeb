{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\MoveSample.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { constructOptionList } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport Preloader from '../../components/preloader/preloader.component';\n\nfunction RoundProgressBar(props) {\n  const size = props.size;\n  const radius = (props.size - props.strokeWidth) / 2;\n  const viewBox = `0 0 ${size} ${size}`;\n  const dashArray = radius * Math.PI * 2;\n  const dashOffset = dashArray - dashArray * props.value / props.max;\n  const percentage = (props.value / props.max * 100).toFixed();\n  return /*#__PURE__*/React.createElement(React.Fragment, null) // <svg\n  //     width={props.size}\n  //     height={props.size}\n  //     viewBox={viewBox}\n  // >\n  // <CircularProgressbarWithChildren value={props.value} maxValue={props.max}>\n  //     <text\n  //         x=\"55%\"\n  //         y=\"50%\"\n  //         dy=\"0.4rem\"\n  //         textAnchor=\"end\"\n  //         fill={props.stroke}\n  //         style={{\n  //             fontSize: '2.5rem',\n  //             fontFamily: 'Varela Round',\n  //             fontWeight: 'bold',\n  //         }}\n  //     >\n  //         {`${props.value}`}\n  //     </text>\n  //     <text\n  //         x=\"55%\"\n  //         y=\"50%\"\n  //         dy=\".4rem\"\n  //         textAnchor=\"start\"\n  //         fill={props.stroke}\n  //         style={\n  //             {\n  //                 fontSize: '1.4rem',\n  //                 fontFamily: 'Varela Round',\n  //                 fontWeight: 'bold'\n  //             }\n  //         }\n  //     >\n  //         {`/${props.max}`}\n  //     </text>\n  //     <text\n  //         x=\"50%\"\n  //         y=\"50%\"\n  //         dy=\"1.5rem\"\n  //         textAnchor=\"middle\"\n  //         fill={props.stroke}\n  //         style={\n  //             {\n  //                 fontSize: '1rem',\n  //                 fontFamily: 'Varela Round',\n  //                 fontWeight: 'bold',\n  //             }\n  //         }\n  //     >\n  //         {props.text}\n  //     </text>\n  //     <text\n  //         x=\"50%\"\n  //         y=\"50%\"\n  //         dy=\"2.7rem\"\n  //         textAnchor=\"middle\"\n  //         fill={props.stroke}\n  //         style={\n  //             {\n  //                 fontSize: '1rem',\n  //                 fontFamily: 'Varela Round',\n  //             }\n  //         }\n  //     >\n  //         {`${percentage}%`}\n  //     </text>\n  // </CircularProgressbarWithChildren>\n  ;\n}\n\nRoundProgressBar.defaultProps = {\n  size: 200,\n  value: 25,\n  max: 100,\n  strokeWidth: 10,\n  stroke: 'red',\n  text: \"\"\n};\n\nclass MoveSampleCustomComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.state = {\n      selectedRecord: this.props.selectedRecord,\n      loading: false\n    };\n  }\n\n  render() {\n    let primaryKey = this.props.param.nsamplestoragemappingcode;\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: primaryKey,\n      as: \"select\",\n      onChange: event => this.onComboChange(event, primaryKey),\n      formLabel: this.props.param.scontainerpath,\n      isMandatory: true,\n      value: this.state.selectedRecord ? this.state.selectedRecord[primaryKey] || [] : [],\n      options: this.state.selectedRecord.mappingcodeOptions[primaryKey][\"samplestoragecontainerpathOptions\"] || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: true,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nclass MoveSample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === 'nproductcode' || fieldName === 'nprojecttypecode') {\n        this.getSampleStorageLocation({\n          userinfo: this.props.userInfo,\n          [fieldName]: comboData ? comboData.value : 0\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        this.getContainerStructure({\n          userinfo: this.props.userInfo,\n          ncontainertypecode: comboData ? comboData.value : 0\n        }, fieldName, comboData);\n      } else if (fieldName === 'nproductcode') {\n        this.getContainerStructure({\n          userinfo: this.props.userInfo,\n          ncontainertypecode: comboData ? comboData.value : 0\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n        selectedRecord['nnoofcontainer'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']) : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        this.getSampleStorageLocation({\n          userinfo: this.props.userInfo,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      selectedRecord[fieldName] = comboData;\n\n      if (comboData === null) {\n        delete selectedRecord[fieldName];\n      }\n\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.calculateRowColumn = (Row, column) => {\n      let nnoofcontainer = Row * column;\n      return nnoofcontainer;\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        if (event.target.checked) {\n          selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\n          selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\n          selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n          selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode']; //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\n        } else {\n          selectedRecord['nrow'] = 1;\n          selectedRecord['ncolumn'] = 1;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let constantvalue = value.target.value;\n\n      if (field === 'nnoofcontainer') {\n        if (constantvalue !== 0) {\n          selectedRecord['nrow'] = 1;\n          selectedRecord['ncolumn'] = constantvalue;\n        } else {\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n        }\n      }\n\n      if (!isNaN(constantvalue)) {\n        selectedRecord[field] = constantvalue;\n        this.props.childDataChange(selectedRecord);\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.state = {\n      selectedRecord: this.props.selectedRecord,\n      loading: false,\n      availableContainers: this.props.availableContainers,\n      totalContainers: this.props.totalContainers\n    };\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      isMultiContainermove: this.props.isMultiContainermove,\n      nsamplestoragelocationcode: fieldName === 'nsamplestoragelocationcode' ? comboData ? comboData.value : 0 : this.state.selectedRecord.nsamplestoragelocationcode ? this.state.selectedRecord.nsamplestoragelocationcode.value : 0,\n      ncontainertypecode: this.props.sourcencontainertypecode,\n      ncontainerstructurecode: this.props.sourcencontainerstructurecode,\n      nprojecttypecode: fieldName === 'nprojecttypecode' ? comboData ? comboData.value : 0 : this.state.selectedRecord.nprojecttypecode ? this.state.selectedRecord.nprojecttypecode.value : 0,\n      nproductcode: fieldName === 'nproductcode' ? comboData ? comboData.value : 0 : this.state.selectedRecord.nproductcode ? this.state.selectedRecord.nproductcode.value : 0,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = this.state.selectedRecord;\n      const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, true);\n      const storageStructureList = storageStructureMap.get(\"OptionList\");\n      const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragemappingcode\", \"scontainerpath\", undefined, undefined, true);\n      const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        [fieldName]: { ...comboData\n        },\n        nsamplestoragemappingcode: samplestoragecontainerpathList.length > 0 ? {\n          label: samplestoragecontainerpathList[0].label,\n          value: samplestoragecontainerpathList[0].value,\n          item: samplestoragecontainerpathList[0].item\n        } : \"\",\n        // storageStructureOptions: storageStructureList,\n        samplestoragecontainerpathOptions: samplestoragecontainerpathList\n      };\n\n      if (comboData === null) {\n        delete selectedRecord[fieldName];\n      }\n\n      this.props.childDataChange(selectedRecord, response[0].data['availableContainers']);\n      this.setState({\n        availableContainers: response[0].data['availableContainers'],\n        totalContainers: response[0].data['totalContainers'],\n        selectedRecord,\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nnoofcontainer: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow, containerStructureOptions[0].item.ncolumn) : 1,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.props.childDataChange({ ...selectedRecord,\n        [fieldName]: comboData\n      });\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      availableContainers,\n      totalContainers,\n      selectedRecord\n    } = this.state;\n    let bool = false;\n\n    if (this.props.availableContainers !== previousProps.availableContainers) {\n      bool = true;\n      availableContainers = this.props.availableContainers;\n    }\n\n    if (this.props.totalContainers !== previousProps.totalContainers) {\n      bool = true;\n      totalContainers = this.props.totalContainers;\n    }\n\n    if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.selectedRecord;\n    }\n\n    if (bool) {\n      this.setState({\n        totalContainers,\n        availableContainers,\n        selectedRecord\n      });\n    }\n  }\n\n  render() {\n    const extractedColumnList = [{\n      \"idsName\": \"IDS_FROMPATH\",\n      \"dataField\": \"scontainerpath\",\n      \"width\": \"200px\",\n      \"componentName\": \"combobox\"\n    }, {\n      \"idsName\": \"IDS_TOPATH\",\n      \"dataField\": \"scontainerpath\",\n      \"width\": \"450px\",\n      \"componentName\": \"combobox\"\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"   \", /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isMultiContainermove ? /*#__PURE__*/React.createElement(React.Fragment, null, \" \") : /*#__PURE__*/React.createElement(React.Fragment, null, \" \", /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 30\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nfromsamplestoragelocationcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nfromsamplestoragelocationcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_STORAGESTRUCTURENAME\"\n      }) //isMandatory={true}\n      ,\n      value: this.state.selectedRecord[\"nfromsamplestoragelocationcode\"] ? this.state.selectedRecord[\"nfromsamplestoragelocationcode\"] || [] : [],\n      options: this.state.selectedRecord[\"storageStructureOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: true,\n      isSearchable: true,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nfromsamplestoragemappingcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nfromsamplestoragemappingcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGEPATH\"\n      }) //   isMandatory={true}\n      ,\n      value: this.state.selectedRecord[\"nfromsamplestoragemappingcode\"] ? this.state.selectedRecord[\"nfromsamplestoragemappingcode\"] || [] : [],\n      options: this.state.selectedRecord[\"samplestoragecontainerpathOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: true,\n      isSearchable: true,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nsamplestoragelocationcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nsamplestoragelocationcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TOSTORAGESTRUCTURENAME\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"nsamplestoragelocationcode\"] ? this.state.selectedRecord[\"nsamplestoragelocationcode\"] || [] : [],\n      options: this.state.selectedRecord[\"storageStructureOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: true,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 29\n      }\n    }))), this.props.isMultiContainermove ? /*#__PURE__*/React.createElement(React.Fragment, null, \" \") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isSearchable: true,\n      name: \"nprojecttypecode\",\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isMandatory: false,\n      isClearable: true,\n      options: this.props.ProjectTypeOptions || [],\n      onChange: event => this.onComboChange(event, \"nprojecttypecode\"),\n      value: this.state.selectedRecord[\"nprojecttypecode\"] || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 29\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PRODUCT\"\n      }),\n      isSearchable: true,\n      name: \"nproductcode\",\n      isDisabled: false,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: false,\n      isClearable: true,\n      options: this.props.sampleTypeList,\n      value: this.state.selectedRecord[\"nproductcode\"] || \"\",\n      defaultValue: this.state.selectedRecord[\"nproductcode\"],\n      onChange: event => this.onComboChange(event, \"nproductcode\"),\n      closeMenuOnSelect: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 29\n      }\n    }))), \" \"), this.props.isMultiContainermove ?\n    /*#__PURE__*/\n    // <div style={{ width: 200, height: 200 }}>\n    //     <RoundProgressBar\n    //         value={this.state.availableContainers}\n    //         stroke={'#73bc8d'}\n    //         max={this.state.totalContainers}\n    //         text=\"AVAILABLE\"\n    //     />\n    // </div>\n    React.createElement(React.Fragment, null, \" \") : /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nsamplestoragemappingcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nsamplestoragemappingcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TOSAMPLESTORAGEPATH\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"nsamplestoragemappingcode\"] ? this.state.selectedRecord[\"nsamplestoragemappingcode\"] || [] : [],\n      options: this.state.selectedRecord[\"samplestoragecontainerpathOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: true,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 33\n      }\n    })))));\n  }\n\n}\n\nexport default injectIntl(MoveSample);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/storagemanagement/MoveSample.jsx"],"names":["React","Row","Col","injectIntl","FormSelectSearch","toast","Axios","constructOptionList","rsapi","Preloader","RoundProgressBar","props","size","radius","strokeWidth","viewBox","dashArray","Math","PI","dashOffset","value","max","percentage","toFixed","defaultProps","stroke","text","MoveSampleCustomComponent","Component","constructor","onComboChange","comboData","fieldName","selectedRecord","state","childDataChange","setState","loading","render","primaryKey","param","nsamplestoragemappingcode","event","scontainerpath","mappingcodeOptions","MoveSample","getSampleStorageLocation","userinfo","userInfo","getContainerStructure","ncontainertypecode","item","nrow","ncolumn","calculateRowColumn","nsamplestoragelocationcode","column","nnoofcontainer","onInputChange","target","type","checked","name","onNumericInputChange","field","constantvalue","isNaN","availableContainers","totalContainers","inputData","inputParamData","isMultiContainermove","sourcencontainertypecode","ncontainerstructurecode","sourcencontainerstructurecode","nprojecttypecode","nproductcode","urlArray","url1","post","all","then","response","storageStructureMap","data","undefined","storageStructureList","get","samplestoragecontainerpathMap","samplestoragecontainerpathList","length","label","samplestoragecontainerpathOptions","catch","error","status","message","warn","containerStructureOptions","containerStructureList","containerStructure","componentDidUpdate","previousProps","previousState","bool","extractedColumnList","intl","formatMessage","id","ProjectTypeOptions","sampleTypeList"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,+BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,SAAP,MAAsB,gDAAtB;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,QAAMC,IAAI,GAAGD,KAAK,CAACC,IAAnB;AACA,QAAMC,MAAM,GAAG,CAACF,KAAK,CAACC,IAAN,GAAaD,KAAK,CAACG,WAApB,IAAmC,CAAlD;AACA,QAAMC,OAAO,GAAI,OAAMH,IAAK,IAAGA,IAAK,EAApC;AACA,QAAMI,SAAS,GAAGH,MAAM,GAAGI,IAAI,CAACC,EAAd,GAAmB,CAArC;AACA,QAAMC,UAAU,GAAGH,SAAS,GAAGA,SAAS,GAAGL,KAAK,CAACS,KAAlB,GAA0BT,KAAK,CAACU,GAA/D;AACA,QAAMC,UAAU,GAAG,CAACX,KAAK,CAACS,KAAN,GAAcT,KAAK,CAACU,GAApB,GAA0B,GAA3B,EAAgCE,OAAhC,EAAnB;AACA,sBAAQ,yCAAR,CACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEJ;AAsEH;;AAGDb,gBAAgB,CAACc,YAAjB,GAAgC;AAC5BZ,EAAAA,IAAI,EAAE,GADsB;AAE5BQ,EAAAA,KAAK,EAAE,EAFqB;AAG5BC,EAAAA,GAAG,EAAE,GAHuB;AAI5BP,EAAAA,WAAW,EAAE,EAJe;AAK5BW,EAAAA,MAAM,EAAE,KALoB;AAM5BC,EAAAA,IAAI,EAAE;AANsB,CAAhC;;AASA,MAAMC,yBAAN,SAAwC3B,KAAK,CAAC4B,SAA9C,CAAwD;AACpDC,EAAAA,WAAW,CAAClB,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAOnBmB,aAPmB,GAOH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAMC,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BD,SAA5B;AACA,WAAKpB,KAAL,CAAWwB,eAAX,CAA2BF,cAA3B;AACA,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACH,KAZkB;;AAEf,SAAKC,KAAL,GAAa;AACTD,MAAAA,cAAc,EAAE,KAAKtB,KAAL,CAAWsB,cADlB;AAETI,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIH;;AAODC,EAAAA,MAAM,GAAG;AACL,QAAIC,UAAU,GAAG,KAAK5B,KAAL,CAAW6B,KAAX,CAAiBC,yBAAlC;AACA,wBAEI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAEF,UADV;AAEI,MAAA,EAAE,EAAE,QAFR;AAGI,MAAA,QAAQ,EAAGG,KAAD,IAAW,KAAKZ,aAAL,CAAmBY,KAAnB,EAA0BH,UAA1B,CAHzB;AAII,MAAA,SAAS,EAAE,KAAK5B,KAAL,CAAW6B,KAAX,CAAiBG,cAJhC;AAKI,MAAA,WAAW,EAAE,IALjB;AAMI,MAAA,KAAK,EAAE,KAAKT,KAAL,CAAWD,cAAX,GACH,KAAKC,KAAL,CAAWD,cAAX,CAA0BM,UAA1B,KAAyC,EADtC,GAC2C,EAPtD;AAQI,MAAA,OAAO,EAAE,KAAKL,KAAL,CAAWD,cAAX,CAA0BW,kBAA1B,CAA6CL,UAA7C,EAAyD,mCAAzD,KAAiG,EAR9G;AASI,MAAA,QAAQ,EAAE,OATd;AAUI,MAAA,WAAW,EAAE,OAVjB;AAWI,MAAA,OAAO,EAAE,KAXb;AAYI,MAAA,UAAU,EAAE,KAZhB;AAaI,MAAA,YAAY,EAAE,IAblB;AAcI,MAAA,WAAW,EAAE,KAdjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CAFJ;AAyBH;;AAzCmD;;AA4CxD,MAAMM,UAAN,SAAyB7C,KAAK,CAAC4B,SAA/B,CAAyC;AAErCC,EAAAA,WAAW,CAAClB,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAqInBmB,aArImB,GAqIH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAMC,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAApD;;AACA,UAAID,SAAS,KAAK,cAAd,IAAgCA,SAAS,KAAK,kBAAlD,EAAsE;AAClE,aAAKc,wBAAL,CAA8B;AAC1BC,UAAAA,QAAQ,EAAE,KAAKpC,KAAL,CAAWqC,QADK;AAE1B,WAAChB,SAAD,GAAaD,SAAS,GAAGA,SAAS,CAACX,KAAb,GAAqB;AAFjB,SAA9B,EAGGY,SAHH,EAGcD,SAHd;AAIH,OALD,MAKO,IAAIC,SAAS,KAAK,oBAAlB,EAAwC;AAC3C,aAAKiB,qBAAL,CAA2B;AACvBF,UAAAA,QAAQ,EAAE,KAAKpC,KAAL,CAAWqC,QADE;AAEvBE,UAAAA,kBAAkB,EAAEnB,SAAS,GAAGA,SAAS,CAACX,KAAb,GAAqB;AAF3B,SAA3B,EAGGY,SAHH,EAGcD,SAHd;AAKH,OANM,MAMA,IAAIC,SAAS,KAAK,cAAlB,EAAkC;AACrC,aAAKiB,qBAAL,CAA2B;AACvBF,UAAAA,QAAQ,EAAE,KAAKpC,KAAL,CAAWqC,QADE;AAEvBE,UAAAA,kBAAkB,EAAEnB,SAAS,GAAGA,SAAS,CAACX,KAAb,GAAqB;AAF3B,SAA3B,EAGGY,SAHH,EAGcD,SAHd;AAKH,OANM,MAMA,IAAIC,SAAS,KAAK,yBAAlB,EAA6C;AAChDC,QAAAA,cAAc,CAAC,MAAD,CAAd,GAAyBF,SAAS,CAACoB,IAAV,CAAeC,IAAf,GAAsBrB,SAAS,CAACoB,IAAV,CAAeC,IAArC,GAA4C,CAArE;AACAnB,QAAAA,cAAc,CAAC,SAAD,CAAd,GAA4BF,SAAS,CAACoB,IAAV,CAAeE,OAAf,GAAyBtB,SAAS,CAACoB,IAAV,CAAeE,OAAxC,GAAkD,CAA9E;AACApB,QAAAA,cAAc,CAAC,gBAAD,CAAd,GAAmCA,cAAc,CAAC,eAAD,CAAd,KAAoC,IAApC,GAA2C,KAAKqB,kBAAL,CAAwBrB,cAAc,CAAC,MAAD,CAAtC,EAC1EA,cAAc,CAAC,SAAD,CAD4D,CAA3C,GACF,CADjC;AAGH,OANM,MAMA,IAAID,SAAS,KAAK,4BAAlB,EAAgD;AACnD,aAAKc,wBAAL,CAA8B;AAC1BC,UAAAA,QAAQ,EAAE,KAAKpC,KAAL,CAAWqC,QADK;AAE1BO,UAAAA,0BAA0B,EAAExB,SAAS,CAACX;AAFZ,SAA9B,EAIGY,SAJH,EAIcD,SAJd;AAKH;;AACDE,MAAAA,cAAc,CAACD,SAAD,CAAd,GAA4BD,SAA5B;;AACA,UAAGA,SAAS,KAAK,IAAjB,EAAsB;AAClB,eAAOE,cAAc,CAACD,SAAD,CAArB;AACH;;AACD,WAAKrB,KAAL,CAAWwB,eAAX,CAA2BF,cAA3B;AACA,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACH,KA3KkB;;AAAA,SA4KnBqB,kBA5KmB,GA4KE,CAACrD,GAAD,EAAMuD,MAAN,KAAiB;AAClC,UAAIC,cAAc,GAAGxD,GAAG,GAAGuD,MAA3B;AACA,aAAOC,cAAP;AACH,KA/KkB;;AAAA,SAgLnBC,aAhLmB,GAgLFhB,KAAD,IAAW;AACvB,YAAMT,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAApD;;AACA,UAAIS,KAAK,CAACiB,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC,YAAIlB,KAAK,CAACiB,MAAN,CAAaE,OAAjB,EAA0B;AACtB5B,UAAAA,cAAc,CAAC,oBAAD,CAAd,IAAwC,OAAOA,cAAc,CAAC,oBAAD,CAA7D;AACAA,UAAAA,cAAc,CAAC,yBAAD,CAAd,IAA6C,OAAOA,cAAc,CAAC,yBAAD,CAAlE;AACAA,UAAAA,cAAc,CAAC,2BAAD,CAAd,IAA+C,OAAOA,cAAc,CAAC,2BAAD,CAApE;AACAA,UAAAA,cAAc,CAAC,MAAD,CAAd,IAA0B,OAAOA,cAAc,CAAC,MAAD,CAA/C;AACAA,UAAAA,cAAc,CAAC,SAAD,CAAd,IAA6B,OAAOA,cAAc,CAAC,SAAD,CAAlD;AACAA,UAAAA,cAAc,CAAC,sBAAD,CAAd,IAA0C,OAAOA,cAAc,CAAC,sBAAD,CAA/D,CANsB,CAQtB;AACH,SATD,MASO;AACHA,UAAAA,cAAc,CAAC,MAAD,CAAd,GAAyB,CAAzB;AACAA,UAAAA,cAAc,CAAC,SAAD,CAAd,GAA4B,CAA5B;AACH;;AACDA,QAAAA,cAAc,CAACS,KAAK,CAACiB,MAAN,CAAaG,IAAd,CAAd,GAAoCpB,KAAK,CAACiB,MAAN,CAAaE,OAAjD;AACH,OAfD,MAeO;AACH5B,QAAAA,cAAc,CAACS,KAAK,CAACiB,MAAN,CAAaG,IAAd,CAAd,GAAoCpB,KAAK,CAACiB,MAAN,CAAavC,KAAjD;AACH;;AACD,WAAKT,KAAL,CAAWwB,eAAX,CAA2BF,cAA3B;AACA,WAAKG,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACH,KAtMkB;;AAAA,SA+MnB8B,oBA/MmB,GA+MI,CAAC3C,KAAD,EAAQ4C,KAAR,KAAkB;AACrC,YAAM/B,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAX,IAA6B,EAApD;AACA,UAAIgC,aAAa,GAAG7C,KAAK,CAACuC,MAAN,CAAavC,KAAjC;;AACA,UAAI4C,KAAK,KAAK,gBAAd,EAAgC;AAC5B,YAAIC,aAAa,KAAK,CAAtB,EAAyB;AACrBhC,UAAAA,cAAc,CAAC,MAAD,CAAd,GAAyB,CAAzB;AACAA,UAAAA,cAAc,CAAC,SAAD,CAAd,GAA4BgC,aAA5B;AACH,SAHD,MAGO;AACHhC,UAAAA,cAAc,CAAC,MAAD,CAAd,IAA0B,OAAOA,cAAc,CAAC,MAAD,CAA/C;AACAA,UAAAA,cAAc,CAAC,SAAD,CAAd,IAA6B,OAAOA,cAAc,CAAC,SAAD,CAAlD;AACH;AAEJ;;AACD,UAAI,CAACiC,KAAK,CAACD,aAAD,CAAV,EAA2B;AACvBhC,QAAAA,cAAc,CAAC+B,KAAD,CAAd,GAAwBC,aAAxB;AACA,aAAKtD,KAAL,CAAWwB,eAAX,CAA2BF,cAA3B;AACA,aAAKG,QAAL,CAAc;AAAEH,UAAAA;AAAF,SAAd;AACH;AACJ,KAjOkB;;AAEf,SAAKC,KAAL,GAAa;AACTD,MAAAA,cAAc,EAAE,KAAKtB,KAAL,CAAWsB,cADlB;AAETI,MAAAA,OAAO,EAAE,KAFA;AAGT8B,MAAAA,mBAAmB,EAAE,KAAKxD,KAAL,CAAWwD,mBAHvB;AAITC,MAAAA,eAAe,EAAE,KAAKzD,KAAL,CAAWyD;AAJnB,KAAb;AAMH;;AACDtB,EAAAA,wBAAwB,CAACuB,SAAD,EAAYrC,SAAZ,EAAuBD,SAAvB,EAAkC;AACtD,QAAIuC,cAAc,GAAG,EAArB;AACA,SAAKlC,QAAL,CAAc;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAiC,IAAAA,cAAc,GAAG;AACbC,MAAAA,oBAAoB,EAAE,KAAK5D,KAAL,CAAW4D,oBADpB;AAEbhB,MAAAA,0BAA0B,EAACvB,SAAS,KAAG,4BAAZ,GAA0CD,SAAS,GAAGA,SAAS,CAACX,KAAb,GAAqB,CAAxE,GAA6E,KAAKc,KAAL,CAAWD,cAAX,CAA0BsB,0BAA1B,GACxG,KAAKrB,KAAL,CAAWD,cAAX,CAA0BsB,0BAA1B,CAAqDnC,KADmD,GAC3C,CAHhD;AAIb8B,MAAAA,kBAAkB,EAAE,KAAKvC,KAAL,CAAW6D,wBAJlB;AAKbC,MAAAA,uBAAuB,EAAE,KAAK9D,KAAL,CAAW+D,6BALvB;AAMbC,MAAAA,gBAAgB,EAAE3C,SAAS,KAAG,kBAAZ,GAAgCD,SAAS,GAAGA,SAAS,CAACX,KAAb,GAAqB,CAA9D,GAAoE,KAAKc,KAAL,CAAWD,cAAX,CAA0B0C,gBAA1B,GAClF,KAAKzC,KAAL,CAAWD,cAAX,CAA0B0C,gBAA1B,CAA2CvD,KADuC,GAC/B,CAP1C;AAQbwD,MAAAA,YAAY,EAAE5C,SAAS,KAAG,cAAZ,GAA4BD,SAAS,GAAGA,SAAS,CAACX,KAAb,GAAqB,CAA1D,GAA8D,KAAKc,KAAL,CAAWD,cAAX,CAA0B2C,YAA1B,GACxE,KAAK1C,KAAL,CAAWD,cAAX,CAA0B2C,YAA1B,CAAuCxD,KADiC,GACzB,CATtC;AAUb2B,MAAAA,QAAQ,EAAEsB,SAAS,CAACtB;AAVP,KAAjB;AAYA,QAAI8B,QAAQ,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGtE,KAAK,CAACuE,IAAN,CAAW,qCAAX,EAAkDT,cAAlD,CAAb;AAEAO,IAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACAxE,IAAAA,KAAK,CAAC0E,GAAN,CAAUH,QAAV,EACKI,IADL,CACUC,QAAQ,IAAI;AACd,UAAIjD,cAAc,GAAG,KAAKC,KAAL,CAAWD,cAAhC;AACA,YAAMkD,mBAAmB,GAAG5E,mBAAmB,CAAC2E,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,uBAAjB,KAA6C,EAA9C,EAC3C,4BAD2C,EAE3C,4BAF2C,EAEbC,SAFa,EAEFA,SAFE,EAES,IAFT,CAA/C;AAGA,YAAMC,oBAAoB,GAAGH,mBAAmB,CAACI,GAApB,CAAwB,YAAxB,CAA7B;AAEA,YAAMC,6BAA6B,GAAGjF,mBAAmB,CAAC2E,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,4BAAjB,KAAkD,EAAnD,EACrD,2BADqD,EAErD,gBAFqD,EAEnCC,SAFmC,EAExBA,SAFwB,EAEb,IAFa,CAAzD;AAGA,YAAMI,8BAA8B,GAAGD,6BAA6B,CAACD,GAA9B,CAAkC,YAAlC,CAAvC;AACAtD,MAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEb,SAACD,SAAD,GAAa,EACT,GAAGD;AADM,SAFA;AAKbU,QAAAA,yBAAyB,EAAEgD,8BAA8B,CAACC,MAA/B,GAAwC,CAAxC,GAA4C;AACnEC,UAAAA,KAAK,EAAEF,8BAA8B,CAAC,CAAD,CAA9B,CAAkCE,KAD0B;AAEnEvE,UAAAA,KAAK,EAAEqE,8BAA8B,CAAC,CAAD,CAA9B,CAAkCrE,KAF0B;AAGnE+B,UAAAA,IAAI,EAAEsC,8BAA8B,CAAC,CAAD,CAA9B,CAAkCtC;AAH2B,SAA5C,GAIvB,EATS;AAUb;AACAyC,QAAAA,iCAAiC,EAAEH;AAXtB,OAAjB;;AAaA,UAAG1D,SAAS,KAAK,IAAjB,EAAsB;AACjB,eAAOE,cAAc,CAACD,SAAD,CAArB;AACJ;;AAED,WAAKrB,KAAL,CAAWwB,eAAX,CAA2BF,cAA3B,EAA2CiD,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,qBAAjB,CAA3C;AAEA,WAAKhD,QAAL,CAAc;AACV+B,QAAAA,mBAAmB,EAAEe,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,qBAAjB,CADX;AAEVhB,QAAAA,eAAe,EAAEc,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB,iBAAjB,CAFP;AAGVnD,QAAAA,cAHU;AAIVI,QAAAA,OAAO,EAAE;AAJC,OAAd;AAMH,KArCL,EAqCOwD,KArCP,CAqCaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACZ,QAAN,CAAea,MAAf,KAA0B,GAA9B,EAAmC;AAC/B1F,QAAAA,KAAK,CAACyF,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH3F,QAAAA,KAAK,CAAC4F,IAAN,CAAWH,KAAK,CAACZ,QAAN,CAAeE,IAA1B;AACH;;AACD,WAAKhD,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KA9CL;AA+CH;;AACDY,EAAAA,qBAAqB,CAACoB,SAAD,EAAYrC,SAAZ,EAAuBD,SAAvB,EAAkC;AACnD,QAAIuC,cAAc,GAAG,EAArB;AACA,SAAKlC,QAAL,CAAc;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAd;AACAiC,IAAAA,cAAc,GAAG;AACbpB,MAAAA,kBAAkB,EAAEnB,SAAS,CAACX,KADjB;AAEb2B,MAAAA,QAAQ,EAAEsB,SAAS,CAACtB;AAFP,KAAjB;AAIA,QAAI8B,QAAQ,GAAG,EAAf;AACA,UAAMC,IAAI,GAAGtE,KAAK,CAACuE,IAAN,CAAW,4CAAX,EAAyDT,cAAzD,CAAb;AAEAO,IAAAA,QAAQ,GAAG,CAACC,IAAD,CAAX;AACAxE,IAAAA,KAAK,CAAC0E,GAAN,CAAUH,QAAV,EACKI,IADL,CACUC,QAAQ,IAAI;AACd,UAAI;AAAEgB,QAAAA,yBAAF;AAA6BjE,QAAAA;AAA7B,UAAgD,KAAKC,KAAzD;AAEA,UAAIiE,sBAAsB,GAAG5F,mBAAmB,CAAC2E,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBgB,kBAAjB,IAAuC,EAAxC,EAA4C,yBAA5C,EAC5C,yBAD4C,EACjBf,SADiB,EACNA,SADM,EACKA,SADL,CAAhD;AAEAa,MAAAA,yBAAyB,GAAGC,sBAAsB,CAACZ,GAAvB,CAA2B,YAA3B,CAA5B;AACAtD,MAAAA,cAAc,GAAG,EACb,GAAGA,cADU;AAEbwB,QAAAA,cAAc,EAAExB,cAAc,CAAC,eAAD,CAAd,KAAoC,IAApC,GAA2C,KAAKqB,kBAAL,CAAwB4C,yBAAyB,CAAC,CAAD,CAAzB,CAA6B/C,IAA7B,CAAkCC,IAA1D,EACvD8C,yBAAyB,CAAC,CAAD,CAAzB,CAA6B/C,IAA7B,CAAkCE,OADqB,CAA3C,GACiC,CAHpC;AAIbD,QAAAA,IAAI,EAAE8C,yBAAyB,CAACR,MAA1B,GAAmC,CAAnC,GACFQ,yBAAyB,CAAC,CAAD,CAAzB,CAA6B/C,IAA7B,CAAkCC,IADhC,GACuC,CALhC;AAMbC,QAAAA,OAAO,EAAE6C,yBAAyB,CAACR,MAA1B,GAAmC,CAAnC,GACLQ,yBAAyB,CAAC,CAAD,CAAzB,CAA6B/C,IAA7B,CAAkCE,OAD7B,GACuC,CAPnC;AAQboB,QAAAA,uBAAuB,EAAEyB,yBAAyB,CAACR,MAA1B,GAAmC,CAAnC,GACrBQ,yBAAyB,CAAC,CAAD,CADJ,GACU,EATtB;AAUbA,QAAAA,yBAAyB,EAAEA,yBAAyB,CAACR,MAA1B,GAAmC,CAAnC,GACvB,CAAC,GAAGQ,yBAAJ,CADuB,GACU;AAXxB,OAAjB;AAcA,WAAKvF,KAAL,CAAWwB,eAAX,CAA2B,EACvB,GAAGF,cADoB;AAEvB,SAACD,SAAD,GAAaD;AAFU,OAA3B;AAKA,WAAKK,QAAL,CAAc;AAEVH,QAAAA,cAAc,EAAE,EACZ,GAAGA,cADS;AAEZ,WAACD,SAAD,GAAaD;AAFD,SAFN;AAMVM,QAAAA,OAAO,EAAE;AANC,OAAd;AAQH,KAlCL,EAkCOwD,KAlCP,CAkCaC,KAAK,IAAI;AACd,UAAIA,KAAK,CAACZ,QAAN,CAAea,MAAf,KAA0B,GAA9B,EAAmC;AAC/B1F,QAAAA,KAAK,CAACyF,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAEO;AACH3F,QAAAA,KAAK,CAAC4F,IAAN,CAAWH,KAAK,CAACZ,QAAN,CAAeE,IAA1B;AACH;;AACD,WAAKhD,QAAL,CAAc;AACVC,QAAAA,OAAO,EAAE;AADC,OAAd;AAGH,KA3CL;AA4CH;;AA+FDgE,EAAAA,kBAAkB,CAACC,aAAD,EAAgBC,aAAhB,EAA+B;AAC7C,QAAI;AAAEpC,MAAAA,mBAAF;AACAC,MAAAA,eADA;AACiBnC,MAAAA;AADjB,QACoC,KAAKC,KAD7C;AAEA,QAAIsE,IAAI,GAAG,KAAX;;AACA,QAAI,KAAK7F,KAAL,CAAWwD,mBAAX,KAAmCmC,aAAa,CAACnC,mBAArD,EAA0E;AACtEqC,MAAAA,IAAI,GAAG,IAAP;AACArC,MAAAA,mBAAmB,GAAG,KAAKxD,KAAL,CAAWwD,mBAAjC;AACH;;AACD,QAAI,KAAKxD,KAAL,CAAWyD,eAAX,KAA+BkC,aAAa,CAAClC,eAAjD,EAAkE;AAC9DoC,MAAAA,IAAI,GAAG,IAAP;AACApC,MAAAA,eAAe,GAAG,KAAKzD,KAAL,CAAWyD,eAA7B;AACH;;AACD,QAAI,KAAKzD,KAAL,CAAWsB,cAAX,KAA8BqE,aAAa,CAACrE,cAAhD,EAAgE;AAC5DuE,MAAAA,IAAI,GAAG,IAAP;AACAvE,MAAAA,cAAc,GAAG,KAAKtB,KAAL,CAAWsB,cAA5B;AACH;;AACD,QAAIuE,IAAJ,EAAU;AACN,WAAKpE,QAAL,CAAc;AAAEgC,QAAAA,eAAF;AAAmBD,QAAAA,mBAAnB;AAAwClC,QAAAA;AAAxC,OAAd;AACH;AAEJ;;AACDK,EAAAA,MAAM,GAAG;AACL,UAAMmE,mBAAmB,GAAG,CACxB;AAAE,iBAAW,cAAb;AAA6B,mBAAa,gBAA1C;AAA4D,eAAS,OAArE;AAA8E,uBAAiB;AAA/F,KADwB,EAExB;AAAE,iBAAW,YAAb;AAA2B,mBAAa,gBAAxC;AAA0D,eAAS,OAAnE;AAA4E,uBAAiB;AAA7F,KAFwB,CAA5B;AAIA,wBACI,8DAAK,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKvE,KAAL,CAAWG,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,eAEI,0CAEK,KAAK1B,KAAL,CAAW4D,oBAAX,gBACG,8CADH,gBAEK,4DAAG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACD,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,gCADV;AAEI,MAAA,EAAE,EAAE,QAFR;AAGI,MAAA,QAAQ,EAAG7B,KAAD,IAAW,KAAKZ,aAAL,CAAmBY,KAAnB,EAA0B,gCAA1B,CAHzB;AAII,MAAA,SAAS,EAAE,KAAK/B,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJf,CAKI;AALJ;AAMI,MAAA,KAAK,EAAE,KAAK1E,KAAL,CAAWD,cAAX,CAA0B,gCAA1B,IAA8D,KAAKC,KAAL,CAAWD,cAAX,CAA0B,gCAA1B,KAA+D,EAA7H,GAAkI,EAN7I;AAOI,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,cAAX,CAA0B,yBAA1B,CAPb;AAQI,MAAA,QAAQ,EAAE,OARd;AASI,MAAA,WAAW,EAAE,OATjB;AAUI,MAAA,OAAO,EAAE,KAVb;AAWI,MAAA,UAAU,EAAE,IAXhB;AAYI,MAAA,YAAY,EAAE,IAZlB;AAaI,MAAA,WAAW,EAAE,KAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADC,CAAH,eAoBE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,+BADV;AAEI,MAAA,EAAE,EAAE,QAFR;AAGI,MAAA,QAAQ,EAAGS,KAAD,IAAW,KAAKZ,aAAL,CAAmBY,KAAnB,EAA0B,+BAA1B,CAHzB;AAII,MAAA,SAAS,EAAE,KAAK/B,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJf,CAKI;AALJ;AAMI,MAAA,KAAK,EAAE,KAAK1E,KAAL,CAAWD,cAAX,CAA0B,+BAA1B,IAA6D,KAAKC,KAAL,CAAWD,cAAX,CAA0B,+BAA1B,KAA8D,EAA3H,GAAgI,EAN3I;AAOI,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,cAAX,CAA0B,mCAA1B,CAPb;AAQI,MAAA,QAAQ,EAAE,OARd;AASI,MAAA,WAAW,EAAE,OATjB;AAUI,MAAA,OAAO,EAAE,KAVb;AAWI,MAAA,UAAU,EAAE,IAXhB;AAYI,MAAA,YAAY,EAAE,IAZlB;AAaI,MAAA,WAAW,EAAE,KAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CApBF,CAJV,eA4CI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,4BADV;AAEI,MAAA,EAAE,EAAE,QAFR;AAGI,MAAA,QAAQ,EAAGS,KAAD,IAAW,KAAKZ,aAAL,CAAmBY,KAAnB,EAA0B,4BAA1B,CAHzB;AAII,MAAA,SAAS,EAAE,KAAK/B,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJf;AAKI,MAAA,WAAW,EAAE,IALjB;AAMI,MAAA,KAAK,EAAE,KAAK1E,KAAL,CAAWD,cAAX,CAA0B,4BAA1B,IAA0D,KAAKC,KAAL,CAAWD,cAAX,CAA0B,4BAA1B,KAA2D,EAArH,GAA0H,EANrI;AAOI,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,cAAX,CAA0B,yBAA1B,CAPb;AAQI,MAAA,QAAQ,EAAE,OARd;AASI,MAAA,WAAW,EAAE,OATjB;AAUI,MAAA,OAAO,EAAE,KAVb;AAWI,MAAA,UAAU,EAAE,KAXhB;AAYI,MAAA,YAAY,EAAE,IAZlB;AAaI,MAAA,WAAW,EAAE,KAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CA5CJ,EA+DK,KAAKtB,KAAL,CAAW4D,oBAAX,gBACG,8CADH,gBAEK,uDACN,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAK5D,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,kBAHV;AAII,MAAA,WAAW,EAAE,KAAKjG,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJjB;AAKI,MAAA,WAAW,EAAE,KALjB;AAMI,MAAA,WAAW,EAAE,IANjB;AAOI,MAAA,OAAO,EAAE,KAAKjG,KAAL,CAAWkG,kBAAX,IAAiC,EAP9C;AAQI,MAAA,QAAQ,EAAGnE,KAAD,IAAW,KAAKZ,aAAL,CAAmBY,KAAnB,EAA0B,kBAA1B,CARzB;AASI,MAAA,KAAK,EAAE,KAAKR,KAAL,CAAWD,cAAX,CAA0B,kBAA1B,KAAiD,EAT5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADM,eAgBN,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,SAAS,EAAE,KAAKtB,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CADf;AAEI,MAAA,YAAY,EAAE,IAFlB;AAGI,MAAA,IAAI,EAAE,cAHV;AAII,MAAA,UAAU,EAAE,KAJhB;AAKI,MAAA,WAAW,EAAE,KAAKjG,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CALjB;AAMI,MAAA,WAAW,EAAE,KANjB;AAOI,MAAA,WAAW,EAAE,IAPjB;AAQI,MAAA,OAAO,EAAE,KAAKjG,KAAL,CAAWmG,cARxB;AASI,MAAA,KAAK,EAAE,KAAK5E,KAAL,CAAWD,cAAX,CAA0B,cAA1B,KAA6C,EATxD;AAUI,MAAA,YAAY,EAAE,KAAKC,KAAL,CAAWD,cAAX,CAA0B,cAA1B,CAVlB;AAWI,MAAA,QAAQ,EAAGS,KAAD,IAAW,KAAKZ,aAAL,CAAmBY,KAAnB,EAA0B,cAA1B,CAXzB;AAYI,MAAA,iBAAiB,EAAE,IAZvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CAhBM,MAjEV,EAmGK,KAAK/B,KAAL,CAAW4D,oBAAX;AAAA;AACG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDATH,gBAWG,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AACI,MAAA,IAAI,EAAE,2BADV;AAEI,MAAA,EAAE,EAAE,QAFR;AAGI,MAAA,QAAQ,EAAG7B,KAAD,IAAW,KAAKZ,aAAL,CAAmBY,KAAnB,EAA0B,2BAA1B,CAHzB;AAII,MAAA,SAAS,EAAE,KAAK/B,KAAL,CAAW+F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAA9B,CAJf;AAKI,MAAA,WAAW,EAAE,IALjB;AAMI,MAAA,KAAK,EAAE,KAAK1E,KAAL,CAAWD,cAAX,CAA0B,2BAA1B,IAAyD,KAAKC,KAAL,CAAWD,cAAX,CAA0B,2BAA1B,KAA0D,EAAnH,GAAwH,EANnI;AAOI,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWD,cAAX,CAA0B,mCAA1B,CAPb;AAQI,MAAA,QAAQ,EAAE,OARd;AASI,MAAA,WAAW,EAAE,OATjB;AAUI,MAAA,OAAO,EAAE,KAVb;AAWI,MAAA,UAAU,EAAE,KAXhB;AAYI,MAAA,YAAY,EAAE,IAZlB;AAaI,MAAA,WAAW,EAAE,KAbjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CA9GR,CAFJ,CADJ;AA2IH;;AAzYoC;;AA4YzC,eAAe9B,UAAU,CAAC0C,UAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { constructOptionList } from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\n\r\nfunction RoundProgressBar(props) {\r\n    const size = props.size;\r\n    const radius = (props.size - props.strokeWidth) / 2;\r\n    const viewBox = `0 0 ${size} ${size}`;\r\n    const dashArray = radius * Math.PI * 2;\r\n    const dashOffset = dashArray - dashArray * props.value / props.max;\r\n    const percentage = (props.value / props.max * 100).toFixed();\r\n    return (<></>\r\n        // <svg\r\n        //     width={props.size}\r\n        //     height={props.size}\r\n        //     viewBox={viewBox}\r\n        // >\r\n        // <CircularProgressbarWithChildren value={props.value} maxValue={props.max}>\r\n        //     <text\r\n        //         x=\"55%\"\r\n        //         y=\"50%\"\r\n        //         dy=\"0.4rem\"\r\n        //         textAnchor=\"end\"\r\n        //         fill={props.stroke}\r\n        //         style={{\r\n        //             fontSize: '2.5rem',\r\n        //             fontFamily: 'Varela Round',\r\n        //             fontWeight: 'bold',\r\n        //         }}\r\n        //     >\r\n        //         {`${props.value}`}\r\n        //     </text>\r\n        //     <text\r\n        //         x=\"55%\"\r\n        //         y=\"50%\"\r\n        //         dy=\".4rem\"\r\n        //         textAnchor=\"start\"\r\n        //         fill={props.stroke}\r\n        //         style={\r\n        //             {\r\n        //                 fontSize: '1.4rem',\r\n        //                 fontFamily: 'Varela Round',\r\n        //                 fontWeight: 'bold'\r\n        //             }\r\n        //         }\r\n        //     >\r\n        //         {`/${props.max}`}\r\n        //     </text>\r\n        //     <text\r\n        //         x=\"50%\"\r\n        //         y=\"50%\"\r\n        //         dy=\"1.5rem\"\r\n        //         textAnchor=\"middle\"\r\n        //         fill={props.stroke}\r\n        //         style={\r\n        //             {\r\n        //                 fontSize: '1rem',\r\n        //                 fontFamily: 'Varela Round',\r\n        //                 fontWeight: 'bold',\r\n        //             }\r\n        //         }\r\n        //     >\r\n        //         {props.text}\r\n        //     </text>\r\n        //     <text\r\n        //         x=\"50%\"\r\n        //         y=\"50%\"\r\n        //         dy=\"2.7rem\"\r\n        //         textAnchor=\"middle\"\r\n        //         fill={props.stroke}\r\n        //         style={\r\n        //             {\r\n        //                 fontSize: '1rem',\r\n        //                 fontFamily: 'Varela Round',\r\n        //             }\r\n        //         }\r\n        //     >\r\n        //         {`${percentage}%`}\r\n        //     </text>\r\n        // </CircularProgressbarWithChildren>\r\n    );\r\n}\r\n\r\n\r\nRoundProgressBar.defaultProps = {\r\n    size: 200,\r\n    value: 25,\r\n    max: 100,\r\n    strokeWidth: 10,\r\n    stroke: 'red',\r\n    text: \"\"\r\n}\r\n\r\nclass MoveSampleCustomComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecord: this.props.selectedRecord,\r\n            loading: false\r\n        }\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord });\r\n    }\r\n    render() {\r\n        let primaryKey = this.props.param.nsamplestoragemappingcode;\r\n        return (\r\n\r\n            <Row>\r\n                <Col md={12}>\r\n                    <FormSelectSearch\r\n                        name={primaryKey}\r\n                        as={\"select\"}\r\n                        onChange={(event) => this.onComboChange(event, primaryKey)}\r\n                        formLabel={this.props.param.scontainerpath}\r\n                        isMandatory={true}\r\n                        value={this.state.selectedRecord ?\r\n                            this.state.selectedRecord[primaryKey] || [] : []}\r\n                        options={this.state.selectedRecord.mappingcodeOptions[primaryKey][\"samplestoragecontainerpathOptions\"] || []}\r\n                        optionId={\"value\"}\r\n                        optionValue={\"label\"}\r\n                        isMulti={false}\r\n                        isDisabled={false}\r\n                        isSearchable={true}\r\n                        isClearable={false}\r\n                    />\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nclass MoveSample extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecord: this.props.selectedRecord,\r\n            loading: false,\r\n            availableContainers: this.props.availableContainers,\r\n            totalContainers: this.props.totalContainers\r\n        }\r\n    }\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            isMultiContainermove: this.props.isMultiContainermove,\r\n            nsamplestoragelocationcode:fieldName==='nsamplestoragelocationcode'? comboData ? comboData.value : 0 :  this.state.selectedRecord.nsamplestoragelocationcode ?\r\n            this.state.selectedRecord.nsamplestoragelocationcode.value : 0,\r\n            ncontainertypecode: this.props.sourcencontainertypecode,\r\n            ncontainerstructurecode: this.props.sourcencontainerstructurecode,\r\n            nprojecttypecode: fieldName==='nprojecttypecode'? comboData ? comboData.value : 0   : this.state.selectedRecord.nprojecttypecode ?\r\n                this.state.selectedRecord.nprojecttypecode.value : 0,\r\n            nproductcode: fieldName==='nproductcode'? comboData ? comboData.value : 0 : this.state.selectedRecord.nproductcode ?\r\n                this.state.selectedRecord.nproductcode.value : 0,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemove/getsamplemovedata\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = this.state.selectedRecord;\r\n                const storageStructureMap = constructOptionList(response[0].data['sampleStorageLocation'] || [],\r\n                    \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, true);\r\n                const storageStructureList = storageStructureMap.get(\"OptionList\");\r\n\r\n                const samplestoragecontainerpathMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragemappingcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const samplestoragecontainerpathList = samplestoragecontainerpathMap.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    [fieldName]: {\r\n                        ...comboData\r\n                    },\r\n                    nsamplestoragemappingcode: samplestoragecontainerpathList.length > 0 ? {\r\n                        label: samplestoragecontainerpathList[0].label,\r\n                        value: samplestoragecontainerpathList[0].value,\r\n                        item: samplestoragecontainerpathList[0].item\r\n                    } : \"\",\r\n                    // storageStructureOptions: storageStructureList,\r\n                    samplestoragecontainerpathOptions: samplestoragecontainerpathList,\r\n                }\r\n                if(comboData === null){\r\n                     delete selectedRecord[fieldName];\r\n                }\r\n                \r\n                this.props.childDataChange(selectedRecord, response[0].data['availableContainers']);\r\n                \r\n                this.setState({\r\n                    availableContainers: response[0].data['availableContainers'],\r\n                    totalContainers: response[0].data['totalContainers'],\r\n                    selectedRecord,\r\n                    loading: false\r\n                })\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nnoofcontainer: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow,\r\n                        containerStructureOptions[0].item.ncolumn) : 1,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.props.childDataChange({\r\n                    ...selectedRecord,\r\n                    [fieldName]: comboData\r\n                });\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldName === 'nproductcode' || fieldName === 'nprojecttypecode') {\r\n            this.getSampleStorageLocation({\r\n                userinfo: this.props.userInfo,\r\n                [fieldName]: comboData ? comboData.value : 0\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            this.getContainerStructure({\r\n                userinfo: this.props.userInfo,\r\n                ncontainertypecode: comboData ? comboData.value : 0\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'nproductcode') {\r\n            this.getContainerStructure({\r\n                userinfo: this.props.userInfo,\r\n                ncontainertypecode: comboData ? comboData.value : 0\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n            selectedRecord['nnoofcontainer'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'],\r\n                selectedRecord['ncolumn']) : 1\r\n\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            this.getSampleStorageLocation({\r\n                userinfo: this.props.userInfo,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        selectedRecord[fieldName] = comboData ;    \r\n        if(comboData === null){\r\n            delete selectedRecord[fieldName];\r\n        }\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord });\r\n    }\r\n    calculateRowColumn = (Row, column) => {\r\n        let nnoofcontainer = Row * column;\r\n        return nnoofcontainer;\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            if (event.target.checked) {\r\n                selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\r\n                selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\r\n                selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\r\n                selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode'];\r\n\r\n                //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\r\n            } else {\r\n                selectedRecord['nrow'] = 1;\r\n                selectedRecord['ncolumn'] = 1;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord });\r\n    };\r\n    // onNumericInputChange = (value, field) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (!isNaN(value)) {\r\n    //         selectedRecord[field] = value;\r\n    //         this.props.childDataChange(selectedRecord);\r\n    //         this.setState({ selectedRecord });\r\n    //     }\r\n    // }\r\n    onNumericInputChange = (value, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let constantvalue = value.target.value;\r\n        if (field === 'nnoofcontainer') {\r\n            if (constantvalue !== 0) {\r\n                selectedRecord['nrow'] = 1;\r\n                selectedRecord['ncolumn'] = constantvalue;\r\n            } else {\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn']\r\n            }\r\n\r\n        }\r\n        if (!isNaN(constantvalue)) {\r\n            selectedRecord[field] = constantvalue;\r\n            this.props.childDataChange(selectedRecord);\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { availableContainers,\r\n            totalContainers, selectedRecord } = this.state\r\n        let bool = false;\r\n        if (this.props.availableContainers !== previousProps.availableContainers) {\r\n            bool = true;\r\n            availableContainers = this.props.availableContainers\r\n        }\r\n        if (this.props.totalContainers !== previousProps.totalContainers) {\r\n            bool = true;\r\n            totalContainers = this.props.totalContainers\r\n        }\r\n        if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.selectedRecord\r\n        }\r\n        if (bool) {\r\n            this.setState({ totalContainers, availableContainers, selectedRecord })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const extractedColumnList = [\r\n            { \"idsName\": \"IDS_FROMPATH\", \"dataField\": \"scontainerpath\", \"width\": \"200px\", \"componentName\": \"combobox\" },\r\n            { \"idsName\": \"IDS_TOPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\", \"componentName\": \"combobox\" }\r\n        ]\r\n        return (\r\n            <>   <Preloader loading={this.state.loading} />\r\n                {/* <DragAndDropComponent/> */}\r\n                <>\r\n\r\n                    {this.props.isMultiContainermove ?\r\n                        <> </>\r\n                        : <> <Row>\r\n                            <Col md={12}>\r\n                                <FormSelectSearch\r\n                                    name={\"nfromsamplestoragelocationcode\"}\r\n                                    as={\"select\"}\r\n                                    onChange={(event) => this.onComboChange(event, 'nfromsamplestoragelocationcode')}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_STORAGESTRUCTURENAME\" })}\r\n                                    //isMandatory={true}\r\n                                    value={this.state.selectedRecord[\"nfromsamplestoragelocationcode\"] ? this.state.selectedRecord[\"nfromsamplestoragelocationcode\"] || [] : []}\r\n                                    options={this.state.selectedRecord[\"storageStructureOptions\"]}\r\n                                    optionId={\"value\"}\r\n                                    optionValue={\"label\"}\r\n                                    isMulti={false}\r\n                                    isDisabled={true}\r\n                                    isSearchable={true}\r\n                                    isClearable={false}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nfromsamplestoragemappingcode\"}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'nfromsamplestoragemappingcode')}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGEPATH\" })}\r\n                                        //   isMandatory={true}\r\n                                        value={this.state.selectedRecord[\"nfromsamplestoragemappingcode\"] ? this.state.selectedRecord[\"nfromsamplestoragemappingcode\"] || [] : []}\r\n                                        options={this.state.selectedRecord[\"samplestoragecontainerpathOptions\"]}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n                                        isDisabled={true}\r\n                                        isSearchable={true}\r\n                                        isClearable={false}\r\n                                    />\r\n\r\n                                </Col>\r\n                            </Row></>}\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                name={\"nsamplestoragelocationcode\"}\r\n                                as={\"select\"}\r\n                                onChange={(event) => this.onComboChange(event, 'nsamplestoragelocationcode')}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_TOSTORAGESTRUCTURENAME\" })}\r\n                                isMandatory={true}\r\n                                value={this.state.selectedRecord[\"nsamplestoragelocationcode\"] ? this.state.selectedRecord[\"nsamplestoragelocationcode\"] || [] : []}\r\n                                options={this.state.selectedRecord[\"storageStructureOptions\"]}\r\n                                optionId={\"value\"}\r\n                                optionValue={\"label\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={true}\r\n                                isClearable={false}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    {this.props.isMultiContainermove ?\r\n                        <> </>\r\n                        : <> \r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                isSearchable={true}\r\n                                name={\"nprojecttypecode\"}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                isMandatory={false}\r\n                                isClearable={true}\r\n                                options={this.props.ProjectTypeOptions || []}\r\n                                onChange={(event) => this.onComboChange(event, \"nprojecttypecode\")}\r\n                                value={this.state.selectedRecord[\"nprojecttypecode\"] || \"\"}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_PRODUCT\" })}\r\n                                isSearchable={true}\r\n                                name={\"nproductcode\"}\r\n                                isDisabled={false}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={false}\r\n                                isClearable={true}\r\n                                options={this.props.sampleTypeList}\r\n                                value={this.state.selectedRecord[\"nproductcode\"] || \"\"}\r\n                                defaultValue={this.state.selectedRecord[\"nproductcode\"]}\r\n                                onChange={(event) => this.onComboChange(event, \"nproductcode\")}\r\n                                closeMenuOnSelect={true}\r\n                            />\r\n                        </Col>\r\n                    </Row> </>}\r\n                    {this.props.isMultiContainermove ?\r\n                        // <div style={{ width: 200, height: 200 }}>\r\n                        //     <RoundProgressBar\r\n                        //         value={this.state.availableContainers}\r\n                        //         stroke={'#73bc8d'}\r\n                        //         max={this.state.totalContainers}\r\n                        //         text=\"AVAILABLE\"\r\n                        //     />\r\n                        // </div>\r\n                        <> </>\r\n                        :\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <FormSelectSearch\r\n                                    name={\"nsamplestoragemappingcode\"}\r\n                                    as={\"select\"}\r\n                                    onChange={(event) => this.onComboChange(event, 'nsamplestoragemappingcode')}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_TOSAMPLESTORAGEPATH\" })}\r\n                                    isMandatory={true}\r\n                                    value={this.state.selectedRecord[\"nsamplestoragemappingcode\"] ? this.state.selectedRecord[\"nsamplestoragemappingcode\"] || [] : []}\r\n                                    options={this.state.selectedRecord[\"samplestoragecontainerpathOptions\"]}\r\n                                    optionId={\"value\"}\r\n                                    optionValue={\"label\"}\r\n                                    isMulti={false}\r\n                                    isDisabled={false}\r\n                                    isSearchable={true}\r\n                                    isClearable={false}\r\n                                />\r\n\r\n                            </Col>\r\n                        </Row>}\r\n\r\n                </>\r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default injectIntl(MoveSample);"]},"metadata":{},"sourceType":"module"}