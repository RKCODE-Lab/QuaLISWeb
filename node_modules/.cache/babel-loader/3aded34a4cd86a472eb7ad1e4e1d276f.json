{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureAuditFields.jsx\";\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport ReactTooltip from 'react-tooltip';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, TemplateType } from '../../components/Enumeration';\nimport 'rc-tabs/assets/index.css';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nclass ConfigureAuditFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    this.onAuditTabChange = tab => {\n      this.setState({\n        selectedAuditTable: this.state.auditTable.find(screen => screen.eventKey === tab),\n        extractedColumnList: tab === \"registration\" ? this.state.sampleColumnList : this.state.subSampleColumnList\n      });\n    };\n\n    const screens = [{\n      eventKey: 'registration',\n      name: \"IDS_SAMPLEREGISTRATION\",\n      formcode: formCode.SAMPLEREGISTRATION\n    }];\n    let sampleColumnList = [{\n      \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\",\n      \"field\": \"sampleauditfields\",\n      \"width\": \"600px\"\n    }, {\n      \"title\": \"IDS_AUDITEDITCAPTURE\",\n      \"field\": \"sampleauditeditfields\",\n      \"width\": \"600px\"\n    }];\n    let subSampleColumnList = [{\n      \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\",\n      \"field\": \"subsampleauditfields\",\n      \"width\": \"600px\"\n    }, {\n      \"title\": \"IDS_AUDITEDITCAPTURE\",\n      \"field\": \"subsampleauditeditfields\",\n      \"width\": \"600px\"\n    }];\n    const auditTable = [{\n      eventKey: 'registration',\n      name: \"IDS_SAMPLEFIELDS\"\n    }];\n\n    if (this.props.needSubSample) {\n      auditTable.push({\n        eventKey: 'registrationsample',\n        name: \"IDS_SUBSAMPLEFIELDS\"\n      });\n    }\n\n    this.state = {\n      screens,\n      auditTable,\n      sampleColumnList,\n      subSampleColumnList,\n      extractedColumnList: sampleColumnList,\n      selectedScreen: {\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: formCode.SAMPLEREGISTRATION\n      },\n      selectedAuditTable: {\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEFIELDS\",\n        formcode: 1\n      }\n    };\n  }\n\n  render() {\n    console.log(\"props:\", this.props, this.state); //console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.selectedTemplateType === TemplateType.Masters ? /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      id: \"tooltip-grid-wrap\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null))), /*#__PURE__*/React.createElement(ReactTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    })) : /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen =>\n    /*#__PURE__*/\n    //{\n    //return console.log(\"screen.name:\", screen.name, this.props.dataResult[this.state.selectedScreen.formcode]),\n    React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedAuditTable.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onAuditTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 31\n      }\n    }, this.state.auditTable.map(auditTable =>\n    /*#__PURE__*/\n    //{\n    //return console.log(\"screen.name2:\", auditTable.name, this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]),\n    React.createElement(TabPane, {\n      name: auditTable.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: auditTable.name\n      }),\n      key: auditTable.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      id: \"tooltip-grid-wrap\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '550px'\n      },\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\",\n      data: this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'],\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 73\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 65\n      }\n    }), this.state.extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode, this.props.operation),\n        checked: row[\"dataItem\"][column.field] || false,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 81\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(ReactTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 49\n      }\n    }))) //}\n    ))) //}\n    ))));\n  }\n\n}\n\nexport default injectIntl(ConfigureAuditFields);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/designtemplatemapping/ConfigureAuditFields.jsx"],"names":["LocalizationProvider","React","injectIntl","ReactTooltip","AtTabs","CustomSwitch","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","TemplateType","Grid","GridColumn","ConfigureAuditFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","onAuditTabChange","selectedAuditTable","auditTable","extractedColumnList","sampleColumnList","subSampleColumnList","name","formcode","SAMPLEREGISTRATION","needSubSample","push","render","console","log","selectedTemplateType","Masters","map","intl","formatMessage","id","height","dataResult","dataState","dataStateChange","row","column","field","title","textAlign","event","onChangeToggle","dataIndex","operation","columnIndex"],"mappings":"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","sourcesContent":["import { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl} from 'react-intl'\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, TemplateType } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\n\r\n\r\nclass ConfigureAuditFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const  screens = [{ eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION }];\r\n        let sampleColumnList =[  { \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\", \"field\": \"sampleauditfields\", \"width\": \"600px\" },\r\n                                 { \"title\": \"IDS_AUDITEDITCAPTURE\", \"field\": \"sampleauditeditfields\", \"width\": \"600px\" },];\r\n        \r\n        let subSampleColumnList =[  { \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\", \"field\": \"subsampleauditfields\", \"width\": \"600px\" },\r\n                                    { \"title\": \"IDS_AUDITEDITCAPTURE\", \"field\": \"subsampleauditeditfields\", \"width\": \"600px\" },];\r\n       \r\n\r\n        const  auditTable = [{ eventKey: 'registration', name: \"IDS_SAMPLEFIELDS\" },];\r\n        if(this.props.needSubSample){\r\n                auditTable.push({ eventKey: 'registrationsample', name: \"IDS_SUBSAMPLEFIELDS\"});\r\n        }\r\n        this.state = {\r\n            screens,auditTable,\r\n            sampleColumnList, subSampleColumnList,\r\n            extractedColumnList:sampleColumnList,\r\n            selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION },\r\n            selectedAuditTable: { eventKey: 'registration', name: \"IDS_SAMPLEFIELDS\", formcode: 1}\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n\r\n    onAuditTabChange = (tab) => {\r\n        this.setState({\r\n            selectedAuditTable: this.state.auditTable.find(screen => screen.eventKey === tab),\r\n            extractedColumnList: tab === \"registration\" ? this.state.sampleColumnList : this.state.subSampleColumnList\r\n        })\r\n    }\r\n    render() {\r\n      \r\n        console.log(\"props:\",this.props, this.state);\r\n        //console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\r\n        return (\r\n            <>\r\n        {this.props.selectedTemplateType === TemplateType.Masters ?\r\n                    <PerfectScrollbar>\r\n                        <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' />\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n                                    \r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        <ReactTooltip />\r\n                    </PerfectScrollbar>        \r\n\r\n                :\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>//{\r\n                       //return console.log(\"screen.name:\", screen.name, this.props.dataResult[this.state.selectedScreen.formcode]),\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                              \r\n                              <Tabs activeKey={this.state.selectedAuditTable.eventKey} moreIcon=\"...\" onChange={this.onAuditTabChange}>\r\n                                    {this.state.auditTable.map(auditTable =>//{\r\n                                        //return console.log(\"screen.name2:\", auditTable.name, this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]),\r\n                                        <TabPane name={auditTable.eventKey} tab={this.props.intl.formatMessage({ id: auditTable.name })} key={auditTable.eventKey}>\r\n                                        \r\n                                        <PerfectScrollbar>\r\n                                                <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' />\r\n                                                <AtTableWrap className=\"at-list-table\">\r\n                                                    <LocalizationProvider language=\"lang\">\r\n                                                        <>\r\n                                                        <Grid\r\n                                                                className={\"active-paging\"}\r\n                                                                style={{ height: '550px' }}\r\n                                                                resizable\r\n                                                                reorderable\r\n                                                                scrollable={\"scrollable\"}\r\n                                                                data={this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]}\r\n                                                                {...this.state.dataState}\r\n                                                                onDataStateChange={this.dataStateChange}>\r\n                                                                <GridColumn\r\n                                                                    field=\"label\"\r\n                                                                    title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                                    cell={(row) => (\r\n                                                                        <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                            {row[\"dataItem\"]['label']}\r\n                                                                        </td>\r\n                                                                    )}\r\n                                                                />\r\n                                                                {this.state.extractedColumnList.map(column =>\r\n                                                                    <GridColumn\r\n                                                                        field={column.field}\r\n                                                                        title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                                        headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                                <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                                    onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, \r\n                                                                                                    row.dataIndex, this.state.selectedScreen.formcode,\r\n                                                                                                    this.props.operation)}\r\n                                                                                    checked={row[\"dataItem\"][column.field] || false}\r\n                                                                                    name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                            \r\n                                                                            \r\n                                                                            </td>)}\r\n                                                                    />\r\n                                                                )}\r\n\r\n                                                        </Grid>\r\n                                                        </> \r\n                                                    \r\n                                                    </LocalizationProvider>\r\n                                                </AtTableWrap>\r\n                                                <ReactTooltip />\r\n                                            </PerfectScrollbar>\r\n                                            \r\n                                        </TabPane>\r\n                                        //}\r\n                                    )}\r\n                                </Tabs>\r\n                                \r\n                             </TabPane>\r\n                             //}\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            } \r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default injectIntl(ConfigureAuditFields)"]},"metadata":{},"sourceType":"module"}