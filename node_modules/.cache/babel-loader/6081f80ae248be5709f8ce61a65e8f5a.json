{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { ColumnType, queryTypeFilter } from '../components/Enumeration';\nimport { format } from 'date-fns';\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getSQLQuery\", {\n      nsqlquerycode: sqlQuery.nsqlquerycode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          queryResult: [],\n          queryList: [],\n          param: [],\n          Dparam: [],\n          TBLName: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      let selectedRecord = {};\n      const chartService = rsapi.post(\"sqlquery/getChartType\", {\n        userinfo: userInfo\n      });\n      const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\n        \"tabletypecode\": -1,\n        \"moduleformcode\": 0,\n        userinfo: userInfo\n      });\n      const tableType = rsapi.post(\"sqlquery/getQueryTableType\", {\n        userinfo: userInfo\n      });\n      let urlArray = [];\n\n      if (operation === \"create\") {\n        urlArray = [chartService, tableService, tableType];\n      } else {\n        const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        });\n        urlArray = [chartService, tableService, tableType, queryById];\n      }\n\n      if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSDASHBOARDQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSALERTQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSBARCODEQUERY\"\n        });\n      } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSGENERALQUERY\"\n        });\n      } else {\n        screenName = intl.formatMessage({\n          id: \"IDS_LIMSFILTERQUERY\"\n        });\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let chart = [];\n\n        if (operation === \"update\") {\n          selectedRecord = response[3].data;\n          chart.push({\n            \"value\": response[3].data[\"ncharttypecode\"],\n            \"label\": response[3].data[\"schartname\"]\n          });\n          selectedRecord[\"ncharttypecode\"] = chart[0];\n        }\n\n        let tableName = undefined;\n        let tableNameOnly = [];\n        Object.values(response[1].data[0]).forEach(p => {\n          if (p.stable !== tableName) {\n            tableName = p.stable;\n            tableNameOnly.push({\n              tableName\n            });\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            chartList: response[0].data || [],\n            tableList: response[1].data[0] || [],\n            tableType: response[2].data || [],\n            tableName: tableNameOnly || [],\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode,\n            loading: false,\n            showExecute: true,\n            showParam: false,\n            showValidate: true,\n            showSave: false,\n            slideResult: [],\n            slideList: [],\n            resultStatus: '',\n            param: [],\n            Dparam: [],\n            TBLName: [],\n            parentPopUpSize: \"xl\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } // else {\n    // }\n\n  };\n}\nexport function getTablesName(TableTypeCode, FormCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getTablesFromSchema\", {\n      //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"moduleformcode\": parseInt(FormCode)\n    }).then(response => {\n      let tableName = undefined;\n      let tableNameOnly = [];\n      Object.values(response.data[0]).forEach(p => {\n        if (p.stable !== tableName) {\n          tableName = p.stable;\n          tableNameOnly.push({\n            tableName\n          });\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          tableList: response.data[0] || [],\n          tableName: tableNameOnly || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function getModuleFormName(TableTypeCode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"sqlquery/getModuleFormName\", {\n      \"tabletypecode\": parseInt(TableTypeCode),\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          moduleFormName: response.data[0] || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response\n        }));\n      }\n    });\n  };\n}\nexport function executeUserQuery(inputParam) {\n  return function (dispatch) {\n    const Query = inputParam.query;\n    const screenFlag = inputParam.screenFlag;\n    const slideOperation = inputParam.slideOperation;\n    const userInfo = inputParam.userInfo;\n    const screenName = inputParam.screenName;\n    const data = inputParam.data;\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\n      \"query\": Query,\n      userinfo: userInfo,\n      \"returnoption\": \"LIST\"\n    }).then(response => {\n      const querycol = response.data[1];\n      let keyarray = [];\n      let temparray = [];\n      let validColumns = true;\n\n      if (querycol.length > 0) {\n        keyarray = Object.keys(querycol[0]);\n        let width = \"200px\";\n\n        if (keyarray.length === 2) {\n          width = \"300px\";\n        }\n\n        for (let i = 0; i < keyarray.length; i++) {\n          if (keyarray[i] !== null && keyarray[i] !== '') {\n            temparray.push({\n              \"idsName\": keyarray[i],\n              \"dataField\": keyarray[i],\n              \"width\": width\n            });\n          } else {\n            validColumns = false;\n          }\n        }\n      }\n\n      let respObject = {\n        loading: false,\n        slideResult: response.data[1] || [],\n        slideList: temparray || [],\n        resultStatus: response.data[0] || '',\n        openModal: true,\n        showParam: true,\n        screenFlag\n      };\n\n      if (screenFlag === \"showQuery\") {\n        if (screenName === \"Results\") {\n          respObject = { ...respObject,\n            showExecute: false,\n            operation: \"view\",\n            screenName: screenName,\n            ...data\n          };\n        } else {\n          respObject = { ...respObject,\n            showExecute: true,\n            operation: slideOperation\n          };\n        }\n      } else {\n        if (screenFlag === \"NoParam\") {\n          respObject = { ...respObject,\n            screenName: \"Results\",\n            operation: \"view\",\n            queryResult: response.data[1] || [],\n            queryList: temparray || [],\n            showExecute: inputParam.showExecute,\n            showValidate: inputParam.showValidate,\n            showSave: inputParam.showSave,\n            noSave: inputParam.noSave\n          };\n        } else {\n          respObject = { ...respObject,\n            queryResult: response.data[1] || [],\n            showExecute: true,\n            showValidate: false,\n            operation: \"create\",\n            screenName: \"Parameter for Results\",\n            queryList: temparray || []\n          };\n        }\n      }\n\n      if (validColumns) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...respObject\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      }); //toast.error(intl.formatMessage({ id: error.message }));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function executeAlertUserQuery(Query, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\n      \"query\": Query,\n      userinfo: userInfo\n    }).then(response => {\n      const resultCount = response.data[1];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          resultCount: resultCount\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", {\n      nquerytypecode: querytypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      const masterData = { ...data,\n        ...response.data,\n        searchedData: undefined\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          queryList: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getColumnNamesByTableName(tableName, columnList) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getColumnsFromTable\", {\n      \"tablename\": tableName\n    }).then(response => {\n      columnList = columnList || new Map();\n      columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          columnList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function comboColumnValues(tableName, fieldName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getColumnValues\", {\n      \"tablename\": tableName,\n      \"fieldname\": fieldName\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          fieldResult: response.data[1] || [],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(intl.formatMessage({\n        id: error.message\n      }));\n    });\n  };\n}\nexport function getDatabaseTables(userInfo, sqlQuery, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let url = \"\";\n\n    if (sqlQuery) {\n      url = \"/sqlquery/getdatabasetables\";\n    } else {\n      url = \"/sqlquery/getdatabaseviews\";\n    }\n\n    rsapi.post(url, {\n      userinfo: userInfo\n    }).then(response => {\n      if (sqlQuery) {\n        const tableListMap = constructOptionList(response.data[\"databaseTableList\"] || [], \"stablename\", \"sdisplayname\", false, false, false);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            databaseTableList: tableListMap.get(\"OptionList\"),\n            openPortalModal: true,\n            screenName: \"IDS_QUERYBUILDER\",\n            sqlQuery,\n            ...inputParam\n          }\n        });\n      } else {\n        const viewListMap = constructOptionList(response.data[\"databaseviewList\"] || [], \"sviewname\", \"sdisplayname\", false, false, false);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            databaseviewList: viewListMap.get(\"OptionList\"),\n            openPortalModal: true,\n            screenName: \"IDS_QUERYBUILDER\",\n            sqlQuery,\n            ...inputParam\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function executeQuery(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/executequery\", { ...inputParam\n    }).then(response => {\n      const queryData = response.data;\n      let gridColumnList = [];\n\n      if (queryData.length > 0) {\n        inputParam.columnList.forEach(item => {\n          gridColumnList.push({\n            idsName: item.items.displayname[inputParam.userInfo.slanguagetypecode],\n            dataField: item.items.columnname,\n            width: '200px'\n          });\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          queryData,\n          gridColumnList,\n          loading: false,\n          selectedRecord: { ...inputParam.selectedRecord,\n            sstatus: \"SUCCESS\"\n          } // ,\n          // resultStatus: \"Success\",\n          // screenName: \"Results\",\n          // openModal: true\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getForeignTable(inputParam, type) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getforeigntable\", { ...inputParam\n    }).then(response => {\n      const userInfo = inputParam.userinfo;\n      const foreignTableList = response.data[\"foreignTableList\"];\n      const jstaticcolumns = foreignTableList[0] ? foreignTableList[0].jstaticcolumns || [] : [];\n      const jdynamiccolumns = foreignTableList[0] ? foreignTableList[0].jdynamiccolumns || [] : [];\n      const jmultilingualcolumn = foreignTableList[0] ? foreignTableList[0].jmultilingualcolumn || [] : [];\n      const jnumericcolumns = foreignTableList[0] ? foreignTableList[0].jnumericcolumns || [] : [];\n      const sprimarykeyname = foreignTableList[0] ? foreignTableList[0].sprimarykeyname : \"\";\n      const stablename = foreignTableList[0] ? foreignTableList[0].stablename : \"\";\n      let defaultColumn = {};\n      let comboData = [];\n      jstaticcolumns.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.columnname,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.STATICCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.columnname,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.STATICCOLUMN\n            }\n          };\n        }\n      });\n      jdynamiccolumns.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.columnname,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.DYNAMICCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.columnname,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.DYNAMICCOLUMN\n            }\n          };\n        }\n      });\n      jmultilingualcolumn.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.columnname,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.MULTILINGUALCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.columnname,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.MULTILINGUALCOLUMN\n            }\n          };\n        }\n      });\n      jnumericcolumns.map(items => {\n        comboData.push({\n          label: items.displayname[userInfo.slanguagetypecode],\n          value: items.foriegntablePK,\n          items: { ...items,\n            stablename,\n            sprimarykeyname,\n            columntype: ColumnType.NUMERICCOLUMN\n          }\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[userInfo.slanguagetypecode],\n            value: items.foriegntablePK,\n            items: { ...items,\n              stablename,\n              sprimarykeyname,\n              columntype: ColumnType.NUMERICCOLUMN\n            }\n          };\n        }\n      });\n      let tableColumnList = [];\n      let tempdata = {};\n\n      if (type === \"column\") {\n        tableColumnList = inputParam.foreignTableColumnList || [];\n        tableColumnList[inputParam.index] = comboData;\n        tempdata = {\n          foreignTableColumnList: tableColumnList\n        };\n      } else {\n        tableColumnList = inputParam.tableColumnList || [];\n        tableColumnList[inputParam.index] = comboData;\n        tempdata = {\n          tableColumnList\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          ...tempdata,\n          selectedRecord: inputParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getViewColumns(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getdatabaseviewscolumns\", {\n      sviewname: inputParam.sviewname,\n      userinfo: inputParam.userinfo\n    }).then(response => {\n      const userInfo = inputParam.userinfo;\n      let languageCode = userInfo.slanguagetypecode ? userInfo.slanguagetypecode : \"en-US\";\n      const responseData = response.data[\"viewColumnList\"] || [];\n      const jsonData = responseData[0] ? responseData[0].jsondata : [];\n      let defaultColumn = {};\n      let comboData = [];\n      jsonData.map(items => {\n        comboData.push({\n          label: items.displayname[languageCode],\n          value: items.columnname,\n          items\n        });\n\n        if (items.default) {\n          defaultColumn = {\n            label: items.displayname[languageCode],\n            value: items.columnname,\n            items\n          };\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          viewColumnList: comboData,\n          selectedRecord: inputParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMasterData(inputParam, viewMasterListByRule) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/sqlquery/getmasterdata\", { ...inputParam\n    }).then(response => {\n      // const optionId = inputParam.data.sforeigncolumnname;\n      const tableListMap = constructOptionList(response.data[\"masterdata\"] || [], inputParam.optionId, \"sdisplayname\", false, false, false);\n      let tempData = {}; // if(inputParam.data.nflag === 1) {\n      //     let masterdata = [];\n      //     masterdata[inputParam.index] = tableListMap.get(\"OptionList\");\n      //     tempData = { masterdata };\n      // } else {\n      // let viewMasterListByRule = [];\n      // viewMasterListByRule[inputParam.index] = tableListMap.get(\"OptionList\");\n\n      if (viewMasterListByRule === undefined) {\n        viewMasterListByRule = [];\n        viewMasterListByRule[inputParam.groupIndex] = [];\n      } else {\n        viewMasterListByRule = { ...viewMasterListByRule\n        };\n      }\n\n      if (viewMasterListByRule[inputParam.groupIndex]) {} else {\n        viewMasterListByRule[inputParam.groupIndex] = [];\n      }\n\n      viewMasterListByRule[inputParam.groupIndex][inputParam.index] = [];\n      viewMasterListByRule[inputParam.groupIndex][inputParam.index] = tableListMap.get(\"OptionList\");\n      tempData = {\n        viewMasterListByRule\n      }; // }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          selectedRecord: inputParam.selectedRecord,\n          ...tempData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function createQueryBuilder(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/querybuilder/updateQueryBuilder\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterFromQuery(inputParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    let dataIndex = [];\n    const comboData = JSON.parse(inputParam.masterData.selectedQueryBuilder.sdefaultvalue.value);\n    comboData.sdefaultvalue.forEach((dataItem, index) => {\n      const tableData = dataItem.items;\n      const mastertablename = tableData.mastertablename;\n\n      if (dataItem.items.needmasterdata && mastertablename) {\n        const inputParamService = {\n          userinfo: inputParam.userInfo,\n          data: {\n            nflag: 2,\n            mastertablename,\n            valuemember: tableData.valuemember,\n            displaymember: tableData.displaymember\n          }\n        };\n        urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", { ...inputParamService\n        }));\n        dataIndex.push(index);\n      } else if (dataItem.items && dataItem.items.sforeigncolumnname !== undefined && dataItem.items.sforeigncolumnname !== \"\") {\n        const inputParamService = {\n          data: { ...dataItem.items,\n            nflag: 1\n          },\n          userinfo: inputParam.userInfo\n        };\n        urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", { ...inputParamService\n        }));\n        dataIndex.push(index);\n      }\n\n      if (dataItem.items.columntype === ColumnType.DATATIME || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\n        dataItem.value = new Date(dataItem.value);\n      }\n    });\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      let viewMasterData = [];\n\n      if (response !== null && response.length > 0) {\n        response.forEach((item, ind) => {\n          let valueMember = \"\";\n\n          if (comboData.sdefaultvalue[dataIndex[ind]].items && comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== undefined && comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== \"\") {\n            valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname;\n          } else {\n            valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.valuemember;\n          }\n\n          const tableListMap = constructOptionList(item.data[\"masterdata\"] || [], valueMember, \"sdisplayname\", false, false, false);\n          viewMasterData[dataIndex[ind]] = tableListMap.get(\"OptionList\");\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          viewMasterData,\n          loading: false,\n          openModal: true,\n          comboData\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedQueryBuilder(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/querybuilder/getSelectedQueryBuilder\", {\n      'userinfo': userInfo,\n      \"nQueryBuilderCode\": inputParam.nquerybuildercode\n    }).then(response => {\n      masterData = { ...masterData,\n        selectedQueryBuilder: response.data[\"selectedQueryBuilder\"],\n        queryDataMain: response.data[\"queryDataMain\"],\n        columnList: response.data[\"columnList\"],\n        queryTypeCode: inputParam.nquerytype\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateQueryBuilder(inputParam, inputData, masterData) {\n  return function (dispatch) {\n    let urlArray = [];\n    let dataIndex = [];\n    dispatch(initRequest(true)); // urlArray.push(rsapi.post(\"/querybuilder/updateQueryBuilder\", {\n    //     ...inputData\n    // }))\n\n    urlArray.push(rsapi.post(\"/sqlquery/executequery\", { ...inputParam\n    }));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      masterData = { ...masterData,\n        queryDataMain: response[0].data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: false,\n          masterData\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getQueryBuilder(nqueryTypeCode, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/querybuilder/getQueryBuilder\", {\n      'userinfo': userInfo,\n      \"nqueryTypeCode\": nqueryTypeCode\n    }).then(response => {\n      masterData = { ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SQLBuilderAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","format","getSQLQueryDetail","sqlQuery","userInfo","masterData","dispatch","post","nsqlquerycode","then","response","data","type","payload","loading","queryResult","queryList","param","Dparam","TBLName","catch","error","status","formatMessage","id","message","warn","getSQLQueryComboService","screenName","operation","primaryKeyName","primaryKeyValue","queryTypeCode","ncontrolCode","selectedRecord","chartService","userinfo","tableService","tableType","urlArray","queryById","LIMSDASHBOARDQUERY","LIMSALERTQUERY","LIMSBARCODEQUERY","LIMSGENERALQUERY","all","chart","push","tableName","undefined","tableNameOnly","Object","values","forEach","p","stable","chartList","tableList","openModal","showExecute","showParam","showValidate","showSave","slideResult","slideList","resultStatus","parentPopUpSize","getTablesName","TableTypeCode","FormCode","parseInt","getModuleFormName","moduleFormName","executeUserQuery","inputParam","Query","query","screenFlag","slideOperation","querycol","keyarray","temparray","validColumns","length","keys","width","i","respObject","noSave","executeAlertUserQuery","resultCount","comboChangeQueryType","querytypecode","nquerytypecode","searchedData","getColumnNamesByTableName","columnList","Map","set","comboColumnValues","fieldName","fieldResult","getDatabaseTables","url","tableListMap","databaseTableList","get","openPortalModal","viewListMap","databaseviewList","executeQuery","queryData","gridColumnList","item","idsName","items","displayname","slanguagetypecode","dataField","columnname","sstatus","getForeignTable","foreignTableList","jstaticcolumns","jdynamiccolumns","jmultilingualcolumn","jnumericcolumns","sprimarykeyname","stablename","defaultColumn","comboData","map","label","value","columntype","STATICCOLUMN","default","DYNAMICCOLUMN","MULTILINGUALCOLUMN","foriegntablePK","NUMERICCOLUMN","tableColumnList","tempdata","foreignTableColumnList","index","getViewColumns","sviewname","languageCode","responseData","jsonData","jsondata","viewColumnList","getMasterData","viewMasterListByRule","optionId","tempData","groupIndex","createQueryBuilder","getParameterFromQuery","dataIndex","JSON","parse","selectedQueryBuilder","sdefaultvalue","dataItem","tableData","mastertablename","needmasterdata","inputParamService","nflag","valuemember","displaymember","sforeigncolumnname","DATATIME","DATE","symbolObject","isInputVisible","symbolType","Date","spread","viewMasterData","ind","valueMember","getSelectedQueryBuilder","nquerybuildercode","queryDataMain","nquerytype","updateQueryBuilder","inputData","getQueryBuilder","nqueryTypeCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter\r\n} from '../components/Enumeration';\r\nimport { format } from 'date-fns';\r\n\r\n\r\n\r\nexport function getSQLQueryDetail(sqlQuery, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getSQLQuery\", {\r\n            nsqlquerycode: sqlQuery.nsqlquerycode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        queryResult: [],\r\n                        queryList: [],\r\n                        param: [],\r\n                        Dparam: [],\r\n                        TBLName: []\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSQLQueryComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, queryTypeCode, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if (operation === \"create\" || operation === \"update\") {\r\n\r\n            let selectedRecord = {};\r\n            const chartService = rsapi.post(\"sqlquery/getChartType\", {\r\n                userinfo: userInfo\r\n            });\r\n            const tableService = rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n                \"tabletypecode\": -1,\r\n                \"moduleformcode\": 0,\r\n                userinfo: userInfo\r\n            });\r\n            const tableType = rsapi.post(\"sqlquery/getQueryTableType\", {\r\n                userinfo: userInfo\r\n            });\r\n            let urlArray = [];\r\n            if (operation === \"create\") {\r\n\r\n                urlArray = [chartService, tableService, tableType];\r\n            } else {\r\n                const queryById = rsapi.post(\"sqlquery/getActiveSQLQueryById\", {\r\n                    [primaryKeyName]: primaryKeyValue,\r\n                    \"userinfo\": userInfo\r\n                });\r\n\r\n                urlArray = [chartService, tableService, tableType, queryById];\r\n            }\r\n\r\n            if (queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSDASHBOARDQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSALERTQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSALERTQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSBARCODEQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSBARCODEQUERY\"\r\n                });\r\n            } else if (queryTypeCode === queryTypeFilter.LIMSGENERALQUERY) {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSGENERALQUERY\"\r\n                });\r\n            } else {\r\n                screenName = intl.formatMessage({\r\n                    id: \"IDS_LIMSFILTERQUERY\"\r\n                });\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    let chart = [];\r\n                    if (operation === \"update\") {\r\n                        selectedRecord = response[3].data;\r\n                        chart.push({\r\n                            \"value\": response[3].data[\"ncharttypecode\"],\r\n                            \"label\": response[3].data[\"schartname\"]\r\n                        });\r\n                        selectedRecord[\"ncharttypecode\"] = chart[0];\r\n                    }\r\n\r\n                    let tableName = undefined;\r\n                    let tableNameOnly = [];\r\n                    Object.values(response[1].data[0]).forEach(p => {\r\n                        if (p.stable !== tableName) {\r\n                            tableName = p.stable;\r\n                            tableNameOnly.push({\r\n                                tableName\r\n                            });\r\n                        }\r\n                    })\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            chartList: response[0].data || [],\r\n                            tableList: response[1].data[0] || [],\r\n                            tableType: response[2].data || [],\r\n                            tableName: tableNameOnly || [],\r\n                            operation,\r\n                            screenName,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showExecute: true,\r\n                            showParam: false,\r\n                            showValidate: true,\r\n                            showSave: false,\r\n                            slideResult: [],\r\n                            slideList: [],\r\n                            resultStatus: '',\r\n                            param: [],\r\n                            Dparam: [],\r\n                            TBLName: [],\r\n                            parentPopUpSize: \"xl\"\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n\r\n\r\n\r\n        }\r\n        // else {\r\n        // }\r\n    }\r\n}\r\n\r\nexport function getTablesName(TableTypeCode, FormCode) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getTablesFromSchema\", {\r\n            //\"tabletypecode\": parseInt(selectedRecord[\"ntabletypecode\"].value),\"moduleformcode\": parseInt(selectedRecord[\"nformcode\"] ? selectedRecord[\"nformcode\"].value: 0)\r\n            \"tabletypecode\": parseInt(TableTypeCode),\r\n            \"moduleformcode\": parseInt(FormCode)\r\n\r\n        })\r\n            .then(response => {\r\n\r\n                let tableName = undefined;\r\n                let tableNameOnly = [];\r\n                Object.values(response.data[0]).forEach(p => {\r\n                    if (p.stable !== tableName) {\r\n                        tableName = p.stable;\r\n                        tableNameOnly.push({\r\n                            tableName\r\n                        });\r\n                    }\r\n                })\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        tableList: response.data[0] || [],\r\n                        tableName: tableNameOnly || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getModuleFormName(TableTypeCode, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"sqlquery/getModuleFormName\", {\r\n            \"tabletypecode\": parseInt(TableTypeCode),\r\n            \"userinfo\": userInfo\r\n\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        moduleFormName: response.data[0] || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response\r\n                    }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function executeUserQuery(inputParam) {\r\n    return function (dispatch) {\r\n        const Query = inputParam.query;\r\n        const screenFlag = inputParam.screenFlag;\r\n        const slideOperation = inputParam.slideOperation;\r\n        const userInfo = inputParam.userInfo;\r\n        const screenName = inputParam.screenName\r\n        const data = inputParam.data;\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\r\n            \"query\": Query,\r\n            userinfo: userInfo,\r\n            \"returnoption\": \"LIST\"\r\n        })\r\n            .then(response => {\r\n                const querycol = response.data[1];\r\n                let keyarray = [];\r\n                let temparray = [];\r\n                let validColumns = true;\r\n                if (querycol.length > 0) {\r\n                    keyarray = Object.keys(querycol[0]);\r\n                    let width = \"200px\"\r\n                    if (keyarray.length === 2) {\r\n                        width = \"300px\"\r\n                    }\r\n                    for (let i = 0; i < keyarray.length; i++) {\r\n                        if (keyarray[i] !== null && keyarray[i] !== '') {\r\n                            temparray.push({\r\n                                \"idsName\": keyarray[i],\r\n                                \"dataField\": keyarray[i],\r\n                                \"width\": width\r\n                            });\r\n                        } else {\r\n                            validColumns = false;\r\n                        }\r\n                    }\r\n                }\r\n                let respObject = {\r\n                    loading: false,\r\n                    slideResult: response.data[1] || [],\r\n                    slideList: temparray || [],\r\n                    resultStatus: response.data[0] || '',\r\n                    openModal: true,\r\n                    showParam: true,\r\n                    screenFlag\r\n                }\r\n\r\n                if (screenFlag === \"showQuery\") {\r\n                    if (screenName === \"Results\") {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            showExecute: false,\r\n                            operation: \"view\",\r\n                            screenName: screenName,\r\n                            ...data\r\n                        }\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            showExecute: true,\r\n                            operation: slideOperation,\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (screenFlag === \"NoParam\") {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            screenName: \"Results\",\r\n                            operation: \"view\",\r\n                            queryResult: response.data[1] || [],\r\n                            queryList: temparray || [],\r\n                            showExecute: inputParam.showExecute,\r\n                            showValidate: inputParam.showValidate,\r\n                            showSave: inputParam.showSave,\r\n                            noSave: inputParam.noSave,\r\n                        }\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            queryResult: response.data[1] || [],\r\n                            showExecute: true,\r\n                            showValidate: false,\r\n                            operation: \"create\",\r\n                            screenName: \"Parameter for Results\",\r\n                            queryList: temparray || [],\r\n                        }\r\n                    }\r\n                }\r\n                if (validColumns) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ...respObject\r\n                        }\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_MAKESUREALLFIELDSHAVENAMEORALIASNAME\"\r\n                    }))\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n                //toast.error(intl.formatMessage({ id: error.message }));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeAlertUserQuery(Query, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSchemaQueryOutput\", {\r\n            \"query\": Query,\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n\r\n\r\n                const resultCount = response.data[1];\r\n\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        resultCount: resultCount\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function comboChangeQueryType(querytypecode, data, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getSQLQueryByQueryTypeCode\", {\r\n            nquerytypecode: querytypecode,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const masterData = {\r\n                    ...data,\r\n                    ...response.data,\r\n                    searchedData: undefined\r\n                }\r\n\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        queryList: []\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function getColumnNamesByTableName(tableName, columnList) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnsFromTable\", {\r\n            \"tablename\": tableName\r\n        })\r\n            .then(response => {\r\n\r\n                columnList = columnList || new Map();\r\n                columnList.set(Object.keys(response.data)[0], Object.values(response.data)[0]);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        columnList,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\nexport function comboColumnValues(tableName, fieldName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getColumnValues\", {\r\n            \"tablename\": tableName,\r\n            \"fieldname\": fieldName\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        fieldResult: response.data[1] || [],\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getDatabaseTables(userInfo, sqlQuery, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let url = \"\";\r\n        if (sqlQuery) {\r\n            url = \"/sqlquery/getdatabasetables\";\r\n        } else {\r\n            url = \"/sqlquery/getdatabaseviews\";\r\n        }\r\n        rsapi.post(url, {\r\n            userinfo: userInfo\r\n        })\r\n            .then(response => {\r\n                if (sqlQuery) {\r\n                    const tableListMap = constructOptionList(response.data[\"databaseTableList\"] || [], \"stablename\", \"sdisplayname\", false, false, false);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            databaseTableList: tableListMap.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_QUERYBUILDER\",\r\n                            sqlQuery,\r\n                            ...inputParam\r\n                        }\r\n                    });\r\n                } else {\r\n                    const viewListMap = constructOptionList(response.data[\"databaseviewList\"] || [], \"sviewname\", \"sdisplayname\", false, false, false);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_QUERYBUILDER\",\r\n                            sqlQuery,\r\n                            ...inputParam\r\n                        }\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function executeQuery(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/executequery\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                const queryData = response.data;\r\n                let gridColumnList = [];\r\n                if (queryData.length > 0) {\r\n                    inputParam.columnList.forEach(item => {\r\n                        gridColumnList.push({ idsName: item.items.displayname[inputParam.userInfo.slanguagetypecode], dataField: item.items.columnname, width: '200px' })\r\n                    })\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        queryData,\r\n                        gridColumnList,\r\n                        loading: false,\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            sstatus: \"SUCCESS\"\r\n                        }\r\n                        // ,\r\n                        // resultStatus: \"Success\",\r\n                        // screenName: \"Results\",\r\n                        // openModal: true\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getForeignTable(inputParam, type) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getforeigntable\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const userInfo = inputParam.userinfo;\r\n                const foreignTableList = response.data[\"foreignTableList\"];\r\n\r\n                const jstaticcolumns = foreignTableList[0] ? (foreignTableList[0].jstaticcolumns || []) : [];\r\n                const jdynamiccolumns = foreignTableList[0] ? (foreignTableList[0].jdynamiccolumns || []) : [];\r\n                const jmultilingualcolumn = foreignTableList[0] ? (foreignTableList[0].jmultilingualcolumn || []) : [];\r\n                const jnumericcolumns = foreignTableList[0] ? (foreignTableList[0].jnumericcolumns || []) : [];\r\n                const sprimarykeyname = foreignTableList[0] ? foreignTableList[0].sprimarykeyname : \"\";\r\n                const stablename = foreignTableList[0] ? foreignTableList[0].stablename : \"\";\r\n\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                jstaticcolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.STATICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.STATICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jdynamiccolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.DYNAMICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.DYNAMICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jmultilingualcolumn.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.columnname,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.MULTILINGUALCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.columnname,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.MULTILINGUALCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n                jnumericcolumns.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[userInfo.slanguagetypecode],\r\n                        value: items.foriegntablePK,\r\n                        items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.NUMERICCOLUMN }\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[userInfo.slanguagetypecode],\r\n                            value: items.foriegntablePK,\r\n                            items: { ...items, stablename, sprimarykeyname, columntype: ColumnType.NUMERICCOLUMN }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                let tableColumnList = [];\r\n                let tempdata = {};\r\n                if (type === \"column\") {\r\n                    tableColumnList = inputParam.foreignTableColumnList || [];\r\n                    tableColumnList[inputParam.index] = comboData\r\n                    tempdata = { foreignTableColumnList: tableColumnList };\r\n                } else {\r\n                    tableColumnList = inputParam.tableColumnList || [];\r\n                    tableColumnList[inputParam.index] = comboData;\r\n                    tempdata = { tableColumnList };\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        ...tempdata,\r\n                        selectedRecord: inputParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getViewColumns(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getdatabaseviewscolumns\", {\r\n            sviewname: inputParam.sviewname,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                const userInfo = inputParam.userinfo;\r\n                let languageCode = userInfo.slanguagetypecode ? userInfo.slanguagetypecode : \"en-US\";\r\n                const responseData = response.data[\"viewColumnList\"] || [];\r\n                const jsonData = responseData[0] ? responseData[0].jsondata : [];\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                jsonData.map(items => {\r\n                    comboData.push({\r\n                        label: items.displayname[languageCode],\r\n                        value: items.columnname,\r\n                        items\r\n                    })\r\n                    if (items.default) {\r\n                        defaultColumn = {\r\n                            label: items.displayname[languageCode],\r\n                            value: items.columnname,\r\n                            items\r\n                        }\r\n                    }\r\n                });\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        viewColumnList: comboData,\r\n                        selectedRecord: inputParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getMasterData(inputParam, viewMasterListByRule) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/sqlquery/getmasterdata\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                // const optionId = inputParam.data.sforeigncolumnname;\r\n                const tableListMap = constructOptionList(response.data[\"masterdata\"] || [], inputParam.optionId, \"sdisplayname\", false, false, false);\r\n\r\n                let tempData = {};\r\n                // if(inputParam.data.nflag === 1) {\r\n                //     let masterdata = [];\r\n                //     masterdata[inputParam.index] = tableListMap.get(\"OptionList\");\r\n                //     tempData = { masterdata };\r\n                // } else {\r\n                // let viewMasterListByRule = [];\r\n                // viewMasterListByRule[inputParam.index] = tableListMap.get(\"OptionList\");\r\n                if (viewMasterListByRule === undefined) {\r\n                    viewMasterListByRule = [];\r\n                    viewMasterListByRule[inputParam.groupIndex] = [];\r\n                } else {\r\n                    viewMasterListByRule = { ...viewMasterListByRule };\r\n                }\r\n                if (viewMasterListByRule[inputParam.groupIndex]) {\r\n\r\n                } else {\r\n                    viewMasterListByRule[inputParam.groupIndex] = [];\r\n                }\r\n                viewMasterListByRule[inputParam.groupIndex][inputParam.index] = [];\r\n                viewMasterListByRule[inputParam.groupIndex][inputParam.index] = tableListMap.get(\"OptionList\");\r\n                tempData = { viewMasterListByRule };\r\n                // }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        selectedRecord: inputParam.selectedRecord,\r\n                        ...tempData\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function createQueryBuilder(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/querybuilder/updateQueryBuilder\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        loading: false,\r\n                        openModal: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getParameterFromQuery(inputParam) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let dataIndex = [];\r\n\r\n        const comboData = JSON.parse(inputParam.masterData.selectedQueryBuilder.sdefaultvalue.value);\r\n\r\n        comboData.sdefaultvalue.forEach((dataItem, index) => {\r\n            const tableData = dataItem.items;\r\n            const mastertablename = tableData.mastertablename;\r\n            if (dataItem.items.needmasterdata && mastertablename) {\r\n                const inputParamService = {\r\n                    userinfo: inputParam.userInfo,\r\n                    data: {\r\n                        nflag: 2,\r\n                        mastertablename,\r\n                        valuemember: tableData.valuemember,\r\n                        displaymember: tableData.displaymember,\r\n                    }\r\n                };\r\n                urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", {\r\n                    ...inputParamService\r\n                }))\r\n                dataIndex.push(index);\r\n\r\n            } else if (dataItem.items && dataItem.items.sforeigncolumnname !== undefined &&\r\n                dataItem.items.sforeigncolumnname !== \"\") {\r\n                const inputParamService = {\r\n                    data: { ...dataItem.items, nflag: 1 },\r\n                    userinfo: inputParam.userInfo\r\n                };\r\n                urlArray.push(rsapi.post(\"/sqlquery/getmasterdata\", {\r\n                    ...inputParamService\r\n                }))\r\n                dataIndex.push(index);\r\n\r\n            }\r\n\r\n            if (dataItem.items.columntype === ColumnType.DATATIME\r\n                || dataItem.items.columntype === ColumnType.DATE && dataItem.symbolObject.items.isInputVisible === true\r\n                && (dataItem.symbolObject.items.symbolType === 5 || dataItem.symbolObject.items.symbolType === 1)) {\r\n\r\n                dataItem.value = new Date(dataItem.value);\r\n            }\r\n\r\n        })\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n                let viewMasterData = [];\r\n                if (response !== null && response.length > 0) {\r\n                    response.forEach((item, ind) => {\r\n\r\n                        let valueMember = \"\";\r\n                        if (comboData.sdefaultvalue[dataIndex[ind]].items && comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== undefined &&\r\n                            comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname !== \"\") {\r\n\r\n                            valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.sforeigncolumnname;\r\n                        } else {\r\n                            valueMember = comboData.sdefaultvalue[dataIndex[ind]].items.valuemember;\r\n                        }\r\n                        const tableListMap = constructOptionList(item.data[\"masterdata\"] || [], valueMember, \"sdisplayname\", false, false, false);\r\n                        viewMasterData[dataIndex[ind]] = tableListMap.get(\"OptionList\");\r\n                    })\r\n\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        viewMasterData,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        comboData\r\n\r\n                    }\r\n                });\r\n            }))\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getSelectedQueryBuilder(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/querybuilder/getSelectedQueryBuilder\",\r\n            { 'userinfo': userInfo, \"nQueryBuilderCode\": inputParam.nquerybuildercode })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, selectedQueryBuilder: response.data[\"selectedQueryBuilder\"],\r\n                    queryDataMain: response.data[\"queryDataMain\"], columnList: response.data[\"columnList\"], queryTypeCode: inputParam.nquerytype\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false                      \r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function updateQueryBuilder(inputParam, inputData, masterData) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let dataIndex = [];\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        // urlArray.push(rsapi.post(\"/querybuilder/updateQueryBuilder\", {\r\n        //     ...inputData\r\n        // }))\r\n        urlArray.push(rsapi.post(\"/sqlquery/executequery\", {\r\n            ...inputParam\r\n        }))\r\n\r\n\r\n\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {                     \r\n\r\n                masterData = { ...masterData, queryDataMain: response[0].data };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {                       \r\n                        loading: false,\r\n                        openModal: false,\r\n                        masterData\r\n                    }\r\n                });\r\n            }))\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getQueryBuilder(nqueryTypeCode, userInfo,masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/querybuilder/getQueryBuilder\",\r\n            { 'userinfo': userInfo, \"nqueryTypeCode\": nqueryTypeCode })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false                      \r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}