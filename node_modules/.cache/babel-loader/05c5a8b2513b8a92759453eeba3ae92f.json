{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import Axios from'axios';import{numericGrade}from'../pages/ResultEntryBySample/ResultEntryValidation';import{constructOptionList,fillRecordBasedOnCheckBoxSelection,filterRecordBasedOnTwoArrays,getRecordBasedOnPrimaryKeyName,getSameRecordFromTwoArrays,replaceUpdatedObject,sortData,updatedObjectWithNewElement,rearrangeDateFormat,filterRecordBasedOnPrimaryKeyName,reArrangeArrays}from'../components/CommonScript';import{transactionStatus}from'../components/Enumeration';export function getsubSampleREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntype:2,nflag:inputData.nflag||2,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),ntransactiontestcode:0,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,napprovalversioncode:inputData.napprovalversioncode,fromdate:inputData.fromdate,todate:inputData.todate,activeTestKey:inputData.activeTestKey,activeSampleKey:inputData.activeSampleKey,//nneedsubsample: inputData.masterData.nneedsubsample,\nnneedsubsample:inputData.masterData.realRegSubTypeValue.nneedsubsample,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,nneedtemplatebasedflow:inputData.nneedtemplatebasedflow};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\ndispatch(initRequest(true));if(isServiceRequired){rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData),{},{checkBoxOperation:inputData.checkBoxOperation})).then(function(response){// if (response.data.DynamicGetSamples) {\n//     sortData(response.data.DynamicGetSamples, \"\", \"\");\n// }\n// if (response.data.DynamicGetTests) {\n//     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n// }\nsortData(response.data);// let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\n// responseData = sortData(responseData)\nvar oldSelectedTest=inputData.masterData.RESelectedTest;fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var RESelectedSubSample=inputData.checkBoxOperation===3||inputData.checkBoxOperation===7?response.data.RESelectedSubSample:inputData.masterData.RESelectedSubSample;RESelectedSubSample=inputData.masterData.nneedsubsample?RESelectedSubSample:inputData.masterData.RE_SUBSAMPLE;var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:RESelectedSubSample});// if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n//     inputData.searchSampleRef.current.value = \"\";\n//     masterData['searchedSample'] = undefined\n// }\nif(inputData.searchSubSampleRef!==undefined&&inputData.searchSubSampleRef.current!==null){inputData.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTest']=undefined;}var _inputData=inputData,testskip=_inputData.testskip,testtake=_inputData.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedMaterial=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];var RegistrationComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;var npreregno;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;npreregno=masterData.RESelectedSample[0].npreregno;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SAMPLECOMMENTS\":RegistrationComment=keepOld?inputData.masterData.RegistrationComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment,npreregno,\"npreregno\");activeName=\"RegistrationComment\";dataStateName=\" sampleChangeDataState\";break;default:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_MATERIAL\":list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedMaterial),_toConsumableArray(response.data.ResultUsedMaterial));ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_SAMPLECOMMENTS\":dbData=response.data.RegistrationComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationComment),_toConsumableArray(dbData));RegistrationComment=getRecordBasedOnPrimaryKeyName(list,inputData.RESelectedSample.length>0?inputData.RESelectedSample[0].npreregno:\"\",\"npreregno\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){//getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\nvar _list=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":_list=response.data.ResultUsedMaterial?sortData(response.data.ResultUsedMaterial,'descending','nresultusedmaterialcode'):[];ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":_list=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;break;case\"IDS_SAMPLECOMMENTS\":RegistrationComment=response.data.RegistrationComment?_toConsumableArray(response.data.RegistrationComment):[];activeName=\"RegistrationComment\";dataStateName=\"sampleCommentsDataState\";break;default:_list=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else{var _list2=[];if(!inputData.masterData.realRegSubTypeValue.nneedsubsample){var _wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!_wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var _keepOld=false;var _ntransactiontestcode;if(oldSelectedTest.length>0){_keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}}switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list2=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list2=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":_list2=response.data.ResultUsedMaterial?sortData(response.data.ResultUsedMaterial,'descending','nresultusedmaterialcode'):[];ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":_list2=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list2.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list2=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list2=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list2=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SAMPLECOMMENTS\":_list2=response.data.RegistrationComment?sortData(response.data.RegistrationComment,'descending','nregcommentcode'):[];RegistrationComment=getRecordBasedOnPrimaryKeyName(_list2,inputData.RESelectedSample.length>0?inputData.RESelectedSample[0].npreregno:\"\",\"npreregno\");activeName=\"RegistrationComment\";dataStateName=\"sampleChangeDataState\";break;default:_list2=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list2,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment,RegistrationComment:RegistrationComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,skip:undefined,take:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{var oldSelectedTest=inputData.masterData.RESelectedTest;//let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n//let isGrandChildGetRequired = false;\nvar oldSelectedSubSample=inputData.masterData.RESelectedSubSample;var _inputData2=inputData,subsampletake=_inputData2.subsampletake,subsampleskip=_inputData2.subsampleskip;var skipInfo={};var TestSelected=[];var subSampleSelected=[];if(inputData[\"statusNone\"]){TestSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");subSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}else{TestSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].npreregno,\"npreregno\");subSampleSelected=filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");}var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSample,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSample=inputData.RESelectedSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];var RESelectedSubSample=inputData.masterData.RE_SUBSAMPLE;if(inputData.masterData.nneedsubsample){var filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.RE_SUBSAMPLE,\"ntransactionsamplecode\");RESelectedSubSample=filterSelectedSubSample.length>0?filterSelectedSubSample:[inputData.masterData.RE_SUBSAMPLE[0]];if(inputData.masterData.RE_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;skipInfo={subsampletake:subsampletake,subsampleskip:subsampleskip};}}var ntransactionsamplecode=RESelectedSubSample.map(function(subsample){return subsample.ntransactionsamplecode;}).join(',');var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedSample:RESelectedSample,RESelectedSubSample:RESelectedSubSample,RESelectedTest:RESelectedTest});inputData=_objectSpread(_objectSpread({},inputData),{},{ntransactiontestcode:ntransactiontestcode,ntransactionsamplecode:ntransactionsamplecode,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey,masterData:masterData});if(RESelectedTest.length>0){inputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedMaterial\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"]});dispatch(getTestChildTabREDetail(inputData,true));}else{inputData=_objectSpread(_objectSpread({},inputData),{},{masterData:masterData,childTabsKey:[\"RE_TEST\"]});dispatch(getTestREDetail(inputData,true));}}else{//added by sudharshanan for test select issue while sample click\nvar _masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n// RESelectedSample: inputData.RESelectedSample,\n// RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\nRESelectedTest:TestSelected?TestSelected:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.RESelectedSample,RESelectedSubSample:subSampleSelected?subSampleSelected:inputData.masterData.RE_SUBSAMPLE.length>0?[inputData.masterData.RE_SUBSAMPLE[0]]:[]});var subsamplecheck=true;if(inputData.masterData.nneedsubsample){var SubSampleSelected=getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample,inputData.removeElementFromArray[0].npreregno,\"npreregno\");if(SubSampleSelected.length>0){var _filterSelectedSubSample=getSameRecordFromTwoArrays(oldSelectedSubSample,inputData.masterData.RE_SUBSAMPLE,\"ntransactionsamplecode\");if(_filterSelectedSubSample.length===0){var wholeSubSample=_masterData.RE_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});if(oldSelectedSubSample.length===0&&wholeSubSample.length>0&&_masterData.selectedTest.length===0){var selectedSubSample1=[inputData.masterData.RE_SUBSAMPLE[0]];_masterData=_objectSpread(_objectSpread({},_masterData),{},{RESelectedSubSample:selectedSubSample1,selectedTest:[]});inputData=_objectSpread(_objectSpread({},inputData),_masterData);inputData[\"npreregno\"]=selectedSubSample1.map(function(x){return x.npreregno;}).join(\",\");inputData[\"ntransactionsamplecode\"]=selectedSubSample1.map(function(x){return x.ntransactionsamplecode;}).join(\",\");inputData[\"checkBoxOperation\"]=3;inputData[\"childTabsKey\"]=[\"RE_TEST\"];subsamplecheck=false;dispatch(getTestREDetail(inputData,true));}}else{oldSelectedSubSample=_filterSelectedSubSample;}}else{var _wholeSubSample=_masterData.RE_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.forEach(function(test,index){if(!_wholeSubSample.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});}if(subsamplecheck){_masterData=_objectSpread(_objectSpread({},_masterData),{},{RESelectedSubSample:oldSelectedSubSample});}if(inputData.masterData.RE_SUBSAMPLE.length<=inputData.subsampleskip){subsampleskip=0;_skipInfo={subsampleskip:subsampleskip,subsampletake:subsampletake};}}var wholeTestList=_masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode2;if(oldSelectedTest.length>0){keepOld=true;_masterData=_objectSpread(_objectSpread({},_masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode2=inputData.masterData.RE_TEST[0].ntransactiontestcode;// ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\n}//const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n//ntransactiontestcode, \"ntransactiontestcode\");\nvar TestParameters=keepOld?inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno,\"npreregno\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno,\"npreregno\"):getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode2,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode2,\"ntransactiontestcode\");var _inputData3=inputData,testskip=_inputData3.testskip,testtake=_inputData3.testtake;var bool=false;var _skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){_skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},_masterData),{},{RESelectedSample:inputData.RESelectedSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory// RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey},_skipInfo)});}}};}export function getTestREDetail(inputData,isServiceRequired){return function(dispatch){var activeName=\"\";var dataStateName=\"\";var inputParamData={nflag:3,ntype:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntransactiontestcode:0,ntranscode:inputData.ntransactionstatus.toString(),ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:inputData.userinfo,ntestcode:inputData.ntestcode,activeTestKey:inputData.activeTestKey,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,checkBoxOperation:inputData.checkBoxOperation,nneedsubsample:inputData.nneedsubsample};var subSample=inputData.nneedsubsample;// dispatch(initRequest(true));\n// rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\nif(isServiceRequired){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\",inputParamData).then(function(response){// let responseData = {\n//     ...response.data,\n//     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n//     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n//     // RESelectedTest: inputData.masterData.RESelectedTest\n// }\nvar responseData=_objectSpread({},response.data);responseData=sortData(responseData,'descending','npreregno');var oldSelectedTest=inputData.masterData.RESelectedTest;var oldSelectedSubSample=inputData.masterData.RESelectedSubSample||[];fillRecordBasedOnCheckBoxSelection(inputData.masterData,response.data,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{// ...response.data,\nRESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSample:inputData.masterData.RESelectedSample,RESelectedSubSample:inputData.RESelectedSubSample||inputData.masterData.RESelectedSubSample});if(inputData.searchTestRef!==undefined&&inputData.searchTestRef.current!==null){inputData.searchTestRef.current.value=\"\";masterData['searchedTests']=undefined;}var _inputData4=inputData,testskip=_inputData4.testskip,testtake=_inputData4.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}var TestParameters=[];var ResultUsedInstrument=[];var ResultUsedMaterial=[];var ResultUsedTasks=[];var RegistrationTestAttachment=[];var ResultChangeHistory=[];var RegistrationTestComment=[];var RegistrationSampleComment=[];var RegistrationSampleAttachment=[];if(inputData.checkBoxOperation===1){//added by sudharshanan for test select issue while sample click\nvar wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var ntransactiontestcode;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{ntransactiontestcode=masterData.RESelectedTest[0].ntransactiontestcode;}switch(inputData.activeTestKey){case\"IDS_RESULTS\":TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;// case \"IDS_SAMPLECOMMENTS\":\n//         RegistrationTestComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\n//         activeName = \"RegistrationComment\"\n//         dataStateName = \"sampleChangeDataState\"\n//         break;\ndefault:TestParameters=keepOld?inputData.masterData.TestParameters:getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,ntransactiontestcode,\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}else if(inputData.checkBoxOperation===5){var list=[];var dbData=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(response.data.TestParameters));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_MATERIAL\":list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedMaterial),_toConsumableArray(response.data.ResultUsedMaterial));ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":dbData=response.data.ResultUsedTasks||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(dbData));list.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":dbData=response.data.RegistrationTestAttachment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":dbData=response.data.ResultChangeHistory||[];list=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTCOMMENTS\":dbData=response.data.RegistrationTestComment||[];list=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestComment),_toConsumableArray(dbData));RegistrationTestComment=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;default:dbData=response.data.TestParameters||[];list=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(dbData));TestParameters=getRecordBasedOnPrimaryKeyName(list,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else if(inputData.checkBoxOperation===7){var _list3=[];var _dbData=[];var testList=reArrangeArrays(inputData.masterData.RE_SUBSAMPLE,responseData.RE_TEST,\"ntransactionsamplecode\");masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:[testList[0]],RE_TEST:testList// ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n});switch(inputData.activeTestKey){case\"IDS_RESULTS\":_dbData=response.data.TestParameters||[];_list3=_toConsumableArray(response.data.TestParameters);TestParameters=getRecordBasedOnPrimaryKeyName(_list3,testList.length>0?testList[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_INSTRUMENT\":_dbData=response.data.TestParameters||[];_list3=[].concat(_toConsumableArray(inputData.masterData.ResultUsedInstrument),_toConsumableArray(response.data.ResultUsedInstrument));ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_MATERIAL\":_list3=[].concat(_toConsumableArray(inputData.masterData.ResultUsedMaterial),_toConsumableArray(response.data.ResultUsedMaterial));ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TASK\":_dbData=response.data.ResultUsedTasks||[];_list3=[].concat(_toConsumableArray(inputData.masterData.ResultUsedTasks),_toConsumableArray(_dbData));_list3.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_TESTATTACHMENTS\":_dbData=response.data.RegistrationTestAttachment||[];_list3=[].concat(_toConsumableArray(inputData.masterData.RegistrationTestAttachment),_toConsumableArray(_dbData));RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;case\"IDS_RESULTCHANGEHISTORY\":_dbData=response.data.ResultChangeHistory||[];_list3=[].concat(_toConsumableArray(inputData.masterData.ResultChangeHistory),_toConsumableArray(_dbData));ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;// case \"IDS_TESTCOMMENTS\":\n//     dbData = response.data.RegistrationTestComment || []\n//     list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n//     RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n//     break;\ndefault:_dbData=response.data.TestParameters||[];_list3=[].concat(_toConsumableArray(inputData.masterData.TestParameters),_toConsumableArray(_dbData));TestParameters=getRecordBasedOnPrimaryKeyName(_list3,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");break;}}else{var _list4=[];switch(inputData.activeTestKey){case\"IDS_RESULTS\":_list4=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":_list4=response.data.ResultUsedInstrument?sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode'):[];ResultUsedInstrument=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":_list4=response.data.ResultUsedMaterial?sortData(response.data.ResultUsedMaterial,'descending','nresultusedmaterialcode'):[];ResultUsedMaterial=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":_list4=response.data.ResultUsedTasks?sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode'):[];_list4.reduce(function(unique,item){return unique.includes(item)?unique:[].concat(_toConsumableArray(unique),[item]);},[]);ResultUsedTasks=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":_list4=response.data.RegistrationTestAttachment?sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode'):[];RegistrationTestAttachment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestAttachment\";break;case\"IDS_RESULTCHANGEHISTORY\":_list4=response.data.ResultChangeHistory?sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode'):[];ResultChangeHistory=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_TESTCOMMENTS\":_list4=response.data.RegistrationTestComment?sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_SUBSAMPLEATTACHMENTS\":_list4=response.data.RegistrationSampleComment?sortData(response.data.RegistrationSampleComment,'descending','ntestcommentcode'):[];RegistrationTestComment=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_SUBSAMPLE.length>0?inputData.masterData.RE_SUBSAMPLE[0].ntransactionsamplecode:\"\",\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"testCommentDataState\";break;default:_list4=response.data.TestParameters?sortData(response.data.TestParameters,'ascending','ntransactionresultcode'):[];TestParameters=getRecordBasedOnPrimaryKeyName(_list4,inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode:\"\",\"ntransactiontestcode\");activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}}if(subSample){var wholeSubsampleList=masterData.RE_SUBSAMPLE.map(function(b){return b.ntransactionsamplecode;});oldSelectedSubSample.map(function(test,index){if(!wholeSubsampleList.includes(test.ntransactionsamplecode)){oldSelectedSubSample.splice(index,1);}return null;});var _keepOld2=false;var ntransactionsamplecode;if(oldSelectedSubSample.length>0){_keepOld2=true;}else{ntransactionsamplecode=masterData.selectedSubSample[0].ntransactionsamplecode;}switch(inputData.activeSubSampleTab){case\"IDS_SUBSAMPLECOMMENTS\":RegistrationSampleComment=_keepOld2?inputData.masterData.RegistrationSampleComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleComment\";dataStateName=\"subSampleCommentDataState\";break;default:RegistrationSampleAttachment=_keepOld2?inputData.masterData.RegistrationSampleAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment,ntransactionsamplecode,\"ntransactionsamplecode\");activeName=\"RegistrationSampleAttachment\";dataStateName=\"subSampleAttachmentDataState\";break;}}masterData=_objectSpread(_objectSpread({},masterData),{},{// wholeApprovalParameter,\nTestParameters:TestParameters,// wholeResultUsedInstrument,\nResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,// wholeResultUsedTasks,\nResultUsedTasks:ResultUsedTasks,// wholeRegistrationTestAttachment,\nRegistrationTestAttachment:RegistrationTestAttachment,// wholeResultChangeHistory,\nResultChangeHistory:ResultChangeHistory,// wholeRegistrationTestComments,\nRegistrationTestComment:RegistrationTestComment,RegistrationSampleComment:RegistrationSampleComment,RegistrationSampleAttachment:RegistrationSampleAttachment});if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,activeTestTab:inputData.activeTestKey,screenName:inputData.activeTestKey},skipInfo)});}).catch(function(error){console.log(\"error:\",error);dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nvar oldSelectedTest=inputData.masterData.RESelectedTest;//let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n// let isGrandChildGetRequired = false;\n// if (TestSelected.length > 0) {\n//     isGrandChildGetRequired = true;\n// } else {\n//     isGrandChildGetRequired = false;\n// }\nvar TestSelected=inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\"):filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest,inputData.removeElementFromArray[0].ntransactionsamplecode,\"ntransactionsamplecode\");var isGrandChildGetRequired=false;if(TestSelected.length>0){isGrandChildGetRequired=false;}else{isGrandChildGetRequired=true;}fillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedSubSample,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactionsamplecode\",inputData.removeElementFromArray);if(isGrandChildGetRequired){var ntransactiontestcode=inputData.masterData.RE_TEST.length>0?inputData.masterData.RE_TEST[0].ntransactiontestcode.toString():\"\";var RESelectedSubSample=inputData.RESelectedSubSample;var RESelectedTest=inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[];// let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\ninputData=_objectSpread(_objectSpread({},inputData),{},{childTabsKey:[\"TestParameters\",\"ResultUsedInstrument\",\"ResultUsedMaterial\",\"ResultUsedTasks\",\"RegistrationTestAttachment\",\"ResultChangeHistory\",\"RegistrationTestComment\",\"ResultChangeHistory\"],ntransactiontestcode:ntransactiontestcode,RESelectedSample:inputData.masterData.RESelectedSample,RESelectedTest:RESelectedTest,RESelectedSubSample:RESelectedSubSample,checkBoxOperation:3,activeTestKey:inputData.activeTestKey});dispatch(getTestChildTabREDetail(inputData,true));}else{//added by sudharshanan for test select issue while sample click\nvar masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.masterData.RE_TEST.length>0?[inputData.masterData.RE_TEST[0]]:[],RESelectedSubSample:inputData.RESelectedSubSample});var wholeTestList=masterData.RE_TEST.map(function(b){return b.ntransactiontestcode;});oldSelectedTest.map(function(test,index){if(!wholeTestList.includes(test.ntransactiontestcode)){oldSelectedTest.splice(index,1);}return null;});var keepOld=false;var _ntransactiontestcode3;if(oldSelectedTest.length>0){keepOld=true;masterData=_objectSpread(_objectSpread({},masterData),{},{RESelectedTest:oldSelectedTest});}else{_ntransactiontestcode3=masterData.RE_TEST[0].ntransactiontestcode;}// const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n//     ntransactiontestcode, \"ntransactiontestcode\");\nvar TestParameters=keepOld?inputData[\"statusNone\"]?getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,_ntransactiontestcode3,\"ntransactiontestcode\");var ResultUsedInstrument=keepOld?inputData.masterData.ResultUsedInstrument:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument||[],_ntransactiontestcode3,\"ntransactiontestcode\");var ResultUsedMaterial=keepOld?inputData.masterData.ResultUsedMaterial:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial||[],_ntransactiontestcode3,\"ntransactiontestcode\");var ResultUsedTasks=keepOld?inputData.masterData.ResultUsedTasks:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestAttachment=keepOld?inputData.masterData.RegistrationTestAttachment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var RegistrationTestComment=keepOld?inputData.masterData.RegistrationTestComment:getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment||[],_ntransactiontestcode3,\"ntransactiontestcode\");var ResultChangeHistory=keepOld?inputData.masterData.ResultChangeHistory:getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory||[],_ntransactiontestcode3,\"ntransactiontestcode\");var _inputData5=inputData,testskip=_inputData5.testskip,testtake=_inputData5.testtake;var bool=false;var skipInfo={};if(inputData.masterData.RE_TEST.length<=inputData.testskip){testskip=0;bool=true;}if(bool){skipInfo={testskip:testskip,testtake:testtake};}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSubSample:inputData.RESelectedSubSample,// selectedPreregno: inputData.npreregno,\n// RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n//     searchedTest[0]\n// ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n//     RE_TEST[0]\n// ] : [],\n// RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\nTestParameters:TestParameters,ResultUsedInstrument:ResultUsedInstrument,ResultUsedMaterial:ResultUsedMaterial,ResultUsedTasks:ResultUsedTasks,RegistrationTestAttachment:RegistrationTestAttachment,RegistrationTestComment:RegistrationTestComment,ResultChangeHistory:ResultChangeHistory}),loading:false,showFilter:false,activeSampleTab:inputData.activeSampleTab,activeTestKey:inputData.activeTestKey,activeTestTab:inputData.activeTestKey},skipInfo)});}}};}export function getSampleChildTabREDetail(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,npreregno:inputData.npreregno,userinfo:inputData.userinfo};var url=\"\";switch(inputData.activeSampleKey){case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";break;case\"IDS_APPROVALHISTORY\":url=\"resultentrybysample/getSampleApprovalHistory\";break;case\"IDS_SAMPLECOMMENTS\":url=\"comments/getSampleComment\";break;default:url=\"attachment/getSampleAttachment\";break;}dispatch(initRequest(true));rsapi.post(url,inputParamData).then(function(response){var responseData=_objectSpread({},response.data);//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{RESelectedSample:inputData.RESelectedSample}),loading:false,showFilter:false,activeSampleKey:inputData.activeSampleKey,screenName:inputData.screenName}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestChildTabREDetail(inputData,isServiceRequired){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"),npreregno:inputData.npreregno,userinfo:inputData.userinfo};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\nvar url=\"resultentrybysample/getTestbasedParameter\";switch(inputData.activeTestKey){case\"IDS_RESULTS\":url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":url=\"resultentrybysample/getResultUsedInstrument\";activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":url=\"resultentrybysample/getResultUsedMaterial\";activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":url=\"resultentrybysample/getResultUsedTask\";activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":url=\"attachment/getTestAttachment\";activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":url=\"comments/getTestComment\";activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":url=\"resultentrybysample/getResultChangeHistory\";activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":url=\"attachment/getSampleAttachment\";activeName=\"\";dataStateName=\"resultDataState\";break;default:url=\"resultentrybysample/getTestbasedParameter\";activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));if(isServiceRequired){rsapi.post(url,inputParamData).then(function(response){//sortData(response.data,'ascending','ntransactiontestcode');\n//sortData(response.data,'ascending','ntestattachmentcode');\nvar responseData=_objectSpread(_objectSpread({},response.data),{},{RESelectedSample:inputData.RESelectedSample||inputData.masterData.RESelectedSample,RESelectedTest:inputData.RESelectedTest,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId});var skipInfo={};//responseData = sortData(responseData)\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,responseData,inputData.childTabsKey,inputData.checkBoxOperation,\"npreregno\",inputData.removeElementFromArray);var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RESelectedTest:inputData.RESelectedTest});if(inputData[dataStateName]&&masterData[activeName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,activeTabIndex:inputData.activeTabIndex,activeTabId:inputData.activeTabId,activeTestTab:inputData.activeTestKey,loading:false,activeTestKey:inputData.activeTestKey,screenName:inputData.activeTestKey,testskip:undefined,testtake:undefined},skipInfo)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{//fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\nfillRecordBasedOnCheckBoxSelection(inputData.masterData,inputData.RESelectedTest,inputData.childTabsKey,inputData.checkBoxOperation,\"ntransactiontestcode\",inputData.removeElementFromArray);var skipInfo={};var masterData=_objectSpread(_objectSpread({},inputData.masterData),{},{RESelectedTest:inputData.RESelectedTest});if(masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined}));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}dispatch({type:DEFAULT_RETURN,payload:_objectSpread({masterData:masterData,loading:false,showFilter:false,activeTestKey:inputData.activeTestKey,screenName:inputData.screenName},skipInfo)});}};}export function getRERegistrationType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{defaultSampleType:inputData.defaultSampleType},response.data),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getRERegistrationSubType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getRegistrationsubType\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{//defaultFilterStatus:inputData.masterData.defaultFilterStatus,\ndefaultRegistrationType:inputData.defaultRegistrationType}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREApprovalConfigVersion(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getApprovalConfigVersion\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationSubType:inputData.defaultRegistrationSubType// fromDate: inputData.fromdate,\n//  toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREFilterStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFilterStatus\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultjobstatus:inputData.defaultjobstatus// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREJobStatus(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getApproveConfigVersionRegTemplateDesign\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultApprovalConfigVersion:inputData.defaultApprovalConfigVersion// fromDate: inputData.fromdate,\n// toDate: inputData.todate\n}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getResultEntryDetails(inputParamData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryDetails\",_objectSpread(_objectSpread({},inputParamData.inputData),{},{nneedsubsample:inputParamData.masterData.nneedsubsample})).then(function(response){var masterData=_objectSpread({},inputParamData.masterData);if(inputParamData.refs.searchSampleRef!==undefined&&inputParamData.refs.searchSampleRef.current!==null){inputParamData.refs.searchSampleRef.current.value=\"\";masterData['searchedSample']=undefined;}if(inputParamData.refs.searchSubSampleRef!==undefined&&inputParamData.refs.searchSubSampleRef.current!==null){inputParamData.refs.searchSubSampleRef.current.value=\"\";masterData['searchedSubSample']=undefined;}if(inputParamData.refs.searchTestRef!==undefined&&inputParamData.refs.searchTestRef.current!==null){inputParamData.refs.searchTestRef.current.value=\"\";// masterData['searchedTests'] = undefined\nmasterData['searchedTest']=undefined;}//sortData(response.data)\nsortData(response.data,'ascending','ntransactionresultcode');dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{realFromDate:response.data[\"fromDate\"],realToDate:response.data[\"toDate\"]}),loading:false,showTest:inputParamData.inputData.showTest,showSample:inputParamData.inputData.showSample,activeTestKey:inputParamData.inputData.activeTestKey,skip:0,take:inputParamData.inputData.take,testskip:0,testtake:inputParamData.inputData.testtake,resultDataState:_objectSpread(_objectSpread({},inputParamData.resultDataState),{},{sort:undefined,filter:undefined}),instrumentDataState:_objectSpread(_objectSpread({},inputParamData.instrumentDataState),{},{sort:undefined,filter:undefined}),materialDataState:_objectSpread(_objectSpread({},inputParamData.materialDataState),{},{sort:undefined,filter:undefined}),taskDataState:_objectSpread(_objectSpread({},inputParamData.taskDataState),{},{sort:undefined,filter:undefined}),documentDataState:_objectSpread(_objectSpread({},inputParamData.documentDataState),{},{sort:undefined,filter:undefined}),resultChangeDataState:_objectSpread(_objectSpread({},inputParamData.resultChangeDataState),{},{sort:undefined,filter:undefined}),testCommentDataState:_objectSpread(_objectSpread({},inputParamData.testCommentDataState),{},{sort:undefined,filter:undefined}),historyDataState:_objectSpread(_objectSpread({},inputParamData.historyDataState),{},{sort:undefined,filter:undefined}),samplePrintHistoryDataState:_objectSpread(_objectSpread({},inputParamData.samplePrintHistoryDataState),{},{sort:undefined,filter:undefined}),sampleHistoryDataState:_objectSpread(_objectSpread({},inputParamData.sampleHistoryDataState),{},{sort:undefined,filter:undefined})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultGetModule(inputData,userInfo,ncontrolcode,testskip,testtake){return function(dispatch){var TestList=_toConsumableArray(inputData.RE_TEST);TestList=TestList.splice(testskip,testskip+testtake);var acceptTestList=getSameRecordFromTwoArrays(TestList,inputData.RESelectedTest,\"ntransactiontestcode\");if(acceptTestList&&acceptTestList.length>0){if(Object.values(inputData).length>0&&inputData.RESelectedTest.length>0){var inputParamData={ntransactiontestcode:acceptTestList?acceptTestList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",userinfo:userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultEntryResults\",inputParamData).then(function(response){var selectedResultGrade=[];var paremterResultcode=[];var parameterResults=response.data.ResultParameter;var predefDefaultFlag=false;parameterResults.map(function(param,index){selectedResultGrade[index]={ngradecode:param.ngradecode};paremterResultcode[index]=param.ntransactionresultcode;predefDefaultFlag=false;response.data.PredefinedValues&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]&&response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(function(predefinedvalue){if(predefinedvalue.ndefaultstatus===transactionStatus.YES){if(!predefDefaultFlag){predefDefaultFlag=true;response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]=constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]||[],'spredefinedname','spredefinedname',undefined,undefined,undefined).get(\"OptionList\");}// response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n//     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n//         undefined, undefined).get(\"OptionList\");\nif(response.data.ResultParameter[index].sresult===null){response.data.ResultParameter[index].sresult=predefinedvalue.spredefinedname;response.data.ResultParameter[index].sfinal=predefinedvalue.spredefinedname;response.data.ResultParameter[index].editable=true;response.data.ResultParameter[index].ngradecode=predefinedvalue.ngradecode;}}else{if(!predefDefaultFlag){predefDefaultFlag=true;response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]=constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]||[],'spredefinedname','spredefinedname',undefined,undefined,undefined).get(\"OptionList\");}}//return null;\n});//return null;\n// response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n// undefined, undefined).get(\"OptionList\");\n});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData),response.data),{},{paremterResultcode:paremterResultcode//,\n//selectedResultGrade ,\n}),selectedRecord:{selectedResultGrade:selectedResultGrade,ResultParameter:response.data.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",openModal:true,operation:\"update\",activeTestKey:\"IDS_RESULTS\",ncontrolcode:ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});//}\n}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}}else{dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOENTERRESULT\"}));}};}export function completeTest(inputParam,acceptList,userInfo,completeResultId){if(acceptList!==undefined&&acceptList.length>0){return function(dispatch){var inputData=inputParam.testChildGetREParam;var inputParamData={ntype:3,nflag:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),napprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:userInfo,fromdate:inputData.fromdate,todate:inputData.todate,ntestcode:inputData.ntestcode,transactiontestcode:acceptList?acceptList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntransactiontestcode:0,activeTestKey:inputData.activeTestKey,ncontrolcode:inputParam.inputData.ncontrolcode,nneedsubsample:inputData.masterData.nneedsubsample,ndesigntemplatemappingcode:inputData.masterData.ndesigntemplatemappingcode};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\n// let url = \"resultentrybysample/getTestbasedParameter\"\nswitch(inputData.activeTestKey){case\"IDS_RESULTS\":activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":activeName=\"\";dataStateName=\"resultDataState\";break;default:activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));rsapi.post(\"resultentrybysample/completeTest\",inputParamData).then(function(response){var RE_SAMPLE=[];var RE_SUBSAMPLE=[];var RE_TEST=[];var responseData=response.data;if(responseData[\"RE_TEST\"].length>0){if(inputData.masterData.nneedsubsample)RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactionsamplecode\");else RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"npreregno\");}else{RE_TEST=inputData.masterData[\"RE_TEST\"];}RE_SUBSAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"],RE_TEST,\"ntransactionsamplecode\");if(RE_SUBSAMPLE.length>0){RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"];}else{RE_SAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_TEST,\"npreregno\");}var RESelectedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"],RE_TEST,\"npreregno\");var RESelectedSubSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"],RE_TEST,\"ntransactionsamplecode\");var RESelectedTest1=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"],acceptList,\"ntransactiontestcode\");var RESelectedTest2=updatedObjectWithNewElement(RESelectedTest1,responseData.RESelectedTest);var searchedSample=undefined;if(inputData.masterData[\"searchedSample\"]){searchedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"],RE_TEST,\"npreregno\");}var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RE_SAMPLE:RE_SAMPLE,RE_SUBSAMPLE:RE_SUBSAMPLE,RESelectedSubSample:RESelectedSubSample,searchedSample:searchedSample,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest2,RE_TEST:responseData[\"RE_TEST\"]});var skipInfo={};if(masterData.RE_SAMPLE&&masterData.RE_SAMPLE.length<=inputParam.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{skip:0,take:inputParam.take});}if(masterData.RE_TEST&&masterData.RE_TEST.length<=inputParam.testskip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:0,testtake:inputParam.testtake});}if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}var respObject=_objectSpread(_objectSpread({},inputParamData.inputData),{},{openModal:false,loadEsign:false,showConfirmAlert:false,//selectedRecord: undefined,\nloading:false,screenName:inputData.activeTestKey},skipInfo);if(searchedSample&&RESelectedSample.length===0&&searchedSample.length>0){var _objectSpread10;var paramList=inputParam.postParamList[0];var inputParameter=_objectSpread(_objectSpread({},paramList.fecthInputObject.fecthInputObject),{},(_objectSpread10={fetchUrl:paramList.fetchUrl},_defineProperty(_objectSpread10,paramList.primaryKeyField,String(searchedSample[0][paramList.primaryKeyField])),_defineProperty(_objectSpread10,\"ntype\",2),_defineProperty(_objectSpread10,\"nflag\",2),_objectSpread10));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[searchedSample[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},inputParameter),{},{checkBoxOperation:3}),respObject));}else if(!searchedSample&&RESelectedSample.length===0&&RE_SAMPLE.length>0){var _objectSpread11;var _paramList=inputParam.postParamList[0];var _inputParameter=_objectSpread(_objectSpread({},_paramList.fecthInputObject.fecthInputObject),{},(_objectSpread11={fetchUrl:_paramList.fetchUrl},_defineProperty(_objectSpread11,_paramList.primaryKeyField,String(RE_SAMPLE[0][_paramList.primaryKeyField])),_defineProperty(_objectSpread11,\"ntype\",2),_defineProperty(_objectSpread11,\"nflag\",2),_objectSpread11));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[RE_SAMPLE[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},_inputParameter),{},{checkBoxOperation:3}),respObject));}else{respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:masterData});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{loading:false})});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}export function testStart(inputParam,acceptList,userInfo,completeResultId){if(acceptList!==undefined&&acceptList.length>0){return function(dispatch){var inputData=inputParam.testChildGetREParam;var inputParamData={ntype:3,nflag:3,nsampletypecode:inputData.nsampletypecode,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,npreregno:inputData.npreregno,ntranscode:String(inputData.ntransactionstatus),napprovalversioncode:inputData.napprovalversioncode,napprovalconfigcode:inputData.napprovalconfigcode,ntransactionsamplecode:inputData.ntransactionsamplecode,userinfo:userInfo,fromdate:inputData.fromdate,todate:inputData.todate,ntestcode:inputData.ntestcode,transactiontestcode:acceptList?acceptList.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",//ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\nntransactiontestcode:0,activeTestKey:inputData.activeTestKey,ncontrolcode:inputParam.inputData.ncontrolcode,nneedsubsample:inputData.masterData.nneedsubsample,ndesigntemplatemappingcode:inputData.masterData.ndesigntemplatemappingcode};var activeName=\"\";var dataStateName=\"\";// let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n//     documentDataState, testCommentDataState } = inputData\n// let url = \"resultentrybysample/getTestbasedParameter\"\nswitch(inputData.activeTestKey){case\"IDS_RESULTS\":activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;case\"IDS_INSTRUMENT\":activeName=\"ResultUsedInstrument\";dataStateName=\"instrumentDataState\";break;case\"IDS_MATERIAL\":activeName=\"ResultUsedMaterial\";dataStateName=\"materialDataState\";break;case\"IDS_TASK\":activeName=\"ResultUsedTasks\";dataStateName=\"taskDataState\";break;case\"IDS_TESTATTACHMENTS\":activeName=\"RegistrationTestAttachment\";break;case\"IDS_TESTCOMMENTS\":activeName=\"RegistrationTestComment\";dataStateName=\"testCommentDataState\";break;case\"IDS_DOCUMENTS\":activeName=\"\";dataStateName=\"documentDataState\";break;case\"IDS_RESULTCHANGEHISTORY\":activeName=\"ResultChangeHistory\";dataStateName=\"resultChangeDataState\";break;case\"IDS_SAMPLEATTACHMENTS\":activeName=\"\";dataStateName=\"resultDataState\";break;default:activeName=\"TestParameters\";dataStateName=\"resultDataState\";break;}dispatch(initRequest(true));rsapi.post(\"resultentrybysample/testInitiated\",inputParamData).then(function(response){var RE_SAMPLE=[];var RE_SUBSAMPLE=[];var RE_TEST=[];var responseData=response.data;if(responseData[\"RE_TEST\"].length>0){if(inputData.masterData.nneedsubsample)RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"ntransactionsamplecode\");else RE_TEST=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"],responseData[\"RE_TEST\"],\"npreregno\");}else{RE_TEST=inputData.masterData[\"RE_TEST\"];}RE_SUBSAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"],RE_TEST,\"ntransactionsamplecode\");if(RE_SUBSAMPLE.length>0){RE_SAMPLE=inputData.masterData[\"RE_SAMPLE\"];}else{RE_SAMPLE=filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"],RE_TEST,\"npreregno\");}var RESelectedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"],RE_TEST,\"npreregno\");var RESelectedSubSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"],RE_TEST,\"ntransactionsamplecode\");var RESelectedTest1=filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"],acceptList,\"ntransactiontestcode\");var RESelectedTest2=updatedObjectWithNewElement(RESelectedTest1,responseData.RESelectedTest);RESelectedTest2=replaceUpdatedObject(responseData[\"RE_TEST\"],inputData.masterData.RE_TEST,'ntransactiontestcode');var searchedSample=undefined;if(inputData.masterData[\"searchedSample\"]){searchedSample=filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"],RE_TEST,\"npreregno\");}var masterData=_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),responseData),{},{RE_SAMPLE:RE_SAMPLE,RE_SUBSAMPLE:RE_SUBSAMPLE,RESelectedSubSample:RESelectedSubSample,searchedSample:searchedSample,RESelectedSample:RESelectedSample,RESelectedTest:RESelectedTest2,RE_TEST:responseData[\"RE_TEST\"]});var skipInfo={};if(masterData.RE_SAMPLE&&masterData.RE_SAMPLE.length<=inputParam.skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{skip:0,take:inputParam.take});}if(masterData.RE_TEST&&masterData.RE_TEST.length<=inputParam.testskip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},{testskip:0,testtake:inputParam.testtake});}if(inputData[dataStateName]&&masterData[activeName].length<=inputData[dataStateName].skip){skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{skip:0,sort:undefined,filter:undefined})));}else{skipInfo=_objectSpread(_objectSpread({},skipInfo),{},_defineProperty({},dataStateName,_objectSpread(_objectSpread({},inputData[dataStateName]),{},{sort:undefined,filter:undefined})));}var respObject=_objectSpread(_objectSpread({},inputParamData.inputData),{},{openModal:false,loadEsign:false,showConfirmAlert:false,//selectedRecord: undefined,\nloading:false,screenName:inputData.activeTestKey},skipInfo);if(searchedSample&&RESelectedSample.length===0&&searchedSample.length>0){var _objectSpread14;var paramList=inputParam.postParamList[0];var inputParameter=_objectSpread(_objectSpread({},paramList.fecthInputObject.fecthInputObject),{},(_objectSpread14={fetchUrl:paramList.fetchUrl},_defineProperty(_objectSpread14,paramList.primaryKeyField,String(searchedSample[0][paramList.primaryKeyField])),_defineProperty(_objectSpread14,\"ntype\",2),_defineProperty(_objectSpread14,\"nflag\",2),_objectSpread14));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[searchedSample[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},inputParameter),{},{checkBoxOperation:3}),respObject));}else if(!searchedSample&&RESelectedSample.length===0&&RE_SAMPLE.length>0){var _objectSpread15;var _paramList2=inputParam.postParamList[0];var _inputParameter2=_objectSpread(_objectSpread({},_paramList2.fecthInputObject.fecthInputObject),{},(_objectSpread15={fetchUrl:_paramList2.fetchUrl},_defineProperty(_objectSpread15,_paramList2.primaryKeyField,String(RE_SAMPLE[0][_paramList2.primaryKeyField])),_defineProperty(_objectSpread15,\"ntype\",2),_defineProperty(_objectSpread15,\"nflag\",2),_objectSpread15));respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:_objectSpread(_objectSpread({},masterData),{},{RESelectedSample:[RE_SAMPLE[0]]})});dispatch(fetchSelectedData(_objectSpread(_objectSpread({},_inputParameter2),{},{checkBoxOperation:3}),respObject));}else{respObject=_objectSpread(_objectSpread({},respObject),{},{masterData:masterData});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{loading:false})});}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}//Compare two array and return the first array which is available in second array\nexport function compareTwoArray(firstArray,secondArray,PrimaryKey){var filterArray=firstArray.filter(function(x){return secondArray.some(function(y){return x[PrimaryKey]===y[PrimaryKey];});});return filterArray;}function fetchSelectedData(inputParam,respObject){return function(dispatch){rsapi.post(inputParam.fetchUrl,_objectSpread({},inputParam)).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},respObject.masterData),response.data),{},{RESelectedSample:response.data.RESelectedSample||respObject.masterData.RESelectedSample||[]});//sortData(masterData);\ndispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({},respObject),{},{masterData:masterData,loading:false})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function testMethodSourceEdit(inputData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.test.ntransactiontestcode,ntestgrouptestcode:inputData.test.ntestgrouptestcode,ntestcode:inputData.test.ntestcode,ncontrolcode:inputData.editSourceMethodId,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestMethodSource\",inputParamData).then(function(response){var TagSource=constructOptionList(response.data.SourceData||[],\"nsourcecode\",\"ssourcename\",undefined,undefined,undefined);var TagListSource=TagSource.get(\"OptionList\");var TagMethod=constructOptionList(response.data.MethodData||[],\"nmethodcode\",\"smethodname\",undefined,undefined,undefined);var TagListMethod=TagMethod.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{SourceData:TagListSource,MethodData:TagListMethod,RESelectedSubSample:inputData.masterData.RESelectedSubSample}),selectedRecord:{ntransactiontestcode:inputData.test.ntransactiontestcode,stestsynonym:inputData.test.jsondata.stestsynonym,nsourcecode:response.data.SourceDataValue,nmethodcode:response.data.MethodDataValue},loading:false,screenName:\"IDS_TESTMETHODSOURCE\",openModal:true,operation:\"update\",ncontrolcode:inputData.editSourceMethodId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateParameterComments(inputData,masterData){return function(dispatch){var inputParamData={ntransactiontestcode:inputData.ntransactiontestcode,ntransactionresultcode:inputData.ntransactionresultcode,sresultcomment:inputData.sresultcomment,transactiontestcode:inputData.transactiontestcode,userinfo:inputData.userinfo,nregtypecode:inputData.nregtypecode,nregsubtypecode:inputData.nregsubtypecode,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),loading:false,loadEsign:false,screenName:\"IDS_RESULT\",openModal:false,operation:\"update\",ncontrolcode:inputData.ncontrolcode//ncontrolcode:inputData.editSourceMethodId\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function addREInstrument(inputData){return function(dispatch){var urlArray=[];var resultusedinstrument=rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\",{userinfo:inputData.userInfo,ntestgrouptestcode:inputData.masterData.RESelectedTest.ntestgrouptestcode});var timeZoneService=rsapi.post(\"timezone/getTimeZone\");var UTCtimeZoneService=rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:inputData.userInfo});urlArray=[resultusedinstrument,timeZoneService,UTCtimeZoneService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory}),selectedId:null,selectedRecord:{sarno:inputData.test.sarno,ssamplearno:inputData.test.ssamplearno,stestsynonym:inputData.test.stestsynonym,transactiontestcode:inputData.RESelectedTest?inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",ntransactiontestcode:inputData.test.ntransactiontestcode,ninstrumentcatcode:TagInsturmentcategory.get(\"DefaultValue\")?TagInsturmentcategory.get(\"DefaultValue\"):[],ninstrumentcode:TagInstrument.get(\"DefaultValue\")?TagInstrument.get(\"DefaultValue\"):[],npreregno:inputData.test.npreregno,//dtodate: new Date(response[2].data),//new Date(),\ndtodate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\n//dfromdate: new Date(response[2].data),//new Date(),\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[2].data),//new Date(),\nntzfromdate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid},ntztodate:{\"value\":inputData.userInfo.ntimezonecode,\"label\":inputData.userInfo.stimezoneid}},timeZoneList:TagListTimeZone||[],loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"create\",//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function addREMaterial(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\",{userinfo:inputData.userInfo,nsectioncode:inputData.test.nsectioncode}).then(function(response){var materialTypeMap=constructOptionList(response.data.MaterialType||[],\"nmaterialtypecode\",\"smaterialtypename\",undefined,undefined,undefined);var materialType=materialTypeMap.get(\"OptionList\");var materialCatMap=constructOptionList(response.data.MaterialCategory||[],\"nmaterialcatcode\",\"smaterialcatname\",undefined,undefined,undefined);var materialCat=materialCatMap.get(\"OptionList\");var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:{sarno:inputData.test.sarno,ssamplearno:inputData.test.ssamplearno,stestsynonym:inputData.test.stestsynonym,nsectioncode:inputData.test.nsectioncode,ssectionname:inputData.test.ssectionname,transactiontestcode:inputData.RESelectedTest?inputData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",ntransactiontestcode:inputData.test.ntransactiontestcode,npreregno:inputData.test.npreregno,nmaterialtypecode:materialTypeMap.get(\"DefaultValue\"),nmaterialcatcode:materialCatMap.get(\"DefaultValue\"),nmaterialcode:materialMap.get(\"OptionList\").length>0?materialMap.get(\"OptionList\")[0]:\"\",nmaterialinventorycode:materialInventoryMap.get(\"OptionList\").length>0?materialInventoryMap.get(\"OptionList\")[0]:\"\",sunitname:response.data.MaterialInventory!==undefined?response.data.MaterialInventory[0].sunitname:\"\",savailablequantity:response.data.MaterialInventory!==undefined?response.data.MaterialInventory[0].savailablequatity:\"\"},materialType:materialType,materialCat:materialCat,material:material,materialInventory:materialInventory,loading:false,screenName:\"IDS_MATERIAL\",openModal:true,operation:\"create\",//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedMaterailId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREMaterialCategoryByType(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\",{nmaterialtypecode:inputData.selectedRecord.nmaterialtypecode.value,userinfo:inputData.userInfo}).then(function(response){var materialCatMap=constructOptionList(response.data.MaterialCategory||[],\"nmaterialcatcode\",\"smaterialcatname\",undefined,undefined,undefined);var materialCat=materialCatMap.get(\"OptionList\");var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{nmaterialcatcode:materialCatMap.get(\"DefaultValue\")||{}}),materialCat:materialCat,material:material,materialInventory:materialInventory,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREMaterialByCategory(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getREMaterialByCategory\",{nmaterialtypecode:inputData.selectedRecord.nmaterialtypecode.value,nmaterialcatcode:inputData.selectedRecord.nmaterialcatcode.value,nsectioncode:inputData.selectedRecord.nsectioncode,userinfo:inputData.userInfo}).then(function(response){var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{nmaterialcode:materialMap.get(\"OptionList\")[0],nmaterialinventorycode:materialInventoryMap.get(\"OptionList\")[0],savailablequantity:response.data.MaterialInventory[0].savailablequatity,sunitname:response.data.MaterialInventory[0].sunitname}),material:material,materialInventory:materialInventory,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREMaterialInvertoryByMaterial(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\",{nmaterialcode:inputData.selectedRecord.nmaterialcode.value,nsectioncode:inputData.selectedRecord.nsectioncode,userinfo:inputData.userInfo}).then(function(response){var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{sunitname:response.data.MaterialInventory[0].sunitname,savailablequantity:response.data.MaterialInventory[0].savailablequatity}),materialInventory:materialInventory,loading:false,screenName:\"IDS_MATERIAL\",openModal:true,//operation: \"create\",\n//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getAvailableMaterialQuantity(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\",{nmaterialinventorycode:inputData.selectedRecord.nmaterialinventorycode.value,nsectioncode:inputData.selectedRecord.nsectioncode,userinfo:inputData.userInfo}).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedId:null,selectedRecord:_objectSpread(_objectSpread({},inputData.selectedRecord),{},{savailablequantity:response.data.inventory.savailablequatity,sunitname:response.data.inventory.jsondata.Unit}),loading:false,screenName:\"IDS_MATERIAL\",openModal:true,//operation: \"create\",\n//activeTestKey: \"IDS_INSTRUMENT\",\nncontrolcode:inputData.addResultUsedInstrumentId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteInstrumentRecord(inputData){return function(dispatch){var inputParamData={nresultusedinstrumentcode:inputData.selectedRecord.nresultusedinstrumentcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}// export function deleteInstrumentRecord(inputData) {\n//     return function (dispatch) {\n//         let inputParamData = {\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n//             userinfo: inputData.userInfo,\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n//         }\n//         dispatch(initRequest(true));\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\n//             .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         masterData: {\n//                             ...inputData.masterData,\n//                             ...response.data\n//                         },\n//                         loading: false,\n//                         operation: \"delete\",\n//                         openModal: false,\n//                         loadEsign: false\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\nexport function fetchInstrumentRecord(inputData){return function(dispatch){var urlArray=[];//const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\nvar timeZoneService=rsapi.post(\"resultentrybysample/getResultUsedInstrument\",{nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,userinfo:inputData.userInfo});var getResultUsedInstrument=rsapi.post(\"timezone/getTimeZone\");urlArray=[timeZoneService,getResultUsedInstrument];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var TagInstrument=constructOptionList(response[0].data.Instrument||[],\"ninstrumentcode\",\"sinstrumentid\",undefined,undefined,undefined);var TagListInstrument=TagInstrument.get(\"OptionList\");var TagInsturmentcategory=constructOptionList(response[0].data.InstrumentCategory||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",undefined,undefined,undefined);var TagListInstrumentCategory=TagInsturmentcategory.get(\"OptionList\");var TagTimeZone=constructOptionList(response[1].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,undefined);var TagListTimeZone=TagTimeZone.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),{},{Instrument:TagListInstrument,InstrumentCategory:TagListInstrumentCategory},response[1].data),selectedId:inputData.editRow.nresultusedinstrumentcode,selectedRecord:{stestsynonym:inputData.editRow.stestsynonym,npreregno:response[0].data.EditResultUsedInstrument[0].npreregno,ntransactiontestcode:inputData.editRow.ntransactiontestcode,nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,ninstrumentcatcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentcatname},ninstrumentcode:{\"value\":response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\"label\":response[0].data.EditResultUsedInstrument[0].sinstrumentid},ntzfromdate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntzfromdate,\"label\":response[0].data.EditResultUsedInstrument[0].stzfromdate},ntztodate:{\"value\":response[0].data.EditResultUsedInstrument[0].ntztodate,\"label\":response[0].data.EditResultUsedInstrument[0].stztodate},//dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n//dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\ndfromdate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].sfromdate),dtodate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].stodate)},timeZoneList:TagListTimeZone||[],ncontrolcode:inputData.ncontrolCode,loading:false,screenName:\"IDS_INSTRUMENT\",openModal:true,operation:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchMaterialRecord(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedMaterial\",{nresultusedmaterialcode:inputData.editRow.nresultusedmaterialcode,userinfo:inputData.userInfo}).then(function(response){var materialTypeMap=constructOptionList(response.data.MaterialType||[],\"nmaterialtypecode\",\"smaterialtypename\",undefined,undefined,undefined);var materialType=materialTypeMap.get(\"OptionList\");var materialCatMap=constructOptionList(response.data.MaterialCategory||[],\"nmaterialcatcode\",\"smaterialcatname\",undefined,undefined,undefined);var materialCat=materialCatMap.get(\"OptionList\");var materialMap=constructOptionList(response.data.Material||[],\"nmaterialcode\",\"smaterialname\",undefined,undefined,undefined);var material=materialMap.get(\"OptionList\");var materialInventoryMap=constructOptionList(response.data.MaterialInventory||[],\"nmaterialinventorycode\",\"sinventoryid\",undefined,undefined,undefined);var materialInventory=materialInventoryMap.get(\"OptionList\");var EditResultUsedMaterial=response.data.EditResultUsedMaterial[0];dispatch({type:DEFAULT_RETURN,payload:{selectedId:inputData.editRow.nresultusedinstrumentcode,materialType:materialType,materialCat:materialCat,material:material,materialInventory:materialInventory,selectedRecord:_objectSpread(_objectSpread({},EditResultUsedMaterial),{},{stestsynonym:inputData.editRow.jsondata.stestsynonym,npreregno:EditResultUsedMaterial.npreregno,ntransactiontestcode:inputData.editRow.ntransactiontestcode,nresultusedinstrumentcode:inputData.editRow.nresultusedinstrumentcode,nmaterialtypecode:{label:EditResultUsedMaterial.jsondata.smaterialtypename,value:EditResultUsedMaterial.nmaterialtypecode},nmaterialcatcode:{\"value\":EditResultUsedMaterial.nmaterialcategorycode,\"label\":EditResultUsedMaterial.jsondata.smaterialcatname},nmaterialcode:{\"value\":EditResultUsedMaterial.nmaterialcode,\"label\":EditResultUsedMaterial.jsondata.smaterialname},nmaterialinventorycode:{\"value\":EditResultUsedMaterial.ninventorycode,\"label\":EditResultUsedMaterial.jsondata.sinventoryid},ntztodate:{\"value\":EditResultUsedMaterial.ntztodate,\"label\":EditResultUsedMaterial.stztodate},susedquantity:EditResultUsedMaterial.jsondata.nqtyused,scarriergas:EditResultUsedMaterial.jsondata.scarriergas,smobilephase:EditResultUsedMaterial.jsondata.smobilephase,sremarks:EditResultUsedMaterial.jsondata.sremarks,savailablequantity:response.data.inventory.savailablequatity,sunitname:response.data.inventory.sunitname}),ncontrolcode:inputData.ncontrolCode,loading:false,screenName:\"IDS_MATERIAL\",openModal:true,operation:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function deleteTaskRecord(inputData,userInfo){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.selectedRecord.nresultusedtaskcode,userinfo:inputData.userInfo,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\").toString():\"\",nregtypecode:inputData.masterData.defaultRegistrationType.nregtypecode,nregsubtypecode:inputData.masterData.defaultRegistrationSubType.nregsubtypecode,ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/deleteResultUsedTasks\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),loading:false,operation:\"delete\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function fetchTaskRecord(inputData){return function(dispatch){var inputParamData={nresultusedtaskcode:inputData.editRow.nresultusedtaskcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getResultUsedTask\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.EditResultUsedTasks[0].nresultusedtaskcode,selectedRecord:{npreregno:response.data.EditResultUsedTasks[0].npreregno,stestsynonym:inputData.editRow.stestsynonym,sanalysistime:response.data.EditResultUsedTasks[0].jsondata.sanalysistime,smisctime:response.data.EditResultUsedTasks[0].jsondata.smisctime,spreanalysistime:response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,spreparationtime:response.data.EditResultUsedTasks[0].jsondata.spreparationtime,scomments:response.data.EditResultUsedTasks[0].jsondata.scomments,staskprocedure:response.data.EditResultUsedTasks[0].jsondata.staskprocedure,nresultusedtaskcode:response.data.EditResultUsedTasks[0].nresultusedtaskcode},loading:false,screenName:\"IDS_TASK\",openModal:true,operation:\"update\",ncontrolcode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function parameterRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getParameterComments\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputData.masterData),selectedId:response.data.ParameterComments.ntransactionresultcode,selectedRecord:{sresultcomment:response.data.ParameterComments.sresultcomment,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,transactiontestcode:response.data.ParameterComments.ntransactiontestcode,ntransactionresultcode:response.data.ParameterComments.ntransactionresultcode,ntransactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ncontrolcode:inputData.controlcode},loading:false,screenName:\"IDS_PARAMETERCOMMENTS\",openModal:true,operation:\"updateParameterComments\",ncontrolcode:inputData.controlcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function checkListRecord(inputData){return function(dispatch){var inputParamData={ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,napprovalparametercode:inputData.selectedRecord.napprovalparametercode,nchecklistversioncode:inputData.selectedRecord.nchecklistversioncode,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode.toString(),ncontrolcode:inputData.ncontrolcode,userinfo:inputData.userInfo};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getChecklistdesign\",inputParamData).then(function(response){var selectedRecord={};var lsteditedQB=[];selectedRecord={sarno:inputData.selectedRecord.sarno,ssamplearno:inputData.selectedRecord.ssamplearno,npreregno:inputData.selectedRecord.npreregno,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym,ntransactiontestcode:inputData.selectedRecord.ntransactiontestcode,ntransactionresultcode:inputData.selectedRecord.ntransactionresultcode,transactiontestcode:inputData.masterData.RESelectedTest?inputData.masterData.RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\"};response.data.ChecklistData.map(function(checklist){selectedRecord[checklist.nchecklistversionqbcode]={nchecklistqbcode:checklist.nchecklistqbcode,nchecklistversioncode:checklist.nchecklistversioncode,nchecklistversionqbcode:checklist.nchecklistversionqbcode,sdefaultvalue:checklist.sdefaultvalue,sarno:inputData.selectedRecord.sarno,ssamplearno:inputData.selectedRecord.ssamplearno,stestsynonym:inputData.selectedRecord.stestsynonym,sparametersynonym:inputData.selectedRecord.sparametersynonym};lsteditedQB.push(checklist.nchecklistversionqbcode);return null;});response.data.ChecklistData.map(function(checklist){selectedRecord['jsondata']=_objectSpread(_objectSpread({},selectedRecord['jsondata']),{},_defineProperty({},checklist.nchecklistversionqbcode,checklist.sdefaultvalue));return null;});selectedRecord[\"editedQB\"]=lsteditedQB;dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},inputData.masterData),response.data),selectedId:response.data.selectedId,selectedRecord:selectedRecord,loading:false,screenName:\"IDS_CHECKLISTRESULT\",openTemplateModal:true,needSaveButton:inputData.needSaveButton,operation:\"create\",ncontrolCode:inputData.ncontrolcode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode,ndesigntemplatemappingcode){return function(dispatch){var listResultCheckList=[];if(selectedRecord&&selectedRecord.jsondata){selectedRecord.editedQB.map(function(qbcode){return listResultCheckList.push(selectedRecord[qbcode]);});var inputParamData={ntransactionresultcode:selectedRecord.ntransactionresultcode,ntransactiontestcode:selectedRecord.ntransactiontestcode.toString(),transactiontestcode:selectedRecord.transactiontestcode,npreregno:selectedRecord.npreregno,ResultCheckList:{nchecklistversioncode:listResultCheckList[0].nchecklistversioncode,nchecklistqbcode:listResultCheckList[0].nchecklistqbcode,jsondata:selectedRecord.jsondata,npreregno:selectedRecord.npreregno,ntransactionresultcode:selectedRecord.ntransactionresultcode},//jsondata: selectedRecord.jsondata,\nuserinfo:userInfo,nregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,ndesigntemplatemappingcode:ndesigntemplatemappingcode,ncontrolcode:-1};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/createResultEntryChecklist\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:{},templateData:undefined,openTemplateModal:false,openModal:false,loading:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{dispatch({type:DEFAULT_RETURN,payload:{openTemplateModal:false,selectedRecord:{},loading:false,loadEsign:false}});}};}export function defaultTest(inputData,RESelectedTest,RESelectedSample,nregtypecode,nregsubtypecode,ndesigntemplatemappingcode){if(RESelectedTest!==undefined&&RESelectedTest.length>0){return function(dispatch){var inputParamData={userinfo:inputData.userinfo,ntransactiontestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntransactiontestcode;}).join(\",\"):\"\",ntestgrouptestcode:RESelectedTest?RESelectedTest.map(function(test){return test.ntestgrouptestcode;}).join(\",\"):\"\",npreregno:RESelectedTest?RESelectedTest.map(function(preregno){return preregno.npreregno;}).join(\",\"):\"\",//RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\nnregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,//ndesigntemplatemappingcode:ndesigntemplatemappingcode,\nndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,ncontrolcode:inputData.ncontrolcode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateDefaultValue\",inputParamData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{TestParameters:replaceUpdatedObject(response.data.TestParameters,inputData.masterData.TestParameters,'ntransactionresultcode'),RESelectedSubSample:inputData.masterData.RESelectedSubSample}),loading:false,activeTestKey:\"IDS_RESULTS\",openModal:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:false,loadEsign:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTTESTTOCOMPLETE\"}));}}export function getFormula(parameterData,userInfo,masterData,index,selectedRecord){return function(dispatch){var inputParamData={ntransactiontestcode:parameterData.ntransactiontestcode,nformulacode:parameterData.ntestgrouptestformulacode,userinfo:userInfo,npreregno:parameterData.npreregno,ntransactionsamplecode:parameterData.ntransactionsamplecode};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getFormulaInputs\",inputParamData).then(function(response){var validateFormulaMandyFields=response.data.DynamicFormulaFields.map(function(item,index){return{\"idsName\":\"IDS_FILLALLFIELDS\",\"dataField\":index,\"mandatory\":true};});var selectedForumulaInput=[];var selectedForumulaInput1=[];var selectedMandatory=[];selectedRecord.ResultParameter=getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter,parameterData.ntransactionsamplecode,\"ntransactionsamplecode\");response.data.DynamicFormulaFields.map(function(fields,index){var dynamicformulafields={};var selectedTestParameters=getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter,fields.ndynamicformulafieldcode,\"ntestparametercode\");if(selectedTestParameters.length>0){selectedTestParameters=selectedTestParameters.filter(function(element){return element.sresult!==null&&element.sresult!='';});var nisaverageneed=selectedTestParameters.length;var maxResultCode=selectedTestParameters.length>0?Math.max.apply(Math,_toConsumableArray(selectedTestParameters.map(function(o){return o.ntransactionresultcode;}))):-1;// const maxResultCode= Math.max(...(selectedTestParameters.filter(element => {\n//                 return element.sresult !== null && element.sresult !='';\n//               }).map(o => o.ntransactionresultcode)));\nvar paramValue=getRecordBasedOnPrimaryKeyName(selectedTestParameters,maxResultCode,\"ntransactionresultcode\");if(paramValue.length==0){dynamicformulafields.svalues=\"\";dynamicformulafields.sparameter=response.data.DynamicFormulaFields[index].sdescription;//dynamicformulafields.nisaverageneed = 0;\ndynamicformulafields.senableAverage=false;response.data.DynamicFormulaFields[index].nisaverageneed=0;selectedForumulaInput.push(dynamicformulafields);selectedMandatory.push(\"\");}else{if((maxResultCode>=response.data.DynamicFormulaFields[index].ntransactionresultcode&&paramValue.length>0?paramValue[0].sresult!=\"\":false)||(response.data.DynamicFormulaFields[index].svalue!=\"\"&&response.data.DynamicFormulaFields[index].svalue!=null?maxResultCode<=response.data.DynamicFormulaFields[index].ntransactionresultcode&&paramValue.length>0?paramValue[0].sresult!=\"\":false:\"\")){dynamicformulafields.svalues=paramValue[0].sresult;dynamicformulafields.sparameter=response.data.DynamicFormulaFields[index].sdescription;dynamicformulafields.sparameter=response.data.DynamicFormulaFields[index].sdescription;//dynamicformulafields.nisaverageneed = nisaverageneed;\ndynamicformulafields.senableAverage=false;response.data.DynamicFormulaFields[index].nisaverageneed=nisaverageneed;selectedForumulaInput.push(dynamicformulafields);selectedMandatory.push(paramValue[0].sresult);}else{dynamicformulafields.svalues=response.data.DynamicFormulaFields[index].svalue;dynamicformulafields.sparameter=response.data.DynamicFormulaFields[index].sdescription;// dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\ndynamicformulafields.senableAverage=false;selectedForumulaInput.push(dynamicformulafields);selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);}}}else{dynamicformulafields.svalues=response.data.DynamicFormulaFields[index].svalue;dynamicformulafields.sparameter=response.data.DynamicFormulaFields[index].sdescription;// dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\nselectedForumulaInput.push(dynamicformulafields);selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);}return selectedForumulaInput1.push(selectedRecord.ResultParameter.filter(function(x){return x.ntestparametercode===fields.ndynamicformulafieldcode;})[0]);});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),selectedRecord:_objectSpread(_objectSpread({},selectedRecord),{},{parameterData:parameterData,naverageroundingdigits:parameterData.nroundingdigits,sformulacalculationdetail:response.data.query,formulainput:response.data.Formula,resultindex:index,DynamicFormulaFields:response.data.DynamicFormulaFields,//selectedForumulaInput: []\n//  DynamicFormulaFields.map((fields, index) => {\n//     return {\n//         selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\n//     }\n//  });\n// response.data.DynamicFields.map((fields, index) =>\nselectedForumulaInput:selectedForumulaInput,selectedMandatory:selectedMandatory// selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\n// )\n}),validateFormulaMandyFields:validateFormulaMandyFields,loading:false,screenName:\"IDS_RESULTFORMULA\",showFormula:true,operation:\"validate\",showValidate:true}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function calculateFormula(inputDataValue){return function(dispatch){var inputData={ntransactiontestcode:inputDataValue.selectedRecord.parameterData.ntransactiontestcode,ntransactionresultcode:inputDataValue.selectedRecord.parameterData.ntransactionresultcode,npreregno:inputDataValue.selectedRecord.parameterData.npreregno,sformulacalculationcode:inputDataValue.selectedRecord.sformulacalculationdetail,nformulacode:inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,userinfo:inputDataValue.userInfo,dynamicformulafields:inputDataValue.lstDynamicFields};dispatch(initRequest(true));rsapi.post(\"testmaster/calculateFormula\",inputData).then(function(response){// inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n// {\n//     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n//     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n//     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n//     sresult: response.data.Result,\n//     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n//     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n//     parameter: inputDataValue.selectedRecord.parameterData\n// }\ninputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"]=response.data.Result;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable']=true;inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"]=3;inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex]={ngradecode:numericGrade(inputDataValue.selectedRecord.parameterData,parseInt(response.data.Result))};dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},inputDataValue.masterData),selectedRecord:{selectedResultGrade:inputDataValue.selectedResultGrade,ResultParameter:inputDataValue.ResultParameter},loading:false,screenName:\"IDS_RESULTENTRY\",showFormula:false,operation:\"update\",showValidate:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{//toast.warn(error.response.data);\ntoast.warn(error.response.data[\"Result\"]);}});};}export function getREFilterTestData(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestBasedOnCombo\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultFilterStatus:inputData.defaultFilterStatus,defaultRegistrationSubType:inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\nndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,DesignTemplateMappingValue:inputData.DesignTemplateMappingValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getREFilterTemplate(inputData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getTestBasedOnCombo\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread(_objectSpread({},inputData.masterData),response.data),{},{defaultRegistrationSubType:inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\nndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,DesignTemplateMappingValue:inputData.DesignTemplateMappingValue}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function updateTestMethodSource(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/updateTestMethodSource\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{RE_TEST:replaceUpdatedObject(response.data.RE_TEST,masterData.RE_TEST,'ntransactiontestcode')}),loading:false,openModal:false,loadEsign:false// activeTestKey: \"IDS_RESULTS\"\n}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function resultImportFile(inputData,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getImportResultEntry\",inputData).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread({},masterData),loading:false,openModal:false// activeTestKey: \"IDS_RESULTS\"\n}});if(response.data.returnStatus&&response.data.returnStatus!==\"\"){toast.info(response.data.returnStatus);}else{toast.warn(response.data.returnStatus);}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function validateEsignCredentialComplete(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"login/validateEsignCredential\",inputParam.inputData).then(function(response){if(response.data===\"Success\"){var methodUrl=\"performaction\";inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"]=inputParam.inputData.userinfo;if(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]&&inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]){delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];}if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"testinitiate\"){dispatch(testStart(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam.inputData.userinfo));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"complete\"){dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam.inputData.userinfo));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"default\"){dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"],inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"],inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteInstrument\"){dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"createMethod\"){dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"deleteTask\"){dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));}else if(inputParam[\"screenData\"][\"inputParam\"][\"operation\"]===\"updateParameterComments\"){dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));}else if(inputParam[\"screenData\"][\"operation\"]===\"updatechecklist\"){var _inputParam$screenDat=inputParam[\"screenData\"],selectedRecord=_inputParam$screenDat.selectedRecord,userInfo=_inputParam$screenDat.userInfo,nregtypecode=_inputParam$screenDat.nregtypecode,nregsubtypecode=_inputParam$screenDat.nregsubtypecode,ndesigntemplatemappingcode=_inputParam$screenDat.ndesigntemplatemappingcode;delete selectedRecord.esignpassword;delete selectedRecord.esigncomments;delete selectedRecord.esignreason;delete selectedRecord.agree;delete inputParam.inputData.password;userInfo=inputParam.inputData.userinfo;dispatch(onSaveCheckList(selectedRecord,userInfo,nregtypecode,nregsubtypecode,ndesigntemplatemappingcode));}}}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getMeanCalculationTestParameter(meanParam){return function(dispatch){dispatch(initRequest(true));var inputData={npreregno:meanParam.selectedRecord.npreregno,ntransactionresultcode:meanParam.selectedRecord.ntransactionresultcode,userinfo:meanParam.userInfo};return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\",inputData).then(function(response){var list=response.data||[];// const optionList = [];\n// list.map(item=>{\n//     console.log(\"item:\", item);\n//         optionList.push({item:item, \n//                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n//                         value:item.ntransactionresultcode})\n//     })\n// const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\ndispatch({type:DEFAULT_RETURN,payload:{loading:false,openModal:true,meanTestParameterList:list,screenName:\"IDS_MEANPARAMETER\",ncontrolcode:meanParam.ncontrolCode,selectedTestParameterMean:meanParam.selectedRecord}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/export function getAverageResult(parameterData,index,selectedForumulaInput,userInfo,masterData,selectedRecord){return function(dispatch){var selectedTestParameters=selectedRecord.ResultParameter.filter(function(element){return element.editable==true;});selectedTestParameters=getRecordBasedOnPrimaryKeyName(selectedTestParameters,selectedRecord.parameterData.ntransactionsamplecode,\"ntransactionsamplecode\");selectedTestParameters=getRecordBasedOnPrimaryKeyName(selectedTestParameters,parameterData.ndynamicformulafieldcode,\"ntestparametercode\");var ResultParameterNew=[];if(selectedTestParameters.length>0){selectedTestParameters.map(function(Parameter){var resultParameterValues={};resultParameterValues.ntransactionresultcode=Parameter.ntransactionresultcode;resultParameterValues.sresult=Parameter.sresult;resultParameterValues.ntestparametercode=Parameter.ntestparametercode;ResultParameterNew.push(resultParameterValues);});}var inputParamData={naverageroundingdigits:selectedRecord.naverageroundingdigits,ntransactiontestcode:parameterData.ntransactiontestcode,ntestparametercode:parameterData.ndynamicformulafieldcode,userinfo:userInfo,ntransactionsamplecode:parameterData.ntransactionsamplecode,ResultParameter:ResultParameterNew};dispatch(initRequest(true));rsapi.post(\"resultentrybysample/getAverageResult\",inputParamData).then(function(response){selectedForumulaInput[index].soldvalue=selectedForumulaInput[index].svalues;selectedForumulaInput[index].svalues=response.data.AverageResult.sresult;selectedForumulaInput[index].senableAverage=true;//selectedForumulaInput[index].svaluesold = \ndispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),response.data),selectedRecord:_objectSpread(_objectSpread({},selectedRecord),{},{selectedForumulaInput:selectedForumulaInput}),// selectedRecord: {\n//     ...selectedRecord,\n//     parameterData: parameterData,\n//     sformulacalculationdetail: response.data.query,\n//     formulainput: response.data.Formula,\n//     resultindex: index,\n//     selectedForumulaInput,\n//     selectedMandatory\n// },\n// validateFormulaMandyFields,\nloading:false,screenName:\"IDS_RESULTFORMULA\",showFormula:true,operation:\"validate\",showValidate:true}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","realRegSubTypeValue","ndesigntemplatemappingcode","nneedtemplatebasedflow","activeName","dataStateName","post","checkBoxOperation","then","response","data","oldSelectedTest","RESelectedTest","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedMaterial","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","RegistrationComment","RegistrationSampleAttachment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","oldSelectedSubSample","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","join","getTestChildTabREDetail","getTestREDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","showFilter","activeSampleTab","subSample","responseData","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","activeSubSampleTab","activeTestTab","screenName","console","log","getSampleChildTabREDetail","url","activeTabIndex","activeTabId","getRERegistrationType","defaultSampleType","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","predefDefaultFlag","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","formatMessage","id","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","testStart","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","jsondata","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","sarno","ssamplearno","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","addREMaterial","nsectioncode","materialTypeMap","MaterialType","materialType","materialCatMap","MaterialCategory","materialCat","materialMap","Material","material","materialInventoryMap","MaterialInventory","materialInventory","ssectionname","nmaterialtypecode","nmaterialcatcode","nmaterialcode","nmaterialinventorycode","sunitname","savailablequantity","savailablequatity","addResultUsedMaterailId","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","getAvailableMaterialQuantity","inventory","Unit","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","fetchMaterialRecord","nresultusedmaterialcode","EditResultUsedMaterial","label","smaterialtypename","nmaterialcategorycode","smaterialcatname","smaterialname","ninventorycode","sinventoryid","susedquantity","nqtyused","scarriergas","smobilephase","sremarks","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","staskprocedure","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","selectedForumulaInput","selectedForumulaInput1","selectedMandatory","fields","dynamicformulafields","selectedTestParameters","ndynamicformulafieldcode","element","nisaverageneed","maxResultCode","Math","max","o","paramValue","svalues","sparameter","sdescription","senableAverage","svalue","ntestparametercode","naverageroundingdigits","nroundingdigits","sformulacalculationdetail","query","formulainput","Formula","resultindex","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","DesignTemplateMappingValue","getREFilterTemplate","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","esignreason","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean","getAverageResult","ResultParameterNew","Parameter","resultParameterValues","soldvalue","AverageResult"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat, filterRecordBasedOnPrimaryKeyName, reArrangeArrays\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            //nneedsubsample: inputData.masterData.nneedsubsample,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.nneedtemplatebasedflow\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    sortData(response.data);\r\n                    // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\r\n                    // responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n\r\n\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.RESelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \" sampleChangeDataState\"\r\n                                break;\r\n\r\n\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n\r\n                        //getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.RESelectedSample.length > 0 ? inputData.RESelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            //let isGrandChildGetRequired = false;\r\n            let oldSelectedSubSample = inputData.masterData.RESelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let masterData = { ...inputData.masterData, RESelectedSample, RESelectedSubSample, RESelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey, masterData\r\n                }\r\n\r\n                if (RESelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                        ]\r\n                    }\r\n                    dispatch(getTestChildTabREDetail(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"RE_TEST\"]\r\n                    }\r\n                    dispatch(getTestREDetail(inputData, true));\r\n                }\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    // RESelectedSample: inputData.RESelectedSample,\r\n                    // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\r\n                    RESelectedTest: TestSelected ? TestSelected : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length > 0 ? [inputData.masterData.RE_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RE_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getTestREDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode\r\n                    // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.RESelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            // case \"IDS_SAMPLECOMMENTS\":\r\n                            //         RegistrationTestComment = keepOld ? inputData.masterData.RegistrationComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationComment, npreregno, \"npreregno\")\r\n                            //         activeName = \"RegistrationComment\"\r\n                            //         dataStateName = \"sampleChangeDataState\"\r\n                            //         break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedTest: [testList[0]],\r\n                            RE_TEST: testList,\r\n                            // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            // case \"IDS_TESTCOMMENTS\":\r\n                            //     dbData = response.data.RegistrationTestComment || []\r\n                            //     list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                            //     RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                            //     break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RE_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            // let isGrandChildGetRequired = false;\r\n            // if (TestSelected.length > 0) {\r\n            //     isGrandChildGetRequired = true;\r\n            // } else {\r\n            //     isGrandChildGetRequired = false;\r\n            // }\r\n\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //     ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ?\r\n                    inputData[\"statusNone\"] ?\r\n                        getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') :\r\n                        filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        activeTestTab: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                url = \"comments/getSampleComment\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"ResultUsedMaterial\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    //sortData(response.data,'ascending','ntransactiontestcode');\r\n                    //sortData(response.data,'ascending','ntestattachmentcode');\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    //responseData = sortData(responseData)\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            defaultSampleType: inputData.defaultSampleType,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            //defaultFilterStatus:inputData.masterData.defaultFilterStatus,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApproveConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: inputParamData.masterData.nneedsubsample })\r\n            .then(response => {\r\n                let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                //sortData(response.data)\r\n                sortData(response.data, 'ascending', 'ntransactionresultcode')\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let TestList = [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        let predefDefaultFlag = false;\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n                            predefDefaultFlag = false;\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        if (!predefDefaultFlag) {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n                                        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                        //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                        //         undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (!predefDefaultFlag) {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n\r\n                                    }\r\n                                    //return null;\r\n\r\n                                });\r\n                            //return null;\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            // undefined, undefined).get(\"OptionList\");\r\n                        });\r\n\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                //ntransactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/testInitiated\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n                    RESelectedTest2 = replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        // ...inputData.masterData,\r\n                        // //...responseData,\r\n                        // //RE_SAMPLE,\r\n                        // //RE_SUBSAMPLE,\r\n                        // //RESelectedSubSample,\r\n                        // searchedSample,\r\n                        // RE_TEST:replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n                        // //RESelectedSample,\r\n                        // //RESelectedTest: RESelectedTest2,\r\n                        // //RE_TEST: responseData[\"RE_TEST\"]\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.jsondata.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo,ntestgrouptestcode:inputData.masterData.RESelectedTest.ntestgrouptestcode\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function addREMaterial(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo, nsectioncode: inputData.test.nsectioncode })\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsectioncode: inputData.test.nsectioncode,\r\n                            ssectionname: inputData.test.ssectionname,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            npreregno: inputData.test.npreregno,\r\n                            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\r\n                            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\r\n                            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\r\n                            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\r\n                        },\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedMaterailId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialCategoryByType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {},\r\n                        },\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialByCategory(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcode: materialMap.get(\"OptionList\")[0],\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\r\n                            savailablequantity: response.data.MaterialInventory[0].savailablequatity,\r\n                            sunitname: response.data.MaterialInventory[0].sunitname\r\n                        },\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialInvertoryByMaterial(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\r\n            nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            sunitname: response.data.MaterialInventory[0].sunitname,\r\n                            savailablequantity: response.data.MaterialInventory[0].savailablequatity\r\n                        },\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getAvailableMaterialQuantity(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\r\n            nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.jsondata.Unit\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function deleteInstrumentRecord(inputData) {\r\n//     return function (dispatch) {\r\n//         let inputParamData = {\r\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n//             userinfo: inputData.userInfo,\r\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n//             .then(response => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         masterData: {\r\n//                             ...inputData.masterData,\r\n//                             ...response.data\r\n//                         },\r\n//                         loading: false,\r\n//                         operation: \"delete\",\r\n//                         openModal: false,\r\n//                         loadEsign: false\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchMaterialRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\r\n            nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        selectedRecord: {\r\n                            ...EditResultUsedMaterial,\r\n                            stestsynonym: inputData.editRow.jsondata.stestsynonym,\r\n                            npreregno: EditResultUsedMaterial.npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            nmaterialtypecode: {\r\n                                label: EditResultUsedMaterial.jsondata.smaterialtypename,\r\n                                value: EditResultUsedMaterial.nmaterialtypecode\r\n                            },\r\n                            nmaterialcatcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcategorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\r\n                            },\r\n                            nmaterialcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialname,\r\n                            },\r\n                            nmaterialinventorycode: {\r\n                                \"value\": EditResultUsedMaterial.ninventorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.sinventoryid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": EditResultUsedMaterial.ntztodate,\r\n                                \"label\": EditResultUsedMaterial.stztodate\r\n                            },\r\n                            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\r\n                            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\r\n                            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\r\n                            sremarks: EditResultUsedMaterial.jsondata.sremarks,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.sunitname\r\n                        },\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\r\n                            staskprocedure: response.data.EditResultUsedTasks[0].jsondata.staskprocedure,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    sarno: inputData.selectedRecord.sarno,\r\n                    ssamplearno: inputData.selectedRecord.ssamplearno,\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue,\r\n                        sarno: inputData.selectedRecord.sarno,\r\n                        ssamplearno: inputData.selectedRecord.ssamplearno,\r\n                        stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                        sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord['jsondata'] = {\r\n                        ...selectedRecord['jsondata'],\r\n                        [checklist.nchecklistversionqbcode]: checklist.sdefaultvalue\r\n                    }\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.jsondata) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: {\r\n                    nchecklistversioncode: listResultCheckList[0].nchecklistversioncode,\r\n                    nchecklistqbcode: listResultCheckList[0].nchecklistqbcode,\r\n                    jsondata: selectedRecord.jsondata,\r\n                    npreregno: selectedRecord.npreregno,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                },\r\n                //jsondata: selectedRecord.jsondata,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                //ndesigntemplatemappingcode:ndesigntemplatemappingcode,\r\n                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n            npreregno: parameterData.npreregno,\r\n            ntransactionsamplecode: parameterData.ntransactionsamplecode\r\n        }\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n\r\n                let selectedForumulaInput = [];\r\n                let selectedForumulaInput1 = [];\r\n                let selectedMandatory = [];\r\n                selectedRecord.ResultParameter = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\r\n\r\n                response.data.DynamicFormulaFields.map((fields, index) => {\r\n                    let dynamicformulafields = {};\r\n                    let selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedRecord.ResultParameter, fields.ndynamicformulafieldcode, \"ntestparametercode\");\r\n\r\n                    if (selectedTestParameters.length > 0) {\r\n\r\n                        selectedTestParameters = selectedTestParameters.filter(element => {\r\n                            return element.sresult !== null && element.sresult != ''\r\n                        });\r\n\r\n                        const nisaverageneed = selectedTestParameters.length;\r\n\r\n                        const maxResultCode = selectedTestParameters.length > 0 ? Math.max(...selectedTestParameters.map(o => o.ntransactionresultcode)) : -1;\r\n\r\n\r\n                        // const maxResultCode= Math.max(...(selectedTestParameters.filter(element => {\r\n                        //                 return element.sresult !== null && element.sresult !='';\r\n                        //               }).map(o => o.ntransactionresultcode)));\r\n\r\n                        const paramValue = getRecordBasedOnPrimaryKeyName(selectedTestParameters, maxResultCode, \"ntransactionresultcode\");\r\n                        if (paramValue.length == 0) {\r\n                            dynamicformulafields.svalues = \"\";\r\n                            dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                            //dynamicformulafields.nisaverageneed = 0;\r\n                            dynamicformulafields.senableAverage = false;\r\n                            response.data.DynamicFormulaFields[index].nisaverageneed = 0; \r\n                            selectedForumulaInput.push(dynamicformulafields);\r\n                            selectedMandatory.push(\"\");\r\n\r\n                        }\r\n                        else {\r\n                            if ((maxResultCode >= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false)\r\n                                || (response.data.DynamicFormulaFields[index].svalue != \"\" && response.data.DynamicFormulaFields[index].svalue != null\r\n                                    ? maxResultCode <= response.data.DynamicFormulaFields[index].ntransactionresultcode && paramValue.length > 0 ? paramValue[0].sresult != \"\" : false : \"\")) {\r\n                                dynamicformulafields.svalues = paramValue[0].sresult;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                //dynamicformulafields.nisaverageneed = nisaverageneed;\r\n                                dynamicformulafields.senableAverage = false;\r\n                                response.data.DynamicFormulaFields[index].nisaverageneed = nisaverageneed; \r\n                                selectedForumulaInput.push(dynamicformulafields);\r\n                                selectedMandatory.push(paramValue[0].sresult);\r\n                            }\r\n                            else {\r\n                                dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\r\n                                dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                                // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\r\n                                dynamicformulafields.senableAverage = false;\r\n                                selectedForumulaInput.push(dynamicformulafields);\r\n                                selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        dynamicformulafields.svalues = response.data.DynamicFormulaFields[index].svalue;\r\n                        dynamicformulafields.sparameter = response.data.DynamicFormulaFields[index].sdescription;\r\n                        // dynamicformulafields.nisaverageneed = response.data.DynamicFormulaFields[index].nisaverageneed;\r\n                        selectedForumulaInput.push(dynamicformulafields);\r\n                        selectedMandatory.push(response.data.DynamicFormulaFields[index].svalue);\r\n                    }\r\n                    return selectedForumulaInput1.push(selectedRecord.ResultParameter.filter(x => x.ntestparametercode === fields.ndynamicformulafieldcode)[0])\r\n\r\n\r\n                });\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            naverageroundingdigits: parameterData.nroundingdigits,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            DynamicFormulaFields: response.data.DynamicFormulaFields,\r\n                            //selectedForumulaInput: []\r\n                            //  DynamicFormulaFields.map((fields, index) => {\r\n                            //     return {\r\n                            //         selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\r\n\r\n                            //     }\r\n\r\n                            //  });\r\n                            // response.data.DynamicFields.map((fields, index) =>\r\n                            selectedForumulaInput,\r\n                            selectedMandatory\r\n                            // selectedForumulaInput:  selectedRecord.ResultParameter.filter(x=>x.ntestparametercode===response.data.DynamicFormulaFields)\r\n                            // )\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getREFilterTemplate(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"testinitiate\") {\r\n                        dispatch(testStart(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    }\r\n                    else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.esignreason;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/\r\nexport function getAverageResult(parameterData, index, selectedForumulaInput, userInfo, masterData, selectedRecord) {\r\n    return function (dispatch) {\r\n    \r\n        let selectedTestParameters = selectedRecord.ResultParameter.filter(element => {\r\n            return element.editable == true;\r\n        });\r\n\r\n        selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, selectedRecord.parameterData.ntransactionsamplecode, \"ntransactionsamplecode\");\r\n        selectedTestParameters = getRecordBasedOnPrimaryKeyName(selectedTestParameters, parameterData.ndynamicformulafieldcode, \"ntestparametercode\");\r\n\r\n        let ResultParameterNew = [];\r\n        if (selectedTestParameters.length > 0) {\r\n            selectedTestParameters.map(Parameter => {\r\n                let resultParameterValues = {};\r\n                resultParameterValues.ntransactionresultcode = Parameter.ntransactionresultcode;\r\n                resultParameterValues.sresult = Parameter.sresult;\r\n                resultParameterValues.ntestparametercode = Parameter.ntestparametercode;\r\n                ResultParameterNew.push(resultParameterValues);\r\n            })\r\n\r\n        }\r\n\r\n        let inputParamData = {\r\n            naverageroundingdigits: selectedRecord.naverageroundingdigits,\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            ntestparametercode: parameterData.ndynamicformulafieldcode,\r\n            userinfo: userInfo,\r\n            ntransactionsamplecode: parameterData.ntransactionsamplecode,\r\n            ResultParameter: ResultParameterNew\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAverageResult\", inputParamData)\r\n            .then(response => {\r\n                selectedForumulaInput[index].soldvalue =  selectedForumulaInput[index].svalues;\r\n                selectedForumulaInput[index].svalues = response.data.AverageResult.sresult;\r\n                selectedForumulaInput[index].senableAverage = true;\r\n                //selectedForumulaInput[index].svaluesold = \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            selectedForumulaInput\r\n                        },\r\n                        // selectedRecord: {\r\n                        //     ...selectedRecord,\r\n                        //     parameterData: parameterData,\r\n                        //     sformulacalculationdetail: response.data.query,\r\n                        //     formulainput: response.data.Formula,\r\n                        //     resultindex: index,\r\n                        //     selectedForumulaInput,\r\n                        //     selectedMandatory\r\n                        // },\r\n                        // validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}