{"ast":null,"code":"import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{sortData,constructOptionList,rearrangeDateFormat}from'../components/CommonScript';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';export function getHoildaysYear(screenName,operation,primaryKeyName,masterData,userInfo,ncontrolCode){return function(dispatch){var urlArray=[];if(operation===\"update\"){var _rsapi$post;var HolidayYear=rsapi.post(\"/holidayplanner/getYearByID\",(_rsapi$post={},_defineProperty(_rsapi$post,primaryKeyName,masterData.selectedYear[primaryKeyName]),_defineProperty(_rsapi$post,\"userinfo\",userInfo),_rsapi$post));urlArray=[HolidayYear];}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};if(operation===\"update\"){selectedRecord=response[0].data;selectedRecord[\"syear\"]=new Date(response[0].data.syear);}dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,operation:operation,screenName:screenName,openModal:true,ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}export function selectCheckBoxYear(HolidayYear,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/holidayplanner/getSelectionAllHolidayPlanner\",{'userinfo':userInfo,\"nyearcode\":HolidayYear.nyearcode}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}export function getCommonHolidays(screenName,operation,masterData,userInfo,ncontrolCode){return function(dispatch){var urlArray=[];if(operation===\"update\"){var CommonHolidays=rsapi.post(\"/holidayplanner/getCommonHolidaysByID\",{\"ncommonholidaycode\":masterData.CommonHolidays[0].ncommonholidaycode,\"nyearcode\":masterData.CommonHolidays[0].nyearcode,\"nholidayYearVersion\":masterData.CommonHolidays[0].nholidayyearversion,\"userinfo\":userInfo});urlArray=[CommonHolidays];}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:operation===\"update\"?response[0].data:undefined,operation:operation,screenName:screenName,openChildModal:true,ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}//export function getPublicHolidays(screenName, operation, primaryKeyName,rowitem, masterData, userInfo, ncontrolCode) {\nexport function getPublicHolidays(fetchRecord){return function(dispatch){var urlArray=[];var selectedId=null;var selectedRecord={// \"ddate\": new Date(),\n\"ntzddate\":{\"value\":fetchRecord.userInfo.ntimezonecode,\"label\":fetchRecord.userInfo.stimezoneid},\"stzddate\":fetchRecord.userInfo.stimezoneid};if(fetchRecord.operation!==\"update\"){// const yearVersion = rsapi.post(\"/holidayplanner/getYearVersionByID\", { \"nholidayyearversion\": fetchRecord.masterData.selectedYearVersion.nholidayyearversion, \"nyearcode\": fetchRecord.masterData.selectedYearVersion.nyearcode, \"userinfo\": fetchRecord.userInfo });\nvar timeZoneService=rsapi.post(\"timezone/getTimeZone\");urlArray=[timeZoneService];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var timeZoneMap=constructOptionList(response[0].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,true);var timeZoneList=timeZoneMap.get(\"OptionList\");dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,operation:fetchRecord.operation,screenName:\"IDS_PUBLICHOLIDAYS\",timeZoneList:timeZoneList||[],openChildModal:true,ncontrolCode:fetchRecord.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}else{// if (fetchRecord.operation === \"update\") {\nvar PublicHolidays=rsapi.post(\"/holidayplanner/getPublicHolidaysByID\",{\"npublicholidaycode\":fetchRecord.editRow.npublicholidaycode,\"nholidayYearVersion\":fetchRecord.editRow.nholidayyearversion,\"nyearcode\":fetchRecord.editRow.nyearcode,\"userinfo\":fetchRecord.userInfo});var _timeZoneService=rsapi.post(\"timezone/getTimeZone\");urlArray=[_timeZoneService,PublicHolidays];selectedId=fetchRecord.editRow.npublicholidaycode;dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var timeZoneMap1=constructOptionList(response[0].data||[],\"ntimezonecode\",\"stimezoneid\",undefined,undefined,true);var timeZoneList1=timeZoneMap1.get(\"OptionList\");var timeZone=[];if(fetchRecord.operation===\"update\"){selectedRecord=response[1].data;timeZone.push({\"value\":response[1].data[\"ntzddate\"],\"label\":response[1].data[\"stzddate\"]});selectedRecord[\"ntzddate\"]=timeZone[0];selectedRecord[\"stzddate\"]=timeZone[0].label;selectedRecord[\"ddate\"]=rearrangeDateFormat(fetchRecord.userInfo,response[1].data[\"sdate\"]);}dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,operation:fetchRecord.operation,screenName:\"IDS_PUBLICHOLIDAYS\",timeZoneList:timeZoneList1||[],openChildModal:true,ncontrolCode:fetchRecord.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}};}export function sendApproveYearVersion(nYearCode,nHolidayVersion,userInfo){return function(dispatch){var urlArray=[];var yearVersion=rsapi.post(\"/holidayplanner/ApproveYearVersion\",{\"nholidayYearVersion\":nHolidayVersion,\"nyearcode\":nYearCode,\"userinfo\":userInfo});urlArray=[yearVersion];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}export function getCommonAndPublicHolidays(nHolidayYearVersion,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/holidayplanner/getSelectedCommonAndPublicHolidays\",{'nholidayYearVersion':nHolidayYearVersion.version.nholidayyearversion,\"nyearcode\":nHolidayYearVersion.version.nyearcode,\"userinfo\":nHolidayYearVersion.userInfo}).then(function(response){masterData=_objectSpread(_objectSpread({},nHolidayYearVersion.masterData),{},{CommonHolidays:response.data.CommonHolidays,PublicHolidays:response.data.PublicHolidays,selectedYearVersion:nHolidayYearVersion.version,CurrentYearVersion:nHolidayYearVersion.version.nholidayyearversion});sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{// CommonHolidays: response[0].data, PublicHolidays: response[0].data, \n// CurrentYearVersion: response[\"CurrentYearVersion\"], loading:false\nmasterData:masterData,loading:false,dataState:undefined}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/HolidayPlannerAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","rearrangeDateFormat","toast","Axios","initRequest","intl","getHoildaysYear","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolCode","dispatch","urlArray","HolidayYear","post","selectedYear","all","then","response","selectedRecord","data","Date","syear","type","payload","openModal","loading","catch","error","status","message","warn","formatMessage","id","selectCheckBoxYear","nyearcode","getCommonHolidays","CommonHolidays","ncommonholidaycode","nholidayyearversion","undefined","openChildModal","getPublicHolidays","fetchRecord","selectedId","ntimezonecode","stimezoneid","timeZoneService","timeZoneMap","timeZoneList","get","PublicHolidays","editRow","npublicholidaycode","timeZoneMap1","timeZoneList1","timeZone","push","label","sendApproveYearVersion","nYearCode","nHolidayVersion","yearVersion","getCommonAndPublicHolidays","nHolidayYearVersion","version","selectedYearVersion","CurrentYearVersion","dataState"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getHoildaysYear(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        if (operation === \"update\") {\r\n            const HolidayYear = rsapi.post(\"/holidayplanner/getYearByID\", { [primaryKeyName]: masterData.selectedYear[primaryKeyName], \"userinfo\": userInfo });\r\n            urlArray = [HolidayYear];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                if (operation === \"update\") {\r\n                    selectedRecord = response[0].data;\r\n                    selectedRecord[\"syear\"] = new Date(response[0].data.syear);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openModal: true, ncontrolCode: ncontrolCode, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function selectCheckBoxYear(HolidayYear, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/holidayplanner/getSelectionAllHolidayPlanner\", { 'userinfo': userInfo, \"nyearcode\": HolidayYear.nyearcode })\r\n\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCommonHolidays(screenName, operation, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        if (operation === \"update\") {\r\n            const CommonHolidays = rsapi.post(\"/holidayplanner/getCommonHolidaysByID\", { \"ncommonholidaycode\": masterData.CommonHolidays[0].ncommonholidaycode, \"nyearcode\": masterData.CommonHolidays[0].nyearcode, \"nholidayYearVersion\": masterData.CommonHolidays[0].nholidayyearversion, \"userinfo\": userInfo });\r\n            urlArray = [CommonHolidays];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: operation === \"update\" ? response[0].data : undefined,\r\n                        operation: operation,\r\n                        screenName: screenName,\r\n                        openChildModal: true, ncontrolCode: ncontrolCode, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n//export function getPublicHolidays(screenName, operation, primaryKeyName,rowitem, masterData, userInfo, ncontrolCode) {\r\nexport function getPublicHolidays(fetchRecord) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n\r\n        let selectedRecord = {\r\n            // \"ddate\": new Date(),\r\n            \"ntzddate\": {\r\n                \"value\": fetchRecord.userInfo.ntimezonecode,\r\n                \"label\": fetchRecord.userInfo.stimezoneid\r\n            },\r\n            \"stzddate\": fetchRecord.userInfo.stimezoneid\r\n        };\r\n\r\n        if (fetchRecord.operation !== \"update\") {\r\n\r\n            // const yearVersion = rsapi.post(\"/holidayplanner/getYearVersionByID\", { \"nholidayyearversion\": fetchRecord.masterData.selectedYearVersion.nholidayyearversion, \"nyearcode\": fetchRecord.masterData.selectedYearVersion.nyearcode, \"userinfo\": fetchRecord.userInfo });\r\n\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray = [timeZoneService];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord,\r\n                            operation: fetchRecord.operation,\r\n                            screenName: \"IDS_PUBLICHOLIDAYS\",\r\n                            timeZoneList: timeZoneList || [],\r\n                            openChildModal: true, ncontrolCode: fetchRecord.ncontrolCode, loading: false,\r\n                            selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            // if (fetchRecord.operation === \"update\") {\r\n\r\n            const PublicHolidays = rsapi.post(\"/holidayplanner/getPublicHolidaysByID\", { \"npublicholidaycode\": fetchRecord.editRow.npublicholidaycode, \"nholidayYearVersion\": fetchRecord.editRow.nholidayyearversion, \"nyearcode\": fetchRecord.editRow.nyearcode, \"userinfo\": fetchRecord.userInfo });\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray = [timeZoneService, PublicHolidays];\r\n            selectedId = fetchRecord.editRow.npublicholidaycode;\r\n\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                    const timeZoneMap1 = constructOptionList(response[0].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n                    const timeZoneList1 = timeZoneMap1.get(\"OptionList\");\r\n\r\n                    let timeZone = [];\r\n\r\n                    if (fetchRecord.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n\r\n                        timeZone.push({ \"value\": response[1].data[\"ntzddate\"], \"label\": response[1].data[\"stzddate\"] });\r\n\r\n                        selectedRecord[\"ntzddate\"] = timeZone[0];\r\n                        selectedRecord[\"stzddate\"] = timeZone[0].label;\r\n                        selectedRecord[\"ddate\"] = rearrangeDateFormat(fetchRecord.userInfo,response[1].data[\"sdate\"]);\r\n\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord,\r\n                            operation: fetchRecord.operation,\r\n                            screenName: \"IDS_PUBLICHOLIDAYS\",\r\n                            timeZoneList: timeZoneList1 || [],\r\n                            openChildModal: true, ncontrolCode: fetchRecord.ncontrolCode, loading: false,\r\n                            selectedId\r\n                        }\r\n                    });\r\n                })\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\nexport function sendApproveYearVersion(nYearCode, nHolidayVersion, userInfo) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n\r\n        const yearVersion = rsapi.post(\"/holidayplanner/ApproveYearVersion\", { \"nholidayYearVersion\": nHolidayVersion, \"nyearcode\": nYearCode, \"userinfo\": userInfo });\r\n        urlArray = [yearVersion];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getCommonAndPublicHolidays(nHolidayYearVersion, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/holidayplanner/getSelectedCommonAndPublicHolidays\", { 'nholidayYearVersion': nHolidayYearVersion.version.nholidayyearversion, \"nyearcode\": nHolidayYearVersion.version.nyearcode, \"userinfo\": nHolidayYearVersion.userInfo })\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...nHolidayYearVersion.masterData,\r\n                    CommonHolidays: response.data.CommonHolidays, PublicHolidays: response.data.PublicHolidays,\r\n                    selectedYearVersion: nHolidayYearVersion.version,\r\n                    CurrentYearVersion: nHolidayYearVersion.version.nholidayyearversion\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // CommonHolidays: response[0].data, PublicHolidays: response[0].data, \r\n                        // CurrentYearVersion: response[\"CurrentYearVersion\"], loading:false\r\n                        masterData, loading: false, dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}