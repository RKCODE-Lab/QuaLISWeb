{"ast":null,"code":"import { chainCommands, exitCode, newlineInCode, createParagraphNear, liftEmptyBlock, splitBlockKeepMarks, deleteSelection, joinBackward, selectNodeBackward } from 'prosemirror-commands';\nimport { undo, redo } from 'prosemirror-history';\nimport { undoInputRule } from 'prosemirror-inputrules';\nimport { splitListItemKeepMarks } from '../lists';\nimport { bold, italic, underline } from './commands';\nimport { toggleInlineFormat } from './../inline-style';\nvar mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false; // https://github.com/ProseMirror/prosemirror-example-setup/blob/master/src/keymap.js\n\nexport var buildKeymap = function buildKeymap(schema) {\n  var keys = {};\n  keys['Mod-z'] = undo;\n  keys['Shift-Mod-z'] = redo; // tslint:disable-next-line:no-string-literal\n\n  keys['Backspace'] = chainCommands(undoInputRule, deleteSelection, joinBackward, selectNodeBackward); // tslint:disable-next-line:no-string-literal\n\n  keys['Enter'] = chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlockKeepMarks);\n\n  if (!mac) {\n    keys['Mod-y'] = redo;\n  }\n\n  if (schema.marks.strong) {\n    keys['Mod-b'] = toggleInlineFormat(bold);\n  }\n\n  if (schema.marks.em) {\n    keys['Mod-i'] = toggleInlineFormat(italic);\n  }\n\n  if (schema.marks.underline) {\n    keys['Mod-u'] = toggleInlineFormat(underline);\n  }\n\n  if (schema.nodes.hard_break) {\n    var br_1 = schema.nodes.hard_break;\n    var cmd = chainCommands(exitCode, function (state, dispatch) {\n      dispatch(state.tr.replaceSelectionWith(br_1.create()).scrollIntoView());\n      return true;\n    });\n    keys['Shift-Enter'] = cmd;\n  }\n\n  return keys;\n};\nexport var buildListKeymap = function buildListKeymap(schema) {\n  var keys = {};\n\n  if (schema.nodes.list_item) {\n    // tslint:disable-next-line:no-string-literal\n    keys['Enter'] = splitListItemKeepMarks(schema.nodes.list_item);\n  }\n\n  return keys;\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/node_modules/@progress/kendo-editor-common/dist/es/config/keymap.js"],"names":["chainCommands","exitCode","newlineInCode","createParagraphNear","liftEmptyBlock","splitBlockKeepMarks","deleteSelection","joinBackward","selectNodeBackward","undo","redo","undoInputRule","splitListItemKeepMarks","bold","italic","underline","toggleInlineFormat","mac","navigator","test","platform","buildKeymap","schema","keys","marks","strong","em","nodes","hard_break","br_1","cmd","state","dispatch","tr","replaceSelectionWith","create","scrollIntoView","buildListKeymap","list_item"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,aAAlC,EAAiDC,mBAAjD,EAAsEC,cAAtE,EAAsFC,mBAAtF,EAA2GC,eAA3G,EAA4HC,YAA5H,EAA0IC,kBAA1I,QAAoK,sBAApK;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,sBAAT,QAAuC,UAAvC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,QAAwC,YAAxC;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA,IAAIC,GAAG,GAAG,OAAOC,SAAP,KAAqB,WAArB,GAAmC,MAAMC,IAAN,CAAWD,SAAS,CAACE,QAArB,CAAnC,GAAoE,KAA9E,C,CACA;;AACA,OAAO,IAAIC,WAAW,GAAG,SAAdA,WAAc,CAAUC,MAAV,EAAkB;AACvC,MAAIC,IAAI,GAAG,EAAX;AACAA,EAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBd,IAAhB;AACAc,EAAAA,IAAI,CAAC,aAAD,CAAJ,GAAsBb,IAAtB,CAHuC,CAIvC;;AACAa,EAAAA,IAAI,CAAC,WAAD,CAAJ,GAAoBvB,aAAa,CAACW,aAAD,EAAgBL,eAAhB,EAAiCC,YAAjC,EAA+CC,kBAA/C,CAAjC,CALuC,CAMvC;;AACAe,EAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBvB,aAAa,CAACE,aAAD,EAAgBC,mBAAhB,EAAqCC,cAArC,EAAqDC,mBAArD,CAA7B;;AACA,MAAI,CAACY,GAAL,EAAU;AACNM,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBb,IAAhB;AACH;;AACD,MAAIY,MAAM,CAACE,KAAP,CAAaC,MAAjB,EAAyB;AACrBF,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBP,kBAAkB,CAACH,IAAD,CAAlC;AACH;;AACD,MAAIS,MAAM,CAACE,KAAP,CAAaE,EAAjB,EAAqB;AACjBH,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBP,kBAAkB,CAACF,MAAD,CAAlC;AACH;;AACD,MAAIQ,MAAM,CAACE,KAAP,CAAaT,SAAjB,EAA4B;AACxBQ,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBP,kBAAkB,CAACD,SAAD,CAAlC;AACH;;AACD,MAAIO,MAAM,CAACK,KAAP,CAAaC,UAAjB,EAA6B;AACzB,QAAIC,IAAI,GAAGP,MAAM,CAACK,KAAP,CAAaC,UAAxB;AACA,QAAIE,GAAG,GAAG9B,aAAa,CAACC,QAAD,EAAW,UAAU8B,KAAV,EAAiBC,QAAjB,EAA2B;AACzDA,MAAAA,QAAQ,CAACD,KAAK,CAACE,EAAN,CAASC,oBAAT,CAA8BL,IAAI,CAACM,MAAL,EAA9B,EAA6CC,cAA7C,EAAD,CAAR;AACA,aAAO,IAAP;AACH,KAHsB,CAAvB;AAIAb,IAAAA,IAAI,CAAC,aAAD,CAAJ,GAAsBO,GAAtB;AACH;;AACD,SAAOP,IAAP;AACH,CA7BM;AA8BP,OAAO,IAAIc,eAAe,GAAG,SAAlBA,eAAkB,CAAUf,MAAV,EAAkB;AAC3C,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAID,MAAM,CAACK,KAAP,CAAaW,SAAjB,EAA4B;AACxB;AACAf,IAAAA,IAAI,CAAC,OAAD,CAAJ,GAAgBX,sBAAsB,CAACU,MAAM,CAACK,KAAP,CAAaW,SAAd,CAAtC;AACH;;AACD,SAAOf,IAAP;AACH,CAPM","sourcesContent":["import { chainCommands, exitCode, newlineInCode, createParagraphNear, liftEmptyBlock, splitBlockKeepMarks, deleteSelection, joinBackward, selectNodeBackward } from 'prosemirror-commands';\nimport { undo, redo } from 'prosemirror-history';\nimport { undoInputRule } from 'prosemirror-inputrules';\nimport { splitListItemKeepMarks } from '../lists';\nimport { bold, italic, underline } from './commands';\nimport { toggleInlineFormat } from './../inline-style';\nvar mac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n// https://github.com/ProseMirror/prosemirror-example-setup/blob/master/src/keymap.js\nexport var buildKeymap = function (schema) {\n    var keys = {};\n    keys['Mod-z'] = undo;\n    keys['Shift-Mod-z'] = redo;\n    // tslint:disable-next-line:no-string-literal\n    keys['Backspace'] = chainCommands(undoInputRule, deleteSelection, joinBackward, selectNodeBackward);\n    // tslint:disable-next-line:no-string-literal\n    keys['Enter'] = chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlockKeepMarks);\n    if (!mac) {\n        keys['Mod-y'] = redo;\n    }\n    if (schema.marks.strong) {\n        keys['Mod-b'] = toggleInlineFormat(bold);\n    }\n    if (schema.marks.em) {\n        keys['Mod-i'] = toggleInlineFormat(italic);\n    }\n    if (schema.marks.underline) {\n        keys['Mod-u'] = toggleInlineFormat(underline);\n    }\n    if (schema.nodes.hard_break) {\n        var br_1 = schema.nodes.hard_break;\n        var cmd = chainCommands(exitCode, function (state, dispatch) {\n            dispatch(state.tr.replaceSelectionWith(br_1.create()).scrollIntoView());\n            return true;\n        });\n        keys['Shift-Enter'] = cmd;\n    }\n    return keys;\n};\nexport var buildListKeymap = function (schema) {\n    var keys = {};\n    if (schema.nodes.list_item) {\n        // tslint:disable-next-line:no-string-literal\n        keys['Enter'] = splitListItemKeepMarks(schema.nodes.list_item);\n    }\n    return keys;\n};\n"]},"metadata":{},"sourceType":"module"}