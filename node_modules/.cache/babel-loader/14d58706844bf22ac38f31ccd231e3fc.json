{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList } from '../components/CommonScript';\nexport const changeSampleTypeFilter = (inputParam, filterSampleType, SelectedSampleType) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/projectview/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      // const masterData = response.data\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.inputData,\n        ...responseData\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData,\n            filterSampleType,\n            nfilterSampleType: inputParam.inputData.nfilterSampleType,\n            SelectedSampleType: SelectedSampleType.item\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getuserComboServices(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/projectmaster/getUsers\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nuserrolecode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let userList;\n      const districtMap = constructOptionList(response[0].data || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      userList = districtMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          userList,\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ProjectView Click\n\nexport const getProjectView = (projectviewItem, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/projectview/getActiveProjectViewById\", {\n      nprojectmastercode: projectviewItem.nprojectmastercode,\n      nsampletypecode: masterData.filterSampleType[0].nsampletypecode,\n      userinfo: userInfo\n    }).then(response => {\n      let masterData1 = { ...masterData,\n        ...response.data\n      }; // ...masterData,\n      // ...response.data\n\n      masterData = masterData1;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          dataState: undefined,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/ProjectViewAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","sortData","constructOptionList","changeSampleTypeFilter","inputParam","filterSampleType","SelectedSampleType","dispatch","post","methodUrl","inputData","then","response","responseData","data","masterData","type","payload","loading","dataState","undefined","nfilterSampleType","item","catch","error","message","getuserComboServices","methodParam","selectedRecord","URL","userinfo","primarykey","all","userList","districtMap","get","status","warn","getProjectView","projectviewItem","userInfo","nprojectmastercode","nsampletypecode","masterData1"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {toast} from 'react-toastify';\r\nimport { DEFAULT_RETURN} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData ,constructOptionList } from '../components/CommonScript';\r\n\r\nexport const changeSampleTypeFilter = (inputParam, filterSampleType, SelectedSampleType) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/projectview/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                // const masterData = response.data\r\n                let responseData = { ...response.data }\r\n                responseData= sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.inputData,\r\n                    ...responseData,\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        \r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterSampleType,\r\n                            nfilterSampleType: inputParam.inputData.nfilterSampleType,\r\n                            SelectedSampleType: SelectedSampleType.item\r\n                            \r\n                            \r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getuserComboServices(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/projectmaster/getUsers\", { \"userinfo\": methodParam.inputData.userinfo, \"nuserrolecode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let userList;\r\n\r\n                const districtMap = constructOptionList(response[0].data || [], \"nusercode\",\r\n\r\n                \"susername\", undefined, undefined, false);              \r\n\r\n                userList = districtMap.get(\"OptionList\");\r\n\r\n                 \r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { userList,selectedRecord, loading: false, data: undefined, dataState: undefined } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n//ProjectView Click\r\nexport const getProjectView = (projectviewItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/projectview/getActiveProjectViewById\", {\r\n            nprojectmastercode: projectviewItem.nprojectmastercode,\r\n            nsampletypecode: masterData.filterSampleType[0].nsampletypecode,          \r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                \r\n\r\n                    let masterData1  = {...masterData,\r\n\r\n                        ...response.data }\r\n\r\n                    // ...masterData,\r\n                    // ...response.data\r\n                    masterData=masterData1\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData,\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}