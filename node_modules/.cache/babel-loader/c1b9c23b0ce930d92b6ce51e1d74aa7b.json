{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureAuditFields.jsx\";\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport ReactTooltip from 'react-tooltip';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, SampleType } from '../../components/Enumeration';\nimport 'rc-tabs/assets/index.css';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\n\nclass ConfigureAuditFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    this.onAuditTabChange = tab => {\n      this.setState({\n        selectedAuditTable: this.state.auditTable.find(screen => screen.eventKey === tab),\n        extractedColumnList: tab === \"registrationsample\" ? this.state.subSampleColumnList : this.state.sampleColumnList\n      });\n    };\n\n    if (this.props.selectedSampleType === SampleType.Masters) {\n      const screens = [{\n        eventKey: 'dynamicmaster',\n        name: this.props.formName,\n        formcode: Object.keys(this.props.auditData)[0]\n      }];\n      let sampleColumnList = [{\n        \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\",\n        \"field\": \"sampleauditfields\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_AUDITEDITCAPTURE\",\n        \"field\": \"sampleauditeditfields\",\n        \"width\": \"600px\"\n      }];\n      const auditTable = [{\n        eventKey: 'dynamicmaster',\n        name: \"IDS_FIELDS\"\n      }];\n      this.state = {\n        screens,\n        auditTable,\n        sampleColumnList,\n        extractedColumnList: sampleColumnList,\n        selectedScreen: {\n          eventKey: 'dynamicmaster',\n          name: this.props.formName,\n          formcode: Object.keys(this.props.auditData)[0]\n        },\n        selectedAuditTable: {\n          eventKey: 'dynamicmaster',\n          name: \"IDS_FIELDS\",\n          formcode: 1\n        }\n      };\n    } else if (this.props.selectedSampleType === SampleType.GOODSIN) {\n      const screens = [{\n        eventKey: 'goodsinsample',\n        name: \"IDS_GOODSIN\",\n        formcode: Object.keys(this.props.auditData)[0]\n      }];\n      let sampleColumnList = [{\n        \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\",\n        \"field\": \"sampleauditfields\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_AUDITEDITCAPTURE\",\n        \"field\": \"sampleauditeditfields\",\n        \"width\": \"600px\"\n      }];\n      const auditTable = [{\n        eventKey: 'goodsinsample',\n        name: \"IDS_FIELDS\"\n      }];\n      this.state = {\n        screens,\n        auditTable,\n        sampleColumnList,\n        extractedColumnList: sampleColumnList,\n        selectedScreen: {\n          eventKey: 'goodsinsample',\n          name: \"IDS_GOODSIN\",\n          formcode: Object.keys(this.props.auditData)[0]\n        },\n        selectedAuditTable: {\n          eventKey: 'goodsinsample',\n          name: \"IDS_FIELDS\",\n          formcode: 1\n        }\n      };\n    } //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\n    else if (this.props.selectedSampleType === SampleType.PROTOCOL) {\n      const screens = [{\n        eventKey: 'protocol',\n        name: \"IDS_PROTOCOL\",\n        formcode: Object.keys(this.props.auditData)[0]\n      }];\n      let sampleColumnList = [{\n        \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\",\n        \"field\": \"sampleauditfields\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_AUDITEDITCAPTURE\",\n        \"field\": \"sampleauditeditfields\",\n        \"width\": \"600px\"\n      }];\n      const auditTable = [{\n        eventKey: 'protocol',\n        name: \"IDS_FIELDS\"\n      }];\n      this.state = {\n        screens,\n        auditTable,\n        sampleColumnList,\n        extractedColumnList: sampleColumnList,\n        selectedScreen: {\n          eventKey: 'protocol',\n          name: \"IDS_GOIDS_PROTOCOLODSIN\",\n          formcode: Object.keys(this.props.auditData)[0]\n        },\n        selectedAuditTable: {\n          eventKey: 'protocol',\n          name: \"IDS_FIELDS\",\n          formcode: 1\n        }\n      };\n    } else {\n      const screens = [{\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: formCode.SAMPLEREGISTRATION\n      }];\n      let sampleColumnList = [{\n        \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\",\n        \"field\": \"sampleauditfields\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_AUDITEDITCAPTURE\",\n        \"field\": \"sampleauditeditfields\",\n        \"width\": \"600px\"\n      }];\n      let subSampleColumnList = [{\n        \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\",\n        \"field\": \"subsampleauditfields\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_AUDITEDITCAPTURE\",\n        \"field\": \"subsampleauditeditfields\",\n        \"width\": \"600px\"\n      }];\n      const auditTable = [{\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEFIELDS\"\n      }];\n\n      if (this.props.needSubSample) {\n        auditTable.push({\n          eventKey: 'registrationsample',\n          name: \"IDS_SUBSAMPLEFIELDS\"\n        });\n      }\n\n      this.state = {\n        screens,\n        auditTable,\n        sampleColumnList,\n        subSampleColumnList,\n        extractedColumnList: sampleColumnList,\n        selectedScreen: {\n          eventKey: 'registration',\n          name: \"IDS_SAMPLEREGISTRATION\",\n          formcode: formCode.SAMPLEREGISTRATION\n        },\n        selectedAuditTable: {\n          eventKey: 'registration',\n          name: \"IDS_SAMPLEFIELDS\",\n          formcode: 1\n        }\n      };\n    }\n  }\n\n  render() {\n    //console.log(\"props:\",this.props, this.state);\n    //console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen =>\n    /*#__PURE__*/\n    //{\n    //return console.log(\"screen.name:\", screen.name, this.props.dataResult[this.state.selectedScreen.formcode]),\n    React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedAuditTable.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onAuditTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 31\n      }\n    }, this.state.auditTable.map(auditTable =>\n    /*#__PURE__*/\n    //{\n    //return console.log(\"screen.name2:\", auditTable.name, this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]),\n    React.createElement(TabPane, {\n      name: auditTable.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: auditTable.name\n      }),\n      key: auditTable.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      id: \"tooltip-grid-wrap\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '550px'\n      },\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\",\n      data: this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\",\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'],\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 73\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 65\n      }\n    }), this.state.extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode, this.props.operation),\n        checked: row[\"dataItem\"][column.field] || false,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 81\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(ReactTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 49\n      }\n    }))) //}\n    ))) //}\n    ))));\n  }\n\n}\n\nexport default injectIntl(ConfigureAuditFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/designtemplatemapping/ConfigureAuditFields.jsx"],"names":["LocalizationProvider","React","injectIntl","ReactTooltip","AtTabs","CustomSwitch","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","SampleType","Grid","GridColumn","ConfigureAuditFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","onAuditTabChange","selectedAuditTable","auditTable","extractedColumnList","subSampleColumnList","sampleColumnList","selectedSampleType","Masters","name","formName","formcode","Object","keys","auditData","GOODSIN","PROTOCOL","SAMPLEREGISTRATION","needSubSample","push","render","map","intl","formatMessage","id","height","dataResult","dataState","dataStateChange","row","column","field","title","textAlign","event","onChangeToggle","dataIndex","operation","columnIndex"],"mappings":"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","sourcesContent":["import { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl} from 'react-intl'\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\n\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, SampleType } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\n\r\n\r\nclass ConfigureAuditFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if(this.props.selectedSampleType === SampleType.Masters ){\r\n            const  screens = [{ eventKey: 'dynamicmaster', name:this.props.formName, formcode: Object.keys(this.props.auditData)[0] }];\r\n            let sampleColumnList =[  { \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\", \"field\": \"sampleauditfields\", \"width\": \"600px\" },\r\n                                     { \"title\": \"IDS_AUDITEDITCAPTURE\", \"field\": \"sampleauditeditfields\", \"width\": \"600px\" },\r\n                                ];\r\n            const  auditTable = [{ eventKey: 'dynamicmaster', name: \"IDS_FIELDS\" },];\r\n\r\n            this.state = {\r\n                screens,auditTable,\r\n                sampleColumnList,\r\n                extractedColumnList:sampleColumnList,\r\n                selectedScreen: { eventKey: 'dynamicmaster', name:this.props.formName, formcode:  Object.keys(this.props.auditData)[0]},\r\n                selectedAuditTable: { eventKey: 'dynamicmaster', name: \"IDS_FIELDS\", formcode: 1}\r\n            }\r\n        }\r\n        else if(this.props.selectedSampleType === SampleType.GOODSIN){\r\n            const  screens = [{ eventKey: 'goodsinsample', name:\"IDS_GOODSIN\", formcode: Object.keys(this.props.auditData)[0] }];\r\n            let sampleColumnList =[  { \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\", \"field\": \"sampleauditfields\", \"width\": \"600px\" },\r\n                                     { \"title\": \"IDS_AUDITEDITCAPTURE\", \"field\": \"sampleauditeditfields\", \"width\": \"600px\" },\r\n                                ];\r\n            const  auditTable = [{ eventKey: 'goodsinsample', name: \"IDS_FIELDS\" },];\r\n\r\n            this.state = {\r\n                screens,auditTable,\r\n                sampleColumnList,\r\n                extractedColumnList:sampleColumnList,\r\n                selectedScreen: { eventKey: 'goodsinsample', name:\"IDS_GOODSIN\", formcode:  Object.keys(this.props.auditData)[0]},\r\n                selectedAuditTable: { eventKey: 'goodsinsample', name: \"IDS_FIELDS\", formcode: 1}\r\n            } \r\n        }\r\n        //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025\r\n        else if(this.props.selectedSampleType === SampleType.PROTOCOL){\r\n            const  screens = [{ eventKey: 'protocol', name:\"IDS_PROTOCOL\", formcode: Object.keys(this.props.auditData)[0] }];\r\n            let sampleColumnList =[  { \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\", \"field\": \"sampleauditfields\", \"width\": \"600px\" },\r\n                                     { \"title\": \"IDS_AUDITEDITCAPTURE\", \"field\": \"sampleauditeditfields\", \"width\": \"600px\" },\r\n                                ];\r\n            const  auditTable = [{ eventKey: 'protocol', name: \"IDS_FIELDS\" },];\r\n\r\n            this.state = {\r\n                screens,auditTable,\r\n                sampleColumnList,\r\n                extractedColumnList:sampleColumnList,\r\n                selectedScreen: { eventKey: 'protocol', name:\"IDS_GOIDS_PROTOCOLODSIN\", formcode:  Object.keys(this.props.auditData)[0]},\r\n                selectedAuditTable: { eventKey: 'protocol', name: \"IDS_FIELDS\", formcode: 1}\r\n            } \r\n        }\r\n        else{\r\n            const  screens = [{ eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION }];\r\n            let sampleColumnList =[  { \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\", \"field\": \"sampleauditfields\", \"width\": \"600px\" },\r\n                                    { \"title\": \"IDS_AUDITEDITCAPTURE\", \"field\": \"sampleauditeditfields\", \"width\": \"600px\" },];\r\n            \r\n            let subSampleColumnList =[  { \"title\": \"IDS_AUDITOTHERACTIONCAPTURE\", \"field\": \"subsampleauditfields\", \"width\": \"600px\" },\r\n                                        { \"title\": \"IDS_AUDITEDITCAPTURE\", \"field\": \"subsampleauditeditfields\", \"width\": \"600px\" },];\r\n        \r\n\r\n            const  auditTable = [{ eventKey: 'registration', name: \"IDS_SAMPLEFIELDS\" },];\r\n            if(this.props.needSubSample){\r\n                    auditTable.push({ eventKey: 'registrationsample', name: \"IDS_SUBSAMPLEFIELDS\"});\r\n            }\r\n            this.state = {\r\n                screens,auditTable,\r\n                sampleColumnList, subSampleColumnList,\r\n                extractedColumnList:sampleColumnList,\r\n                selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION },\r\n                selectedAuditTable: { eventKey: 'registration', name: \"IDS_SAMPLEFIELDS\", formcode: 1}\r\n            }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n\r\n    onAuditTabChange = (tab) => {\r\n        this.setState({\r\n            selectedAuditTable: this.state.auditTable.find(screen => screen.eventKey === tab),\r\n            extractedColumnList: tab === \"registrationsample\" ? this.state.subSampleColumnList : this.state.sampleColumnList\r\n        })\r\n    }\r\n    render() {\r\n      \r\n        //console.log(\"props:\",this.props, this.state);\r\n        //console.log(\" this.props.dataResult[this.state.selectedScreen.formcode]:\", this.props.dataResult[this.state.selectedScreen.formcode]);\r\n        return (\r\n            <>\r\n        {/* {this.props.selectedSampleType === SampleType.Masters ?\r\n                    <PerfectScrollbar>\r\n                        <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' />\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n                                    \r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        <ReactTooltip />\r\n                    </PerfectScrollbar>        \r\n\r\n                : */}\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>//{\r\n                       //return console.log(\"screen.name:\", screen.name, this.props.dataResult[this.state.selectedScreen.formcode]),\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                              \r\n                              <Tabs activeKey={this.state.selectedAuditTable.eventKey} moreIcon=\"...\" onChange={this.onAuditTabChange}>\r\n                                    {this.state.auditTable.map(auditTable =>//{\r\n                                        //return console.log(\"screen.name2:\", auditTable.name, this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]),\r\n                                        <TabPane name={auditTable.eventKey} tab={this.props.intl.formatMessage({ id: auditTable.name })} key={auditTable.eventKey}>\r\n                                        \r\n                                        <PerfectScrollbar>\r\n                                                <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' />\r\n                                                <AtTableWrap className=\"at-list-table\">\r\n                                                    <LocalizationProvider language=\"lang\">\r\n                                                        <>\r\n                                                        <Grid\r\n                                                                className={\"active-paging\"}\r\n                                                                style={{ height: '550px' }}\r\n                                                                resizable\r\n                                                                reorderable\r\n                                                                scrollable={\"scrollable\"}\r\n                                                                data={this.props.dataResult[this.state.selectedScreen.formcode][this.state.selectedAuditTable.eventKey]}\r\n                                                                {...this.state.dataState}\r\n                                                                onDataStateChange={this.dataStateChange}>\r\n                                                                <GridColumn\r\n                                                                    field=\"label\"\r\n                                                                    title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                                    cell={(row) => (\r\n                                                                        <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                            {row[\"dataItem\"]['label']}\r\n                                                                        </td>\r\n                                                                    )}\r\n                                                                />\r\n                                                                {this.state.extractedColumnList.map(column =>\r\n                                                                    <GridColumn\r\n                                                                        field={column.field}\r\n                                                                        title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                                        headerClassName=\"text-center\"\r\n                                                                        cell={(row) => (\r\n                                                                            <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                                <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                                    onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, \r\n                                                                                                    row.dataIndex, this.state.selectedScreen.formcode,\r\n                                                                                                    this.props.operation)}\r\n                                                                                    checked={row[\"dataItem\"][column.field] || false}\r\n                                                                                    name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                            \r\n                                                                            \r\n                                                                            </td>)}\r\n                                                                    />\r\n                                                                )}\r\n\r\n                                                        </Grid>\r\n                                                        </> \r\n                                                    \r\n                                                    </LocalizationProvider>\r\n                                                </AtTableWrap>\r\n                                                <ReactTooltip />\r\n                                            </PerfectScrollbar>\r\n                                            \r\n                                        </TabPane>\r\n                                        //}\r\n                                    )}\r\n                                </Tabs>\r\n                                \r\n                             </TabPane>\r\n                             //}\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n           {/* // }  */}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default injectIntl(ConfigureAuditFields)"]},"metadata":{},"sourceType":"module"}