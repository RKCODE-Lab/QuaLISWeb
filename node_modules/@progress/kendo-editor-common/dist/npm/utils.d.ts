import { Node, NodeType, ParseOptions, Schema } from 'prosemirror-model';
import { EditorState } from 'prosemirror-state';
import { Command } from './types/command';
export declare const changeStylesString: (styleText: string, newStyle: {
    style: string;
    value: RegExp;
    newValue?: string;
}) => {
    changed: boolean;
    style: string;
};
/**
 * Determines if a given node type can be inserted at the current cursor position.
 */
export declare const canInsert: (state: EditorState<any>, nodeType: NodeType<any>) => boolean;
export declare const findNthParentNodeOfType: (nodeType: NodeType<any>, depth?: number) => Function;
/**
 * Inserts the given node at the place of current selection.
 */
export declare const insertNode: (node: Node<any>, scrollIntoView?: boolean) => Command;
export declare const hasSameMarkup: (dom1: string, dom2: string, schema: Schema<any, any>, parseOptions?: ParseOptions<any>) => boolean;
export declare const getSelectionText: (state: EditorState<any>) => string;
export declare const getNodeFromSelection: (state: EditorState<any>) => Node<any>;
/**
 * Returns the text from the selection if only text is selected on a single line.
 * If selection contains leaf nodes (br, image) between text elements or
 * text from multiple block nodes, the function will return empty string.
 *
 * Useful for values of the inputs of Link and Find&Replace dialogs where the inputs value has been retrieved from the selection and
 * should be single line text only.
 */
export declare const selectedLineTextOnly: (state: EditorState<any>) => string;
/**
 * Used by ViewHtml/ViewSource dialogs for making the HTML more readable.
 */
export declare const indentHtml: (content: string) => string;
export declare const shallowEqual: (object1: any, object2: any) => boolean;
